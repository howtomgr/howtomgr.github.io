{"pageProps":{"guide":{"name":"elasticsearch","displayName":"Elasticsearch","slug":"elasticsearch","description":"Repo for elasticsearch","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/elasticsearch","updatedAt":"2025-09-16T02:33:43Z","createdAt":"2025-09-08T03:06:51Z","readmeRaw":"# Elasticsearch Installation Guide\n\nElasticsearch is a free and open-source distributed, RESTful search and analytics engine. Originally developed by Shay Banon and now maintained by Elastic N.V., Elasticsearch is built on Apache Lucene and designed for horizontal scalability, reliability, and real-time search. It serves as a FOSS alternative to commercial search solutions like Amazon CloudSearch, Azure Cognitive Search, or Splunk Enterprise, offering enterprise-grade features including full-text search, aggregations, and analytics without licensing costs, with features like distributed architecture, RESTful API, and multi-tenancy.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 4GB minimum (16GB+ recommended for production)\n  - Storage: 20GB minimum (SSD strongly recommended for performance)\n  - Network: Stable connectivity for cluster communication\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9200 (HTTP/REST API)\n  - Port 9300 (Node communication)\n  - Additional ports for cluster discovery\n- **Dependencies**:\n  - Java 11 or Java 17 (OpenJDK recommended)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install Java (OpenJDK)\nsudo yum install -y java-11-openjdk java-11-openjdk-devel\n\n# Import Elasticsearch GPG key\nsudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch\n\n# Create Elasticsearch repository\nsudo tee /etc/yum.repos.d/elasticsearch.repo <<EOF\n[elasticsearch]\nname=Elasticsearch repository for 8.x packages\nbaseurl=https://artifacts.elastic.co/packages/8.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=0\nautorefresh=1\ntype=rpm-md\nEOF\n\n# Install Elasticsearch\nsudo yum install -y --enablerepo=elasticsearch elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --permanent --add-port=9300/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncurl -X GET \"localhost:9200/\"\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install Java (OpenJDK)\nsudo apt install -y openjdk-11-jdk\n\n# Install prerequisite packages\nsudo apt install -y wget gnupg apt-transport-https\n\n# Import Elasticsearch GPG key\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/elasticsearch.gpg\n\n# Add Elasticsearch repository\necho \"deb https://artifacts.elastic.co/packages/8.x/apt stable main\" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list\n\n# Update package index\nsudo apt update\n\n# Install Elasticsearch\nsudo apt install -y elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configure firewall\nsudo ufw allow 9200\nsudo ufw allow 9300\n```\n\n### Arch Linux\n\n```bash\n# Install Java\nsudo pacman -S jdk11-openjdk\n\n# Elasticsearch is available in AUR\nyay -S elasticsearch\n\n# Alternative: Install from AUR with makepkg\ngit clone https://aur.archlinux.org/elasticsearch.git\ncd elasticsearch\nmakepkg -si\n\n# Create elasticsearch user and group\nsudo useradd -r -s /sbin/nologin elasticsearch\n\n# Create necessary directories\nsudo mkdir -p /var/lib/elasticsearch /var/log/elasticsearch\nsudo chown elasticsearch:elasticsearch /var/lib/elasticsearch /var/log/elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configuration location: /etc/elasticsearch/\n```\n\n### Alpine Linux\n\n```bash\n# Install Java\napk add --no-cache openjdk11\n\n# Elasticsearch is not officially packaged for Alpine\n# Use Docker for Elasticsearch on Alpine:\n\n# Install Docker\napk add --no-cache docker docker-compose\n\n# Enable and start Docker\nrc-update add docker default\nrc-service docker start\n\n# Run Elasticsearch container\ndocker run -d \\\n  --name elasticsearch \\\n  --restart unless-stopped \\\n  -p 9200:9200 -p 9300:9300 \\\n  -e \"discovery.type=single-node\" \\\n  -e \"xpack.security.enabled=false\" \\\n  -v /var/lib/elasticsearch:/usr/share/elasticsearch/data \\\n  elasticsearch:8.11.3\n\n# Verify installation\ncurl -X GET \"localhost:9200/\"\n```\n\n### openSUSE/SLES\n\n```bash\n# Install Java\nsudo zypper install -y java-11-openjdk java-11-openjdk-devel\n\n# Elasticsearch is not officially packaged for openSUSE/SLES\n# Use Docker or manual installation:\n\n# Method 1: Docker installation\nsudo zypper install -y docker docker-compose\nsudo systemctl enable --now docker\n\ndocker run -d \\\n  --name elasticsearch \\\n  --restart unless-stopped \\\n  -p 9200:9200 -p 9300:9300 \\\n  -e \"discovery.type=single-node\" \\\n  -e \"xpack.security.enabled=false\" \\\n  -v /var/lib/elasticsearch:/usr/share/elasticsearch/data \\\n  elasticsearch:8.11.3\n\n# Method 2: Manual installation from tarball\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.11.3-linux-x86_64.tar.gz\ntar -xzf elasticsearch-8.11.3-linux-x86_64.tar.gz\nsudo mv elasticsearch-8.11.3 /usr/local/elasticsearch\n\n# Create elasticsearch user and directories\nsudo useradd -r elasticsearch\nsudo mkdir -p /var/lib/elasticsearch /var/log/elasticsearch\nsudo chown elasticsearch:elasticsearch /var/lib/elasticsearch /var/log/elasticsearch\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew tap elastic/tap\nbrew install elastic/tap/elasticsearch-full\n\n# Start Elasticsearch service\nbrew services start elastic/tap/elasticsearch-full\n\n# Or run manually\nelasticsearch\n\n# Configuration location: /usr/local/etc/elasticsearch/\n# Alternative: /opt/homebrew/etc/elasticsearch/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Install Java\npkg install openjdk11\n\n# Install Elasticsearch from ports\ncd /usr/ports/textproc/elasticsearch8\nmake install clean\n\n# Enable Elasticsearch\necho 'elasticsearch_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice elasticsearch start\n\n# Configuration location: /usr/local/etc/elasticsearch/\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install elasticsearch\n\n# Method 2: Using Scoop\nscoop bucket add java\nscoop install openjdk11\nscoop bucket add extras\nscoop install elasticsearch\n\n# Method 3: Manual installation\n# Download from https://www.elastic.co/downloads/elasticsearch\n# Extract to C:\\elasticsearch\n\n# Install as Windows service\n\"C:\\elasticsearch\\bin\\elasticsearch-service.bat\" install\n\n# Start service\nnet start Elasticsearch\n\n# Configuration location: C:\\elasticsearch\\config\\elasticsearch.yml\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create elasticsearch user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/elasticsearch -s /sbin/nologin -c \"Elasticsearch\" elasticsearch\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/elasticsearch/elasticsearch.yml`\n- Debian/Ubuntu: `/etc/elasticsearch/elasticsearch.yml`\n- Arch Linux: `/etc/elasticsearch/elasticsearch.yml`\n- Alpine Linux: Docker container configuration\n- openSUSE/SLES: `/etc/elasticsearch/elasticsearch.yml` (manual installation)\n- macOS: `/usr/local/etc/elasticsearch/elasticsearch.yml`\n- FreeBSD: `/usr/local/etc/elasticsearch/elasticsearch.yml`\n- Windows: `C:\\elasticsearch\\config\\elasticsearch.yml`\n\n3. **Essential settings to change**:\n\n```yaml\n# /etc/elasticsearch/elasticsearch.yml\ncluster.name: my-application\nnode.name: node-1\n\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\n\nnetwork.host: 127.0.0.1\nhttp.port: 9200\n\ndiscovery.type: single-node\n\n# Security (disable for initial setup, enable for production)\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\n# Memory settings\nbootstrap.memory_lock: true\n\n# Index settings\naction.auto_create_index: .monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if Elasticsearch is running\nsudo systemctl status elasticsearch\n\n# Test REST API\ncurl -X GET \"localhost:9200/\"\n\n# Check cluster health\ncurl -X GET \"localhost:9200/_cluster/health?pretty\"\n\n# Check nodes\ncurl -X GET \"localhost:9200/_cat/nodes?v\"\n\n# Test indexing and searching\ncurl -X PUT \"localhost:9200/test_index/_doc/1\" -H 'Content-Type: application/json' -d '{\"message\": \"Hello Elasticsearch\"}'\ncurl -X GET \"localhost:9200/test_index/_search?pretty\"\n```\n\n**WARNING:** Enable X-Pack security for production deployments!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Elasticsearch to start on boot\nsudo systemctl enable elasticsearch\n\n# Start Elasticsearch\nsudo systemctl start elasticsearch\n\n# Stop Elasticsearch\nsudo systemctl stop elasticsearch\n\n# Restart Elasticsearch\nsudo systemctl restart elasticsearch\n\n# Reload configuration (not supported, requires restart)\nsudo systemctl restart elasticsearch\n\n# Check status\nsudo systemctl status elasticsearch\n\n# View logs\nsudo journalctl -u elasticsearch -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Elasticsearch runs in Docker container on Alpine\ndocker start elasticsearch\ndocker stop elasticsearch\ndocker restart elasticsearch\n\n# Check status\ndocker ps | grep elasticsearch\n\n# View logs\ndocker logs -f elasticsearch\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'elasticsearch_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Elasticsearch\nservice elasticsearch start\n\n# Stop Elasticsearch\nservice elasticsearch stop\n\n# Restart Elasticsearch\nservice elasticsearch restart\n\n# Check status\nservice elasticsearch status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start elastic/tap/elasticsearch-full\nbrew services stop elastic/tap/elasticsearch-full\nbrew services restart elastic/tap/elasticsearch-full\n\n# Check status\nbrew services list | grep elasticsearch\n\n# Manual control\nelasticsearch\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Elasticsearch service\nnet start Elasticsearch\n\n# Stop Elasticsearch service\nnet stop Elasticsearch\n\n# Using PowerShell\nStart-Service Elasticsearch\nStop-Service Elasticsearch\nRestart-Service Elasticsearch\n\n# Check status\nGet-Service Elasticsearch\n\n# View logs\nGet-EventLog -LogName Application -Source Elasticsearch\n```\n\n## Advanced Configuration\n\n### Cluster Configuration\n\n```yaml\n# Multi-node cluster configuration\ncluster.name: production-cluster\nnode.name: node-1\nnode.roles: [master, data, ingest]\n\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ntransport.port: 9300\n\ndiscovery.seed_hosts: [\"node1.example.com\", \"node2.example.com\", \"node3.example.com\"]\ncluster.initial_master_nodes: [\"node-1\", \"node-2\", \"node-3\"]\n\n# Node-specific roles\n# Master-eligible node\nnode.roles: [master]\n\n# Data node\nnode.roles: [data]\n\n# Ingest node\nnode.roles: [ingest]\n\n# Coordinating only node\nnode.roles: []\n```\n\n### Memory and Performance Configuration\n\n```yaml\n# JVM heap settings (in elasticsearch.yml or jvm.options)\n# Set via environment variables:\nES_JAVA_OPTS: \"-Xms4g -Xmx4g\"\n\n# Thread pool settings\nthread_pool:\n  write:\n    size: 8\n    queue_size: 200\n  search:\n    size: 13\n    queue_size: 1000\n\n# Index settings\nindices.memory.index_buffer_size: 20%\nindices.breaker.total.use_real_memory: true\n```\n\n### Advanced Security Settings\n\n```yaml\n# X-Pack Security configuration\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\n# SSL/TLS configuration\nxpack.security.http.ssl.enabled: true\nxpack.security.http.ssl.keystore.path: certs/http.p12\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: certs/transport.p12\nxpack.security.transport.ssl.truststore.path: certs/transport.p12\n\n# Authentication realms\nxpack.security.authc.realms:\n  native:\n    native1:\n      order: 0\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/elasticsearch\nupstream elasticsearch_backend {\n    server 127.0.0.1:9200 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:9201 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 80;\n    server_name elasticsearch.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name elasticsearch.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/elasticsearch.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/elasticsearch.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n    location / {\n        proxy_pass http://elasticsearch_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n# /etc/apache2/sites-available/elasticsearch.conf\n<VirtualHost *:443>\n    ServerName elasticsearch.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/elasticsearch.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/elasticsearch.example.com/privkey.pem\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:9200/\n    ProxyPassReverse / http://localhost:9200/\n    \n    Header always set Strict-Transport-Security \"max-age=63072000\"\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend elasticsearch_frontend\n    bind *:9200 ssl crt /etc/haproxy/certs/elasticsearch.pem\n    mode http\n    option httplog\n    default_backend elasticsearch_backend\n\nbackend elasticsearch_backend\n    mode http\n    balance roundrobin\n    option httpchk GET /_cluster/health\n    server elasticsearch1 127.0.0.1:9200 check\n    server elasticsearch2 127.0.0.1:9201 check backup\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate certificates using Elasticsearch's certificate tool\ncd /usr/share/elasticsearch\nsudo bin/elasticsearch-certutil ca --pem --out /tmp/ca.zip\nsudo unzip /tmp/ca.zip -d /tmp/ca\nsudo bin/elasticsearch-certutil cert --ca-cert /tmp/ca/ca.crt --ca-key /tmp/ca/ca.key --pem --out /tmp/certs.zip\nsudo unzip /tmp/certs.zip -d /tmp/certs\n\n# Create certificates directory\nsudo mkdir -p /etc/elasticsearch/certs\nsudo cp /tmp/ca/ca.crt /etc/elasticsearch/certs/\nsudo cp /tmp/certs/instance/instance.crt /etc/elasticsearch/certs/\nsudo cp /tmp/certs/instance/instance.key /etc/elasticsearch/certs/\n\n# Create keystore\nsudo bin/elasticsearch-keystore create\nsudo bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password\nsudo bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password\n\n# Set permissions\nsudo chown -R elasticsearch:elasticsearch /etc/elasticsearch/certs\nsudo chmod 600 /etc/elasticsearch/certs/*\n```\n\n### User Management and Authentication\n\n```bash\n# Set passwords for built-in users (run after enabling security)\nsudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto\n\n# Create custom users\ncurl -X POST \"localhost:9200/_security/user/appuser\" -H 'Content-Type: application/json' -u elastic:password -d'\n{\n  \"password\" : \"SecurePassword123!\",\n  \"roles\" : [ \"kibana_admin\", \"monitoring_user\" ],\n  \"full_name\" : \"Application User\",\n  \"email\" : \"appuser@example.com\"\n}'\n\n# Create custom roles\ncurl -X POST \"localhost:9200/_security/role/log_reader\" -H 'Content-Type: application/json' -u elastic:password -d'\n{\n  \"cluster\": [\"monitor\"],\n  \"indices\": [\n    {\n      \"names\": [\"logs-*\"],\n      \"privileges\": [\"read\", \"view_index_metadata\"]\n    }\n  ]\n}'\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 9200\nsudo ufw allow from 192.168.1.0/24 to any port 9300\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=elasticsearch\nsudo firewall-cmd --permanent --zone=elasticsearch --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=elasticsearch --add-port=9200/tcp\nsudo firewall-cmd --permanent --zone=elasticsearch --add-port=9300/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9200 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9300 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port { 9200, 9300 }\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Elasticsearch HTTP\" -Direction Inbound -Protocol TCP -LocalPort 9200 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName \"Elasticsearch Transport\" -Direction Inbound -Protocol TCP -LocalPort 9300 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Index Templates and Mappings\n\n```bash\n# Create index template\ncurl -X PUT \"localhost:9200/_index_template/logs_template\" -H 'Content-Type: application/json' -d'\n{\n  \"index_patterns\": [\"logs-*\"],\n  \"template\": {\n    \"settings\": {\n      \"number_of_shards\": 1,\n      \"number_of_replicas\": 1,\n      \"index.refresh_interval\": \"30s\"\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"timestamp\": {\n          \"type\": \"date\"\n        },\n        \"level\": {\n          \"type\": \"keyword\"\n        },\n        \"message\": {\n          \"type\": \"text\",\n          \"analyzer\": \"standard\"\n        },\n        \"host\": {\n          \"type\": \"keyword\"\n        }\n      }\n    }\n  }\n}'\n\n# Create index with custom settings\ncurl -X PUT \"localhost:9200/my_index\" -H 'Content-Type: application/json' -d'\n{\n  \"settings\": {\n    \"number_of_shards\": 3,\n    \"number_of_replicas\": 2,\n    \"analysis\": {\n      \"analyzer\": {\n        \"custom_analyzer\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\"lowercase\", \"asciifolding\"]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"title\": {\n        \"type\": \"text\",\n        \"analyzer\": \"custom_analyzer\"\n      },\n      \"content\": {\n        \"type\": \"text\"\n      },\n      \"tags\": {\n        \"type\": \"keyword\"\n      },\n      \"created_at\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}'\n```\n\n### Index Lifecycle Management\n\n```bash\n# Create ILM policy\ncurl -X PUT \"localhost:9200/_ilm/policy/logs_policy\" -H 'Content-Type: application/json' -d'\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"10gb\",\n            \"max_age\": \"7d\"\n          }\n        }\n      },\n      \"warm\": {\n        \"min_age\": \"7d\",\n        \"actions\": {\n          \"allocate\": {\n            \"number_of_replicas\": 0\n          }\n        }\n      },\n      \"cold\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"allocate\": {\n            \"number_of_replicas\": 0\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"90d\"\n      }\n    }\n  }\n}'\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Elasticsearch-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# Elasticsearch optimizations\nvm.max_map_count = 262144\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nEOF\n\nsudo sysctl -p\n\n# Disable swap\nsudo swapoff -a\necho 'vm.swappiness=1' | sudo tee -a /etc/sysctl.conf\n\n# Set file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\nelasticsearch soft nofile 65535\nelasticsearch hard nofile 65535\nelasticsearch soft memlock unlimited\nelasticsearch hard memlock unlimited\nEOF\n```\n\n### JVM and Memory Tuning\n\n```bash\n# JVM options (/etc/elasticsearch/jvm.options)\n# Set heap size (50% of available RAM, max 32GB)\n-Xms8g\n-Xmx8g\n\n# GC settings\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=16m\n-XX:+UnlockExperimentalVMOptions\n-XX:+UnlockDiagnosticVMOptions\n-XX:+G1PrintRegionRememberedSetInfo\n\n# Memory lock\n-XX:+AlwaysPreTouch\n```\n\n### Index and Query Optimization\n\n```bash\n# Index optimization settings\ncurl -X PUT \"localhost:9200/my_index/_settings\" -H 'Content-Type: application/json' -d'\n{\n  \"index\": {\n    \"refresh_interval\": \"30s\",\n    \"number_of_replicas\": 1,\n    \"routing.allocation.total_shards_per_node\": 3,\n    \"translog.flush_threshold_size\": \"1gb\",\n    \"translog.sync_interval\": \"30s\"\n  }\n}'\n\n# Force merge indices\ncurl -X POST \"localhost:9200/my_index/_forcemerge?max_num_segments=1\"\n\n# Clear cache\ncurl -X POST \"localhost:9200/_cache/clear\"\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Cluster health\ncurl -X GET \"localhost:9200/_cluster/health?pretty\"\n\n# Node statistics\ncurl -X GET \"localhost:9200/_nodes/stats?pretty\"\n\n# Index statistics\ncurl -X GET \"localhost:9200/_stats?pretty\"\n\n# Hot threads\ncurl -X GET \"localhost:9200/_nodes/hot_threads\"\n\n# Task management\ncurl -X GET \"localhost:9200/_tasks?detailed=true&actions=*search\"\n\n# Pending cluster tasks\ncurl -X GET \"localhost:9200/_cluster/pending_tasks\"\n```\n\n### External Monitoring Setup\n\n```bash\n# Install Metricbeat for monitoring\ncurl -L -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-8.11.3-linux-x86_64.tar.gz\ntar xzvf metricbeat-8.11.3-linux-x86_64.tar.gz\nsudo mv metricbeat-8.11.3-linux-x86_64 /usr/local/metricbeat\n\n# Configure Metricbeat for Elasticsearch monitoring\nsudo tee /usr/local/metricbeat/metricbeat.yml <<EOF\nmetricbeat.modules:\n- module: elasticsearch\n  metricsets:\n    - node\n    - node_stats\n    - cluster_stats\n  period: 10s\n  hosts: [\"localhost:9200\"]\n\noutput.elasticsearch:\n  hosts: [\"localhost:9200\"]\n\nsetup.kibana:\n  host: \"localhost:5601\"\nEOF\n\n# Create systemd service for Metricbeat\nsudo tee /etc/systemd/system/metricbeat.service <<EOF\n[Unit]\nDescription=Metricbeat\nAfter=network.target\n\n[Service]\nType=simple\nUser=elasticsearch\nWorkingDirectory=/usr/local/metricbeat\nExecStart=/usr/local/metricbeat/metricbeat -c /usr/local/metricbeat/metricbeat.yml\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now metricbeat\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# elasticsearch-health-check.sh\n\n# Check Elasticsearch service\nif ! systemctl is-active elasticsearch >/dev/null 2>&1; then\n    echo \"CRITICAL: Elasticsearch service is not running\"\n    exit 2\nfi\n\n# Check HTTP API\nif ! curl -s http://localhost:9200/ >/dev/null; then\n    echo \"CRITICAL: Cannot connect to Elasticsearch HTTP API\"\n    exit 2\nfi\n\n# Check cluster health\nCLUSTER_STATUS=$(curl -s http://localhost:9200/_cluster/health | jq -r '.status')\ncase $CLUSTER_STATUS in\n    \"green\")\n        echo \"OK: Cluster health is green\"\n        exit 0\n        ;;\n    \"yellow\")\n        echo \"WARNING: Cluster health is yellow\"\n        exit 1\n        ;;\n    \"red\")\n        echo \"CRITICAL: Cluster health is red\"\n        exit 2\n        ;;\n    *)\n        echo \"UNKNOWN: Cannot determine cluster health\"\n        exit 3\n        ;;\nesac\n```\n\n## Backup and Restore\n\n### Snapshot Repository Setup\n\n```bash\n# Create snapshot repository\ncurl -X PUT \"localhost:9200/_snapshot/backup_repo\" -H 'Content-Type: application/json' -d'\n{\n  \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"/backup/elasticsearch\",\n    \"compress\": true,\n    \"max_snapshot_bytes_per_sec\": \"50mb\",\n    \"max_restore_bytes_per_sec\": \"50mb\"\n  }\n}'\n\n# Create backup directory\nsudo mkdir -p /backup/elasticsearch\nsudo chown elasticsearch:elasticsearch /backup/elasticsearch\n\n# Add repository path to elasticsearch.yml\necho 'path.repo: [\"/backup/elasticsearch\"]' | sudo tee -a /etc/elasticsearch/elasticsearch.yml\nsudo systemctl restart elasticsearch\n```\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# elasticsearch-backup.sh\n\nSNAPSHOT_NAME=\"snapshot-$(date +%Y%m%d_%H%M%S)\"\n\n# Create snapshot\ncurl -X PUT \"localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME?wait_for_completion=true\" -H 'Content-Type: application/json' -d'\n{\n  \"indices\": \"*\",\n  \"ignore_unavailable\": true,\n  \"include_global_state\": true,\n  \"metadata\": {\n    \"taken_by\": \"elasticsearch-backup-script\",\n    \"taken_because\": \"scheduled backup\"\n  }\n}'\n\n# Verify snapshot\nSNAPSHOT_STATUS=$(curl -s \"localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME\" | jq -r '.snapshots[0].state')\n\nif [ \"$SNAPSHOT_STATUS\" = \"SUCCESS\" ]; then\n    echo \"Backup completed successfully: $SNAPSHOT_NAME\"\nelse\n    echo \"Backup failed: $SNAPSHOT_NAME\"\n    exit 1\nfi\n\n# Clean up old snapshots (keep last 7 days)\ncurl -s \"localhost:9200/_snapshot/backup_repo/_all\" | jq -r '.snapshots[] | select(.end_time_in_millis < '$(date -d '7 days ago' +%s000)') | .snapshot' | while read snapshot; do\n    curl -X DELETE \"localhost:9200/_snapshot/backup_repo/$snapshot\"\n    echo \"Deleted old snapshot: $snapshot\"\ndone\n\necho \"Elasticsearch backup completed: $SNAPSHOT_NAME\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# elasticsearch-restore.sh\n\nSNAPSHOT_NAME=\"$1\"\nif [ -z \"$SNAPSHOT_NAME\" ]; then\n    echo \"Usage: $0 <snapshot-name>\"\n    echo \"Available snapshots:\"\n    curl -s \"localhost:9200/_snapshot/backup_repo/_all\" | jq -r '.snapshots[].snapshot'\n    exit 1\nfi\n\n# Close indices before restore\ncurl -X POST \"localhost:9200/_all/_close\"\n\n# Restore snapshot\ncurl -X POST \"localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME/_restore?wait_for_completion=true\" -H 'Content-Type: application/json' -d'\n{\n  \"indices\": \"*\",\n  \"ignore_unavailable\": true,\n  \"include_global_state\": true\n}'\n\necho \"Restore completed from snapshot: $SNAPSHOT_NAME\"\n```\n\n### Automated Backup\n\n```bash\n# Create cron job for daily backups\necho \"0 2 * * * /usr/local/bin/elasticsearch-backup.sh\" | sudo crontab -\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Elasticsearch won't start**:\n```bash\n# Check logs\nsudo journalctl -u elasticsearch -f\nsudo tail -f /var/log/elasticsearch/elasticsearch.log\n\n# Check Java version\njava -version\n\n# Check memory settings\ngrep -E \"Xms|Xmx\" /etc/elasticsearch/jvm.options\n\n# Check disk space\ndf -h /var/lib/elasticsearch\n```\n\n2. **Out of memory errors**:\n```bash\n# Check heap usage\ncurl -X GET \"localhost:9200/_nodes/stats/jvm?pretty\"\n\n# Check field data cache\ncurl -X GET \"localhost:9200/_nodes/stats/indices/fielddata?pretty\"\n\n# Clear field data cache\ncurl -X POST \"localhost:9200/_cache/clear?fielddata=true\"\n```\n\n3. **Slow queries**:\n```bash\n# Enable slow log\ncurl -X PUT \"localhost:9200/_all/_settings\" -H 'Content-Type: application/json' -d'\n{\n  \"index.search.slowlog.threshold.query.warn\": \"10s\",\n  \"index.search.slowlog.threshold.query.info\": \"5s\",\n  \"index.search.slowlog.threshold.query.debug\": \"2s\",\n  \"index.search.slowlog.threshold.query.trace\": \"500ms\"\n}'\n\n# Check slow queries\nsudo tail -f /var/log/elasticsearch/*_index_search_slowlog.log\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\ncurl -X PUT \"localhost:9200/_cluster/settings\" -H 'Content-Type: application/json' -d'\n{\n  \"transient\": {\n    \"logger.org.elasticsearch\": \"DEBUG\"\n  }\n}'\n\n# Check cluster state\ncurl -X GET \"localhost:9200/_cluster/state?pretty\"\n\n# Explain API for query analysis\ncurl -X GET \"localhost:9200/my_index/_search\" -H 'Content-Type: application/json' -d'\n{\n  \"explain\": true,\n  \"query\": {\n    \"match\": {\n      \"title\": \"search term\"\n    }\n  }\n}'\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update elasticsearch\nsudo yum update elasticsearch\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade elasticsearch\n\n# Arch Linux\nyay -Syu elasticsearch\n\n# macOS\nbrew upgrade elastic/tap/elasticsearch-full\n\n# Docker (Alpine/openSUSE)\ndocker pull elasticsearch:8.11.3\ndocker stop elasticsearch\ndocker rm elasticsearch\n# Re-run docker run command with new image\n\n# Always backup before updates\n./elasticsearch-backup.sh\n\n# Restart after updates\nsudo systemctl restart elasticsearch\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# elasticsearch-maintenance.sh\n\n# Force merge old indices\ncurl -X POST \"localhost:9200/logs-$(date -d '1 week ago' +%Y.%m.%d)/_forcemerge?max_num_segments=1\"\n\n# Clear caches\ncurl -X POST \"localhost:9200/_cache/clear\"\n\n# Optimize indices\ncurl -X POST \"localhost:9200/_optimize\"\n\n# Update index settings for better performance\ncurl -X PUT \"localhost:9200/_all/_settings\" -H 'Content-Type: application/json' -d'\n{\n  \"index\": {\n    \"refresh_interval\": \"30s\"\n  }\n}'\n\necho \"Elasticsearch maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/elasticsearch-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/elasticsearch <<EOF\n/var/log/elasticsearch/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 elasticsearch elasticsearch\n    postrotate\n        systemctl restart elasticsearch > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Python Integration\n\n```python\n# Using elasticsearch-py\nfrom elasticsearch import Elasticsearch\n\n# Connect to Elasticsearch\nes = Elasticsearch(\n    hosts=[{'host': 'localhost', 'port': 9200}],\n    http_auth=('elastic', 'password'),\n    use_ssl=True,\n    verify_certs=True,\n    ca_certs='/etc/elasticsearch/certs/ca.crt',\n)\n\n# Index a document\ndoc = {\n    'title': 'Sample Document',\n    'content': 'This is a sample document for testing',\n    'timestamp': '2024-01-15T10:30:00'\n}\nes.index(index='my_index', id=1, body=doc)\n\n# Search documents\nresponse = es.search(\n    index='my_index',\n    body={\n        'query': {\n            'match': {\n                'content': 'sample'\n            }\n        }\n    }\n)\nprint(response['hits'])\n```\n\n### Node.js Integration\n\n```javascript\n// Using @elastic/elasticsearch\nconst { Client } = require('@elastic/elasticsearch');\n\nconst client = new Client({\n  node: 'https://localhost:9200',\n  auth: {\n    username: 'elastic',\n    password: 'password'\n  },\n  tls: {\n    ca: fs.readFileSync('/etc/elasticsearch/certs/ca.crt'),\n    rejectUnauthorized: true\n  }\n});\n\n// Index a document\nasync function indexDocument() {\n  const response = await client.index({\n    index: 'my_index',\n    id: 1,\n    body: {\n      title: 'Sample Document',\n      content: 'This is a sample document for testing',\n      timestamp: new Date()\n    }\n  });\n  console.log(response);\n}\n\n// Search documents\nasync function searchDocuments() {\n  const response = await client.search({\n    index: 'my_index',\n    body: {\n      query: {\n        match: {\n          content: 'sample'\n        }\n      }\n    }\n  });\n  console.log(response.body.hits);\n}\n```\n\n### Java Integration\n\n```java\n// Using Elasticsearch Java client\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.common.xcontent.XContentType;\n\nRestHighLevelClient client = new RestHighLevelClient(\n    RestClient.builder(new HttpHost(\"localhost\", 9200, \"https\"))\n        .setHttpClientConfigCallback(httpClientBuilder -> \n            httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)\n                .setSSLContext(sslContext))\n);\n\n// Index a document\nIndexRequest indexRequest = new IndexRequest(\"my_index\")\n    .id(\"1\")\n    .source(\"{\\n\" +\n        \"\\\"title\\\":\\\"Sample Document\\\",\\n\" +\n        \"\\\"content\\\":\\\"This is a sample document for testing\\\",\\n\" +\n        \"\\\"timestamp\\\":\\\"2024-01-15T10:30:00\\\"\\n\" +\n        \"}\", XContentType.JSON);\n\nclient.index(indexRequest, RequestOptions.DEFAULT);\n```\n\n### Logstash Integration\n\n```ruby\n# logstash.conf\ninput {\n  beats {\n    port => 5044\n  }\n}\n\nfilter {\n  if [fields][log_type] == \"apache\" {\n    grok {\n      match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }\n    }\n    date {\n      match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"localhost:9200\"]\n    user => \"logstash_user\"\n    password => \"logstash_password\"\n    index => \"logs-%{+YYYY.MM.dd}\"\n  }\n}\n```\n\n## Additional Resources\n\n- [Official Elasticsearch Documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html)\n- [Elasticsearch Security Guide](https://www.elastic.co/guide/en/elasticsearch/reference/current/security-minimal-setup.html)\n- [Performance Tuning Guide](https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html)\n- [Index Lifecycle Management](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-lifecycle-management.html)\n- [Elasticsearch Cluster Setup](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-bootstrap-cluster.html)\n- [Elastic Stack Community](https://discuss.elastic.co/)\n- [Elasticsearch Blog](https://www.elastic.co/blog/category/elasticsearch)\n- [Best Practices Guide](https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"elasticsearch-installation-guide\" class=\"mobile-header\">Elasticsearch Installation Guide</h1>\n<p class=\"mobile-paragraph\">Elasticsearch is a free and open-source distributed, RESTful search and analytics engine. Originally developed by Shay Banon and now maintained by Elastic N.V., Elasticsearch is built on Apache Lucene and designed for horizontal scalability, reliability, and real-time search. It serves as a FOSS alternative to commercial search solutions like Amazon CloudSearch, Azure Cognitive Search, or Splunk Enterprise, offering enterprise-grade features including full-text search, aggregations, and analytics without licensing costs, with features like distributed architecture, RESTful API, and multi-tenancy.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum (16GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 20GB minimum (SSD strongly recommended for performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for cluster communication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9200 (HTTP/REST API)</li>\n<li class=\"mobile-list-item\">Port 9300 (Node communication)</li>\n<li class=\"mobile-list-item\">Additional ports for cluster discovery</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Java 11 or Java 17 (OpenJDK recommended)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java (OpenJDK)\nsudo yum install -y java-11-openjdk java-11-openjdk-devel\n\n# Import Elasticsearch GPG key\nsudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch\n\n# Create Elasticsearch repository\nsudo tee /etc/yum.repos.d/elasticsearch.repo &lt;&lt;EOF\n[elasticsearch]\nname=Elasticsearch repository for 8.x packages\nbaseurl=https://artifacts.elastic.co/packages/8.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=0\nautorefresh=1\ntype=rpm-md\nEOF\n\n# Install Elasticsearch\nsudo yum install -y --enablerepo=elasticsearch elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --permanent --add-port=9300/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncurl -X GET &quot;localhost:9200/&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install Java (OpenJDK)\nsudo apt install -y openjdk-11-jdk\n\n# Install prerequisite packages\nsudo apt install -y wget gnupg apt-transport-https\n\n# Import Elasticsearch GPG key\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/elasticsearch.gpg\n\n# Add Elasticsearch repository\necho &quot;deb https://artifacts.elastic.co/packages/8.x/apt stable main&quot; | sudo tee /etc/apt/sources.list.d/elastic-8.x.list\n\n# Update package index\nsudo apt update\n\n# Install Elasticsearch\nsudo apt install -y elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configure firewall\nsudo ufw allow 9200\nsudo ufw allow 9300</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\nsudo pacman -S jdk11-openjdk\n\n# Elasticsearch is available in AUR\nyay -S elasticsearch\n\n# Alternative: Install from AUR with makepkg\ngit clone https://aur.archlinux.org/elasticsearch.git\ncd elasticsearch\nmakepkg -si\n\n# Create elasticsearch user and group\nsudo useradd -r -s /sbin/nologin elasticsearch\n\n# Create necessary directories\nsudo mkdir -p /var/lib/elasticsearch /var/log/elasticsearch\nsudo chown elasticsearch:elasticsearch /var/lib/elasticsearch /var/log/elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configuration location: /etc/elasticsearch/</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\napk add --no-cache openjdk11\n\n# Elasticsearch is not officially packaged for Alpine\n# Use Docker for Elasticsearch on Alpine:\n\n# Install Docker\napk add --no-cache docker docker-compose\n\n# Enable and start Docker\nrc-update add docker default\nrc-service docker start\n\n# Run Elasticsearch container\ndocker run -d \\\n  --name elasticsearch \\\n  --restart unless-stopped \\\n  -p 9200:9200 -p 9300:9300 \\\n  -e &quot;discovery.type=single-node&quot; \\\n  -e &quot;xpack.security.enabled=false&quot; \\\n  -v /var/lib/elasticsearch:/usr/share/elasticsearch/data \\\n  elasticsearch:8.11.3\n\n# Verify installation\ncurl -X GET &quot;localhost:9200/&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\nsudo zypper install -y java-11-openjdk java-11-openjdk-devel\n\n# Elasticsearch is not officially packaged for openSUSE/SLES\n# Use Docker or manual installation:\n\n# Method 1: Docker installation\nsudo zypper install -y docker docker-compose\nsudo systemctl enable --now docker\n\ndocker run -d \\\n  --name elasticsearch \\\n  --restart unless-stopped \\\n  -p 9200:9200 -p 9300:9300 \\\n  -e &quot;discovery.type=single-node&quot; \\\n  -e &quot;xpack.security.enabled=false&quot; \\\n  -v /var/lib/elasticsearch:/usr/share/elasticsearch/data \\\n  elasticsearch:8.11.3\n\n# Method 2: Manual installation from tarball\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.11.3-linux-x86_64.tar.gz\ntar -xzf elasticsearch-8.11.3-linux-x86_64.tar.gz\nsudo mv elasticsearch-8.11.3 /usr/local/elasticsearch\n\n# Create elasticsearch user and directories\nsudo useradd -r elasticsearch\nsudo mkdir -p /var/lib/elasticsearch /var/log/elasticsearch\nsudo chown elasticsearch:elasticsearch /var/lib/elasticsearch /var/log/elasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew tap elastic/tap\nbrew install elastic/tap/elasticsearch-full\n\n# Start Elasticsearch service\nbrew services start elastic/tap/elasticsearch-full\n\n# Or run manually\nelasticsearch\n\n# Configuration location: /usr/local/etc/elasticsearch/\n# Alternative: /opt/homebrew/etc/elasticsearch/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\npkg install openjdk11\n\n# Install Elasticsearch from ports\ncd /usr/ports/textproc/elasticsearch8\nmake install clean\n\n# Enable Elasticsearch\necho &#039;elasticsearch_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice elasticsearch start\n\n# Configuration location: /usr/local/etc/elasticsearch/</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install elasticsearch\n\n# Method 2: Using Scoop\nscoop bucket add java\nscoop install openjdk11\nscoop bucket add extras\nscoop install elasticsearch\n\n# Method 3: Manual installation\n# Download from https://www.elastic.co/downloads/elasticsearch\n# Extract to C:\\elasticsearch\n\n# Install as Windows service\n&quot;C:\\elasticsearch\\bin\\elasticsearch-service.bat&quot; install\n\n# Start service\nnet start Elasticsearch\n\n# Configuration location: C:\\elasticsearch\\config\\elasticsearch.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create elasticsearch user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/elasticsearch -s /sbin/nologin -c &quot;Elasticsearch&quot; elasticsearch</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: Docker container configuration</li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/elasticsearch/elasticsearch.yml</code> (manual installation)</li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\elasticsearch\\config\\elasticsearch.yml</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/elasticsearch/elasticsearch.yml\ncluster.name: my-application\nnode.name: node-1\n\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\n\nnetwork.host: 127.0.0.1\nhttp.port: 9200\n\ndiscovery.type: single-node\n\n# Security (disable for initial setup, enable for production)\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\n# Memory settings\nbootstrap.memory_lock: true\n\n# Index settings\naction.auto_create_index: .monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Elasticsearch is running\nsudo systemctl status elasticsearch\n\n# Test REST API\ncurl -X GET &quot;localhost:9200/&quot;\n\n# Check cluster health\ncurl -X GET &quot;localhost:9200/_cluster/health?pretty&quot;\n\n# Check nodes\ncurl -X GET &quot;localhost:9200/_cat/nodes?v&quot;\n\n# Test indexing and searching\ncurl -X PUT &quot;localhost:9200/test_index/_doc/1&quot; -H &#039;Content-Type: application/json&#039; -d &#039;{&quot;message&quot;: &quot;Hello Elasticsearch&quot;}&#039;\ncurl -X GET &quot;localhost:9200/test_index/_search?pretty&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Enable X-Pack security for production deployments!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Elasticsearch to start on boot\nsudo systemctl enable elasticsearch\n\n# Start Elasticsearch\nsudo systemctl start elasticsearch\n\n# Stop Elasticsearch\nsudo systemctl stop elasticsearch\n\n# Restart Elasticsearch\nsudo systemctl restart elasticsearch\n\n# Reload configuration (not supported, requires restart)\nsudo systemctl restart elasticsearch\n\n# Check status\nsudo systemctl status elasticsearch\n\n# View logs\nsudo journalctl -u elasticsearch -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Elasticsearch runs in Docker container on Alpine\ndocker start elasticsearch\ndocker stop elasticsearch\ndocker restart elasticsearch\n\n# Check status\ndocker ps | grep elasticsearch\n\n# View logs\ndocker logs -f elasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;elasticsearch_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Elasticsearch\nservice elasticsearch start\n\n# Stop Elasticsearch\nservice elasticsearch stop\n\n# Restart Elasticsearch\nservice elasticsearch restart\n\n# Check status\nservice elasticsearch status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start elastic/tap/elasticsearch-full\nbrew services stop elastic/tap/elasticsearch-full\nbrew services restart elastic/tap/elasticsearch-full\n\n# Check status\nbrew services list | grep elasticsearch\n\n# Manual control\nelasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Elasticsearch service\nnet start Elasticsearch\n\n# Stop Elasticsearch service\nnet stop Elasticsearch\n\n# Using PowerShell\nStart-Service Elasticsearch\nStop-Service Elasticsearch\nRestart-Service Elasticsearch\n\n# Check status\nGet-Service Elasticsearch\n\n# View logs\nGet-EventLog -LogName Application -Source Elasticsearch</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"cluster-configuration\" class=\"mobile-header\">Cluster Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Multi-node cluster configuration\ncluster.name: production-cluster\nnode.name: node-1\nnode.roles: [master, data, ingest]\n\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ntransport.port: 9300\n\ndiscovery.seed_hosts: [&quot;node1.example.com&quot;, &quot;node2.example.com&quot;, &quot;node3.example.com&quot;]\ncluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;, &quot;node-3&quot;]\n\n# Node-specific roles\n# Master-eligible node\nnode.roles: [master]\n\n# Data node\nnode.roles: [data]\n\n# Ingest node\nnode.roles: [ingest]\n\n# Coordinating only node\nnode.roles: []</code></pre>\n      </div>\n    </div>\n<h3 id=\"memory-and-performance-configuration\" class=\"mobile-header\">Memory and Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># JVM heap settings (in elasticsearch.yml or jvm.options)\n# Set via environment variables:\nES_JAVA_OPTS: &quot;-Xms4g -Xmx4g&quot;\n\n# Thread pool settings\nthread_pool:\n  write:\n    size: 8\n    queue_size: 200\n  search:\n    size: 13\n    queue_size: 1000\n\n# Index settings\nindices.memory.index_buffer_size: 20%\nindices.breaker.total.use_real_memory: true</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># X-Pack Security configuration\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\n# SSL/TLS configuration\nxpack.security.http.ssl.enabled: true\nxpack.security.http.ssl.keystore.path: certs/http.p12\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: certs/transport.p12\nxpack.security.transport.ssl.truststore.path: certs/transport.p12\n\n# Authentication realms\nxpack.security.authc.realms:\n  native:\n    native1:\n      order: 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/elasticsearch\nupstream elasticsearch_backend {\n    server 127.0.0.1:9200 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:9201 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 80;\n    server_name elasticsearch.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name elasticsearch.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/elasticsearch.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/elasticsearch.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;\n\n    location / {\n        proxy_pass http://elasticsearch_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/elasticsearch.conf\n&lt;VirtualHost *:443&gt;\n    ServerName elasticsearch.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/elasticsearch.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/elasticsearch.example.com/privkey.pem\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:9200/\n    ProxyPassReverse / http://localhost:9200/\n    \n    Header always set Strict-Transport-Security &quot;max-age=63072000&quot;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend elasticsearch_frontend\n    bind *:9200 ssl crt /etc/haproxy/certs/elasticsearch.pem\n    mode http\n    option httplog\n    default_backend elasticsearch_backend\n\nbackend elasticsearch_backend\n    mode http\n    balance roundrobin\n    option httpchk GET /_cluster/health\n    server elasticsearch1 127.0.0.1:9200 check\n    server elasticsearch2 127.0.0.1:9201 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate certificates using Elasticsearch&#039;s certificate tool\ncd /usr/share/elasticsearch\nsudo bin/elasticsearch-certutil ca --pem --out /tmp/ca.zip\nsudo unzip /tmp/ca.zip -d /tmp/ca\nsudo bin/elasticsearch-certutil cert --ca-cert /tmp/ca/ca.crt --ca-key /tmp/ca/ca.key --pem --out /tmp/certs.zip\nsudo unzip /tmp/certs.zip -d /tmp/certs\n\n# Create certificates directory\nsudo mkdir -p /etc/elasticsearch/certs\nsudo cp /tmp/ca/ca.crt /etc/elasticsearch/certs/\nsudo cp /tmp/certs/instance/instance.crt /etc/elasticsearch/certs/\nsudo cp /tmp/certs/instance/instance.key /etc/elasticsearch/certs/\n\n# Create keystore\nsudo bin/elasticsearch-keystore create\nsudo bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password\nsudo bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password\n\n# Set permissions\nsudo chown -R elasticsearch:elasticsearch /etc/elasticsearch/certs\nsudo chmod 600 /etc/elasticsearch/certs/*</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-management-and-authentication\" class=\"mobile-header\">User Management and Authentication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set passwords for built-in users (run after enabling security)\nsudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto\n\n# Create custom users\ncurl -X POST &quot;localhost:9200/_security/user/appuser&quot; -H &#039;Content-Type: application/json&#039; -u elastic:password -d&#039;\n{\n  &quot;password&quot; : &quot;SecurePassword123!&quot;,\n  &quot;roles&quot; : [ &quot;kibana_admin&quot;, &quot;monitoring_user&quot; ],\n  &quot;full_name&quot; : &quot;Application User&quot;,\n  &quot;email&quot; : &quot;appuser@example.com&quot;\n}&#039;\n\n# Create custom roles\ncurl -X POST &quot;localhost:9200/_security/role/log_reader&quot; -H &#039;Content-Type: application/json&#039; -u elastic:password -d&#039;\n{\n  &quot;cluster&quot;: [&quot;monitor&quot;],\n  &quot;indices&quot;: [\n    {\n      &quot;names&quot;: [&quot;logs-*&quot;],\n      &quot;privileges&quot;: [&quot;read&quot;, &quot;view_index_metadata&quot;]\n    }\n  ]\n}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 9200\nsudo ufw allow from 192.168.1.0/24 to any port 9300\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=elasticsearch\nsudo firewall-cmd --permanent --zone=elasticsearch --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=elasticsearch --add-port=9200/tcp\nsudo firewall-cmd --permanent --zone=elasticsearch --add-port=9300/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9200 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9300 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port { 9200, 9300 }\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Elasticsearch HTTP&quot; -Direction Inbound -Protocol TCP -LocalPort 9200 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;Elasticsearch Transport&quot; -Direction Inbound -Protocol TCP -LocalPort 9300 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"index-templates-and-mappings\" class=\"mobile-header\">Index Templates and Mappings</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create index template\ncurl -X PUT &quot;localhost:9200/_index_template/logs_template&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;index_patterns&quot;: [&quot;logs-*&quot;],\n  &quot;template&quot;: {\n    &quot;settings&quot;: {\n      &quot;number_of_shards&quot;: 1,\n      &quot;number_of_replicas&quot;: 1,\n      &quot;index.refresh_interval&quot;: &quot;30s&quot;\n    },\n    &quot;mappings&quot;: {\n      &quot;properties&quot;: {\n        &quot;timestamp&quot;: {\n          &quot;type&quot;: &quot;date&quot;\n        },\n        &quot;level&quot;: {\n          &quot;type&quot;: &quot;keyword&quot;\n        },\n        &quot;message&quot;: {\n          &quot;type&quot;: &quot;text&quot;,\n          &quot;analyzer&quot;: &quot;standard&quot;\n        },\n        &quot;host&quot;: {\n          &quot;type&quot;: &quot;keyword&quot;\n        }\n      }\n    }\n  }\n}&#039;\n\n# Create index with custom settings\ncurl -X PUT &quot;localhost:9200/my_index&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;settings&quot;: {\n    &quot;number_of_shards&quot;: 3,\n    &quot;number_of_replicas&quot;: 2,\n    &quot;analysis&quot;: {\n      &quot;analyzer&quot;: {\n        &quot;custom_analyzer&quot;: {\n          &quot;type&quot;: &quot;custom&quot;,\n          &quot;tokenizer&quot;: &quot;standard&quot;,\n          &quot;filter&quot;: [&quot;lowercase&quot;, &quot;asciifolding&quot;]\n        }\n      }\n    }\n  },\n  &quot;mappings&quot;: {\n    &quot;properties&quot;: {\n      &quot;title&quot;: {\n        &quot;type&quot;: &quot;text&quot;,\n        &quot;analyzer&quot;: &quot;custom_analyzer&quot;\n      },\n      &quot;content&quot;: {\n        &quot;type&quot;: &quot;text&quot;\n      },\n      &quot;tags&quot;: {\n        &quot;type&quot;: &quot;keyword&quot;\n      },\n      &quot;created_at&quot;: {\n        &quot;type&quot;: &quot;date&quot;\n      }\n    }\n  }\n}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"index-lifecycle-management\" class=\"mobile-header\">Index Lifecycle Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create ILM policy\ncurl -X PUT &quot;localhost:9200/_ilm/policy/logs_policy&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;policy&quot;: {\n    &quot;phases&quot;: {\n      &quot;hot&quot;: {\n        &quot;actions&quot;: {\n          &quot;rollover&quot;: {\n            &quot;max_size&quot;: &quot;10gb&quot;,\n            &quot;max_age&quot;: &quot;7d&quot;\n          }\n        }\n      },\n      &quot;warm&quot;: {\n        &quot;min_age&quot;: &quot;7d&quot;,\n        &quot;actions&quot;: {\n          &quot;allocate&quot;: {\n            &quot;number_of_replicas&quot;: 0\n          }\n        }\n      },\n      &quot;cold&quot;: {\n        &quot;min_age&quot;: &quot;30d&quot;,\n        &quot;actions&quot;: {\n          &quot;allocate&quot;: {\n            &quot;number_of_replicas&quot;: 0\n          }\n        }\n      },\n      &quot;delete&quot;: {\n        &quot;min_age&quot;: &quot;90d&quot;\n      }\n    }\n  }\n}&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Elasticsearch-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Elasticsearch optimizations\nvm.max_map_count = 262144\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nEOF\n\nsudo sysctl -p\n\n# Disable swap\nsudo swapoff -a\necho &#039;vm.swappiness=1&#039; | sudo tee -a /etc/sysctl.conf\n\n# Set file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\nelasticsearch soft nofile 65535\nelasticsearch hard nofile 65535\nelasticsearch soft memlock unlimited\nelasticsearch hard memlock unlimited\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"jvm-and-memory-tuning\" class=\"mobile-header\">JVM and Memory Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># JVM options (/etc/elasticsearch/jvm.options)\n# Set heap size (50% of available RAM, max 32GB)\n-Xms8g\n-Xmx8g\n\n# GC settings\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=16m\n-XX:+UnlockExperimentalVMOptions\n-XX:+UnlockDiagnosticVMOptions\n-XX:+G1PrintRegionRememberedSetInfo\n\n# Memory lock\n-XX:+AlwaysPreTouch</code></pre>\n      </div>\n    </div>\n<h3 id=\"index-and-query-optimization\" class=\"mobile-header\">Index and Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Index optimization settings\ncurl -X PUT &quot;localhost:9200/my_index/_settings&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;index&quot;: {\n    &quot;refresh_interval&quot;: &quot;30s&quot;,\n    &quot;number_of_replicas&quot;: 1,\n    &quot;routing.allocation.total_shards_per_node&quot;: 3,\n    &quot;translog.flush_threshold_size&quot;: &quot;1gb&quot;,\n    &quot;translog.sync_interval&quot;: &quot;30s&quot;\n  }\n}&#039;\n\n# Force merge indices\ncurl -X POST &quot;localhost:9200/my_index/_forcemerge?max_num_segments=1&quot;\n\n# Clear cache\ncurl -X POST &quot;localhost:9200/_cache/clear&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Cluster health\ncurl -X GET &quot;localhost:9200/_cluster/health?pretty&quot;\n\n# Node statistics\ncurl -X GET &quot;localhost:9200/_nodes/stats?pretty&quot;\n\n# Index statistics\ncurl -X GET &quot;localhost:9200/_stats?pretty&quot;\n\n# Hot threads\ncurl -X GET &quot;localhost:9200/_nodes/hot_threads&quot;\n\n# Task management\ncurl -X GET &quot;localhost:9200/_tasks?detailed=true&amp;actions=*search&quot;\n\n# Pending cluster tasks\ncurl -X GET &quot;localhost:9200/_cluster/pending_tasks&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Metricbeat for monitoring\ncurl -L -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-8.11.3-linux-x86_64.tar.gz\ntar xzvf metricbeat-8.11.3-linux-x86_64.tar.gz\nsudo mv metricbeat-8.11.3-linux-x86_64 /usr/local/metricbeat\n\n# Configure Metricbeat for Elasticsearch monitoring\nsudo tee /usr/local/metricbeat/metricbeat.yml &lt;&lt;EOF\nmetricbeat.modules:\n- module: elasticsearch\n  metricsets:\n    - node\n    - node_stats\n    - cluster_stats\n  period: 10s\n  hosts: [&quot;localhost:9200&quot;]\n\noutput.elasticsearch:\n  hosts: [&quot;localhost:9200&quot;]\n\nsetup.kibana:\n  host: &quot;localhost:5601&quot;\nEOF\n\n# Create systemd service for Metricbeat\nsudo tee /etc/systemd/system/metricbeat.service &lt;&lt;EOF\n[Unit]\nDescription=Metricbeat\nAfter=network.target\n\n[Service]\nType=simple\nUser=elasticsearch\nWorkingDirectory=/usr/local/metricbeat\nExecStart=/usr/local/metricbeat/metricbeat -c /usr/local/metricbeat/metricbeat.yml\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now metricbeat</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# elasticsearch-health-check.sh\n\n# Check Elasticsearch service\nif ! systemctl is-active elasticsearch &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Elasticsearch service is not running&quot;\n    exit 2\nfi\n\n# Check HTTP API\nif ! curl -s http://localhost:9200/ &gt;/dev/null; then\n    echo &quot;CRITICAL: Cannot connect to Elasticsearch HTTP API&quot;\n    exit 2\nfi\n\n# Check cluster health\nCLUSTER_STATUS=$(curl -s http://localhost:9200/_cluster/health | jq -r &#039;.status&#039;)\ncase $CLUSTER_STATUS in\n    &quot;green&quot;)\n        echo &quot;OK: Cluster health is green&quot;\n        exit 0\n        ;;\n    &quot;yellow&quot;)\n        echo &quot;WARNING: Cluster health is yellow&quot;\n        exit 1\n        ;;\n    &quot;red&quot;)\n        echo &quot;CRITICAL: Cluster health is red&quot;\n        exit 2\n        ;;\n    *)\n        echo &quot;UNKNOWN: Cannot determine cluster health&quot;\n        exit 3\n        ;;\nesac</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"snapshot-repository-setup\" class=\"mobile-header\">Snapshot Repository Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create snapshot repository\ncurl -X PUT &quot;localhost:9200/_snapshot/backup_repo&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;type&quot;: &quot;fs&quot;,\n  &quot;settings&quot;: {\n    &quot;location&quot;: &quot;/backup/elasticsearch&quot;,\n    &quot;compress&quot;: true,\n    &quot;max_snapshot_bytes_per_sec&quot;: &quot;50mb&quot;,\n    &quot;max_restore_bytes_per_sec&quot;: &quot;50mb&quot;\n  }\n}&#039;\n\n# Create backup directory\nsudo mkdir -p /backup/elasticsearch\nsudo chown elasticsearch:elasticsearch /backup/elasticsearch\n\n# Add repository path to elasticsearch.yml\necho &#039;path.repo: [&quot;/backup/elasticsearch&quot;]&#039; | sudo tee -a /etc/elasticsearch/elasticsearch.yml\nsudo systemctl restart elasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# elasticsearch-backup.sh\n\nSNAPSHOT_NAME=&quot;snapshot-$(date +%Y%m%d_%H%M%S)&quot;\n\n# Create snapshot\ncurl -X PUT &quot;localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME?wait_for_completion=true&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;indices&quot;: &quot;*&quot;,\n  &quot;ignore_unavailable&quot;: true,\n  &quot;include_global_state&quot;: true,\n  &quot;metadata&quot;: {\n    &quot;taken_by&quot;: &quot;elasticsearch-backup-script&quot;,\n    &quot;taken_because&quot;: &quot;scheduled backup&quot;\n  }\n}&#039;\n\n# Verify snapshot\nSNAPSHOT_STATUS=$(curl -s &quot;localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME&quot; | jq -r &#039;.snapshots[0].state&#039;)\n\nif [ &quot;$SNAPSHOT_STATUS&quot; = &quot;SUCCESS&quot; ]; then\n    echo &quot;Backup completed successfully: $SNAPSHOT_NAME&quot;\nelse\n    echo &quot;Backup failed: $SNAPSHOT_NAME&quot;\n    exit 1\nfi\n\n# Clean up old snapshots (keep last 7 days)\ncurl -s &quot;localhost:9200/_snapshot/backup_repo/_all&quot; | jq -r &#039;.snapshots[] | select(.end_time_in_millis &lt; &#039;$(date -d &#039;7 days ago&#039; +%s000)&#039;) | .snapshot&#039; | while read snapshot; do\n    curl -X DELETE &quot;localhost:9200/_snapshot/backup_repo/$snapshot&quot;\n    echo &quot;Deleted old snapshot: $snapshot&quot;\ndone\n\necho &quot;Elasticsearch backup completed: $SNAPSHOT_NAME&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# elasticsearch-restore.sh\n\nSNAPSHOT_NAME=&quot;$1&quot;\nif [ -z &quot;$SNAPSHOT_NAME&quot; ]; then\n    echo &quot;Usage: $0 &lt;snapshot-name&gt;&quot;\n    echo &quot;Available snapshots:&quot;\n    curl -s &quot;localhost:9200/_snapshot/backup_repo/_all&quot; | jq -r &#039;.snapshots[].snapshot&#039;\n    exit 1\nfi\n\n# Close indices before restore\ncurl -X POST &quot;localhost:9200/_all/_close&quot;\n\n# Restore snapshot\ncurl -X POST &quot;localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME/_restore?wait_for_completion=true&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;indices&quot;: &quot;*&quot;,\n  &quot;ignore_unavailable&quot;: true,\n  &quot;include_global_state&quot;: true\n}&#039;\n\necho &quot;Restore completed from snapshot: $SNAPSHOT_NAME&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create cron job for daily backups\necho &quot;0 2 * * * /usr/local/bin/elasticsearch-backup.sh&quot; | sudo crontab -</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Elasticsearch won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u elasticsearch -f\nsudo tail -f /var/log/elasticsearch/elasticsearch.log\n\n# Check Java version\njava -version\n\n# Check memory settings\ngrep -E &quot;Xms|Xmx&quot; /etc/elasticsearch/jvm.options\n\n# Check disk space\ndf -h /var/lib/elasticsearch</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Out of memory errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check heap usage\ncurl -X GET &quot;localhost:9200/_nodes/stats/jvm?pretty&quot;\n\n# Check field data cache\ncurl -X GET &quot;localhost:9200/_nodes/stats/indices/fielddata?pretty&quot;\n\n# Clear field data cache\ncurl -X POST &quot;localhost:9200/_cache/clear?fielddata=true&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Slow queries</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable slow log\ncurl -X PUT &quot;localhost:9200/_all/_settings&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;index.search.slowlog.threshold.query.warn&quot;: &quot;10s&quot;,\n  &quot;index.search.slowlog.threshold.query.info&quot;: &quot;5s&quot;,\n  &quot;index.search.slowlog.threshold.query.debug&quot;: &quot;2s&quot;,\n  &quot;index.search.slowlog.threshold.query.trace&quot;: &quot;500ms&quot;\n}&#039;\n\n# Check slow queries\nsudo tail -f /var/log/elasticsearch/*_index_search_slowlog.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\ncurl -X PUT &quot;localhost:9200/_cluster/settings&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;transient&quot;: {\n    &quot;logger.org.elasticsearch&quot;: &quot;DEBUG&quot;\n  }\n}&#039;\n\n# Check cluster state\ncurl -X GET &quot;localhost:9200/_cluster/state?pretty&quot;\n\n# Explain API for query analysis\ncurl -X GET &quot;localhost:9200/my_index/_search&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;explain&quot;: true,\n  &quot;query&quot;: {\n    &quot;match&quot;: {\n      &quot;title&quot;: &quot;search term&quot;\n    }\n  }\n}&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update elasticsearch\nsudo yum update elasticsearch\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade elasticsearch\n\n# Arch Linux\nyay -Syu elasticsearch\n\n# macOS\nbrew upgrade elastic/tap/elasticsearch-full\n\n# Docker (Alpine/openSUSE)\ndocker pull elasticsearch:8.11.3\ndocker stop elasticsearch\ndocker rm elasticsearch\n# Re-run docker run command with new image\n\n# Always backup before updates\n./elasticsearch-backup.sh\n\n# Restart after updates\nsudo systemctl restart elasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# elasticsearch-maintenance.sh\n\n# Force merge old indices\ncurl -X POST &quot;localhost:9200/logs-$(date -d &#039;1 week ago&#039; +%Y.%m.%d)/_forcemerge?max_num_segments=1&quot;\n\n# Clear caches\ncurl -X POST &quot;localhost:9200/_cache/clear&quot;\n\n# Optimize indices\ncurl -X POST &quot;localhost:9200/_optimize&quot;\n\n# Update index settings for better performance\ncurl -X PUT &quot;localhost:9200/_all/_settings&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;index&quot;: {\n    &quot;refresh_interval&quot;: &quot;30s&quot;\n  }\n}&#039;\n\necho &quot;Elasticsearch maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/elasticsearch-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/elasticsearch &lt;&lt;EOF\n/var/log/elasticsearch/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 elasticsearch elasticsearch\n    postrotate\n        systemctl restart elasticsearch &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Using elasticsearch-py\nfrom elasticsearch import Elasticsearch\n\n# Connect to Elasticsearch\nes = Elasticsearch(\n    hosts=[{&#039;host&#039;: &#039;localhost&#039;, &#039;port&#039;: 9200}],\n    http_auth=(&#039;elastic&#039;, &#039;password&#039;),\n    use_ssl=True,\n    verify_certs=True,\n    ca_certs=&#039;/etc/elasticsearch/certs/ca.crt&#039;,\n)\n\n# Index a document\ndoc = {\n    &#039;title&#039;: &#039;Sample Document&#039;,\n    &#039;content&#039;: &#039;This is a sample document for testing&#039;,\n    &#039;timestamp&#039;: &#039;2024-01-15T10:30:00&#039;\n}\nes.index(index=&#039;my_index&#039;, id=1, body=doc)\n\n# Search documents\nresponse = es.search(\n    index=&#039;my_index&#039;,\n    body={\n        &#039;query&#039;: {\n            &#039;match&#039;: {\n                &#039;content&#039;: &#039;sample&#039;\n            }\n        }\n    }\n)\nprint(response[&#039;hits&#039;])</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using @elastic/elasticsearch\nconst { Client } = require(&#039;@elastic/elasticsearch&#039;);\n\nconst client = new Client({\n  node: &#039;https://localhost:9200&#039;,\n  auth: {\n    username: &#039;elastic&#039;,\n    password: &#039;password&#039;\n  },\n  tls: {\n    ca: fs.readFileSync(&#039;/etc/elasticsearch/certs/ca.crt&#039;),\n    rejectUnauthorized: true\n  }\n});\n\n// Index a document\nasync function indexDocument() {\n  const response = await client.index({\n    index: &#039;my_index&#039;,\n    id: 1,\n    body: {\n      title: &#039;Sample Document&#039;,\n      content: &#039;This is a sample document for testing&#039;,\n      timestamp: new Date()\n    }\n  });\n  console.log(response);\n}\n\n// Search documents\nasync function searchDocuments() {\n  const response = await client.search({\n    index: &#039;my_index&#039;,\n    body: {\n      query: {\n        match: {\n          content: &#039;sample&#039;\n        }\n      }\n    }\n  });\n  console.log(response.body.hits);\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-integration\" class=\"mobile-header\">Java Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// Using Elasticsearch Java client\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.common.xcontent.XContentType;\n\nRestHighLevelClient client = new RestHighLevelClient(\n    RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;https&quot;))\n        .setHttpClientConfigCallback(httpClientBuilder -&gt; \n            httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)\n                .setSSLContext(sslContext))\n);\n\n// Index a document\nIndexRequest indexRequest = new IndexRequest(&quot;my_index&quot;)\n    .id(&quot;1&quot;)\n    .source(&quot;{\\n&quot; +\n        &quot;\\&quot;title\\&quot;:\\&quot;Sample Document\\&quot;,\\n&quot; +\n        &quot;\\&quot;content\\&quot;:\\&quot;This is a sample document for testing\\&quot;,\\n&quot; +\n        &quot;\\&quot;timestamp\\&quot;:\\&quot;2024-01-15T10:30:00\\&quot;\\n&quot; +\n        &quot;}&quot;, XContentType.JSON);\n\nclient.index(indexRequest, RequestOptions.DEFAULT);</code></pre>\n      </div>\n    </div>\n<h3 id=\"logstash-integration\" class=\"mobile-header\">Logstash Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># logstash.conf\ninput {\n  beats {\n    port =&gt; 5044\n  }\n}\n\nfilter {\n  if [fields][log_type] == &quot;apache&quot; {\n    grok {\n      match =&gt; { &quot;message&quot; =&gt; &quot;%{COMBINEDAPACHELOG}&quot; }\n    }\n    date {\n      match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [&quot;localhost:9200&quot;]\n    user =&gt; &quot;logstash_user&quot;\n    password =&gt; &quot;logstash_password&quot;\n    index =&gt; &quot;logs-%{+YYYY.MM.dd}&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Elasticsearch Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/security-minimal-setup.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Elasticsearch Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-lifecycle-management.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Index Lifecycle Management</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-bootstrap-cluster.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Elasticsearch Cluster Setup</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discuss.elastic.co/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Elastic Stack Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/blog/category/elasticsearch\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Elasticsearch Blog</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"17 min","wordCount":3365,"lastBuilt":"2025-09-16T02:44:20.301Z"},"category":{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]},"relatedGuides":[{"name":"ackee","displayName":"Ackee","slug":"ackee","description":"ackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ackee","updatedAt":"2025-09-16T02:31:02Z","createdAt":"2025-09-16T02:15:54Z","readmeRaw":"# ackee Installation Guide\n\nackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3000 (default ackee port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ackee\nsudo dnf install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install ackee\nsudo apt install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\nackee --version\n```\n\n### Arch Linux\n\n```bash\n# Install ackee\nsudo pacman -S ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Verify installation\nackee --version\n```\n\n### Alpine Linux\n\n```bash\n# Install ackee\napk add --no-cache ackee\n\n# Enable and start service\nrc-update add ackee default\nrc-service ackee start\n\n# Verify installation\nackee --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install ackee\nsudo zypper install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install ackee\n\n# Start service\nbrew services start ackee\n\n# Verify installation\nackee --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install ackee\n\n# Enable in rc.conf\necho 'ackee_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Verify installation\nackee --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install ackee\n\n# Or using Scoop\nscoop install ackee\n\n# Verify installation\nackee --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/ackee\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nackee --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable ackee\n\n# Start service\nsudo systemctl start ackee\n\n# Stop service\nsudo systemctl stop ackee\n\n# Restart service\nsudo systemctl restart ackee\n\n# Check status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add ackee default\n\n# Start service\nrc-service ackee start\n\n# Stop service\nrc-service ackee stop\n\n# Restart service\nrc-service ackee restart\n\n# Check status\nrc-service ackee status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'ackee_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Stop service\nservice ackee stop\n\n# Restart service\nservice ackee restart\n\n# Check status\nservice ackee status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start ackee\nbrew services stop ackee\nbrew services restart ackee\n\n# Check status\nbrew services list | grep ackee\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start ackee\n\n# Stop service\nnet stop ackee\n\n# Using PowerShell\nStart-Service ackee\nStop-Service ackee\nRestart-Service ackee\n\n# Check status\nGet-Service ackee\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream ackee_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name ackee.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ackee.example.com;\n\n    ssl_certificate /etc/ssl/certs/ackee.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ackee.example.com.key;\n\n    location / {\n        proxy_pass http://ackee_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName ackee.example.com\n    Redirect permanent / https://ackee.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName ackee.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ackee.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ackee.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend ackee_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ackee.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ackee_backend\n\nbackend ackee_backend\n    balance roundrobin\n    server ackee1 127.0.0.1:3000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R ackee:ackee /etc/ackee\nsudo chmod 750 /etc/ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n\n# Monitor resource usage\ntop -p $(pgrep ackee)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/ackee\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/ackee-backup-$DATE.tar.gz\" /etc/ackee /var/lib/ackee\n\necho \"Backup completed: $BACKUP_DIR/ackee-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop ackee\n\n# Restore from backup\ntar -xzf /backup/ackee/ackee-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ackee\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u ackee -n 100\nsudo tail -f /var/log/ackee/ackee.log\n\n# Check configuration\nackee --version\n\n# Check permissions\nls -la /etc/ackee\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep ackee)\n\n# Check disk I/O\niotop -p $(pgrep ackee)\n\n# Check connections\nss -an | grep 3000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  ackee:\n    image: ackee:latest\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./config:/etc/ackee\n      - ./data:/var/lib/ackee\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ackee\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade ackee\n\n# Arch Linux\nsudo pacman -Syu ackee\n\n# Alpine Linux\napk update && apk upgrade ackee\n\n# openSUSE\nsudo zypper update ackee\n\n# FreeBSD\npkg update && pkg upgrade ackee\n\n# Always backup before updates\ntar -czf /backup/ackee-pre-update-$(date +%Y%m%d).tar.gz /etc/ackee\n\n# Restart after updates\nsudo systemctl restart ackee\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/ackee\n\n# Clean old logs\nfind /var/log/ackee -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ackee\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.ackee.org/\n- GitHub Repository: https://github.com/ackee/ackee\n- Community Forum: https://forum.ackee.org/\n- Best Practices Guide: https://docs.ackee.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"ackee-installation-guide\" class=\"mobile-header\">ackee Installation Guide</h1>\n<p class=\"mobile-paragraph\">ackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3000 (default ackee port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ackee\nsudo dnf install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install ackee\nsudo apt install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\nsudo pacman -S ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\napk add --no-cache ackee\n\n# Enable and start service\nrc-update add ackee default\nrc-service ackee start\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\nsudo zypper install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install ackee\n\n# Start service\nbrew services start ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install ackee\n\n# Enable in rc.conf\necho &#039;ackee_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install ackee\n\n# Or using Scoop\nscoop install ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/ackee\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nackee --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable ackee\n\n# Start service\nsudo systemctl start ackee\n\n# Stop service\nsudo systemctl stop ackee\n\n# Restart service\nsudo systemctl restart ackee\n\n# Check status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add ackee default\n\n# Start service\nrc-service ackee start\n\n# Stop service\nrc-service ackee stop\n\n# Restart service\nrc-service ackee restart\n\n# Check status\nrc-service ackee status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;ackee_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Stop service\nservice ackee stop\n\n# Restart service\nservice ackee restart\n\n# Check status\nservice ackee status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start ackee\nbrew services stop ackee\nbrew services restart ackee\n\n# Check status\nbrew services list | grep ackee</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start ackee\n\n# Stop service\nnet stop ackee\n\n# Using PowerShell\nStart-Service ackee\nStop-Service ackee\nRestart-Service ackee\n\n# Check status\nGet-Service ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream ackee_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name ackee.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ackee.example.com;\n\n    ssl_certificate /etc/ssl/certs/ackee.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ackee.example.com.key;\n\n    location / {\n        proxy_pass http://ackee_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName ackee.example.com\n    Redirect permanent / https://ackee.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName ackee.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ackee.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ackee.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend ackee_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ackee.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ackee_backend\n\nbackend ackee_backend\n    balance roundrobin\n    server ackee1 127.0.0.1:3000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R ackee:ackee /etc/ackee\nsudo chmod 750 /etc/ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n\n# Monitor resource usage\ntop -p $(pgrep ackee)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/ackee&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/ackee-backup-$DATE.tar.gz&quot; /etc/ackee /var/lib/ackee\n\necho &quot;Backup completed: $BACKUP_DIR/ackee-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop ackee\n\n# Restore from backup\ntar -xzf /backup/ackee/ackee-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u ackee -n 100\nsudo tail -f /var/log/ackee/ackee.log\n\n# Check configuration\nackee --version\n\n# Check permissions\nls -la /etc/ackee</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep ackee)\n\n# Check disk I/O\niotop -p $(pgrep ackee)\n\n# Check connections\nss -an | grep 3000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  ackee:\n    image: ackee:latest\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./config:/etc/ackee\n      - ./data:/var/lib/ackee\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ackee\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade ackee\n\n# Arch Linux\nsudo pacman -Syu ackee\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade ackee\n\n# openSUSE\nsudo zypper update ackee\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade ackee\n\n# Always backup before updates\ntar -czf /backup/ackee-pre-update-$(date +%Y%m%d).tar.gz /etc/ackee\n\n# Restart after updates\nsudo systemctl restart ackee</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/ackee\n\n# Clean old logs\nfind /var/log/ackee -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.ackee.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/ackee/ackee</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.ackee.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.ackee.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1151,"lastBuilt":"2025-09-16T02:44:52.662Z"},{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"adguard-home README","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-16T02:31:03Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-16T02:44:52.345Z"},{"name":"adguardhome","displayName":"Adguardhome","slug":"adguardhome","description":"adguard-home is a free and open-source network-wide ads and tracking blocking. AdGuard Home provides DNS-based blocking of ads and trackers with a modern UI, serving as an alternative to Pi-hole","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguardhome","updatedAt":"2025-09-16T02:31:03Z","createdAt":"2025-09-16T02:16:06Z","readmeRaw":"# adguard-home Installation Guide\n\nadguard-home is a free and open-source network-wide ads and tracking blocking. AdGuard Home provides DNS-based blocking of ads and trackers with a modern UI, serving as an alternative to Pi-hole\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for installation\n  - Network: DNS and HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 53 (default adguard-home port)\n  - Port 3000 for setup\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install adguard-home\nsudo dnf install -y adguardhome\n\n# Enable and start service\nsudo systemctl enable --now adguardhome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nadguardhome --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install adguard-home\nsudo apt install -y adguardhome\n\n# Enable and start service\nsudo systemctl enable --now adguardhome\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\nadguardhome --version\n```\n\n### Arch Linux\n\n```bash\n# Install adguard-home\nsudo pacman -S adguardhome\n\n# Enable and start service\nsudo systemctl enable --now adguardhome\n\n# Verify installation\nadguardhome --version\n```\n\n### Alpine Linux\n\n```bash\n# Install adguard-home\napk add --no-cache adguardhome\n\n# Enable and start service\nrc-update add adguardhome default\nrc-service adguardhome start\n\n# Verify installation\nadguardhome --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install adguard-home\nsudo zypper install -y adguardhome\n\n# Enable and start service\nsudo systemctl enable --now adguardhome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nadguardhome --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install adguardhome\n\n# Start service\nbrew services start adguardhome\n\n# Verify installation\nadguardhome --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install adguardhome\n\n# Enable in rc.conf\necho 'adguardhome_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice adguardhome start\n\n# Verify installation\nadguardhome --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install adguardhome\n\n# Or using Scoop\nscoop install adguardhome\n\n# Verify installation\nadguardhome --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/adguardhome\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nadguardhome --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable adguardhome\n\n# Start service\nsudo systemctl start adguardhome\n\n# Stop service\nsudo systemctl stop adguardhome\n\n# Restart service\nsudo systemctl restart adguardhome\n\n# Check status\nsudo systemctl status adguardhome\n\n# View logs\nsudo journalctl -u adguardhome -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add adguardhome default\n\n# Start service\nrc-service adguardhome start\n\n# Stop service\nrc-service adguardhome stop\n\n# Restart service\nrc-service adguardhome restart\n\n# Check status\nrc-service adguardhome status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'adguardhome_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice adguardhome start\n\n# Stop service\nservice adguardhome stop\n\n# Restart service\nservice adguardhome restart\n\n# Check status\nservice adguardhome status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start adguardhome\nbrew services stop adguardhome\nbrew services restart adguardhome\n\n# Check status\nbrew services list | grep adguardhome\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start adguardhome\n\n# Stop service\nnet stop adguardhome\n\n# Using PowerShell\nStart-Service adguardhome\nStop-Service adguardhome\nRestart-Service adguardhome\n\n# Check status\nGet-Service adguardhome\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream adguardhome_backend {\n    server 127.0.0.1:53;\n}\n\nserver {\n    listen 80;\n    server_name adguardhome.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name adguardhome.example.com;\n\n    ssl_certificate /etc/ssl/certs/adguardhome.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/adguardhome.example.com.key;\n\n    location / {\n        proxy_pass http://adguardhome_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName adguardhome.example.com\n    Redirect permanent / https://adguardhome.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName adguardhome.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/adguardhome.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/adguardhome.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend adguardhome_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/adguardhome.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend adguardhome_backend\n\nbackend adguardhome_backend\n    balance roundrobin\n    server adguardhome1 127.0.0.1:53 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R adguardhome:adguardhome /etc/adguardhome\nsudo chmod 750 /etc/adguardhome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status adguardhome\n\n# View logs\nsudo journalctl -u adguardhome -f\n\n# Monitor resource usage\ntop -p $(pgrep adguardhome)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/adguardhome\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/adguardhome-backup-$DATE.tar.gz\" /etc/adguardhome /var/lib/adguardhome\n\necho \"Backup completed: $BACKUP_DIR/adguardhome-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop adguardhome\n\n# Restore from backup\ntar -xzf /backup/adguardhome/adguardhome-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start adguardhome\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u adguardhome -n 100\nsudo tail -f /var/log/adguardhome/adguardhome.log\n\n# Check configuration\nadguardhome --version\n\n# Check permissions\nls -la /etc/adguardhome\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 53\n\n# Test connectivity\ntelnet localhost 53\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep adguardhome)\n\n# Check disk I/O\niotop -p $(pgrep adguardhome)\n\n# Check connections\nss -an | grep 53\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  adguardhome:\n    image: adguardhome:latest\n    ports:\n      - \"53:53\"\n    volumes:\n      - ./config:/etc/adguardhome\n      - ./data:/var/lib/adguardhome\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update adguardhome\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade adguardhome\n\n# Arch Linux\nsudo pacman -Syu adguardhome\n\n# Alpine Linux\napk update && apk upgrade adguardhome\n\n# openSUSE\nsudo zypper update adguardhome\n\n# FreeBSD\npkg update && pkg upgrade adguardhome\n\n# Always backup before updates\ntar -czf /backup/adguardhome-pre-update-$(date +%Y%m%d).tar.gz /etc/adguardhome\n\n# Restart after updates\nsudo systemctl restart adguardhome\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/adguardhome\n\n# Clean old logs\nfind /var/log/adguardhome -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/adguardhome\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.adguardhome.org/\n- GitHub Repository: https://github.com/adguardhome/adguardhome\n- Community Forum: https://forum.adguardhome.org/\n- Best Practices Guide: https://docs.adguardhome.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"adguard-home-installation-guide\" class=\"mobile-header\">adguard-home Installation Guide</h1>\n<p class=\"mobile-paragraph\">adguard-home is a free and open-source network-wide ads and tracking blocking. AdGuard Home provides DNS-based blocking of ads and trackers with a modern UI, serving as an alternative to Pi-hole</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: DNS and HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 53 (default adguard-home port)</li>\n<li class=\"mobile-list-item\">Port 3000 for setup</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install adguard-home\nsudo dnf install -y adguardhome\n\n# Enable and start service\nsudo systemctl enable --now adguardhome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install adguard-home\nsudo apt install -y adguardhome\n\n# Enable and start service\nsudo systemctl enable --now adguardhome\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install adguard-home\nsudo pacman -S adguardhome\n\n# Enable and start service\nsudo systemctl enable --now adguardhome\n\n# Verify installation\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install adguard-home\napk add --no-cache adguardhome\n\n# Enable and start service\nrc-update add adguardhome default\nrc-service adguardhome start\n\n# Verify installation\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install adguard-home\nsudo zypper install -y adguardhome\n\n# Enable and start service\nsudo systemctl enable --now adguardhome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install adguardhome\n\n# Start service\nbrew services start adguardhome\n\n# Verify installation\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install adguardhome\n\n# Enable in rc.conf\necho &#039;adguardhome_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice adguardhome start\n\n# Verify installation\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install adguardhome\n\n# Or using Scoop\nscoop install adguardhome\n\n# Verify installation\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/adguardhome\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nadguardhome --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable adguardhome\n\n# Start service\nsudo systemctl start adguardhome\n\n# Stop service\nsudo systemctl stop adguardhome\n\n# Restart service\nsudo systemctl restart adguardhome\n\n# Check status\nsudo systemctl status adguardhome\n\n# View logs\nsudo journalctl -u adguardhome -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add adguardhome default\n\n# Start service\nrc-service adguardhome start\n\n# Stop service\nrc-service adguardhome stop\n\n# Restart service\nrc-service adguardhome restart\n\n# Check status\nrc-service adguardhome status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;adguardhome_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice adguardhome start\n\n# Stop service\nservice adguardhome stop\n\n# Restart service\nservice adguardhome restart\n\n# Check status\nservice adguardhome status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start adguardhome\nbrew services stop adguardhome\nbrew services restart adguardhome\n\n# Check status\nbrew services list | grep adguardhome</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start adguardhome\n\n# Stop service\nnet stop adguardhome\n\n# Using PowerShell\nStart-Service adguardhome\nStop-Service adguardhome\nRestart-Service adguardhome\n\n# Check status\nGet-Service adguardhome</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream adguardhome_backend {\n    server 127.0.0.1:53;\n}\n\nserver {\n    listen 80;\n    server_name adguardhome.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name adguardhome.example.com;\n\n    ssl_certificate /etc/ssl/certs/adguardhome.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/adguardhome.example.com.key;\n\n    location / {\n        proxy_pass http://adguardhome_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName adguardhome.example.com\n    Redirect permanent / https://adguardhome.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName adguardhome.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/adguardhome.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/adguardhome.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend adguardhome_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/adguardhome.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend adguardhome_backend\n\nbackend adguardhome_backend\n    balance roundrobin\n    server adguardhome1 127.0.0.1:53 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R adguardhome:adguardhome /etc/adguardhome\nsudo chmod 750 /etc/adguardhome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status adguardhome\n\n# View logs\nsudo journalctl -u adguardhome -f\n\n# Monitor resource usage\ntop -p $(pgrep adguardhome)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/adguardhome&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/adguardhome-backup-$DATE.tar.gz&quot; /etc/adguardhome /var/lib/adguardhome\n\necho &quot;Backup completed: $BACKUP_DIR/adguardhome-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop adguardhome\n\n# Restore from backup\ntar -xzf /backup/adguardhome/adguardhome-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start adguardhome</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u adguardhome -n 100\nsudo tail -f /var/log/adguardhome/adguardhome.log\n\n# Check configuration\nadguardhome --version\n\n# Check permissions\nls -la /etc/adguardhome</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 53\n\n# Test connectivity\ntelnet localhost 53\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep adguardhome)\n\n# Check disk I/O\niotop -p $(pgrep adguardhome)\n\n# Check connections\nss -an | grep 53</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  adguardhome:\n    image: adguardhome:latest\n    ports:\n      - &quot;53:53&quot;\n    volumes:\n      - ./config:/etc/adguardhome\n      - ./data:/var/lib/adguardhome\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update adguardhome\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade adguardhome\n\n# Arch Linux\nsudo pacman -Syu adguardhome\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade adguardhome\n\n# openSUSE\nsudo zypper update adguardhome\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade adguardhome\n\n# Always backup before updates\ntar -czf /backup/adguardhome-pre-update-$(date +%Y%m%d).tar.gz /etc/adguardhome\n\n# Restart after updates\nsudo systemctl restart adguardhome</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/adguardhome\n\n# Clean old logs\nfind /var/log/adguardhome -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/adguardhome</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.adguardhome.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/adguardhome/adguardhome</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.adguardhome.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.adguardhome.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1172,"lastBuilt":"2025-09-16T02:44:52.097Z"}]},"__N_SSG":true}