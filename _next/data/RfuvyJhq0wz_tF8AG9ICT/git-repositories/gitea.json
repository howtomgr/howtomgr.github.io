{"pageProps":{"guide":{"name":"gitea","displayName":"gitea Installation Guide","slug":"gitea","description":"gitea is a free and open-source lightweight self-hosted Git service. Written in Go, Gitea provides a lightweight alternative to GitHub, GitLab, or Bitbucket for self-hosted Git repository management","category":"git-repositories","subcategory":"git-repositories","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[22,80,443,3000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["git-repositories","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/git-repositories/gitea","documentationUrl":"https://howtomgr.github.io/git-repositories/gitea","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitea","updatedAt":"2025-09-16T17:15:40Z","createdAt":"2023-08-28T03:47:56Z","readmeRaw":"# gitea Installation Guide\n\ngitea is a free and open-source lightweight self-hosted Git service. Written in Go, Gitea provides a lightweight alternative to GitHub, GitLab, or Bitbucket for self-hosted Git repository management\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum (1GB+ recommended)\n  - Storage: 200MB + repository data\n  - Network: Git protocol and HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3000 (default gitea port)\n  - Port 22 for Git SSH\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gitea\nsudo dnf install -y gitea\n\n# Enable and start service\nsudo systemctl enable --now gitea\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitea --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gitea\nsudo apt install -y gitea\n\n# Enable and start service\nsudo systemctl enable --now gitea\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\ngitea --version\n```\n\n### Arch Linux\n\n```bash\n# Install gitea\nsudo pacman -S gitea\n\n# Enable and start service\nsudo systemctl enable --now gitea\n\n# Verify installation\ngitea --version\n```\n\n### Alpine Linux\n\n```bash\n# Install gitea\napk add --no-cache gitea\n\n# Enable and start service\nrc-update add gitea default\nrc-service gitea start\n\n# Verify installation\ngitea --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gitea\nsudo zypper install -y gitea\n\n# Enable and start service\nsudo systemctl enable --now gitea\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitea --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gitea\n\n# Start service\nbrew services start gitea\n\n# Verify installation\ngitea --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gitea\n\n# Enable in rc.conf\necho 'gitea_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gitea start\n\n# Verify installation\ngitea --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gitea\n\n# Or using Scoop\nscoop install gitea\n\n# Verify installation\ngitea --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gitea\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngitea --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gitea\n\n# Start service\nsudo systemctl start gitea\n\n# Stop service\nsudo systemctl stop gitea\n\n# Restart service\nsudo systemctl restart gitea\n\n# Check status\nsudo systemctl status gitea\n\n# View logs\nsudo journalctl -u gitea -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gitea default\n\n# Start service\nrc-service gitea start\n\n# Stop service\nrc-service gitea stop\n\n# Restart service\nrc-service gitea restart\n\n# Check status\nrc-service gitea status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gitea_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gitea start\n\n# Stop service\nservice gitea stop\n\n# Restart service\nservice gitea restart\n\n# Check status\nservice gitea status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gitea\nbrew services stop gitea\nbrew services restart gitea\n\n# Check status\nbrew services list | grep gitea\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gitea\n\n# Stop service\nnet stop gitea\n\n# Using PowerShell\nStart-Service gitea\nStop-Service gitea\nRestart-Service gitea\n\n# Check status\nGet-Service gitea\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gitea_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name gitea.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gitea.example.com;\n\n    ssl_certificate /etc/ssl/certs/gitea.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gitea.example.com.key;\n\n    location / {\n        proxy_pass http://gitea_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gitea.example.com\n    Redirect permanent / https://gitea.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gitea.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gitea.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gitea.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gitea_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gitea.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gitea_backend\n\nbackend gitea_backend\n    balance roundrobin\n    server gitea1 127.0.0.1:3000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gitea:gitea /etc/gitea\nsudo chmod 750 /etc/gitea\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gitea\n\n# View logs\nsudo journalctl -u gitea -f\n\n# Monitor resource usage\ntop -p $(pgrep gitea)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gitea\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gitea-backup-$DATE.tar.gz\" /etc/gitea /var/lib/gitea\n\necho \"Backup completed: $BACKUP_DIR/gitea-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gitea\n\n# Restore from backup\ntar -xzf /backup/gitea/gitea-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gitea\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gitea -n 100\nsudo tail -f /var/log/gitea/gitea.log\n\n# Check configuration\ngitea --version\n\n# Check permissions\nls -la /etc/gitea\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gitea)\n\n# Check disk I/O\niotop -p $(pgrep gitea)\n\n# Check connections\nss -an | grep 3000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gitea:\n    image: gitea:latest\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./config:/etc/gitea\n      - ./data:/var/lib/gitea\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gitea\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gitea\n\n# Arch Linux\nsudo pacman -Syu gitea\n\n# Alpine Linux\napk update && apk upgrade gitea\n\n# openSUSE\nsudo zypper update gitea\n\n# FreeBSD\npkg update && pkg upgrade gitea\n\n# Always backup before updates\ntar -czf /backup/gitea-pre-update-$(date +%Y%m%d).tar.gz /etc/gitea\n\n# Restart after updates\nsudo systemctl restart gitea\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gitea\n\n# Clean old logs\nfind /var/log/gitea -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gitea\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gitea.org/\n- GitHub Repository: https://github.com/gitea/gitea\n- Community Forum: https://forum.gitea.org/\n- Best Practices Guide: https://docs.gitea.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">gitea is a free and open-source lightweight self-hosted Git service. Written in Go, Gitea provides a lightweight alternative to GitHub, GitLab, or Bitbucket for self-hosted Git repository management</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum (1GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 200MB + repository data</li>\n<li class=\"mobile-list-item\">Network: Git protocol and HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3000 (default gitea port)</li>\n<li class=\"mobile-list-item\">Port 22 for Git SSH</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gitea\nsudo dnf install -y gitea\n\n# Enable and start service\nsudo systemctl enable --now gitea\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitea --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gitea\nsudo apt install -y gitea\n\n# Enable and start service\nsudo systemctl enable --now gitea\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\ngitea --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitea\nsudo pacman -S gitea\n\n# Enable and start service\nsudo systemctl enable --now gitea\n\n# Verify installation\ngitea --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitea\napk add --no-cache gitea\n\n# Enable and start service\nrc-update add gitea default\nrc-service gitea start\n\n# Verify installation\ngitea --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitea\nsudo zypper install -y gitea\n\n# Enable and start service\nsudo systemctl enable --now gitea\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitea --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gitea\n\n# Start service\nbrew services start gitea\n\n# Verify installation\ngitea --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gitea\n\n# Enable in rc.conf\necho &#039;gitea_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gitea start\n\n# Verify installation\ngitea --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gitea\n\n# Or using Scoop\nscoop install gitea\n\n# Verify installation\ngitea --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gitea\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngitea --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gitea\n\n# Start service\nsudo systemctl start gitea\n\n# Stop service\nsudo systemctl stop gitea\n\n# Restart service\nsudo systemctl restart gitea\n\n# Check status\nsudo systemctl status gitea\n\n# View logs\nsudo journalctl -u gitea -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gitea default\n\n# Start service\nrc-service gitea start\n\n# Stop service\nrc-service gitea stop\n\n# Restart service\nrc-service gitea restart\n\n# Check status\nrc-service gitea status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gitea_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gitea start\n\n# Stop service\nservice gitea stop\n\n# Restart service\nservice gitea restart\n\n# Check status\nservice gitea status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gitea\nbrew services stop gitea\nbrew services restart gitea\n\n# Check status\nbrew services list | grep gitea</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gitea\n\n# Stop service\nnet stop gitea\n\n# Using PowerShell\nStart-Service gitea\nStop-Service gitea\nRestart-Service gitea\n\n# Check status\nGet-Service gitea</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gitea_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name gitea.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gitea.example.com;\n\n    ssl_certificate /etc/ssl/certs/gitea.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gitea.example.com.key;\n\n    location / {\n        proxy_pass http://gitea_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gitea.example.com\n    Redirect permanent / https://gitea.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gitea.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gitea.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gitea.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gitea_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gitea.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gitea_backend\n\nbackend gitea_backend\n    balance roundrobin\n    server gitea1 127.0.0.1:3000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gitea:gitea /etc/gitea\nsudo chmod 750 /etc/gitea\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gitea\n\n# View logs\nsudo journalctl -u gitea -f\n\n# Monitor resource usage\ntop -p $(pgrep gitea)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gitea&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gitea-backup-$DATE.tar.gz&quot; /etc/gitea /var/lib/gitea\n\necho &quot;Backup completed: $BACKUP_DIR/gitea-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gitea\n\n# Restore from backup\ntar -xzf /backup/gitea/gitea-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gitea</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gitea -n 100\nsudo tail -f /var/log/gitea/gitea.log\n\n# Check configuration\ngitea --version\n\n# Check permissions\nls -la /etc/gitea</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gitea)\n\n# Check disk I/O\niotop -p $(pgrep gitea)\n\n# Check connections\nss -an | grep 3000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gitea:\n    image: gitea:latest\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./config:/etc/gitea\n      - ./data:/var/lib/gitea\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gitea\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gitea\n\n# Arch Linux\nsudo pacman -Syu gitea\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gitea\n\n# openSUSE\nsudo zypper update gitea\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gitea\n\n# Always backup before updates\ntar -czf /backup/gitea-pre-update-$(date +%Y%m%d).tar.gz /etc/gitea\n\n# Restart after updates\nsudo systemctl restart gitea</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gitea\n\n# Clean old logs\nfind /var/log/gitea -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gitea</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gitea.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gitea/gitea</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gitea.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gitea.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1289,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-16T06:19:21.394Z","metadataVersion":"2.0"},"category":{"key":"git-repositories","name":"Git repositories","description":"Git repositories tools and applications","icon":"🏗️","color":"#44475a"},"relatedGuides":[{"name":"gitlab","displayName":"GitLab Installation and Configuration Guide","slug":"gitlab","description":"Gitlab installation and configuration guide","category":"git-repositories","subcategory":"git-repositories","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[1,2,5,10,18,22,80,443,514,5000,8080,8082,8090,8091,8150,8151,8181,8404,9090,9093,9100,9121,9168,9187,9229,9236],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["git-repositories","containerization","orchestration","observability","data-storage","web-services","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/git-repositories/gitlab","documentationUrl":"https://howtomgr.github.io/git-repositories/gitlab","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitlab","updatedAt":"2025-09-16T17:15:53Z","createdAt":"2025-09-08T03:07:56Z","readmeRaw":"# GitLab Installation and Configuration Guide\n\n\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Introduction\n\nGitLab is a comprehensive DevOps platform that provides Git repository management, CI/CD pipelines, issue tracking, container registry, and security scanning capabilities. As a Free and Open Source Software (FOSS) solution, GitLab Community Edition offers robust features for teams of all sizes, while GitLab Enterprise Edition provides additional advanced features for enterprise environments.\n\n### FOSS Context\nGitLab Community Edition (CE) is released under the MIT License and provides:\n- Core Git repository management\n- Issue tracking and project management\n- Integrated CI/CD with GitLab Runner\n- Built-in container registry\n- Merge request workflows\n- Wiki and documentation\n- Security scanning (basic)\n\nGitLab Enterprise Edition (EE) extends CE with premium features including advanced security scanning, compliance management, geo-replication, and enterprise authentication integrations.\n\n### Key Features\n- **Repository Management**: Git-based version control with advanced merge request workflows\n- **CI/CD Platform**: Integrated continuous integration and deployment with GitLab Runner\n- **Container Registry**: Built-in Docker registry with vulnerability scanning\n- **Security**: SAST, DAST, dependency scanning, and secret detection\n- **Project Management**: Issue tracking, milestones, and agile planning tools\n- **Monitoring**: Performance monitoring and error tracking\n- **Authentication**: LDAP, SAML, OAuth, and multi-factor authentication support\n\n## 2. Prerequisites\n\n### 10. System Requirements\n- **Operating System**: Linux (RHEL/CentOS 8+, Ubuntu 20.04+, Debian 10+, SUSE Linux, Arch Linux), macOS 10.15+, Windows 10/11, or FreeBSD 12+\n- **Memory**: 8GB RAM minimum, 16GB+ recommended for production, 32GB+ for large installations\n- **CPU**: 4 cores minimum, 8+ recommended for production\n- **Storage**: 50GB+ available disk space, SSD strongly recommended for database and Git repositories\n- **Network**: Stable internet connection, open ports 80, 443, and 22 (or custom SSH port)\n\n### Required Software Dependencies\n- **Package Manager**: apt (Debian/Ubuntu), yum/dnf (RHEL/CentOS/Fedora), pacman (Arch), zypper (openSUSE), pkg (FreeBSD)\n- **System Tools**: curl, wget, openssh-server, ca-certificates, tzdata, perl\n- **Mail Transfer Agent**: Postfix, Sendmail, or external SMTP service\n- **Firewall**: firewalld, ufw, or iptables for security configuration\n\n### Network Requirements\n- **Domain Name**: Fully qualified domain name for external access\n- **SSL Certificates**: Valid SSL/TLS certificates for production deployment (Let's Encrypt recommended)\n- **Firewall Ports**: \n  - 80/tcp (HTTP, redirects to HTTPS)\n  - 443/tcp (HTTPS)\n  - 22/tcp or custom port (SSH/Git)\n  - 2222/tcp (GitLab Shell SSH, if configured)\n- **SMTP Server**: For email notifications (password resets, notifications, etc.)\n\n### Optional Components\n- **External Database**: PostgreSQL 12+ for high availability setups\n- **External Redis**: Redis 6+ for session storage and caching\n- **Object Storage**: S3-compatible storage for artifacts, uploads, and backups\n- **Load Balancer**: For multi-node GitLab installations\n- **Monitoring**: Prometheus, Grafana for advanced monitoring\n\n## 3. Installation\n\nGitLab provides native packages for all major operating systems. The Omnibus package is the recommended installation method as it includes all dependencies and provides automatic updates.\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n#### RHEL/CentOS 8+ / Rocky Linux / AlmaLinux\n```bash\n# Update system packages\nsudo dnf update -y\n\n# Install required dependencies\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable and start required services\nsudo systemctl enable --now sshd postfix\n\n# Configure SELinux policies for GitLab\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_read_user_content 1\nsudo setsebool -P httpd_enable_homedirs 1\n\n# Configure firewall rules\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --permanent --add-port=2222/tcp\nsudo firewall-cmd --reload\n\n# Add GitLab official repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab Enterprise Edition\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" dnf install -y gitlab-ee\n\n# For Community Edition instead:\n# sudo EXTERNAL_URL=\"https://gitlab.example.com\" dnf install -y gitlab-ce\n\n# Initial configuration and start services\nsudo gitlab-ctl reconfigure\n\n# Check installation status\nsudo gitlab-ctl status\n```\n\n#### RHEL/CentOS 7 (Legacy)\n```bash\n# Install dependencies\nsudo yum install -y curl policycoreutils-python openssh-server perl postfix\n\n# Configure services\nsudo systemctl enable --now sshd postfix\nsudo lokkit -s http -s https -s ssh\n\n# Add repository and install\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" yum install -y gitlab-ee\nsudo gitlab-ctl reconfigure\n```\n\n### Debian/Ubuntu\n\n#### Ubuntu 20.04+ / Debian 10+\n```bash\n# Update package repositories\nsudo apt-get update\n\n# Install required dependencies\nsudo apt-get install -y curl openssh-server ca-certificates tzdata perl postfix gpg\n\n# Configure Postfix for email (choose 'Internet Site' for basic setup)\nsudo dpkg-reconfigure postfix\n\n# Configure UFW firewall (if enabled)\nsudo ufw allow ssh\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw allow 2222/tcp\n\n# Add GitLab official repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab Enterprise Edition\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" apt-get install -y gitlab-ee\n\n# For Community Edition instead:\n# sudo EXTERNAL_URL=\"https://gitlab.example.com\" apt-get install -y gitlab-ce\n\n# Initial configuration and start services\nsudo gitlab-ctl reconfigure\n\n# Verify installation\nsudo gitlab-ctl status\n```\n\n### Arch Linux\n\n```bash\n# Update system packages\nsudo pacman -Syu\n\n# Install required dependencies\nsudo pacman -S curl openssh postfix\n\n# Enable and start services\nsudo systemctl enable --now sshd postfix\n\n# Install GitLab from AUR (using yay helper)\nyay -S gitlab-ee\n\n# Or install GitLab Community Edition\n# yay -S gitlab\n\n# Configure GitLab\nsudo vim /etc/gitlab/gitlab.rb\n# Set: external_url 'https://gitlab.example.com'\n\n# Initial configuration\nsudo gitlab-ctl reconfigure\n\n# Enable GitLab service\nsudo systemctl enable gitlab-runsvdir\nsudo systemctl start gitlab-runsvdir\n```\n\n### Alpine Linux\n\n```bash\n# Update package index\nsudo apk update\n\n# Install required packages\nsudo apk add curl openssh postfix\n\n# Enable services\nsudo rc-update add sshd default\nsudo rc-update add postfix default\nsudo rc-service sshd start\nsudo rc-service postfix start\n\n# Add GitLab repository key\nwget -O /etc/apk/keys/gitlab.rsa.pub https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey/gitlab-gitlab-ee-3D645A26AB9FBD22.rsa.pub\n\n# Add GitLab repository\necho \"https://packages.gitlab.com/gitlab/gitlab-ee/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1-2)/main\" >> /etc/apk/repositories\n\n# Update and install GitLab\nsudo apk update\nsudo apk add gitlab-ee\n\n# Configure external URL\necho \"external_url 'https://gitlab.example.com'\" >> /etc/gitlab/gitlab.rb\n\n# Reconfigure and start\nsudo gitlab-ctl reconfigure\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dependencies (openSUSE)\nsudo zypper install -y curl openssh postfix\n\n# For SLES\n# sudo zypper install -y curl openssh2 postfix\n\n# Enable services\nsudo systemctl enable --now sshd postfix\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" zypper install -y gitlab-ee\n\n# Configure and start\nsudo gitlab-ctl reconfigure\n```\n\n### macOS\n\n```bash\n# Install Homebrew if not already installed\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install required dependencies\nbrew install curl git postfix\n\n# Start postfix service\nsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.postfix.master.plist\n\n# Install GitLab using official installer\ncurl -LO https://packages.gitlab.com/gitlab/gitlab-ee/packages/el/8/gitlab-ee-latest.x86_64.rpm\n\n# Note: GitLab doesn't provide native macOS packages\n# Recommended to use Docker for macOS installations:\n\n# Create GitLab directories\nsudo mkdir -p /srv/gitlab/{config,logs,data}\n\n# Set environment variables\nexport GITLAB_HOME=/srv/gitlab\n\n# Run GitLab container\ndocker run --detach \\\n  --hostname gitlab.example.com \\\n  --publish 443:443 --publish 80:80 --publish 2222:22 \\\n  --name gitlab \\\n  --restart unless-stopped \\\n  --volume $GITLAB_HOME/config:/etc/gitlab \\\n  --volume $GITLAB_HOME/logs:/var/log/gitlab \\\n  --volume $GITLAB_HOME/data:/var/opt/gitlab \\\n  --shm-size 256m \\\n  --env GITLAB_OMNIBUS_CONFIG=\"external_url 'https://gitlab.example.com'\" \\\n  gitlab/gitlab-ee:latest\n```\n\n### FreeBSD\n\n```bash\n# Update ports tree\nsudo portsnap fetch extract\n\n# Install required ports\nsudo pkg install curl openssh-portable postfix git\n\n# Enable services\nsudo sysrc sshd_enable=\"YES\"\nsudo sysrc postfix_enable=\"YES\"\nsudo service sshd start\nsudo service postfix start\n\n# Configure firewall (if pf is enabled)\necho 'pass in on $ext_if proto tcp from any to any port {22, 80, 443, 2222}' >> /etc/pf.conf\nsudo pfctl -f /etc/pf.conf\n\n# GitLab doesn't provide official FreeBSD packages\n# Install using source compilation or Docker:\n\n# Docker method (install Docker first)\nsudo pkg install docker\nsudo sysrc docker_enable=\"YES\"\nsudo service docker start\n\n# Run GitLab container\nsudo docker run --detach \\\n  --hostname gitlab.example.com \\\n  --publish 443:443 --publish 80:80 --publish 2222:22 \\\n  --name gitlab \\\n  --restart unless-stopped \\\n  --volume /usr/local/gitlab/config:/etc/gitlab \\\n  --volume /usr/local/gitlab/logs:/var/log/gitlab \\\n  --volume /usr/local/gitlab/data:/var/opt/gitlab \\\n  --shm-size 256m \\\n  gitlab/gitlab-ee:latest\n```\n\n### Windows\n\nGitLab does not provide native Windows packages. Use Docker Desktop or WSL2 with Linux installation.\n\n#### Windows with Docker Desktop\n```powershell\n# Install Docker Desktop from https://www.docker.com/products/docker-desktop\n\n# Create GitLab directories\nmkdir C:\\gitlab\\config\nmkdir C:\\gitlab\\logs\nmkdir C:\\gitlab\\data\n\n# Run GitLab container\ndocker run --detach `\n  --hostname gitlab.example.com `\n  --publish 443:443 --publish 80:80 --publish 2222:22 `\n  --name gitlab `\n  --restart unless-stopped `\n  --volume C:\\gitlab\\config:/etc/gitlab `\n  --volume C:\\gitlab\\logs:/var/log/gitlab `\n  --volume C:\\gitlab\\data:/var/opt/gitlab `\n  --shm-size 256m `\n  --env GITLAB_OMNIBUS_CONFIG=\"external_url 'https://gitlab.example.com'\" `\n  gitlab/gitlab-ee:latest\n```\n\n#### Windows with WSL2\n```bash\n# Enable WSL2 and install Ubuntu\nwsl --install -d Ubuntu\n\n# Switch to WSL2 Ubuntu environment\nwsl\n\n# Follow Ubuntu installation instructions above\nsudo apt-get update\nsudo apt-get install -y curl openssh-server ca-certificates tzdata perl postfix gpg\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" apt-get install -y gitlab-ee\nsudo gitlab-ctl reconfigure\n```\n\n## 4. Initial Configuration\n\nAfter installation, GitLab requires initial configuration to set up the root password and basic settings.\n\n### First-time Setup\n\n1. **Access GitLab Web Interface**\n   ```bash\n   # Wait for GitLab to fully start (may take 2-3 minutes)\n   sudo gitlab-ctl status\n   \n   # Check GitLab is responding\n   curl -I http://localhost\n   ```\n\n2. **Retrieve Initial Root Password**\n   ```bash\n   # Get the initial root password\n   sudo cat /etc/gitlab/initial_root_password\n   ```\n\n3. **Web Interface Setup**\n   - Navigate to `https://your-domain.com` or `http://your-server-ip`\n   - Login with username: `root` and the password from step 2\n   - Set a new secure root password immediately\n   - Complete the initial setup wizard\n\n### Basic Configuration File Setup\n\nEdit the main configuration file:\n```bash\nsudo vim /etc/gitlab/gitlab.rb\n```\n\nEssential initial settings:\n```ruby\n# External URL (replace with your domain)\nexternal_url 'https://gitlab.example.com'\n\n# Email configuration\ngitlab_rails['gitlab_email_enabled'] = true\ngitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\ngitlab_rails['gitlab_email_display_name'] = 'GitLab'\n\n# SMTP configuration (example with Gmail)\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.gmail.com\"\ngitlab_rails['smtp_port'] = 587\ngitlab_rails['smtp_user_name'] = \"gitlab@example.com\"\ngitlab_rails['smtp_password'] = \"app_password\"\ngitlab_rails['smtp_domain'] = \"gmail.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\n\n# Time zone\ngitlab_rails['time_zone'] = 'UTC'\n\n# GitLab Shell SSH port (if different from 22)\ngitlab_rails['gitlab_shell_ssh_port'] = 2222\n```\n\nApply configuration changes:\n```bash\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n```\n\n### SSL/TLS Configuration\n\n#### Let's Encrypt (Recommended)\n```bash\n# Enable Let's Encrypt in gitlab.rb\nsudo vim /etc/gitlab/gitlab.rb\n```\n\nAdd these settings:\n```ruby\n# Enable Let's Encrypt\nletsencrypt['enable'] = true\nletsencrypt['contact_emails'] = ['admin@example.com']\nletsencrypt['auto_renew'] = true\n\n# Force HTTPS\nnginx['redirect_http_to_https'] = true\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\n```\n\nReconfigure to activate SSL:\n```bash\nsudo gitlab-ctl reconfigure\n```\n\n#### Manual SSL Certificate\n```bash\n# Create SSL directory\nsudo mkdir -p /etc/gitlab/ssl\n\n# Copy your certificates (replace with your actual cert files)\nsudo cp your-certificate.crt /etc/gitlab/ssl/gitlab.example.com.crt\nsudo cp your-private-key.key /etc/gitlab/ssl/gitlab.example.com.key\n\n# Set proper permissions\nsudo chmod 600 /etc/gitlab/ssl/gitlab.example.com.key\nsudo chmod 644 /etc/gitlab/ssl/gitlab.example.com.crt\n```\n\nConfigure in gitlab.rb:\n```ruby\nexternal_url 'https://gitlab.example.com'\nnginx['ssl_certificate'] = \"/etc/gitlab/ssl/gitlab.example.com.crt\"\nnginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/gitlab.example.com.key\"\n```\n\n## 5. Service Management\n\nGitLab uses the `gitlab-ctl` command for service management across all platforms.\n\n### Service Control Commands\n\n```bash\n# Check status of all services\nsudo gitlab-ctl status\n\n# Start all GitLab services\nsudo gitlab-ctl start\n\n# Stop all GitLab services  \nsudo gitlab-ctl stop\n\n# Restart all GitLab services\nsudo gitlab-ctl restart\n\n# Restart specific service\nsudo gitlab-ctl restart nginx\nsudo gitlab-ctl restart unicorn\nsudo gitlab-ctl restart sidekiq\n\n# Reload configuration without restart\nsudo gitlab-ctl reconfigure\n\n# Show service logs\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail postgresql\n```\n\n### Service Status Monitoring\n\n```bash\n# Detailed service status\nsudo gitlab-ctl service-list\n\n# Check specific service\nsudo gitlab-ctl status nginx\nsudo gitlab-ctl status postgresql\nsudo gitlab-ctl status redis\n\n# Monitor service logs in real-time\nsudo gitlab-ctl tail -f gitlab-workhorse\nsudo gitlab-ctl tail -f sidekiq\n\n# Check GitLab application status\nsudo gitlab-rake gitlab:check\n\n# Environment information\nsudo gitlab-rake gitlab:env:info\n```\n\n### Systemd Integration\n\nOn systems with systemd, GitLab services are managed through systemd:\n\n```bash\n# Enable GitLab to start at boot\nsudo systemctl enable gitlab-runsvdir.service\n\n# Start GitLab services\nsudo systemctl start gitlab-runsvdir.service\n\n# Check systemd status\nsudo systemctl status gitlab-runsvdir.service\n\n# Stop GitLab services\nsudo systemctl stop gitlab-runsvdir.service\n\n# Check GitLab logs through journald\nsudo journalctl -u gitlab-runsvdir.service -f\n```\n\n### Service Configuration\n\nIndividual service configuration in `/etc/gitlab/gitlab.rb`:\n\n```ruby\n# Unicorn (web server) settings\nunicorn['worker_processes'] = 4\nunicorn['worker_memory_limit_min'] = \"400m\"\nunicorn['worker_memory_limit_max'] = \"650m\"\n\n# Sidekiq (background jobs) settings  \nsidekiq['max_concurrency'] = 25\nsidekiq['log_format'] = 'json'\n\n# GitLab Workhorse settings\ngitlab_workhorse['listen_network'] = \"tcp\"\ngitlab_workhorse['listen_addr'] = \"127.0.0.1:8181\"\n\n# NGINX settings\nnginx['listen_port'] = 80\nnginx['listen_https'] = false  # Use with reverse proxy\nnginx['client_max_body_size'] = '250m'\n```\n\n## 6. Advanced Configuration\n\n### Performance Optimization\n\nConfigure GitLab for optimal performance based on your hardware resources:\n\n```ruby\n# /etc/gitlab/gitlab.rb - Performance settings\n\n# Unicorn web server optimization\nunicorn['worker_processes'] = 8  # Number of CPU cores\nunicorn['worker_memory_limit_min'] = \"400m\"\nunicorn['worker_memory_limit_max'] = \"650m\"\nunicorn['worker_timeout'] = 60\n\n# Sidekiq background job optimization\nsidekiq['max_concurrency'] = 25\nsidekiq['min_concurrency'] = 10\nsidekiq['log_format'] = 'json'\n\n# PostgreSQL optimization\npostgresql['shared_buffers'] = \"2GB\"\npostgresql['effective_cache_size'] = \"8GB\"\npostgresql['work_mem'] = \"16MB\"\npostgresql['maintenance_work_mem'] = \"256MB\"\npostgresql['max_connections'] = 300\npostgresql['checkpoint_completion_target'] = 0.9\npostgresql['wal_buffers'] = \"16MB\"\npostgresql['random_page_cost'] = 1.1\n\n# Redis optimization\nredis['maxmemory'] = \"1gb\"\nredis['maxmemory_policy'] = \"allkeys-lru\"\nredis['tcp_keepalive'] = 300\nredis['tcp_timeout'] = 60\n\n# Gitaly optimization (Git RPC service)\ngitaly['ruby_max_rss'] = 300000000  # 300MB\ngitaly['concurrency'] = [\n  {\n    'rpc' => \"/gitaly.SmartHTTPService/PostReceivePack\",\n    'max_per_repo' => 3\n  },\n  {\n    'rpc' => \"/gitaly.SSHService/SSHUploadPack\",\n    'max_per_repo' => 3\n  }\n]\n\n# File system optimization\ngit_data_dirs({\n  \"default\" => {\n    \"path\" => \"/var/opt/gitlab/git-data\"\n  }\n})\n\n# Logging optimization\nlogging['svlogd_size'] = 200 * 1024 * 1024  # 200MB\nlogging['svlogd_num'] = 30\nlogging['logrotate_frequency'] = \"daily\"\nlogging['logrotate_rotate'] = 30\n```\n\n### Enterprise Features Configuration\n\n```ruby\n# LDAP/Active Directory integration\ngitlab_rails['ldap_enabled'] = true\ngitlab_rails['ldap_servers'] = {\n  'main' => {\n    'label' => 'LDAP',\n    'host' => 'ldap.example.com',\n    'port' => 636,\n    'uid' => 'sAMAccountName',\n    'bind_dn' => 'CN=gitlab,OU=Service Accounts,DC=example,DC=com',\n    'password' => 'ldap_service_password',\n    'encryption' => 'ssl',\n    'verify_certificates' => true,\n    'base' => 'DC=example,DC=com',\n    'user_filter' => '',\n    'attributes' => {\n      'username' => ['uid', 'userid', 'sAMAccountName'],\n      'email' => ['mail', 'email', 'userPrincipalName'],\n      'name' => 'cn',\n      'first_name' => 'givenName',\n      'last_name' => 'sn'\n    },\n    'group_base' => 'OU=Groups,DC=example,DC=com',\n    'admin_group' => 'GitLab Administrators'\n  }\n}\n\n# SAML SSO configuration\ngitlab_rails['omniauth_enabled'] = true\ngitlab_rails['omniauth_allow_single_sign_on'] = ['saml']\ngitlab_rails['omniauth_block_auto_created_users'] = false\ngitlab_rails['omniauth_auto_link_saml_user'] = true\ngitlab_rails['omniauth_providers'] = [\n  {\n    name: 'saml',\n    args: {\n      assertion_consumer_service_url: 'https://gitlab.example.com/users/auth/saml/callback',\n      idp_cert_fingerprint: 'SAML_IDP_CERT_FINGERPRINT',\n      idp_sso_target_url: 'https://idp.example.com/sso/saml',\n      issuer: 'https://gitlab.example.com',\n      name_identifier_format: 'urn:oasis:names:tc:SAML:2.0:nameid-format:emailAddress'\n    },\n    label: 'Company SSO'\n  }\n]\n\n# Geo replication (Enterprise Premium)\ngitlab_rails['geo_primary_role'] = true\ngitlab_rails['geo_node_name'] = 'primary-site'\ngitlab_rails['geo_registry_replication_enabled'] = true\n\n# Advanced security features\ngitlab_rails['security_auto_fix_enabled'] = true\ngitlab_rails['dependency_proxy_enabled'] = true\ngitlab_rails['packages_enabled'] = true\n```\n\n### Container Registry Configuration\n\n```ruby\n# Container Registry setup\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\nregistry['enable'] = true\nregistry['username'] = \"registry\"\nregistry['group'] = \"registry\"\nregistry['dir'] = \"/var/opt/gitlab/registry\"\n\n# Registry storage configuration (S3)\nregistry['storage'] = {\n  's3' => {\n    'accesskey' => 'registry_s3_access_key',\n    'secretkey' => 'registry_s3_secret_key',\n    'bucket' => 'gitlab-registry',\n    'region' => 'us-west-2',\n    'encrypt' => true\n  }\n}\n\n# Registry security\nregistry['auth_token_realm'] = \"https://gitlab.example.com/jwt/auth\"\nregistry['auth_token_service'] = \"container_registry\"\nregistry['auth_token_issuer'] = \"gitlab-issuer\"\n\n# Registry health checks\nregistry['health_storagedriver_enabled'] = true\nregistry['health_storagedriver_interval'] = '10s'\nregistry['health_storagedriver_threshold'] = 3\n\n# Container scanning and cleanup\ngitlab_rails['container_registry_cleanup_enabled'] = true\ngitlab_rails['container_registry_expiration_policy_enabled'] = true\n```\n\n### GitLab Pages Configuration\n\n```ruby\n# GitLab Pages setup\npages_external_url \"https://pages.example.com\"\ngitlab_pages['enable'] = true\ngitlab_pages['access_control'] = true\ngitlab_pages['artifacts_server'] = true\ngitlab_pages['external_http'] = ['0.0.0.0:8090']\ngitlab_pages['external_https'] = ['0.0.0.0:8091']\n\n# Pages SSL configuration\ngitlab_pages['cert_file'] = \"/etc/gitlab/ssl/pages.crt\"\ngitlab_pages['key_file'] = \"/etc/gitlab/ssl/pages.key\"\n\n# Pages storage\ngitlab_pages['dir'] = \"/var/opt/gitlab/gitlab-pages\"\ngitlab_pages['log_directory'] = \"/var/log/gitlab/gitlab-pages\"\n```\n\n## 7. Reverse Proxy Setup\n\n### NGINX Reverse Proxy\n\nConfigure NGINX as a reverse proxy for GitLab:\n\n```bash\n# Install NGINX\n# Ubuntu/Debian\nsudo apt-get install nginx\n\n# RHEL/CentOS\nsudo dnf install nginx\n\n# Configure NGINX for GitLab\nsudo tee /etc/nginx/sites-available/gitlab > /dev/null <<EOF\nupstream gitlab-workhorse {\n  server unix:/var/opt/gitlab/gitlab-workhorse/socket fail_timeout=0;\n}\n\nserver {\n  listen 80;\n  server_name gitlab.example.com;\n  server_tokens off;\n  return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name gitlab.example.com;\n  server_tokens off;\n\n  # SSL configuration\n  ssl_certificate /etc/nginx/ssl/gitlab.crt;\n  ssl_certificate_key /etc/nginx/ssl/gitlab.key;\n  ssl_protocols TLSv1.2 TLSv1.3;\n  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n  ssl_prefer_server_ciphers off;\n  ssl_session_cache shared:SSL:10m;\n  ssl_session_tickets off;\n\n  # Security headers\n  add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n  add_header X-Content-Type-Options nosniff;\n  add_header X-Frame-Options DENY;\n  add_header X-XSS-Protection \"1; mode=block\";\n  add_header Referrer-Policy strict-origin-when-cross-origin;\n\n  # GitLab needs backwards compatible ciphers to retain compatibility with Java IDEs\n  ssl_ciphers \"ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256\";\n\n  client_max_body_size 250m;\n  \n  location / {\n    proxy_cache off;\n    proxy_pass http://gitlab-workhorse;\n    proxy_pass_header Server;\n    proxy_set_header Host \\$host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    proxy_read_timeout 300s;\n    proxy_connect_timeout 300s;\n    proxy_redirect off;\n  }\n  \n  # Container Registry\n  location /v2/ {\n    proxy_cache off;\n    proxy_pass http://localhost:5000;\n    proxy_pass_header Server;\n    proxy_set_header Host \\$host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    proxy_read_timeout 900;\n  }\n}\nEOF\n\n# Enable site and restart NGINX\nsudo ln -sf /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n### Apache HTTP Server (httpd)\n\nConfigure Apache as reverse proxy:\n\n```bash\n# Install Apache\n# RHEL/CentOS\nsudo dnf install httpd mod_ssl\n\n# Enable modules\nsudo systemctl enable httpd\n\n# Configure Apache for GitLab\nsudo tee /etc/httpd/conf.d/gitlab.conf > /dev/null <<EOF\n<VirtualHost *:80>\n  ServerName gitlab.example.com\n  Redirect permanent / https://gitlab.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n  ServerName gitlab.example.com\n  \n  # SSL Configuration\n  SSLEngine on\n  SSLCertificateFile /etc/httpd/ssl/gitlab.crt\n  SSLCertificateKeyFile /etc/httpd/ssl/gitlab.key\n  SSLProtocol -all +TLSv1.2 +TLSv1.3\n  SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n  SSLHonorCipherOrder off\n  \n  # Security headers\n  Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n  Header always set X-Content-Type-Options nosniff\n  Header always set X-Frame-Options DENY\n  Header always set X-XSS-Protection \"1; mode=block\"\n  \n  # Proxy configuration\n  ProxyPreserveHost On\n  ProxyPass /v2/ http://localhost:5000/v2/\n  ProxyPassReverse /v2/ http://localhost:5000/v2/\n  ProxyPass / http://localhost:8080/\n  ProxyPassReverse / http://localhost:8080/\n  \n  # Set headers\n  ProxyPassReverse / http://localhost:8080/\n  RequestHeader set X-Forwarded-Proto \"https\"\n  RequestHeader set X-Forwarded-Ssl \"on\"\n</VirtualHost>\nEOF\n\n# Start Apache\nsudo systemctl start httpd\nsudo systemctl enable httpd\n```\n\n### HAProxy Load Balancer\n\nConfigure HAProxy for high availability:\n\n```bash\n# Install HAProxy\nsudo apt-get install haproxy  # Ubuntu/Debian\nsudo dnf install haproxy      # RHEL/CentOS\n\n# Configure HAProxy\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\nglobal\n    daemon\n    log 127.0.0.1:514 local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n\n    # SSL configuration\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor except 127.0.0.0/8\n    option redispatch\n    retries 3\n    timeout http-request 10s\n    timeout queue 1m\n    timeout connect 5s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n\n# GitLab frontend\nfrontend gitlab_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/certs/gitlab.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    rspadd Strict-Transport-Security:\\ max-age=31536000;\\ includeSubDomains\n    rspadd X-Content-Type-Options:\\ nosniff\n    rspadd X-Frame-Options:\\ DENY\n    \n    default_backend gitlab_backend\n\n# GitLab backend servers\nbackend gitlab_backend\n    balance roundrobin\n    option httpchk GET /users/sign_in\n    http-check expect status 200\n    \n    server gitlab1 192.168.1.10:8080 check\n    server gitlab2 192.168.1.11:8080 check backup\n\n# Statistics interface\nfrontend stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Start HAProxy\nsudo systemctl start haproxy\nsudo systemctl enable haproxy\n```\n\n## 8. Security Configuration\n\n### Security Hardening\n\nImplement comprehensive security measures:\n\n```ruby\n# /etc/gitlab/gitlab.rb - Security configuration\n\n# Force HTTPS\nnginx['redirect_http_to_https'] = true\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\nnginx['ssl_prefer_server_ciphers'] = \"off\"\nnginx['ssl_ciphers'] = \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\"\n\n# Security headers\nnginx['custom_nginx_config'] = \"include /etc/nginx/conf.d/security-headers.conf;\"\n\n# Rate limiting\ngitlab_rails['rate_limit_requests_per_period'] = 300\ngitlab_rails['rate_limit_period'] = 60\n\n# Rack Attack configuration for Git over HTTP\ngitlab_rails['rack_attack_git_basic_auth'] = {\n  'enabled' => true,\n  'ip_whitelist' => %w{127.0.0.1 192.168.1.0/24},\n  'maxretry' => 10,\n  'findtime' => 60,\n  'bantime' => 3600\n}\n\n# Protected paths\ngitlab_rails['rack_attack_protected_paths'] = [\n  '/users/password',\n  '/users/sign_in',\n  '/api/v4/session.json',\n  '/api/v4/session',\n  '/users/confirmation',\n  '/unsubscribes/',\n  '/admin/session'\n]\n\n# SSH security\ngitlab_rails['gitlab_shell_ssh_port'] = 2222\ngitlab_shell['auth_file'] = \"/var/opt/gitlab/.ssh/authorized_keys\"\n\n# Two-factor authentication enforcement\ngitlab_rails['require_two_factor_authentication'] = false\ngitlab_rails['two_factor_grace_period'] = 8  # 8 hours\n\n# Session settings\ngitlab_rails['session_expire_delay'] = 10080  # 1 week\ngitlab_rails['session_store_enabled'] = true\n\n# Webhook security\ngitlab_rails['webhook_timeout'] = 10\ngitlab_rails['webhook_max_redirects'] = 3\n\n# API security\ngitlab_rails['api_limit_per_min'] = 300\n\n# Disable features that increase attack surface\ngitlab_rails['usage_ping_enabled'] = false\ngitlab_rails['sentry_enabled'] = false\n\n# Audit logging (Enterprise)\ngitlab_rails['audit_events_enabled'] = true\n\n# Security scanning\ngitlab_rails['sast_enabled'] = true\ngitlab_rails['dependency_scanning_enabled'] = true\ngitlab_rails['container_scanning_enabled'] = true\ngitlab_rails['secret_detection_enabled'] = true\n```\n\nCreate security headers configuration:\n\n```bash\nsudo mkdir -p /etc/nginx/conf.d\n\nsudo tee /etc/nginx/conf.d/security-headers.conf > /dev/null <<EOF\n# Security headers\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\nadd_header X-Content-Type-Options nosniff always;\nadd_header X-Frame-Options DENY always;\nadd_header X-XSS-Protection \"1; mode=block\" always;\nadd_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\nadd_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self';\" always;\nEOF\n```\n\n### Firewall Configuration\n\n#### UFW (Ubuntu/Debian)\n```bash\n# Enable UFW\nsudo ufw enable\n\n# Allow SSH\nsudo ufw allow OpenSSH\n\n# Allow HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow GitLab SSH (if using custom port)\nsudo ufw allow 2222/tcp\n\n# Allow specific IP ranges only (optional)\nsudo ufw allow from 192.168.1.0/24 to any port 22\nsudo ufw allow from 10.0.0.0/8 to any port 22\n\n# Check status\nsudo ufw status verbose\n```\n\n#### firewalld (RHEL/CentOS)\n```bash\n# Enable firewalld\nsudo systemctl enable --now firewalld\n\n# Add services\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\n\n# Add custom ports\nsudo firewall-cmd --permanent --add-port=2222/tcp\n\n# Create custom service for GitLab\nsudo tee /etc/firewalld/services/gitlab.xml > /dev/null <<EOF\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<service>\n  <short>GitLab</short>\n  <description>GitLab DevOps Platform</description>\n  <port protocol=\"tcp\" port=\"80\"/>\n  <port protocol=\"tcp\" port=\"443\"/>\n  <port protocol=\"tcp\" port=\"2222\"/>\n</service>\nEOF\n\nsudo firewall-cmd --permanent --add-service=gitlab\nsudo firewall-cmd --reload\n```\n\n### Access Control and Authentication\n\n```ruby\n# Password policy\ngitlab_rails['password_authentication_enabled_for_web'] = true\ngitlab_rails['password_authentication_enabled_for_git'] = true\n\n# Sign-up restrictions\ngitlab_rails['signup_enabled'] = false\ngitlab_rails['signin_enabled'] = true\n\n# Email domain restrictions\ngitlab_rails['email_restrictions_enabled'] = true\ngitlab_rails['email_restrictions'] = '@example\\\\.com$|@partner\\\\.com$'\n\n# IP restrictions (Enterprise)\ngitlab_rails['ip_restrictions_enabled'] = true\n\n# OAuth/OIDC providers configuration\ngitlab_rails['omniauth_enabled'] = true\ngitlab_rails['omniauth_allow_single_sign_on'] = ['google_oauth2', 'github']\ngitlab_rails['omniauth_block_auto_created_users'] = true\ngitlab_rails['omniauth_auto_sign_in_with_provider'] = 'google_oauth2'\ngitlab_rails['omniauth_providers'] = [\n  {\n    name: 'google_oauth2',\n    app_id: 'GOOGLE_OAUTH_CLIENT_ID',\n    app_secret: 'GOOGLE_OAUTH_CLIENT_SECRET',\n    args: {\n      scope: 'email profile',\n      domain: 'example.com'\n    }\n  }\n]\n```\n\n## 9. Database Setup\n\nGitLab uses PostgreSQL as its default database. For production environments, consider using an external PostgreSQL instance.\n\n### Internal PostgreSQL (Default)\n\nGitLab comes with a built-in PostgreSQL instance configured automatically:\n\n```ruby\n# /etc/gitlab/gitlab.rb - PostgreSQL settings\n\n# Enable built-in PostgreSQL\npostgresql['enable'] = true\n\n# PostgreSQL performance tuning\npostgresql['shared_buffers'] = \"2GB\"\npostgresql['effective_cache_size'] = \"8GB\" \npostgresql['work_mem'] = \"16MB\"\npostgresql['maintenance_work_mem'] = \"256MB\"\npostgresql['max_connections'] = 300\npostgresql['checkpoint_completion_target'] = 0.9\npostgresql['wal_buffers'] = \"16MB\"\npostgresql['default_statistics_target'] = 100\npostgresql['random_page_cost'] = 1.1  # For SSD storage\npostgresql['effective_io_concurrency'] = 200\n\n# Connection settings\npostgresql['listen_address'] = '127.0.0.1'\npostgresql['port'] = 5432\npostgresql['max_worker_processes'] = 8\npostgresql['max_parallel_workers_per_gather'] = 4\npostgresql['max_parallel_workers'] = 8\n\n# WAL settings for performance\npostgresql['wal_level'] = 'replica'\npostgresql['max_wal_senders'] = 3\npostgresql['checkpoint_segments'] = 32\npostgresql['checkpoint_timeout'] = '5min'\n\n# Logging\npostgresql['log_statement'] = 'none'\npostgresql['log_min_duration_statement'] = 1000  # Log slow queries\npostgresql['log_line_prefix'] = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '\n```\n\n### External PostgreSQL Setup\n\nFor high availability and better performance, use an external PostgreSQL server:\n\n```bash\n# Install PostgreSQL on separate server\n# Ubuntu/Debian\nsudo apt-get install postgresql postgresql-contrib\n\n# RHEL/CentOS  \nsudo dnf install postgresql-server postgresql-contrib\n\n# Initialize database (RHEL/CentOS only)\nsudo postgresql-setup --initdb\nsudo systemctl enable --now postgresql\n\n# Create GitLab database and user\nsudo -u postgres createuser --createdb --no-superuser --no-createrole gitlab\nsudo -u postgres createdb -O gitlab gitlabhq_production\nsudo -u postgres psql -c \"ALTER USER gitlab ENCRYPTED PASSWORD 'secure_password';\"\n\n# Configure PostgreSQL for GitLab\nsudo tee -a /var/lib/pgsql/data/postgresql.conf <<EOF\n# GitLab optimizations\nshared_buffers = 2GB\neffective_cache_size = 8GB\nwork_mem = 16MB  \nmaintenance_work_mem = 256MB\nmax_connections = 300\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\n\n# Connection settings\nlisten_addresses = '*'\nport = 5432\nmax_worker_processes = 8\nmax_parallel_workers = 8\nmax_parallel_workers_per_gather = 4\n\n# Enable extensions\nshared_preload_libraries = 'pg_stat_statements'\nEOF\n\n# Configure client authentication\nsudo tee -a /var/lib/pgsql/data/pg_hba.conf <<EOF\nhost    gitlabhq_production     gitlab          192.168.1.0/24          md5\nhost    gitlabhq_production     gitlab          10.0.0.0/8              md5\nEOF\n\nsudo systemctl restart postgresql\n```\n\nConfigure GitLab to use external PostgreSQL:\n\n```ruby\n# /etc/gitlab/gitlab.rb - External PostgreSQL\n\n# Disable built-in PostgreSQL\npostgresql['enable'] = false\n\n# External PostgreSQL configuration\ngitlab_rails['db_adapter'] = 'postgresql'\ngitlab_rails['db_encoding'] = 'unicode'\ngitlab_rails['db_collation'] = nil\ngitlab_rails['db_database'] = 'gitlabhq_production'\ngitlab_rails['db_pool'] = 10\ngitlab_rails['db_username'] = 'gitlab'\ngitlab_rails['db_password'] = 'secure_password'\ngitlab_rails['db_host'] = '192.168.1.10'\ngitlab_rails['db_port'] = 5432\ngitlab_rails['db_socket'] = nil\ngitlab_rails['db_sslmode'] = 'prefer'\ngitlab_rails['db_sslcert'] = nil\ngitlab_rails['db_sslkey'] = nil\ngitlab_rails['db_sslrootcert'] = nil\ngitlab_rails['db_sslcrl'] = nil\ngitlab_rails['db_prepared_statements'] = false\ngitlab_rails['db_statements_limit'] = 1000\n\n# Load balancing for read replicas (Enterprise)\ngitlab_rails['db_load_balancing'] = {\n  'hosts' => ['192.168.1.11', '192.168.1.12'],\n  'discover' => {\n    'record' => 'postgres-replica.example.com'\n  }\n}\n```\n\n### Database Maintenance\n\n```bash\n# Database maintenance commands\nsudo gitlab-ctl pgb-console  # Connect to database\n\n# Manual database operations\nsudo gitlab-psql -d gitlabhq_production\n\n# Database migrations\nsudo gitlab-rake db:migrate\n\n# Check database status\nsudo gitlab-rake db:migrate:status\n\n# Create database backup\nsudo gitlab-backup create SKIP=uploads,builds,artifacts,lfs,registry,pages\n\n# Restore database from backup  \nsudo gitlab-backup restore BACKUP=timestamp_of_backup\n\n# Database cleanup\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:project_uploads\n```\n\n## 10. Performance Optimization\n\n### System-Level Optimizations\n\n```bash\n# Kernel parameter tuning for GitLab\nsudo tee /etc/sysctl.d/90-gitlab.conf <<EOF\n# Network optimizations\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 1200\nnet.ipv4.tcp_keepalive_probes = 7\nnet.ipv4.tcp_keepalive_intvl = 30\n\n# Memory management\nvm.swappiness = 1\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nvm.vfs_cache_pressure = 50\n\n# File system optimizations\nfs.file-max = 2097152\nfs.nr_open = 1048576\nEOF\n\nsudo sysctl -p /etc/sysctl.d/90-gitlab.conf\n\n# Increase file descriptor limits\nsudo tee /etc/security/limits.d/90-gitlab.conf <<EOF\ngit     soft    nofile          65535\ngit     hard    nofile          65535\ngit     soft    nproc           65535  \ngit     hard    nproc           65535\nEOF\n\n# Configure systemd limits\nsudo mkdir -p /etc/systemd/system/gitlab-runsvdir.service.d\nsudo tee /etc/systemd/system/gitlab-runsvdir.service.d/limits.conf <<EOF\n[Service]\nLimitNOFILE=65535\nLimitNPROC=65535\nEOF\n\nsudo systemctl daemon-reload\n```\n\n### Application Performance Tuning\n\n```ruby\n# /etc/gitlab/gitlab.rb - Performance optimizations\n\n# Unicorn/Puma web server settings\n# Use Puma (recommended for GitLab 13.0+)\npuma['enable'] = true\npuma['worker_processes'] = 4  # Number of CPU cores\npuma['min_threads'] = 1\npuma['max_threads'] = 16\npuma['worker_timeout'] = 60\npuma['worker_boot_timeout'] = 60\n\n# Disable Unicorn if using Puma\nunicorn['enable'] = false\n\n# Sidekiq background job processing\nsidekiq['max_concurrency'] = 25\nsidekiq['min_concurrency'] = 10\nsidekiq['queue_groups'] = [\n  '*',\n  'cronjob:1',\n  'default:5',\n  'pipeline_processing:2'\n]\n\n# Gitaly settings for Git operations\ngitaly['ruby_max_rss'] = 300000000  # 300MB\ngitaly['concurrency'] = [\n  {\n    'rpc' => \"/gitaly.SmartHTTPService/PostReceivePack\",\n    'max_per_repo' => 3\n  },\n  {\n    'rpc' => \"/gitaly.SSHService/SSHUploadPack\",\n    'max_per_repo' => 3  \n  },\n  {\n    'rpc' => \"/gitaly.SSHService/SSHReceivePack\",\n    'max_per_repo' => 3\n  }\n]\n\n# GitLab Workhorse settings\ngitlab_workhorse['api_limit'] = 1000\ngitlab_workhorse['api_queue_limit'] = 200\ngitlab_workhorse['api_queue_duration'] = \"30s\"\n\n# Redis caching optimizations  \nredis['maxmemory'] = \"1gb\"\nredis['maxmemory_policy'] = \"allkeys-lru\"\nredis['save'] = '900 1 300 10 60 10000'\nredis['tcp_keepalive'] = 300\nredis['tcp_timeout'] = 60\n\n# NGINX optimizations\nnginx['worker_processes'] = 4\nnginx['worker_connections'] = 1024\nnginx['keepalive_timeout'] = 65\nnginx['gzip'] = \"on\"\nnginx['gzip_comp_level'] = 6\nnginx['gzip_types'] = [\n  'text/plain',\n  'text/css', \n  'application/json',\n  'application/javascript',\n  'text/xml',\n  'application/xml',\n  'application/xml+rss',\n  'text/javascript'\n]\n\n# Prometheus monitoring optimization\nprometheus['scrape_interval'] = 15\nprometheus['scrape_timeout'] = 10\nprometheus['evaluation_interval'] = 15\n```\n\n### Storage Optimization\n\n```bash\n# Use SSD storage with proper mount options\nsudo tee -a /etc/fstab <<EOF\n/dev/sdb1 /var/opt/gitlab ext4 defaults,noatime,discard 0 2\nEOF\n\n# Optimize Git repository storage\nsudo tee /usr/local/bin/gitlab-git-optimize.sh <<'EOF'\n#!/bin/bash\n# Optimize Git repositories for better performance\n\nREPO_DIR=\"/var/opt/gitlab/git-data/repositories\"\nLOG_FILE=\"/var/log/gitlab/git-optimize.log\"\n\necho \"$(date): Starting Git repository optimization\" >> $LOG_FILE\n\nfind $REPO_DIR -name \"*.git\" -type d | while read repo; do\n    cd \"$repo\"\n    echo \"Optimizing: $repo\" >> $LOG_FILE\n    \n    # Garbage collection\n    git gc --aggressive --prune=now\n    \n    # Repack repository\n    git repack -ad\n    \n    # Update server info\n    git update-server-info\ndone\n\necho \"$(date): Git repository optimization completed\" >> $LOG_FILE\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-git-optimize.sh\n\n# Schedule weekly Git optimization\necho \"0 2 * * 0 root /usr/local/bin/gitlab-git-optimize.sh\" | sudo tee -a /etc/crontab\n```\n\n### Monitoring Performance\n\n```bash\n# Create performance monitoring script\nsudo tee /usr/local/bin/gitlab-performance-check.sh <<'EOF'\n#!/bin/bash\nLOGFILE=\"/var/log/gitlab-performance.log\"\n\necho \"$(date): Performance Check Started\" >> $LOGFILE\n\n# CPU and Memory usage\necho \"CPU Usage: $(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | cut -d'%' -f1)%\" >> $LOGFILE\necho \"Memory Usage: $(free | grep Mem | awk '{printf \"%.2f\", $3/$2 * 100.0}')%\" >> $LOGFILE\n\n# Database connections\nDB_CONNECTIONS=$(sudo gitlab-psql -t -c \"SELECT count(*) FROM pg_stat_activity;\")\necho \"Database Connections: $DB_CONNECTIONS\" >> $LOGFILE\n\n# Redis memory usage\nREDIS_MEMORY=$(redis-cli info memory | grep used_memory_human | cut -d: -f2)\necho \"Redis Memory: $REDIS_MEMORY\" >> $LOGFILE\n\n# Disk usage\nDISK_USAGE=$(df /var/opt/gitlab | awk 'NR==2 {print $5}')\necho \"Disk Usage: $DISK_USAGE\" >> $LOGFILE\n\n# Active processes\nPROCESSES=$(sudo gitlab-ctl status | grep -c \"run:\")\necho \"Active GitLab Processes: $PROCESSES\" >> $LOGFILE\n\necho \"$(date): Performance Check Completed\" >> $LOGFILE\necho \"---\" >> $LOGFILE\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-performance-check.sh\n\n# Schedule performance checks every 15 minutes\necho \"*/15 * * * * root /usr/local/bin/gitlab-performance-check.sh\" | sudo tee -a /etc/crontab\n```\n\n## 11. Monitoring\n\nGitLab includes built-in monitoring capabilities with Prometheus and Grafana.\n\n### Built-in Monitoring Stack\n\nEnable GitLab's integrated monitoring:\n\n```ruby\n# /etc/gitlab/gitlab.rb - Monitoring configuration\n\n# Enable Prometheus monitoring\nprometheus_monitoring['enable'] = true\nprometheus['enable'] = true\nprometheus['listen_address'] = 'localhost:9090'\nprometheus['scrape_interval'] = 15\nprometheus['scrape_timeout'] = 10\nprometheus['evaluation_interval'] = 15\n\n# Prometheus exporters\nnode_exporter['enable'] = true\nnode_exporter['listen_address'] = 'localhost:9100'\n\nredis_exporter['enable'] = true\nredis_exporter['listen_address'] = 'localhost:9121'\n\npostgres_exporter['enable'] = true\npostgres_exporter['listen_address'] = 'localhost:9187'\n\ngitlab_exporter['enable'] = true\ngitlab_exporter['listen_address'] = 'localhost:9168'\n\n# Grafana configuration\ngrafana['enable'] = true\ngrafana['admin_password'] = 'secure_grafana_password'\ngrafana['disable_login_form'] = false\ngrafana['allow_user_sign_up'] = false\ngrafana['secret_key'] = 'generate_secure_secret_key'\n\n# Alert Manager\nalertmanager['enable'] = true\nalertmanager['admin_email'] = 'alerts@example.com'\nalertmanager['flags'] = {\n  'storage.path' => '/var/opt/gitlab/alertmanager/data',\n  'config.file' => '/var/opt/gitlab/alertmanager/alertmanager.yml'\n}\n```\n\n### External Monitoring Integration\n\nConfigure external monitoring systems:\n\n```bash\n# Prometheus configuration for external setup\nsudo tee /etc/prometheus/prometheus.yml <<EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    monitor: 'gitlab-monitor'\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets: ['localhost:9093']\n\nrule_files:\n  - \"gitlab-rules.yml\"\n\nscrape_configs:\n  - job_name: 'gitlab-workhorse'\n    static_configs:\n      - targets: ['gitlab.example.com:9229']\n    metrics_path: '/metrics'\n    scrape_interval: 15s\n\n  - job_name: 'gitlab-unicorn'\n    static_configs:\n      - targets: ['gitlab.example.com:8080']\n    metrics_path: '/-/metrics'\n    scrape_interval: 15s\n\n  - job_name: 'gitlab-sidekiq'\n    static_configs:\n      - targets: ['gitlab.example.com:8082']\n    metrics_path: '/metrics'\n    scrape_interval: 15s\n\n  - job_name: 'gitlab-gitaly'\n    static_configs:\n      - targets: ['gitlab.example.com:9236']\n    metrics_path: '/metrics'\n    scrape_interval: 15s\n\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: ['gitlab.example.com:9100']\n    metrics_path: '/metrics'\n    scrape_interval: 15s\n\n  - job_name: 'postgres-exporter'\n    static_configs:\n      - targets: ['gitlab.example.com:9187']\n    metrics_path: '/metrics'\n    scrape_interval: 15s\n\n  - job_name: 'redis-exporter'\n    static_configs:\n      - targets: ['gitlab.example.com:9121']\n    metrics_path: '/metrics'\n    scrape_interval: 15s\nEOF\n\n# Create GitLab-specific alerting rules\nsudo tee /etc/prometheus/gitlab-rules.yml <<EOF\ngroups:\n  - name: gitlab\n    rules:\n      - alert: GitLabDown\n        expr: up{job=~\"gitlab.*\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"GitLab service {{ \\$labels.job }} is down\"\n          description: \"GitLab service {{ \\$labels.job }} has been down for more than 5 minutes.\"\n\n      - alert: GitLabHighCPU\n        expr: 100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High CPU usage on GitLab server\"\n          description: \"CPU usage is above 80% for more than 10 minutes.\"\n\n      - alert: GitLabHighMemory\n        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High memory usage on GitLab server\"\n          description: \"Memory usage is above 85% for more than 10 minutes.\"\n\n      - alert: GitLabDiskSpaceLow\n        expr: (node_filesystem_avail_bytes / node_filesystem_size_bytes) * 100 < 15\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Low disk space on GitLab server\"\n          description: \"Disk space is below 15% on {{ \\$labels.mountpoint }}.\"\n\n      - alert: GitLabPostgreSQLDown\n        expr: up{job=\"postgres-exporter\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"PostgreSQL is down\"\n          description: \"GitLab PostgreSQL database has been down for more than 5 minutes.\"\n\n      - alert: GitLabRedisDown\n        expr: up{job=\"redis-exporter\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Redis is down\"\n          description: \"GitLab Redis cache has been down for more than 5 minutes.\"\nEOF\n```\n\n### Log Management\n\nConfigure centralized logging:\n\n```bash\n# Install and configure Elasticsearch, Logstash, Kibana (ELK Stack)\n# Or use external services like Splunk, DataDog, etc.\n\n# Configure GitLab log forwarding\nsudo tee /etc/rsyslog.d/49-gitlab.conf <<EOF\n# Forward GitLab logs to centralized logging\n*.* @@logserver.example.com:514\n\n# Local GitLab log files\nif \\$programname startswith 'gitlab' then /var/log/gitlab-centralized.log\n& stop\nEOF\n\nsudo systemctl restart rsyslog\n\n# Create log monitoring script\nsudo tee /usr/local/bin/gitlab-log-monitor.sh <<'EOF'\n#!/bin/bash\nALERT_EMAIL=\"admin@example.com\"\nLOG_DIR=\"/var/log/gitlab\"\n\n# Monitor for critical errors\nfind $LOG_DIR -name \"*.log\" -type f -mmin -5 | while read logfile; do\n    if grep -i \"error\\|exception\\|fatal\" \"$logfile\" | grep \"$(date +'%Y-%m-%d %H:%M')\" > /tmp/gitlab-errors.tmp; then\n        if [ -s /tmp/gitlab-errors.tmp ]; then\n            echo \"Critical errors found in GitLab logs:\" | mail -s \"GitLab Error Alert\" $ALERT_EMAIL < /tmp/gitlab-errors.tmp\n        fi\n    fi\ndone\n\n# Monitor disk space for log directory\nUSAGE=$(df $LOG_DIR | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ $USAGE -gt 80 ]; then\n    echo \"Log directory usage is at ${USAGE}%. Consider log rotation.\" | mail -s \"GitLab Log Disk Usage Warning\" $ALERT_EMAIL\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-log-monitor.sh\n\n# Schedule log monitoring every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/gitlab-log-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n### Health Monitoring\n\n```bash\n# Create comprehensive health monitoring\nsudo tee /usr/local/bin/gitlab-health-monitor.sh <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/gitlab-health.log\"\nEMAIL=\"admin@example.com\"\nWEBHOOK_URL=\"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\"\n\ncheck_service() {\n    local service=$1\n    if sudo gitlab-ctl status $service | grep -q \"run:\"; then\n        echo \"$(date): ✓ $service is running\" >> $HEALTH_LOG\n        return 0\n    else\n        echo \"$(date): ✗ $service is DOWN\" >> $HEALTH_LOG\n        alert_service_down $service\n        return 1\n    fi\n}\n\nalert_service_down() {\n    local service=$1\n    echo \"ALERT: GitLab service $service is down\" | mail -s \"GitLab Service Alert\" $EMAIL\n    \n    # Send Slack notification\n    curl -X POST -H 'Content-type: application/json' \\\n        --data \"{\\\"text\\\":\\\"🚨 GitLab Alert: Service $service is down on $(hostname)\\\"}\" \\\n        $WEBHOOK_URL\n}\n\n# Check all critical services\necho \"$(date): Starting health check\" >> $HEALTH_LOG\n\nservices=(\"nginx\" \"postgresql\" \"redis\" \"unicorn\" \"sidekiq\" \"gitaly\")\nfailed_services=0\n\nfor service in \"${services[@]}\"; do\n    if ! check_service $service; then\n        ((failed_services++))\n    fi\ndone\n\n# Check application health\nif sudo gitlab-rake gitlab:check >/dev/null 2>&1; then\n    echo \"$(date): ✓ GitLab application health check passed\" >> $HEALTH_LOG\nelse\n    echo \"$(date): ✗ GitLab application health check FAILED\" >> $HEALTH_LOG\n    echo \"GitLab application health check failed\" | mail -s \"GitLab Application Health Alert\" $EMAIL\n    ((failed_services++))\nfi\n\n# Check backup status\nLAST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar 2>/dev/null | head -1)\nif [ -n \"$LAST_BACKUP\" ]; then\n    BACKUP_AGE=$(( ($(date +%s) - $(stat -c %Y \"$LAST_BACKUP\")) / 3600 ))\n    if [ $BACKUP_AGE -gt 48 ]; then\n        echo \"$(date): ⚠ Last backup is ${BACKUP_AGE} hours old\" >> $HEALTH_LOG\n        echo \"GitLab backup is ${BACKUP_AGE} hours old\" | mail -s \"GitLab Backup Warning\" $EMAIL\n    else\n        echo \"$(date): ✓ Recent backup available (${BACKUP_AGE} hours old)\" >> $HEALTH_LOG\n    fi\nelse\n    echo \"$(date): ✗ No backup files found\" >> $HEALTH_LOG\n    echo \"No GitLab backup files found\" | mail -s \"GitLab Backup Alert\" $EMAIL\nfi\n\necho \"$(date): Health check completed. Failed services: $failed_services\" >> $HEALTH_LOG\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-health-monitor.sh\n\n# Schedule health checks every 10 minutes\necho \"*/10 * * * * root /usr/local/bin/gitlab-health-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## 12. Backup and Restore\n\n### Automated Backup Strategy\n\n```bash\n# Create comprehensive backup script\nsudo tee /usr/local/bin/gitlab-backup-complete.sh <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/gitlab\"\nDATE=$(date +%Y%m%d_%H%M%S)\nRETENTION_DAYS=30\nEMAIL=\"admin@example.com\"\n\n# Create backup directories\nmkdir -p ${BACKUP_DIR}/{omnibus,secrets,ssl,registry,uploads}\n\necho \"$(date): Starting GitLab backup process...\"\n\n# Create GitLab application backup\necho \"Creating GitLab application backup...\"\nif gitlab-backup create STRATEGY=copy SKIP=uploads,builds,artifacts,lfs,registry,pages; then\n    echo \"✓ GitLab application backup completed\"\nelse\n    echo \"✗ GitLab application backup failed\"\n    echo \"GitLab application backup failed on $(hostname)\" | mail -s \"GitLab Backup Failure\" $EMAIL\n    exit 1\nfi\n\n# Backup configuration files\necho \"Backing up configuration files...\"\ntar -czf ${BACKUP_DIR}/omnibus/gitlab-config-${DATE}.tar.gz \\\n    /etc/gitlab/gitlab.rb \\\n    /etc/gitlab/gitlab-secrets.json \\\n    /etc/gitlab/trusted-certs/ 2>/dev/null\n\n# Backup SSL certificates\necho \"Backing up SSL certificates...\"\nif [ -d /etc/gitlab/ssl ]; then\n    tar -czf ${BACKUP_DIR}/ssl/gitlab-ssl-${DATE}.tar.gz /etc/gitlab/ssl/\nfi\n\nif [ -d /etc/letsencrypt ]; then\n    tar -czf ${BACKUP_DIR}/ssl/letsencrypt-${DATE}.tar.gz /etc/letsencrypt/\nfi\n\n# Backup secrets\necho \"Backing up secrets...\"\nif [ -d /etc/gitlab/secrets ]; then\n    tar -czf ${BACKUP_DIR}/secrets/gitlab-secrets-${DATE}.tar.gz /etc/gitlab/secrets/\nfi\n\n# Backup container registry (if using local storage)\nif [ -d /var/opt/gitlab/gitlab-rails/shared/registry ]; then\n    echo \"Backing up container registry...\"\n    tar -czf ${BACKUP_DIR}/registry/registry-${DATE}.tar.gz /var/opt/gitlab/gitlab-rails/shared/registry/\nfi\n\n# Upload to cloud storage (multiple providers)\necho \"Uploading backups to cloud storage...\"\n\n# AWS S3\nif command -v aws >/dev/null 2>&1; then\n    aws s3 sync ${BACKUP_DIR}/ s3://gitlab-backups-primary/${DATE}/\nfi\n\n# Azure Blob Storage\nif command -v az >/dev/null 2>&1; then\n    az storage blob upload-batch --source ${BACKUP_DIR} --destination gitlab-backups --destination-path ${DATE}\nfi\n\n# Google Cloud Storage\nif command -v gsutil >/dev/null 2>&1; then\n    gsutil -m cp -r ${BACKUP_DIR}/* gs://gitlab-backups-gcs/${DATE}/\nfi\n\n# Verify backup integrity\necho \"Verifying backup integrity...\"\nLATEST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar | head -1)\nif [ -n \"$LATEST_BACKUP\" ]; then\n    if tar -tf \"$LATEST_BACKUP\" >/dev/null 2>&1; then\n        echo \"✓ Backup integrity verified\"\n    else\n        echo \"✗ Backup integrity check failed\"\n        echo \"GitLab backup integrity check failed\" | mail -s \"GitLab Backup Integrity Alert\" $EMAIL\n    fi\nfi\n\n# Cleanup old backups\necho \"Cleaning up old backups...\"\nfind /var/opt/gitlab/backups/ -name \"*_gitlab_backup.tar\" -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name \"gitlab-*\" -type f -mtime +${RETENTION_DAYS} -delete\n\n# Send success notification\necho \"GitLab backup completed successfully on $(date)\" | mail -s \"GitLab Backup Success\" $EMAIL\n\necho \"$(date): GitLab backup process completed successfully\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup-complete.sh\n\n# Schedule daily backups at 2 AM\necho \"0 2 * * * root /usr/local/bin/gitlab-backup-complete.sh\" | sudo tee -a /etc/crontab\n```\n\n### Disaster Recovery Procedures\n\n```bash\n# Create disaster recovery script\nsudo tee /usr/local/bin/gitlab-disaster-recovery.sh <<'EOF'\n#!/bin/bash\nBACKUP_FILE=\"${1}\"\nCONFIG_BACKUP=\"${2}\"\n\nif [ -z \"$BACKUP_FILE\" ] || [ -z \"$CONFIG_BACKUP\" ]; then\n    echo \"Usage: $0 <backup_file> <config_backup>\"\n    echo \"Available backups:\"\n    ls -la /var/opt/gitlab/backups/*_gitlab_backup.tar 2>/dev/null || echo \"No local backups found\"\n    exit 1\nfi\n\necho \"$(date): Starting GitLab disaster recovery process...\"\n\n# Pre-recovery checks\necho \"Performing pre-recovery checks...\"\nif ! command -v gitlab-ctl >/dev/null 2>&1; then\n    echo \"GitLab not installed. Please install GitLab first.\"\n    exit 1\nfi\n\n# Stop GitLab services\necho \"Stopping GitLab services...\"\ngitlab-ctl stop unicorn\ngitlab-ctl stop puma  \ngitlab-ctl stop sidekiq\ngitlab-ctl stop workhorse\ngitlab-ctl stop gitaly\n\n# Backup current installation (if any)\nif [ -d /var/opt/gitlab/git-data ]; then\n    echo \"Backing up current installation...\"\n    mv /var/opt/gitlab /var/opt/gitlab.backup.$(date +%s)\n    mkdir -p /var/opt/gitlab\nfi\n\n# Restore configuration\necho \"Restoring configuration files...\"\nif [ -f \"$CONFIG_BACKUP\" ]; then\n    cd /\n    tar -xzf \"$CONFIG_BACKUP\"\nelse\n    echo \"Configuration backup not found: $CONFIG_BACKUP\"\n    exit 1\nfi\n\n# Reconfigure GitLab with restored configuration\necho \"Reconfiguring GitLab...\"\ngitlab-ctl reconfigure\n\n# Restore GitLab backup\necho \"Restoring GitLab backup...\"\nBACKUP_NAME=$(basename \"$BACKUP_FILE\" _gitlab_backup.tar)\nif gitlab-backup restore BACKUP=\"$BACKUP_NAME\" force=yes; then\n    echo \"✓ GitLab backup restored successfully\"\nelse\n    echo \"✗ GitLab backup restoration failed\"\n    exit 1\nfi\n\n# Start GitLab services\necho \"Starting GitLab services...\"\ngitlab-ctl start\n\n# Wait for services to start\necho \"Waiting for services to start...\"\nsleep 30\n\n# Verify installation\necho \"Verifying GitLab installation...\"\nif gitlab-rake gitlab:check SANITIZE=true; then\n    echo \"✓ GitLab installation verified successfully\"\nelse\n    echo \"⚠ GitLab verification completed with warnings\"\nfi\n\n# Run database migrations (if needed)\necho \"Running database migrations...\"\ngitlab-rake db:migrate\n\necho \"$(date): GitLab disaster recovery completed\"\necho \"Please verify the installation manually and check all services\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-disaster-recovery.sh\n```\n\n### Point-in-Time Recovery\n\n```ruby\n# /etc/gitlab/gitlab.rb - Configure for point-in-time recovery\n\n# Enable WAL archiving for PostgreSQL\npostgresql['archive_mode'] = \"on\"\npostgresql['archive_command'] = 'cp %p /var/opt/gitlab/postgresql/archive/%f'\npostgresql['max_wal_senders'] = 3\npostgresql['wal_keep_segments'] = 32\npostgresql['checkpoint_segments'] = 32\n\n# Configure continuous archiving\npostgresql['archive_timeout'] = '60s'\npostgresql['checkpoint_completion_target'] = 0.9\n\n# Backup retention\ngitlab_rails['backup_keep_time'] = 2592000  # 30 days\ngitlab_rails['backup_archive_permissions'] = 0644\n```\n\n## 13. Troubleshooting\n\n### Common Issues and Solutions\n\n```bash\n# GitLab service diagnostics\nsudo tee /usr/local/bin/gitlab-diagnose.sh <<'EOF'\n#!/bin/bash\necho \"=== GitLab Diagnostic Report ===\"\necho \"Date: $(date)\"\necho \"Hostname: $(hostname)\"\necho \"GitLab Version: $(gitlab-rake gitlab:env:info | grep \"GitLab information\" -A 5)\"\necho\n\necho \"=== Service Status ===\"\nsudo gitlab-ctl status\necho\n\necho \"=== Memory Usage ===\"\nfree -h\necho\n\necho \"=== Disk Usage ===\"\ndf -h | grep -E \"(gitlab|Filesystem)\"\necho\n\necho \"=== GitLab Processes ===\"\nps aux | grep -E \"(gitlab|unicorn|sidekiq|workhorse|gitaly)\" | grep -v grep\necho\n\necho \"=== Database Connectivity ===\"\nif sudo gitlab-psql -c \"SELECT version();\" >/dev/null 2>&1; then\n    echo \"✓ PostgreSQL connection OK\"\n    sudo gitlab-psql -c \"SELECT count(*) as active_connections FROM pg_stat_activity;\"\nelse\n    echo \"✗ PostgreSQL connection FAILED\"\nfi\necho\n\necho \"=== Redis Connectivity ===\"\nif redis-cli ping >/dev/null 2>&1; then\n    echo \"✓ Redis connection OK\"\n    redis-cli info memory | grep used_memory_human\nelse\n    echo \"✗ Redis connection FAILED\"\nfi\necho\n\necho \"=== Recent Errors ===\"\necho \"Last 10 errors from GitLab logs:\"\nfind /var/log/gitlab -name \"*.log\" -type f -exec grep -l \"ERROR\\|FATAL\" {} \\; | head -5 | while read log; do\n    echo \"--- $log ---\"\n    tail -5 \"$log\" | grep -E \"ERROR|FATAL\" | tail -2\ndone\necho\n\necho \"=== Network Connectivity ===\"\necho \"Testing external connectivity:\"\nif curl -Is https://gitlab.com >/dev/null 2>&1; then\n    echo \"✓ External connectivity OK\"\nelse\n    echo \"✗ External connectivity FAILED\"\nfi\n\necho \"Testing internal services:\"\nnetstat -tlnp | grep -E \"(80|443|22|5432|6379)\"\necho\n\necho \"=== SSL Certificate Status ===\"\nif [ -f /etc/gitlab/ssl/gitlab.example.com.crt ]; then\n    echo \"SSL certificate expires:\"\n    openssl x509 -in /etc/gitlab/ssl/gitlab.example.com.crt -noout -dates\nelse\n    echo \"No SSL certificate found\"\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-diagnose.sh\n```\n\n### Specific Problem Resolution\n\n#### High Memory Usage\n```bash\n# Reduce memory consumption\nsudo tee -a /etc/gitlab/gitlab.rb <<EOF\n# Memory optimization for smaller systems\nunicorn['worker_processes'] = 2\nsidekiq['max_concurrency'] = 10\npostgresql['shared_buffers'] = \"256MB\"\npostgresql['effective_cache_size'] = \"1GB\"\nEOF\n\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n```\n\n#### Database Issues\n```bash\n# Database troubleshooting commands\nsudo gitlab-ctl status postgresql\nsudo gitlab-psql -d gitlabhq_production\n\n# Check database connections\nsudo gitlab-psql -c \"SELECT count(*) FROM pg_stat_activity;\"\n\n# Check for locks\nsudo gitlab-psql -c \"SELECT * FROM pg_locks WHERE NOT granted;\"\n\n# Vacuum and analyze database\nsudo gitlab-psql -c \"VACUUM ANALYZE;\"\n\n# Check database size\nsudo gitlab-psql -c \"SELECT pg_database_size('gitlabhq_production');\"\n```\n\n#### Performance Issues\n```bash\n# Check system resources\ntop -p $(pgrep -d',' -f gitlab)\niostat -x 1 5\nfree -h\n\n# Check GitLab worker status\nsudo gitlab-ctl status | grep -E \"(unicorn|sidekiq)\"\n\n# Check background job queue\nsudo gitlab-rails runner \"puts Sidekiq::Queue.new.size\"\n\n# Restart specific services\nsudo gitlab-ctl restart sidekiq\nsudo gitlab-ctl restart unicorn\n```\n\n#### SSL/TLS Issues\n```bash\n# Test SSL configuration\nopenssl s_client -connect gitlab.example.com:443 -servername gitlab.example.com\n\n# Check certificate chain\nopenssl s_client -connect gitlab.example.com:443 -showcerts\n\n# Verify certificate\nopenssl x509 -in /etc/gitlab/ssl/gitlab.example.com.crt -text -noout\n\n# Test cipher suites\nnmap --script ssl-enum-ciphers -p 443 gitlab.example.com\n```\n\n#### Repository Issues\n```bash\n# Check repository integrity\nsudo gitlab-rake gitlab:check:repos\n\n# Recreate authorized_keys file\nsudo gitlab-rake gitlab:shell:setup\n\n# Check GitLab Shell\nsudo gitlab-rake gitlab:gitlab_shell:check\n\n# Fix repository permissions\nsudo gitlab-ctl reconfigure\n```\n\n## 14. Integration Examples\n\n### CI/CD Pipeline Integration\n\n```yaml\n# .gitlab-ci.yml - Comprehensive CI/CD pipeline\nstages:\n  - security\n  - test\n  - build\n  - deploy\n  - monitor\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"/certs\"\n  SECURE_LOG_LEVEL: info\n\n# Security scanning stage\ninclude:\n  - template: Security/SAST.gitlab-ci.yml\n  - template: Security/Dependency-Scanning.gitlab-ci.yml\n  - template: Security/Container-Scanning.gitlab-ci.yml\n  - template: Security/Secret-Detection.gitlab-ci.yml\n\n# Custom security scans\nsecurity:custom-audit:\n  stage: security\n  image: alpine:latest\n  before_script:\n    - apk add --no-cache curl jq\n  script:\n    - echo \"Running custom security audit...\"\n    - |\n      # Check for hardcoded secrets\n      if grep -r -E \"(password|secret|key|token).*=.*['\\\"][a-zA-Z0-9]{8,}['\\\"]\" .; then\n        echo \"Potential hardcoded secrets found!\"\n        exit 1\n      fi\n    - echo \"Security audit passed\"\n  rules:\n    - if: '$CI_COMMIT_BRANCH'\n\n# Testing stage\ntest:unit:\n  stage: test\n  image: node:18-alpine\n  script:\n    - npm ci\n    - npm run test:unit\n  coverage: '/Coverage: \\d+\\.\\d+%/'\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: coverage/cobertura-coverage.xml\n\ntest:integration:\n  stage: test\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker-compose -f docker-compose.test.yml up --build --exit-code-from app\n  artifacts:\n    reports:\n      junit: test-results.xml\n\n# Build stage\nbuild:docker:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  before_script:\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n  script:\n    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .\n    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest\n    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n    - docker push $CI_REGISTRY_IMAGE:latest\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n\n# Deployment stages\ndeploy:staging:\n  stage: deploy\n  image: alpine/kubectl:latest\n  script:\n    - kubectl config use-context staging\n    - kubectl set image deployment/app app=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n    - kubectl rollout status deployment/app\n  environment:\n    name: staging\n    url: https://staging.example.com\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n\ndeploy:production:\n  stage: deploy\n  image: alpine/kubectl:latest\n  script:\n    - kubectl config use-context production\n    - kubectl set image deployment/app app=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n    - kubectl rollout status deployment/app\n  environment:\n    name: production\n    url: https://app.example.com\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n      when: manual\n\n# Monitoring stage\nmonitor:deployment:\n  stage: monitor\n  image: curlimages/curl:latest\n  script:\n    - sleep 60  # Wait for deployment\n    - |\n      if curl -f https://app.example.com/health; then\n        echo \"Deployment health check passed\"\n      else\n        echo \"Deployment health check failed\"\n        exit 1\n      fi\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n```\n\n### External Service Integrations\n\n#### Slack Integration\n```bash\n# Configure Slack notifications\ncurl -X POST \"https://gitlab.example.com/api/v4/projects/1/services/slack\" \\\n  --header \"PRIVATE-TOKEN: $GITLAB_TOKEN\" \\\n  --data-urlencode \"webhook=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\" \\\n  --data-urlencode \"channel=#gitlab\" \\\n  --data-urlencode \"push_events=true\" \\\n  --data-urlencode \"issues_events=true\" \\\n  --data-urlencode \"merge_requests_events=true\" \\\n  --data-urlencode \"pipeline_events=true\"\n```\n\n#### Jira Integration\n```bash\n# Configure Jira integration\ncurl -X PUT \"https://gitlab.example.com/api/v4/projects/1/services/jira\" \\\n  --header \"PRIVATE-TOKEN: $GITLAB_TOKEN\" \\\n  --data-urlencode \"url=https://yourcompany.atlassian.net\" \\\n  --data-urlencode \"username=gitlab@company.com\" \\\n  --data-urlencode \"password=jira_api_token\" \\\n  --data-urlencode \"project_key=PROJ\"\n```\n\n#### Kubernetes Integration\n```ruby\n# /etc/gitlab/gitlab.rb - Kubernetes integration\ngitlab_rails['kubernetes_enabled'] = true\ngitlab_rails['kubernetes_namespace'] = 'gitlab'\n\n# Enable GitLab Agent for Kubernetes\ngitlab_rails['gitlab_kas_enabled'] = true\ngitlab_kas['enable'] = true\ngitlab_kas['listen_address'] = '0.0.0.0:8150'\ngitlab_kas['listen_websocket'] = '0.0.0.0:8151'\n```\n\n## 15. Maintenance\n\n### Regular Maintenance Tasks\n\n```bash\n# Create maintenance script\nsudo tee /usr/local/bin/gitlab-maintenance.sh <<'EOF'\n#!/bin/bash\nMAINTENANCE_LOG=\"/var/log/gitlab-maintenance.log\"\n\necho \"$(date): Starting GitLab maintenance\" >> $MAINTENANCE_LOG\n\n# Update GitLab to latest version\necho \"Checking for GitLab updates...\" >> $MAINTENANCE_LOG\nif command -v apt-get >/dev/null; then\n    apt-get update && apt-get upgrade gitlab-ee\nelif command -v yum >/dev/null; then\n    yum update gitlab-ee\nelif command -v dnf >/dev/null; then\n    dnf update gitlab-ee\nfi\n\n# Clean up old log files\necho \"Cleaning up old log files...\" >> $MAINTENANCE_LOG\nfind /var/log/gitlab -name \"*.log.*\" -mtime +30 -delete\n\n# Clean up old backups\necho \"Cleaning up old backups...\" >> $MAINTENANCE_LOG\nfind /var/opt/gitlab/backups -name \"*_gitlab_backup.tar\" -mtime +7 -delete\n\n# Database maintenance\necho \"Performing database maintenance...\" >> $MAINTENANCE_LOG\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:project_uploads\nsudo gitlab-psql -c \"VACUUM ANALYZE;\"\n\n# Git repository optimization\necho \"Optimizing Git repositories...\" >> $MAINTENANCE_LOG\nsudo gitlab-rake gitlab:cleanup:repos\n\n# Container registry cleanup\necho \"Cleaning up container registry...\" >> $MAINTENANCE_LOG\nsudo gitlab-ctl registry-garbage-collect\n\n# Check system health\necho \"Checking system health...\" >> $MAINTENANCE_LOG\nsudo gitlab-rake gitlab:check SANITIZE=true >> $MAINTENANCE_LOG\n\necho \"$(date): GitLab maintenance completed\" >> $MAINTENANCE_LOG\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-maintenance.sh\n\n# Schedule monthly maintenance on first Sunday at 3 AM\necho \"0 3 1-7 * 0 root /usr/local/bin/gitlab-maintenance.sh\" | sudo tee -a /etc/crontab\n```\n\n### Update Procedures\n\n```bash\n# Create update script\nsudo tee /usr/local/bin/gitlab-update.sh <<'EOF'\n#!/bin/bash\nCURRENT_VERSION=$(gitlab-rake gitlab:env:info | grep \"GitLab information\" | head -1)\nBACKUP_DIR=\"/backup/pre-update\"\nEMAIL=\"admin@example.com\"\n\necho \"Current GitLab version: $CURRENT_VERSION\"\necho \"Creating pre-update backup...\"\n\n# Create backup before update\nmkdir -p $BACKUP_DIR\ngitlab-backup create BACKUP=$BACKUP_DIR\n\n# Update GitLab\nif command -v apt-get >/dev/null; then\n    apt-get update\n    apt-get install gitlab-ee\nelif command -v dnf >/dev/null; then\n    dnf update gitlab-ee\nfi\n\n# Reconfigure after update\ngitlab-ctl reconfigure\n\n# Check installation\nif gitlab-rake gitlab:check SANITIZE=true; then\n    echo \"GitLab update successful\" | mail -s \"GitLab Update Success\" $EMAIL\nelse\n    echo \"GitLab update completed with warnings\" | mail -s \"GitLab Update Warning\" $EMAIL\nfi\n\nNEW_VERSION=$(gitlab-rake gitlab:env:info | grep \"GitLab information\" | head -1)\necho \"Updated GitLab version: $NEW_VERSION\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-update.sh\n```\n\n## 16. Additional Resources\n\n### Documentation Links\n- **Official GitLab Documentation**: https://docs.gitlab.com/\n- **GitLab Administration Guide**: https://docs.gitlab.com/ee/administration/\n- **GitLab Security Documentation**: https://docs.gitlab.com/ee/security/\n- **GitLab CI/CD Documentation**: https://docs.gitlab.com/ee/ci/\n- **GitLab API Documentation**: https://docs.gitlab.com/ee/api/\n- **GitLab Runner Documentation**: https://docs.gitlab.com/runner/\n- **GitLab Container Registry**: https://docs.gitlab.com/ee/user/packages/container_registry/\n- **GitLab Pages Documentation**: https://docs.gitlab.com/ee/user/project/pages/\n- **GitLab Geo Documentation**: https://docs.gitlab.com/ee/administration/geo/\n- **GitLab Kubernetes Integration**: https://docs.gitlab.com/ee/user/clusters/agent/\n\n### Community Resources\n- **GitLab Community Forum**: https://forum.gitlab.com/\n- **GitLab Community Discord**: https://discord.com/invite/gitlab\n- **GitLab Reddit Community**: https://www.reddit.com/r/gitlab/\n- **GitLab Stack Overflow**: https://stackoverflow.com/questions/tagged/gitlab\n\n### Training and Certification\n- **GitLab Learn**: https://about.gitlab.com/learn/\n- **GitLab University**: https://university.gitlab.com/\n- **GitLab Certified Associate**: https://about.gitlab.com/services/education/gitlab-certified-associate/\n- **GitLab Professional Services**: https://about.gitlab.com/services/\n\n### Tools and Utilities\n- **GitLab CLI (glab)**: https://gitlab.com/gitlab-org/cli\n- **GitLab Terraform Provider**: https://registry.terraform.io/providers/gitlabhq/gitlab/\n- **GitLab Ansible Collection**: https://galaxy.ansible.com/gitlab/gitlab\n- **GitLab Helm Chart**: https://docs.gitlab.com/charts/\n- **GitLab Docker Images**: https://hub.docker.com/u/gitlab\n\n### Security Resources\n- **GitLab Security Team**: https://about.gitlab.com/security/\n- **GitLab Bug Bounty Program**: https://about.gitlab.com/security/disclosure/\n- **GitLab Security Advisories**: https://about.gitlab.com/security/advisories/\n- **GitLab Compliance**: https://about.gitlab.com/compliance/\n\n### Performance and Scaling\n- **GitLab Reference Architectures**: https://docs.gitlab.com/ee/administration/reference_architectures/\n- **GitLab Performance Monitoring**: https://docs.gitlab.com/ee/administration/monitoring/performance/\n- **GitLab Scaling and High Availability**: https://docs.gitlab.com/ee/administration/high_availability/\n\n---\n\n**Note:** This guide covers native OS installations of GitLab across multiple platforms with enterprise-grade security, monitoring, and maintenance procedures. For specific enterprise features, consider GitLab Enterprise Edition. This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.\n","readmeHtml":"<h2 id=\"1-introduction\" class=\"mobile-header\">1. Introduction</h2>\n<p class=\"mobile-paragraph\">GitLab is a comprehensive DevOps platform that provides Git repository management, CI/CD pipelines, issue tracking, container registry, and security scanning capabilities. As a Free and Open Source Software (FOSS) solution, GitLab Community Edition offers robust features for teams of all sizes, while GitLab Enterprise Edition provides additional advanced features for enterprise environments.</p>\n<h3 id=\"foss-context\" class=\"mobile-header\">FOSS Context</h3>\n<p class=\"mobile-paragraph\">GitLab Community Edition (CE) is released under the MIT License and provides:</p>\n<li class=\"mobile-list-item\">Core Git repository management</li>\n<li class=\"mobile-list-item\">Issue tracking and project management</li>\n<li class=\"mobile-list-item\">Integrated CI/CD with GitLab Runner</li>\n<li class=\"mobile-list-item\">Built-in container registry</li>\n<li class=\"mobile-list-item\">Merge request workflows</li>\n<li class=\"mobile-list-item\">Wiki and documentation</li>\n<li class=\"mobile-list-item\">Security scanning (basic)</li>\n<p class=\"mobile-paragraph\">GitLab Enterprise Edition (EE) extends CE with premium features including advanced security scanning, compliance management, geo-replication, and enterprise authentication integrations.</p>\n<h3 id=\"key-features\" class=\"mobile-header\">Key Features</h3>\n<li class=\"mobile-list-item\"><strong>Repository Management</strong>: Git-based version control with advanced merge request workflows</li>\n<li class=\"mobile-list-item\"><strong>CI/CD Platform</strong>: Integrated continuous integration and deployment with GitLab Runner</li>\n<li class=\"mobile-list-item\"><strong>Container Registry</strong>: Built-in Docker registry with vulnerability scanning</li>\n<li class=\"mobile-list-item\"><strong>Security</strong>: SAST, DAST, dependency scanning, and secret detection</li>\n<li class=\"mobile-list-item\"><strong>Project Management</strong>: Issue tracking, milestones, and agile planning tools</li>\n<li class=\"mobile-list-item\"><strong>Monitoring</strong>: Performance monitoring and error tracking</li>\n<li class=\"mobile-list-item\"><strong>Authentication</strong>: LDAP, SAML, OAuth, and multi-factor authentication support</li>\n<h2 id=\"2-prerequisites\" class=\"mobile-header\">2. Prerequisites</h2>\n<h3 id=\"10-system-requirements\" class=\"mobile-header\">10. System Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux (RHEL/CentOS 8+, Ubuntu 20.04+, Debian 10+, SUSE Linux, Arch Linux), macOS 10.15+, Windows 10/11, or FreeBSD 12+</li>\n<li class=\"mobile-list-item\"><strong>Memory</strong>: 8GB RAM minimum, 16GB+ recommended for production, 32GB+ for large installations</li>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4 cores minimum, 8+ recommended for production</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 50GB+ available disk space, SSD strongly recommended for database and Git repositories</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Stable internet connection, open ports 80, 443, and 22 (or custom SSH port)</li>\n<h3 id=\"required-software-dependencies\" class=\"mobile-header\">Required Software Dependencies</h3>\n<li class=\"mobile-list-item\"><strong>Package Manager</strong>: apt (Debian/Ubuntu), yum/dnf (RHEL/CentOS/Fedora), pacman (Arch), zypper (openSUSE), pkg (FreeBSD)</li>\n<li class=\"mobile-list-item\"><strong>System Tools</strong>: curl, wget, openssh-server, ca-certificates, tzdata, perl</li>\n<li class=\"mobile-list-item\"><strong>Mail Transfer Agent</strong>: Postfix, Sendmail, or external SMTP service</li>\n<li class=\"mobile-list-item\"><strong>Firewall</strong>: firewalld, ufw, or iptables for security configuration</li>\n<h3 id=\"network-requirements\" class=\"mobile-header\">Network Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Domain Name</strong>: Fully qualified domain name for external access</li>\n<li class=\"mobile-list-item\"><strong>SSL Certificates</strong>: Valid SSL/TLS certificates for production deployment (Let's Encrypt recommended)</li>\n<li class=\"mobile-list-item\"><strong>Firewall Ports</strong>: </li>\n<li class=\"mobile-list-item\">80/tcp (HTTP, redirects to HTTPS)</li>\n<li class=\"mobile-list-item\">443/tcp (HTTPS)</li>\n<li class=\"mobile-list-item\">22/tcp or custom port (SSH/Git)</li>\n<li class=\"mobile-list-item\">2222/tcp (GitLab Shell SSH, if configured)</li>\n<li class=\"mobile-list-item\"><strong>SMTP Server</strong>: For email notifications (password resets, notifications, etc.)</li>\n<h3 id=\"optional-components\" class=\"mobile-header\">Optional Components</h3>\n<li class=\"mobile-list-item\"><strong>External Database</strong>: PostgreSQL 12+ for high availability setups</li>\n<li class=\"mobile-list-item\"><strong>External Redis</strong>: Redis 6+ for session storage and caching</li>\n<li class=\"mobile-list-item\"><strong>Object Storage</strong>: S3-compatible storage for artifacts, uploads, and backups</li>\n<li class=\"mobile-list-item\"><strong>Load Balancer</strong>: For multi-node GitLab installations</li>\n<li class=\"mobile-list-item\"><strong>Monitoring</strong>: Prometheus, Grafana for advanced monitoring</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<p class=\"mobile-paragraph\">GitLab provides native packages for all major operating systems. The Omnibus package is the recommended installation method as it includes all dependencies and provides automatic updates.</p>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS 8+ / Rocky Linux / AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo dnf update -y\n\n# Install required dependencies\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable and start required services\nsudo systemctl enable --now sshd postfix\n\n# Configure SELinux policies for GitLab\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_read_user_content 1\nsudo setsebool -P httpd_enable_homedirs 1\n\n# Configure firewall rules\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --permanent --add-port=2222/tcp\nsudo firewall-cmd --reload\n\n# Add GitLab official repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab Enterprise Edition\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; dnf install -y gitlab-ee\n\n# For Community Edition instead:\n# sudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; dnf install -y gitlab-ce\n\n# Initial configuration and start services\nsudo gitlab-ctl reconfigure\n\n# Check installation status\nsudo gitlab-ctl status</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS 7 (Legacy)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo yum install -y curl policycoreutils-python openssh-server perl postfix\n\n# Configure services\nsudo systemctl enable --now sshd postfix\nsudo lokkit -s http -s https -s ssh\n\n# Add repository and install\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; yum install -y gitlab-ee\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu 20.04+ / Debian 10+</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package repositories\nsudo apt-get update\n\n# Install required dependencies\nsudo apt-get install -y curl openssh-server ca-certificates tzdata perl postfix gpg\n\n# Configure Postfix for email (choose &#039;Internet Site&#039; for basic setup)\nsudo dpkg-reconfigure postfix\n\n# Configure UFW firewall (if enabled)\nsudo ufw allow ssh\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw allow 2222/tcp\n\n# Add GitLab official repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab Enterprise Edition\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; apt-get install -y gitlab-ee\n\n# For Community Edition instead:\n# sudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; apt-get install -y gitlab-ce\n\n# Initial configuration and start services\nsudo gitlab-ctl reconfigure\n\n# Verify installation\nsudo gitlab-ctl status</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo pacman -Syu\n\n# Install required dependencies\nsudo pacman -S curl openssh postfix\n\n# Enable and start services\nsudo systemctl enable --now sshd postfix\n\n# Install GitLab from AUR (using yay helper)\nyay -S gitlab-ee\n\n# Or install GitLab Community Edition\n# yay -S gitlab\n\n# Configure GitLab\nsudo vim /etc/gitlab/gitlab.rb\n# Set: external_url &#039;https://gitlab.example.com&#039;\n\n# Initial configuration\nsudo gitlab-ctl reconfigure\n\n# Enable GitLab service\nsudo systemctl enable gitlab-runsvdir\nsudo systemctl start gitlab-runsvdir</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apk update\n\n# Install required packages\nsudo apk add curl openssh postfix\n\n# Enable services\nsudo rc-update add sshd default\nsudo rc-update add postfix default\nsudo rc-service sshd start\nsudo rc-service postfix start\n\n# Add GitLab repository key\nwget -O /etc/apk/keys/gitlab.rsa.pub https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey/gitlab-gitlab-ee-3D645A26AB9FBD22.rsa.pub\n\n# Add GitLab repository\necho &quot;https://packages.gitlab.com/gitlab/gitlab-ee/alpine/v$(cat /etc/alpine-release | cut -d&#039;.&#039; -f1-2)/main&quot; &gt;&gt; /etc/apk/repositories\n\n# Update and install GitLab\nsudo apk update\nsudo apk add gitlab-ee\n\n# Configure external URL\necho &quot;external_url &#039;https://gitlab.example.com&#039;&quot; &gt;&gt; /etc/gitlab/gitlab.rb\n\n# Reconfigure and start\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies (openSUSE)\nsudo zypper install -y curl openssh postfix\n\n# For SLES\n# sudo zypper install -y curl openssh2 postfix\n\n# Enable services\nsudo systemctl enable --now sshd postfix\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; zypper install -y gitlab-ee\n\n# Configure and start\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Homebrew if not already installed\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n\n# Install required dependencies\nbrew install curl git postfix\n\n# Start postfix service\nsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.postfix.master.plist\n\n# Install GitLab using official installer\ncurl -LO https://packages.gitlab.com/gitlab/gitlab-ee/packages/el/8/gitlab-ee-latest.x86_64.rpm\n\n# Note: GitLab doesn&#039;t provide native macOS packages\n# Recommended to use Docker for macOS installations:\n\n# Create GitLab directories\nsudo mkdir -p /srv/gitlab/{config,logs,data}\n\n# Set environment variables\nexport GITLAB_HOME=/srv/gitlab\n\n# Run GitLab container\ndocker run --detach \\\n  --hostname gitlab.example.com \\\n  --publish 443:443 --publish 80:80 --publish 2222:22 \\\n  --name gitlab \\\n  --restart unless-stopped \\\n  --volume $GITLAB_HOME/config:/etc/gitlab \\\n  --volume $GITLAB_HOME/logs:/var/log/gitlab \\\n  --volume $GITLAB_HOME/data:/var/opt/gitlab \\\n  --shm-size 256m \\\n  --env GITLAB_OMNIBUS_CONFIG=&quot;external_url &#039;https://gitlab.example.com&#039;&quot; \\\n  gitlab/gitlab-ee:latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update ports tree\nsudo portsnap fetch extract\n\n# Install required ports\nsudo pkg install curl openssh-portable postfix git\n\n# Enable services\nsudo sysrc sshd_enable=&quot;YES&quot;\nsudo sysrc postfix_enable=&quot;YES&quot;\nsudo service sshd start\nsudo service postfix start\n\n# Configure firewall (if pf is enabled)\necho &#039;pass in on $ext_if proto tcp from any to any port {22, 80, 443, 2222}&#039; &gt;&gt; /etc/pf.conf\nsudo pfctl -f /etc/pf.conf\n\n# GitLab doesn&#039;t provide official FreeBSD packages\n# Install using source compilation or Docker:\n\n# Docker method (install Docker first)\nsudo pkg install docker\nsudo sysrc docker_enable=&quot;YES&quot;\nsudo service docker start\n\n# Run GitLab container\nsudo docker run --detach \\\n  --hostname gitlab.example.com \\\n  --publish 443:443 --publish 80:80 --publish 2222:22 \\\n  --name gitlab \\\n  --restart unless-stopped \\\n  --volume /usr/local/gitlab/config:/etc/gitlab \\\n  --volume /usr/local/gitlab/logs:/var/log/gitlab \\\n  --volume /usr/local/gitlab/data:/var/opt/gitlab \\\n  --shm-size 256m \\\n  gitlab/gitlab-ee:latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<p class=\"mobile-paragraph\">GitLab does not provide native Windows packages. Use Docker Desktop or WSL2 with Linux installation.</p>\n<p class=\"mobile-paragraph\">#### Windows with Docker Desktop</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Install Docker Desktop from https://www.docker.com/products/docker-desktop\n\n# Create GitLab directories\nmkdir C:\\gitlab\\config\nmkdir C:\\gitlab\\logs\nmkdir C:\\gitlab\\data\n\n# Run GitLab container\ndocker run --detach `\n  --hostname gitlab.example.com `\n  --publish 443:443 --publish 80:80 --publish 2222:22 `\n  --name gitlab `\n  --restart unless-stopped `\n  --volume C:\\gitlab\\config:/etc/gitlab `\n  --volume C:\\gitlab\\logs:/var/log/gitlab `\n  --volume C:\\gitlab\\data:/var/opt/gitlab `\n  --shm-size 256m `\n  --env GITLAB_OMNIBUS_CONFIG=&quot;external_url &#039;https://gitlab.example.com&#039;&quot; `\n  gitlab/gitlab-ee:latest</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows with WSL2</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable WSL2 and install Ubuntu\nwsl --install -d Ubuntu\n\n# Switch to WSL2 Ubuntu environment\nwsl\n\n# Follow Ubuntu installation instructions above\nsudo apt-get update\nsudo apt-get install -y curl openssh-server ca-certificates tzdata perl postfix gpg\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; apt-get install -y gitlab-ee\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-initial-configuration\" class=\"mobile-header\">4. Initial Configuration</h2>\n<p class=\"mobile-paragraph\">After installation, GitLab requires initial configuration to set up the root password and basic settings.</p>\n<h3 id=\"first-time-setup\" class=\"mobile-header\">First-time Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Access GitLab Web Interface</strong></p>\n<p class=\"mobile-paragraph\">   ```bash</p>\n<p class=\"mobile-paragraph\">   # Wait for GitLab to fully start (may take 2-3 minutes)</p>\n<p class=\"mobile-paragraph\">   sudo gitlab-ctl status</p>\n<p class=\"mobile-paragraph\">   # Check GitLab is responding</p>\n<p class=\"mobile-paragraph\">   curl -I http://localhost</p>\n<p class=\"mobile-paragraph\">   ```</p>\n<p class=\"mobile-paragraph\">2. <strong>Retrieve Initial Root Password</strong></p>\n<p class=\"mobile-paragraph\">   ```bash</p>\n<p class=\"mobile-paragraph\">   # Get the initial root password</p>\n<p class=\"mobile-paragraph\">   sudo cat /etc/gitlab/initial_root_password</p>\n<p class=\"mobile-paragraph\">   ```</p>\n<p class=\"mobile-paragraph\">3. <strong>Web Interface Setup</strong></p>\n<li class=\"mobile-list-item\">Navigate to <code class=\"mobile-inline-code\">https://your-domain.com</code> or <code class=\"mobile-inline-code\">http://your-server-ip</code></li>\n<li class=\"mobile-list-item\">Login with username: <code class=\"mobile-inline-code\">root</code> and the password from step 2</li>\n<li class=\"mobile-list-item\">Set a new secure root password immediately</li>\n<li class=\"mobile-list-item\">Complete the initial setup wizard</li>\n<h3 id=\"basic-configuration-file-setup\" class=\"mobile-header\">Basic Configuration File Setup</h3>\n<p class=\"mobile-paragraph\">Edit the main configuration file:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo vim /etc/gitlab/gitlab.rb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Essential initial settings:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># External URL (replace with your domain)\nexternal_url &#039;https://gitlab.example.com&#039;\n\n# Email configuration\ngitlab_rails[&#039;gitlab_email_enabled&#039;] = true\ngitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\ngitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\n\n# SMTP configuration (example with Gmail)\ngitlab_rails[&#039;smtp_enable&#039;] = true\ngitlab_rails[&#039;smtp_address&#039;] = &quot;smtp.gmail.com&quot;\ngitlab_rails[&#039;smtp_port&#039;] = 587\ngitlab_rails[&#039;smtp_user_name&#039;] = &quot;gitlab@example.com&quot;\ngitlab_rails[&#039;smtp_password&#039;] = &quot;app_password&quot;\ngitlab_rails[&#039;smtp_domain&#039;] = &quot;gmail.com&quot;\ngitlab_rails[&#039;smtp_authentication&#039;] = &quot;login&quot;\ngitlab_rails[&#039;smtp_enable_starttls_auto&#039;] = true\ngitlab_rails[&#039;smtp_tls&#039;] = false\n\n# Time zone\ngitlab_rails[&#039;time_zone&#039;] = &#039;UTC&#039;\n\n# GitLab Shell SSH port (if different from 22)\ngitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Apply configuration changes:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<p class=\"mobile-paragraph\">#### Let's Encrypt (Recommended)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Let&#039;s Encrypt in gitlab.rb\nsudo vim /etc/gitlab/gitlab.rb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Add these settings:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># Enable Let&#039;s Encrypt\nletsencrypt[&#039;enable&#039;] = true\nletsencrypt[&#039;contact_emails&#039;] = [&#039;admin@example.com&#039;]\nletsencrypt[&#039;auto_renew&#039;] = true\n\n# Force HTTPS\nnginx[&#039;redirect_http_to_https&#039;] = true\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Reconfigure to activate SSL:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Manual SSL Certificate</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create SSL directory\nsudo mkdir -p /etc/gitlab/ssl\n\n# Copy your certificates (replace with your actual cert files)\nsudo cp your-certificate.crt /etc/gitlab/ssl/gitlab.example.com.crt\nsudo cp your-private-key.key /etc/gitlab/ssl/gitlab.example.com.key\n\n# Set proper permissions\nsudo chmod 600 /etc/gitlab/ssl/gitlab.example.com.key\nsudo chmod 644 /etc/gitlab/ssl/gitlab.example.com.crt</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Configure in gitlab.rb:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\">external_url &#039;https://gitlab.example.com&#039;\nnginx[&#039;ssl_certificate&#039;] = &quot;/etc/gitlab/ssl/gitlab.example.com.crt&quot;\nnginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/gitlab/ssl/gitlab.example.com.key&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<p class=\"mobile-paragraph\">GitLab uses the <code class=\"mobile-inline-code\">gitlab-ctl</code> command for service management across all platforms.</p>\n<h3 id=\"service-control-commands\" class=\"mobile-header\">Service Control Commands</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check status of all services\nsudo gitlab-ctl status\n\n# Start all GitLab services\nsudo gitlab-ctl start\n\n# Stop all GitLab services  \nsudo gitlab-ctl stop\n\n# Restart all GitLab services\nsudo gitlab-ctl restart\n\n# Restart specific service\nsudo gitlab-ctl restart nginx\nsudo gitlab-ctl restart unicorn\nsudo gitlab-ctl restart sidekiq\n\n# Reload configuration without restart\nsudo gitlab-ctl reconfigure\n\n# Show service logs\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail postgresql</code></pre>\n      </div>\n    </div>\n<h3 id=\"service-status-monitoring\" class=\"mobile-header\">Service Status Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Detailed service status\nsudo gitlab-ctl service-list\n\n# Check specific service\nsudo gitlab-ctl status nginx\nsudo gitlab-ctl status postgresql\nsudo gitlab-ctl status redis\n\n# Monitor service logs in real-time\nsudo gitlab-ctl tail -f gitlab-workhorse\nsudo gitlab-ctl tail -f sidekiq\n\n# Check GitLab application status\nsudo gitlab-rake gitlab:check\n\n# Environment information\nsudo gitlab-rake gitlab:env:info</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-integration\" class=\"mobile-header\">Systemd Integration</h3>\n<p class=\"mobile-paragraph\">On systems with systemd, GitLab services are managed through systemd:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable GitLab to start at boot\nsudo systemctl enable gitlab-runsvdir.service\n\n# Start GitLab services\nsudo systemctl start gitlab-runsvdir.service\n\n# Check systemd status\nsudo systemctl status gitlab-runsvdir.service\n\n# Stop GitLab services\nsudo systemctl stop gitlab-runsvdir.service\n\n# Check GitLab logs through journald\nsudo journalctl -u gitlab-runsvdir.service -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"service-configuration\" class=\"mobile-header\">Service Configuration</h3>\n<p class=\"mobile-paragraph\">Individual service configuration in <code class=\"mobile-inline-code\">/etc/gitlab/gitlab.rb</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># Unicorn (web server) settings\nunicorn[&#039;worker_processes&#039;] = 4\nunicorn[&#039;worker_memory_limit_min&#039;] = &quot;400m&quot;\nunicorn[&#039;worker_memory_limit_max&#039;] = &quot;650m&quot;\n\n# Sidekiq (background jobs) settings  \nsidekiq[&#039;max_concurrency&#039;] = 25\nsidekiq[&#039;log_format&#039;] = &#039;json&#039;\n\n# GitLab Workhorse settings\ngitlab_workhorse[&#039;listen_network&#039;] = &quot;tcp&quot;\ngitlab_workhorse[&#039;listen_addr&#039;] = &quot;127.0.0.1:8181&quot;\n\n# NGINX settings\nnginx[&#039;listen_port&#039;] = 80\nnginx[&#039;listen_https&#039;] = false  # Use with reverse proxy\nnginx[&#039;client_max_body_size&#039;] = &#039;250m&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-advanced-configuration\" class=\"mobile-header\">6. Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<p class=\"mobile-paragraph\">Configure GitLab for optimal performance based on your hardware resources:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># /etc/gitlab/gitlab.rb - Performance settings\n\n# Unicorn web server optimization\nunicorn[&#039;worker_processes&#039;] = 8  # Number of CPU cores\nunicorn[&#039;worker_memory_limit_min&#039;] = &quot;400m&quot;\nunicorn[&#039;worker_memory_limit_max&#039;] = &quot;650m&quot;\nunicorn[&#039;worker_timeout&#039;] = 60\n\n# Sidekiq background job optimization\nsidekiq[&#039;max_concurrency&#039;] = 25\nsidekiq[&#039;min_concurrency&#039;] = 10\nsidekiq[&#039;log_format&#039;] = &#039;json&#039;\n\n# PostgreSQL optimization\npostgresql[&#039;shared_buffers&#039;] = &quot;2GB&quot;\npostgresql[&#039;effective_cache_size&#039;] = &quot;8GB&quot;\npostgresql[&#039;work_mem&#039;] = &quot;16MB&quot;\npostgresql[&#039;maintenance_work_mem&#039;] = &quot;256MB&quot;\npostgresql[&#039;max_connections&#039;] = 300\npostgresql[&#039;checkpoint_completion_target&#039;] = 0.9\npostgresql[&#039;wal_buffers&#039;] = &quot;16MB&quot;\npostgresql[&#039;random_page_cost&#039;] = 1.1\n\n# Redis optimization\nredis[&#039;maxmemory&#039;] = &quot;1gb&quot;\nredis[&#039;maxmemory_policy&#039;] = &quot;allkeys-lru&quot;\nredis[&#039;tcp_keepalive&#039;] = 300\nredis[&#039;tcp_timeout&#039;] = 60\n\n# Gitaly optimization (Git RPC service)\ngitaly[&#039;ruby_max_rss&#039;] = 300000000  # 300MB\ngitaly[&#039;concurrency&#039;] = [\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SmartHTTPService/PostReceivePack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  },\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SSHService/SSHUploadPack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  }\n]\n\n# File system optimization\ngit_data_dirs({\n  &quot;default&quot; =&gt; {\n    &quot;path&quot; =&gt; &quot;/var/opt/gitlab/git-data&quot;\n  }\n})\n\n# Logging optimization\nlogging[&#039;svlogd_size&#039;] = 200 * 1024 * 1024  # 200MB\nlogging[&#039;svlogd_num&#039;] = 30\nlogging[&#039;logrotate_frequency&#039;] = &quot;daily&quot;\nlogging[&#039;logrotate_rotate&#039;] = 30</code></pre>\n      </div>\n    </div>\n<h3 id=\"enterprise-features-configuration\" class=\"mobile-header\">Enterprise Features Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># LDAP/Active Directory integration\ngitlab_rails[&#039;ldap_enabled&#039;] = true\ngitlab_rails[&#039;ldap_servers&#039;] = {\n  &#039;main&#039; =&gt; {\n    &#039;label&#039; =&gt; &#039;LDAP&#039;,\n    &#039;host&#039; =&gt; &#039;ldap.example.com&#039;,\n    &#039;port&#039; =&gt; 636,\n    &#039;uid&#039; =&gt; &#039;sAMAccountName&#039;,\n    &#039;bind_dn&#039; =&gt; &#039;CN=gitlab,OU=Service Accounts,DC=example,DC=com&#039;,\n    &#039;password&#039; =&gt; &#039;ldap_service_password&#039;,\n    &#039;encryption&#039; =&gt; &#039;ssl&#039;,\n    &#039;verify_certificates&#039; =&gt; true,\n    &#039;base&#039; =&gt; &#039;DC=example,DC=com&#039;,\n    &#039;user_filter&#039; =&gt; &#039;&#039;,\n    &#039;attributes&#039; =&gt; {\n      &#039;username&#039; =&gt; [&#039;uid&#039;, &#039;userid&#039;, &#039;sAMAccountName&#039;],\n      &#039;email&#039; =&gt; [&#039;mail&#039;, &#039;email&#039;, &#039;userPrincipalName&#039;],\n      &#039;name&#039; =&gt; &#039;cn&#039;,\n      &#039;first_name&#039; =&gt; &#039;givenName&#039;,\n      &#039;last_name&#039; =&gt; &#039;sn&#039;\n    },\n    &#039;group_base&#039; =&gt; &#039;OU=Groups,DC=example,DC=com&#039;,\n    &#039;admin_group&#039; =&gt; &#039;GitLab Administrators&#039;\n  }\n}\n\n# SAML SSO configuration\ngitlab_rails[&#039;omniauth_enabled&#039;] = true\ngitlab_rails[&#039;omniauth_allow_single_sign_on&#039;] = [&#039;saml&#039;]\ngitlab_rails[&#039;omniauth_block_auto_created_users&#039;] = false\ngitlab_rails[&#039;omniauth_auto_link_saml_user&#039;] = true\ngitlab_rails[&#039;omniauth_providers&#039;] = [\n  {\n    name: &#039;saml&#039;,\n    args: {\n      assertion_consumer_service_url: &#039;https://gitlab.example.com/users/auth/saml/callback&#039;,\n      idp_cert_fingerprint: &#039;SAML_IDP_CERT_FINGERPRINT&#039;,\n      idp_sso_target_url: &#039;https://idp.example.com/sso/saml&#039;,\n      issuer: &#039;https://gitlab.example.com&#039;,\n      name_identifier_format: &#039;urn:oasis:names:tc:SAML:2.0:nameid-format:emailAddress&#039;\n    },\n    label: &#039;Company SSO&#039;\n  }\n]\n\n# Geo replication (Enterprise Premium)\ngitlab_rails[&#039;geo_primary_role&#039;] = true\ngitlab_rails[&#039;geo_node_name&#039;] = &#039;primary-site&#039;\ngitlab_rails[&#039;geo_registry_replication_enabled&#039;] = true\n\n# Advanced security features\ngitlab_rails[&#039;security_auto_fix_enabled&#039;] = true\ngitlab_rails[&#039;dependency_proxy_enabled&#039;] = true\ngitlab_rails[&#039;packages_enabled&#039;] = true</code></pre>\n      </div>\n    </div>\n<h3 id=\"container-registry-configuration\" class=\"mobile-header\">Container Registry Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># Container Registry setup\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\nregistry[&#039;enable&#039;] = true\nregistry[&#039;username&#039;] = &quot;registry&quot;\nregistry[&#039;group&#039;] = &quot;registry&quot;\nregistry[&#039;dir&#039;] = &quot;/var/opt/gitlab/registry&quot;\n\n# Registry storage configuration (S3)\nregistry[&#039;storage&#039;] = {\n  &#039;s3&#039; =&gt; {\n    &#039;accesskey&#039; =&gt; &#039;registry_s3_access_key&#039;,\n    &#039;secretkey&#039; =&gt; &#039;registry_s3_secret_key&#039;,\n    &#039;bucket&#039; =&gt; &#039;gitlab-registry&#039;,\n    &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n    &#039;encrypt&#039; =&gt; true\n  }\n}\n\n# Registry security\nregistry[&#039;auth_token_realm&#039;] = &quot;https://gitlab.example.com/jwt/auth&quot;\nregistry[&#039;auth_token_service&#039;] = &quot;container_registry&quot;\nregistry[&#039;auth_token_issuer&#039;] = &quot;gitlab-issuer&quot;\n\n# Registry health checks\nregistry[&#039;health_storagedriver_enabled&#039;] = true\nregistry[&#039;health_storagedriver_interval&#039;] = &#039;10s&#039;\nregistry[&#039;health_storagedriver_threshold&#039;] = 3\n\n# Container scanning and cleanup\ngitlab_rails[&#039;container_registry_cleanup_enabled&#039;] = true\ngitlab_rails[&#039;container_registry_expiration_policy_enabled&#039;] = true</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-pages-configuration\" class=\"mobile-header\">GitLab Pages Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># GitLab Pages setup\npages_external_url &quot;https://pages.example.com&quot;\ngitlab_pages[&#039;enable&#039;] = true\ngitlab_pages[&#039;access_control&#039;] = true\ngitlab_pages[&#039;artifacts_server&#039;] = true\ngitlab_pages[&#039;external_http&#039;] = [&#039;0.0.0.0:8090&#039;]\ngitlab_pages[&#039;external_https&#039;] = [&#039;0.0.0.0:8091&#039;]\n\n# Pages SSL configuration\ngitlab_pages[&#039;cert_file&#039;] = &quot;/etc/gitlab/ssl/pages.crt&quot;\ngitlab_pages[&#039;key_file&#039;] = &quot;/etc/gitlab/ssl/pages.key&quot;\n\n# Pages storage\ngitlab_pages[&#039;dir&#039;] = &quot;/var/opt/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;log_directory&#039;] = &quot;/var/log/gitlab/gitlab-pages&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-reverse-proxy-setup\" class=\"mobile-header\">7. Reverse Proxy Setup</h2>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<p class=\"mobile-paragraph\">Configure NGINX as a reverse proxy for GitLab:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX\n# Ubuntu/Debian\nsudo apt-get install nginx\n\n# RHEL/CentOS\nsudo dnf install nginx\n\n# Configure NGINX for GitLab\nsudo tee /etc/nginx/sites-available/gitlab &gt; /dev/null &lt;&lt;EOF\nupstream gitlab-workhorse {\n  server unix:/var/opt/gitlab/gitlab-workhorse/socket fail_timeout=0;\n}\n\nserver {\n  listen 80;\n  server_name gitlab.example.com;\n  server_tokens off;\n  return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name gitlab.example.com;\n  server_tokens off;\n\n  # SSL configuration\n  ssl_certificate /etc/nginx/ssl/gitlab.crt;\n  ssl_certificate_key /etc/nginx/ssl/gitlab.key;\n  ssl_protocols TLSv1.2 TLSv1.3;\n  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n  ssl_prefer_server_ciphers off;\n  ssl_session_cache shared:SSL:10m;\n  ssl_session_tickets off;\n\n  # Security headers\n  add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n  add_header X-Content-Type-Options nosniff;\n  add_header X-Frame-Options DENY;\n  add_header X-XSS-Protection &quot;1; mode=block&quot;;\n  add_header Referrer-Policy strict-origin-when-cross-origin;\n\n  # GitLab needs backwards compatible ciphers to retain compatibility with Java IDEs\n  ssl_ciphers &quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256&quot;;\n\n  client_max_body_size 250m;\n  \n  location / {\n    proxy_cache off;\n    proxy_pass http://gitlab-workhorse;\n    proxy_pass_header Server;\n    proxy_set_header Host \\$host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    proxy_read_timeout 300s;\n    proxy_connect_timeout 300s;\n    proxy_redirect off;\n  }\n  \n  # Container Registry\n  location /v2/ {\n    proxy_cache off;\n    proxy_pass http://localhost:5000;\n    proxy_pass_header Server;\n    proxy_set_header Host \\$host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    proxy_read_timeout 900;\n  }\n}\nEOF\n\n# Enable site and restart NGINX\nsudo ln -sf /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-http-server-httpd\" class=\"mobile-header\">Apache HTTP Server (httpd)</h3>\n<p class=\"mobile-paragraph\">Configure Apache as reverse proxy:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\n# RHEL/CentOS\nsudo dnf install httpd mod_ssl\n\n# Enable modules\nsudo systemctl enable httpd\n\n# Configure Apache for GitLab\nsudo tee /etc/httpd/conf.d/gitlab.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n  ServerName gitlab.example.com\n  Redirect permanent / https://gitlab.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n  ServerName gitlab.example.com\n  \n  # SSL Configuration\n  SSLEngine on\n  SSLCertificateFile /etc/httpd/ssl/gitlab.crt\n  SSLCertificateKeyFile /etc/httpd/ssl/gitlab.key\n  SSLProtocol -all +TLSv1.2 +TLSv1.3\n  SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n  SSLHonorCipherOrder off\n  \n  # Security headers\n  Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n  Header always set X-Content-Type-Options nosniff\n  Header always set X-Frame-Options DENY\n  Header always set X-XSS-Protection &quot;1; mode=block&quot;\n  \n  # Proxy configuration\n  ProxyPreserveHost On\n  ProxyPass /v2/ http://localhost:5000/v2/\n  ProxyPassReverse /v2/ http://localhost:5000/v2/\n  ProxyPass / http://localhost:8080/\n  ProxyPassReverse / http://localhost:8080/\n  \n  # Set headers\n  ProxyPassReverse / http://localhost:8080/\n  RequestHeader set X-Forwarded-Proto &quot;https&quot;\n  RequestHeader set X-Forwarded-Ssl &quot;on&quot;\n&lt;/VirtualHost&gt;\nEOF\n\n# Start Apache\nsudo systemctl start httpd\nsudo systemctl enable httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-load-balancer\" class=\"mobile-header\">HAProxy Load Balancer</h3>\n<p class=\"mobile-paragraph\">Configure HAProxy for high availability:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy\nsudo apt-get install haproxy  # Ubuntu/Debian\nsudo dnf install haproxy      # RHEL/CentOS\n\n# Configure HAProxy\nsudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    daemon\n    log 127.0.0.1:514 local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n\n    # SSL configuration\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor except 127.0.0.0/8\n    option redispatch\n    retries 3\n    timeout http-request 10s\n    timeout queue 1m\n    timeout connect 5s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n\n# GitLab frontend\nfrontend gitlab_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/certs/gitlab.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    rspadd Strict-Transport-Security:\\ max-age=31536000;\\ includeSubDomains\n    rspadd X-Content-Type-Options:\\ nosniff\n    rspadd X-Frame-Options:\\ DENY\n    \n    default_backend gitlab_backend\n\n# GitLab backend servers\nbackend gitlab_backend\n    balance roundrobin\n    option httpchk GET /users/sign_in\n    http-check expect status 200\n    \n    server gitlab1 192.168.1.10:8080 check\n    server gitlab2 192.168.1.11:8080 check backup\n\n# Statistics interface\nfrontend stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Start HAProxy\nsudo systemctl start haproxy\nsudo systemctl enable haproxy</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-security-configuration\" class=\"mobile-header\">8. Security Configuration</h2>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<p class=\"mobile-paragraph\">Implement comprehensive security measures:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># /etc/gitlab/gitlab.rb - Security configuration\n\n# Force HTTPS\nnginx[&#039;redirect_http_to_https&#039;] = true\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;\nnginx[&#039;ssl_prefer_server_ciphers&#039;] = &quot;off&quot;\nnginx[&#039;ssl_ciphers&#039;] = &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&quot;\n\n# Security headers\nnginx[&#039;custom_nginx_config&#039;] = &quot;include /etc/nginx/conf.d/security-headers.conf;&quot;\n\n# Rate limiting\ngitlab_rails[&#039;rate_limit_requests_per_period&#039;] = 300\ngitlab_rails[&#039;rate_limit_period&#039;] = 60\n\n# Rack Attack configuration for Git over HTTP\ngitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n  &#039;enabled&#039; =&gt; true,\n  &#039;ip_whitelist&#039; =&gt; %w{127.0.0.1 192.168.1.0/24},\n  &#039;maxretry&#039; =&gt; 10,\n  &#039;findtime&#039; =&gt; 60,\n  &#039;bantime&#039; =&gt; 3600\n}\n\n# Protected paths\ngitlab_rails[&#039;rack_attack_protected_paths&#039;] = [\n  &#039;/users/password&#039;,\n  &#039;/users/sign_in&#039;,\n  &#039;/api/v4/session.json&#039;,\n  &#039;/api/v4/session&#039;,\n  &#039;/users/confirmation&#039;,\n  &#039;/unsubscribes/&#039;,\n  &#039;/admin/session&#039;\n]\n\n# SSH security\ngitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222\ngitlab_shell[&#039;auth_file&#039;] = &quot;/var/opt/gitlab/.ssh/authorized_keys&quot;\n\n# Two-factor authentication enforcement\ngitlab_rails[&#039;require_two_factor_authentication&#039;] = false\ngitlab_rails[&#039;two_factor_grace_period&#039;] = 8  # 8 hours\n\n# Session settings\ngitlab_rails[&#039;session_expire_delay&#039;] = 10080  # 1 week\ngitlab_rails[&#039;session_store_enabled&#039;] = true\n\n# Webhook security\ngitlab_rails[&#039;webhook_timeout&#039;] = 10\ngitlab_rails[&#039;webhook_max_redirects&#039;] = 3\n\n# API security\ngitlab_rails[&#039;api_limit_per_min&#039;] = 300\n\n# Disable features that increase attack surface\ngitlab_rails[&#039;usage_ping_enabled&#039;] = false\ngitlab_rails[&#039;sentry_enabled&#039;] = false\n\n# Audit logging (Enterprise)\ngitlab_rails[&#039;audit_events_enabled&#039;] = true\n\n# Security scanning\ngitlab_rails[&#039;sast_enabled&#039;] = true\ngitlab_rails[&#039;dependency_scanning_enabled&#039;] = true\ngitlab_rails[&#039;container_scanning_enabled&#039;] = true\ngitlab_rails[&#039;secret_detection_enabled&#039;] = true</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create security headers configuration:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo mkdir -p /etc/nginx/conf.d\n\nsudo tee /etc/nginx/conf.d/security-headers.conf &gt; /dev/null &lt;&lt;EOF\n# Security headers\nadd_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot; always;\nadd_header X-Content-Type-Options nosniff always;\nadd_header X-Frame-Options DENY always;\nadd_header X-XSS-Protection &quot;1; mode=block&quot; always;\nadd_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\nadd_header Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039; &#039;unsafe-eval&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;; img-src &#039;self&#039; data: https:; font-src &#039;self&#039; data:; connect-src &#039;self&#039;;&quot; always;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<p class=\"mobile-paragraph\">#### UFW (Ubuntu/Debian)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable UFW\nsudo ufw enable\n\n# Allow SSH\nsudo ufw allow OpenSSH\n\n# Allow HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow GitLab SSH (if using custom port)\nsudo ufw allow 2222/tcp\n\n# Allow specific IP ranges only (optional)\nsudo ufw allow from 192.168.1.0/24 to any port 22\nsudo ufw allow from 10.0.0.0/8 to any port 22\n\n# Check status\nsudo ufw status verbose</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### firewalld (RHEL/CentOS)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable firewalld\nsudo systemctl enable --now firewalld\n\n# Add services\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\n\n# Add custom ports\nsudo firewall-cmd --permanent --add-port=2222/tcp\n\n# Create custom service for GitLab\nsudo tee /etc/firewalld/services/gitlab.xml &gt; /dev/null &lt;&lt;EOF\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;service&gt;\n  &lt;short&gt;GitLab&lt;/short&gt;\n  &lt;description&gt;GitLab DevOps Platform&lt;/description&gt;\n  &lt;port protocol=&quot;tcp&quot; port=&quot;80&quot;/&gt;\n  &lt;port protocol=&quot;tcp&quot; port=&quot;443&quot;/&gt;\n  &lt;port protocol=&quot;tcp&quot; port=&quot;2222&quot;/&gt;\n&lt;/service&gt;\nEOF\n\nsudo firewall-cmd --permanent --add-service=gitlab\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"access-control-and-authentication\" class=\"mobile-header\">Access Control and Authentication</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># Password policy\ngitlab_rails[&#039;password_authentication_enabled_for_web&#039;] = true\ngitlab_rails[&#039;password_authentication_enabled_for_git&#039;] = true\n\n# Sign-up restrictions\ngitlab_rails[&#039;signup_enabled&#039;] = false\ngitlab_rails[&#039;signin_enabled&#039;] = true\n\n# Email domain restrictions\ngitlab_rails[&#039;email_restrictions_enabled&#039;] = true\ngitlab_rails[&#039;email_restrictions&#039;] = &#039;@example\\\\.com$|@partner\\\\.com$&#039;\n\n# IP restrictions (Enterprise)\ngitlab_rails[&#039;ip_restrictions_enabled&#039;] = true\n\n# OAuth/OIDC providers configuration\ngitlab_rails[&#039;omniauth_enabled&#039;] = true\ngitlab_rails[&#039;omniauth_allow_single_sign_on&#039;] = [&#039;google_oauth2&#039;, &#039;github&#039;]\ngitlab_rails[&#039;omniauth_block_auto_created_users&#039;] = true\ngitlab_rails[&#039;omniauth_auto_sign_in_with_provider&#039;] = &#039;google_oauth2&#039;\ngitlab_rails[&#039;omniauth_providers&#039;] = [\n  {\n    name: &#039;google_oauth2&#039;,\n    app_id: &#039;GOOGLE_OAUTH_CLIENT_ID&#039;,\n    app_secret: &#039;GOOGLE_OAUTH_CLIENT_SECRET&#039;,\n    args: {\n      scope: &#039;email profile&#039;,\n      domain: &#039;example.com&#039;\n    }\n  }\n]</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-database-setup\" class=\"mobile-header\">9. Database Setup</h2>\n<p class=\"mobile-paragraph\">GitLab uses PostgreSQL as its default database. For production environments, consider using an external PostgreSQL instance.</p>\n<h3 id=\"internal-postgresql-default\" class=\"mobile-header\">Internal PostgreSQL (Default)</h3>\n<p class=\"mobile-paragraph\">GitLab comes with a built-in PostgreSQL instance configured automatically:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># /etc/gitlab/gitlab.rb - PostgreSQL settings\n\n# Enable built-in PostgreSQL\npostgresql[&#039;enable&#039;] = true\n\n# PostgreSQL performance tuning\npostgresql[&#039;shared_buffers&#039;] = &quot;2GB&quot;\npostgresql[&#039;effective_cache_size&#039;] = &quot;8GB&quot; \npostgresql[&#039;work_mem&#039;] = &quot;16MB&quot;\npostgresql[&#039;maintenance_work_mem&#039;] = &quot;256MB&quot;\npostgresql[&#039;max_connections&#039;] = 300\npostgresql[&#039;checkpoint_completion_target&#039;] = 0.9\npostgresql[&#039;wal_buffers&#039;] = &quot;16MB&quot;\npostgresql[&#039;default_statistics_target&#039;] = 100\npostgresql[&#039;random_page_cost&#039;] = 1.1  # For SSD storage\npostgresql[&#039;effective_io_concurrency&#039;] = 200\n\n# Connection settings\npostgresql[&#039;listen_address&#039;] = &#039;127.0.0.1&#039;\npostgresql[&#039;port&#039;] = 5432\npostgresql[&#039;max_worker_processes&#039;] = 8\npostgresql[&#039;max_parallel_workers_per_gather&#039;] = 4\npostgresql[&#039;max_parallel_workers&#039;] = 8\n\n# WAL settings for performance\npostgresql[&#039;wal_level&#039;] = &#039;replica&#039;\npostgresql[&#039;max_wal_senders&#039;] = 3\npostgresql[&#039;checkpoint_segments&#039;] = 32\npostgresql[&#039;checkpoint_timeout&#039;] = &#039;5min&#039;\n\n# Logging\npostgresql[&#039;log_statement&#039;] = &#039;none&#039;\npostgresql[&#039;log_min_duration_statement&#039;] = 1000  # Log slow queries\npostgresql[&#039;log_line_prefix&#039;] = &#039;%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h &#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-postgresql-setup\" class=\"mobile-header\">External PostgreSQL Setup</h3>\n<p class=\"mobile-paragraph\">For high availability and better performance, use an external PostgreSQL server:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL on separate server\n# Ubuntu/Debian\nsudo apt-get install postgresql postgresql-contrib\n\n# RHEL/CentOS  \nsudo dnf install postgresql-server postgresql-contrib\n\n# Initialize database (RHEL/CentOS only)\nsudo postgresql-setup --initdb\nsudo systemctl enable --now postgresql\n\n# Create GitLab database and user\nsudo -u postgres createuser --createdb --no-superuser --no-createrole gitlab\nsudo -u postgres createdb -O gitlab gitlabhq_production\nsudo -u postgres psql -c &quot;ALTER USER gitlab ENCRYPTED PASSWORD &#039;secure_password&#039;;&quot;\n\n# Configure PostgreSQL for GitLab\nsudo tee -a /var/lib/pgsql/data/postgresql.conf &lt;&lt;EOF\n# GitLab optimizations\nshared_buffers = 2GB\neffective_cache_size = 8GB\nwork_mem = 16MB  \nmaintenance_work_mem = 256MB\nmax_connections = 300\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\n\n# Connection settings\nlisten_addresses = &#039;*&#039;\nport = 5432\nmax_worker_processes = 8\nmax_parallel_workers = 8\nmax_parallel_workers_per_gather = 4\n\n# Enable extensions\nshared_preload_libraries = &#039;pg_stat_statements&#039;\nEOF\n\n# Configure client authentication\nsudo tee -a /var/lib/pgsql/data/pg_hba.conf &lt;&lt;EOF\nhost    gitlabhq_production     gitlab          192.168.1.0/24          md5\nhost    gitlabhq_production     gitlab          10.0.0.0/8              md5\nEOF\n\nsudo systemctl restart postgresql</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Configure GitLab to use external PostgreSQL:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># /etc/gitlab/gitlab.rb - External PostgreSQL\n\n# Disable built-in PostgreSQL\npostgresql[&#039;enable&#039;] = false\n\n# External PostgreSQL configuration\ngitlab_rails[&#039;db_adapter&#039;] = &#039;postgresql&#039;\ngitlab_rails[&#039;db_encoding&#039;] = &#039;unicode&#039;\ngitlab_rails[&#039;db_collation&#039;] = nil\ngitlab_rails[&#039;db_database&#039;] = &#039;gitlabhq_production&#039;\ngitlab_rails[&#039;db_pool&#039;] = 10\ngitlab_rails[&#039;db_username&#039;] = &#039;gitlab&#039;\ngitlab_rails[&#039;db_password&#039;] = &#039;secure_password&#039;\ngitlab_rails[&#039;db_host&#039;] = &#039;192.168.1.10&#039;\ngitlab_rails[&#039;db_port&#039;] = 5432\ngitlab_rails[&#039;db_socket&#039;] = nil\ngitlab_rails[&#039;db_sslmode&#039;] = &#039;prefer&#039;\ngitlab_rails[&#039;db_sslcert&#039;] = nil\ngitlab_rails[&#039;db_sslkey&#039;] = nil\ngitlab_rails[&#039;db_sslrootcert&#039;] = nil\ngitlab_rails[&#039;db_sslcrl&#039;] = nil\ngitlab_rails[&#039;db_prepared_statements&#039;] = false\ngitlab_rails[&#039;db_statements_limit&#039;] = 1000\n\n# Load balancing for read replicas (Enterprise)\ngitlab_rails[&#039;db_load_balancing&#039;] = {\n  &#039;hosts&#039; =&gt; [&#039;192.168.1.11&#039;, &#039;192.168.1.12&#039;],\n  &#039;discover&#039; =&gt; {\n    &#039;record&#039; =&gt; &#039;postgres-replica.example.com&#039;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-maintenance\" class=\"mobile-header\">Database Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Database maintenance commands\nsudo gitlab-ctl pgb-console  # Connect to database\n\n# Manual database operations\nsudo gitlab-psql -d gitlabhq_production\n\n# Database migrations\nsudo gitlab-rake db:migrate\n\n# Check database status\nsudo gitlab-rake db:migrate:status\n\n# Create database backup\nsudo gitlab-backup create SKIP=uploads,builds,artifacts,lfs,registry,pages\n\n# Restore database from backup  \nsudo gitlab-backup restore BACKUP=timestamp_of_backup\n\n# Database cleanup\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:project_uploads</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-performance-optimization\" class=\"mobile-header\">10. Performance Optimization</h2>\n<h3 id=\"system-level-optimizations\" class=\"mobile-header\">System-Level Optimizations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameter tuning for GitLab\nsudo tee /etc/sysctl.d/90-gitlab.conf &lt;&lt;EOF\n# Network optimizations\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 1200\nnet.ipv4.tcp_keepalive_probes = 7\nnet.ipv4.tcp_keepalive_intvl = 30\n\n# Memory management\nvm.swappiness = 1\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nvm.vfs_cache_pressure = 50\n\n# File system optimizations\nfs.file-max = 2097152\nfs.nr_open = 1048576\nEOF\n\nsudo sysctl -p /etc/sysctl.d/90-gitlab.conf\n\n# Increase file descriptor limits\nsudo tee /etc/security/limits.d/90-gitlab.conf &lt;&lt;EOF\ngit     soft    nofile          65535\ngit     hard    nofile          65535\ngit     soft    nproc           65535  \ngit     hard    nproc           65535\nEOF\n\n# Configure systemd limits\nsudo mkdir -p /etc/systemd/system/gitlab-runsvdir.service.d\nsudo tee /etc/systemd/system/gitlab-runsvdir.service.d/limits.conf &lt;&lt;EOF\n[Service]\nLimitNOFILE=65535\nLimitNPROC=65535\nEOF\n\nsudo systemctl daemon-reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-performance-tuning\" class=\"mobile-header\">Application Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># /etc/gitlab/gitlab.rb - Performance optimizations\n\n# Unicorn/Puma web server settings\n# Use Puma (recommended for GitLab 13.0+)\npuma[&#039;enable&#039;] = true\npuma[&#039;worker_processes&#039;] = 4  # Number of CPU cores\npuma[&#039;min_threads&#039;] = 1\npuma[&#039;max_threads&#039;] = 16\npuma[&#039;worker_timeout&#039;] = 60\npuma[&#039;worker_boot_timeout&#039;] = 60\n\n# Disable Unicorn if using Puma\nunicorn[&#039;enable&#039;] = false\n\n# Sidekiq background job processing\nsidekiq[&#039;max_concurrency&#039;] = 25\nsidekiq[&#039;min_concurrency&#039;] = 10\nsidekiq[&#039;queue_groups&#039;] = [\n  &#039;*&#039;,\n  &#039;cronjob:1&#039;,\n  &#039;default:5&#039;,\n  &#039;pipeline_processing:2&#039;\n]\n\n# Gitaly settings for Git operations\ngitaly[&#039;ruby_max_rss&#039;] = 300000000  # 300MB\ngitaly[&#039;concurrency&#039;] = [\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SmartHTTPService/PostReceivePack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  },\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SSHService/SSHUploadPack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3  \n  },\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SSHService/SSHReceivePack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  }\n]\n\n# GitLab Workhorse settings\ngitlab_workhorse[&#039;api_limit&#039;] = 1000\ngitlab_workhorse[&#039;api_queue_limit&#039;] = 200\ngitlab_workhorse[&#039;api_queue_duration&#039;] = &quot;30s&quot;\n\n# Redis caching optimizations  \nredis[&#039;maxmemory&#039;] = &quot;1gb&quot;\nredis[&#039;maxmemory_policy&#039;] = &quot;allkeys-lru&quot;\nredis[&#039;save&#039;] = &#039;900 1 300 10 60 10000&#039;\nredis[&#039;tcp_keepalive&#039;] = 300\nredis[&#039;tcp_timeout&#039;] = 60\n\n# NGINX optimizations\nnginx[&#039;worker_processes&#039;] = 4\nnginx[&#039;worker_connections&#039;] = 1024\nnginx[&#039;keepalive_timeout&#039;] = 65\nnginx[&#039;gzip&#039;] = &quot;on&quot;\nnginx[&#039;gzip_comp_level&#039;] = 6\nnginx[&#039;gzip_types&#039;] = [\n  &#039;text/plain&#039;,\n  &#039;text/css&#039;, \n  &#039;application/json&#039;,\n  &#039;application/javascript&#039;,\n  &#039;text/xml&#039;,\n  &#039;application/xml&#039;,\n  &#039;application/xml+rss&#039;,\n  &#039;text/javascript&#039;\n]\n\n# Prometheus monitoring optimization\nprometheus[&#039;scrape_interval&#039;] = 15\nprometheus[&#039;scrape_timeout&#039;] = 10\nprometheus[&#039;evaluation_interval&#039;] = 15</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-optimization\" class=\"mobile-header\">Storage Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use SSD storage with proper mount options\nsudo tee -a /etc/fstab &lt;&lt;EOF\n/dev/sdb1 /var/opt/gitlab ext4 defaults,noatime,discard 0 2\nEOF\n\n# Optimize Git repository storage\nsudo tee /usr/local/bin/gitlab-git-optimize.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n# Optimize Git repositories for better performance\n\nREPO_DIR=&quot;/var/opt/gitlab/git-data/repositories&quot;\nLOG_FILE=&quot;/var/log/gitlab/git-optimize.log&quot;\n\necho &quot;$(date): Starting Git repository optimization&quot; &gt;&gt; $LOG_FILE\n\nfind $REPO_DIR -name &quot;*.git&quot; -type d | while read repo; do\n    cd &quot;$repo&quot;\n    echo &quot;Optimizing: $repo&quot; &gt;&gt; $LOG_FILE\n    \n    # Garbage collection\n    git gc --aggressive --prune=now\n    \n    # Repack repository\n    git repack -ad\n    \n    # Update server info\n    git update-server-info\ndone\n\necho &quot;$(date): Git repository optimization completed&quot; &gt;&gt; $LOG_FILE\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-git-optimize.sh\n\n# Schedule weekly Git optimization\necho &quot;0 2 * * 0 root /usr/local/bin/gitlab-git-optimize.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-performance\" class=\"mobile-header\">Monitoring Performance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create performance monitoring script\nsudo tee /usr/local/bin/gitlab-performance-check.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOGFILE=&quot;/var/log/gitlab-performance.log&quot;\n\necho &quot;$(date): Performance Check Started&quot; &gt;&gt; $LOGFILE\n\n# CPU and Memory usage\necho &quot;CPU Usage: $(top -bn1 | grep &quot;Cpu(s)&quot; | awk &#039;{print $2}&#039; | cut -d&#039;%&#039; -f1)%&quot; &gt;&gt; $LOGFILE\necho &quot;Memory Usage: $(free | grep Mem | awk &#039;{printf &quot;%.2f&quot;, $3/$2 * 100.0}&#039;)%&quot; &gt;&gt; $LOGFILE\n\n# Database connections\nDB_CONNECTIONS=$(sudo gitlab-psql -t -c &quot;SELECT count(*) FROM pg_stat_activity;&quot;)\necho &quot;Database Connections: $DB_CONNECTIONS&quot; &gt;&gt; $LOGFILE\n\n# Redis memory usage\nREDIS_MEMORY=$(redis-cli info memory | grep used_memory_human | cut -d: -f2)\necho &quot;Redis Memory: $REDIS_MEMORY&quot; &gt;&gt; $LOGFILE\n\n# Disk usage\nDISK_USAGE=$(df /var/opt/gitlab | awk &#039;NR==2 {print $5}&#039;)\necho &quot;Disk Usage: $DISK_USAGE&quot; &gt;&gt; $LOGFILE\n\n# Active processes\nPROCESSES=$(sudo gitlab-ctl status | grep -c &quot;run:&quot;)\necho &quot;Active GitLab Processes: $PROCESSES&quot; &gt;&gt; $LOGFILE\n\necho &quot;$(date): Performance Check Completed&quot; &gt;&gt; $LOGFILE\necho &quot;---&quot; &gt;&gt; $LOGFILE\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-performance-check.sh\n\n# Schedule performance checks every 15 minutes\necho &quot;*/15 * * * * root /usr/local/bin/gitlab-performance-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"11-monitoring\" class=\"mobile-header\">11. Monitoring</h2>\n<p class=\"mobile-paragraph\">GitLab includes built-in monitoring capabilities with Prometheus and Grafana.</p>\n<h3 id=\"built-in-monitoring-stack\" class=\"mobile-header\">Built-in Monitoring Stack</h3>\n<p class=\"mobile-paragraph\">Enable GitLab's integrated monitoring:</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># /etc/gitlab/gitlab.rb - Monitoring configuration\n\n# Enable Prometheus monitoring\nprometheus_monitoring[&#039;enable&#039;] = true\nprometheus[&#039;enable&#039;] = true\nprometheus[&#039;listen_address&#039;] = &#039;localhost:9090&#039;\nprometheus[&#039;scrape_interval&#039;] = 15\nprometheus[&#039;scrape_timeout&#039;] = 10\nprometheus[&#039;evaluation_interval&#039;] = 15\n\n# Prometheus exporters\nnode_exporter[&#039;enable&#039;] = true\nnode_exporter[&#039;listen_address&#039;] = &#039;localhost:9100&#039;\n\nredis_exporter[&#039;enable&#039;] = true\nredis_exporter[&#039;listen_address&#039;] = &#039;localhost:9121&#039;\n\npostgres_exporter[&#039;enable&#039;] = true\npostgres_exporter[&#039;listen_address&#039;] = &#039;localhost:9187&#039;\n\ngitlab_exporter[&#039;enable&#039;] = true\ngitlab_exporter[&#039;listen_address&#039;] = &#039;localhost:9168&#039;\n\n# Grafana configuration\ngrafana[&#039;enable&#039;] = true\ngrafana[&#039;admin_password&#039;] = &#039;secure_grafana_password&#039;\ngrafana[&#039;disable_login_form&#039;] = false\ngrafana[&#039;allow_user_sign_up&#039;] = false\ngrafana[&#039;secret_key&#039;] = &#039;generate_secure_secret_key&#039;\n\n# Alert Manager\nalertmanager[&#039;enable&#039;] = true\nalertmanager[&#039;admin_email&#039;] = &#039;alerts@example.com&#039;\nalertmanager[&#039;flags&#039;] = {\n  &#039;storage.path&#039; =&gt; &#039;/var/opt/gitlab/alertmanager/data&#039;,\n  &#039;config.file&#039; =&gt; &#039;/var/opt/gitlab/alertmanager/alertmanager.yml&#039;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-integration\" class=\"mobile-header\">External Monitoring Integration</h3>\n<p class=\"mobile-paragraph\">Configure external monitoring systems:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Prometheus configuration for external setup\nsudo tee /etc/prometheus/prometheus.yml &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    monitor: &#039;gitlab-monitor&#039;\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets: [&#039;localhost:9093&#039;]\n\nrule_files:\n  - &quot;gitlab-rules.yml&quot;\n\nscrape_configs:\n  - job_name: &#039;gitlab-workhorse&#039;\n    static_configs:\n      - targets: [&#039;gitlab.example.com:9229&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 15s\n\n  - job_name: &#039;gitlab-unicorn&#039;\n    static_configs:\n      - targets: [&#039;gitlab.example.com:8080&#039;]\n    metrics_path: &#039;/-/metrics&#039;\n    scrape_interval: 15s\n\n  - job_name: &#039;gitlab-sidekiq&#039;\n    static_configs:\n      - targets: [&#039;gitlab.example.com:8082&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 15s\n\n  - job_name: &#039;gitlab-gitaly&#039;\n    static_configs:\n      - targets: [&#039;gitlab.example.com:9236&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 15s\n\n  - job_name: &#039;node-exporter&#039;\n    static_configs:\n      - targets: [&#039;gitlab.example.com:9100&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 15s\n\n  - job_name: &#039;postgres-exporter&#039;\n    static_configs:\n      - targets: [&#039;gitlab.example.com:9187&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 15s\n\n  - job_name: &#039;redis-exporter&#039;\n    static_configs:\n      - targets: [&#039;gitlab.example.com:9121&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 15s\nEOF\n\n# Create GitLab-specific alerting rules\nsudo tee /etc/prometheus/gitlab-rules.yml &lt;&lt;EOF\ngroups:\n  - name: gitlab\n    rules:\n      - alert: GitLabDown\n        expr: up{job=~&quot;gitlab.*&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;GitLab service {{ \\$labels.job }} is down&quot;\n          description: &quot;GitLab service {{ \\$labels.job }} has been down for more than 5 minutes.&quot;\n\n      - alert: GitLabHighCPU\n        expr: 100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=&quot;idle&quot;}[5m])) * 100) &gt; 80\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;High CPU usage on GitLab server&quot;\n          description: &quot;CPU usage is above 80% for more than 10 minutes.&quot;\n\n      - alert: GitLabHighMemory\n        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 &gt; 85\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;High memory usage on GitLab server&quot;\n          description: &quot;Memory usage is above 85% for more than 10 minutes.&quot;\n\n      - alert: GitLabDiskSpaceLow\n        expr: (node_filesystem_avail_bytes / node_filesystem_size_bytes) * 100 &lt; 15\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;Low disk space on GitLab server&quot;\n          description: &quot;Disk space is below 15% on {{ \\$labels.mountpoint }}.&quot;\n\n      - alert: GitLabPostgreSQLDown\n        expr: up{job=&quot;postgres-exporter&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;PostgreSQL is down&quot;\n          description: &quot;GitLab PostgreSQL database has been down for more than 5 minutes.&quot;\n\n      - alert: GitLabRedisDown\n        expr: up{job=&quot;redis-exporter&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;Redis is down&quot;\n          description: &quot;GitLab Redis cache has been down for more than 5 minutes.&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-management\" class=\"mobile-header\">Log Management</h3>\n<p class=\"mobile-paragraph\">Configure centralized logging:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install and configure Elasticsearch, Logstash, Kibana (ELK Stack)\n# Or use external services like Splunk, DataDog, etc.\n\n# Configure GitLab log forwarding\nsudo tee /etc/rsyslog.d/49-gitlab.conf &lt;&lt;EOF\n# Forward GitLab logs to centralized logging\n*.* @@logserver.example.com:514\n\n# Local GitLab log files\nif \\$programname startswith &#039;gitlab&#039; then /var/log/gitlab-centralized.log\n&amp; stop\nEOF\n\nsudo systemctl restart rsyslog\n\n# Create log monitoring script\nsudo tee /usr/local/bin/gitlab-log-monitor.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nALERT_EMAIL=&quot;admin@example.com&quot;\nLOG_DIR=&quot;/var/log/gitlab&quot;\n\n# Monitor for critical errors\nfind $LOG_DIR -name &quot;*.log&quot; -type f -mmin -5 | while read logfile; do\n    if grep -i &quot;error\\|exception\\|fatal&quot; &quot;$logfile&quot; | grep &quot;$(date +&#039;%Y-%m-%d %H:%M&#039;)&quot; &gt; /tmp/gitlab-errors.tmp; then\n        if [ -s /tmp/gitlab-errors.tmp ]; then\n            echo &quot;Critical errors found in GitLab logs:&quot; | mail -s &quot;GitLab Error Alert&quot; $ALERT_EMAIL &lt; /tmp/gitlab-errors.tmp\n        fi\n    fi\ndone\n\n# Monitor disk space for log directory\nUSAGE=$(df $LOG_DIR | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ $USAGE -gt 80 ]; then\n    echo &quot;Log directory usage is at ${USAGE}%. Consider log rotation.&quot; | mail -s &quot;GitLab Log Disk Usage Warning&quot; $ALERT_EMAIL\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-log-monitor.sh\n\n# Schedule log monitoring every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/gitlab-log-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive health monitoring\nsudo tee /usr/local/bin/gitlab-health-monitor.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/gitlab-health.log&quot;\nEMAIL=&quot;admin@example.com&quot;\nWEBHOOK_URL=&quot;https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK&quot;\n\ncheck_service() {\n    local service=$1\n    if sudo gitlab-ctl status $service | grep -q &quot;run:&quot;; then\n        echo &quot;$(date): ✓ $service is running&quot; &gt;&gt; $HEALTH_LOG\n        return 0\n    else\n        echo &quot;$(date): ✗ $service is DOWN&quot; &gt;&gt; $HEALTH_LOG\n        alert_service_down $service\n        return 1\n    fi\n}\n\nalert_service_down() {\n    local service=$1\n    echo &quot;ALERT: GitLab service $service is down&quot; | mail -s &quot;GitLab Service Alert&quot; $EMAIL\n    \n    # Send Slack notification\n    curl -X POST -H &#039;Content-type: application/json&#039; \\\n        --data &quot;{\\&quot;text\\&quot;:\\&quot;🚨 GitLab Alert: Service $service is down on $(hostname)\\&quot;}&quot; \\\n        $WEBHOOK_URL\n}\n\n# Check all critical services\necho &quot;$(date): Starting health check&quot; &gt;&gt; $HEALTH_LOG\n\nservices=(&quot;nginx&quot; &quot;postgresql&quot; &quot;redis&quot; &quot;unicorn&quot; &quot;sidekiq&quot; &quot;gitaly&quot;)\nfailed_services=0\n\nfor service in &quot;${services[@]}&quot;; do\n    if ! check_service $service; then\n        ((failed_services++))\n    fi\ndone\n\n# Check application health\nif sudo gitlab-rake gitlab:check &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;$(date): ✓ GitLab application health check passed&quot; &gt;&gt; $HEALTH_LOG\nelse\n    echo &quot;$(date): ✗ GitLab application health check FAILED&quot; &gt;&gt; $HEALTH_LOG\n    echo &quot;GitLab application health check failed&quot; | mail -s &quot;GitLab Application Health Alert&quot; $EMAIL\n    ((failed_services++))\nfi\n\n# Check backup status\nLAST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar 2&gt;/dev/null | head -1)\nif [ -n &quot;$LAST_BACKUP&quot; ]; then\n    BACKUP_AGE=$(( ($(date +%s) - $(stat -c %Y &quot;$LAST_BACKUP&quot;)) / 3600 ))\n    if [ $BACKUP_AGE -gt 48 ]; then\n        echo &quot;$(date): ⚠ Last backup is ${BACKUP_AGE} hours old&quot; &gt;&gt; $HEALTH_LOG\n        echo &quot;GitLab backup is ${BACKUP_AGE} hours old&quot; | mail -s &quot;GitLab Backup Warning&quot; $EMAIL\n    else\n        echo &quot;$(date): ✓ Recent backup available (${BACKUP_AGE} hours old)&quot; &gt;&gt; $HEALTH_LOG\n    fi\nelse\n    echo &quot;$(date): ✗ No backup files found&quot; &gt;&gt; $HEALTH_LOG\n    echo &quot;No GitLab backup files found&quot; | mail -s &quot;GitLab Backup Alert&quot; $EMAIL\nfi\n\necho &quot;$(date): Health check completed. Failed services: $failed_services&quot; &gt;&gt; $HEALTH_LOG\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-health-monitor.sh\n\n# Schedule health checks every 10 minutes\necho &quot;*/10 * * * * root /usr/local/bin/gitlab-health-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"12-backup-and-restore\" class=\"mobile-header\">12. Backup and Restore</h2>\n<h3 id=\"automated-backup-strategy\" class=\"mobile-header\">Automated Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive backup script\nsudo tee /usr/local/bin/gitlab-backup-complete.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/gitlab&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nRETENTION_DAYS=30\nEMAIL=&quot;admin@example.com&quot;\n\n# Create backup directories\nmkdir -p ${BACKUP_DIR}/{omnibus,secrets,ssl,registry,uploads}\n\necho &quot;$(date): Starting GitLab backup process...&quot;\n\n# Create GitLab application backup\necho &quot;Creating GitLab application backup...&quot;\nif gitlab-backup create STRATEGY=copy SKIP=uploads,builds,artifacts,lfs,registry,pages; then\n    echo &quot;✓ GitLab application backup completed&quot;\nelse\n    echo &quot;✗ GitLab application backup failed&quot;\n    echo &quot;GitLab application backup failed on $(hostname)&quot; | mail -s &quot;GitLab Backup Failure&quot; $EMAIL\n    exit 1\nfi\n\n# Backup configuration files\necho &quot;Backing up configuration files...&quot;\ntar -czf ${BACKUP_DIR}/omnibus/gitlab-config-${DATE}.tar.gz \\\n    /etc/gitlab/gitlab.rb \\\n    /etc/gitlab/gitlab-secrets.json \\\n    /etc/gitlab/trusted-certs/ 2&gt;/dev/null\n\n# Backup SSL certificates\necho &quot;Backing up SSL certificates...&quot;\nif [ -d /etc/gitlab/ssl ]; then\n    tar -czf ${BACKUP_DIR}/ssl/gitlab-ssl-${DATE}.tar.gz /etc/gitlab/ssl/\nfi\n\nif [ -d /etc/letsencrypt ]; then\n    tar -czf ${BACKUP_DIR}/ssl/letsencrypt-${DATE}.tar.gz /etc/letsencrypt/\nfi\n\n# Backup secrets\necho &quot;Backing up secrets...&quot;\nif [ -d /etc/gitlab/secrets ]; then\n    tar -czf ${BACKUP_DIR}/secrets/gitlab-secrets-${DATE}.tar.gz /etc/gitlab/secrets/\nfi\n\n# Backup container registry (if using local storage)\nif [ -d /var/opt/gitlab/gitlab-rails/shared/registry ]; then\n    echo &quot;Backing up container registry...&quot;\n    tar -czf ${BACKUP_DIR}/registry/registry-${DATE}.tar.gz /var/opt/gitlab/gitlab-rails/shared/registry/\nfi\n\n# Upload to cloud storage (multiple providers)\necho &quot;Uploading backups to cloud storage...&quot;\n\n# AWS S3\nif command -v aws &gt;/dev/null 2&gt;&amp;1; then\n    aws s3 sync ${BACKUP_DIR}/ s3://gitlab-backups-primary/${DATE}/\nfi\n\n# Azure Blob Storage\nif command -v az &gt;/dev/null 2&gt;&amp;1; then\n    az storage blob upload-batch --source ${BACKUP_DIR} --destination gitlab-backups --destination-path ${DATE}\nfi\n\n# Google Cloud Storage\nif command -v gsutil &gt;/dev/null 2&gt;&amp;1; then\n    gsutil -m cp -r ${BACKUP_DIR}/* gs://gitlab-backups-gcs/${DATE}/\nfi\n\n# Verify backup integrity\necho &quot;Verifying backup integrity...&quot;\nLATEST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar | head -1)\nif [ -n &quot;$LATEST_BACKUP&quot; ]; then\n    if tar -tf &quot;$LATEST_BACKUP&quot; &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✓ Backup integrity verified&quot;\n    else\n        echo &quot;✗ Backup integrity check failed&quot;\n        echo &quot;GitLab backup integrity check failed&quot; | mail -s &quot;GitLab Backup Integrity Alert&quot; $EMAIL\n    fi\nfi\n\n# Cleanup old backups\necho &quot;Cleaning up old backups...&quot;\nfind /var/opt/gitlab/backups/ -name &quot;*_gitlab_backup.tar&quot; -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name &quot;gitlab-*&quot; -type f -mtime +${RETENTION_DAYS} -delete\n\n# Send success notification\necho &quot;GitLab backup completed successfully on $(date)&quot; | mail -s &quot;GitLab Backup Success&quot; $EMAIL\n\necho &quot;$(date): GitLab backup process completed successfully&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup-complete.sh\n\n# Schedule daily backups at 2 AM\necho &quot;0 2 * * * root /usr/local/bin/gitlab-backup-complete.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery-procedures\" class=\"mobile-header\">Disaster Recovery Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create disaster recovery script\nsudo tee /usr/local/bin/gitlab-disaster-recovery.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_FILE=&quot;${1}&quot;\nCONFIG_BACKUP=&quot;${2}&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ] || [ -z &quot;$CONFIG_BACKUP&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt; &lt;config_backup&gt;&quot;\n    echo &quot;Available backups:&quot;\n    ls -la /var/opt/gitlab/backups/*_gitlab_backup.tar 2&gt;/dev/null || echo &quot;No local backups found&quot;\n    exit 1\nfi\n\necho &quot;$(date): Starting GitLab disaster recovery process...&quot;\n\n# Pre-recovery checks\necho &quot;Performing pre-recovery checks...&quot;\nif ! command -v gitlab-ctl &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;GitLab not installed. Please install GitLab first.&quot;\n    exit 1\nfi\n\n# Stop GitLab services\necho &quot;Stopping GitLab services...&quot;\ngitlab-ctl stop unicorn\ngitlab-ctl stop puma  \ngitlab-ctl stop sidekiq\ngitlab-ctl stop workhorse\ngitlab-ctl stop gitaly\n\n# Backup current installation (if any)\nif [ -d /var/opt/gitlab/git-data ]; then\n    echo &quot;Backing up current installation...&quot;\n    mv /var/opt/gitlab /var/opt/gitlab.backup.$(date +%s)\n    mkdir -p /var/opt/gitlab\nfi\n\n# Restore configuration\necho &quot;Restoring configuration files...&quot;\nif [ -f &quot;$CONFIG_BACKUP&quot; ]; then\n    cd /\n    tar -xzf &quot;$CONFIG_BACKUP&quot;\nelse\n    echo &quot;Configuration backup not found: $CONFIG_BACKUP&quot;\n    exit 1\nfi\n\n# Reconfigure GitLab with restored configuration\necho &quot;Reconfiguring GitLab...&quot;\ngitlab-ctl reconfigure\n\n# Restore GitLab backup\necho &quot;Restoring GitLab backup...&quot;\nBACKUP_NAME=$(basename &quot;$BACKUP_FILE&quot; _gitlab_backup.tar)\nif gitlab-backup restore BACKUP=&quot;$BACKUP_NAME&quot; force=yes; then\n    echo &quot;✓ GitLab backup restored successfully&quot;\nelse\n    echo &quot;✗ GitLab backup restoration failed&quot;\n    exit 1\nfi\n\n# Start GitLab services\necho &quot;Starting GitLab services...&quot;\ngitlab-ctl start\n\n# Wait for services to start\necho &quot;Waiting for services to start...&quot;\nsleep 30\n\n# Verify installation\necho &quot;Verifying GitLab installation...&quot;\nif gitlab-rake gitlab:check SANITIZE=true; then\n    echo &quot;✓ GitLab installation verified successfully&quot;\nelse\n    echo &quot;⚠ GitLab verification completed with warnings&quot;\nfi\n\n# Run database migrations (if needed)\necho &quot;Running database migrations...&quot;\ngitlab-rake db:migrate\n\necho &quot;$(date): GitLab disaster recovery completed&quot;\necho &quot;Please verify the installation manually and check all services&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-disaster-recovery.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"point-in-time-recovery\" class=\"mobile-header\">Point-in-Time Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># /etc/gitlab/gitlab.rb - Configure for point-in-time recovery\n\n# Enable WAL archiving for PostgreSQL\npostgresql[&#039;archive_mode&#039;] = &quot;on&quot;\npostgresql[&#039;archive_command&#039;] = &#039;cp %p /var/opt/gitlab/postgresql/archive/%f&#039;\npostgresql[&#039;max_wal_senders&#039;] = 3\npostgresql[&#039;wal_keep_segments&#039;] = 32\npostgresql[&#039;checkpoint_segments&#039;] = 32\n\n# Configure continuous archiving\npostgresql[&#039;archive_timeout&#039;] = &#039;60s&#039;\npostgresql[&#039;checkpoint_completion_target&#039;] = 0.9\n\n# Backup retention\ngitlab_rails[&#039;backup_keep_time&#039;] = 2592000  # 30 days\ngitlab_rails[&#039;backup_archive_permissions&#039;] = 0644</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-troubleshooting\" class=\"mobile-header\">13. Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># GitLab service diagnostics\nsudo tee /usr/local/bin/gitlab-diagnose.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;=== GitLab Diagnostic Report ===&quot;\necho &quot;Date: $(date)&quot;\necho &quot;Hostname: $(hostname)&quot;\necho &quot;GitLab Version: $(gitlab-rake gitlab:env:info | grep &quot;GitLab information&quot; -A 5)&quot;\necho\n\necho &quot;=== Service Status ===&quot;\nsudo gitlab-ctl status\necho\n\necho &quot;=== Memory Usage ===&quot;\nfree -h\necho\n\necho &quot;=== Disk Usage ===&quot;\ndf -h | grep -E &quot;(gitlab|Filesystem)&quot;\necho\n\necho &quot;=== GitLab Processes ===&quot;\nps aux | grep -E &quot;(gitlab|unicorn|sidekiq|workhorse|gitaly)&quot; | grep -v grep\necho\n\necho &quot;=== Database Connectivity ===&quot;\nif sudo gitlab-psql -c &quot;SELECT version();&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✓ PostgreSQL connection OK&quot;\n    sudo gitlab-psql -c &quot;SELECT count(*) as active_connections FROM pg_stat_activity;&quot;\nelse\n    echo &quot;✗ PostgreSQL connection FAILED&quot;\nfi\necho\n\necho &quot;=== Redis Connectivity ===&quot;\nif redis-cli ping &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✓ Redis connection OK&quot;\n    redis-cli info memory | grep used_memory_human\nelse\n    echo &quot;✗ Redis connection FAILED&quot;\nfi\necho\n\necho &quot;=== Recent Errors ===&quot;\necho &quot;Last 10 errors from GitLab logs:&quot;\nfind /var/log/gitlab -name &quot;*.log&quot; -type f -exec grep -l &quot;ERROR\\|FATAL&quot; {} \\; | head -5 | while read log; do\n    echo &quot;--- $log ---&quot;\n    tail -5 &quot;$log&quot; | grep -E &quot;ERROR|FATAL&quot; | tail -2\ndone\necho\n\necho &quot;=== Network Connectivity ===&quot;\necho &quot;Testing external connectivity:&quot;\nif curl -Is https://gitlab.com &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✓ External connectivity OK&quot;\nelse\n    echo &quot;✗ External connectivity FAILED&quot;\nfi\n\necho &quot;Testing internal services:&quot;\nnetstat -tlnp | grep -E &quot;(80|443|22|5432|6379)&quot;\necho\n\necho &quot;=== SSL Certificate Status ===&quot;\nif [ -f /etc/gitlab/ssl/gitlab.example.com.crt ]; then\n    echo &quot;SSL certificate expires:&quot;\n    openssl x509 -in /etc/gitlab/ssl/gitlab.example.com.crt -noout -dates\nelse\n    echo &quot;No SSL certificate found&quot;\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-diagnose.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"specific-problem-resolution\" class=\"mobile-header\">Specific Problem Resolution</h3>\n<p class=\"mobile-paragraph\">#### High Memory Usage</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Reduce memory consumption\nsudo tee -a /etc/gitlab/gitlab.rb &lt;&lt;EOF\n# Memory optimization for smaller systems\nunicorn[&#039;worker_processes&#039;] = 2\nsidekiq[&#039;max_concurrency&#039;] = 10\npostgresql[&#039;shared_buffers&#039;] = &quot;256MB&quot;\npostgresql[&#039;effective_cache_size&#039;] = &quot;1GB&quot;\nEOF\n\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Database Issues</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Database troubleshooting commands\nsudo gitlab-ctl status postgresql\nsudo gitlab-psql -d gitlabhq_production\n\n# Check database connections\nsudo gitlab-psql -c &quot;SELECT count(*) FROM pg_stat_activity;&quot;\n\n# Check for locks\nsudo gitlab-psql -c &quot;SELECT * FROM pg_locks WHERE NOT granted;&quot;\n\n# Vacuum and analyze database\nsudo gitlab-psql -c &quot;VACUUM ANALYZE;&quot;\n\n# Check database size\nsudo gitlab-psql -c &quot;SELECT pg_database_size(&#039;gitlabhq_production&#039;);&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Performance Issues</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check system resources\ntop -p $(pgrep -d&#039;,&#039; -f gitlab)\niostat -x 1 5\nfree -h\n\n# Check GitLab worker status\nsudo gitlab-ctl status | grep -E &quot;(unicorn|sidekiq)&quot;\n\n# Check background job queue\nsudo gitlab-rails runner &quot;puts Sidekiq::Queue.new.size&quot;\n\n# Restart specific services\nsudo gitlab-ctl restart sidekiq\nsudo gitlab-ctl restart unicorn</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### SSL/TLS Issues</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test SSL configuration\nopenssl s_client -connect gitlab.example.com:443 -servername gitlab.example.com\n\n# Check certificate chain\nopenssl s_client -connect gitlab.example.com:443 -showcerts\n\n# Verify certificate\nopenssl x509 -in /etc/gitlab/ssl/gitlab.example.com.crt -text -noout\n\n# Test cipher suites\nnmap --script ssl-enum-ciphers -p 443 gitlab.example.com</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Repository Issues</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check repository integrity\nsudo gitlab-rake gitlab:check:repos\n\n# Recreate authorized_keys file\nsudo gitlab-rake gitlab:shell:setup\n\n# Check GitLab Shell\nsudo gitlab-rake gitlab:gitlab_shell:check\n\n# Fix repository permissions\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"14-integration-examples\" class=\"mobile-header\">14. Integration Examples</h2>\n<h3 id=\"cicd-pipeline-integration\" class=\"mobile-header\">CI/CD Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># .gitlab-ci.yml - Comprehensive CI/CD pipeline\nstages:\n  - security\n  - test\n  - build\n  - deploy\n  - monitor\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: &quot;/certs&quot;\n  SECURE_LOG_LEVEL: info\n\n# Security scanning stage\ninclude:\n  - template: Security/SAST.gitlab-ci.yml\n  - template: Security/Dependency-Scanning.gitlab-ci.yml\n  - template: Security/Container-Scanning.gitlab-ci.yml\n  - template: Security/Secret-Detection.gitlab-ci.yml\n\n# Custom security scans\nsecurity:custom-audit:\n  stage: security\n  image: alpine:latest\n  before_script:\n    - apk add --no-cache curl jq\n  script:\n    - echo &quot;Running custom security audit...&quot;\n    - |\n      # Check for hardcoded secrets\n      if grep -r -E &quot;(password|secret|key|token).*=.*[&#039;\\&quot;][a-zA-Z0-9]{8,}[&#039;\\&quot;]&quot; .; then\n        echo &quot;Potential hardcoded secrets found!&quot;\n        exit 1\n      fi\n    - echo &quot;Security audit passed&quot;\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH&#039;\n\n# Testing stage\ntest:unit:\n  stage: test\n  image: node:18-alpine\n  script:\n    - npm ci\n    - npm run test:unit\n  coverage: &#039;/Coverage: \\d+\\.\\d+%/&#039;\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: coverage/cobertura-coverage.xml\n\ntest:integration:\n  stage: test\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker-compose -f docker-compose.test.yml up --build --exit-code-from app\n  artifacts:\n    reports:\n      junit: test-results.xml\n\n# Build stage\nbuild:docker:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  before_script:\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n  script:\n    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .\n    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest\n    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n    - docker push $CI_REGISTRY_IMAGE:latest\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n\n# Deployment stages\ndeploy:staging:\n  stage: deploy\n  image: alpine/kubectl:latest\n  script:\n    - kubectl config use-context staging\n    - kubectl set image deployment/app app=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n    - kubectl rollout status deployment/app\n  environment:\n    name: staging\n    url: https://staging.example.com\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n\ndeploy:production:\n  stage: deploy\n  image: alpine/kubectl:latest\n  script:\n    - kubectl config use-context production\n    - kubectl set image deployment/app app=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n    - kubectl rollout status deployment/app\n  environment:\n    name: production\n    url: https://app.example.com\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n      when: manual\n\n# Monitoring stage\nmonitor:deployment:\n  stage: monitor\n  image: curlimages/curl:latest\n  script:\n    - sleep 60  # Wait for deployment\n    - |\n      if curl -f https://app.example.com/health; then\n        echo &quot;Deployment health check passed&quot;\n      else\n        echo &quot;Deployment health check failed&quot;\n        exit 1\n      fi\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;main&quot;&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-service-integrations\" class=\"mobile-header\">External Service Integrations</h3>\n<p class=\"mobile-paragraph\">#### Slack Integration</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Slack notifications\ncurl -X POST &quot;https://gitlab.example.com/api/v4/projects/1/services/slack&quot; \\\n  --header &quot;PRIVATE-TOKEN: $GITLAB_TOKEN&quot; \\\n  --data-urlencode &quot;webhook=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK&quot; \\\n  --data-urlencode &quot;channel=#gitlab&quot; \\\n  --data-urlencode &quot;push_events=true&quot; \\\n  --data-urlencode &quot;issues_events=true&quot; \\\n  --data-urlencode &quot;merge_requests_events=true&quot; \\\n  --data-urlencode &quot;pipeline_events=true&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Jira Integration</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Jira integration\ncurl -X PUT &quot;https://gitlab.example.com/api/v4/projects/1/services/jira&quot; \\\n  --header &quot;PRIVATE-TOKEN: $GITLAB_TOKEN&quot; \\\n  --data-urlencode &quot;url=https://yourcompany.atlassian.net&quot; \\\n  --data-urlencode &quot;username=gitlab@company.com&quot; \\\n  --data-urlencode &quot;password=jira_api_token&quot; \\\n  --data-urlencode &quot;project_key=PROJ&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Kubernetes Integration</p>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># /etc/gitlab/gitlab.rb - Kubernetes integration\ngitlab_rails[&#039;kubernetes_enabled&#039;] = true\ngitlab_rails[&#039;kubernetes_namespace&#039;] = &#039;gitlab&#039;\n\n# Enable GitLab Agent for Kubernetes\ngitlab_rails[&#039;gitlab_kas_enabled&#039;] = true\ngitlab_kas[&#039;enable&#039;] = true\ngitlab_kas[&#039;listen_address&#039;] = &#039;0.0.0.0:8150&#039;\ngitlab_kas[&#039;listen_websocket&#039;] = &#039;0.0.0.0:8151&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"15-maintenance\" class=\"mobile-header\">15. Maintenance</h2>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create maintenance script\nsudo tee /usr/local/bin/gitlab-maintenance.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMAINTENANCE_LOG=&quot;/var/log/gitlab-maintenance.log&quot;\n\necho &quot;$(date): Starting GitLab maintenance&quot; &gt;&gt; $MAINTENANCE_LOG\n\n# Update GitLab to latest version\necho &quot;Checking for GitLab updates...&quot; &gt;&gt; $MAINTENANCE_LOG\nif command -v apt-get &gt;/dev/null; then\n    apt-get update &amp;&amp; apt-get upgrade gitlab-ee\nelif command -v yum &gt;/dev/null; then\n    yum update gitlab-ee\nelif command -v dnf &gt;/dev/null; then\n    dnf update gitlab-ee\nfi\n\n# Clean up old log files\necho &quot;Cleaning up old log files...&quot; &gt;&gt; $MAINTENANCE_LOG\nfind /var/log/gitlab -name &quot;*.log.*&quot; -mtime +30 -delete\n\n# Clean up old backups\necho &quot;Cleaning up old backups...&quot; &gt;&gt; $MAINTENANCE_LOG\nfind /var/opt/gitlab/backups -name &quot;*_gitlab_backup.tar&quot; -mtime +7 -delete\n\n# Database maintenance\necho &quot;Performing database maintenance...&quot; &gt;&gt; $MAINTENANCE_LOG\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:project_uploads\nsudo gitlab-psql -c &quot;VACUUM ANALYZE;&quot;\n\n# Git repository optimization\necho &quot;Optimizing Git repositories...&quot; &gt;&gt; $MAINTENANCE_LOG\nsudo gitlab-rake gitlab:cleanup:repos\n\n# Container registry cleanup\necho &quot;Cleaning up container registry...&quot; &gt;&gt; $MAINTENANCE_LOG\nsudo gitlab-ctl registry-garbage-collect\n\n# Check system health\necho &quot;Checking system health...&quot; &gt;&gt; $MAINTENANCE_LOG\nsudo gitlab-rake gitlab:check SANITIZE=true &gt;&gt; $MAINTENANCE_LOG\n\necho &quot;$(date): GitLab maintenance completed&quot; &gt;&gt; $MAINTENANCE_LOG\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-maintenance.sh\n\n# Schedule monthly maintenance on first Sunday at 3 AM\necho &quot;0 3 1-7 * 0 root /usr/local/bin/gitlab-maintenance.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create update script\nsudo tee /usr/local/bin/gitlab-update.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nCURRENT_VERSION=$(gitlab-rake gitlab:env:info | grep &quot;GitLab information&quot; | head -1)\nBACKUP_DIR=&quot;/backup/pre-update&quot;\nEMAIL=&quot;admin@example.com&quot;\n\necho &quot;Current GitLab version: $CURRENT_VERSION&quot;\necho &quot;Creating pre-update backup...&quot;\n\n# Create backup before update\nmkdir -p $BACKUP_DIR\ngitlab-backup create BACKUP=$BACKUP_DIR\n\n# Update GitLab\nif command -v apt-get &gt;/dev/null; then\n    apt-get update\n    apt-get install gitlab-ee\nelif command -v dnf &gt;/dev/null; then\n    dnf update gitlab-ee\nfi\n\n# Reconfigure after update\ngitlab-ctl reconfigure\n\n# Check installation\nif gitlab-rake gitlab:check SANITIZE=true; then\n    echo &quot;GitLab update successful&quot; | mail -s &quot;GitLab Update Success&quot; $EMAIL\nelse\n    echo &quot;GitLab update completed with warnings&quot; | mail -s &quot;GitLab Update Warning&quot; $EMAIL\nfi\n\nNEW_VERSION=$(gitlab-rake gitlab:env:info | grep &quot;GitLab information&quot; | head -1)\necho &quot;Updated GitLab version: $NEW_VERSION&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-update.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"16-additional-resources\" class=\"mobile-header\">16. Additional Resources</h2>\n<h3 id=\"documentation-links\" class=\"mobile-header\">Documentation Links</h3>\n<li class=\"mobile-list-item\"><strong>Official GitLab Documentation</strong>: https://docs.gitlab.com/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Administration Guide</strong>: https://docs.gitlab.com/ee/administration/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Security Documentation</strong>: https://docs.gitlab.com/ee/security/</li>\n<li class=\"mobile-list-item\"><strong>GitLab CI/CD Documentation</strong>: https://docs.gitlab.com/ee/ci/</li>\n<li class=\"mobile-list-item\"><strong>GitLab API Documentation</strong>: https://docs.gitlab.com/ee/api/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Runner Documentation</strong>: https://docs.gitlab.com/runner/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Container Registry</strong>: https://docs.gitlab.com/ee/user/packages/container_registry/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Pages Documentation</strong>: https://docs.gitlab.com/ee/user/project/pages/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Geo Documentation</strong>: https://docs.gitlab.com/ee/administration/geo/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Kubernetes Integration</strong>: https://docs.gitlab.com/ee/user/clusters/agent/</li>\n<h3 id=\"community-resources\" class=\"mobile-header\">Community Resources</h3>\n<li class=\"mobile-list-item\"><strong>GitLab Community Forum</strong>: https://forum.gitlab.com/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Community Discord</strong>: https://discord.com/invite/gitlab</li>\n<li class=\"mobile-list-item\"><strong>GitLab Reddit Community</strong>: https://www.reddit.com/r/gitlab/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Stack Overflow</strong>: https://stackoverflow.com/questions/tagged/gitlab</li>\n<h3 id=\"training-and-certification\" class=\"mobile-header\">Training and Certification</h3>\n<li class=\"mobile-list-item\"><strong>GitLab Learn</strong>: https://about.gitlab.com/learn/</li>\n<li class=\"mobile-list-item\"><strong>GitLab University</strong>: https://university.gitlab.com/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Certified Associate</strong>: https://about.gitlab.com/services/education/gitlab-certified-associate/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Professional Services</strong>: https://about.gitlab.com/services/</li>\n<h3 id=\"tools-and-utilities\" class=\"mobile-header\">Tools and Utilities</h3>\n<li class=\"mobile-list-item\"><strong>GitLab CLI (glab)</strong>: https://gitlab.com/gitlab-org/cli</li>\n<li class=\"mobile-list-item\"><strong>GitLab Terraform Provider</strong>: https://registry.terraform.io/providers/gitlabhq/gitlab/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Ansible Collection</strong>: https://galaxy.ansible.com/gitlab/gitlab</li>\n<li class=\"mobile-list-item\"><strong>GitLab Helm Chart</strong>: https://docs.gitlab.com/charts/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Docker Images</strong>: https://hub.docker.com/u/gitlab</li>\n<h3 id=\"security-resources\" class=\"mobile-header\">Security Resources</h3>\n<li class=\"mobile-list-item\"><strong>GitLab Security Team</strong>: https://about.gitlab.com/security/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Bug Bounty Program</strong>: https://about.gitlab.com/security/disclosure/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Security Advisories</strong>: https://about.gitlab.com/security/advisories/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Compliance</strong>: https://about.gitlab.com/compliance/</li>\n<h3 id=\"performance-and-scaling\" class=\"mobile-header\">Performance and Scaling</h3>\n<li class=\"mobile-list-item\"><strong>GitLab Reference Architectures</strong>: https://docs.gitlab.com/ee/administration/reference_architectures/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Performance Monitoring</strong>: https://docs.gitlab.com/ee/administration/monitoring/performance/</li>\n<li class=\"mobile-list-item\"><strong>GitLab Scaling and High Availability</strong>: https://docs.gitlab.com/ee/administration/high_availability/</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide covers native OS installations of GitLab across multiple platforms with enterprise-grade security, monitoring, and maintenance procedures. For specific enterprise features, consider GitLab Enterprise Edition. This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"39 min","wordCount":7746,"tableOfContents":[{"level":2,"text":"1. Introduction","id":"1-introduction"},{"level":3,"text":"FOSS Context","id":"foss-context"},{"level":3,"text":"Key Features","id":"key-features"},{"level":2,"text":"2. Prerequisites","id":"2-prerequisites"},{"level":3,"text":"10. System Requirements","id":"10-system-requirements"},{"level":3,"text":"Required Software Dependencies","id":"required-software-dependencies"},{"level":3,"text":"Network Requirements","id":"network-requirements"},{"level":3,"text":"Optional Components","id":"optional-components"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"4. Initial Configuration","id":"4-initial-configuration"},{"level":3,"text":"First-time Setup","id":"first-time-setup"},{"level":3,"text":"Basic Configuration File Setup","id":"basic-configuration-file-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"Service Control Commands","id":"service-control-commands"},{"level":3,"text":"Service Status Monitoring","id":"service-status-monitoring"},{"level":3,"text":"Systemd Integration","id":"systemd-integration"},{"level":3,"text":"Service Configuration","id":"service-configuration"},{"level":2,"text":"6. Advanced Configuration","id":"6-advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Enterprise Features Configuration","id":"enterprise-features-configuration"},{"level":3,"text":"Container Registry Configuration","id":"container-registry-configuration"},{"level":3,"text":"GitLab Pages Configuration","id":"gitlab-pages-configuration"},{"level":2,"text":"7. Reverse Proxy Setup","id":"7-reverse-proxy-setup"},{"level":3,"text":"NGINX Reverse Proxy","id":"nginx-reverse-proxy"},{"level":3,"text":"Apache HTTP Server (httpd)","id":"apache-http-server-httpd"},{"level":3,"text":"HAProxy Load Balancer","id":"haproxy-load-balancer"},{"level":2,"text":"8. Security Configuration","id":"8-security-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":3,"text":"Firewall Configuration","id":"firewall-configuration"},{"level":3,"text":"Access Control and Authentication","id":"access-control-and-authentication"},{"level":2,"text":"9. Database Setup","id":"9-database-setup"},{"level":3,"text":"Internal PostgreSQL (Default)","id":"internal-postgresql-default"},{"level":3,"text":"External PostgreSQL Setup","id":"external-postgresql-setup"},{"level":3,"text":"Database Maintenance","id":"database-maintenance"},{"level":2,"text":"10. Performance Optimization","id":"10-performance-optimization"},{"level":3,"text":"System-Level Optimizations","id":"system-level-optimizations"},{"level":3,"text":"Application Performance Tuning","id":"application-performance-tuning"},{"level":3,"text":"Storage Optimization","id":"storage-optimization"},{"level":3,"text":"Monitoring Performance","id":"monitoring-performance"},{"level":2,"text":"11. Monitoring","id":"11-monitoring"},{"level":3,"text":"Built-in Monitoring Stack","id":"built-in-monitoring-stack"},{"level":3,"text":"External Monitoring Integration","id":"external-monitoring-integration"},{"level":3,"text":"Log Management","id":"log-management"},{"level":3,"text":"Health Monitoring","id":"health-monitoring"},{"level":2,"text":"12. Backup and Restore","id":"12-backup-and-restore"},{"level":3,"text":"Automated Backup Strategy","id":"automated-backup-strategy"},{"level":3,"text":"Disaster Recovery Procedures","id":"disaster-recovery-procedures"},{"level":3,"text":"Point-in-Time Recovery","id":"point-in-time-recovery"},{"level":2,"text":"13. Troubleshooting","id":"13-troubleshooting"},{"level":3,"text":"Common Issues and Solutions","id":"common-issues-and-solutions"},{"level":3,"text":"Specific Problem Resolution","id":"specific-problem-resolution"},{"level":2,"text":"14. Integration Examples","id":"14-integration-examples"},{"level":3,"text":"CI/CD Pipeline Integration","id":"cicd-pipeline-integration"},{"level":3,"text":"External Service Integrations","id":"external-service-integrations"},{"level":2,"text":"15. Maintenance","id":"15-maintenance"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":2,"text":"16. Additional Resources","id":"16-additional-resources"},{"level":3,"text":"Documentation Links","id":"documentation-links"},{"level":3,"text":"Community Resources","id":"community-resources"},{"level":3,"text":"Training and Certification","id":"training-and-certification"},{"level":3,"text":"Tools and Utilities","id":"tools-and-utilities"},{"level":3,"text":"Security Resources","id":"security-resources"},{"level":3,"text":"Performance and Scaling","id":"performance-and-scaling"}],"lastBuilt":"2025-10-16T06:19:20.870Z","metadataVersion":"2.0"}]},"__N_SSG":true}