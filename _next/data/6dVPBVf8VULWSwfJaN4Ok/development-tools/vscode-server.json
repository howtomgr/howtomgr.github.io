{"pageProps":{"guide":{"name":"vscode-server","displayName":"VS Code Server Installation Guide","slug":"vscode-server","description":"VS Code Server (code-server) is a free and open-source implementation of Visual Studio Code running on a remote server, accessible through a web browser. As a FOSS alternative to Microsoft's proprietary VS Code Remote Development, it provides full IDE functionality without requiring local installations.","category":"development-tools","subcategory":"development-tools","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[8080,8443],"installationMethods":["native-packages","npm-install","binary-release"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["ide","development","remote-development","code-editor","vs-code"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"MIT","websiteUrl":"https://howtomgr.github.io/development-tools/vscode-server","documentationUrl":"https://howtomgr.github.io/development-tools/vscode-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vscode-server","updatedAt":"2025-09-16T18:01:43Z","createdAt":"2023-08-28T03:50:15Z","readmeRaw":"# VS Code Server Installation Guide\n\nVS Code Server (code-server) is a free and open-source implementation of Visual Studio Code running on a remote server, accessible through a web browser. Developed by Coder, it allows developers to use VS Code on any device with a consistent development environment. As a FOSS alternative to Microsoft's proprietary Visual Studio Code Remote Development, code-server provides full IDE functionality without requiring local installations\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores (4+ recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 10GB for workspace and extensions\n- **Operating System**: Linux, macOS, FreeBSD, or Windows\n- **Network Requirements**:\n  - Port 8080 (default code-server port)\n  - HTTPS recommended for production use\n- **Dependencies**:\n  - Node.js 16+ (for source installation)\n  - Git\n  - Build tools (for compiling native extensions)\n- **System Access**: root or sudo privileges required for system-wide installation\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install using official installer script\ncurl -fsSL https://code-server.dev/install.sh | sh\n\n# Or install from release tarball\nwget https://github.com/coder/code-server/releases/download/v4.19.0/code-server-4.19.0-linux-amd64.tar.gz\ntar -xzf code-server-4.19.0-linux-amd64.tar.gz\nsudo mv code-server-4.19.0-linux-amd64 /opt/code-server\nsudo ln -s /opt/code-server/bin/code-server /usr/local/bin/code-server\n\n# Create systemd service\nsudo tee /etc/systemd/system/code-server@.service > /dev/null <<EOF\n[Unit]\nDescription=code-server\nAfter=network.target\n\n[Service]\nType=exec\nExecStart=/usr/local/bin/code-server --bind-addr 0.0.0.0:8080\nRestart=always\nUser=%i\n\n[Install]\nWantedBy=default.target\nEOF\n\n# Enable and start service\nsudo systemctl enable --now code-server@$USER\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncode-server --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install using official installer script\ncurl -fsSL https://code-server.dev/install.sh | sh\n\n# Or install using deb package\nwget https://github.com/coder/code-server/releases/download/v4.19.0/code-server_4.19.0_amd64.deb\nsudo dpkg -i code-server_4.19.0_amd64.deb\n\n# Enable and start service\nsudo systemctl enable --now code-server@$USER\n\n# Configure firewall\nsudo ufw allow 8080/tcp\n\n# Verify installation\ncode-server --version\n```\n\n### Arch Linux\n\n```bash\n# Install from AUR\nyay -S code-server\n\n# Or install from AUR (alternative)\nparu -S code-server\n\n# Enable and start service\nsudo systemctl enable --now code-server@$USER\n\n# Verify installation\ncode-server --version\n```\n\n### Alpine Linux\n\n```bash\n# Install dependencies\napk add --no-cache nodejs npm python3 make g++\n\n# Install using npm\nnpm install -g code-server\n\n# Create OpenRC service\nsudo tee /etc/init.d/code-server > /dev/null <<'EOF'\n#!/sbin/openrc-run\n\nname=\"code-server\"\ndescription=\"VS Code Server\"\n\ncommand=\"/usr/bin/code-server\"\ncommand_args=\"--bind-addr 0.0.0.0:8080\"\ncommand_user=\"${USER:-root}\"\npidfile=\"/run/${RC_SVCNAME}.pid\"\ncommand_background=\"yes\"\n\ndepend() {\n    need net\n    after firewall\n}\nEOF\n\nsudo chmod +x /etc/init.d/code-server\n\n# Enable and start service\nrc-update add code-server default\nrc-service code-server start\n\n# Verify installation\ncode-server --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dependencies\nsudo zypper install -y nodejs npm python3 make gcc-c++\n\n# Install using npm\nsudo npm install -g code-server\n\n# Create systemd service\nsudo tee /etc/systemd/system/code-server@.service > /dev/null <<EOF\n[Unit]\nDescription=code-server\nAfter=network.target\n\n[Service]\nType=exec\nExecStart=/usr/bin/code-server --bind-addr 0.0.0.0:8080\nRestart=always\nUser=%i\n\n[Install]\nWantedBy=default.target\nEOF\n\n# Enable and start service\nsudo systemctl enable --now code-server@$USER\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncode-server --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install code-server\n\n# Start service\nbrew services start code-server\n\n# Or run manually\ncode-server --bind-addr 0.0.0.0:8080\n\n# Verify installation\ncode-server --version\n```\n\n### FreeBSD\n\n```bash\n# Install dependencies\npkg install -y node npm python\n\n# Install using npm\nnpm install -g code-server\n\n# Create rc.d script\nsudo tee /usr/local/etc/rc.d/code-server > /dev/null <<'EOF'\n#!/bin/sh\n\n# PROVIDE: code-server\n# REQUIRE: NETWORKING\n# KEYWORD: shutdown\n\n. /etc/rc.subr\n\nname=\"code_server\"\nrcvar=\"code_server_enable\"\n\nload_rc_config $name\n\n: ${code_server_enable:=\"NO\"}\n: ${code_server_user:=\"www\"}\n: ${code_server_bind:=\"0.0.0.0:8080\"}\n\ncommand=\"/usr/local/bin/code-server\"\ncommand_args=\"--bind-addr ${code_server_bind}\"\n\nrun_rc_command \"$1\"\nEOF\n\nsudo chmod +x /usr/local/etc/rc.d/code-server\n\n# Enable in rc.conf\necho 'code_server_enable=\"YES\"' | sudo tee -a /etc/rc.conf\n\n# Start service\nservice code-server start\n\n# Verify installation\ncode-server --version\n```\n\n### Windows\n\n```bash\n# Using npm (with Node.js installed)\nnpm install -g code-server\n\n# Or download Windows release\n# Download from: https://github.com/coder/code-server/releases\n# Extract and add to PATH\n\n# Run code-server\ncode-server --bind-addr 0.0.0.0:8080\n\n# Install as Windows service using NSSM\n# Download NSSM from: https://nssm.cc/download\nnssm install code-server \"C:\\Program Files\\code-server\\bin\\code-server.exe\" \"--bind-addr 0.0.0.0:8080\"\nnssm start code-server\n\n# Verify installation\ncode-server --version\n```\n\n## 4. Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nmkdir -p ~/.config/code-server\n\n# Create configuration file\ncat > ~/.config/code-server/config.yaml <<EOF\nbind-addr: 0.0.0.0:8080\nauth: password\npassword: your-secure-password-here\ncert: false\nEOF\n\n# For HTTPS (recommended for production)\ncat > ~/.config/code-server/config.yaml <<EOF\nbind-addr: 0.0.0.0:8443\nauth: password\npassword: your-secure-password-here\ncert: true\ncert-key: /path/to/privkey.pem\ncert-file: /path/to/fullchain.pem\nEOF\n\n# Test configuration\ncode-server --config ~/.config/code-server/config.yaml\n```\n\n### Environment Variables\n\n```bash\n# Set environment variables\nexport PASSWORD=\"your-secure-password\"\nexport HASHED_PASSWORD='$argon2i$v=19$m=4096,t=3,p=1$...' # Use --hashed-password\nexport CODE_SERVER_CONFIG=\"~/.config/code-server/config.yaml\"\n\n# Generate hashed password\necho -n \"your-password\" | npx argon2-cli -e\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable code-server\n\n# Start service\nsudo systemctl start code-server\n\n# Stop service\nsudo systemctl stop code-server\n\n# Restart service\nsudo systemctl restart code-server\n\n# Check status\nsudo systemctl status code-server\n\n# View logs\nsudo journalctl -u code-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add code-server default\n\n# Start service\nrc-service code-server start\n\n# Stop service\nrc-service code-server stop\n\n# Restart service\nrc-service code-server restart\n\n# Check status\nrc-service code-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'code-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice code-server start\n\n# Stop service\nservice code-server stop\n\n# Restart service\nservice code-server restart\n\n# Check status\nservice code-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start code_server\nbrew services stop code_server\nbrew services restart code_server\n\n# Check status\nbrew services list | grep code_server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start code-server\n\n# Stop service\nnet stop code-server\n\n# Using PowerShell\nStart-Service code-server\nStop-Service code-server\nRestart-Service code-server\n\n# Check status\nGet-Service code-server\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream code_server_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name code_server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name code_server.example.com;\n\n    ssl_certificate /etc/ssl/certs/code_server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/code_server.example.com.key;\n\n    location / {\n        proxy_pass http://code_server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName code_server.example.com\n    Redirect permanent / https://code_server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName code_server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/code_server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/code_server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend code_server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/code_server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend code_server_backend\n\nbackend code_server_backend\n    balance roundrobin\n    server code_server1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R code_server:code_server /etc/code_server\nsudo chmod 750 /etc/code_server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status code-server\n\n# View logs\nsudo journalctl -u code-server -f\n\n# Monitor resource usage\ntop -p $(pgrep code_server)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/code_server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/code_server-backup-$DATE.tar.gz\" /etc/code_server /var/lib/code_server\n\necho \"Backup completed: $BACKUP_DIR/code_server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop code-server\n\n# Restore from backup\ntar -xzf /backup/code_server/code_server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start code-server\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u code-server -n 100\nsudo tail -f /var/log/code_server/code_server.log\n\n# Check configuration\ncode-server --version\n\n# Check permissions\nls -la /etc/code_server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep code_server)\n\n# Check disk I/O\niotop -p $(pgrep code_server)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  code_server:\n    image: code_server:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/code_server\n      - ./data:/var/lib/code_server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update code_server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade code_server\n\n# Arch Linux\nsudo pacman -Syu code_server\n\n# Alpine Linux\napk update && apk upgrade code_server\n\n# openSUSE\nsudo zypper update code_server\n\n# FreeBSD\npkg update && pkg upgrade code_server\n\n# Always backup before updates\ntar -czf /backup/code_server-pre-update-$(date +%Y%m%d).tar.gz /etc/code_server\n\n# Restart after updates\nsudo systemctl restart code-server\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/code_server\n\n# Clean old logs\nfind /var/log/code_server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/code_server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.code_server.org/\n- GitHub Repository: https://github.com/code_server/code_server\n- Community Forum: https://forum.code_server.org/\n- Best Practices Guide: https://docs.code_server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">VS Code Server (code-server) is a free and open-source implementation of Visual Studio Code running on a remote server, accessible through a web browser. Developed by Coder, it allows developers to use VS Code on any device with a consistent development environment. As a FOSS alternative to Microsoft's proprietary Visual Studio Code Remote Development, code-server provides full IDE functionality without requiring local installations</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores (4+ recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB for workspace and extensions</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux, macOS, FreeBSD, or Windows</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default code-server port)</li>\n<li class=\"mobile-list-item\">HTTPS recommended for production use</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Node.js 16+ (for source installation)</li>\n<li class=\"mobile-list-item\">Git</li>\n<li class=\"mobile-list-item\">Build tools (for compiling native extensions)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required for system-wide installation</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install using official installer script\ncurl -fsSL https://code-server.dev/install.sh | sh\n\n# Or install from release tarball\nwget https://github.com/coder/code-server/releases/download/v4.19.0/code-server-4.19.0-linux-amd64.tar.gz\ntar -xzf code-server-4.19.0-linux-amd64.tar.gz\nsudo mv code-server-4.19.0-linux-amd64 /opt/code-server\nsudo ln -s /opt/code-server/bin/code-server /usr/local/bin/code-server\n\n# Create systemd service\nsudo tee /etc/systemd/system/code-server@.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=code-server\nAfter=network.target\n\n[Service]\nType=exec\nExecStart=/usr/local/bin/code-server --bind-addr 0.0.0.0:8080\nRestart=always\nUser=%i\n\n[Install]\nWantedBy=default.target\nEOF\n\n# Enable and start service\nsudo systemctl enable --now code-server@$USER\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install using official installer script\ncurl -fsSL https://code-server.dev/install.sh | sh\n\n# Or install using deb package\nwget https://github.com/coder/code-server/releases/download/v4.19.0/code-server_4.19.0_amd64.deb\nsudo dpkg -i code-server_4.19.0_amd64.deb\n\n# Enable and start service\nsudo systemctl enable --now code-server@$USER\n\n# Configure firewall\nsudo ufw allow 8080/tcp\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR\nyay -S code-server\n\n# Or install from AUR (alternative)\nparu -S code-server\n\n# Enable and start service\nsudo systemctl enable --now code-server@$USER\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\napk add --no-cache nodejs npm python3 make g++\n\n# Install using npm\nnpm install -g code-server\n\n# Create OpenRC service\nsudo tee /etc/init.d/code-server &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/sbin/openrc-run\n\nname=&quot;code-server&quot;\ndescription=&quot;VS Code Server&quot;\n\ncommand=&quot;/usr/bin/code-server&quot;\ncommand_args=&quot;--bind-addr 0.0.0.0:8080&quot;\ncommand_user=&quot;${USER:-root}&quot;\npidfile=&quot;/run/${RC_SVCNAME}.pid&quot;\ncommand_background=&quot;yes&quot;\n\ndepend() {\n    need net\n    after firewall\n}\nEOF\n\nsudo chmod +x /etc/init.d/code-server\n\n# Enable and start service\nrc-update add code-server default\nrc-service code-server start\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo zypper install -y nodejs npm python3 make gcc-c++\n\n# Install using npm\nsudo npm install -g code-server\n\n# Create systemd service\nsudo tee /etc/systemd/system/code-server@.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=code-server\nAfter=network.target\n\n[Service]\nType=exec\nExecStart=/usr/bin/code-server --bind-addr 0.0.0.0:8080\nRestart=always\nUser=%i\n\n[Install]\nWantedBy=default.target\nEOF\n\n# Enable and start service\nsudo systemctl enable --now code-server@$USER\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install code-server\n\n# Start service\nbrew services start code-server\n\n# Or run manually\ncode-server --bind-addr 0.0.0.0:8080\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\npkg install -y node npm python\n\n# Install using npm\nnpm install -g code-server\n\n# Create rc.d script\nsudo tee /usr/local/etc/rc.d/code-server &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/sh\n\n# PROVIDE: code-server\n# REQUIRE: NETWORKING\n# KEYWORD: shutdown\n\n. /etc/rc.subr\n\nname=&quot;code_server&quot;\nrcvar=&quot;code_server_enable&quot;\n\nload_rc_config $name\n\n: ${code_server_enable:=&quot;NO&quot;}\n: ${code_server_user:=&quot;www&quot;}\n: ${code_server_bind:=&quot;0.0.0.0:8080&quot;}\n\ncommand=&quot;/usr/local/bin/code-server&quot;\ncommand_args=&quot;--bind-addr ${code_server_bind}&quot;\n\nrun_rc_command &quot;$1&quot;\nEOF\n\nsudo chmod +x /usr/local/etc/rc.d/code-server\n\n# Enable in rc.conf\necho &#039;code_server_enable=&quot;YES&quot;&#039; | sudo tee -a /etc/rc.conf\n\n# Start service\nservice code-server start\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using npm (with Node.js installed)\nnpm install -g code-server\n\n# Or download Windows release\n# Download from: https://github.com/coder/code-server/releases\n# Extract and add to PATH\n\n# Run code-server\ncode-server --bind-addr 0.0.0.0:8080\n\n# Install as Windows service using NSSM\n# Download NSSM from: https://nssm.cc/download\nnssm install code-server &quot;C:\\Program Files\\code-server\\bin\\code-server.exe&quot; &quot;--bind-addr 0.0.0.0:8080&quot;\nnssm start code-server\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nmkdir -p ~/.config/code-server\n\n# Create configuration file\ncat &gt; ~/.config/code-server/config.yaml &lt;&lt;EOF\nbind-addr: 0.0.0.0:8080\nauth: password\npassword: your-secure-password-here\ncert: false\nEOF\n\n# For HTTPS (recommended for production)\ncat &gt; ~/.config/code-server/config.yaml &lt;&lt;EOF\nbind-addr: 0.0.0.0:8443\nauth: password\npassword: your-secure-password-here\ncert: true\ncert-key: /path/to/privkey.pem\ncert-file: /path/to/fullchain.pem\nEOF\n\n# Test configuration\ncode-server --config ~/.config/code-server/config.yaml</code></pre>\n      </div>\n    </div>\n<h3 id=\"environment-variables\" class=\"mobile-header\">Environment Variables</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set environment variables\nexport PASSWORD=&quot;your-secure-password&quot;\nexport HASHED_PASSWORD=&#039;$argon2i$v=19$m=4096,t=3,p=1$...&#039; # Use --hashed-password\nexport CODE_SERVER_CONFIG=&quot;~/.config/code-server/config.yaml&quot;\n\n# Generate hashed password\necho -n &quot;your-password&quot; | npx argon2-cli -e</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable code-server\n\n# Start service\nsudo systemctl start code-server\n\n# Stop service\nsudo systemctl stop code-server\n\n# Restart service\nsudo systemctl restart code-server\n\n# Check status\nsudo systemctl status code-server\n\n# View logs\nsudo journalctl -u code-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add code-server default\n\n# Start service\nrc-service code-server start\n\n# Stop service\nrc-service code-server stop\n\n# Restart service\nrc-service code-server restart\n\n# Check status\nrc-service code-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;code-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice code-server start\n\n# Stop service\nservice code-server stop\n\n# Restart service\nservice code-server restart\n\n# Check status\nservice code-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start code_server\nbrew services stop code_server\nbrew services restart code_server\n\n# Check status\nbrew services list | grep code_server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start code-server\n\n# Stop service\nnet stop code-server\n\n# Using PowerShell\nStart-Service code-server\nStop-Service code-server\nRestart-Service code-server\n\n# Check status\nGet-Service code-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream code_server_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name code_server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name code_server.example.com;\n\n    ssl_certificate /etc/ssl/certs/code_server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/code_server.example.com.key;\n\n    location / {\n        proxy_pass http://code_server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName code_server.example.com\n    Redirect permanent / https://code_server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName code_server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/code_server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/code_server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend code_server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/code_server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend code_server_backend\n\nbackend code_server_backend\n    balance roundrobin\n    server code_server1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R code_server:code_server /etc/code_server\nsudo chmod 750 /etc/code_server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status code-server\n\n# View logs\nsudo journalctl -u code-server -f\n\n# Monitor resource usage\ntop -p $(pgrep code_server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/code_server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/code_server-backup-$DATE.tar.gz&quot; /etc/code_server /var/lib/code_server\n\necho &quot;Backup completed: $BACKUP_DIR/code_server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop code-server\n\n# Restore from backup\ntar -xzf /backup/code_server/code_server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start code-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u code-server -n 100\nsudo tail -f /var/log/code_server/code_server.log\n\n# Check configuration\ncode-server --version\n\n# Check permissions\nls -la /etc/code_server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep code_server)\n\n# Check disk I/O\niotop -p $(pgrep code_server)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  code_server:\n    image: code_server:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/code_server\n      - ./data:/var/lib/code_server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update code_server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade code_server\n\n# Arch Linux\nsudo pacman -Syu code_server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade code_server\n\n# openSUSE\nsudo zypper update code_server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade code_server\n\n# Always backup before updates\ntar -czf /backup/code_server-pre-update-$(date +%Y%m%d).tar.gz /etc/code_server\n\n# Restart after updates\nsudo systemctl restart code-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/code_server\n\n# Clean old logs\nfind /var/log/code_server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/code_server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.code_server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/code_server/code_server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.code_server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.code_server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"9 min","wordCount":1618,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Environment Variables","id":"environment-variables"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-25T18:13:11.024Z","metadataVersion":"2.0"},"category":{"key":"development-tools","name":"Development tools","description":"Development tools tools and applications","icon":"💻","color":"#8be9fd"},"relatedGuides":[{"name":"astro","displayName":"Astro Installation Guide","slug":"astro","description":"Astro is a free and open-source all-in-one web framework for building fast, content-focused websites. It serves as a FOSS alternative to static site generators like Gatsby or Next.js, offering Islands architecture, zero JavaScript by default, and support for multiple UI frameworks including React, Vue, and Svelte in the same project.","category":"development-tools","subcategory":"static-site-generators","difficultyLevel":"intermediate","estimatedSetupTime":"10-20 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","fedora","macos","windows"],"defaultPorts":[4321,3000],"installationMethods":["npm-create","manual-setup","starter-templates"],"features":["multi-os-support","islands-architecture","zero-javascript-default","multi-framework","content-collections","image-optimization","markdown-mdx-support","partial-hydration","edge-deployment","view-transitions","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["static-site-generator","islands","partial-hydration","content-focused","multi-framework","performance","ssg","ssr","jamstack"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"MIT","websiteUrl":"https://howtomgr.github.io/development-tools/astro","documentationUrl":"https://howtomgr.github.io/development-tools/astro","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/astro","updatedAt":"2025-09-16T16:58:24Z","createdAt":"2025-09-16T10:08:12Z","readmeRaw":"# Astro Installation Guide\n\nAstro is a free and open-source all-in-one web framework for building fast, content-focused websites. It serves as a FOSS alternative to static site generators like Gatsby, Next.js static export, or Hugo, offering innovative features like Islands architecture, zero JavaScript by default, and first-class support for multiple UI frameworks including React, Vue, Svelte, and more - all in the same project.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n### Hardware Requirements\n- **CPU**: Modern processor (1+ cores)\n- **RAM**: 512MB minimum (2GB+ recommended)\n- **Storage**: 250MB for Astro and dependencies\n- **Network**: Internet connection for package installation\n\n### Software Requirements\n- **Node.js**: 18.14.1+ or 20.3.0+\n- **Package Manager**: npm, yarn, or pnpm\n- **Text Editor**: VS Code recommended with Astro extension\n- **Optional**: Git for version control\n\n### Network Requirements\n- **HTTPS**: Access to npm registry\n- **Ports**: \n  - 4321: Default dev server port\n  - 3000: Common alternative port\n\n## 2. Supported Operating Systems\n\nAstro officially supports:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS\n- Arch Linux\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- Fedora 38+\n- macOS 10.15+ (Catalina and later)\n- Windows 10/11\n\n## 3. Installation\n\n### Method 1: Create New Project (Recommended)\n\n#### Using npm\n```bash\n# Create new Astro project\nnpm create astro@latest\n\n# Follow the prompts:\n# - Where should we create your new project? ./my-astro-site\n# - How would you like to start your new project? (Choose template)\n# - Install dependencies? Yes\n# - TypeScript? Yes (Recommended)\n# - How strict? Strict\n\n# Navigate to project\ncd my-astro-site\n\n# Start development server\nnpm run dev\n```\n\n#### Using yarn\n```bash\n# Create new Astro project\nyarn create astro\n\n# Navigate and start\ncd my-astro-site\nyarn\nyarn dev\n```\n\n#### Using pnpm\n```bash\n# Create new Astro project\npnpm create astro@latest\n\n# Navigate and start\ncd my-astro-site\npnpm install\npnpm dev\n```\n\n### Method 2: Manual Installation\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install Node.js\ncurl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -\nsudo dnf install -y nodejs\n\n# Create project directory\nmkdir my-astro-site && cd my-astro-site\n\n# Initialize package.json\nnpm init -y\n\n# Install Astro\nnpm install astro\n\n# Create Astro config\ncat > astro.config.mjs << 'EOF'\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  // Configuration options\n});\nEOF\n\n# Create source directory structure\nmkdir -p src/pages src/components src/layouts\n```\n\n#### Debian/Ubuntu\n```bash\n# Install Node.js\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Install pnpm (recommended for Astro)\nnpm install -g pnpm\n\n# Create Astro project\npnpm create astro@latest my-astro-site\ncd my-astro-site\npnpm dev\n```\n\n#### Arch Linux\n```bash\n# Install Node.js and pnpm\nsudo pacman -S nodejs npm pnpm\n\n# Create Astro project\npnpm create astro@latest my-astro-site\ncd my-astro-site\npnpm dev\n```\n\n#### Alpine Linux\n```bash\n# Install Node.js and npm\napk add --no-cache nodejs npm\n\n# Install pnpm globally\nnpm install -g pnpm\n\n# Create Astro project\npnpm create astro@latest\ncd my-astro-site\npnpm install\npnpm dev\n```\n\n#### openSUSE\n```bash\n# Install Node.js\nsudo zypper install -y nodejs20 npm20\n\n# Create Astro project\nnpm create astro@latest\ncd my-astro-site\nnpm install\nnpm run dev\n```\n\n#### macOS\n```bash\n# Using Homebrew\nbrew install node\n\n# Install pnpm\nbrew install pnpm\n\n# Create Astro project\npnpm create astro@latest\ncd my-astro-site\npnpm dev\n```\n\n#### Windows\n```powershell\n# Using winget\nwinget install OpenJS.NodeJS\n\n# Or using Chocolatey\nchoco install nodejs\n\n# Create Astro project\nnpm create astro@latest\ncd my-astro-site\nnpm run dev\n```\n\n### Method 3: Clone Starter Templates\n\n```bash\n# Official Blog template\ngit clone https://github.com/withastro/astro/tree/main/examples/blog my-blog\ncd my-blog\nnpm install\nnpm run dev\n\n# Portfolio template\ngit clone https://github.com/withastro/astro/tree/main/examples/portfolio my-portfolio\n\n# Documentation template\ngit clone https://github.com/withastro/astro/tree/main/examples/docs my-docs\n\n# E-commerce template\ngit clone https://github.com/withastro/astro/tree/main/examples/ecommerce my-shop\n```\n\n## 4. Configuration\n\n### Basic Configuration\n\nCreate `astro.config.mjs`:\n```javascript\nimport { defineConfig } from 'astro/config';\nimport react from '@astrojs/react';\nimport tailwind from '@astrojs/tailwind';\nimport mdx from '@astrojs/mdx';\nimport sitemap from '@astrojs/sitemap';\n\nexport default defineConfig({\n  // Site URL (required for sitemap)\n  site: 'https://example.com',\n  \n  // Base path for GitHub Pages\n  base: '/my-repo',\n  \n  // Output mode\n  output: 'static', // 'static' | 'server' | 'hybrid'\n  \n  // Integrations\n  integrations: [\n    react(),\n    tailwind(),\n    mdx(),\n    sitemap()\n  ],\n  \n  // Server options\n  server: {\n    port: 3000,\n    host: true\n  },\n  \n  // Build options\n  build: {\n    format: 'directory', // 'file' | 'directory'\n    assets: '_astro'\n  },\n  \n  // Markdown options\n  markdown: {\n    shikiConfig: {\n      theme: 'dracula',\n      wrap: true\n    }\n  },\n  \n  // Vite configuration\n  vite: {\n    optimizeDeps: {\n      exclude: ['@astrojs/lit']\n    }\n  }\n});\n```\n\n### TypeScript Configuration\n\nCreate `tsconfig.json`:\n```json\n{\n  \"extends\": \"astro/tsconfigs/strict\",\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"],\n      \"@components/*\": [\"src/components/*\"],\n      \"@layouts/*\": [\"src/layouts/*\"],\n      \"@assets/*\": [\"src/assets/*\"]\n    }\n  }\n}\n```\n\n### Environment Variables\n\nCreate `.env`:\n```bash\n# Public variables (exposed to client)\nPUBLIC_API_URL=https://api.example.com\nPUBLIC_SITE_NAME=\"My Astro Site\"\n\n# Private variables (server-side only)\nDATABASE_URL=postgresql://user:pass@localhost:5432/db\nAPI_SECRET=your-secret-key\n```\n\nAccess in Astro:\n```javascript\n// In .astro files\nconst apiUrl = import.meta.env.PUBLIC_API_URL;\nconst dbUrl = import.meta.env.DATABASE_URL; // Server-side only\n\n// In client-side scripts\nconsole.log(import.meta.env.PUBLIC_API_URL); // Works\nconsole.log(import.meta.env.DATABASE_URL); // undefined\n```\n\n### Content Collections\n\nCreate `src/content/config.ts`:\n```typescript\nimport { z, defineCollection } from 'astro:content';\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    publishDate: z.date(),\n    author: z.string(),\n    tags: z.array(z.string()).optional(),\n    image: z.string().optional(),\n    draft: z.boolean().default(false)\n  })\n});\n\nconst authorsCollection = defineCollection({\n  type: 'data',\n  schema: z.object({\n    name: z.string(),\n    bio: z.string(),\n    avatar: z.string(),\n    social: z.object({\n      twitter: z.string().optional(),\n      github: z.string().optional()\n    })\n  })\n});\n\nexport const collections = {\n  blog: blogCollection,\n  authors: authorsCollection\n};\n```\n\n## 5. Service Management\n\n### Development Server\n\n```bash\n# Start development server\nnpm run dev\nastro dev\n\n# Start with custom host/port\nastro dev --host 0.0.0.0 --port 3000\n\n# Start with verbose logging\nastro dev --verbose\n\n# Expose to network\nastro dev --host\n\n# Enable experimental features\nnpm run dev -- --experimental-integrations\n```\n\n### Production Build\n\n```bash\n# Build static site\nnpm run build\nastro build\n\n# Preview production build\nnpm run preview\nastro preview --port 8080\n\n# Check for issues\nastro check\n\n# Build with verbose output\nastro build --verbose\n```\n\n### Server-Side Rendering (SSR) Deployment\n\n#### Node.js Adapter\n```bash\n# Install Node adapter\nnpm install @astrojs/node\n\n# Configure in astro.config.mjs\nimport node from '@astrojs/node';\n\nexport default defineConfig({\n  output: 'server',\n  adapter: node({\n    mode: 'standalone'\n  })\n});\n\n# Build and run\nnpm run build\nnode ./dist/server/entry.mjs\n```\n\n#### Systemd Service\nCreate `/etc/systemd/system/astro-app.service`:\n```ini\n[Unit]\nDescription=Astro SSR Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=astro\nGroup=astro\nWorkingDirectory=/opt/astro-app\nExecStart=/usr/bin/node /opt/astro-app/dist/server/entry.mjs\nRestart=always\nRestartSec=3\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\nEnvironment=HOST=0.0.0.0\n\n[Install]\nWantedBy=multi-user.target\n```\n\n### Docker Deployment\n\n```dockerfile\n# Multi-stage build\nFROM node:20-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Static hosting\nFROM nginx:alpine AS static\nCOPY --from=builder /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n# SSR hosting\nFROM node:20-alpine AS ssr\nWORKDIR /app\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/package*.json ./\nRUN npm ci --production\nEXPOSE 3000\nCMD [\"node\", \"./dist/server/entry.mjs\"]\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Build failures**:\n```bash\n# Clear cache\nrm -rf .astro node_modules/.vite\n\n# Reinstall dependencies\nrm -rf node_modules package-lock.json\nnpm install\n\n# Check TypeScript errors\nnpx astro check\n\n# Increase memory for large sites\nNODE_OPTIONS=\"--max-old-space-size=4096\" npm run build\n```\n\n2. **404 errors in development**:\n```bash\n# Check file extensions\n# Astro requires .astro extension for pages\n\n# Verify routing\nnpx astro info\n\n# Check for conflicting routes\nfind src/pages -name \"*.astro\" | sort\n```\n\n3. **Integration conflicts**:\n```javascript\n// Fix order of integrations\nexport default defineConfig({\n  integrations: [\n    // Order matters for some integrations\n    mdx(),      // Should come before others that process markdown\n    react(),\n    tailwind()\n  ]\n});\n```\n\n4. **Image optimization issues**:\n```bash\n# Install sharp for better image processing\nnpm install sharp\n\n# Clear image cache\nrm -rf node_modules/.astro\n\n# Use explicit dimensions\n<Image src={myImage} width={800} height={600} alt=\"Description\" />\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\nDEBUG=astro:* npm run dev\n\n# Specific debug namespaces\nDEBUG=astro:build npm run build\nDEBUG=astro:assets npm run dev\nDEBUG=vite:* npm run dev\n\n# Verbose build output\nastro build --verbose\n```\n\n## 7. Security Considerations\n\n### Content Security Policy\n\n```javascript\n// astro.config.mjs\nexport default defineConfig({\n  integrations: [\n    {\n      name: 'csp-headers',\n      hooks: {\n        'astro:server:setup': ({ server }) => {\n          server.middlewares.use((req, res, next) => {\n            res.setHeader(\n              'Content-Security-Policy',\n              \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';\"\n            );\n            next();\n          });\n        }\n      }\n    }\n  ]\n});\n```\n\n### Environment Security\n\n```bash\n# Never commit .env with secrets\necho \".env\" >> .gitignore\necho \".env.local\" >> .gitignore\necho \".env.production\" >> .gitignore\n\n# Use environment-specific files\n.env.development     # Development variables\n.env.production      # Production variables\n.env.local          # Local overrides (gitignored)\n```\n\n### Build Security\n\n```javascript\n// Remove console logs in production\nexport default defineConfig({\n  vite: {\n    build: {\n      terserOptions: {\n        compress: {\n          drop_console: true,\n          drop_debugger: true\n        }\n      }\n    }\n  }\n});\n```\n\n## 8. Performance Tuning\n\n### Build Optimization\n\n```javascript\nexport default defineConfig({\n  build: {\n    // Inline small CSS\n    inlineStylesheets: 'auto',\n    \n    // Split vendor chunks\n    splitting: true,\n    \n    // Exclude large dependencies\n    excludeMiddleware: false\n  },\n  \n  // Compress output\n  compressHTML: true,\n  \n  // Optimize images\n  image: {\n    service: 'sharp',\n    config: {\n      limitInputPixels: false\n    }\n  },\n  \n  // Prefetch links\n  prefetch: {\n    defaultStrategy: 'viewport',\n    prefetchAll: true\n  }\n});\n```\n\n### Component Islands Optimization\n\n```astro\n---\n// Only hydrate when visible\n---\n<InteractiveComponent client:visible />\n\n<!-- Load JavaScript when idle -->\n<HeavyComponent client:idle />\n\n<!-- Load on media query -->\n<MobileComponent client:media=\"(max-width: 768px)\" />\n\n<!-- Never hydrate (static only) -->\n<StaticComponent />\n```\n\n### Caching Strategy\n\n```javascript\n// Service worker for offline support\nexport default defineConfig({\n  integrations: [\n    {\n      name: 'service-worker',\n      hooks: {\n        'astro:build:done': async ({ dir }) => {\n          // Generate service worker\n        }\n      }\n    }\n  ]\n});\n```\n\n## 9. Backup and Restore\n\n### Project Backup\n\n```bash\n#!/bin/bash\n# backup-astro-project.sh\n\nPROJECT_DIR=\"/opt/astro-app\"\nBACKUP_DIR=\"/var/backups/astro\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup source files\ntar -czf $BACKUP_DIR/astro_source_$DATE.tar.gz \\\n    -C $PROJECT_DIR \\\n    --exclude='node_modules' \\\n    --exclude='dist' \\\n    --exclude='.astro' \\\n    .\n\n# Backup built site\nif [ -d \"$PROJECT_DIR/dist\" ]; then\n    tar -czf $BACKUP_DIR/astro_dist_$DATE.tar.gz -C $PROJECT_DIR/dist .\nfi\n\n# Backup content\ntar -czf $BACKUP_DIR/astro_content_$DATE.tar.gz -C $PROJECT_DIR/src/content .\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Content Migration\n\n```bash\n# Export content to JSON\ncat > export-content.js << 'EOF'\nimport { getCollection } from 'astro:content';\nimport fs from 'fs/promises';\n\nconst blog = await getCollection('blog');\nawait fs.writeFile(\n  'blog-export.json',\n  JSON.stringify(blog, null, 2)\n);\nEOF\n\nnode export-content.js\n```\n\n## 10. System Requirements\n\n### Minimum Requirements\n- **CPU**: 1 core\n- **RAM**: 512MB\n- **Storage**: 250MB\n- **Node.js**: 18.14.1+\n\n### Recommended Requirements\n- **CPU**: 2+ cores\n- **RAM**: 2GB+\n- **Storage**: 1GB+ SSD\n- **Node.js**: 20+ LTS\n\n### Large Site Requirements\n- **CPU**: 4+ cores\n- **RAM**: 8GB+\n- **Storage**: 10GB+ NVMe\n- **Build Cache**: 2GB+\n\n## 11. Support\n\n### Official Resources\n- **Website**: https://astro.build\n- **GitHub**: https://github.com/withastro/astro\n- **Documentation**: https://docs.astro.build\n- **Discord**: https://astro.build/chat\n\n### Community Support\n- **Discord Server**: Very active community\n- **GitHub Discussions**: https://github.com/withastro/astro/discussions\n- **Stack Overflow**: [astro] tag\n- **Twitter/X**: @astrodotbuild\n\n## 12. Contributing\n\n### How to Contribute\n1. Fork the repository on GitHub\n2. Create a feature branch\n3. Submit pull request\n4. Follow TypeScript coding standards\n5. Include tests and changeset\n\n### Development Setup\n```bash\n# Clone repository\ngit clone https://github.com/withastro/astro.git\ncd astro\n\n# Install dependencies\npnpm install\n\n# Build packages\npnpm build\n\n# Run tests\npnpm test\n\n# Create changeset\npnpm changeset\n```\n\n## 13. License\n\nAstro is licensed under the MIT License.\n\nKey points:\n- Free to use, modify, and distribute\n- Commercial use allowed\n- No warranty provided\n- Attribution required\n\n## 14. Acknowledgments\n\n### Credits\n- **Fred K. Schott**: Creator and lead developer\n- **Astro Technology Company**: Core team\n- **Contributors**: 500+ contributors\n- **Sponsors**: GitHub sponsors and corporate backers\n\n## 15. Version History\n\n### Recent Releases\n- **v4.x**: View Transitions API, Content Layer API\n- **v3.x**: Image optimization, improved performance\n- **v2.x**: Content Collections, Hybrid rendering\n\n### Major Features by Version\n- **v4.0**: Faster builds, Dev toolbar, i18n routing\n- **v3.0**: View transitions, Image component\n- **v2.0**: Content collections, Error overlays\n\n## 16. Appendices\n\n### A. Basic Site Example\n\n```astro\n---\n// src/pages/index.astro\nimport Layout from '../layouts/Layout.astro';\nimport Card from '../components/Card.astro';\n\nconst posts = await Astro.glob('../content/blog/*.md');\n---\n\n<Layout title=\"Welcome to Astro\">\n  <main>\n    <h1>Welcome to <span class=\"text-gradient\">Astro</span></h1>\n    \n    <ul role=\"list\" class=\"link-card-grid\">\n      {posts.map((post) => (\n        <Card\n          href={post.url}\n          title={post.frontmatter.title}\n          body={post.frontmatter.description}\n        />\n      ))}\n    </ul>\n  </main>\n</Layout>\n\n<style>\n  .text-gradient {\n    background-image: linear-gradient(45deg, #4f39fa, #da62c4);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n</style>\n```\n\n### B. API Routes Example\n\n```javascript\n// src/pages/api/posts.json.js\nexport async function GET() {\n  const posts = await getCollection('blog');\n  \n  return new Response(\n    JSON.stringify(posts),\n    {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n}\n\n// src/pages/api/contact.js\nexport async function POST({ request }) {\n  const data = await request.json();\n  \n  // Process form submission\n  await sendEmail(data);\n  \n  return new Response(JSON.stringify({ success: true }), {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n```\n\n### C. Multi-Framework Example\n\n```astro\n---\n// Using multiple frameworks in one page\nimport ReactCounter from '../components/Counter.jsx';\nimport VueAlert from '../components/Alert.vue';\nimport SvelteTimer from '../components/Timer.svelte';\n---\n\n<Layout>\n  <h1>Multi-Framework Demo</h1>\n  \n  <!-- React component -->\n  <ReactCounter client:load />\n  \n  <!-- Vue component -->\n  <VueAlert message=\"Hello from Vue!\" client:visible />\n  \n  <!-- Svelte component -->\n  <SvelteTimer client:idle />\n</Layout>\n```\n\n### D. Deployment Scripts\n\n```bash\n#!/bin/bash\n# deploy.sh\n\n# Build site\nnpm run build\n\n# Deploy to Netlify\nnetlify deploy --prod --dir=dist\n\n# Deploy to Vercel\nvercel --prod\n\n# Deploy to GitHub Pages\nnpm run build -- --base=/repo-name\ngh-pages -d dist\n\n# Deploy to S3\naws s3 sync dist/ s3://my-bucket --delete\naws cloudfront create-invalidation --distribution-id ABCD --paths \"/*\"\n```\n\n---\n\nFor more information and updates, visit https://github.com/howtomgr/astro","readmeHtml":"<p class=\"mobile-paragraph\">Astro is a free and open-source all-in-one web framework for building fast, content-focused websites. It serves as a FOSS alternative to static site generators like Gatsby, Next.js static export, or Hugo, offering innovative features like Islands architecture, zero JavaScript by default, and first-class support for multiple UI frameworks including React, Vue, Svelte, and more - all in the same project.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<h3 id=\"hardware-requirements\" class=\"mobile-header\">Hardware Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: Modern processor (1+ cores)</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 512MB minimum (2GB+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 250MB for Astro and dependencies</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Internet connection for package installation</li>\n<h3 id=\"software-requirements\" class=\"mobile-header\">Software Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Node.js</strong>: 18.14.1+ or 20.3.0+</li>\n<li class=\"mobile-list-item\"><strong>Package Manager</strong>: npm, yarn, or pnpm</li>\n<li class=\"mobile-list-item\"><strong>Text Editor</strong>: VS Code recommended with Astro extension</li>\n<li class=\"mobile-list-item\"><strong>Optional</strong>: Git for version control</li>\n<h3 id=\"network-requirements\" class=\"mobile-header\">Network Requirements</h3>\n<li class=\"mobile-list-item\"><strong>HTTPS</strong>: Access to npm registry</li>\n<li class=\"mobile-list-item\"><strong>Ports</strong>: </li>\n<li class=\"mobile-list-item\">4321: Default dev server port</li>\n<li class=\"mobile-list-item\">3000: Common alternative port</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">Astro officially supports:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">Fedora 38+</li>\n<li class=\"mobile-list-item\">macOS 10.15+ (Catalina and later)</li>\n<li class=\"mobile-list-item\">Windows 10/11</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"method-1-create-new-project-recommended\" class=\"mobile-header\">Method 1: Create New Project (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Using npm</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create new Astro project\nnpm create astro@latest\n\n# Follow the prompts:\n# - Where should we create your new project? ./my-astro-site\n# - How would you like to start your new project? (Choose template)\n# - Install dependencies? Yes\n# - TypeScript? Yes (Recommended)\n# - How strict? Strict\n\n# Navigate to project\ncd my-astro-site\n\n# Start development server\nnpm run dev</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Using yarn</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create new Astro project\nyarn create astro\n\n# Navigate and start\ncd my-astro-site\nyarn\nyarn dev</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Using pnpm</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create new Astro project\npnpm create astro@latest\n\n# Navigate and start\ncd my-astro-site\npnpm install\npnpm dev</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-2-manual-installation\" class=\"mobile-header\">Method 2: Manual Installation</h3>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js\ncurl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -\nsudo dnf install -y nodejs\n\n# Create project directory\nmkdir my-astro-site &amp;&amp; cd my-astro-site\n\n# Initialize package.json\nnpm init -y\n\n# Install Astro\nnpm install astro\n\n# Create Astro config\ncat &gt; astro.config.mjs &lt;&lt; &#039;EOF&#039;\nimport { defineConfig } from &#039;astro/config&#039;;\n\nexport default defineConfig({\n  // Configuration options\n});\nEOF\n\n# Create source directory structure\nmkdir -p src/pages src/components src/layouts</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Debian/Ubuntu</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Install pnpm (recommended for Astro)\nnpm install -g pnpm\n\n# Create Astro project\npnpm create astro@latest my-astro-site\ncd my-astro-site\npnpm dev</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js and pnpm\nsudo pacman -S nodejs npm pnpm\n\n# Create Astro project\npnpm create astro@latest my-astro-site\ncd my-astro-site\npnpm dev</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js and npm\napk add --no-cache nodejs npm\n\n# Install pnpm globally\nnpm install -g pnpm\n\n# Create Astro project\npnpm create astro@latest\ncd my-astro-site\npnpm install\npnpm dev</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### openSUSE</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js\nsudo zypper install -y nodejs20 npm20\n\n# Create Astro project\nnpm create astro@latest\ncd my-astro-site\nnpm install\nnpm run dev</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### macOS</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install node\n\n# Install pnpm\nbrew install pnpm\n\n# Create Astro project\npnpm create astro@latest\ncd my-astro-site\npnpm dev</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using winget\nwinget install OpenJS.NodeJS\n\n# Or using Chocolatey\nchoco install nodejs\n\n# Create Astro project\nnpm create astro@latest\ncd my-astro-site\nnpm run dev</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-3-clone-starter-templates\" class=\"mobile-header\">Method 3: Clone Starter Templates</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Official Blog template\ngit clone https://github.com/withastro/astro/tree/main/examples/blog my-blog\ncd my-blog\nnpm install\nnpm run dev\n\n# Portfolio template\ngit clone https://github.com/withastro/astro/tree/main/examples/portfolio my-portfolio\n\n# Documentation template\ngit clone https://github.com/withastro/astro/tree/main/examples/docs my-docs\n\n# E-commerce template\ngit clone https://github.com/withastro/astro/tree/main/examples/ecommerce my-shop</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">astro.config.mjs</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">import { defineConfig } from &#039;astro/config&#039;;\nimport react from &#039;@astrojs/react&#039;;\nimport tailwind from &#039;@astrojs/tailwind&#039;;\nimport mdx from &#039;@astrojs/mdx&#039;;\nimport sitemap from &#039;@astrojs/sitemap&#039;;\n\nexport default defineConfig({\n  // Site URL (required for sitemap)\n  site: &#039;https://example.com&#039;,\n  \n  // Base path for GitHub Pages\n  base: &#039;/my-repo&#039;,\n  \n  // Output mode\n  output: &#039;static&#039;, // &#039;static&#039; | &#039;server&#039; | &#039;hybrid&#039;\n  \n  // Integrations\n  integrations: [\n    react(),\n    tailwind(),\n    mdx(),\n    sitemap()\n  ],\n  \n  // Server options\n  server: {\n    port: 3000,\n    host: true\n  },\n  \n  // Build options\n  build: {\n    format: &#039;directory&#039;, // &#039;file&#039; | &#039;directory&#039;\n    assets: &#039;_astro&#039;\n  },\n  \n  // Markdown options\n  markdown: {\n    shikiConfig: {\n      theme: &#039;dracula&#039;,\n      wrap: true\n    }\n  },\n  \n  // Vite configuration\n  vite: {\n    optimizeDeps: {\n      exclude: [&#039;@astrojs/lit&#039;]\n    }\n  }\n});</code></pre>\n      </div>\n    </div>\n<h3 id=\"typescript-configuration\" class=\"mobile-header\">TypeScript Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">tsconfig.json</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"json\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">json</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-json\">{\n  &quot;extends&quot;: &quot;astro/tsconfigs/strict&quot;,\n  &quot;compilerOptions&quot;: {\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;src/*&quot;],\n      &quot;@components/*&quot;: [&quot;src/components/*&quot;],\n      &quot;@layouts/*&quot;: [&quot;src/layouts/*&quot;],\n      &quot;@assets/*&quot;: [&quot;src/assets/*&quot;]\n    }\n  }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"environment-variables\" class=\"mobile-header\">Environment Variables</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">.env</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Public variables (exposed to client)\nPUBLIC_API_URL=https://api.example.com\nPUBLIC_SITE_NAME=&quot;My Astro Site&quot;\n\n# Private variables (server-side only)\nDATABASE_URL=postgresql://user:pass@localhost:5432/db\nAPI_SECRET=your-secret-key</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Access in Astro:</p>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// In .astro files\nconst apiUrl = import.meta.env.PUBLIC_API_URL;\nconst dbUrl = import.meta.env.DATABASE_URL; // Server-side only\n\n// In client-side scripts\nconsole.log(import.meta.env.PUBLIC_API_URL); // Works\nconsole.log(import.meta.env.DATABASE_URL); // undefined</code></pre>\n      </div>\n    </div>\n<h3 id=\"content-collections\" class=\"mobile-header\">Content Collections</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">src/content/config.ts</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">import { z, defineCollection } from &#039;astro:content&#039;;\n\nconst blogCollection = defineCollection({\n  type: &#039;content&#039;,\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    publishDate: z.date(),\n    author: z.string(),\n    tags: z.array(z.string()).optional(),\n    image: z.string().optional(),\n    draft: z.boolean().default(false)\n  })\n});\n\nconst authorsCollection = defineCollection({\n  type: &#039;data&#039;,\n  schema: z.object({\n    name: z.string(),\n    bio: z.string(),\n    avatar: z.string(),\n    social: z.object({\n      twitter: z.string().optional(),\n      github: z.string().optional()\n    })\n  })\n});\n\nexport const collections = {\n  blog: blogCollection,\n  authors: authorsCollection\n};</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"development-server\" class=\"mobile-header\">Development Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start development server\nnpm run dev\nastro dev\n\n# Start with custom host/port\nastro dev --host 0.0.0.0 --port 3000\n\n# Start with verbose logging\nastro dev --verbose\n\n# Expose to network\nastro dev --host\n\n# Enable experimental features\nnpm run dev -- --experimental-integrations</code></pre>\n      </div>\n    </div>\n<h3 id=\"production-build\" class=\"mobile-header\">Production Build</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Build static site\nnpm run build\nastro build\n\n# Preview production build\nnpm run preview\nastro preview --port 8080\n\n# Check for issues\nastro check\n\n# Build with verbose output\nastro build --verbose</code></pre>\n      </div>\n    </div>\n<h3 id=\"server-side-rendering-ssr-deployment\" class=\"mobile-header\">Server-Side Rendering (SSR) Deployment</h3>\n<p class=\"mobile-paragraph\">#### Node.js Adapter</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node adapter\nnpm install @astrojs/node\n\n# Configure in astro.config.mjs\nimport node from &#039;@astrojs/node&#039;;\n\nexport default defineConfig({\n  output: &#039;server&#039;,\n  adapter: node({\n    mode: &#039;standalone&#039;\n  })\n});\n\n# Build and run\nnpm run build\nnode ./dist/server/entry.mjs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Systemd Service</p>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/systemd/system/astro-app.service</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=Astro SSR Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=astro\nGroup=astro\nWorkingDirectory=/opt/astro-app\nExecStart=/usr/bin/node /opt/astro-app/dist/server/entry.mjs\nRestart=always\nRestartSec=3\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\nEnvironment=HOST=0.0.0.0\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"dockerfile\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">dockerfile</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-dockerfile\"># Multi-stage build\nFROM node:20-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Static hosting\nFROM nginx:alpine AS static\nCOPY --from=builder /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]\n\n# SSR hosting\nFROM node:20-alpine AS ssr\nWORKDIR /app\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/package*.json ./\nRUN npm ci --production\nEXPOSE 3000\nCMD [&quot;node&quot;, &quot;./dist/server/entry.mjs&quot;]</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Build failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clear cache\nrm -rf .astro node_modules/.vite\n\n# Reinstall dependencies\nrm -rf node_modules package-lock.json\nnpm install\n\n# Check TypeScript errors\nnpx astro check\n\n# Increase memory for large sites\nNODE_OPTIONS=&quot;--max-old-space-size=4096&quot; npm run build</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>404 errors in development</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check file extensions\n# Astro requires .astro extension for pages\n\n# Verify routing\nnpx astro info\n\n# Check for conflicting routes\nfind src/pages -name &quot;*.astro&quot; | sort</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Integration conflicts</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Fix order of integrations\nexport default defineConfig({\n  integrations: [\n    // Order matters for some integrations\n    mdx(),      // Should come before others that process markdown\n    react(),\n    tailwind()\n  ]\n});</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Image optimization issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install sharp for better image processing\nnpm install sharp\n\n# Clear image cache\nrm -rf node_modules/.astro\n\n# Use explicit dimensions\n&lt;Image src={myImage} width={800} height={600} alt=&quot;Description&quot; /&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nDEBUG=astro:* npm run dev\n\n# Specific debug namespaces\nDEBUG=astro:build npm run build\nDEBUG=astro:assets npm run dev\nDEBUG=vite:* npm run dev\n\n# Verbose build output\nastro build --verbose</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"content-security-policy\" class=\"mobile-header\">Content Security Policy</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// astro.config.mjs\nexport default defineConfig({\n  integrations: [\n    {\n      name: &#039;csp-headers&#039;,\n      hooks: {\n        &#039;astro:server:setup&#039;: ({ server }) =&gt; {\n          server.middlewares.use((req, res, next) =&gt; {\n            res.setHeader(\n              &#039;Content-Security-Policy&#039;,\n              &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;;&quot;\n            );\n            next();\n          });\n        }\n      }\n    }\n  ]\n});</code></pre>\n      </div>\n    </div>\n<h3 id=\"environment-security\" class=\"mobile-header\">Environment Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Never commit .env with secrets\necho &quot;.env&quot; &gt;&gt; .gitignore\necho &quot;.env.local&quot; &gt;&gt; .gitignore\necho &quot;.env.production&quot; &gt;&gt; .gitignore\n\n# Use environment-specific files\n.env.development     # Development variables\n.env.production      # Production variables\n.env.local          # Local overrides (gitignored)</code></pre>\n      </div>\n    </div>\n<h3 id=\"build-security\" class=\"mobile-header\">Build Security</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Remove console logs in production\nexport default defineConfig({\n  vite: {\n    build: {\n      terserOptions: {\n        compress: {\n          drop_console: true,\n          drop_debugger: true\n        }\n      }\n    }\n  }\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"build-optimization\" class=\"mobile-header\">Build Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">export default defineConfig({\n  build: {\n    // Inline small CSS\n    inlineStylesheets: &#039;auto&#039;,\n    \n    // Split vendor chunks\n    splitting: true,\n    \n    // Exclude large dependencies\n    excludeMiddleware: false\n  },\n  \n  // Compress output\n  compressHTML: true,\n  \n  // Optimize images\n  image: {\n    service: &#039;sharp&#039;,\n    config: {\n      limitInputPixels: false\n    }\n  },\n  \n  // Prefetch links\n  prefetch: {\n    defaultStrategy: &#039;viewport&#039;,\n    prefetchAll: true\n  }\n});</code></pre>\n      </div>\n    </div>\n<h3 id=\"component-islands-optimization\" class=\"mobile-header\">Component Islands Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"astro\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">astro</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-astro\">---\n// Only hydrate when visible\n---\n&lt;InteractiveComponent client:visible /&gt;\n\n&lt;!-- Load JavaScript when idle --&gt;\n&lt;HeavyComponent client:idle /&gt;\n\n&lt;!-- Load on media query --&gt;\n&lt;MobileComponent client:media=&quot;(max-width: 768px)&quot; /&gt;\n\n&lt;!-- Never hydrate (static only) --&gt;\n&lt;StaticComponent /&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"caching-strategy\" class=\"mobile-header\">Caching Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Service worker for offline support\nexport default defineConfig({\n  integrations: [\n    {\n      name: &#039;service-worker&#039;,\n      hooks: {\n        &#039;astro:build:done&#039;: async ({ dir }) =&gt; {\n          // Generate service worker\n        }\n      }\n    }\n  ]\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"project-backup\" class=\"mobile-header\">Project Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-astro-project.sh\n\nPROJECT_DIR=&quot;/opt/astro-app&quot;\nBACKUP_DIR=&quot;/var/backups/astro&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup source files\ntar -czf $BACKUP_DIR/astro_source_$DATE.tar.gz \\\n    -C $PROJECT_DIR \\\n    --exclude=&#039;node_modules&#039; \\\n    --exclude=&#039;dist&#039; \\\n    --exclude=&#039;.astro&#039; \\\n    .\n\n# Backup built site\nif [ -d &quot;$PROJECT_DIR/dist&quot; ]; then\n    tar -czf $BACKUP_DIR/astro_dist_$DATE.tar.gz -C $PROJECT_DIR/dist .\nfi\n\n# Backup content\ntar -czf $BACKUP_DIR/astro_content_$DATE.tar.gz -C $PROJECT_DIR/src/content .\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"content-migration\" class=\"mobile-header\">Content Migration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Export content to JSON\ncat &gt; export-content.js &lt;&lt; &#039;EOF&#039;\nimport { getCollection } from &#039;astro:content&#039;;\nimport fs from &#039;fs/promises&#039;;\n\nconst blog = await getCollection(&#039;blog&#039;);\nawait fs.writeFile(\n  &#039;blog-export.json&#039;,\n  JSON.stringify(blog, null, 2)\n);\nEOF\n\nnode export-content.js</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-system-requirements\" class=\"mobile-header\">10. System Requirements</h2>\n<h3 id=\"minimum-requirements\" class=\"mobile-header\">Minimum Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 1 core</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 512MB</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 250MB</li>\n<li class=\"mobile-list-item\"><strong>Node.js</strong>: 18.14.1+</li>\n<h3 id=\"recommended-requirements\" class=\"mobile-header\">Recommended Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2+ cores</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 2GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 1GB+ SSD</li>\n<li class=\"mobile-list-item\"><strong>Node.js</strong>: 20+ LTS</li>\n<h3 id=\"large-site-requirements\" class=\"mobile-header\">Large Site Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4+ cores</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 8GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 10GB+ NVMe</li>\n<li class=\"mobile-list-item\"><strong>Build Cache</strong>: 2GB+</li>\n<h2 id=\"11-support\" class=\"mobile-header\">11. Support</h2>\n<h3 id=\"official-resources\" class=\"mobile-header\">Official Resources</h3>\n<li class=\"mobile-list-item\"><strong>Website</strong>: https://astro.build</li>\n<li class=\"mobile-list-item\"><strong>GitHub</strong>: https://github.com/withastro/astro</li>\n<li class=\"mobile-list-item\"><strong>Documentation</strong>: https://docs.astro.build</li>\n<li class=\"mobile-list-item\"><strong>Discord</strong>: https://astro.build/chat</li>\n<h3 id=\"community-support\" class=\"mobile-header\">Community Support</h3>\n<li class=\"mobile-list-item\"><strong>Discord Server</strong>: Very active community</li>\n<li class=\"mobile-list-item\"><strong>GitHub Discussions</strong>: https://github.com/withastro/astro/discussions</li>\n<li class=\"mobile-list-item\"><strong>Stack Overflow</strong>: [astro] tag</li>\n<li class=\"mobile-list-item\"><strong>Twitter/X</strong>: @astrodotbuild</li>\n<h2 id=\"12-contributing\" class=\"mobile-header\">12. Contributing</h2>\n<h3 id=\"how-to-contribute\" class=\"mobile-header\">How to Contribute</h3>\n<p class=\"mobile-paragraph\">1. Fork the repository on GitHub</p>\n<p class=\"mobile-paragraph\">2. Create a feature branch</p>\n<p class=\"mobile-paragraph\">3. Submit pull request</p>\n<p class=\"mobile-paragraph\">4. Follow TypeScript coding standards</p>\n<p class=\"mobile-paragraph\">5. Include tests and changeset</p>\n<h3 id=\"development-setup\" class=\"mobile-header\">Development Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/withastro/astro.git\ncd astro\n\n# Install dependencies\npnpm install\n\n# Build packages\npnpm build\n\n# Run tests\npnpm test\n\n# Create changeset\npnpm changeset</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-license\" class=\"mobile-header\">13. License</h2>\n<p class=\"mobile-paragraph\">Astro is licensed under the MIT License.</p>\n<p class=\"mobile-paragraph\">Key points:</p>\n<li class=\"mobile-list-item\">Free to use, modify, and distribute</li>\n<li class=\"mobile-list-item\">Commercial use allowed</li>\n<li class=\"mobile-list-item\">No warranty provided</li>\n<li class=\"mobile-list-item\">Attribution required</li>\n<h2 id=\"14-acknowledgments\" class=\"mobile-header\">14. Acknowledgments</h2>\n<h3 id=\"credits\" class=\"mobile-header\">Credits</h3>\n<li class=\"mobile-list-item\"><strong>Fred K. Schott</strong>: Creator and lead developer</li>\n<li class=\"mobile-list-item\"><strong>Astro Technology Company</strong>: Core team</li>\n<li class=\"mobile-list-item\"><strong>Contributors</strong>: 500+ contributors</li>\n<li class=\"mobile-list-item\"><strong>Sponsors</strong>: GitHub sponsors and corporate backers</li>\n<h2 id=\"15-version-history\" class=\"mobile-header\">15. Version History</h2>\n<h3 id=\"recent-releases\" class=\"mobile-header\">Recent Releases</h3>\n<li class=\"mobile-list-item\"><strong>v4.x</strong>: View Transitions API, Content Layer API</li>\n<li class=\"mobile-list-item\"><strong>v3.x</strong>: Image optimization, improved performance</li>\n<li class=\"mobile-list-item\"><strong>v2.x</strong>: Content Collections, Hybrid rendering</li>\n<h3 id=\"major-features-by-version\" class=\"mobile-header\">Major Features by Version</h3>\n<li class=\"mobile-list-item\"><strong>v4.0</strong>: Faster builds, Dev toolbar, i18n routing</li>\n<li class=\"mobile-list-item\"><strong>v3.0</strong>: View transitions, Image component</li>\n<li class=\"mobile-list-item\"><strong>v2.0</strong>: Content collections, Error overlays</li>\n<h2 id=\"16-appendices\" class=\"mobile-header\">16. Appendices</h2>\n<h3 id=\"a-basic-site-example\" class=\"mobile-header\">A. Basic Site Example</h3>\n<div class=\"mobile-code-block\" data-language=\"astro\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">astro</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-astro\">---\n// src/pages/index.astro\nimport Layout from &#039;../layouts/Layout.astro&#039;;\nimport Card from &#039;../components/Card.astro&#039;;\n\nconst posts = await Astro.glob(&#039;../content/blog/*.md&#039;);\n---\n\n&lt;Layout title=&quot;Welcome to Astro&quot;&gt;\n  &lt;main&gt;\n    &lt;h1&gt;Welcome to &lt;span class=&quot;text-gradient&quot;&gt;Astro&lt;/span&gt;&lt;/h1&gt;\n    \n    &lt;ul role=&quot;list&quot; class=&quot;link-card-grid&quot;&gt;\n      {posts.map((post) =&gt; (\n        &lt;Card\n          href={post.url}\n          title={post.frontmatter.title}\n          body={post.frontmatter.description}\n        /&gt;\n      ))}\n    &lt;/ul&gt;\n  &lt;/main&gt;\n&lt;/Layout&gt;\n\n&lt;style&gt;\n  .text-gradient {\n    background-image: linear-gradient(45deg, #4f39fa, #da62c4);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n&lt;/style&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"b-api-routes-example\" class=\"mobile-header\">B. API Routes Example</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// src/pages/api/posts.json.js\nexport async function GET() {\n  const posts = await getCollection(&#039;blog&#039;);\n  \n  return new Response(\n    JSON.stringify(posts),\n    {\n      status: 200,\n      headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;\n      }\n    }\n  );\n}\n\n// src/pages/api/contact.js\nexport async function POST({ request }) {\n  const data = await request.json();\n  \n  // Process form submission\n  await sendEmail(data);\n  \n  return new Response(JSON.stringify({ success: true }), {\n    status: 200,\n    headers: {\n      &quot;Content-Type&quot;: &quot;application/json&quot;\n    }\n  });\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"c-multi-framework-example\" class=\"mobile-header\">C. Multi-Framework Example</h3>\n<div class=\"mobile-code-block\" data-language=\"astro\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">astro</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-astro\">---\n// Using multiple frameworks in one page\nimport ReactCounter from &#039;../components/Counter.jsx&#039;;\nimport VueAlert from &#039;../components/Alert.vue&#039;;\nimport SvelteTimer from &#039;../components/Timer.svelte&#039;;\n---\n\n&lt;Layout&gt;\n  &lt;h1&gt;Multi-Framework Demo&lt;/h1&gt;\n  \n  &lt;!-- React component --&gt;\n  &lt;ReactCounter client:load /&gt;\n  \n  &lt;!-- Vue component --&gt;\n  &lt;VueAlert message=&quot;Hello from Vue!&quot; client:visible /&gt;\n  \n  &lt;!-- Svelte component --&gt;\n  &lt;SvelteTimer client:idle /&gt;\n&lt;/Layout&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"d-deployment-scripts\" class=\"mobile-header\">D. Deployment Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# deploy.sh\n\n# Build site\nnpm run build\n\n# Deploy to Netlify\nnetlify deploy --prod --dir=dist\n\n# Deploy to Vercel\nvercel --prod\n\n# Deploy to GitHub Pages\nnpm run build -- --base=/repo-name\ngh-pages -d dist\n\n# Deploy to S3\naws s3 sync dist/ s3://my-bucket --delete\naws cloudfront create-invalidation --distribution-id ABCD --paths &quot;/*&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\">For more information and updates, visit https://github.com/howtomgr/astro</p>","readTime":"12 min","wordCount":2273,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":3,"text":"Hardware Requirements","id":"hardware-requirements"},{"level":3,"text":"Software Requirements","id":"software-requirements"},{"level":3,"text":"Network Requirements","id":"network-requirements"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Method 1: Create New Project (Recommended)","id":"method-1-create-new-project-recommended"},{"level":3,"text":"Method 2: Manual Installation","id":"method-2-manual-installation"},{"level":3,"text":"Method 3: Clone Starter Templates","id":"method-3-clone-starter-templates"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"TypeScript Configuration","id":"typescript-configuration"},{"level":3,"text":"Environment Variables","id":"environment-variables"},{"level":3,"text":"Content Collections","id":"content-collections"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"Development Server","id":"development-server"},{"level":3,"text":"Production Build","id":"production-build"},{"level":3,"text":"Server-Side Rendering (SSR) Deployment","id":"server-side-rendering-ssr-deployment"},{"level":3,"text":"Docker Deployment","id":"docker-deployment"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"Content Security Policy","id":"content-security-policy"},{"level":3,"text":"Environment Security","id":"environment-security"},{"level":3,"text":"Build Security","id":"build-security"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"Build Optimization","id":"build-optimization"},{"level":3,"text":"Component Islands Optimization","id":"component-islands-optimization"},{"level":3,"text":"Caching Strategy","id":"caching-strategy"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Project Backup","id":"project-backup"},{"level":3,"text":"Content Migration","id":"content-migration"},{"level":2,"text":"10. System Requirements","id":"10-system-requirements"},{"level":3,"text":"Minimum Requirements","id":"minimum-requirements"},{"level":3,"text":"Recommended Requirements","id":"recommended-requirements"},{"level":3,"text":"Large Site Requirements","id":"large-site-requirements"},{"level":2,"text":"11. Support","id":"11-support"},{"level":3,"text":"Official Resources","id":"official-resources"},{"level":3,"text":"Community Support","id":"community-support"},{"level":2,"text":"12. Contributing","id":"12-contributing"},{"level":3,"text":"How to Contribute","id":"how-to-contribute"},{"level":3,"text":"Development Setup","id":"development-setup"},{"level":2,"text":"13. License","id":"13-license"},{"level":2,"text":"14. Acknowledgments","id":"14-acknowledgments"},{"level":3,"text":"Credits","id":"credits"},{"level":2,"text":"15. Version History","id":"15-version-history"},{"level":3,"text":"Recent Releases","id":"recent-releases"},{"level":3,"text":"Major Features by Version","id":"major-features-by-version"},{"level":2,"text":"16. Appendices","id":"16-appendices"},{"level":3,"text":"A. Basic Site Example","id":"a-basic-site-example"},{"level":3,"text":"B. API Routes Example","id":"b-api-routes-example"},{"level":3,"text":"C. Multi-Framework Example","id":"c-multi-framework-example"},{"level":3,"text":"D. Deployment Scripts","id":"d-deployment-scripts"}],"lastBuilt":"2025-10-25T18:17:28.702Z","metadataVersion":"2.0"},{"name":"bun","displayName":"Bun Installation Guide","slug":"bun","description":"Bun is a free and open-source all-in-one JavaScript runtime and toolkit built for speed. Written in Zig and powered by JavaScriptCore, it serves as a FOSS alternative to Node.js and npm/yarn/pnpm, offering dramatically faster startup times, built-in TypeScript support, JSX transpilation, and a comprehensive toolkit including bundler, test runner, and package manager.","category":"development-tools","subcategory":"javascript-runtimes","difficultyLevel":"beginner","estimatedSetupTime":"5-10 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","fedora","macos","windows"],"defaultPorts":[3000,8000],"installationMethods":["official-installer","package-manager","binary-download","docker"],"features":["multi-os-support","all-in-one-toolkit","blazing-fast","typescript-native","jsx-support","built-in-bundler","built-in-test-runner","package-manager","sqlite-native","websocket-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["javascript","typescript","runtime","nodejs-alternative","fast","bundler","package-manager","test-runner","zig"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"MIT","websiteUrl":"https://howtomgr.github.io/development-tools/bun","documentationUrl":"https://howtomgr.github.io/development-tools/bun","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bun","updatedAt":"2025-09-16T17:01:35Z","createdAt":"2025-09-16T10:11:42Z","readmeRaw":"# Bun Installation Guide\n\nBun is a free and open-source all-in-one JavaScript runtime and toolkit built for speed. Written in Zig and powered by JavaScriptCore, it serves as a FOSS alternative to Node.js and npm/yarn/pnpm, offering dramatically faster startup times, built-in TypeScript support, JSX transpilation, and a comprehensive toolkit including bundler, test runner, and package manager in a single binary.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n### Hardware Requirements\n- **CPU**: Modern 64-bit processor (x86_64 or ARM64)\n- **RAM**: 256MB minimum (1GB+ recommended)\n- **Storage**: 50MB for Bun binary, additional for projects\n- **Network**: Internet connection for package installation\n\n### Software Requirements\n- **Operating System**: Linux, macOS, or Windows (via WSL2)\n- **Shell**: Bash, Zsh, or PowerShell for installation\n- **Optional**: Git for version control\n\n### Network Requirements\n- **HTTPS**: Access to npm registry and GitHub\n- **Ports**: Application-specific (commonly 3000, 8000)\n\n## 2. Supported Operating Systems\n\nBun officially supports:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS\n- Arch Linux\n- Alpine Linux 3.18+ (musl support)\n- openSUSE Leap 15.5+ / Tumbleweed\n- Fedora 38+\n- macOS 12+ (Monterey and later, Intel and Apple Silicon)\n- Windows 10/11 (via WSL2)\n\n## 3. Installation\n\n### Method 1: Official Installer (Recommended)\n\n#### Linux/macOS/WSL\n```bash\n# Install Bun using official script\ncurl -fsSL https://bun.sh/install | bash\n\n# Add to PATH (add to ~/.bashrc or ~/.zshrc)\nexport BUN_INSTALL=\"$HOME/.bun\"\nexport PATH=\"$BUN_INSTALL/bin:$PATH\"\n\n# Reload shell configuration\nsource ~/.bashrc  # or ~/.zshrc\n\n# Verify installation\nbun --version\n```\n\n#### Windows (Native - Experimental)\n```powershell\n# Install using PowerShell (experimental)\npowershell -c \"irm bun.sh/install.ps1 | iex\"\n\n# Or use WSL2 (recommended)\nwsl curl -fsSL https://bun.sh/install | bash\n```\n\n### Method 2: Package Managers\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Download latest binary\nBUN_VERSION=$(curl -s https://api.github.com/repos/oven-sh/bun/releases/latest | grep tag_name | cut -d '\"' -f 4)\ncurl -LO \"https://github.com/oven-sh/bun/releases/download/${BUN_VERSION}/bun-linux-x64.zip\"\n\n# Extract and install\nunzip bun-linux-x64.zip\nsudo mv bun-linux-x64/bun /usr/local/bin/\nsudo chmod +x /usr/local/bin/bun\n\n# Create symlinks\nsudo ln -s /usr/local/bin/bun /usr/local/bin/bunx\n\n# Verify installation\nbun --version\n```\n\n#### Debian/Ubuntu\n```bash\n# Method 1: Official script (recommended)\ncurl -fsSL https://bun.sh/install | bash\n\n# Method 2: Manual binary installation\nBUN_VERSION=$(curl -s https://api.github.com/repos/oven-sh/bun/releases/latest | grep tag_name | cut -d '\"' -f 4)\nwget \"https://github.com/oven-sh/bun/releases/download/${BUN_VERSION}/bun-linux-x64.zip\"\nunzip bun-linux-x64.zip\nsudo mv bun-linux-x64/bun /usr/local/bin/\nsudo chmod +x /usr/local/bin/bun\n\n# Add to PATH\necho 'export PATH=\"/usr/local/bin:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n```\n\n#### Arch Linux\n```bash\n# Install from AUR\nyay -S bun-bin\n\n# Or using paru\nparu -S bun-bin\n\n# Verify installation\nbun --version\n```\n\n#### Alpine Linux\n```bash\n# Install dependencies\napk add --no-cache curl unzip\n\n# Download Bun for musl\nBUN_VERSION=$(curl -s https://api.github.com/repos/oven-sh/bun/releases/latest | grep tag_name | cut -d '\"' -f 4)\ncurl -LO \"https://github.com/oven-sh/bun/releases/download/${BUN_VERSION}/bun-linux-x64-musl.zip\"\n\n# Extract and install\nunzip bun-linux-x64-musl.zip\nmv bun-linux-x64-musl/bun /usr/local/bin/\nchmod +x /usr/local/bin/bun\n\n# Create bunx symlink\nln -s /usr/local/bin/bun /usr/local/bin/bunx\n```\n\n#### openSUSE\n```bash\n# Install via zypper (if available in future)\n# Currently use manual installation\nBUN_VERSION=$(curl -s https://api.github.com/repos/oven-sh/bun/releases/latest | grep tag_name | cut -d '\"' -f 4)\nwget \"https://github.com/oven-sh/bun/releases/download/${BUN_VERSION}/bun-linux-x64.zip\"\nunzip bun-linux-x64.zip\nsudo mv bun-linux-x64/bun /usr/local/bin/\nsudo chmod +x /usr/local/bin/bun\n```\n\n#### macOS\n```bash\n# Method 1: Official script\ncurl -fsSL https://bun.sh/install | bash\n\n# Method 2: Homebrew\nbrew tap oven-sh/bun\nbrew install bun\n\n# Method 3: MacPorts\nsudo port install bun\n\n# For Apple Silicon Macs\narch -arm64 brew install bun\n```\n\n#### Windows (WSL2)\n```bash\n# Install WSL2 with Ubuntu\nwsl --install -d Ubuntu\n\n# Inside WSL2\ncurl -fsSL https://bun.sh/install | bash\nsource ~/.bashrc\nbun --version\n```\n\n### Method 3: Docker\n```bash\n# Run Bun in Docker\ndocker run --rm -it oven/bun:latest\n\n# Create Dockerfile for Bun app\ncat > Dockerfile << 'EOF'\nFROM oven/bun:1-alpine\nWORKDIR /app\nCOPY package.json bun.lockb ./\nRUN bun install --frozen-lockfile\nCOPY . .\nEXPOSE 3000\nCMD [\"bun\", \"run\", \"start\"]\nEOF\n```\n\n## 4. Configuration\n\n### Environment Configuration\n\n```bash\n# Set Bun configuration directory\nexport BUN_INSTALL=\"$HOME/.bun\"\nexport PATH=\"$BUN_INSTALL/bin:$PATH\"\n\n# Configure runtime behavior\nexport BUN_CONFIG_MAX_HTTP_HEADER_SIZE=16384\nexport BUN_CONFIG_NO_CLEAR_TERMINAL_ON_RELOAD=1\n\n# Set registry mirror (for China/corporate networks)\nexport BUN_CONFIG_REGISTRY=\"https://registry.npmjs.org/\"\n```\n\n### Project Configuration\n\nCreate `bunfig.toml` for project-specific configuration:\n```toml\n# bunfig.toml\n\n# Package manager settings\n[install]\n# Use exact versions\nexact = true\n\n# Install peer dependencies\npeer = true\n\n# Install dev dependencies\ndev = true\n\n# Registry settings\n[install.registry]\nurl = \"https://registry.npmjs.org\"\ntoken = \"$npm_token\"\n\n# Cache settings\n[install.cache]\ndir = \"~/.bun/install/cache\"\ndisable = false\n\n# Lockfile settings\n[install.lockfile]\nsave = true\n\n# Build settings\n[build]\ntarget = \"bun\"\noutdir = \"./dist\"\nsplitting = true\nsourcemap = \"external\"\n\n# Test settings\n[test]\npreload = \"./test/setup.ts\"\ntimeout = 5000\n```\n\n### Package.json Configuration\n\n```json\n{\n  \"name\": \"my-bun-app\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"bun run server.ts\",\n    \"dev\": \"bun --watch run server.ts\",\n    \"build\": \"bun build ./src/index.ts --outdir ./dist\",\n    \"test\": \"bun test\",\n    \"format\": \"bunx prettier --write .\"\n  },\n  \"devDependencies\": {\n    \"bun-types\": \"latest\"\n  },\n  \"peerDependencies\": {\n    \"typescript\": \"^5.0.0\"\n  }\n}\n```\n\n### TypeScript Configuration\n\nCreate `tsconfig.json`:\n```json\n{\n  \"compilerOptions\": {\n    \"lib\": [\"ESNext\"],\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"moduleDetection\": \"force\",\n    \"allowImportingTsExtensions\": true,\n    \"noEmit\": true,\n    \"composite\": true,\n    \"strict\": true,\n    \"downlevelIteration\": true,\n    \"skipLibCheck\": true,\n    \"jsx\": \"react-jsx\",\n    \"allowSyntheticDefaultImports\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"allowJs\": true,\n    \"types\": [\n      \"bun-types\"\n    ]\n  }\n}\n```\n\n## 5. Service Management\n\n### Systemd Service Configuration\n\nCreate `/etc/systemd/system/bun-app.service`:\n```ini\n[Unit]\nDescription=Bun Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=bunapp\nGroup=bunapp\nWorkingDirectory=/opt/bun-app\nExecStart=/usr/local/bin/bun run start\nRestart=always\nRestartSec=3\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/bun-app\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```bash\n# Create bun user\nsudo useradd -r -s /bin/false -d /opt/bun-app bunapp\n\n# Set permissions\nsudo chown -R bunapp:bunapp /opt/bun-app\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now bun-app\nsudo systemctl status bun-app\n```\n\n### Development Server\n\n```bash\n# Start development server with hot reload\nbun --watch run server.ts\n\n# Start with specific port\nPORT=3000 bun run server.ts\n\n# Start with debugging\nbun --inspect run server.ts\n\n# Start with performance profiling\nbun --profile run server.ts\n```\n\n### Process Management with PM2\n\n```bash\n# Install PM2 globally\nbun install -g pm2\n\n# Create ecosystem file\ncat > ecosystem.config.js << 'EOF'\nmodule.exports = {\n  apps: [{\n    name: 'bun-app',\n    interpreter: 'bun',\n    script: 'server.ts',\n    cwd: '/opt/bun-app',\n    instances: 'max',\n    exec_mode: 'cluster',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    error_file: './logs/err.log',\n    out_file: './logs/out.log',\n    log_file: './logs/combined.log',\n    time: true\n  }]\n};\nEOF\n\n# Start with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Installation failures**:\n```bash\n# Check system architecture\nuname -m\n\n# Download correct binary\n# x64 for Intel/AMD\n# aarch64 for ARM64\n\n# Manual installation fallback\ncurl -fsSL https://bun.sh/install | bash -s \"bun-v1.0.0\"\n```\n\n2. **Package installation issues**:\n```bash\n# Clear cache\nbun pm cache rm\n\n# Install with verbose output\nbun install --verbose\n\n# Use different registry\nbunx --registry https://registry.npmmirror.com install\n```\n\n3. **Module resolution errors**:\n```bash\n# Check module resolution\nbun repl\n> import.meta.resolve(\"package-name\")\n\n# Debug module loading\nBUN_DEBUG=1 bun run script.ts\n\n# Clear module cache\nrm -rf ~/.bun/install/cache\n```\n\n4. **Performance issues**:\n```bash\n# Profile application\nbun --profile run server.ts\n\n# Check memory usage\nbun --print process.memoryUsage()\n\n# Increase memory limit\nulimit -v unlimited\n```\n\n### Debug Information\n\n```bash\n# Get Bun information\nbun --version\nbun --revision\n\n# Check installation\nwhich bun\nls -la ~/.bun/bin/\n\n# Environment variables\nbun --print process.env\n\n# Test JavaScript engine\nbun eval 'console.log(process.versions)'\n```\n\n## 7. Security Considerations\n\n### Runtime Security\n\n```bash\n# Run with limited permissions\nbun run --no-install server.ts\n\n# Disable shell access\nbun run --no-shell server.ts\n\n# Use strict mode\ncat > server.ts << 'EOF'\n\"use strict\";\n\n// Application code here\nEOF\n```\n\n### Package Security\n\n```bash\n# Audit dependencies\nbunx npm audit\n\n# Check for vulnerabilities\nbunx snyk test\n\n# Lock dependency versions\nbun install --frozen-lockfile\n\n# Verify package integrity\nbun pm hash\n```\n\n### Production Deployment\n\n```bash\n# Create production build\nbun build ./src/index.ts \\\n  --target=bun \\\n  --minify \\\n  --sourcemap=external \\\n  --outdir=./dist\n\n# Set production environment\nexport NODE_ENV=production\n\n# Disable source maps in production\nexport BUN_CONFIG_DISABLE_SOURCEMAPS=1\n```\n\n### Secure Service Configuration\n\n```ini\n# Enhanced systemd security\n[Service]\n# ... existing configuration ...\n\n# Security hardening\nCapabilityBoundingSet=\nSystemCallFilter=@system-service\nSystemCallErrorNumber=EPERM\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\nRestrictRealtime=true\nRestrictNamespaces=true\nRestrictSUIDSGID=true\nRemoveIPC=true\nPrivateDevices=true\n```\n\n## 8. Performance Tuning\n\n### Runtime Optimization\n\n```bash\n# Enable JIT optimizations\nexport BUN_JSC_forceJIT=1\n\n# Configure garbage collection\nexport BUN_JSC_gcMaxHeapSize=2048\n\n# Use native code generation\nexport BUN_JSC_useBBQJIT=1\nexport BUN_JSC_useOMGJIT=1\n\n# Optimize for startup time\nexport BUN_JSC_useJIT=0  # Disable JIT for faster startup\n```\n\n### Application Performance\n\n```typescript\n// Use Bun's optimized APIs\nimport { serve } from \"bun\";\n\nconst server = serve({\n  port: 3000,\n  fetch(request) {\n    return new Response(\"Hello from Bun!\");\n  },\n  // Enable compression\n  compression: true,\n  // Set max request body size\n  maxRequestBodySize: 1024 * 1024 * 10, // 10MB\n});\n\n// Use native SQLite\nimport { Database } from \"bun:sqlite\";\nconst db = new Database(\"mydb.sqlite\");\n\n// Use Web Streams API\nconst file = Bun.file(\"large-file.txt\");\nconst stream = file.stream();\n```\n\n### Build Optimization\n\n```bash\n# Production build with optimizations\nbun build ./src/index.ts \\\n  --target=bun \\\n  --minify \\\n  --splitting \\\n  --external react \\\n  --external react-dom \\\n  --outdir=./dist\n\n# Bundle for browsers\nbun build ./src/browser.ts \\\n  --target=browser \\\n  --minify \\\n  --splitting \\\n  --format=esm \\\n  --outdir=./public\n```\n\n## 9. Backup and Restore\n\n### Project Backup\n\n```bash\n#!/bin/bash\n# backup-bun-project.sh\n\nPROJECT_DIR=\"/opt/bun-app\"\nBACKUP_DIR=\"/var/backups/bun\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup project files\ntar -czf $BACKUP_DIR/bun_project_$DATE.tar.gz \\\n    -C $PROJECT_DIR \\\n    --exclude='node_modules' \\\n    --exclude='.git' \\\n    --exclude='dist' \\\n    .\n\n# Backup lockfile separately\ncp $PROJECT_DIR/bun.lockb $BACKUP_DIR/bun.lockb.$DATE\n\necho \"Project backup completed: $BACKUP_DIR/bun_project_$DATE.tar.gz\"\n```\n\n### Dependency Management\n\n```bash\n# Generate lockfile\nbun install --yarn\n\n# Verify lockfile integrity\nbun install --frozen-lockfile\n\n# Export dependency tree\nbun pm ls --all > dependencies.txt\n\n# Backup global packages\nbun pm ls -g > global-packages.txt\n```\n\n### Migration from Node.js\n\n```bash\n#!/bin/bash\n# migrate-from-node.sh\n\n# Convert package-lock.json to bun.lockb\nbun install\n\n# Update scripts in package.json\nsed -i 's/node /bun /g' package.json\nsed -i 's/npm run/bun run/g' package.json\nsed -i 's/npx /bunx /g' package.json\n\n# Test compatibility\nbun test\n```\n\n## 10. System Requirements\n\n### Minimum Requirements\n- **CPU**: 1 core, 1.0 GHz x86_64/ARM64\n- **RAM**: 256MB\n- **Storage**: 50MB\n- **OS**: Linux kernel 3.10+, macOS 12+\n\n### Recommended Requirements\n- **CPU**: 2+ cores, 2.0+ GHz\n- **RAM**: 1GB+\n- **Storage**: 1GB+ SSD\n- **Network**: Broadband for package downloads\n\n### Enterprise Requirements\n- **CPU**: 4+ cores, 3.0+ GHz\n- **RAM**: 4GB+\n- **Storage**: 10GB+ NVMe\n- **Network**: Gigabit Ethernet\n\n## 11. Support\n\n### Official Resources\n- **Website**: https://bun.sh\n- **GitHub**: https://github.com/oven-sh/bun\n- **Documentation**: https://bun.sh/docs\n- **Discord**: https://bun.sh/discord\n\n### Community Support\n- **Discord Server**: https://discord.gg/CXdq2DP29u\n- **GitHub Discussions**: https://github.com/oven-sh/bun/discussions\n- **Twitter/X**: @bunjavascript\n- **Stack Overflow**: [bun] tag\n\n## 12. Contributing\n\n### How to Contribute\n1. Fork the repository on GitHub\n2. Create a feature branch\n3. Submit pull request\n4. Follow Zig and TypeScript coding standards\n5. Include tests and benchmarks\n\n### Development Setup\n```bash\n# Clone repository\ngit clone https://github.com/oven-sh/bun.git\ncd bun\n\n# Install Zig\ncurl -fsSL https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz | tar xJ\n\n# Build Bun\nmake setup\nmake build\n\n# Run tests\nmake test\n```\n\n## 13. License\n\nBun is licensed under the MIT License.\n\nKey points:\n- Free to use, modify, and distribute\n- Commercial use allowed\n- No warranty provided\n- Attribution required\n\n## 14. Acknowledgments\n\n### Credits\n- **Jarred Sumner**: Creator and lead developer\n- **Oven Team**: Core development team\n- **JavaScriptCore Team**: JavaScript engine\n- **Zig Community**: Systems programming language\n\n## 15. Version History\n\n### Recent Releases\n- **v1.0.x**: First stable release with production-ready features\n- **v0.8.x**: Added bundler and test runner\n- **v0.7.x**: Improved Node.js compatibility\n\n### Major Features by Version\n- **v1.0**: Production ready, stable API\n- **v0.8**: Built-in bundler and test runner\n- **v0.6**: Package manager implementation\n\n## 16. Appendices\n\n### A. Quick Start Examples\n\n```typescript\n// server.ts - HTTP server\nimport { serve } from \"bun\";\n\nserve({\n  port: 3000,\n  fetch(request) {\n    const url = new URL(request.url);\n    \n    if (url.pathname === \"/\") {\n      return new Response(\"Welcome to Bun!\");\n    }\n    \n    if (url.pathname === \"/json\") {\n      return Response.json({ message: \"Hello from Bun!\" });\n    }\n    \n    return new Response(\"Not found\", { status: 404 });\n  },\n});\n\nconsole.log(\"Server running at http://localhost:3000\");\n```\n\n### B. Testing Example\n\n```typescript\n// math.test.ts\nimport { expect, test, describe } from \"bun:test\";\n\ndescribe(\"math operations\", () => {\n  test(\"addition\", () => {\n    expect(2 + 2).toBe(4);\n  });\n  \n  test(\"async test\", async () => {\n    const result = await Promise.resolve(42);\n    expect(result).toBe(42);\n  });\n});\n\n// Run tests: bun test\n```\n\n### C. Bundler Example\n\n```typescript\n// build.ts\nawait Bun.build({\n  entrypoints: [\"./src/index.ts\"],\n  outdir: \"./dist\",\n  target: \"browser\",\n  splitting: true,\n  sourcemap: \"external\",\n  minify: {\n    whitespace: true,\n    identifiers: true,\n    syntax: true,\n  },\n  external: [\"react\", \"react-dom\"],\n});\n```\n\n### D. SQLite Example\n\n```typescript\n// database.ts\nimport { Database } from \"bun:sqlite\";\n\nconst db = new Database(\"myapp.db\");\n\n// Create table\ndb.run(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL\n  )\n`);\n\n// Insert data\nconst insert = db.prepare(\"INSERT INTO users (name, email) VALUES (?, ?)\");\ninsert.run(\"Alice\", \"alice@example.com\");\n\n// Query data\nconst users = db.query(\"SELECT * FROM users\").all();\nconsole.log(users);\n\n// Close database\ndb.close();\n```\n\n### E. Performance Comparison\n\n```bash\n# Benchmark script\ncat > bench.js << 'EOF'\nconsole.time(\"startup\");\nconsole.log(\"Hello, World!\");\nconsole.timeEnd(\"startup\");\nEOF\n\n# Compare startup times\ntime bun bench.js\ntime node bench.js\ntime deno run bench.js\n```\n\n---\n\nFor more information and updates, visit https://github.com/howtomgr/bun","readmeHtml":"<p class=\"mobile-paragraph\">Bun is a free and open-source all-in-one JavaScript runtime and toolkit built for speed. Written in Zig and powered by JavaScriptCore, it serves as a FOSS alternative to Node.js and npm/yarn/pnpm, offering dramatically faster startup times, built-in TypeScript support, JSX transpilation, and a comprehensive toolkit including bundler, test runner, and package manager in a single binary.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<h3 id=\"hardware-requirements\" class=\"mobile-header\">Hardware Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: Modern 64-bit processor (x86_64 or ARM64)</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 256MB minimum (1GB+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 50MB for Bun binary, additional for projects</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Internet connection for package installation</li>\n<h3 id=\"software-requirements\" class=\"mobile-header\">Software Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux, macOS, or Windows (via WSL2)</li>\n<li class=\"mobile-list-item\"><strong>Shell</strong>: Bash, Zsh, or PowerShell for installation</li>\n<li class=\"mobile-list-item\"><strong>Optional</strong>: Git for version control</li>\n<h3 id=\"network-requirements\" class=\"mobile-header\">Network Requirements</h3>\n<li class=\"mobile-list-item\"><strong>HTTPS</strong>: Access to npm registry and GitHub</li>\n<li class=\"mobile-list-item\"><strong>Ports</strong>: Application-specific (commonly 3000, 8000)</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">Bun officially supports:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+ (musl support)</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">Fedora 38+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later, Intel and Apple Silicon)</li>\n<li class=\"mobile-list-item\">Windows 10/11 (via WSL2)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"method-1-official-installer-recommended\" class=\"mobile-header\">Method 1: Official Installer (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Linux/macOS/WSL</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Bun using official script\ncurl -fsSL https://bun.sh/install | bash\n\n# Add to PATH (add to ~/.bashrc or ~/.zshrc)\nexport BUN_INSTALL=&quot;$HOME/.bun&quot;\nexport PATH=&quot;$BUN_INSTALL/bin:$PATH&quot;\n\n# Reload shell configuration\nsource ~/.bashrc  # or ~/.zshrc\n\n# Verify installation\nbun --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows (Native - Experimental)</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Install using PowerShell (experimental)\npowershell -c &quot;irm bun.sh/install.ps1 | iex&quot;\n\n# Or use WSL2 (recommended)\nwsl curl -fsSL https://bun.sh/install | bash</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-2-package-managers\" class=\"mobile-header\">Method 2: Package Managers</h3>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest binary\nBUN_VERSION=$(curl -s https://api.github.com/repos/oven-sh/bun/releases/latest | grep tag_name | cut -d &#039;&quot;&#039; -f 4)\ncurl -LO &quot;https://github.com/oven-sh/bun/releases/download/${BUN_VERSION}/bun-linux-x64.zip&quot;\n\n# Extract and install\nunzip bun-linux-x64.zip\nsudo mv bun-linux-x64/bun /usr/local/bin/\nsudo chmod +x /usr/local/bin/bun\n\n# Create symlinks\nsudo ln -s /usr/local/bin/bun /usr/local/bin/bunx\n\n# Verify installation\nbun --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Debian/Ubuntu</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: Official script (recommended)\ncurl -fsSL https://bun.sh/install | bash\n\n# Method 2: Manual binary installation\nBUN_VERSION=$(curl -s https://api.github.com/repos/oven-sh/bun/releases/latest | grep tag_name | cut -d &#039;&quot;&#039; -f 4)\nwget &quot;https://github.com/oven-sh/bun/releases/download/${BUN_VERSION}/bun-linux-x64.zip&quot;\nunzip bun-linux-x64.zip\nsudo mv bun-linux-x64/bun /usr/local/bin/\nsudo chmod +x /usr/local/bin/bun\n\n# Add to PATH\necho &#039;export PATH=&quot;/usr/local/bin:$PATH&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR\nyay -S bun-bin\n\n# Or using paru\nparu -S bun-bin\n\n# Verify installation\nbun --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\napk add --no-cache curl unzip\n\n# Download Bun for musl\nBUN_VERSION=$(curl -s https://api.github.com/repos/oven-sh/bun/releases/latest | grep tag_name | cut -d &#039;&quot;&#039; -f 4)\ncurl -LO &quot;https://github.com/oven-sh/bun/releases/download/${BUN_VERSION}/bun-linux-x64-musl.zip&quot;\n\n# Extract and install\nunzip bun-linux-x64-musl.zip\nmv bun-linux-x64-musl/bun /usr/local/bin/\nchmod +x /usr/local/bin/bun\n\n# Create bunx symlink\nln -s /usr/local/bin/bun /usr/local/bin/bunx</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### openSUSE</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install via zypper (if available in future)\n# Currently use manual installation\nBUN_VERSION=$(curl -s https://api.github.com/repos/oven-sh/bun/releases/latest | grep tag_name | cut -d &#039;&quot;&#039; -f 4)\nwget &quot;https://github.com/oven-sh/bun/releases/download/${BUN_VERSION}/bun-linux-x64.zip&quot;\nunzip bun-linux-x64.zip\nsudo mv bun-linux-x64/bun /usr/local/bin/\nsudo chmod +x /usr/local/bin/bun</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### macOS</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: Official script\ncurl -fsSL https://bun.sh/install | bash\n\n# Method 2: Homebrew\nbrew tap oven-sh/bun\nbrew install bun\n\n# Method 3: MacPorts\nsudo port install bun\n\n# For Apple Silicon Macs\narch -arm64 brew install bun</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows (WSL2)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WSL2 with Ubuntu\nwsl --install -d Ubuntu\n\n# Inside WSL2\ncurl -fsSL https://bun.sh/install | bash\nsource ~/.bashrc\nbun --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-3-docker\" class=\"mobile-header\">Method 3: Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run Bun in Docker\ndocker run --rm -it oven/bun:latest\n\n# Create Dockerfile for Bun app\ncat &gt; Dockerfile &lt;&lt; &#039;EOF&#039;\nFROM oven/bun:1-alpine\nWORKDIR /app\nCOPY package.json bun.lockb ./\nRUN bun install --frozen-lockfile\nCOPY . .\nEXPOSE 3000\nCMD [&quot;bun&quot;, &quot;run&quot;, &quot;start&quot;]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"environment-configuration\" class=\"mobile-header\">Environment Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set Bun configuration directory\nexport BUN_INSTALL=&quot;$HOME/.bun&quot;\nexport PATH=&quot;$BUN_INSTALL/bin:$PATH&quot;\n\n# Configure runtime behavior\nexport BUN_CONFIG_MAX_HTTP_HEADER_SIZE=16384\nexport BUN_CONFIG_NO_CLEAR_TERMINAL_ON_RELOAD=1\n\n# Set registry mirror (for China/corporate networks)\nexport BUN_CONFIG_REGISTRY=&quot;https://registry.npmjs.org/&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"project-configuration\" class=\"mobile-header\">Project Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">bunfig.toml</code> for project-specific configuration:</p>\n<div class=\"mobile-code-block\" data-language=\"toml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">toml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-toml\"># bunfig.toml\n\n# Package manager settings\n[install]\n# Use exact versions\nexact = true\n\n# Install peer dependencies\npeer = true\n\n# Install dev dependencies\ndev = true\n\n# Registry settings\n[install.registry]\nurl = &quot;https://registry.npmjs.org&quot;\ntoken = &quot;$npm_token&quot;\n\n# Cache settings\n[install.cache]\ndir = &quot;~/.bun/install/cache&quot;\ndisable = false\n\n# Lockfile settings\n[install.lockfile]\nsave = true\n\n# Build settings\n[build]\ntarget = &quot;bun&quot;\noutdir = &quot;./dist&quot;\nsplitting = true\nsourcemap = &quot;external&quot;\n\n# Test settings\n[test]\npreload = &quot;./test/setup.ts&quot;\ntimeout = 5000</code></pre>\n      </div>\n    </div>\n<h3 id=\"packagejson-configuration\" class=\"mobile-header\">Package.json Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"json\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">json</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;my-bun-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;type&quot;: &quot;module&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;bun run server.ts&quot;,\n    &quot;dev&quot;: &quot;bun --watch run server.ts&quot;,\n    &quot;build&quot;: &quot;bun build ./src/index.ts --outdir ./dist&quot;,\n    &quot;test&quot;: &quot;bun test&quot;,\n    &quot;format&quot;: &quot;bunx prettier --write .&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;bun-types&quot;: &quot;latest&quot;\n  },\n  &quot;peerDependencies&quot;: {\n    &quot;typescript&quot;: &quot;^5.0.0&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"typescript-configuration\" class=\"mobile-header\">TypeScript Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">tsconfig.json</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"json\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">json</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;lib&quot;: [&quot;ESNext&quot;],\n    &quot;module&quot;: &quot;esnext&quot;,\n    &quot;target&quot;: &quot;esnext&quot;,\n    &quot;moduleResolution&quot;: &quot;bundler&quot;,\n    &quot;moduleDetection&quot;: &quot;force&quot;,\n    &quot;allowImportingTsExtensions&quot;: true,\n    &quot;noEmit&quot;: true,\n    &quot;composite&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;downlevelIteration&quot;: true,\n    &quot;skipLibCheck&quot;: true,\n    &quot;jsx&quot;: &quot;react-jsx&quot;,\n    &quot;allowSyntheticDefaultImports&quot;: true,\n    &quot;forceConsistentCasingInFileNames&quot;: true,\n    &quot;allowJs&quot;: true,\n    &quot;types&quot;: [\n      &quot;bun-types&quot;\n    ]\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-service-configuration\" class=\"mobile-header\">Systemd Service Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/systemd/system/bun-app.service</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=Bun Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=bunapp\nGroup=bunapp\nWorkingDirectory=/opt/bun-app\nExecStart=/usr/local/bin/bun run start\nRestart=always\nRestartSec=3\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/bun-app\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create bun user\nsudo useradd -r -s /bin/false -d /opt/bun-app bunapp\n\n# Set permissions\nsudo chown -R bunapp:bunapp /opt/bun-app\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now bun-app\nsudo systemctl status bun-app</code></pre>\n      </div>\n    </div>\n<h3 id=\"development-server\" class=\"mobile-header\">Development Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start development server with hot reload\nbun --watch run server.ts\n\n# Start with specific port\nPORT=3000 bun run server.ts\n\n# Start with debugging\nbun --inspect run server.ts\n\n# Start with performance profiling\nbun --profile run server.ts</code></pre>\n      </div>\n    </div>\n<h3 id=\"process-management-with-pm2\" class=\"mobile-header\">Process Management with PM2</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PM2 globally\nbun install -g pm2\n\n# Create ecosystem file\ncat &gt; ecosystem.config.js &lt;&lt; &#039;EOF&#039;\nmodule.exports = {\n  apps: [{\n    name: &#039;bun-app&#039;,\n    interpreter: &#039;bun&#039;,\n    script: &#039;server.ts&#039;,\n    cwd: &#039;/opt/bun-app&#039;,\n    instances: &#039;max&#039;,\n    exec_mode: &#039;cluster&#039;,\n    env: {\n      NODE_ENV: &#039;production&#039;,\n      PORT: 3000\n    },\n    error_file: &#039;./logs/err.log&#039;,\n    out_file: &#039;./logs/out.log&#039;,\n    log_file: &#039;./logs/combined.log&#039;,\n    time: true\n  }]\n};\nEOF\n\n# Start with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Installation failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check system architecture\nuname -m\n\n# Download correct binary\n# x64 for Intel/AMD\n# aarch64 for ARM64\n\n# Manual installation fallback\ncurl -fsSL https://bun.sh/install | bash -s &quot;bun-v1.0.0&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Package installation issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clear cache\nbun pm cache rm\n\n# Install with verbose output\nbun install --verbose\n\n# Use different registry\nbunx --registry https://registry.npmmirror.com install</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Module resolution errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check module resolution\nbun repl\n&gt; import.meta.resolve(&quot;package-name&quot;)\n\n# Debug module loading\nBUN_DEBUG=1 bun run script.ts\n\n# Clear module cache\nrm -rf ~/.bun/install/cache</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile application\nbun --profile run server.ts\n\n# Check memory usage\nbun --print process.memoryUsage()\n\n# Increase memory limit\nulimit -v unlimited</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-information\" class=\"mobile-header\">Debug Information</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get Bun information\nbun --version\nbun --revision\n\n# Check installation\nwhich bun\nls -la ~/.bun/bin/\n\n# Environment variables\nbun --print process.env\n\n# Test JavaScript engine\nbun eval &#039;console.log(process.versions)&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"runtime-security\" class=\"mobile-header\">Runtime Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run with limited permissions\nbun run --no-install server.ts\n\n# Disable shell access\nbun run --no-shell server.ts\n\n# Use strict mode\ncat &gt; server.ts &lt;&lt; &#039;EOF&#039;\n&quot;use strict&quot;;\n\n// Application code here\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"package-security\" class=\"mobile-header\">Package Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Audit dependencies\nbunx npm audit\n\n# Check for vulnerabilities\nbunx snyk test\n\n# Lock dependency versions\nbun install --frozen-lockfile\n\n# Verify package integrity\nbun pm hash</code></pre>\n      </div>\n    </div>\n<h3 id=\"production-deployment\" class=\"mobile-header\">Production Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production build\nbun build ./src/index.ts \\\n  --target=bun \\\n  --minify \\\n  --sourcemap=external \\\n  --outdir=./dist\n\n# Set production environment\nexport NODE_ENV=production\n\n# Disable source maps in production\nexport BUN_CONFIG_DISABLE_SOURCEMAPS=1</code></pre>\n      </div>\n    </div>\n<h3 id=\"secure-service-configuration\" class=\"mobile-header\">Secure Service Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Enhanced systemd security\n[Service]\n# ... existing configuration ...\n\n# Security hardening\nCapabilityBoundingSet=\nSystemCallFilter=@system-service\nSystemCallErrorNumber=EPERM\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\nRestrictRealtime=true\nRestrictNamespaces=true\nRestrictSUIDSGID=true\nRemoveIPC=true\nPrivateDevices=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"runtime-optimization\" class=\"mobile-header\">Runtime Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable JIT optimizations\nexport BUN_JSC_forceJIT=1\n\n# Configure garbage collection\nexport BUN_JSC_gcMaxHeapSize=2048\n\n# Use native code generation\nexport BUN_JSC_useBBQJIT=1\nexport BUN_JSC_useOMGJIT=1\n\n# Optimize for startup time\nexport BUN_JSC_useJIT=0  # Disable JIT for faster startup</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-performance\" class=\"mobile-header\">Application Performance</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// Use Bun&#039;s optimized APIs\nimport { serve } from &quot;bun&quot;;\n\nconst server = serve({\n  port: 3000,\n  fetch(request) {\n    return new Response(&quot;Hello from Bun!&quot;);\n  },\n  // Enable compression\n  compression: true,\n  // Set max request body size\n  maxRequestBodySize: 1024 * 1024 * 10, // 10MB\n});\n\n// Use native SQLite\nimport { Database } from &quot;bun:sqlite&quot;;\nconst db = new Database(&quot;mydb.sqlite&quot;);\n\n// Use Web Streams API\nconst file = Bun.file(&quot;large-file.txt&quot;);\nconst stream = file.stream();</code></pre>\n      </div>\n    </div>\n<h3 id=\"build-optimization\" class=\"mobile-header\">Build Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Production build with optimizations\nbun build ./src/index.ts \\\n  --target=bun \\\n  --minify \\\n  --splitting \\\n  --external react \\\n  --external react-dom \\\n  --outdir=./dist\n\n# Bundle for browsers\nbun build ./src/browser.ts \\\n  --target=browser \\\n  --minify \\\n  --splitting \\\n  --format=esm \\\n  --outdir=./public</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"project-backup\" class=\"mobile-header\">Project Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-bun-project.sh\n\nPROJECT_DIR=&quot;/opt/bun-app&quot;\nBACKUP_DIR=&quot;/var/backups/bun&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup project files\ntar -czf $BACKUP_DIR/bun_project_$DATE.tar.gz \\\n    -C $PROJECT_DIR \\\n    --exclude=&#039;node_modules&#039; \\\n    --exclude=&#039;.git&#039; \\\n    --exclude=&#039;dist&#039; \\\n    .\n\n# Backup lockfile separately\ncp $PROJECT_DIR/bun.lockb $BACKUP_DIR/bun.lockb.$DATE\n\necho &quot;Project backup completed: $BACKUP_DIR/bun_project_$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"dependency-management\" class=\"mobile-header\">Dependency Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate lockfile\nbun install --yarn\n\n# Verify lockfile integrity\nbun install --frozen-lockfile\n\n# Export dependency tree\nbun pm ls --all &gt; dependencies.txt\n\n# Backup global packages\nbun pm ls -g &gt; global-packages.txt</code></pre>\n      </div>\n    </div>\n<h3 id=\"migration-from-nodejs\" class=\"mobile-header\">Migration from Node.js</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# migrate-from-node.sh\n\n# Convert package-lock.json to bun.lockb\nbun install\n\n# Update scripts in package.json\nsed -i &#039;s/node /bun /g&#039; package.json\nsed -i &#039;s/npm run/bun run/g&#039; package.json\nsed -i &#039;s/npx /bunx /g&#039; package.json\n\n# Test compatibility\nbun test</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-system-requirements\" class=\"mobile-header\">10. System Requirements</h2>\n<h3 id=\"minimum-requirements\" class=\"mobile-header\">Minimum Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 1 core, 1.0 GHz x86_64/ARM64</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 256MB</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 50MB</li>\n<li class=\"mobile-list-item\"><strong>OS</strong>: Linux kernel 3.10+, macOS 12+</li>\n<h3 id=\"recommended-requirements\" class=\"mobile-header\">Recommended Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2+ cores, 2.0+ GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 1GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 1GB+ SSD</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Broadband for package downloads</li>\n<h3 id=\"enterprise-requirements\" class=\"mobile-header\">Enterprise Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4+ cores, 3.0+ GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 4GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 10GB+ NVMe</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Gigabit Ethernet</li>\n<h2 id=\"11-support\" class=\"mobile-header\">11. Support</h2>\n<h3 id=\"official-resources\" class=\"mobile-header\">Official Resources</h3>\n<li class=\"mobile-list-item\"><strong>Website</strong>: https://bun.sh</li>\n<li class=\"mobile-list-item\"><strong>GitHub</strong>: https://github.com/oven-sh/bun</li>\n<li class=\"mobile-list-item\"><strong>Documentation</strong>: https://bun.sh/docs</li>\n<li class=\"mobile-list-item\"><strong>Discord</strong>: https://bun.sh/discord</li>\n<h3 id=\"community-support\" class=\"mobile-header\">Community Support</h3>\n<li class=\"mobile-list-item\"><strong>Discord Server</strong>: https://discord.gg/CXdq2DP29u</li>\n<li class=\"mobile-list-item\"><strong>GitHub Discussions</strong>: https://github.com/oven-sh/bun/discussions</li>\n<li class=\"mobile-list-item\"><strong>Twitter/X</strong>: @bunjavascript</li>\n<li class=\"mobile-list-item\"><strong>Stack Overflow</strong>: [bun] tag</li>\n<h2 id=\"12-contributing\" class=\"mobile-header\">12. Contributing</h2>\n<h3 id=\"how-to-contribute\" class=\"mobile-header\">How to Contribute</h3>\n<p class=\"mobile-paragraph\">1. Fork the repository on GitHub</p>\n<p class=\"mobile-paragraph\">2. Create a feature branch</p>\n<p class=\"mobile-paragraph\">3. Submit pull request</p>\n<p class=\"mobile-paragraph\">4. Follow Zig and TypeScript coding standards</p>\n<p class=\"mobile-paragraph\">5. Include tests and benchmarks</p>\n<h3 id=\"development-setup\" class=\"mobile-header\">Development Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/oven-sh/bun.git\ncd bun\n\n# Install Zig\ncurl -fsSL https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz | tar xJ\n\n# Build Bun\nmake setup\nmake build\n\n# Run tests\nmake test</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-license\" class=\"mobile-header\">13. License</h2>\n<p class=\"mobile-paragraph\">Bun is licensed under the MIT License.</p>\n<p class=\"mobile-paragraph\">Key points:</p>\n<li class=\"mobile-list-item\">Free to use, modify, and distribute</li>\n<li class=\"mobile-list-item\">Commercial use allowed</li>\n<li class=\"mobile-list-item\">No warranty provided</li>\n<li class=\"mobile-list-item\">Attribution required</li>\n<h2 id=\"14-acknowledgments\" class=\"mobile-header\">14. Acknowledgments</h2>\n<h3 id=\"credits\" class=\"mobile-header\">Credits</h3>\n<li class=\"mobile-list-item\"><strong>Jarred Sumner</strong>: Creator and lead developer</li>\n<li class=\"mobile-list-item\"><strong>Oven Team</strong>: Core development team</li>\n<li class=\"mobile-list-item\"><strong>JavaScriptCore Team</strong>: JavaScript engine</li>\n<li class=\"mobile-list-item\"><strong>Zig Community</strong>: Systems programming language</li>\n<h2 id=\"15-version-history\" class=\"mobile-header\">15. Version History</h2>\n<h3 id=\"recent-releases\" class=\"mobile-header\">Recent Releases</h3>\n<li class=\"mobile-list-item\"><strong>v1.0.x</strong>: First stable release with production-ready features</li>\n<li class=\"mobile-list-item\"><strong>v0.8.x</strong>: Added bundler and test runner</li>\n<li class=\"mobile-list-item\"><strong>v0.7.x</strong>: Improved Node.js compatibility</li>\n<h3 id=\"major-features-by-version\" class=\"mobile-header\">Major Features by Version</h3>\n<li class=\"mobile-list-item\"><strong>v1.0</strong>: Production ready, stable API</li>\n<li class=\"mobile-list-item\"><strong>v0.8</strong>: Built-in bundler and test runner</li>\n<li class=\"mobile-list-item\"><strong>v0.6</strong>: Package manager implementation</li>\n<h2 id=\"16-appendices\" class=\"mobile-header\">16. Appendices</h2>\n<h3 id=\"a-quick-start-examples\" class=\"mobile-header\">A. Quick Start Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// server.ts - HTTP server\nimport { serve } from &quot;bun&quot;;\n\nserve({\n  port: 3000,\n  fetch(request) {\n    const url = new URL(request.url);\n    \n    if (url.pathname === &quot;/&quot;) {\n      return new Response(&quot;Welcome to Bun!&quot;);\n    }\n    \n    if (url.pathname === &quot;/json&quot;) {\n      return Response.json({ message: &quot;Hello from Bun!&quot; });\n    }\n    \n    return new Response(&quot;Not found&quot;, { status: 404 });\n  },\n});\n\nconsole.log(&quot;Server running at http://localhost:3000&quot;);</code></pre>\n      </div>\n    </div>\n<h3 id=\"b-testing-example\" class=\"mobile-header\">B. Testing Example</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// math.test.ts\nimport { expect, test, describe } from &quot;bun:test&quot;;\n\ndescribe(&quot;math operations&quot;, () =&gt; {\n  test(&quot;addition&quot;, () =&gt; {\n    expect(2 + 2).toBe(4);\n  });\n  \n  test(&quot;async test&quot;, async () =&gt; {\n    const result = await Promise.resolve(42);\n    expect(result).toBe(42);\n  });\n});\n\n// Run tests: bun test</code></pre>\n      </div>\n    </div>\n<h3 id=\"c-bundler-example\" class=\"mobile-header\">C. Bundler Example</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// build.ts\nawait Bun.build({\n  entrypoints: [&quot;./src/index.ts&quot;],\n  outdir: &quot;./dist&quot;,\n  target: &quot;browser&quot;,\n  splitting: true,\n  sourcemap: &quot;external&quot;,\n  minify: {\n    whitespace: true,\n    identifiers: true,\n    syntax: true,\n  },\n  external: [&quot;react&quot;, &quot;react-dom&quot;],\n});</code></pre>\n      </div>\n    </div>\n<h3 id=\"d-sqlite-example\" class=\"mobile-header\">D. SQLite Example</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// database.ts\nimport { Database } from &quot;bun:sqlite&quot;;\n\nconst db = new Database(&quot;myapp.db&quot;);\n\n// Create table\ndb.run(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL\n  )\n`);\n\n// Insert data\nconst insert = db.prepare(&quot;INSERT INTO users (name, email) VALUES (?, ?)&quot;);\ninsert.run(&quot;Alice&quot;, &quot;alice@example.com&quot;);\n\n// Query data\nconst users = db.query(&quot;SELECT * FROM users&quot;).all();\nconsole.log(users);\n\n// Close database\ndb.close();</code></pre>\n      </div>\n    </div>\n<h3 id=\"e-performance-comparison\" class=\"mobile-header\">E. Performance Comparison</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Benchmark script\ncat &gt; bench.js &lt;&lt; &#039;EOF&#039;\nconsole.time(&quot;startup&quot;);\nconsole.log(&quot;Hello, World!&quot;);\nconsole.timeEnd(&quot;startup&quot;);\nEOF\n\n# Compare startup times\ntime bun bench.js\ntime node bench.js\ntime deno run bench.js</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\">For more information and updates, visit https://github.com/howtomgr/bun</p>","readTime":"12 min","wordCount":2228,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":3,"text":"Hardware Requirements","id":"hardware-requirements"},{"level":3,"text":"Software Requirements","id":"software-requirements"},{"level":3,"text":"Network Requirements","id":"network-requirements"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Method 1: Official Installer (Recommended)","id":"method-1-official-installer-recommended"},{"level":3,"text":"Method 2: Package Managers","id":"method-2-package-managers"},{"level":3,"text":"Method 3: Docker","id":"method-3-docker"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Environment Configuration","id":"environment-configuration"},{"level":3,"text":"Project Configuration","id":"project-configuration"},{"level":3,"text":"Package.json Configuration","id":"packagejson-configuration"},{"level":3,"text":"TypeScript Configuration","id":"typescript-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"Systemd Service Configuration","id":"systemd-service-configuration"},{"level":3,"text":"Development Server","id":"development-server"},{"level":3,"text":"Process Management with PM2","id":"process-management-with-pm2"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Information","id":"debug-information"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"Runtime Security","id":"runtime-security"},{"level":3,"text":"Package Security","id":"package-security"},{"level":3,"text":"Production Deployment","id":"production-deployment"},{"level":3,"text":"Secure Service Configuration","id":"secure-service-configuration"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"Runtime Optimization","id":"runtime-optimization"},{"level":3,"text":"Application Performance","id":"application-performance"},{"level":3,"text":"Build Optimization","id":"build-optimization"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Project Backup","id":"project-backup"},{"level":3,"text":"Dependency Management","id":"dependency-management"},{"level":3,"text":"Migration from Node.js","id":"migration-from-nodejs"},{"level":2,"text":"10. System Requirements","id":"10-system-requirements"},{"level":3,"text":"Minimum Requirements","id":"minimum-requirements"},{"level":3,"text":"Recommended Requirements","id":"recommended-requirements"},{"level":3,"text":"Enterprise Requirements","id":"enterprise-requirements"},{"level":2,"text":"11. Support","id":"11-support"},{"level":3,"text":"Official Resources","id":"official-resources"},{"level":3,"text":"Community Support","id":"community-support"},{"level":2,"text":"12. Contributing","id":"12-contributing"},{"level":3,"text":"How to Contribute","id":"how-to-contribute"},{"level":3,"text":"Development Setup","id":"development-setup"},{"level":2,"text":"13. License","id":"13-license"},{"level":2,"text":"14. Acknowledgments","id":"14-acknowledgments"},{"level":3,"text":"Credits","id":"credits"},{"level":2,"text":"15. Version History","id":"15-version-history"},{"level":3,"text":"Recent Releases","id":"recent-releases"},{"level":3,"text":"Major Features by Version","id":"major-features-by-version"},{"level":2,"text":"16. Appendices","id":"16-appendices"},{"level":3,"text":"A. Quick Start Examples","id":"a-quick-start-examples"},{"level":3,"text":"B. Testing Example","id":"b-testing-example"},{"level":3,"text":"C. Bundler Example","id":"c-bundler-example"},{"level":3,"text":"D. SQLite Example","id":"d-sqlite-example"},{"level":3,"text":"E. Performance Comparison","id":"e-performance-comparison"}],"lastBuilt":"2025-10-25T18:17:15.779Z","metadataVersion":"2.0"},{"name":"deno","displayName":"Deno Installation Guide","slug":"deno","description":"Deno is a free and open-source modern runtime for JavaScript and TypeScript built on V8 and Rust. It serves as a FOSS alternative to Node.js, providing built-in TypeScript support, security-first design, web-standard APIs, and modern development features without package.json or node_modules.","category":"development-tools","subcategory":"javascript-runtimes","difficultyLevel":"beginner","estimatedSetupTime":"5-15 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","fedora","macos","windows"],"defaultPorts":[8000,3000,9229],"installationMethods":["official-installer","package-manager","binary-download","cargo-install"],"features":["multi-os-support","typescript-native","security-first","web-standards","single-executable","no-package-json","built-in-testing","built-in-formatting","top-level-await","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["javascript","typescript","runtime","nodejs-alternative","security","web-standards","v8","rust","modern"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"MIT","websiteUrl":"https://howtomgr.github.io/development-tools/deno","documentationUrl":"https://howtomgr.github.io/development-tools/deno","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/deno","updatedAt":"2025-09-16T17:07:29Z","createdAt":"2025-09-16T10:17:59Z","readmeRaw":"# Deno Installation Guide\n\nDeno is a free and open-source modern runtime for JavaScript and TypeScript built on V8 and Rust. It serves as a FOSS alternative to Node.js, providing built-in TypeScript support, security-first design, web-standard APIs, and modern development features without the need for package.json or node_modules. Deno offers a more secure and streamlined approach to server-side JavaScript development.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n### Hardware Requirements\n- **CPU**: Modern 64-bit processor (x86_64 or ARM64)\n- **RAM**: 512MB minimum (1GB+ recommended)\n- **Storage**: 100MB for Deno binary, additional for projects\n- **Network**: Internet connection for module downloads\n\n### Software Requirements\n- **Operating System**: Linux, macOS, or Windows\n- **Shell**: Bash, Zsh, or PowerShell for installation scripts\n- **Optional**: Git for version control\n\n### Network Requirements\n- **HTTPS**: Access to deno.land and GitHub for modules\n- **Ports**: Application-specific (commonly 8000, 3000)\n\n## 2. Supported Operating Systems\n\nDeno officially supports:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS\n- Arch Linux\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- Fedora 38+\n- macOS 10.15+ (Catalina and later)\n- Windows 10/11\n\n## 3. Installation\n\n### Method 1: Official Installer Script (Recommended)\n\n#### Linux/macOS\n```bash\n# Install Deno using official script\ncurl -fsSL https://deno.land/install.sh | sh\n\n# Add to PATH (add to ~/.bashrc or ~/.zshrc)\nexport DENO_INSTALL=\"$HOME/.deno\"\nexport PATH=\"$DENO_INSTALL/bin:$PATH\"\n\n# Reload shell configuration\nsource ~/.bashrc  # or ~/.zshrc\n\n# Verify installation\ndeno --version\n```\n\n#### Windows (PowerShell)\n```powershell\n# Install using PowerShell script\nirm https://deno.land/install.ps1 | iex\n\n# Add to PATH (automatic with installer)\n# Verify installation\ndeno --version\n```\n\n### Method 2: Package Managers\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install via GitHub releases\nDENO_VERSION=\"v1.40.0\"  # Check latest version\ncurl -LO \"https://github.com/denoland/deno/releases/download/${DENO_VERSION}/deno-x86_64-unknown-linux-gnu.zip\"\nunzip deno-x86_64-unknown-linux-gnu.zip\nsudo mv deno /usr/local/bin/\nsudo chmod +x /usr/local/bin/deno\n\n# Verify installation\ndeno --version\n```\n\n#### Debian/Ubuntu\n```bash\n# Method 1: Official script\ncurl -fsSL https://deno.land/install.sh | sh\n\n# Method 2: Download binary directly\nwget -qO- https://github.com/denoland/deno/releases/latest/download/deno-x86_64-unknown-linux-gnu.zip | \\\nsudo funzip > /usr/local/bin/deno\nsudo chmod +x /usr/local/bin/deno\n\n# Add to PATH\necho 'export PATH=\"$HOME/.deno/bin:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n```\n\n#### Arch Linux\n```bash\n# Install from official repositories\nsudo pacman -S deno\n\n# Or install from AUR (latest version)\nyay -S deno-bin\n\n# Verify installation\ndeno --version\n```\n\n#### Alpine Linux\n```bash\n# Install from community repository\napk add --no-cache deno\n\n# Or install manually\nwget https://github.com/denoland/deno/releases/latest/download/deno-x86_64-unknown-linux-gnu.zip\nunzip deno-x86_64-unknown-linux-gnu.zip\nmv deno /usr/local/bin/\nchmod +x /usr/local/bin/deno\n```\n\n#### openSUSE\n```bash\n# Install via zypper (if available)\nsudo zypper install deno\n\n# Or manual installation\nDENO_VERSION=\"v1.40.0\"\nwget \"https://github.com/denoland/deno/releases/download/${DENO_VERSION}/deno-x86_64-unknown-linux-gnu.zip\"\nunzip deno-x86_64-unknown-linux-gnu.zip\nsudo mv deno /usr/local/bin/\nsudo chmod +x /usr/local/bin/deno\n```\n\n#### macOS\n```bash\n# Method 1: Homebrew\nbrew install deno\n\n# Method 2: MacPorts\nsudo port install deno\n\n# Method 3: Official script\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n#### Windows\n```powershell\n# Method 1: Winget\nwinget install DenoLand.Deno\n\n# Method 2: Chocolatey\nchoco install deno\n\n# Method 3: Scoop\nscoop install deno\n```\n\n### Method 3: Cargo (Rust Package Manager)\n```bash\n# Install Rust if not already installed\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Install Deno from source\ncargo install deno --locked\n\n# Verify installation\ndeno --version\n```\n\n## 4. Configuration\n\n### Environment Configuration\n\n```bash\n# Set Deno configuration directory\nexport DENO_DIR=\"$HOME/.cache/deno\"\n\n# Configure permissions for development\nexport DENO_PERMISSIONS=\"--allow-net --allow-read --allow-write\"\n\n# Set TypeScript configuration\nexport DENO_TSCONFIG=\"./tsconfig.json\"\n\n# Configure import map\nexport DENO_IMPORT_MAP=\"./import_map.json\"\n```\n\n### Project Configuration\n\nCreate `deno.json` for project configuration:\n```json\n{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"lib\": [\"deno.window\"],\n    \"strict\": true\n  },\n  \"lint\": {\n    \"rules\": {\n      \"tags\": [\"recommended\"]\n    }\n  },\n  \"fmt\": {\n    \"files\": {\n      \"include\": [\"src/\"],\n      \"exclude\": [\"src/testdata/\"]\n    },\n    \"options\": {\n      \"useTabs\": false,\n      \"lineWidth\": 80,\n      \"indentWidth\": 2,\n      \"singleQuote\": true\n    }\n  },\n  \"tasks\": {\n    \"start\": \"deno run --allow-net --allow-read main.ts\",\n    \"dev\": \"deno run --allow-net --allow-read --watch main.ts\",\n    \"test\": \"deno test --allow-net --allow-read\"\n  },\n  \"imports\": {\n    \"std/\": \"https://deno.land/std@0.208.0/\",\n    \"oak\": \"https://deno.land/x/oak@v12.6.1/mod.ts\"\n  }\n}\n```\n\n### Import Map Configuration\n\nCreate `import_map.json`:\n```json\n{\n  \"imports\": {\n    \"std/\": \"https://deno.land/std@0.208.0/\",\n    \"oak\": \"https://deno.land/x/oak@v12.6.1/mod.ts\",\n    \"postgres\": \"https://deno.land/x/postgres@v0.17.0/mod.ts\",\n    \"redis\": \"https://deno.land/x/redis@v0.31.0/mod.ts\"\n  }\n}\n```\n\n## 5. Service Management\n\n### Systemd Service Configuration\n\nCreate `/etc/systemd/system/deno-app.service`:\n```ini\n[Unit]\nDescription=Deno Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=deno\nGroup=deno\nWorkingDirectory=/opt/deno-app\nExecStart=/usr/local/bin/deno run --allow-net --allow-read --allow-env main.ts\nRestart=always\nRestartSec=3\nEnvironment=DENO_DIR=/var/cache/deno\nEnvironment=PORT=8000\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```bash\n# Create deno user\nsudo useradd -r -s /bin/false -d /opt/deno-app deno\n\n# Set permissions\nsudo chown -R deno:deno /opt/deno-app\nsudo mkdir -p /var/cache/deno\nsudo chown -R deno:deno /var/cache/deno\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now deno-app\nsudo systemctl status deno-app\n```\n\n### Development Server\n\n```bash\n# Start development server with file watching\ndeno run --allow-net --allow-read --watch main.ts\n\n# Start with specific permissions\ndeno run --allow-net=:8000 --allow-read=./static main.ts\n\n# Start with all permissions (development only)\ndeno run -A main.ts\n```\n\n### Process Management with PM2\n\n```bash\n# Install PM2 for Deno\nnpm install -g pm2\n\n# Create PM2 ecosystem file\ncat > ecosystem.config.js << 'EOF'\nmodule.exports = {\n  apps: [{\n    name: 'deno-app',\n    script: 'deno',\n    args: 'run --allow-net --allow-read main.ts',\n    cwd: '/opt/deno-app',\n    instances: 'max',\n    exec_mode: 'cluster',\n    env: {\n      PORT: 8000,\n      DENO_DIR: '/var/cache/deno'\n    }\n  }]\n};\nEOF\n\n# Start with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Permission denied errors**:\n```bash\n# Check required permissions\ndeno info\n\n# Run with specific permissions\ndeno run --allow-net --allow-read --allow-write script.ts\n\n# Check which permissions are needed\ndeno run --unstable --allow-all --inspect script.ts\n```\n\n2. **Module resolution errors**:\n```bash\n# Clear Deno cache\ndeno cache --reload script.ts\n\n# Check module cache\ndeno info script.ts\n\n# Use import map for resolution\ndeno run --import-map=import_map.json script.ts\n```\n\n3. **TypeScript compilation errors**:\n```bash\n# Check TypeScript configuration\ndeno run --config tsconfig.json script.ts\n\n# Skip type checking (development)\ndeno run --no-check script.ts\n\n# Use specific TypeScript version\ndeno run --unstable script.ts\n```\n\n4. **Network timeout issues**:\n```bash\n# Increase download timeout\nexport DENO_TIMEOUT=60000\n\n# Use specific registry\ndeno run --import-map=import_map.json script.ts\n\n# Check network connectivity\ndeno run --allow-net -e \"console.log(await fetch('https://deno.land'))\"\n```\n\n### Debug Information\n\n```bash\n# Get Deno information\ndeno info\n\n# Check specific script dependencies\ndeno info main.ts\n\n# Enable debug logging\nRUST_LOG=debug deno run script.ts\n\n# Check cache location\necho $DENO_DIR\nls -la ~/.cache/deno/\n```\n\n## 7. Security Considerations\n\n### Permission Model\n\n```bash\n# Minimal permissions (recommended)\ndeno run --allow-net=api.example.com --allow-read=./data script.ts\n\n# File system permissions\ndeno run --allow-read=/var/data --allow-write=/tmp script.ts\n\n# Network permissions\ndeno run --allow-net=:8000,api.example.com script.ts\n\n# Environment variable access\ndeno run --allow-env=PORT,HOST script.ts\n```\n\n### Secure Deployment\n\n```bash\n# Create restricted user\nsudo useradd -r -s /bin/false -d /opt/deno-app deno-app\n\n# Set secure file permissions\nsudo chmod 750 /opt/deno-app\nsudo chown -R deno-app:deno-app /opt/deno-app\n\n# Use systemd security features\ncat > /etc/systemd/system/deno-app.service << 'EOF'\n[Unit]\nDescription=Deno Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=deno-app\nGroup=deno-app\nWorkingDirectory=/opt/deno-app\nExecStart=/usr/local/bin/deno run --allow-net=:8000 --allow-read=/opt/deno-app main.ts\nRestart=always\nRestartSec=3\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/deno-app\nCapabilityBoundingSet=\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n### Code Security\n\n```typescript\n// Validate environment variables\nconst port = parseInt(Deno.env.get(\"PORT\") || \"8000\");\nif (isNaN(port) || port < 1 || port > 65535) {\n  throw new Error(\"Invalid port number\");\n}\n\n// Sanitize inputs\nimport { escape } from \"https://deno.land/x/html_escape@v1.1.5/mod.ts\";\n\nfunction sanitizeInput(input: string): string {\n  return escape(input);\n}\n\n// Use HTTPS for external requests\nconst response = await fetch(\"https://api.example.com/data\", {\n  headers: {\n    \"User-Agent\": \"MyApp/1.0\"\n  }\n});\n```\n\n## 8. Performance Tuning\n\n### Runtime Optimization\n\n```bash\n# Enable V8 optimizations\ndeno run --v8-flags=\"--max-old-space-size=4096\" script.ts\n\n# Use Worker threads for CPU-intensive tasks\ndeno run --allow-worker script.ts\n\n# Enable JIT compilation\ndeno run --unstable --allow-all script.ts\n```\n\n### Application Performance\n\n```typescript\n// Use efficient JSON parsing\nimport { parse } from \"https://deno.land/std@0.208.0/jsonc/mod.ts\";\n\n// Implement caching\nconst cache = new Map<string, any>();\n\nfunction getCachedData(key: string) {\n  if (cache.has(key)) {\n    return cache.get(key);\n  }\n  \n  const data = expensiveOperation(key);\n  cache.set(key, data);\n  return data;\n}\n\n// Use streaming for large files\nconst file = await Deno.open(\"large-file.txt\");\nconst readable = file.readable;\n```\n\n### Memory Management\n\n```bash\n# Monitor memory usage\ndeno run --inspect=127.0.0.1:9229 script.ts\n\n# Set memory limits\ndeno run --v8-flags=\"--max-old-space-size=1024\" script.ts\n\n# Use WeakMap for memory-sensitive caches\nconst cache = new WeakMap();\n```\n\n## 9. Backup and Restore\n\n### Project Backup\n\n```bash\n#!/bin/bash\n# backup-deno-project.sh\n\nPROJECT_DIR=\"/opt/deno-app\"\nBACKUP_DIR=\"/var/backups/deno\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup project files\ntar -czf $BACKUP_DIR/deno_project_$DATE.tar.gz \\\n    -C $PROJECT_DIR \\\n    --exclude='.deno' \\\n    --exclude='node_modules' \\\n    .\n\n# Backup configuration\ncp /etc/systemd/system/deno-app.service $BACKUP_DIR/\n\necho \"Project backup completed: $BACKUP_DIR/deno_project_$DATE.tar.gz\"\n```\n\n### Cache Management\n\n```bash\n#!/bin/bash\n# backup-deno-cache.sh\n\nDENO_DIR=${DENO_DIR:-\"$HOME/.cache/deno\"}\nBACKUP_DIR=\"/var/backups/deno\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Backup Deno cache\ntar -czf $BACKUP_DIR/deno_cache_$DATE.tar.gz -C $DENO_DIR .\n\n# Clean old cache\ndeno cache --reload --lock=lock.json deps.ts\n```\n\n### Dependency Lock\n\n```bash\n# Generate lock file\ndeno cache --lock=lock.json --lock-write deps.ts\n\n# Verify integrity\ndeno cache --lock=lock.json deps.ts\n\n# Update dependencies\ndeno cache --reload --lock=lock.json --lock-write deps.ts\n```\n\n## 10. System Requirements\n\n### Minimum Requirements\n- **CPU**: 1 core, 1.0 GHz\n- **RAM**: 512MB\n- **Storage**: 100MB\n- **Network**: Broadband for module downloads\n\n### Recommended Requirements\n- **CPU**: 2+ cores, 2.0+ GHz\n- **RAM**: 2GB+\n- **Storage**: 1GB+ SSD\n- **Network**: High-speed for development\n\n### Enterprise Requirements\n- **CPU**: 4+ cores, 3.0+ GHz\n- **RAM**: 8GB+\n- **Storage**: 10GB+ NVMe\n- **Network**: Gigabit Ethernet\n\n## 11. Support\n\n### Official Resources\n- **Website**: https://deno.land\n- **GitHub**: https://github.com/denoland/deno\n- **Documentation**: https://deno.land/manual\n- **Standard Library**: https://deno.land/std\n\n### Community Support\n- **Discord**: https://discord.gg/deno\n- **Reddit**: r/Deno\n- **Stack Overflow**: [deno] tag\n- **GitHub Discussions**: https://github.com/denoland/deno/discussions\n\n## 12. Contributing\n\n### How to Contribute\n1. Fork the repository on GitHub\n2. Create a feature branch\n3. Submit pull request\n4. Follow Rust and TypeScript coding standards\n5. Include tests and documentation\n\n### Development Setup\n```bash\n# Clone repository\ngit clone https://github.com/denoland/deno.git\ncd deno\n\n# Install Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Build Deno\ncargo build\n\n# Run tests\ncargo test\n```\n\n## 13. License\n\nDeno is licensed under the MIT License.\n\nKey points:\n- Free to use, modify, and distribute\n- Commercial use allowed\n- No warranty provided\n- Attribution required\n\n## 14. Acknowledgments\n\n### Credits\n- **Deno Team**: Core development team led by Ryan Dahl\n- **Rust Community**: Language and ecosystem\n- **V8 Project**: JavaScript engine\n- **TypeScript Team**: Type system support\n\n## 15. Version History\n\n### Recent Releases\n- **v1.40.x**: Latest stable with performance improvements\n- **v1.39.x**: Enhanced TypeScript support\n- **v1.38.x**: Improved standard library\n\n### Major Features by Version\n- **v1.40**: Performance optimizations, better error messages\n- **v1.35**: Deno 2.0 preparation features\n- **v1.30**: Enhanced Web APIs support\n\n## 16. Appendices\n\n### A. Hello World Example\n\n```typescript\n// main.ts\nimport { serve } from \"https://deno.land/std@0.208.0/http/server.ts\";\n\nconst handler = (request: Request): Response => {\n  const body = `Hello, Deno! You requested ${request.url}`;\n  return new Response(body, { status: 200 });\n};\n\nconsole.log(\"Server running on http://localhost:8000\");\nawait serve(handler, { port: 8000 });\n```\n\n```bash\n# Run the server\ndeno run --allow-net main.ts\n```\n\n### B. REST API Example\n\n```typescript\n// api.ts\nimport { Application, Router } from \"https://deno.land/x/oak@v12.6.1/mod.ts\";\n\nconst router = new Router();\n\nrouter\n  .get(\"/\", (context) => {\n    context.response.body = \"Hello World!\";\n  })\n  .get(\"/api/users\", (context) => {\n    context.response.body = { users: [\"Alice\", \"Bob\"] };\n  })\n  .post(\"/api/users\", async (context) => {\n    const body = await context.request.body().value;\n    context.response.body = { created: body };\n  });\n\nconst app = new Application();\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log(\"API server running on http://localhost:3000\");\nawait app.listen({ port: 3000 });\n```\n\n### C. Database Integration\n\n```typescript\n// database.ts\nimport { Client } from \"https://deno.land/x/postgres@v0.17.0/mod.ts\";\n\nconst client = new Client({\n  user: \"user\",\n  database: \"test\",\n  hostname: \"localhost\",\n  password: \"password\",\n  port: 5432,\n});\n\nawait client.connect();\n\n// Query example\nconst result = await client.queryObject(\"SELECT * FROM users\");\nconsole.log(result.rows);\n\nawait client.end();\n```\n\n### D. Testing Example\n\n```typescript\n// test.ts\nimport { assertEquals } from \"https://deno.land/std@0.208.0/testing/asserts.ts\";\n\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\nDeno.test(\"addition test\", () => {\n  assertEquals(add(2, 3), 5);\n});\n\nDeno.test(\"async test\", async () => {\n  const response = await fetch(\"https://httpbin.org/json\");\n  assertEquals(response.status, 200);\n});\n```\n\n```bash\n# Run tests\ndeno test --allow-net\n```\n\n---\n\nFor more information and updates, visit https://github.com/howtomgr/deno","readmeHtml":"<p class=\"mobile-paragraph\">Deno is a free and open-source modern runtime for JavaScript and TypeScript built on V8 and Rust. It serves as a FOSS alternative to Node.js, providing built-in TypeScript support, security-first design, web-standard APIs, and modern development features without the need for package.json or node_modules. Deno offers a more secure and streamlined approach to server-side JavaScript development.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<h3 id=\"hardware-requirements\" class=\"mobile-header\">Hardware Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: Modern 64-bit processor (x86_64 or ARM64)</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 512MB minimum (1GB+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 100MB for Deno binary, additional for projects</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Internet connection for module downloads</li>\n<h3 id=\"software-requirements\" class=\"mobile-header\">Software Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux, macOS, or Windows</li>\n<li class=\"mobile-list-item\"><strong>Shell</strong>: Bash, Zsh, or PowerShell for installation scripts</li>\n<li class=\"mobile-list-item\"><strong>Optional</strong>: Git for version control</li>\n<h3 id=\"network-requirements\" class=\"mobile-header\">Network Requirements</h3>\n<li class=\"mobile-list-item\"><strong>HTTPS</strong>: Access to deno.land and GitHub for modules</li>\n<li class=\"mobile-list-item\"><strong>Ports</strong>: Application-specific (commonly 8000, 3000)</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">Deno officially supports:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">Fedora 38+</li>\n<li class=\"mobile-list-item\">macOS 10.15+ (Catalina and later)</li>\n<li class=\"mobile-list-item\">Windows 10/11</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"method-1-official-installer-script-recommended\" class=\"mobile-header\">Method 1: Official Installer Script (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Linux/macOS</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Deno using official script\ncurl -fsSL https://deno.land/install.sh | sh\n\n# Add to PATH (add to ~/.bashrc or ~/.zshrc)\nexport DENO_INSTALL=&quot;$HOME/.deno&quot;\nexport PATH=&quot;$DENO_INSTALL/bin:$PATH&quot;\n\n# Reload shell configuration\nsource ~/.bashrc  # or ~/.zshrc\n\n# Verify installation\ndeno --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows (PowerShell)</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Install using PowerShell script\nirm https://deno.land/install.ps1 | iex\n\n# Add to PATH (automatic with installer)\n# Verify installation\ndeno --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-2-package-managers\" class=\"mobile-header\">Method 2: Package Managers</h3>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install via GitHub releases\nDENO_VERSION=&quot;v1.40.0&quot;  # Check latest version\ncurl -LO &quot;https://github.com/denoland/deno/releases/download/${DENO_VERSION}/deno-x86_64-unknown-linux-gnu.zip&quot;\nunzip deno-x86_64-unknown-linux-gnu.zip\nsudo mv deno /usr/local/bin/\nsudo chmod +x /usr/local/bin/deno\n\n# Verify installation\ndeno --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Debian/Ubuntu</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: Official script\ncurl -fsSL https://deno.land/install.sh | sh\n\n# Method 2: Download binary directly\nwget -qO- https://github.com/denoland/deno/releases/latest/download/deno-x86_64-unknown-linux-gnu.zip | \\\nsudo funzip &gt; /usr/local/bin/deno\nsudo chmod +x /usr/local/bin/deno\n\n# Add to PATH\necho &#039;export PATH=&quot;$HOME/.deno/bin:$PATH&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from official repositories\nsudo pacman -S deno\n\n# Or install from AUR (latest version)\nyay -S deno-bin\n\n# Verify installation\ndeno --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from community repository\napk add --no-cache deno\n\n# Or install manually\nwget https://github.com/denoland/deno/releases/latest/download/deno-x86_64-unknown-linux-gnu.zip\nunzip deno-x86_64-unknown-linux-gnu.zip\nmv deno /usr/local/bin/\nchmod +x /usr/local/bin/deno</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### openSUSE</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install via zypper (if available)\nsudo zypper install deno\n\n# Or manual installation\nDENO_VERSION=&quot;v1.40.0&quot;\nwget &quot;https://github.com/denoland/deno/releases/download/${DENO_VERSION}/deno-x86_64-unknown-linux-gnu.zip&quot;\nunzip deno-x86_64-unknown-linux-gnu.zip\nsudo mv deno /usr/local/bin/\nsudo chmod +x /usr/local/bin/deno</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### macOS</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: Homebrew\nbrew install deno\n\n# Method 2: MacPorts\nsudo port install deno\n\n# Method 3: Official script\ncurl -fsSL https://deno.land/install.sh | sh</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Winget\nwinget install DenoLand.Deno\n\n# Method 2: Chocolatey\nchoco install deno\n\n# Method 3: Scoop\nscoop install deno</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-3-cargo-rust-package-manager\" class=\"mobile-header\">Method 3: Cargo (Rust Package Manager)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Rust if not already installed\ncurl --proto &#039;=https&#039; --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Install Deno from source\ncargo install deno --locked\n\n# Verify installation\ndeno --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"environment-configuration\" class=\"mobile-header\">Environment Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set Deno configuration directory\nexport DENO_DIR=&quot;$HOME/.cache/deno&quot;\n\n# Configure permissions for development\nexport DENO_PERMISSIONS=&quot;--allow-net --allow-read --allow-write&quot;\n\n# Set TypeScript configuration\nexport DENO_TSCONFIG=&quot;./tsconfig.json&quot;\n\n# Configure import map\nexport DENO_IMPORT_MAP=&quot;./import_map.json&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"project-configuration\" class=\"mobile-header\">Project Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">deno.json</code> for project configuration:</p>\n<div class=\"mobile-code-block\" data-language=\"json\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">json</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;allowJs&quot;: true,\n    &quot;lib&quot;: [&quot;deno.window&quot;],\n    &quot;strict&quot;: true\n  },\n  &quot;lint&quot;: {\n    &quot;rules&quot;: {\n      &quot;tags&quot;: [&quot;recommended&quot;]\n    }\n  },\n  &quot;fmt&quot;: {\n    &quot;files&quot;: {\n      &quot;include&quot;: [&quot;src/&quot;],\n      &quot;exclude&quot;: [&quot;src/testdata/&quot;]\n    },\n    &quot;options&quot;: {\n      &quot;useTabs&quot;: false,\n      &quot;lineWidth&quot;: 80,\n      &quot;indentWidth&quot;: 2,\n      &quot;singleQuote&quot;: true\n    }\n  },\n  &quot;tasks&quot;: {\n    &quot;start&quot;: &quot;deno run --allow-net --allow-read main.ts&quot;,\n    &quot;dev&quot;: &quot;deno run --allow-net --allow-read --watch main.ts&quot;,\n    &quot;test&quot;: &quot;deno test --allow-net --allow-read&quot;\n  },\n  &quot;imports&quot;: {\n    &quot;std/&quot;: &quot;https://deno.land/std@0.208.0/&quot;,\n    &quot;oak&quot;: &quot;https://deno.land/x/oak@v12.6.1/mod.ts&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"import-map-configuration\" class=\"mobile-header\">Import Map Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">import_map.json</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"json\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">json</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-json\">{\n  &quot;imports&quot;: {\n    &quot;std/&quot;: &quot;https://deno.land/std@0.208.0/&quot;,\n    &quot;oak&quot;: &quot;https://deno.land/x/oak@v12.6.1/mod.ts&quot;,\n    &quot;postgres&quot;: &quot;https://deno.land/x/postgres@v0.17.0/mod.ts&quot;,\n    &quot;redis&quot;: &quot;https://deno.land/x/redis@v0.31.0/mod.ts&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-service-configuration\" class=\"mobile-header\">Systemd Service Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/systemd/system/deno-app.service</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=Deno Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=deno\nGroup=deno\nWorkingDirectory=/opt/deno-app\nExecStart=/usr/local/bin/deno run --allow-net --allow-read --allow-env main.ts\nRestart=always\nRestartSec=3\nEnvironment=DENO_DIR=/var/cache/deno\nEnvironment=PORT=8000\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create deno user\nsudo useradd -r -s /bin/false -d /opt/deno-app deno\n\n# Set permissions\nsudo chown -R deno:deno /opt/deno-app\nsudo mkdir -p /var/cache/deno\nsudo chown -R deno:deno /var/cache/deno\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now deno-app\nsudo systemctl status deno-app</code></pre>\n      </div>\n    </div>\n<h3 id=\"development-server\" class=\"mobile-header\">Development Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start development server with file watching\ndeno run --allow-net --allow-read --watch main.ts\n\n# Start with specific permissions\ndeno run --allow-net=:8000 --allow-read=./static main.ts\n\n# Start with all permissions (development only)\ndeno run -A main.ts</code></pre>\n      </div>\n    </div>\n<h3 id=\"process-management-with-pm2\" class=\"mobile-header\">Process Management with PM2</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PM2 for Deno\nnpm install -g pm2\n\n# Create PM2 ecosystem file\ncat &gt; ecosystem.config.js &lt;&lt; &#039;EOF&#039;\nmodule.exports = {\n  apps: [{\n    name: &#039;deno-app&#039;,\n    script: &#039;deno&#039;,\n    args: &#039;run --allow-net --allow-read main.ts&#039;,\n    cwd: &#039;/opt/deno-app&#039;,\n    instances: &#039;max&#039;,\n    exec_mode: &#039;cluster&#039;,\n    env: {\n      PORT: 8000,\n      DENO_DIR: &#039;/var/cache/deno&#039;\n    }\n  }]\n};\nEOF\n\n# Start with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Permission denied errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check required permissions\ndeno info\n\n# Run with specific permissions\ndeno run --allow-net --allow-read --allow-write script.ts\n\n# Check which permissions are needed\ndeno run --unstable --allow-all --inspect script.ts</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Module resolution errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clear Deno cache\ndeno cache --reload script.ts\n\n# Check module cache\ndeno info script.ts\n\n# Use import map for resolution\ndeno run --import-map=import_map.json script.ts</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>TypeScript compilation errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check TypeScript configuration\ndeno run --config tsconfig.json script.ts\n\n# Skip type checking (development)\ndeno run --no-check script.ts\n\n# Use specific TypeScript version\ndeno run --unstable script.ts</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Network timeout issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase download timeout\nexport DENO_TIMEOUT=60000\n\n# Use specific registry\ndeno run --import-map=import_map.json script.ts\n\n# Check network connectivity\ndeno run --allow-net -e &quot;console.log(await fetch(&#039;https://deno.land&#039;))&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-information\" class=\"mobile-header\">Debug Information</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get Deno information\ndeno info\n\n# Check specific script dependencies\ndeno info main.ts\n\n# Enable debug logging\nRUST_LOG=debug deno run script.ts\n\n# Check cache location\necho $DENO_DIR\nls -la ~/.cache/deno/</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"permission-model\" class=\"mobile-header\">Permission Model</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Minimal permissions (recommended)\ndeno run --allow-net=api.example.com --allow-read=./data script.ts\n\n# File system permissions\ndeno run --allow-read=/var/data --allow-write=/tmp script.ts\n\n# Network permissions\ndeno run --allow-net=:8000,api.example.com script.ts\n\n# Environment variable access\ndeno run --allow-env=PORT,HOST script.ts</code></pre>\n      </div>\n    </div>\n<h3 id=\"secure-deployment\" class=\"mobile-header\">Secure Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create restricted user\nsudo useradd -r -s /bin/false -d /opt/deno-app deno-app\n\n# Set secure file permissions\nsudo chmod 750 /opt/deno-app\nsudo chown -R deno-app:deno-app /opt/deno-app\n\n# Use systemd security features\ncat &gt; /etc/systemd/system/deno-app.service &lt;&lt; &#039;EOF&#039;\n[Unit]\nDescription=Deno Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=deno-app\nGroup=deno-app\nWorkingDirectory=/opt/deno-app\nExecStart=/usr/local/bin/deno run --allow-net=:8000 --allow-read=/opt/deno-app main.ts\nRestart=always\nRestartSec=3\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/deno-app\nCapabilityBoundingSet=\n\n[Install]\nWantedBy=multi-user.target\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"code-security\" class=\"mobile-header\">Code Security</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// Validate environment variables\nconst port = parseInt(Deno.env.get(&quot;PORT&quot;) || &quot;8000&quot;);\nif (isNaN(port) || port &lt; 1 || port &gt; 65535) {\n  throw new Error(&quot;Invalid port number&quot;);\n}\n\n// Sanitize inputs\nimport { escape } from &quot;https://deno.land/x/html_escape@v1.1.5/mod.ts&quot;;\n\nfunction sanitizeInput(input: string): string {\n  return escape(input);\n}\n\n// Use HTTPS for external requests\nconst response = await fetch(&quot;https://api.example.com/data&quot;, {\n  headers: {\n    &quot;User-Agent&quot;: &quot;MyApp/1.0&quot;\n  }\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"runtime-optimization\" class=\"mobile-header\">Runtime Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable V8 optimizations\ndeno run --v8-flags=&quot;--max-old-space-size=4096&quot; script.ts\n\n# Use Worker threads for CPU-intensive tasks\ndeno run --allow-worker script.ts\n\n# Enable JIT compilation\ndeno run --unstable --allow-all script.ts</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-performance\" class=\"mobile-header\">Application Performance</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// Use efficient JSON parsing\nimport { parse } from &quot;https://deno.land/std@0.208.0/jsonc/mod.ts&quot;;\n\n// Implement caching\nconst cache = new Map&lt;string, any&gt;();\n\nfunction getCachedData(key: string) {\n  if (cache.has(key)) {\n    return cache.get(key);\n  }\n  \n  const data = expensiveOperation(key);\n  cache.set(key, data);\n  return data;\n}\n\n// Use streaming for large files\nconst file = await Deno.open(&quot;large-file.txt&quot;);\nconst readable = file.readable;</code></pre>\n      </div>\n    </div>\n<h3 id=\"memory-management\" class=\"mobile-header\">Memory Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor memory usage\ndeno run --inspect=127.0.0.1:9229 script.ts\n\n# Set memory limits\ndeno run --v8-flags=&quot;--max-old-space-size=1024&quot; script.ts\n\n# Use WeakMap for memory-sensitive caches\nconst cache = new WeakMap();</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"project-backup\" class=\"mobile-header\">Project Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-deno-project.sh\n\nPROJECT_DIR=&quot;/opt/deno-app&quot;\nBACKUP_DIR=&quot;/var/backups/deno&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup project files\ntar -czf $BACKUP_DIR/deno_project_$DATE.tar.gz \\\n    -C $PROJECT_DIR \\\n    --exclude=&#039;.deno&#039; \\\n    --exclude=&#039;node_modules&#039; \\\n    .\n\n# Backup configuration\ncp /etc/systemd/system/deno-app.service $BACKUP_DIR/\n\necho &quot;Project backup completed: $BACKUP_DIR/deno_project_$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"cache-management\" class=\"mobile-header\">Cache Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-deno-cache.sh\n\nDENO_DIR=${DENO_DIR:-&quot;$HOME/.cache/deno&quot;}\nBACKUP_DIR=&quot;/var/backups/deno&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Backup Deno cache\ntar -czf $BACKUP_DIR/deno_cache_$DATE.tar.gz -C $DENO_DIR .\n\n# Clean old cache\ndeno cache --reload --lock=lock.json deps.ts</code></pre>\n      </div>\n    </div>\n<h3 id=\"dependency-lock\" class=\"mobile-header\">Dependency Lock</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate lock file\ndeno cache --lock=lock.json --lock-write deps.ts\n\n# Verify integrity\ndeno cache --lock=lock.json deps.ts\n\n# Update dependencies\ndeno cache --reload --lock=lock.json --lock-write deps.ts</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-system-requirements\" class=\"mobile-header\">10. System Requirements</h2>\n<h3 id=\"minimum-requirements\" class=\"mobile-header\">Minimum Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 1 core, 1.0 GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 512MB</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 100MB</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Broadband for module downloads</li>\n<h3 id=\"recommended-requirements\" class=\"mobile-header\">Recommended Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2+ cores, 2.0+ GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 2GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 1GB+ SSD</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: High-speed for development</li>\n<h3 id=\"enterprise-requirements\" class=\"mobile-header\">Enterprise Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4+ cores, 3.0+ GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 8GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 10GB+ NVMe</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Gigabit Ethernet</li>\n<h2 id=\"11-support\" class=\"mobile-header\">11. Support</h2>\n<h3 id=\"official-resources\" class=\"mobile-header\">Official Resources</h3>\n<li class=\"mobile-list-item\"><strong>Website</strong>: https://deno.land</li>\n<li class=\"mobile-list-item\"><strong>GitHub</strong>: https://github.com/denoland/deno</li>\n<li class=\"mobile-list-item\"><strong>Documentation</strong>: https://deno.land/manual</li>\n<li class=\"mobile-list-item\"><strong>Standard Library</strong>: https://deno.land/std</li>\n<h3 id=\"community-support\" class=\"mobile-header\">Community Support</h3>\n<li class=\"mobile-list-item\"><strong>Discord</strong>: https://discord.gg/deno</li>\n<li class=\"mobile-list-item\"><strong>Reddit</strong>: r/Deno</li>\n<li class=\"mobile-list-item\"><strong>Stack Overflow</strong>: [deno] tag</li>\n<li class=\"mobile-list-item\"><strong>GitHub Discussions</strong>: https://github.com/denoland/deno/discussions</li>\n<h2 id=\"12-contributing\" class=\"mobile-header\">12. Contributing</h2>\n<h3 id=\"how-to-contribute\" class=\"mobile-header\">How to Contribute</h3>\n<p class=\"mobile-paragraph\">1. Fork the repository on GitHub</p>\n<p class=\"mobile-paragraph\">2. Create a feature branch</p>\n<p class=\"mobile-paragraph\">3. Submit pull request</p>\n<p class=\"mobile-paragraph\">4. Follow Rust and TypeScript coding standards</p>\n<p class=\"mobile-paragraph\">5. Include tests and documentation</p>\n<h3 id=\"development-setup\" class=\"mobile-header\">Development Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/denoland/deno.git\ncd deno\n\n# Install Rust\ncurl --proto &#039;=https&#039; --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Build Deno\ncargo build\n\n# Run tests\ncargo test</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-license\" class=\"mobile-header\">13. License</h2>\n<p class=\"mobile-paragraph\">Deno is licensed under the MIT License.</p>\n<p class=\"mobile-paragraph\">Key points:</p>\n<li class=\"mobile-list-item\">Free to use, modify, and distribute</li>\n<li class=\"mobile-list-item\">Commercial use allowed</li>\n<li class=\"mobile-list-item\">No warranty provided</li>\n<li class=\"mobile-list-item\">Attribution required</li>\n<h2 id=\"14-acknowledgments\" class=\"mobile-header\">14. Acknowledgments</h2>\n<h3 id=\"credits\" class=\"mobile-header\">Credits</h3>\n<li class=\"mobile-list-item\"><strong>Deno Team</strong>: Core development team led by Ryan Dahl</li>\n<li class=\"mobile-list-item\"><strong>Rust Community</strong>: Language and ecosystem</li>\n<li class=\"mobile-list-item\"><strong>V8 Project</strong>: JavaScript engine</li>\n<li class=\"mobile-list-item\"><strong>TypeScript Team</strong>: Type system support</li>\n<h2 id=\"15-version-history\" class=\"mobile-header\">15. Version History</h2>\n<h3 id=\"recent-releases\" class=\"mobile-header\">Recent Releases</h3>\n<li class=\"mobile-list-item\"><strong>v1.40.x</strong>: Latest stable with performance improvements</li>\n<li class=\"mobile-list-item\"><strong>v1.39.x</strong>: Enhanced TypeScript support</li>\n<li class=\"mobile-list-item\"><strong>v1.38.x</strong>: Improved standard library</li>\n<h3 id=\"major-features-by-version\" class=\"mobile-header\">Major Features by Version</h3>\n<li class=\"mobile-list-item\"><strong>v1.40</strong>: Performance optimizations, better error messages</li>\n<li class=\"mobile-list-item\"><strong>v1.35</strong>: Deno 2.0 preparation features</li>\n<li class=\"mobile-list-item\"><strong>v1.30</strong>: Enhanced Web APIs support</li>\n<h2 id=\"16-appendices\" class=\"mobile-header\">16. Appendices</h2>\n<h3 id=\"a-hello-world-example\" class=\"mobile-header\">A. Hello World Example</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// main.ts\nimport { serve } from &quot;https://deno.land/std@0.208.0/http/server.ts&quot;;\n\nconst handler = (request: Request): Response =&gt; {\n  const body = `Hello, Deno! You requested ${request.url}`;\n  return new Response(body, { status: 200 });\n};\n\nconsole.log(&quot;Server running on http://localhost:8000&quot;);\nawait serve(handler, { port: 8000 });</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run the server\ndeno run --allow-net main.ts</code></pre>\n      </div>\n    </div>\n<h3 id=\"b-rest-api-example\" class=\"mobile-header\">B. REST API Example</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// api.ts\nimport { Application, Router } from &quot;https://deno.land/x/oak@v12.6.1/mod.ts&quot;;\n\nconst router = new Router();\n\nrouter\n  .get(&quot;/&quot;, (context) =&gt; {\n    context.response.body = &quot;Hello World!&quot;;\n  })\n  .get(&quot;/api/users&quot;, (context) =&gt; {\n    context.response.body = { users: [&quot;Alice&quot;, &quot;Bob&quot;] };\n  })\n  .post(&quot;/api/users&quot;, async (context) =&gt; {\n    const body = await context.request.body().value;\n    context.response.body = { created: body };\n  });\n\nconst app = new Application();\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log(&quot;API server running on http://localhost:3000&quot;);\nawait app.listen({ port: 3000 });</code></pre>\n      </div>\n    </div>\n<h3 id=\"c-database-integration\" class=\"mobile-header\">C. Database Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// database.ts\nimport { Client } from &quot;https://deno.land/x/postgres@v0.17.0/mod.ts&quot;;\n\nconst client = new Client({\n  user: &quot;user&quot;,\n  database: &quot;test&quot;,\n  hostname: &quot;localhost&quot;,\n  password: &quot;password&quot;,\n  port: 5432,\n});\n\nawait client.connect();\n\n// Query example\nconst result = await client.queryObject(&quot;SELECT * FROM users&quot;);\nconsole.log(result.rows);\n\nawait client.end();</code></pre>\n      </div>\n    </div>\n<h3 id=\"d-testing-example\" class=\"mobile-header\">D. Testing Example</h3>\n<div class=\"mobile-code-block\" data-language=\"typescript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">typescript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-typescript\">// test.ts\nimport { assertEquals } from &quot;https://deno.land/std@0.208.0/testing/asserts.ts&quot;;\n\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\nDeno.test(&quot;addition test&quot;, () =&gt; {\n  assertEquals(add(2, 3), 5);\n});\n\nDeno.test(&quot;async test&quot;, async () =&gt; {\n  const response = await fetch(&quot;https://httpbin.org/json&quot;);\n  assertEquals(response.status, 200);\n});</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run tests\ndeno test --allow-net</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\">For more information and updates, visit https://github.com/howtomgr/deno</p>","readTime":"11 min","wordCount":2018,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":3,"text":"Hardware Requirements","id":"hardware-requirements"},{"level":3,"text":"Software Requirements","id":"software-requirements"},{"level":3,"text":"Network Requirements","id":"network-requirements"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Method 1: Official Installer Script (Recommended)","id":"method-1-official-installer-script-recommended"},{"level":3,"text":"Method 2: Package Managers","id":"method-2-package-managers"},{"level":3,"text":"Method 3: Cargo (Rust Package Manager)","id":"method-3-cargo-rust-package-manager"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Environment Configuration","id":"environment-configuration"},{"level":3,"text":"Project Configuration","id":"project-configuration"},{"level":3,"text":"Import Map Configuration","id":"import-map-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"Systemd Service Configuration","id":"systemd-service-configuration"},{"level":3,"text":"Development Server","id":"development-server"},{"level":3,"text":"Process Management with PM2","id":"process-management-with-pm2"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Information","id":"debug-information"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"Permission Model","id":"permission-model"},{"level":3,"text":"Secure Deployment","id":"secure-deployment"},{"level":3,"text":"Code Security","id":"code-security"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"Runtime Optimization","id":"runtime-optimization"},{"level":3,"text":"Application Performance","id":"application-performance"},{"level":3,"text":"Memory Management","id":"memory-management"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Project Backup","id":"project-backup"},{"level":3,"text":"Cache Management","id":"cache-management"},{"level":3,"text":"Dependency Lock","id":"dependency-lock"},{"level":2,"text":"10. System Requirements","id":"10-system-requirements"},{"level":3,"text":"Minimum Requirements","id":"minimum-requirements"},{"level":3,"text":"Recommended Requirements","id":"recommended-requirements"},{"level":3,"text":"Enterprise Requirements","id":"enterprise-requirements"},{"level":2,"text":"11. Support","id":"11-support"},{"level":3,"text":"Official Resources","id":"official-resources"},{"level":3,"text":"Community Support","id":"community-support"},{"level":2,"text":"12. Contributing","id":"12-contributing"},{"level":3,"text":"How to Contribute","id":"how-to-contribute"},{"level":3,"text":"Development Setup","id":"development-setup"},{"level":2,"text":"13. License","id":"13-license"},{"level":2,"text":"14. Acknowledgments","id":"14-acknowledgments"},{"level":3,"text":"Credits","id":"credits"},{"level":2,"text":"15. Version History","id":"15-version-history"},{"level":3,"text":"Recent Releases","id":"recent-releases"},{"level":3,"text":"Major Features by Version","id":"major-features-by-version"},{"level":2,"text":"16. Appendices","id":"16-appendices"},{"level":3,"text":"A. Hello World Example","id":"a-hello-world-example"},{"level":3,"text":"B. REST API Example","id":"b-rest-api-example"},{"level":3,"text":"C. Database Integration","id":"c-database-integration"},{"level":3,"text":"D. Testing Example","id":"d-testing-example"}],"lastBuilt":"2025-10-25T18:16:52.396Z","metadataVersion":"2.0"}]},"__N_SSG":true}