{"pageProps":{"category":{"key":"media","name":"Media","description":"Media tools and applications","icon":"ðŸŽ¬","color":"#6272a4"},"guides":[{"name":"immich","displayName":"Immich Installation Guide","slug":"immich","description":"Immich is a free and open-source self-hosted photo and video management solution. It serves as a FOSS alternative to cloud-based photo services like Google Photos, Apple iCloud Photos, Amazon Photos, or Dropbox Photos, providing automatic backup, facial recognition, object detection, and advanced search while ensuring complete privacy and data ownership.","category":"media","subcategory":"photo-management","difficultyLevel":"intermediate","estimatedSetupTime":"30-60 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","windows"],"defaultPorts":[2283,2284],"installationMethods":["docker-compose","native-packages"],"features":["multi-os-support","self-hosted","photo-management","video-management","facial-recognition","object-detection","mobile-sync","machine-learning","privacy-focused","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["photos","videos","self-hosted","privacy","google-photos-alternative","facial-recognition","machine-learning","mobile-backup","media-management"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"AGPL-3.0","websiteUrl":"https://howtomgr.github.io/media/immich","documentationUrl":"https://howtomgr.github.io/media/immich","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/immich","updatedAt":"2025-09-16T17:20:21Z","createdAt":"2025-09-16T10:31:27Z","readmeRaw":"# Immich Installation Guide\n\nImmich is a free and open-source self-hosted photo and video management solution. It serves as a FOSS alternative to cloud-based photo services like Google Photos, Apple iCloud Photos, Amazon Photos, Dropbox Photos, or OneDrive Photos. Immich provides automatic backup from mobile devices, facial recognition, object detection, and advanced search capabilities while keeping your photos under your complete control and ensuring privacy.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n### Hardware Requirements\n- **CPU**: 4+ cores (8+ recommended for ML features)\n- **RAM**: 4GB minimum (8GB+ recommended)\n- **Storage**: 100GB+ for photos/videos (plan for growth)\n- **GPU**: Optional but recommended for machine learning acceleration\n\n### Software Requirements\n- **Docker**: 24.0+ and Docker Compose\n- **PostgreSQL**: 14+ (included in Docker setup)\n- **Redis**: 6.2+ (included in Docker setup)\n- **Node.js**: 18+ (for native installation)\n\n### Network Requirements\n- **Ports**: \n  - 2283: Web interface (HTTP)\n  - 2284: Machine learning service\n- **Mobile Access**: Internet connectivity for mobile app sync\n- **Storage**: Network-attached storage support (NFS, SMB)\n\n## 2. Supported Operating Systems\n\nImmich officially supports:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS\n- Arch Linux\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- macOS 12+ (Intel and Apple Silicon)\n- Windows 10/11 (via WSL2 or Docker Desktop)\n\n## 3. Installation\n\n### Method 1: Docker Compose (Recommended)\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install Docker and Docker Compose\nsudo dnf install -y docker docker-compose\nsudo systemctl enable --now docker\nsudo usermod -aG docker $USER\n\n# Create Immich directory\nmkdir -p ~/immich\ncd ~/immich\n\n# Download docker-compose.yml\ncurl -L https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml -o docker-compose.yml\ncurl -L https://github.com/immich-app/immich/releases/latest/download/example.env -o .env\n\n# Edit environment variables\ncp .env immich.env\nnano immich.env\n\n# Set required variables in immich.env:\n# DB_PASSWORD=your_secure_database_password\n# JWT_SECRET=$(openssl rand -base64 32)\n# UPLOAD_LOCATION=/path/to/photos\n\n# Create upload directory\nsudo mkdir -p /var/lib/immich/upload\nsudo chown -R $USER:$USER /var/lib/immich\n\n# Start Immich\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n```\n\n#### Debian/Ubuntu\n\n```bash\n# Update system\nsudo apt update\n\n# Install Docker\nsudo apt install -y docker.io docker-compose\nsudo systemctl enable --now docker\nsudo usermod -aG docker $USER\n\n# Log out and back in, or run:\nnewgrp docker\n\n# Create Immich directory\nmkdir -p ~/immich\ncd ~/immich\n\n# Download configuration files\nwget https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml\nwget https://github.com/immich-app/immich/releases/latest/download/example.env -O .env\n\n# Configure environment\ncp .env immich.env\neditor immich.env\n\n# Generate secure passwords\nDB_PASSWORD=$(openssl rand -base64 32)\nJWT_SECRET=$(openssl rand -base64 32)\n\n# Update immich.env with generated values\nsed -i \"s/DB_PASSWORD=postgres/DB_PASSWORD=$DB_PASSWORD/\" immich.env\nsed -i \"s/# JWT_SECRET=CHANGE_ME_TO_A_RANDOM_PASSPHRASE/JWT_SECRET=$JWT_SECRET/\" immich.env\n\n# Set upload location\necho \"UPLOAD_LOCATION=/var/lib/immich/upload\" >> immich.env\n\n# Create directories\nsudo mkdir -p /var/lib/immich/upload\nsudo chown -R $USER:$USER /var/lib/immich\n\n# Start services\ndocker-compose --env-file immich.env up -d\n\n# Verify installation\ndocker-compose logs immich_server\n```\n\n#### Arch Linux\n\n```bash\n# Install Docker\nsudo pacman -S docker docker-compose\nsudo systemctl enable --now docker\nsudo usermod -aG docker $USER\n\n# Create Immich setup\nmkdir -p ~/immich && cd ~/immich\n\n# Download files\ncurl -L https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml -o docker-compose.yml\ncurl -L https://github.com/immich-app/immich/releases/latest/download/example.env -o immich.env\n\n# Configure environment\nvim immich.env\n\n# Generate secrets\nopenssl rand -base64 32  # Use for DB_PASSWORD\nopenssl rand -base64 32  # Use for JWT_SECRET\n\n# Set upload location\nmkdir -p /home/$USER/immich-photos\necho \"UPLOAD_LOCATION=/home/$USER/immich-photos\" >> immich.env\n\n# Start Immich\ndocker-compose --env-file immich.env up -d\n```\n\n#### Alpine Linux\n\n```bash\n# Install Docker\napk add --no-cache docker docker-compose\nrc-service docker start\nrc-update add docker default\naddgroup $USER docker\n\n# Create Immich directory\nmkdir -p /opt/immich && cd /opt/immich\n\n# Download configuration\nwget https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml\nwget https://github.com/immich-app/immich/releases/latest/download/example.env -O immich.env\n\n# Configure environment\nvi immich.env\n\n# Create upload directory\nmkdir -p /var/lib/immich/upload\nchown -R 1000:1000 /var/lib/immich\n\n# Start services\ndocker-compose --env-file immich.env up -d\n```\n\n### Method 2: Native Installation (Advanced)\n\n#### Ubuntu/Debian Native Setup\n\n```bash\n# Install dependencies\nsudo apt update\nsudo apt install -y nodejs npm postgresql redis-server nginx certbot python3-certbot-nginx\n\n# Install Node.js 18+\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Create immich user\nsudo useradd -r -s /bin/false -d /opt/immich immich\n\n# Setup PostgreSQL\nsudo -u postgres createuser -P immich\nsudo -u postgres createdb -O immich immich\n\n# Setup Redis\nsudo systemctl enable --now redis-server\n\n# Clone Immich\nsudo git clone https://github.com/immich-app/immich.git /opt/immich\nsudo chown -R immich:immich /opt/immich\n\n# Build Immich\ncd /opt/immich\nsudo -u immich npm ci --workspaces\nsudo -u immich npm run build\n\n# Configure environment\nsudo -u immich cp .env.example .env\nsudo -u immich nano .env\n\n# Install and configure systemd services\n# (Complex native setup - Docker recommended)\n```\n\n## 4. Configuration\n\n### Environment Configuration\n\nEdit `immich.env` file:\n```env\n# Database\nDB_HOSTNAME=immich_postgres\nDB_USERNAME=postgres\nDB_PASSWORD=your_secure_password\nDB_DATABASE_NAME=immich\n\n# Redis\nREDIS_HOSTNAME=immich_redis\n\n# Upload Location\nUPLOAD_LOCATION=/var/lib/immich/upload\n\n# Security\nJWT_SECRET=your_jwt_secret_here\n\n# Machine Learning\nIMMICH_MACHINE_LEARNING_ENABLED=true\nIMMICH_MACHINE_LEARNING_URL=http://immich_machine_learning:3003\n\n# Server\nIMMICH_SERVER_URL=http://localhost:2283\nIMMICH_WEB_URL=http://localhost:2283\n```\n\n### Docker Compose Customization\n\nCreate custom `docker-compose.override.yml`:\n```yaml\nversion: \"3.8\"\n\nservices:\n  immich-server:\n    ports:\n      - \"2283:3001\"\n    volumes:\n      - /mnt/photos:/usr/src/app/upload/photos\n      - /mnt/videos:/usr/src/app/upload/videos\n    environment:\n      - TZ=America/New_York\n\n  immich-postgres:\n    volumes:\n      - /var/lib/postgresql/data:/var/lib/postgresql/data\n\n  immich-redis:\n    volumes:\n      - /var/lib/redis:/data\n```\n\n### Reverse Proxy Setup (nginx)\n\n```nginx\nserver {\n    listen 80;\n    server_name photos.example.com;\n    \n    location / {\n        proxy_pass http://localhost:2283;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n## 5. Service Management\n\n### Docker Compose Management\n\n```bash\n# Start services\ndocker-compose --env-file immich.env up -d\n\n# Stop services\ndocker-compose down\n\n# Restart services\ndocker-compose restart\n\n# View logs\ndocker-compose logs -f immich_server\ndocker-compose logs -f immich_machine_learning\n\n# Update Immich\ndocker-compose pull\ndocker-compose up -d\n\n# Check service status\ndocker-compose ps\n```\n\n### Individual Container Management\n\n```bash\n# Restart specific service\ndocker-compose restart immich_server\n\n# Scale machine learning workers\ndocker-compose up -d --scale immich_machine_learning=2\n\n# Execute commands in container\ndocker-compose exec immich_server bash\n```\n\n### Health Monitoring\n\n```bash\n# Check container health\ndocker-compose exec immich_server wget -qO- http://localhost:3001/api/server-info/ping\n\n# Monitor resource usage\ndocker stats\n\n# Database health check\ndocker-compose exec immich_postgres pg_isready -U postgres\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Database connection failed**:\n```bash\n# Check PostgreSQL logs\ndocker-compose logs immich_postgres\n\n# Reset database\ndocker-compose down\ndocker volume rm immich_postgres_data\ndocker-compose up -d\n```\n\n2. **Upload issues**:\n```bash\n# Check permissions\nls -la /var/lib/immich/upload\n\n# Fix permissions\nsudo chown -R 1000:1000 /var/lib/immich/upload\nsudo chmod -R 755 /var/lib/immich/upload\n```\n\n3. **Machine learning not working**:\n```bash\n# Check ML service logs\ndocker-compose logs immich_machine_learning\n\n# Restart ML service\ndocker-compose restart immich_machine_learning\n\n# Check GPU support\ndocker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi\n```\n\n4. **Mobile app won't connect**:\n```bash\n# Check server URL accessibility\ncurl http://your-server:2283/api/server-info/ping\n\n# Check firewall\nsudo firewall-cmd --list-ports\nsudo ufw status\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"LOG_LEVEL=debug\" >> immich.env\ndocker-compose up -d\n\n# View detailed logs\ndocker-compose logs -f --tail=100\n```\n\n## 7. Security Considerations\n\n### Network Security\n\n```bash\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=2283/tcp\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 2283/tcp\nsudo ufw enable\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Install SSL certificate with Certbot\nsudo certbot --nginx -d photos.example.com\n\n# Manual certificate installation\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/immich.key \\\n    -out /etc/ssl/certs/immich.crt\n```\n\n### Access Control\n\n```nginx\n# Restrict admin access by IP\nlocation /admin {\n    allow 192.168.1.0/24;\n    deny all;\n    proxy_pass http://localhost:2283;\n}\n\n# Basic authentication\nlocation / {\n    auth_basic \"Immich Access\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n    proxy_pass http://localhost:2283;\n}\n```\n\n### Database Security\n\n```bash\n# Secure PostgreSQL\ndocker-compose exec immich_postgres psql -U postgres -c \"ALTER USER postgres PASSWORD 'new_secure_password';\"\n\n# Enable SSL in PostgreSQL\n# Add to docker-compose.yml:\n# command: postgres -c ssl=on -c ssl_cert_file=/etc/ssl/certs/server.crt\n```\n\n## 8. Performance Tuning\n\n### Database Optimization\n\n```sql\n-- Connect to PostgreSQL\ndocker-compose exec immich_postgres psql -U postgres immich\n\n-- Optimize for photo metadata\nALTER SYSTEM SET shared_buffers = '256MB';\nALTER SYSTEM SET effective_cache_size = '1GB';\nALTER SYSTEM SET maintenance_work_mem = '64MB';\nALTER SYSTEM SET random_page_cost = 1.1;\n\n-- Restart PostgreSQL\ndocker-compose restart immich_postgres\n```\n\n### Storage Optimization\n\n```bash\n# Use SSD for database\nmkdir -p /mnt/ssd/postgresql\ndocker-compose down\nsudo mv /var/lib/docker/volumes/immich_postgres_data /mnt/ssd/postgresql\nln -s /mnt/ssd/postgresql /var/lib/docker/volumes/immich_postgres_data\n\n# Configure photo storage on separate drive\necho \"UPLOAD_LOCATION=/mnt/storage/photos\" >> immich.env\n```\n\n### Memory Configuration\n\n```yaml\n# Add to docker-compose.override.yml\nservices:\n  immich-server:\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n        reservations:\n          memory: 1G\n\n  immich-machine-learning:\n    deploy:\n      resources:\n        limits:\n          memory: 4G\n        reservations:\n          memory: 2G\n```\n\n### GPU Acceleration\n\n```yaml\n# For NVIDIA GPU support\nservices:\n  immich-machine-learning:\n    runtime: nvidia\n    environment:\n      - NVIDIA_VISIBLE_DEVICES=all\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: 1\n              capabilities: [gpu]\n```\n\n## 9. Backup and Restore\n\n### Database Backup\n\n```bash\n#!/bin/bash\n# backup-immich-db.sh\n\nBACKUP_DIR=\"/var/backups/immich\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup PostgreSQL database\ndocker-compose exec -T immich_postgres pg_dump -U postgres immich | \\\n    gzip > $BACKUP_DIR/immich_db_$DATE.sql.gz\n\n# Backup environment configuration\ncp immich.env $BACKUP_DIR/immich_env_$DATE.env\n\necho \"Database backup completed: $BACKUP_DIR/immich_db_$DATE.sql.gz\"\n```\n\n### Photo and Video Backup\n\n```bash\n#!/bin/bash\n# backup-immich-photos.sh\n\nBACKUP_DIR=\"/var/backups/immich\"\nUPLOAD_DIR=\"/var/lib/immich/upload\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Incremental backup with rsync\nrsync -av --progress --delete \\\n    $UPLOAD_DIR/ \\\n    $BACKUP_DIR/photos_backup/\n\n# Create compressed archive for offsite backup\ntar -czf $BACKUP_DIR/immich_photos_$DATE.tar.gz \\\n    -C /var/lib/immich upload\n\necho \"Photo backup completed\"\n```\n\n### Complete System Backup\n\n```bash\n#!/bin/bash\n# backup-immich-complete.sh\n\nBACKUP_DIR=\"/var/backups/immich\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Stop services for consistent backup\ndocker-compose down\n\n# Backup all volumes\ndocker run --rm -v immich_postgres_data:/data -v $BACKUP_DIR:/backup \\\n    alpine tar czf /backup/postgres_volume_$DATE.tar.gz -C /data .\n\ndocker run --rm -v immich_redis_data:/data -v $BACKUP_DIR:/backup \\\n    alpine tar czf /backup/redis_volume_$DATE.tar.gz -C /data .\n\n# Backup upload directory\ntar -czf $BACKUP_DIR/upload_$DATE.tar.gz -C /var/lib/immich upload\n\n# Backup configuration\ncp -r ~/immich $BACKUP_DIR/config_$DATE/\n\n# Restart services\ndocker-compose --env-file immich.env up -d\n\necho \"Complete backup finished\"\n```\n\n### Restore Procedures\n\n```bash\n# Restore database\ndocker-compose down\ndocker volume rm immich_postgres_data\ndocker-compose up -d immich_postgres\nsleep 30\n\ngunzip -c immich_db_backup.sql.gz | \\\n    docker-compose exec -T immich_postgres psql -U postgres immich\n\n# Restore photos\nsudo rm -rf /var/lib/immich/upload/*\nsudo tar -xzf immich_photos_backup.tar.gz -C /var/lib/immich/\n\n# Restart all services\ndocker-compose up -d\n```\n\n## 10. System Requirements\n\n### Minimum Requirements\n- **CPU**: 2 cores, 2.0 GHz\n- **RAM**: 4GB\n- **Storage**: 50GB + photo storage\n- **Network**: 100 Mbps\n\n### Recommended Requirements\n- **CPU**: 4+ cores, 3.0+ GHz\n- **RAM**: 8GB+\n- **Storage**: 1TB+ SSD + bulk storage\n- **GPU**: NVIDIA GTX 1060+ or equivalent\n- **Network**: Gigabit Ethernet\n\n### Storage Planning\n\n| Photo Count | Estimated Storage | RAM Recommended |\n|-------------|------------------|-----------------|\n| 10,000      | 50GB             | 4GB             |\n| 50,000      | 250GB            | 6GB             |\n| 100,000     | 500GB            | 8GB             |\n| 500,000+    | 2TB+             | 16GB+           |\n\n## 11. Support\n\n### Official Resources\n- **Website**: https://immich.app\n- **GitHub**: https://github.com/immich-app/immich\n- **Documentation**: https://immich.app/docs\n- **Discord**: https://discord.immich.app\n\n### Community Support\n- **Reddit**: r/immich\n- **GitHub Discussions**: https://github.com/immich-app/immich/discussions\n- **Issues**: https://github.com/immich-app/immich/issues\n\n## 12. Contributing\n\n### How to Contribute\n1. Fork the repository on GitHub\n2. Create a feature branch\n3. Submit pull request\n4. Follow TypeScript/Angular coding standards\n5. Include tests and documentation\n\n### Development Setup\n```bash\n# Clone repository\ngit clone https://github.com/immich-app/immich.git\ncd immich\n\n# Install dependencies\nnpm ci --workspaces\n\n# Start development environment\nnpm run dev\n```\n\n## 13. License\n\nImmich is licensed under the GNU Affero General Public License v3.0 (AGPL-3.0).\n\nKey points:\n- Free to use, modify, and distribute\n- Source code must remain open\n- Network use triggers copyleft requirements\n- Commercial use allowed with restrictions\n\n## 14. Acknowledgments\n\n### Credits\n- **Immich Team**: Core development team\n- **Community Contributors**: Feature development and testing\n- **Machine Learning Libraries**: TensorFlow, OpenCV\n- **Database Systems**: PostgreSQL, Redis\n\n## 15. Version History\n\n### Recent Releases\n- **v1.90.x**: Latest stable with enhanced performance\n- **v1.80.x**: Added advanced search features\n- **v1.70.x**: Improved mobile sync and UI\n\n### Major Features by Version\n- **v1.90**: Performance optimizations, better mobile sync\n- **v1.80**: Advanced search, facial recognition improvements\n- **v1.70**: Enhanced UI, better album management\n\n## 16. Appendices\n\n### A. Mobile App Setup\n\n#### iOS App Installation\n1. Download Immich from the App Store\n2. Open app and enter server URL: `https://photos.example.com`\n3. Login with your credentials\n4. Configure auto-backup settings\n5. Select albums and folders to sync\n\n#### Android App Setup\n1. Install from Google Play Store or F-Droid\n2. Configure server connection\n3. Enable background sync\n4. Set up backup preferences\n\n### B. API Usage Examples\n\n#### Get Server Info\n```bash\ncurl -X GET \"http://localhost:2283/api/server-info\" \\\n  -H \"x-api-key: your_api_key\"\n```\n\n#### Upload Photo via API\n```bash\ncurl -X POST \"http://localhost:2283/api/asset/upload\" \\\n  -H \"x-api-key: your_api_key\" \\\n  -F \"assetData=@photo.jpg\"\n```\n\n### C. Migration Scripts\n\n#### From Google Photos\n```python\n#!/usr/bin/env python3\n# migrate-google-photos.py\n\nimport os\nimport requests\nfrom pathlib import Path\n\ndef upload_to_immich(file_path, api_key, server_url):\n    url = f\"{server_url}/api/asset/upload\"\n    headers = {\"x-api-key\": api_key}\n    \n    with open(file_path, 'rb') as f:\n        files = {\"assetData\": f}\n        response = requests.post(url, headers=headers, files=files)\n        return response.status_code == 201\n\n# Usage\napi_key = \"your_api_key\"\nserver_url = \"http://localhost:2283\"\nphotos_dir = \"/path/to/google/photos\"\n\nfor photo in Path(photos_dir).rglob(\"*.jpg\"):\n    if upload_to_immich(photo, api_key, server_url):\n        print(f\"Uploaded: {photo}\")\n    else:\n        print(f\"Failed: {photo}\")\n```\n\n### D. Monitoring Script\n\n```bash\n#!/bin/bash\n# monitor-immich.sh\n\necho \"=== Immich Service Status ===\"\ndocker-compose ps\n\necho -e \"\\n=== Container Resource Usage ===\"\ndocker stats --no-stream\n\necho -e \"\\n=== Database Status ===\"\ndocker-compose exec immich_postgres pg_isready -U postgres\n\necho -e \"\\n=== Storage Usage ===\"\ndf -h /var/lib/immich/upload\n\necho -e \"\\n=== Recent Uploads ===\"\nfind /var/lib/immich/upload -type f -mtime -1 | wc -l\necho \"files uploaded in last 24 hours\"\n\necho -e \"\\n=== API Health Check ===\"\ncurl -s http://localhost:2283/api/server-info/ping || echo \"API not responding\"\n```\n\n---\n\nFor more information and updates, visit https://github.com/howtomgr/immich","readmeHtml":"<p class=\"mobile-paragraph\">Immich is a free and open-source self-hosted photo and video management solution. It serves as a FOSS alternative to cloud-based photo services like Google Photos, Apple iCloud Photos, Amazon Photos, Dropbox Photos, or OneDrive Photos. Immich provides automatic backup from mobile devices, facial recognition, object detection, and advanced search capabilities while keeping your photos under your complete control and ensuring privacy.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<h3 id=\"hardware-requirements\" class=\"mobile-header\">Hardware Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4+ cores (8+ recommended for ML features)</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 4GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 100GB+ for photos/videos (plan for growth)</li>\n<li class=\"mobile-list-item\"><strong>GPU</strong>: Optional but recommended for machine learning acceleration</li>\n<h3 id=\"software-requirements\" class=\"mobile-header\">Software Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Docker</strong>: 24.0+ and Docker Compose</li>\n<li class=\"mobile-list-item\"><strong>PostgreSQL</strong>: 14+ (included in Docker setup)</li>\n<li class=\"mobile-list-item\"><strong>Redis</strong>: 6.2+ (included in Docker setup)</li>\n<li class=\"mobile-list-item\"><strong>Node.js</strong>: 18+ (for native installation)</li>\n<h3 id=\"network-requirements\" class=\"mobile-header\">Network Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Ports</strong>: </li>\n<li class=\"mobile-list-item\">2283: Web interface (HTTP)</li>\n<li class=\"mobile-list-item\">2284: Machine learning service</li>\n<li class=\"mobile-list-item\"><strong>Mobile Access</strong>: Internet connectivity for mobile app sync</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: Network-attached storage support (NFS, SMB)</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">Immich officially supports:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">macOS 12+ (Intel and Apple Silicon)</li>\n<li class=\"mobile-list-item\">Windows 10/11 (via WSL2 or Docker Desktop)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"method-1-docker-compose-recommended\" class=\"mobile-header\">Method 1: Docker Compose (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker and Docker Compose\nsudo dnf install -y docker docker-compose\nsudo systemctl enable --now docker\nsudo usermod -aG docker $USER\n\n# Create Immich directory\nmkdir -p ~/immich\ncd ~/immich\n\n# Download docker-compose.yml\ncurl -L https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml -o docker-compose.yml\ncurl -L https://github.com/immich-app/immich/releases/latest/download/example.env -o .env\n\n# Edit environment variables\ncp .env immich.env\nnano immich.env\n\n# Set required variables in immich.env:\n# DB_PASSWORD=your_secure_database_password\n# JWT_SECRET=$(openssl rand -base64 32)\n# UPLOAD_LOCATION=/path/to/photos\n\n# Create upload directory\nsudo mkdir -p /var/lib/immich/upload\nsudo chown -R $USER:$USER /var/lib/immich\n\n# Start Immich\ndocker-compose up -d\n\n# Check status\ndocker-compose ps</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Debian/Ubuntu</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system\nsudo apt update\n\n# Install Docker\nsudo apt install -y docker.io docker-compose\nsudo systemctl enable --now docker\nsudo usermod -aG docker $USER\n\n# Log out and back in, or run:\nnewgrp docker\n\n# Create Immich directory\nmkdir -p ~/immich\ncd ~/immich\n\n# Download configuration files\nwget https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml\nwget https://github.com/immich-app/immich/releases/latest/download/example.env -O .env\n\n# Configure environment\ncp .env immich.env\neditor immich.env\n\n# Generate secure passwords\nDB_PASSWORD=$(openssl rand -base64 32)\nJWT_SECRET=$(openssl rand -base64 32)\n\n# Update immich.env with generated values\nsed -i &quot;s/DB_PASSWORD=postgres/DB_PASSWORD=$DB_PASSWORD/&quot; immich.env\nsed -i &quot;s/# JWT_SECRET=CHANGE_ME_TO_A_RANDOM_PASSPHRASE/JWT_SECRET=$JWT_SECRET/&quot; immich.env\n\n# Set upload location\necho &quot;UPLOAD_LOCATION=/var/lib/immich/upload&quot; &gt;&gt; immich.env\n\n# Create directories\nsudo mkdir -p /var/lib/immich/upload\nsudo chown -R $USER:$USER /var/lib/immich\n\n# Start services\ndocker-compose --env-file immich.env up -d\n\n# Verify installation\ndocker-compose logs immich_server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker\nsudo pacman -S docker docker-compose\nsudo systemctl enable --now docker\nsudo usermod -aG docker $USER\n\n# Create Immich setup\nmkdir -p ~/immich &amp;&amp; cd ~/immich\n\n# Download files\ncurl -L https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml -o docker-compose.yml\ncurl -L https://github.com/immich-app/immich/releases/latest/download/example.env -o immich.env\n\n# Configure environment\nvim immich.env\n\n# Generate secrets\nopenssl rand -base64 32  # Use for DB_PASSWORD\nopenssl rand -base64 32  # Use for JWT_SECRET\n\n# Set upload location\nmkdir -p /home/$USER/immich-photos\necho &quot;UPLOAD_LOCATION=/home/$USER/immich-photos&quot; &gt;&gt; immich.env\n\n# Start Immich\ndocker-compose --env-file immich.env up -d</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker\napk add --no-cache docker docker-compose\nrc-service docker start\nrc-update add docker default\naddgroup $USER docker\n\n# Create Immich directory\nmkdir -p /opt/immich &amp;&amp; cd /opt/immich\n\n# Download configuration\nwget https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml\nwget https://github.com/immich-app/immich/releases/latest/download/example.env -O immich.env\n\n# Configure environment\nvi immich.env\n\n# Create upload directory\nmkdir -p /var/lib/immich/upload\nchown -R 1000:1000 /var/lib/immich\n\n# Start services\ndocker-compose --env-file immich.env up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-2-native-installation-advanced\" class=\"mobile-header\">Method 2: Native Installation (Advanced)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian Native Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo apt update\nsudo apt install -y nodejs npm postgresql redis-server nginx certbot python3-certbot-nginx\n\n# Install Node.js 18+\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Create immich user\nsudo useradd -r -s /bin/false -d /opt/immich immich\n\n# Setup PostgreSQL\nsudo -u postgres createuser -P immich\nsudo -u postgres createdb -O immich immich\n\n# Setup Redis\nsudo systemctl enable --now redis-server\n\n# Clone Immich\nsudo git clone https://github.com/immich-app/immich.git /opt/immich\nsudo chown -R immich:immich /opt/immich\n\n# Build Immich\ncd /opt/immich\nsudo -u immich npm ci --workspaces\nsudo -u immich npm run build\n\n# Configure environment\nsudo -u immich cp .env.example .env\nsudo -u immich nano .env\n\n# Install and configure systemd services\n# (Complex native setup - Docker recommended)</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"environment-configuration\" class=\"mobile-header\">Environment Configuration</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">immich.env</code> file:</p>\n<div class=\"mobile-code-block\" data-language=\"env\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">env</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-env\"># Database\nDB_HOSTNAME=immich_postgres\nDB_USERNAME=postgres\nDB_PASSWORD=your_secure_password\nDB_DATABASE_NAME=immich\n\n# Redis\nREDIS_HOSTNAME=immich_redis\n\n# Upload Location\nUPLOAD_LOCATION=/var/lib/immich/upload\n\n# Security\nJWT_SECRET=your_jwt_secret_here\n\n# Machine Learning\nIMMICH_MACHINE_LEARNING_ENABLED=true\nIMMICH_MACHINE_LEARNING_URL=http://immich_machine_learning:3003\n\n# Server\nIMMICH_SERVER_URL=http://localhost:2283\nIMMICH_WEB_URL=http://localhost:2283</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-compose-customization\" class=\"mobile-header\">Docker Compose Customization</h3>\n<p class=\"mobile-paragraph\">Create custom <code class=\"mobile-inline-code\">docker-compose.override.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &quot;3.8&quot;\n\nservices:\n  immich-server:\n    ports:\n      - &quot;2283:3001&quot;\n    volumes:\n      - /mnt/photos:/usr/src/app/upload/photos\n      - /mnt/videos:/usr/src/app/upload/videos\n    environment:\n      - TZ=America/New_York\n\n  immich-postgres:\n    volumes:\n      - /var/lib/postgresql/data:/var/lib/postgresql/data\n\n  immich-redis:\n    volumes:\n      - /var/lib/redis:/data</code></pre>\n      </div>\n    </div>\n<h3 id=\"reverse-proxy-setup-nginx\" class=\"mobile-header\">Reverse Proxy Setup (nginx)</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">server {\n    listen 80;\n    server_name photos.example.com;\n    \n    location / {\n        proxy_pass http://localhost:2283;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"docker-compose-management\" class=\"mobile-header\">Docker Compose Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start services\ndocker-compose --env-file immich.env up -d\n\n# Stop services\ndocker-compose down\n\n# Restart services\ndocker-compose restart\n\n# View logs\ndocker-compose logs -f immich_server\ndocker-compose logs -f immich_machine_learning\n\n# Update Immich\ndocker-compose pull\ndocker-compose up -d\n\n# Check service status\ndocker-compose ps</code></pre>\n      </div>\n    </div>\n<h3 id=\"individual-container-management\" class=\"mobile-header\">Individual Container Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Restart specific service\ndocker-compose restart immich_server\n\n# Scale machine learning workers\ndocker-compose up -d --scale immich_machine_learning=2\n\n# Execute commands in container\ndocker-compose exec immich_server bash</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check container health\ndocker-compose exec immich_server wget -qO- http://localhost:3001/api/server-info/ping\n\n# Monitor resource usage\ndocker stats\n\n# Database health check\ndocker-compose exec immich_postgres pg_isready -U postgres</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Database connection failed</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check PostgreSQL logs\ndocker-compose logs immich_postgres\n\n# Reset database\ndocker-compose down\ndocker volume rm immich_postgres_data\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Upload issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check permissions\nls -la /var/lib/immich/upload\n\n# Fix permissions\nsudo chown -R 1000:1000 /var/lib/immich/upload\nsudo chmod -R 755 /var/lib/immich/upload</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Machine learning not working</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check ML service logs\ndocker-compose logs immich_machine_learning\n\n# Restart ML service\ndocker-compose restart immich_machine_learning\n\n# Check GPU support\ndocker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Mobile app won't connect</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check server URL accessibility\ncurl http://your-server:2283/api/server-info/ping\n\n# Check firewall\nsudo firewall-cmd --list-ports\nsudo ufw status</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;LOG_LEVEL=debug&quot; &gt;&gt; immich.env\ndocker-compose up -d\n\n# View detailed logs\ndocker-compose logs -f --tail=100</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"network-security\" class=\"mobile-header\">Network Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure firewall\nsudo firewall-cmd --permanent --add-port=2283/tcp\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 2283/tcp\nsudo ufw enable</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install SSL certificate with Certbot\nsudo certbot --nginx -d photos.example.com\n\n# Manual certificate installation\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/immich.key \\\n    -out /etc/ssl/certs/immich.crt</code></pre>\n      </div>\n    </div>\n<h3 id=\"access-control\" class=\"mobile-header\">Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># Restrict admin access by IP\nlocation /admin {\n    allow 192.168.1.0/24;\n    deny all;\n    proxy_pass http://localhost:2283;\n}\n\n# Basic authentication\nlocation / {\n    auth_basic &quot;Immich Access&quot;;\n    auth_basic_user_file /etc/nginx/.htpasswd;\n    proxy_pass http://localhost:2283;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-security\" class=\"mobile-header\">Database Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure PostgreSQL\ndocker-compose exec immich_postgres psql -U postgres -c &quot;ALTER USER postgres PASSWORD &#039;new_secure_password&#039;;&quot;\n\n# Enable SSL in PostgreSQL\n# Add to docker-compose.yml:\n# command: postgres -c ssl=on -c ssl_cert_file=/etc/ssl/certs/server.crt</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Connect to PostgreSQL\ndocker-compose exec immich_postgres psql -U postgres immich\n\n-- Optimize for photo metadata\nALTER SYSTEM SET shared_buffers = &#039;256MB&#039;;\nALTER SYSTEM SET effective_cache_size = &#039;1GB&#039;;\nALTER SYSTEM SET maintenance_work_mem = &#039;64MB&#039;;\nALTER SYSTEM SET random_page_cost = 1.1;\n\n-- Restart PostgreSQL\ndocker-compose restart immich_postgres</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-optimization\" class=\"mobile-header\">Storage Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use SSD for database\nmkdir -p /mnt/ssd/postgresql\ndocker-compose down\nsudo mv /var/lib/docker/volumes/immich_postgres_data /mnt/ssd/postgresql\nln -s /mnt/ssd/postgresql /var/lib/docker/volumes/immich_postgres_data\n\n# Configure photo storage on separate drive\necho &quot;UPLOAD_LOCATION=/mnt/storage/photos&quot; &gt;&gt; immich.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"memory-configuration\" class=\"mobile-header\">Memory Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Add to docker-compose.override.yml\nservices:\n  immich-server:\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n        reservations:\n          memory: 1G\n\n  immich-machine-learning:\n    deploy:\n      resources:\n        limits:\n          memory: 4G\n        reservations:\n          memory: 2G</code></pre>\n      </div>\n    </div>\n<h3 id=\"gpu-acceleration\" class=\"mobile-header\">GPU Acceleration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># For NVIDIA GPU support\nservices:\n  immich-machine-learning:\n    runtime: nvidia\n    environment:\n      - NVIDIA_VISIBLE_DEVICES=all\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: 1\n              capabilities: [gpu]</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"database-backup\" class=\"mobile-header\">Database Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-immich-db.sh\n\nBACKUP_DIR=&quot;/var/backups/immich&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup PostgreSQL database\ndocker-compose exec -T immich_postgres pg_dump -U postgres immich | \\\n    gzip &gt; $BACKUP_DIR/immich_db_$DATE.sql.gz\n\n# Backup environment configuration\ncp immich.env $BACKUP_DIR/immich_env_$DATE.env\n\necho &quot;Database backup completed: $BACKUP_DIR/immich_db_$DATE.sql.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"photo-and-video-backup\" class=\"mobile-header\">Photo and Video Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-immich-photos.sh\n\nBACKUP_DIR=&quot;/var/backups/immich&quot;\nUPLOAD_DIR=&quot;/var/lib/immich/upload&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Incremental backup with rsync\nrsync -av --progress --delete \\\n    $UPLOAD_DIR/ \\\n    $BACKUP_DIR/photos_backup/\n\n# Create compressed archive for offsite backup\ntar -czf $BACKUP_DIR/immich_photos_$DATE.tar.gz \\\n    -C /var/lib/immich upload\n\necho &quot;Photo backup completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"complete-system-backup\" class=\"mobile-header\">Complete System Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-immich-complete.sh\n\nBACKUP_DIR=&quot;/var/backups/immich&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Stop services for consistent backup\ndocker-compose down\n\n# Backup all volumes\ndocker run --rm -v immich_postgres_data:/data -v $BACKUP_DIR:/backup \\\n    alpine tar czf /backup/postgres_volume_$DATE.tar.gz -C /data .\n\ndocker run --rm -v immich_redis_data:/data -v $BACKUP_DIR:/backup \\\n    alpine tar czf /backup/redis_volume_$DATE.tar.gz -C /data .\n\n# Backup upload directory\ntar -czf $BACKUP_DIR/upload_$DATE.tar.gz -C /var/lib/immich upload\n\n# Backup configuration\ncp -r ~/immich $BACKUP_DIR/config_$DATE/\n\n# Restart services\ndocker-compose --env-file immich.env up -d\n\necho &quot;Complete backup finished&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Restore database\ndocker-compose down\ndocker volume rm immich_postgres_data\ndocker-compose up -d immich_postgres\nsleep 30\n\ngunzip -c immich_db_backup.sql.gz | \\\n    docker-compose exec -T immich_postgres psql -U postgres immich\n\n# Restore photos\nsudo rm -rf /var/lib/immich/upload/*\nsudo tar -xzf immich_photos_backup.tar.gz -C /var/lib/immich/\n\n# Restart all services\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-system-requirements\" class=\"mobile-header\">10. System Requirements</h2>\n<h3 id=\"minimum-requirements\" class=\"mobile-header\">Minimum Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2 cores, 2.0 GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 4GB</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 50GB + photo storage</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: 100 Mbps</li>\n<h3 id=\"recommended-requirements\" class=\"mobile-header\">Recommended Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4+ cores, 3.0+ GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 8GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 1TB+ SSD + bulk storage</li>\n<li class=\"mobile-list-item\"><strong>GPU</strong>: NVIDIA GTX 1060+ or equivalent</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Gigabit Ethernet</li>\n<h3 id=\"storage-planning\" class=\"mobile-header\">Storage Planning</h3>\n<p class=\"mobile-paragraph\">| Photo Count | Estimated Storage | RAM Recommended |</p>\n<p class=\"mobile-paragraph\">|-------------|------------------|-----------------|</p>\n<p class=\"mobile-paragraph\">| 10,000      | 50GB             | 4GB             |</p>\n<p class=\"mobile-paragraph\">| 50,000      | 250GB            | 6GB             |</p>\n<p class=\"mobile-paragraph\">| 100,000     | 500GB            | 8GB             |</p>\n<p class=\"mobile-paragraph\">| 500,000+    | 2TB+             | 16GB+           |</p>\n<h2 id=\"11-support\" class=\"mobile-header\">11. Support</h2>\n<h3 id=\"official-resources\" class=\"mobile-header\">Official Resources</h3>\n<li class=\"mobile-list-item\"><strong>Website</strong>: https://immich.app</li>\n<li class=\"mobile-list-item\"><strong>GitHub</strong>: https://github.com/immich-app/immich</li>\n<li class=\"mobile-list-item\"><strong>Documentation</strong>: https://immich.app/docs</li>\n<li class=\"mobile-list-item\"><strong>Discord</strong>: https://discord.immich.app</li>\n<h3 id=\"community-support\" class=\"mobile-header\">Community Support</h3>\n<li class=\"mobile-list-item\"><strong>Reddit</strong>: r/immich</li>\n<li class=\"mobile-list-item\"><strong>GitHub Discussions</strong>: https://github.com/immich-app/immich/discussions</li>\n<li class=\"mobile-list-item\"><strong>Issues</strong>: https://github.com/immich-app/immich/issues</li>\n<h2 id=\"12-contributing\" class=\"mobile-header\">12. Contributing</h2>\n<h3 id=\"how-to-contribute\" class=\"mobile-header\">How to Contribute</h3>\n<p class=\"mobile-paragraph\">1. Fork the repository on GitHub</p>\n<p class=\"mobile-paragraph\">2. Create a feature branch</p>\n<p class=\"mobile-paragraph\">3. Submit pull request</p>\n<p class=\"mobile-paragraph\">4. Follow TypeScript/Angular coding standards</p>\n<p class=\"mobile-paragraph\">5. Include tests and documentation</p>\n<h3 id=\"development-setup\" class=\"mobile-header\">Development Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/immich-app/immich.git\ncd immich\n\n# Install dependencies\nnpm ci --workspaces\n\n# Start development environment\nnpm run dev</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-license\" class=\"mobile-header\">13. License</h2>\n<p class=\"mobile-paragraph\">Immich is licensed under the GNU Affero General Public License v3.0 (AGPL-3.0).</p>\n<p class=\"mobile-paragraph\">Key points:</p>\n<li class=\"mobile-list-item\">Free to use, modify, and distribute</li>\n<li class=\"mobile-list-item\">Source code must remain open</li>\n<li class=\"mobile-list-item\">Network use triggers copyleft requirements</li>\n<li class=\"mobile-list-item\">Commercial use allowed with restrictions</li>\n<h2 id=\"14-acknowledgments\" class=\"mobile-header\">14. Acknowledgments</h2>\n<h3 id=\"credits\" class=\"mobile-header\">Credits</h3>\n<li class=\"mobile-list-item\"><strong>Immich Team</strong>: Core development team</li>\n<li class=\"mobile-list-item\"><strong>Community Contributors</strong>: Feature development and testing</li>\n<li class=\"mobile-list-item\"><strong>Machine Learning Libraries</strong>: TensorFlow, OpenCV</li>\n<li class=\"mobile-list-item\"><strong>Database Systems</strong>: PostgreSQL, Redis</li>\n<h2 id=\"15-version-history\" class=\"mobile-header\">15. Version History</h2>\n<h3 id=\"recent-releases\" class=\"mobile-header\">Recent Releases</h3>\n<li class=\"mobile-list-item\"><strong>v1.90.x</strong>: Latest stable with enhanced performance</li>\n<li class=\"mobile-list-item\"><strong>v1.80.x</strong>: Added advanced search features</li>\n<li class=\"mobile-list-item\"><strong>v1.70.x</strong>: Improved mobile sync and UI</li>\n<h3 id=\"major-features-by-version\" class=\"mobile-header\">Major Features by Version</h3>\n<li class=\"mobile-list-item\"><strong>v1.90</strong>: Performance optimizations, better mobile sync</li>\n<li class=\"mobile-list-item\"><strong>v1.80</strong>: Advanced search, facial recognition improvements</li>\n<li class=\"mobile-list-item\"><strong>v1.70</strong>: Enhanced UI, better album management</li>\n<h2 id=\"16-appendices\" class=\"mobile-header\">16. Appendices</h2>\n<h3 id=\"a-mobile-app-setup\" class=\"mobile-header\">A. Mobile App Setup</h3>\n<p class=\"mobile-paragraph\">#### iOS App Installation</p>\n<p class=\"mobile-paragraph\">1. Download Immich from the App Store</p>\n<p class=\"mobile-paragraph\">2. Open app and enter server URL: <code class=\"mobile-inline-code\">https://photos.example.com</code></p>\n<p class=\"mobile-paragraph\">3. Login with your credentials</p>\n<p class=\"mobile-paragraph\">4. Configure auto-backup settings</p>\n<p class=\"mobile-paragraph\">5. Select albums and folders to sync</p>\n<p class=\"mobile-paragraph\">#### Android App Setup</p>\n<p class=\"mobile-paragraph\">1. Install from Google Play Store or F-Droid</p>\n<p class=\"mobile-paragraph\">2. Configure server connection</p>\n<p class=\"mobile-paragraph\">3. Enable background sync</p>\n<p class=\"mobile-paragraph\">4. Set up backup preferences</p>\n<h3 id=\"b-api-usage-examples\" class=\"mobile-header\">B. API Usage Examples</h3>\n<p class=\"mobile-paragraph\">#### Get Server Info</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl -X GET &quot;http://localhost:2283/api/server-info&quot; \\\n  -H &quot;x-api-key: your_api_key&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Upload Photo via API</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl -X POST &quot;http://localhost:2283/api/asset/upload&quot; \\\n  -H &quot;x-api-key: your_api_key&quot; \\\n  -F &quot;assetData=@photo.jpg&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"c-migration-scripts\" class=\"mobile-header\">C. Migration Scripts</h3>\n<p class=\"mobile-paragraph\">#### From Google Photos</p>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">#!/usr/bin/env python3\n# migrate-google-photos.py\n\nimport os\nimport requests\nfrom pathlib import Path\n\ndef upload_to_immich(file_path, api_key, server_url):\n    url = f&quot;{server_url}/api/asset/upload&quot;\n    headers = {&quot;x-api-key&quot;: api_key}\n    \n    with open(file_path, &#039;rb&#039;) as f:\n        files = {&quot;assetData&quot;: f}\n        response = requests.post(url, headers=headers, files=files)\n        return response.status_code == 201\n\n# Usage\napi_key = &quot;your_api_key&quot;\nserver_url = &quot;http://localhost:2283&quot;\nphotos_dir = &quot;/path/to/google/photos&quot;\n\nfor photo in Path(photos_dir).rglob(&quot;*.jpg&quot;):\n    if upload_to_immich(photo, api_key, server_url):\n        print(f&quot;Uploaded: {photo}&quot;)\n    else:\n        print(f&quot;Failed: {photo}&quot;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"d-monitoring-script\" class=\"mobile-header\">D. Monitoring Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# monitor-immich.sh\n\necho &quot;=== Immich Service Status ===&quot;\ndocker-compose ps\n\necho -e &quot;\\n=== Container Resource Usage ===&quot;\ndocker stats --no-stream\n\necho -e &quot;\\n=== Database Status ===&quot;\ndocker-compose exec immich_postgres pg_isready -U postgres\n\necho -e &quot;\\n=== Storage Usage ===&quot;\ndf -h /var/lib/immich/upload\n\necho -e &quot;\\n=== Recent Uploads ===&quot;\nfind /var/lib/immich/upload -type f -mtime -1 | wc -l\necho &quot;files uploaded in last 24 hours&quot;\n\necho -e &quot;\\n=== API Health Check ===&quot;\ncurl -s http://localhost:2283/api/server-info/ping || echo &quot;API not responding&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\">For more information and updates, visit https://github.com/howtomgr/immich</p>","readTime":"12 min","wordCount":2238,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":3,"text":"Hardware Requirements","id":"hardware-requirements"},{"level":3,"text":"Software Requirements","id":"software-requirements"},{"level":3,"text":"Network Requirements","id":"network-requirements"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Method 1: Docker Compose (Recommended)","id":"method-1-docker-compose-recommended"},{"level":3,"text":"Method 2: Native Installation (Advanced)","id":"method-2-native-installation-advanced"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Environment Configuration","id":"environment-configuration"},{"level":3,"text":"Docker Compose Customization","id":"docker-compose-customization"},{"level":3,"text":"Reverse Proxy Setup (nginx)","id":"reverse-proxy-setup-nginx"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"Docker Compose Management","id":"docker-compose-management"},{"level":3,"text":"Individual Container Management","id":"individual-container-management"},{"level":3,"text":"Health Monitoring","id":"health-monitoring"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"Network Security","id":"network-security"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":3,"text":"Access Control","id":"access-control"},{"level":3,"text":"Database Security","id":"database-security"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"Database Optimization","id":"database-optimization"},{"level":3,"text":"Storage Optimization","id":"storage-optimization"},{"level":3,"text":"Memory Configuration","id":"memory-configuration"},{"level":3,"text":"GPU Acceleration","id":"gpu-acceleration"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Database Backup","id":"database-backup"},{"level":3,"text":"Photo and Video Backup","id":"photo-and-video-backup"},{"level":3,"text":"Complete System Backup","id":"complete-system-backup"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":2,"text":"10. System Requirements","id":"10-system-requirements"},{"level":3,"text":"Minimum Requirements","id":"minimum-requirements"},{"level":3,"text":"Recommended Requirements","id":"recommended-requirements"},{"level":3,"text":"Storage Planning","id":"storage-planning"},{"level":2,"text":"11. Support","id":"11-support"},{"level":3,"text":"Official Resources","id":"official-resources"},{"level":3,"text":"Community Support","id":"community-support"},{"level":2,"text":"12. Contributing","id":"12-contributing"},{"level":3,"text":"How to Contribute","id":"how-to-contribute"},{"level":3,"text":"Development Setup","id":"development-setup"},{"level":2,"text":"13. License","id":"13-license"},{"level":2,"text":"14. Acknowledgments","id":"14-acknowledgments"},{"level":3,"text":"Credits","id":"credits"},{"level":2,"text":"15. Version History","id":"15-version-history"},{"level":3,"text":"Recent Releases","id":"recent-releases"},{"level":3,"text":"Major Features by Version","id":"major-features-by-version"},{"level":2,"text":"16. Appendices","id":"16-appendices"},{"level":3,"text":"A. Mobile App Setup","id":"a-mobile-app-setup"},{"level":3,"text":"B. API Usage Examples","id":"b-api-usage-examples"},{"level":3,"text":"C. Migration Scripts","id":"c-migration-scripts"},{"level":3,"text":"D. Monitoring Script","id":"d-monitoring-script"}],"lastBuilt":"2025-10-06T06:20:19.307Z","metadataVersion":"2.0"}]},"__N_SSG":true}