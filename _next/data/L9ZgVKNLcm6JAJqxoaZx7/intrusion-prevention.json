{"pageProps":{"category":{"key":"intrusion-prevention","name":"Intrusion prevention","description":"Intrusion prevention tools and applications","icon":"ðŸ”’","color":"#ff5555"},"guides":[{"name":"fail2ban","displayName":"Fail2ban Installation Guide","slug":"fail2ban","description":"Fail2ban is a free and open-source intrusion prevention software framework that protects servers from brute-force attacks. Written in Python, it monitors log files and bans IP addresses that show malicious signs such as too many password failures or seeking exploits. It serves as a powerful FOSS alternative to commercial security solutions like Cloudflare Rate Limiting, AWS WAF, or proprietary IPS systems, providing enterprise-grade protection without licensing costs or vendor lock-in.","category":"intrusion-prevention","subcategory":"intrusion-prevention","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[1,10,34,56,80,443,9191,12345],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["intrusion-prevention","observability","data-storage","web-services","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/intrusion-prevention/fail2ban","documentationUrl":"https://howtomgr.github.io/intrusion-prevention/fail2ban","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fail2ban","updatedAt":"2025-09-16T17:11:52Z","createdAt":"2025-09-08T03:07:24Z","readmeRaw":"# Fail2ban Installation Guide\n\nFail2ban is a free and open-source intrusion prevention software framework that protects servers from brute-force attacks. Written in Python, it monitors log files and bans IP addresses that show malicious signs such as too many password failures or seeking exploits. It serves as a powerful FOSS alternative to commercial security solutions like Cloudflare Rate Limiting, AWS WAF, or proprietary IPS systems, providing enterprise-grade protection without licensing costs or vendor lock-in.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for high-traffic servers)\n  - RAM: 512MB minimum (1GB+ recommended)\n  - Storage: 100MB for installation, plus log storage\n  - Network: Stable connectivity for updates\n- **Operating System**: \n  - Linux: Any modern distribution with systemd or init\n  - macOS: 10.14+ (limited support)\n  - Windows: WSL2 with Linux distribution\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Firewall access (iptables, nftables, pf, or ipfw)\n  - Root access to modify firewall rules\n- **Dependencies**:\n  - Python 3.5+ (3.8+ recommended)\n  - iptables, nftables, or equivalent firewall\n  - systemd or init system\n  - Log files to monitor (sshd, nginx, apache, etc.)\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install fail2ban\nsudo dnf install -y fail2ban fail2ban-systemd\n\n# Install additional dependencies\nsudo dnf install -y python3-systemd python3-pyinotify\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\nsudo systemctl status fail2ban\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install fail2ban\nsudo apt install -y fail2ban\n\n# Install additional tools\nsudo apt install -y python3-systemd python3-pyinotify iptables-persistent\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\nsudo systemctl status fail2ban\n```\n\n### Arch Linux\n\n```bash\n# Install fail2ban\nsudo pacman -S fail2ban\n\n# Install additional dependencies\nsudo pacman -S python-systemd python-pyinotify\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\n```\n\n### Alpine Linux\n\n```bash\n# Install fail2ban\napk add --no-cache fail2ban fail2ban-openrc\n\n# Install additional dependencies\napk add --no-cache py3-systemd iptables ip6tables\n\n# Enable and start service\nrc-update add fail2ban default\nrc-service fail2ban start\n\n# Verify installation\nfail2ban-client --version\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y fail2ban python3-systemd\n\n# SLES 15\nsudo SUSEConnect -p sle-module-basesystem/15.5/x86_64\nsudo zypper install -y fail2ban\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=fail2ban\nsudo firewall-cmd --reload\n\n# Verify installation\nfail2ban-client --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install fail2ban\n\n# Copy configuration files\nsudo cp /usr/local/etc/fail2ban/fail2ban.conf /usr/local/etc/fail2ban/fail2ban.local\nsudo cp /usr/local/etc/fail2ban/jail.conf /usr/local/etc/fail2ban/jail.local\n\n# Start service\nsudo brew services start fail2ban\n\n# Verify installation\nfail2ban-client --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install py39-fail2ban\n\n# Enable in rc.conf\necho 'fail2ban_enable=\"YES\"' >> /etc/rc.conf\n\n# Copy configuration\ncp /usr/local/etc/fail2ban/fail2ban.conf /usr/local/etc/fail2ban/fail2ban.local\ncp /usr/local/etc/fail2ban/jail.conf /usr/local/etc/fail2ban/jail.local\n\n# Start service\nservice fail2ban start\n\n# Verify installation\nfail2ban-client --version\n```\n\n### Windows (WSL2)\n\n```powershell\n# Install WSL2 with Ubuntu\nwsl --install -d Ubuntu-22.04\n\n# Inside WSL2 Ubuntu\nsudo apt update\nsudo apt install -y fail2ban\n\n# Configure for Windows logs monitoring\n# Note: Limited functionality - primarily for learning/testing\n\n# Verify installation\nfail2ban-client --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create local configuration files (never edit .conf files directly)\nsudo cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local\nsudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\n\n# Edit main configuration\nsudo tee /etc/fail2ban/fail2ban.local <<EOF\n[Definition]\nloglevel = INFO\nlogtarget = /var/log/fail2ban.log\nsyslogsocket = auto\nsocket = /var/run/fail2ban/fail2ban.sock\npidfile = /var/run/fail2ban/fail2ban.pid\ndbfile = /var/lib/fail2ban/fail2ban.sqlite3\ndbpurgeage = 1d\nEOF\n\n# Configure basic jail settings\nsudo tee /etc/fail2ban/jail.local <<EOF\n[DEFAULT]\n# Ban duration (in seconds)\nbantime = 3600\n# Time window for maxretry\nfindtime = 600\n# Number of failures before ban\nmaxretry = 5\n# Email notifications\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n# Action to take\naction = %(action_mwl)s\n\n# Whitelist\nignoreip = 127.0.0.1/8 ::1 192.168.0.0/16\n\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nfindtime = 60\nbantime = 600\n\n[apache-auth]\nenabled = false\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache*/*error.log\nmaxretry = 6\n\n[postfix]\nenabled = false\nport = smtp,465,submission\nfilter = postfix\nlogpath = /var/log/mail.log\nEOF\n\n# Restart fail2ban\nsudo systemctl restart fail2ban\n```\n\n### Custom Jail Configuration\n\n```bash\n# Create custom filter for application\nsudo tee /etc/fail2ban/filter.d/myapp.conf <<EOF\n[Definition]\nfailregex = ^<HOST> - - \\[.*\\] \"POST /login HTTP/.*\" 401\n            ^Failed login from <HOST>\n            ^Authentication failure for .* from <HOST>\nignoreregex =\nEOF\n\n# Create jail for custom application\nsudo tee -a /etc/fail2ban/jail.local <<EOF\n\n[myapp]\nenabled = true\nfilter = myapp\nport = 8080\nlogpath = /var/log/myapp/access.log\nmaxretry = 3\nbantime = 3600\nfindtime = 300\nEOF\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable fail2ban\n\n# Start service\nsudo systemctl start fail2ban\n\n# Stop service\nsudo systemctl stop fail2ban\n\n# Restart service\nsudo systemctl restart fail2ban\n\n# Reload configuration\nsudo systemctl reload fail2ban\n\n# Check status\nsudo systemctl status fail2ban\n\n# View logs\nsudo journalctl -u fail2ban -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add fail2ban default\n\n# Start service\nrc-service fail2ban start\n\n# Stop service\nrc-service fail2ban stop\n\n# Restart service\nrc-service fail2ban restart\n\n# Check status\nrc-service fail2ban status\n\n# View logs\ntail -f /var/log/fail2ban.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in rc.conf\necho 'fail2ban_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice fail2ban start\n\n# Stop service\nservice fail2ban stop\n\n# Restart service\nservice fail2ban restart\n\n# Check status\nservice fail2ban status\n```\n\n### launchd (macOS)\n\n```bash\n# Using brew services\nbrew services start fail2ban\nbrew services stop fail2ban\nbrew services restart fail2ban\n\n# Check status\nbrew services list | grep fail2ban\n\n# Manual control\nsudo /usr/local/bin/fail2ban-client start\nsudo /usr/local/bin/fail2ban-client stop\n```\n\n## Advanced Configuration\n\n### Multi-Service Protection\n\n```bash\n# Comprehensive jail configuration\nsudo tee /etc/fail2ban/jail.d/multi-service.conf <<EOF\n# SSH Protection\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\nfindtime = 600\n\n[sshd-ddos]\nenabled = true\nport = ssh\nfilter = sshd-ddos\nlogpath = /var/log/auth.log\nmaxretry = 10\nbantime = 600\nfindtime = 60\n\n# Web Server Protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nport = http,https\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 5\n\n[nginx-badbots]\nenabled = true\nport = http,https\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n[nginx-noproxy]\nenabled = true\nport = http,https\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Database Protection\n[mysqld-auth]\nenabled = true\nfilter = mysqld-auth\nport = 3306\nlogpath = /var/log/mysql/error.log\nmaxretry = 5\n\n[postgresql]\nenabled = true\nport = 5432\nfilter = postgresql\nlogpath = /var/log/postgresql/*.log\nmaxretry = 5\n\n# Mail Server Protection\n[postfix]\nenabled = true\nport = smtp,465,submission\nfilter = postfix\nlogpath = /var/log/mail.log\n\n[postfix-sasl]\nenabled = true\nport = smtp,465,submission,imap,imaps,pop3,pop3s\nfilter = postfix-sasl\nlogpath = /var/log/mail.log\n\n[dovecot]\nenabled = true\nport = pop3,pop3s,imap,imaps,submission,465,sieve\nfilter = dovecot\nlogpath = /var/log/mail.log\nEOF\n```\n\n### GeoIP Blocking\n\n```bash\n# Install GeoIP database\nsudo apt install geoip-database geoip-bin  # Debian/Ubuntu\nsudo dnf install GeoIP GeoIP-data         # RHEL/CentOS\n\n# Create GeoIP action\nsudo tee /etc/fail2ban/action.d/geoip-block.conf <<EOF\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = if [ \"\\$(geoiplookup <ip> | grep -v 'US\\|CA\\|GB')\" ]; then iptables -I f2b-<name> 1 -s <ip> -j DROP; fi\nactionunban = iptables -D f2b-<name> -s <ip> -j DROP\nEOF\n\n# Use in jail\nsudo tee -a /etc/fail2ban/jail.local <<EOF\n\n[sshd-geoip]\nenabled = true\nfilter = sshd\naction = geoip-block[name=%(__name__)s]\nlogpath = /var/log/auth.log\nmaxretry = 3\nEOF\n```\n\n### Persistent Bans\n\n```bash\n# Create persistent ban action\nsudo tee /etc/fail2ban/action.d/iptables-persistent.conf <<EOF\n[Definition]\nactionstart = iptables -N f2b-<name>\n              iptables -A f2b-<name> -j RETURN\n              iptables -I <chain> -p <protocol> --dport <port> -j f2b-<name>\n              # Load persistent bans\n              [ -f /etc/fail2ban/persistent/<name>.bans ] && while read ip; do iptables -I f2b-<name> 1 -s \\$ip -j DROP; done < /etc/fail2ban/persistent/<name>.bans\n\nactionstop = iptables -D <chain> -p <protocol> --dport <port> -j f2b-<name>\n             iptables -F f2b-<name>\n             iptables -X f2b-<name>\n\nactionban = iptables -I f2b-<name> 1 -s <ip> -j DROP\n            echo '<ip>' >> /etc/fail2ban/persistent/<name>.bans\n            sort -u /etc/fail2ban/persistent/<name>.bans -o /etc/fail2ban/persistent/<name>.bans\n\nactionunban = iptables -D f2b-<name> -s <ip> -j DROP\n              sed -i '/<ip>/d' /etc/fail2ban/persistent/<name>.bans\nEOF\n\n# Create directory for persistent bans\nsudo mkdir -p /etc/fail2ban/persistent\n```\n\n## Reverse Proxy Setup\n\n### nginx Reverse Proxy Configuration\n\n```nginx\n# /etc/nginx/conf.d/fail2ban.conf\n# Pass real IP to backend for fail2ban processing\n\nmap $remote_addr $proxy_forwarded_elem {\n    ~^[0-9.]+$          \"for=$remote_addr\";\n    ~^[0-9A-Fa-f:.]+$   \"for=\\\"[$remote_addr]\\\"\";\n    default             \"for=unknown\";\n}\n\nmap $http_forwarded $proxy_add_forwarded {\n    \"\"      \"$proxy_forwarded_elem\";\n    default \"$http_forwarded, $proxy_forwarded_elem\";\n}\n\nserver {\n    listen 80;\n    server_name app.example.com;\n\n    location / {\n        proxy_pass http://backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Forwarded $proxy_add_forwarded;\n        \n        # Rate limiting\n        limit_req zone=app_limit burst=10 nodelay;\n        limit_req_status 429;\n    }\n}\n\n# Define rate limit zone\nlimit_req_zone $binary_remote_addr zone=app_limit:10m rate=10r/s;\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n\ndefaults\n    log global\n    option httplog\n    option forwardfor\n\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cert.pem\n    \n    # Track abusive behavior\n    stick-table type ip size 100k expire 30m store conn_rate(3s),conn_cur,http_req_rate(10s)\n    \n    # Block if connection rate exceeds limit\n    tcp-request connection reject if { src_conn_rate gt 20 }\n    tcp-request connection track-sc0 src\n    \n    # Block if HTTP request rate exceeds limit\n    http-request deny if { sc_http_req_rate(0) gt 20 }\n    \n    default_backend web_servers\n\nbackend web_servers\n    # Forward real IP for fail2ban\n    option forwardfor header X-Real-IP\n    server web1 192.168.1.10:80 check\n    server web2 192.168.1.11:80 check\n```\n\n### Apache Reverse Proxy\n\n```apache\n# /etc/apache2/sites-available/reverse-proxy.conf\n<VirtualHost *:80>\n    ServerName app.example.com\n    \n    # Enable required modules\n    # a2enmod proxy proxy_http remoteip\n    \n    # Trust proxy headers from load balancer\n    RemoteIPHeader X-Forwarded-For\n    RemoteIPTrustedProxy 10.0.0.0/8\n    \n    # Log real IP\n    LogFormat \"%a %l %u %t \\\"%r\\\" %>s %O \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" proxy\n    CustomLog ${APACHE_LOG_DIR}/access.log proxy\n    \n    ProxyPass / http://backend/\n    ProxyPassReverse / http://backend/\n    \n    # Pass real IP to backend\n    ProxyPreserveHost On\n    RequestHeader set X-Real-IP \"%{REMOTE_ADDR}s\"\n    RequestHeader set X-Forwarded-For \"%{X-Forwarded-For}i\"\n</VirtualHost>\n```\n\n## Security Configuration\n\n### Enhanced Security Rules\n\n```bash\n# Create comprehensive security configuration\nsudo tee /etc/fail2ban/jail.d/security-enhanced.conf <<EOF\n[DEFAULT]\n# Aggressive ban settings for security\nbantime = 86400    # 24 hours\nfindtime = 3600    # 1 hour window\nmaxretry = 3       # Low tolerance\nchain = INPUT      # iptables chain\nprotocol = tcp     # Default protocol\naction = %(action_mwl)s\n\n# Recidive jail for repeat offenders\n[recidive]\nenabled = true\nfilter = recidive\nlogpath = /var/log/fail2ban.log\nbantime = 604800   # 1 week\nfindtime = 86400   # 1 day\nmaxretry = 3\naction = iptables-allports[name=recidive, protocol=all]\n         sendmail-whois-lines[name=recidive, logpath=/var/log/fail2ban.log]\n\n# Port scanning detection\n[portscan]\nenabled = true\nfilter = portscan\nlogpath = /var/log/syslog\nmaxretry = 6\nbantime = 7200\naction = iptables-allports[name=portscan, protocol=all]\n\n# Block bad bots\n[apache-badbots]\nenabled = true\nport = http,https\nfilter = apache-badbots\nlogpath = /var/log/apache*/*access.log\nbantime = 172800   # 2 days\nmaxretry = 1\n\n# WordPress protection\n[wordpress]\nenabled = true\nfilter = wordpress\nport = http,https\nlogpath = /var/log/apache*/*access.log\nmaxretry = 3\nbantime = 3600\n\n# Aggressive SSH protection\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 86400\nfindtime = 300\nEOF\n```\n\n### Custom Security Filters\n\n```bash\n# Create port scan detection filter\nsudo tee /etc/fail2ban/filter.d/portscan.conf <<EOF\n[Definition]\nfailregex = UFW BLOCK.* SRC=<HOST>\n            rejected connection: .* SRC=<HOST>\n            dropped: .* SRC=<HOST>\nignoreregex =\nEOF\n\n# Create WordPress attack filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf <<EOF\n[Definition]\nfailregex = ^<HOST> .* \"POST /wp-login.php\n            ^<HOST> .* \"POST /xmlrpc.php\n            ^<HOST> .* \"GET /wp-admin/ HTTP/[0-9.]+\" 403\n            ^<HOST> .* \"GET /wp-content/.*/.*\\.php HTTP/[0-9.]+\" \nignoreregex = ^<HOST> .* \"GET /wp-admin/admin-ajax.php\nEOF\n\n# Create bad bot filter\nsudo tee /etc/fail2ban/filter.d/badbots.conf <<EOF\n[Definition]\nbadbotscustom = EmailCollector|WebEMailExtrac|TrackBack/1\\.02|sogou music spider|(?:Mozilla/\\d+\\.0\\s+)$\nbadbots = Atomic_Email_Hunter/4\\.0|atSpider/1\\.0|autoemailspider|bwh3_user_agent|China Local Browse 2\\.6|ContactBot/0\\.2|ContentSmartz|DataCha0s/2\\.0|DBrowse 1\\.4b|DBrowse 1\\.4d|Demo Bot DOT 16b|Demo Bot Z 16b|DSurf15a 01|DSurf15a 71|DSurf15a 81|DSurf15a VA|EBrowse 1\\.4b|Educate Search VxB|EmailSiphon|EmailSpider|EmailWolf 1\\.00|ESurf15a 15|ExtractorPro|Franklin Locator 1\\.8|FSurf15a 01|Full Web Bot 0416B|Full Web Bot 0516B|Full Web Bot 2816B|Guestbook Auto Submitter|Industry Program 1\\.0\\.x|ISC Systems iRc Search 2\\.1|IUPUI Research Bot v 1\\.9a|LARBIN-EXPERIMENTAL \\(efp@gmx\\.net\\)|LetsCrawl\\.com/1\\.0 \\+http\\://letscrawl\\.com/|Lincoln State Web Browser|LMQueueBot/0\\.2|LWP\\:\\:Simple/5\\.803|Mac Finder 1\\.0\\.xx|MFC Foundation Class Library 4\\.0|Microsoft URL Control - 6\\.00\\.8xxx|Missauga Locate 1\\.0\\.0|Missigua Locator 1\\.9|Missouri College Browse|Mizzu Labs 2\\.2|Mo College 1\\.9|MVAClient|Mozilla/2\\.0 \\(compatible; NEWT ActiveX; Win32\\)|Mozilla/3\\.0 \\(compatible; Indy Library\\)|Mozilla/3\\.0 \\(compatible; scan4mail \\(advanced version\\) http\\://www\\.peterspages\\.net/?scan4mail\\)|Mozilla/4\\.0 \\(compatible; Advanced Email Extractor v2\\.xx\\)|Mozilla/4\\.0 \\(compatible; Iplexx Spider/1\\.0 http\\://www\\.iplexx\\.at\\)|Mozilla/4\\.0 \\(compatible; MSIE 5\\.0; Windows NT; DigExt; DTS Agent|Mozilla/4\\.0 efp@gmx\\.net|Mozilla/5\\.0 \\(Version\\: xxxx Type\\:xx\\)|NameOfAgent \\(CMS Spider\\)|NASA Search 1\\.0|Nsauditor/1\\.x|PBrowse 1\\.4b|PEval 1\\.4b|Poirot|Port Huron Labs|Production Bot 0116B|Production Bot 2016B|Production Bot DOT 3016B|Program Shareware 1\\.0\\.2|PSurf15a 11|PSurf15a 51|PSurf15a VA|psycheclone|RSurf15a 41|RSurf15a 51|RSurf15a 81|searchbot admin@google\\.com|ShablastBot 1\\.0|snap\\.com beta crawler v0|Snapbot/1\\.0|Snapbot/1\\.0 \\(Snap Shots&#44; \\+http\\://www\\.snap\\.com\\)|sogou develop spider|Sogou Orion spider/3\\.0\\(\\+http\\://www\\.sogou\\.com/docs/help/webmasters\\.htm#07\\)|sogou spider|Sogou web spider/3\\.0\\(\\+http\\://www\\.sogou\\.com/docs/help/webmasters\\.htm#07\\)|sohu agent|SSurf15a 11 |TSurf15a 11|Under the Rainbow 2\\.2|User-Agent\\: Mozilla/4\\.0 \\(compatible; MSIE 6\\.0; Windows NT 5\\.1\\)|VadixBot|WebVulnCrawl\\.unknown/1\\.0 libwww-perl/5\\.803|Wells Search II|WEP Search 00\n\nfailregex = ^<HOST> -.*\"(GET|POST|HEAD).*HTTP.*\".*(?:%(badbots)s|%(badbotscustom)s).*\"$\nignoreregex =\nEOF\n```\n\n### Firewall Integration\n\n```bash\n# iptables integration\nsudo tee /etc/fail2ban/action.d/iptables-common.local <<EOF\n[Init]\n# Option: blocktype\n# Note: This is the default block type for all iptables actions\nblocktype = DROP\n\n# Option: iptables\n# Note: Path to iptables command\niptables = /sbin/iptables\n\n# Option: protocol\n# Note: Default protocol\nprotocol = tcp\n\n# Option: chain\n# Note: Default chain for filter table\nchain = INPUT\nEOF\n\n# nftables integration\nsudo tee /etc/fail2ban/action.d/nftables.local <<EOF\n[Definition]\nactionstart = nft add table inet fail2ban\n              nft add chain inet fail2ban f2b-<name> { type filter hook input priority 0 \\; }\n\nactionstop = nft delete chain inet fail2ban f2b-<name>\n\nactionban = nft add rule inet fail2ban f2b-<name> ip saddr <ip> drop\n\nactionunban = nft delete rule inet fail2ban f2b-<name> handle \\$(nft -a list chain inet fail2ban f2b-<name> | grep <ip> | awk '{print \\$NF}')\nEOF\n```\n\n## Database Setup\n\n### SQLite Database Configuration\n\n```bash\n# Default SQLite database location\nls -la /var/lib/fail2ban/fail2ban.sqlite3\n\n# Custom database configuration\nsudo tee -a /etc/fail2ban/fail2ban.local <<EOF\n\n[Definition]\n# Database configuration\ndbfile = /var/lib/fail2ban/fail2ban.sqlite3\ndbpurgeage = 7d\nEOF\n\n# View database content\nsudo sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT * FROM bans;\"\nsudo sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT jail, ip, COUNT(*) as count FROM bans GROUP BY jail, ip ORDER BY count DESC;\"\n```\n\n### MySQL Backend Configuration\n\n```bash\n# Install MySQL connector\nsudo apt install python3-pymysql  # Debian/Ubuntu\nsudo dnf install python3-PyMySQL   # RHEL/CentOS\n\n# Create database and user\nmysql -u root -p <<EOF\nCREATE DATABASE fail2ban;\nCREATE USER 'fail2ban'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON fail2ban.* TO 'fail2ban'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure fail2ban for MySQL\nsudo tee /etc/fail2ban/fail2ban.d/mysql.conf <<EOF\n[Definition]\ndbdriver = mysql\ndbhost = localhost\ndbport = 3306\ndbuser = fail2ban\ndbpassword = secure_password\ndbname = fail2ban\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Optimize fail2ban performance\nsudo tee /etc/fail2ban/fail2ban.d/performance.conf <<EOF\n[Definition]\n# Use systemd journal instead of log files\nbackend = systemd\n\n# Use pyinotify for better performance\nbackend = pyinotify\n\n# Increase socket timeout\nsocket_timeout = 30\n\n# Database optimization\ndbmaxmatches = 100\ndbpurgeage = 1d\nEOF\n\n# Configure systemd limits\nsudo mkdir -p /etc/systemd/system/fail2ban.service.d\nsudo tee /etc/systemd/system/fail2ban.service.d/limits.conf <<EOF\n[Service]\n# Increase limits for better performance\nLimitNOFILE=65536\nLimitNPROC=4096\nMemoryLimit=512M\nCPUQuota=50%\nNice=-5\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart fail2ban\n```\n\n### Log Processing Optimization\n\n```bash\n# Use systemd journal backend for better performance\nsudo tee /etc/fail2ban/jail.d/systemd-backend.conf <<EOF\n[DEFAULT]\nbackend = systemd\n\n[sshd]\nenabled = true\nbackend = systemd\njournalmatch = _SYSTEMD_UNIT=ssh.service + _COMM=sshd\n\n[nginx]\nenabled = true\nbackend = systemd\njournalmatch = _SYSTEMD_UNIT=nginx.service\nEOF\n\n# Configure log rotation for fail2ban\nsudo tee /etc/logrotate.d/fail2ban <<EOF\n/var/log/fail2ban.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 root adm\n    sharedscripts\n    postrotate\n        fail2ban-client flushlogs 1>/dev/null\n    endscript\n}\nEOF\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Check fail2ban status\nsudo fail2ban-client status\n\n# Check specific jail status\nsudo fail2ban-client status sshd\n\n# Get banned IPs for all jails\nfor jail in $(sudo fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g'); do\n    echo \"=== $jail ===\"\n    sudo fail2ban-client status $jail | grep \"Banned IP\"\ndone\n\n# Monitor fail2ban in real-time\nsudo tail -f /var/log/fail2ban.log\n\n# Show ban statistics\nsudo fail2ban-client banned\n```\n\n### Monitoring Script\n\n```bash\n#!/bin/bash\n# fail2ban-monitor.sh\n\nLOG_FILE=\"/var/log/fail2ban-monitor.log\"\nALERT_EMAIL=\"admin@example.com\"\n\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# Check fail2ban service status\ncheck_service() {\n    if ! systemctl is-active --quiet fail2ban; then\n        log \"ERROR: fail2ban service is not running!\"\n        echo \"fail2ban service down on $(hostname)\" | mail -s \"fail2ban Alert\" \"$ALERT_EMAIL\"\n        return 1\n    fi\n    log \"fail2ban service is running\"\n}\n\n# Monitor ban activity\nmonitor_bans() {\n    local jail_list=$(fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g')\n    \n    for jail in $jail_list; do\n        local status=$(fail2ban-client status \"$jail\")\n        local banned_count=$(echo \"$status\" | grep \"Currently banned:\" | awk '{print $NF}')\n        local total_banned=$(echo \"$status\" | grep \"Total banned:\" | awk '{print $NF}')\n        \n        log \"Jail: $jail - Currently banned: $banned_count, Total banned: $total_banned\"\n        \n        # Alert if too many bans\n        if [ \"$banned_count\" -gt 50 ]; then\n            log \"WARNING: High number of banned IPs in $jail jail\"\n            echo \"High ban count in $jail: $banned_count IPs\" | mail -s \"fail2ban Warning\" \"$ALERT_EMAIL\"\n        fi\n    done\n}\n\n# Check for suspicious patterns\ncheck_patterns() {\n    local recent_bans=$(tail -n 1000 /var/log/fail2ban.log | grep \"Ban\" | wc -l)\n    \n    if [ \"$recent_bans\" -gt 100 ]; then\n        log \"WARNING: High ban rate detected: $recent_bans bans in recent logs\"\n    fi\n}\n\n# Generate report\ngenerate_report() {\n    local report_file=\"/tmp/fail2ban-report-$(date +%Y%m%d).txt\"\n    \n    {\n        echo \"Fail2ban Report - $(date)\"\n        echo \"=========================\"\n        echo\n        fail2ban-client status\n        echo\n        echo \"Ban Statistics by Jail:\"\n        echo \"-----------------------\"\n        \n        for jail in $(fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g'); do\n            echo\n            echo \"[$jail]\"\n            fail2ban-client status \"$jail\"\n        done\n        \n        echo\n        echo \"Recent Activity:\"\n        echo \"----------------\"\n        tail -n 50 /var/log/fail2ban.log | grep -E \"(Ban|Unban|Found|Restore)\"\n    } > \"$report_file\"\n    \n    log \"Report generated: $report_file\"\n    \n    # Email report\n    mail -s \"Fail2ban Daily Report - $(hostname)\" \"$ALERT_EMAIL\" < \"$report_file\"\n}\n\n# Main monitoring loop\nmain() {\n    log \"Starting fail2ban monitoring...\"\n    \n    check_service || exit 1\n    monitor_bans\n    check_patterns\n    generate_report\n    \n    log \"Monitoring completed\"\n}\n\n# Run monitoring\nmain\n\n# Add to cron:\n# */15 * * * * /usr/local/bin/fail2ban-monitor.sh\n```\n\n### Prometheus Integration\n\n```bash\n# Install fail2ban exporter\nwget https://github.com/hectorjsmith/fail2ban-prometheus-exporter/releases/download/v0.10.0/fail2ban_exporter\nchmod +x fail2ban_exporter\nsudo mv fail2ban_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/fail2ban-exporter.service <<EOF\n[Unit]\nDescription=Fail2ban Prometheus Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/fail2ban_exporter\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now fail2ban-exporter\n\n# Configure Prometheus\necho \"  - job_name: 'fail2ban'\n    static_configs:\n      - targets: ['localhost:9191']\" >> /etc/prometheus/prometheus.yml\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# fail2ban-backup.sh\n\nBACKUP_DIR=\"/backup/fail2ban\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/fail2ban_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop fail2ban to ensure database consistency\nsystemctl stop fail2ban\n\n# Create backup\ntar -czf \"$BACKUP_FILE\" \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/ \\\n    /var/log/fail2ban.log* \\\n    2>/dev/null\n\n# Start fail2ban\nsystemctl start fail2ban\n\n# Encrypt backup\ngpg --cipher-algo AES256 --symmetric \"$BACKUP_FILE\"\nrm \"$BACKUP_FILE\"\n\necho \"Backup created: $BACKUP_FILE.gpg\"\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"fail2ban_backup_*.gpg\" -mtime +30 -delete\n\n# Backup banned IPs list\nfail2ban-client banned > \"$BACKUP_DIR/banned_ips_$DATE.txt\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# fail2ban-restore.sh\n\nBACKUP_FILE=\"$1\"\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.gpg>\"\n    exit 1\nfi\n\n# Decrypt backup\ngpg --decrypt \"$BACKUP_FILE\" > /tmp/fail2ban_restore.tar.gz\n\n# Stop fail2ban\nsystemctl stop fail2ban\n\n# Extract backup\ntar -xzf /tmp/fail2ban_restore.tar.gz -C /\n\n# Restore permissions\nchown -R root:root /etc/fail2ban\nchmod 644 /etc/fail2ban/*.conf\nchmod 644 /etc/fail2ban/*.local\n\n# Start fail2ban\nsystemctl start fail2ban\n\n# Clean up\nrm /tmp/fail2ban_restore.tar.gz\n\necho \"Restore completed\"\n\n# Reload jails\nfail2ban-client reload\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check for syntax errors\nfail2ban-client -t\n\n# Check logs\njournalctl -u fail2ban -n 100\ntail -f /var/log/fail2ban.log\n\n# Check permissions\nls -la /var/run/fail2ban/\nls -la /var/lib/fail2ban/\n\n# Start in foreground for debugging\nfail2ban-server -f -x -v\n```\n\n2. **IPs not getting banned**:\n```bash\n# Test regex patterns\nfail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check jail configuration\nfail2ban-client get sshd logpath\nfail2ban-client get sshd findtime\nfail2ban-client get sshd maxretry\n\n# Test specific log line\necho 'Dec 10 12:34:56 server sshd[12345]: Failed password for invalid user admin from 192.168.1.100 port 12345 ssh2' | fail2ban-regex - /etc/fail2ban/filter.d/sshd.conf\n```\n\n3. **Performance issues**:\n```bash\n# Check database size\nls -lh /var/lib/fail2ban/fail2ban.sqlite3\n\n# Purge old entries\nfail2ban-client set dbpurgeage 1d\nsqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"DELETE FROM bans WHERE timeofban < strftime('%s', 'now', '-7 days');\"\n\n# Monitor CPU usage\ntop -p $(pgrep fail2ban-server)\n\n# Check number of monitored files\nlsof -p $(pgrep fail2ban-server) | grep -c log\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\nsudo tee -a /etc/fail2ban/fail2ban.local <<EOF\n[Definition]\nloglevel = DEBUG\nEOF\n\nsudo systemctl restart fail2ban\n\n# Watch debug logs\ntail -f /var/log/fail2ban.log | grep -E \"(DEBUG|ERROR|WARNING)\"\n\n# Test jail processing\nfail2ban-client set sshd addlogpath /var/log/auth.log\nfail2ban-client set sshd banip 192.168.1.100\nfail2ban-client set sshd unbanip 192.168.1.100\n```\n\n## Integration Examples\n\n### Python Integration\n\n```python\n#!/usr/bin/env python3\n# fail2ban_api.py\n\nimport subprocess\nimport json\nimport socket\nfrom datetime import datetime\n\nclass Fail2banManager:\n    def __init__(self):\n        self.socket_path = \"/var/run/fail2ban/fail2ban.sock\"\n    \n    def execute_command(self, command):\n        \"\"\"Execute fail2ban-client command\"\"\"\n        try:\n            result = subprocess.run(\n                ['fail2ban-client'] + command.split(),\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            return result.stdout.strip()\n        except subprocess.CalledProcessError as e:\n            return f\"Error: {e.stderr}\"\n    \n    def get_status(self):\n        \"\"\"Get overall status\"\"\"\n        return self.execute_command(\"status\")\n    \n    def get_jail_status(self, jail):\n        \"\"\"Get specific jail status\"\"\"\n        status = self.execute_command(f\"status {jail}\")\n        \n        # Parse status output\n        lines = status.split('\\n')\n        result = {\n            'filter': {},\n            'actions': {},\n            'currently_failed': 0,\n            'total_failed': 0,\n            'currently_banned': 0,\n            'total_banned': 0,\n            'banned_ips': []\n        }\n        \n        for line in lines:\n            if 'Currently failed:' in line:\n                result['currently_failed'] = int(line.split(':')[1].strip())\n            elif 'Total failed:' in line:\n                result['total_failed'] = int(line.split(':')[1].strip())\n            elif 'Currently banned:' in line:\n                result['currently_banned'] = int(line.split(':')[1].strip())\n            elif 'Total banned:' in line:\n                result['total_banned'] = int(line.split(':')[1].strip())\n            elif 'Banned IP list:' in line:\n                ips = line.split(':')[1].strip()\n                result['banned_ips'] = ips.split() if ips else []\n        \n        return result\n    \n    def ban_ip(self, jail, ip, duration=None):\n        \"\"\"Ban an IP address\"\"\"\n        if duration:\n            return self.execute_command(f\"set {jail} banip {ip} {duration}\")\n        else:\n            return self.execute_command(f\"set {jail} banip {ip}\")\n    \n    def unban_ip(self, jail, ip):\n        \"\"\"Unban an IP address\"\"\"\n        return self.execute_command(f\"set {jail} unbanip {ip}\")\n    \n    def get_banned_ips(self):\n        \"\"\"Get all banned IPs across all jails\"\"\"\n        banned = {}\n        jails = self.get_jail_list()\n        \n        for jail in jails:\n            status = self.get_jail_status(jail)\n            if status['banned_ips']:\n                banned[jail] = status['banned_ips']\n        \n        return banned\n    \n    def get_jail_list(self):\n        \"\"\"Get list of all jails\"\"\"\n        status = self.get_status()\n        for line in status.split('\\n'):\n            if 'Jail list:' in line:\n                jails = line.split(':')[1].strip()\n                return [j.strip() for j in jails.split(',')]\n        return []\n    \n    def add_jail(self, jail_config):\n        \"\"\"Add a new jail configuration\"\"\"\n        config_path = f\"/etc/fail2ban/jail.d/{jail_config['name']}.conf\"\n        \n        config_content = f\"\"\"[{jail_config['name']}]\nenabled = true\nport = {jail_config.get('port', 'http,https')}\nfilter = {jail_config.get('filter', jail_config['name'])}\nlogpath = {jail_config['logpath']}\nmaxretry = {jail_config.get('maxretry', 5)}\nbantime = {jail_config.get('bantime', 3600)}\nfindtime = {jail_config.get('findtime', 600)}\n\"\"\"\n        \n        with open(config_path, 'w') as f:\n            f.write(config_content)\n        \n        # Reload configuration\n        return self.execute_command(\"reload\")\n\n# Example usage\nif __name__ == '__main__':\n    f2b = Fail2banManager()\n    \n    # Get overall status\n    print(\"Fail2ban Status:\")\n    print(f2b.get_status())\n    print(\"\\n\" + \"=\"*50 + \"\\n\")\n    \n    # Get banned IPs\n    print(\"Banned IPs by Jail:\")\n    banned = f2b.get_banned_ips()\n    for jail, ips in banned.items():\n        print(f\"\\n{jail}: {', '.join(ips) if ips else 'None'}\")\n    \n    # Check specific jail\n    print(\"\\n\" + \"=\"*50 + \"\\n\")\n    print(\"SSH Jail Status:\")\n    ssh_status = f2b.get_jail_status('sshd')\n    print(json.dumps(ssh_status, indent=2))\n```\n\n### Web Dashboard\n\n```python\n#!/usr/bin/env python3\n# fail2ban_dashboard.py\n\nfrom flask import Flask, render_template, jsonify, request\nfrom fail2ban_api import Fail2banManager\nimport json\n\napp = Flask(__name__)\nf2b = Fail2banManager()\n\n@app.route('/')\ndef dashboard():\n    return render_template('dashboard.html')\n\n@app.route('/api/status')\ndef api_status():\n    jails = f2b.get_jail_list()\n    status = {\n        'jails': {},\n        'total_banned': 0,\n        'total_failed': 0\n    }\n    \n    for jail in jails:\n        jail_status = f2b.get_jail_status(jail)\n        status['jails'][jail] = jail_status\n        status['total_banned'] += jail_status['total_banned']\n        status['total_failed'] += jail_status['total_failed']\n    \n    return jsonify(status)\n\n@app.route('/api/ban', methods=['POST'])\ndef api_ban():\n    data = request.json\n    result = f2b.ban_ip(data['jail'], data['ip'], data.get('duration'))\n    return jsonify({'success': True, 'result': result})\n\n@app.route('/api/unban', methods=['POST'])\ndef api_unban():\n    data = request.json\n    result = f2b.unban_ip(data['jail'], data['ip'])\n    return jsonify({'success': True, 'result': result})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n```\n\n### Shell Integration\n\n```bash\n#!/bin/bash\n# fail2ban-utils.sh - Fail2ban utility functions\n\n# Source this file in other scripts: source /usr/local/lib/fail2ban-utils.sh\n\n# Check if IP is banned\nis_ip_banned() {\n    local ip=\"$1\"\n    local jail=\"${2:-}\"\n    \n    if [ -z \"$jail\" ]; then\n        # Check all jails\n        for j in $(fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g'); do\n            if fail2ban-client status \"$j\" | grep -q \"$ip\"; then\n                echo \"IP $ip is banned in jail: $j\"\n                return 0\n            fi\n        done\n    else\n        # Check specific jail\n        if fail2ban-client status \"$jail\" | grep -q \"$ip\"; then\n            return 0\n        fi\n    fi\n    \n    return 1\n}\n\n# Ban IP with reason logging\nban_ip_with_reason() {\n    local jail=\"$1\"\n    local ip=\"$2\"\n    local reason=\"$3\"\n    local duration=\"${4:-3600}\"\n    \n    echo \"[$(date)] Banning IP $ip in jail $jail for $duration seconds. Reason: $reason\" >> /var/log/fail2ban-manual-bans.log\n    fail2ban-client set \"$jail\" banip \"$ip\" \"$duration\"\n}\n\n# Get ban statistics\nget_ban_stats() {\n    local total_banned=0\n    local total_failed=0\n    \n    echo \"Fail2ban Statistics\"\n    echo \"==================\"\n    \n    for jail in $(fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g'); do\n        local status=$(fail2ban-client status \"$jail\")\n        local banned=$(echo \"$status\" | grep \"Total banned:\" | awk '{print $NF}')\n        local failed=$(echo \"$status\" | grep \"Total failed:\" | awk '{print $NF}')\n        \n        echo \"[$jail]\"\n        echo \"  Failed: $failed\"\n        echo \"  Banned: $banned\"\n        \n        total_banned=$((total_banned + banned))\n        total_failed=$((total_failed + failed))\n    done\n    \n    echo\n    echo \"Totals:\"\n    echo \"  Failed: $total_failed\"\n    echo \"  Banned: $total_banned\"\n}\n\n# Whitelist management\nadd_to_whitelist() {\n    local ip=\"$1\"\n    \n    # Add to fail2ban whitelist\n    if grep -q \"ignoreip\" /etc/fail2ban/jail.local; then\n        sed -i \"/ignoreip/s/$/,$ip/\" /etc/fail2ban/jail.local\n    else\n        echo \"ignoreip = 127.0.0.1/8 ::1 $ip\" >> /etc/fail2ban/jail.local\n    fi\n    \n    # Reload configuration\n    fail2ban-client reload\n    \n    echo \"Added $ip to whitelist\"\n}\n\n# Export functions for use in other scripts\nexport -f is_ip_banned\nexport -f ban_ip_with_reason\nexport -f get_ban_stats\nexport -f add_to_whitelist\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update fail2ban\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade fail2ban\n\n# Arch Linux\nsudo pacman -Syu fail2ban\n\n# Alpine Linux\napk update && apk upgrade fail2ban\n\n# openSUSE\nsudo zypper update fail2ban\n\n# FreeBSD\npkg update && pkg upgrade py39-fail2ban\n\n# Always backup before updates\n/usr/local/bin/fail2ban-backup.sh\n\n# Restart after updates\nsudo systemctl restart fail2ban\n```\n\n### Regular Maintenance Tasks\n\n```bash\n#!/bin/bash\n# fail2ban-maintenance.sh\n\nLOG_FILE=\"/var/log/fail2ban-maintenance.log\"\n\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# Update filters from repository\nupdate_filters() {\n    log \"Updating fail2ban filters...\"\n    \n    cd /tmp\n    git clone https://github.com/fail2ban/fail2ban.git\n    \n    # Backup existing filters\n    cp -r /etc/fail2ban/filter.d /etc/fail2ban/filter.d.bak\n    \n    # Copy new filters\n    cp /tmp/fail2ban/config/filter.d/* /etc/fail2ban/filter.d/\n    \n    # Test configuration\n    if fail2ban-client -t; then\n        log \"Filter update successful\"\n    else\n        log \"ERROR: Filter update failed, restoring backup\"\n        rm -rf /etc/fail2ban/filter.d\n        mv /etc/fail2ban/filter.d.bak /etc/fail2ban/filter.d\n    fi\n    \n    rm -rf /tmp/fail2ban\n}\n\n# Clean old database entries\nclean_database() {\n    log \"Cleaning fail2ban database...\"\n    \n    # Get database size before\n    size_before=$(ls -lh /var/lib/fail2ban/fail2ban.sqlite3 | awk '{print $5}')\n    \n    # Clean entries older than 30 days\n    sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"DELETE FROM bans WHERE timeofban < strftime('%s', 'now', '-30 days');\"\n    sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"VACUUM;\"\n    \n    # Get database size after\n    size_after=$(ls -lh /var/lib/fail2ban/fail2ban.sqlite3 | awk '{print $5}')\n    \n    log \"Database cleaned. Size: $size_before -> $size_after\"\n}\n\n# Check and update GeoIP database\nupdate_geoip() {\n    log \"Updating GeoIP database...\"\n    \n    if command -v geoipupdate >/dev/null 2>&1; then\n        geoipupdate\n        log \"GeoIP database updated\"\n    else\n        log \"GeoIP update tool not installed\"\n    fi\n}\n\n# Generate monthly report\ngenerate_monthly_report() {\n    log \"Generating monthly report...\"\n    \n    report_file=\"/var/log/fail2ban-monthly-$(date +%Y%m).txt\"\n    \n    {\n        echo \"Fail2ban Monthly Report - $(date '+%B %Y')\"\n        echo \"========================================\"\n        echo\n        \n        # Get ban statistics from database\n        echo \"Top 10 Banned IPs:\"\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT ip, COUNT(*) as count FROM bans WHERE timeofban > strftime('%s', 'now', '-30 days') GROUP BY ip ORDER BY count DESC LIMIT 10;\"\n        \n        echo\n        echo \"Bans by Jail:\"\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT jail, COUNT(*) as count FROM bans WHERE timeofban > strftime('%s', 'now', '-30 days') GROUP BY jail ORDER BY count DESC;\"\n        \n        echo\n        echo \"Daily Ban Trend:\"\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT date(timeofban, 'unixepoch') as day, COUNT(*) as count FROM bans WHERE timeofban > strftime('%s', 'now', '-30 days') GROUP BY day ORDER BY day;\"\n    } > \"$report_file\"\n    \n    log \"Monthly report saved to: $report_file\"\n}\n\n# Main maintenance routine\nmain() {\n    log \"Starting fail2ban maintenance...\"\n    \n    update_filters\n    clean_database\n    update_geoip\n    generate_monthly_report\n    \n    # Reload fail2ban\n    fail2ban-client reload\n    \n    log \"Maintenance completed\"\n}\n\n# Run maintenance\nmain\n\n# Schedule in cron:\n# 0 2 1 * * /usr/local/bin/fail2ban-maintenance.sh\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# fail2ban-health.sh\n\n# Check fail2ban health\ncheck_health() {\n    local status=0\n    \n    # Check service\n    if ! systemctl is-active --quiet fail2ban; then\n        echo \"CRITICAL: fail2ban service is not running\"\n        status=2\n    fi\n    \n    # Check database\n    if [ ! -f /var/lib/fail2ban/fail2ban.sqlite3 ]; then\n        echo \"WARNING: Database file missing\"\n        status=1\n    fi\n    \n    # Check socket\n    if [ ! -S /var/run/fail2ban/fail2ban.sock ]; then\n        echo \"WARNING: Socket file missing\"\n        status=1\n    fi\n    \n    # Check jails\n    active_jails=$(fail2ban-client status | grep \"Jail list\" | wc -w)\n    if [ \"$active_jails\" -lt 3 ]; then\n        echo \"WARNING: Only $active_jails jails active\"\n        status=1\n    fi\n    \n    if [ $status -eq 0 ]; then\n        echo \"OK: fail2ban is healthy\"\n    fi\n    \n    exit $status\n}\n\ncheck_health\n```\n\n## Additional Resources\n\n- [Official Fail2ban Documentation](https://www.fail2ban.org/)\n- [Fail2ban GitHub Repository](https://github.com/fail2ban/fail2ban)\n- [Fail2ban Wiki](https://github.com/fail2ban/fail2ban/wiki)\n- [Filter Development Guide](https://fail2ban.readthedocs.io/en/latest/filters.html)\n- [Action Development Guide](https://fail2ban.readthedocs.io/en/latest/actions.html)\n- [Community Filters](https://github.com/fail2ban/fail2ban/tree/master/config/filter.d)\n- [Best Practices Guide](https://www.fail2ban.org/wiki/index.php/Best_practices)\n- [Security Hardening Guide](https://www.fail2ban.org/wiki/index.php/Security)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">Fail2ban is a free and open-source intrusion prevention software framework that protects servers from brute-force attacks. Written in Python, it monitors log files and bans IP addresses that show malicious signs such as too many password failures or seeking exploits. It serves as a powerful FOSS alternative to commercial security solutions like Cloudflare Rate Limiting, AWS WAF, or proprietary IPS systems, providing enterprise-grade protection without licensing costs or vendor lock-in.</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for high-traffic servers)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (1GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation, plus log storage</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for updates</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with systemd or init</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (limited support)</li>\n<li class=\"mobile-list-item\">Windows: WSL2 with Linux distribution</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Firewall access (iptables, nftables, pf, or ipfw)</li>\n<li class=\"mobile-list-item\">Root access to modify firewall rules</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Python 3.5+ (3.8+ recommended)</li>\n<li class=\"mobile-list-item\">iptables, nftables, or equivalent firewall</li>\n<li class=\"mobile-list-item\">systemd or init system</li>\n<li class=\"mobile-list-item\">Log files to monitor (sshd, nginx, apache, etc.)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install fail2ban\nsudo dnf install -y fail2ban fail2ban-systemd\n\n# Install additional dependencies\nsudo dnf install -y python3-systemd python3-pyinotify\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install fail2ban\nsudo apt install -y fail2ban\n\n# Install additional tools\nsudo apt install -y python3-systemd python3-pyinotify iptables-persistent\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fail2ban\nsudo pacman -S fail2ban\n\n# Install additional dependencies\nsudo pacman -S python-systemd python-pyinotify\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fail2ban\napk add --no-cache fail2ban fail2ban-openrc\n\n# Install additional dependencies\napk add --no-cache py3-systemd iptables ip6tables\n\n# Enable and start service\nrc-update add fail2ban default\nrc-service fail2ban start\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y fail2ban python3-systemd\n\n# SLES 15\nsudo SUSEConnect -p sle-module-basesystem/15.5/x86_64\nsudo zypper install -y fail2ban\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=fail2ban\nsudo firewall-cmd --reload\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install fail2ban\n\n# Copy configuration files\nsudo cp /usr/local/etc/fail2ban/fail2ban.conf /usr/local/etc/fail2ban/fail2ban.local\nsudo cp /usr/local/etc/fail2ban/jail.conf /usr/local/etc/fail2ban/jail.local\n\n# Start service\nsudo brew services start fail2ban\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install py39-fail2ban\n\n# Enable in rc.conf\necho &#039;fail2ban_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Copy configuration\ncp /usr/local/etc/fail2ban/fail2ban.conf /usr/local/etc/fail2ban/fail2ban.local\ncp /usr/local/etc/fail2ban/jail.conf /usr/local/etc/fail2ban/jail.local\n\n# Start service\nservice fail2ban start\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-wsl2\" class=\"mobile-header\">Windows (WSL2)</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Install WSL2 with Ubuntu\nwsl --install -d Ubuntu-22.04\n\n# Inside WSL2 Ubuntu\nsudo apt update\nsudo apt install -y fail2ban\n\n# Configure for Windows logs monitoring\n# Note: Limited functionality - primarily for learning/testing\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create local configuration files (never edit .conf files directly)\nsudo cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local\nsudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\n\n# Edit main configuration\nsudo tee /etc/fail2ban/fail2ban.local &lt;&lt;EOF\n[Definition]\nloglevel = INFO\nlogtarget = /var/log/fail2ban.log\nsyslogsocket = auto\nsocket = /var/run/fail2ban/fail2ban.sock\npidfile = /var/run/fail2ban/fail2ban.pid\ndbfile = /var/lib/fail2ban/fail2ban.sqlite3\ndbpurgeage = 1d\nEOF\n\n# Configure basic jail settings\nsudo tee /etc/fail2ban/jail.local &lt;&lt;EOF\n[DEFAULT]\n# Ban duration (in seconds)\nbantime = 3600\n# Time window for maxretry\nfindtime = 600\n# Number of failures before ban\nmaxretry = 5\n# Email notifications\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n# Action to take\naction = %(action_mwl)s\n\n# Whitelist\nignoreip = 127.0.0.1/8 ::1 192.168.0.0/16\n\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nfindtime = 60\nbantime = 600\n\n[apache-auth]\nenabled = false\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache*/*error.log\nmaxretry = 6\n\n[postfix]\nenabled = false\nport = smtp,465,submission\nfilter = postfix\nlogpath = /var/log/mail.log\nEOF\n\n# Restart fail2ban\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-jail-configuration\" class=\"mobile-header\">Custom Jail Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create custom filter for application\nsudo tee /etc/fail2ban/filter.d/myapp.conf &lt;&lt;EOF\n[Definition]\nfailregex = ^&lt;HOST&gt; - - \\[.*\\] &quot;POST /login HTTP/.*&quot; 401\n            ^Failed login from &lt;HOST&gt;\n            ^Authentication failure for .* from &lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create jail for custom application\nsudo tee -a /etc/fail2ban/jail.local &lt;&lt;EOF\n\n[myapp]\nenabled = true\nfilter = myapp\nport = 8080\nlogpath = /var/log/myapp/access.log\nmaxretry = 3\nbantime = 3600\nfindtime = 300\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable fail2ban\n\n# Start service\nsudo systemctl start fail2ban\n\n# Stop service\nsudo systemctl stop fail2ban\n\n# Restart service\nsudo systemctl restart fail2ban\n\n# Reload configuration\nsudo systemctl reload fail2ban\n\n# Check status\nsudo systemctl status fail2ban\n\n# View logs\nsudo journalctl -u fail2ban -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add fail2ban default\n\n# Start service\nrc-service fail2ban start\n\n# Stop service\nrc-service fail2ban stop\n\n# Restart service\nrc-service fail2ban restart\n\n# Check status\nrc-service fail2ban status\n\n# View logs\ntail -f /var/log/fail2ban.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in rc.conf\necho &#039;fail2ban_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice fail2ban start\n\n# Stop service\nservice fail2ban stop\n\n# Restart service\nservice fail2ban restart\n\n# Check status\nservice fail2ban status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using brew services\nbrew services start fail2ban\nbrew services stop fail2ban\nbrew services restart fail2ban\n\n# Check status\nbrew services list | grep fail2ban\n\n# Manual control\nsudo /usr/local/bin/fail2ban-client start\nsudo /usr/local/bin/fail2ban-client stop</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"multi-service-protection\" class=\"mobile-header\">Multi-Service Protection</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Comprehensive jail configuration\nsudo tee /etc/fail2ban/jail.d/multi-service.conf &lt;&lt;EOF\n# SSH Protection\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\nfindtime = 600\n\n[sshd-ddos]\nenabled = true\nport = ssh\nfilter = sshd-ddos\nlogpath = /var/log/auth.log\nmaxretry = 10\nbantime = 600\nfindtime = 60\n\n# Web Server Protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nport = http,https\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 5\n\n[nginx-badbots]\nenabled = true\nport = http,https\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n[nginx-noproxy]\nenabled = true\nport = http,https\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Database Protection\n[mysqld-auth]\nenabled = true\nfilter = mysqld-auth\nport = 3306\nlogpath = /var/log/mysql/error.log\nmaxretry = 5\n\n[postgresql]\nenabled = true\nport = 5432\nfilter = postgresql\nlogpath = /var/log/postgresql/*.log\nmaxretry = 5\n\n# Mail Server Protection\n[postfix]\nenabled = true\nport = smtp,465,submission\nfilter = postfix\nlogpath = /var/log/mail.log\n\n[postfix-sasl]\nenabled = true\nport = smtp,465,submission,imap,imaps,pop3,pop3s\nfilter = postfix-sasl\nlogpath = /var/log/mail.log\n\n[dovecot]\nenabled = true\nport = pop3,pop3s,imap,imaps,submission,465,sieve\nfilter = dovecot\nlogpath = /var/log/mail.log\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"geoip-blocking\" class=\"mobile-header\">GeoIP Blocking</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install GeoIP database\nsudo apt install geoip-database geoip-bin  # Debian/Ubuntu\nsudo dnf install GeoIP GeoIP-data         # RHEL/CentOS\n\n# Create GeoIP action\nsudo tee /etc/fail2ban/action.d/geoip-block.conf &lt;&lt;EOF\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = if [ &quot;\\$(geoiplookup &lt;ip&gt; | grep -v &#039;US\\|CA\\|GB&#039;)&quot; ]; then iptables -I f2b-&lt;name&gt; 1 -s &lt;ip&gt; -j DROP; fi\nactionunban = iptables -D f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP\nEOF\n\n# Use in jail\nsudo tee -a /etc/fail2ban/jail.local &lt;&lt;EOF\n\n[sshd-geoip]\nenabled = true\nfilter = sshd\naction = geoip-block[name=%(__name__)s]\nlogpath = /var/log/auth.log\nmaxretry = 3\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"persistent-bans\" class=\"mobile-header\">Persistent Bans</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create persistent ban action\nsudo tee /etc/fail2ban/action.d/iptables-persistent.conf &lt;&lt;EOF\n[Definition]\nactionstart = iptables -N f2b-&lt;name&gt;\n              iptables -A f2b-&lt;name&gt; -j RETURN\n              iptables -I &lt;chain&gt; -p &lt;protocol&gt; --dport &lt;port&gt; -j f2b-&lt;name&gt;\n              # Load persistent bans\n              [ -f /etc/fail2ban/persistent/&lt;name&gt;.bans ] &amp;&amp; while read ip; do iptables -I f2b-&lt;name&gt; 1 -s \\$ip -j DROP; done &lt; /etc/fail2ban/persistent/&lt;name&gt;.bans\n\nactionstop = iptables -D &lt;chain&gt; -p &lt;protocol&gt; --dport &lt;port&gt; -j f2b-&lt;name&gt;\n             iptables -F f2b-&lt;name&gt;\n             iptables -X f2b-&lt;name&gt;\n\nactionban = iptables -I f2b-&lt;name&gt; 1 -s &lt;ip&gt; -j DROP\n            echo &#039;&lt;ip&gt;&#039; &gt;&gt; /etc/fail2ban/persistent/&lt;name&gt;.bans\n            sort -u /etc/fail2ban/persistent/&lt;name&gt;.bans -o /etc/fail2ban/persistent/&lt;name&gt;.bans\n\nactionunban = iptables -D f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP\n              sed -i &#039;/&lt;ip&gt;/d&#039; /etc/fail2ban/persistent/&lt;name&gt;.bans\nEOF\n\n# Create directory for persistent bans\nsudo mkdir -p /etc/fail2ban/persistent</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-reverse-proxy-configuration\" class=\"mobile-header\">nginx Reverse Proxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/conf.d/fail2ban.conf\n# Pass real IP to backend for fail2ban processing\n\nmap $remote_addr $proxy_forwarded_elem {\n    ~^[0-9.]+$          &quot;for=$remote_addr&quot;;\n    ~^[0-9A-Fa-f:.]+$   &quot;for=\\&quot;[$remote_addr]\\&quot;&quot;;\n    default             &quot;for=unknown&quot;;\n}\n\nmap $http_forwarded $proxy_add_forwarded {\n    &quot;&quot;      &quot;$proxy_forwarded_elem&quot;;\n    default &quot;$http_forwarded, $proxy_forwarded_elem&quot;;\n}\n\nserver {\n    listen 80;\n    server_name app.example.com;\n\n    location / {\n        proxy_pass http://backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Forwarded $proxy_add_forwarded;\n        \n        # Rate limiting\n        limit_req zone=app_limit burst=10 nodelay;\n        limit_req_status 429;\n    }\n}\n\n# Define rate limit zone\nlimit_req_zone $binary_remote_addr zone=app_limit:10m rate=10r/s;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n\ndefaults\n    log global\n    option httplog\n    option forwardfor\n\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cert.pem\n    \n    # Track abusive behavior\n    stick-table type ip size 100k expire 30m store conn_rate(3s),conn_cur,http_req_rate(10s)\n    \n    # Block if connection rate exceeds limit\n    tcp-request connection reject if { src_conn_rate gt 20 }\n    tcp-request connection track-sc0 src\n    \n    # Block if HTTP request rate exceeds limit\n    http-request deny if { sc_http_req_rate(0) gt 20 }\n    \n    default_backend web_servers\n\nbackend web_servers\n    # Forward real IP for fail2ban\n    option forwardfor header X-Real-IP\n    server web1 192.168.1.10:80 check\n    server web2 192.168.1.11:80 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-reverse-proxy\" class=\"mobile-header\">Apache Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/reverse-proxy.conf\n&lt;VirtualHost *:80&gt;\n    ServerName app.example.com\n    \n    # Enable required modules\n    # a2enmod proxy proxy_http remoteip\n    \n    # Trust proxy headers from load balancer\n    RemoteIPHeader X-Forwarded-For\n    RemoteIPTrustedProxy 10.0.0.0/8\n    \n    # Log real IP\n    LogFormat &quot;%a %l %u %t \\&quot;%r\\&quot; %&gt;s %O \\&quot;%{Referer}i\\&quot; \\&quot;%{User-Agent}i\\&quot;&quot; proxy\n    CustomLog ${APACHE_LOG_DIR}/access.log proxy\n    \n    ProxyPass / http://backend/\n    ProxyPassReverse / http://backend/\n    \n    # Pass real IP to backend\n    ProxyPreserveHost On\n    RequestHeader set X-Real-IP &quot;%{REMOTE_ADDR}s&quot;\n    RequestHeader set X-Forwarded-For &quot;%{X-Forwarded-For}i&quot;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"enhanced-security-rules\" class=\"mobile-header\">Enhanced Security Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive security configuration\nsudo tee /etc/fail2ban/jail.d/security-enhanced.conf &lt;&lt;EOF\n[DEFAULT]\n# Aggressive ban settings for security\nbantime = 86400    # 24 hours\nfindtime = 3600    # 1 hour window\nmaxretry = 3       # Low tolerance\nchain = INPUT      # iptables chain\nprotocol = tcp     # Default protocol\naction = %(action_mwl)s\n\n# Recidive jail for repeat offenders\n[recidive]\nenabled = true\nfilter = recidive\nlogpath = /var/log/fail2ban.log\nbantime = 604800   # 1 week\nfindtime = 86400   # 1 day\nmaxretry = 3\naction = iptables-allports[name=recidive, protocol=all]\n         sendmail-whois-lines[name=recidive, logpath=/var/log/fail2ban.log]\n\n# Port scanning detection\n[portscan]\nenabled = true\nfilter = portscan\nlogpath = /var/log/syslog\nmaxretry = 6\nbantime = 7200\naction = iptables-allports[name=portscan, protocol=all]\n\n# Block bad bots\n[apache-badbots]\nenabled = true\nport = http,https\nfilter = apache-badbots\nlogpath = /var/log/apache*/*access.log\nbantime = 172800   # 2 days\nmaxretry = 1\n\n# WordPress protection\n[wordpress]\nenabled = true\nfilter = wordpress\nport = http,https\nlogpath = /var/log/apache*/*access.log\nmaxretry = 3\nbantime = 3600\n\n# Aggressive SSH protection\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 86400\nfindtime = 300\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-security-filters\" class=\"mobile-header\">Custom Security Filters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create port scan detection filter\nsudo tee /etc/fail2ban/filter.d/portscan.conf &lt;&lt;EOF\n[Definition]\nfailregex = UFW BLOCK.* SRC=&lt;HOST&gt;\n            rejected connection: .* SRC=&lt;HOST&gt;\n            dropped: .* SRC=&lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create WordPress attack filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf &lt;&lt;EOF\n[Definition]\nfailregex = ^&lt;HOST&gt; .* &quot;POST /wp-login.php\n            ^&lt;HOST&gt; .* &quot;POST /xmlrpc.php\n            ^&lt;HOST&gt; .* &quot;GET /wp-admin/ HTTP/[0-9.]+&quot; 403\n            ^&lt;HOST&gt; .* &quot;GET /wp-content/.*/.*\\.php HTTP/[0-9.]+&quot; \nignoreregex = ^&lt;HOST&gt; .* &quot;GET /wp-admin/admin-ajax.php\nEOF\n\n# Create bad bot filter\nsudo tee /etc/fail2ban/filter.d/badbots.conf &lt;&lt;EOF\n[Definition]\nbadbotscustom = EmailCollector|WebEMailExtrac|TrackBack/1\\.02|sogou music spider|(?:Mozilla/\\d+\\.0\\s+)$\nbadbots = Atomic_Email_Hunter/4\\.0|atSpider/1\\.0|autoemailspider|bwh3_user_agent|China Local Browse 2\\.6|ContactBot/0\\.2|ContentSmartz|DataCha0s/2\\.0|DBrowse 1\\.4b|DBrowse 1\\.4d|Demo Bot DOT 16b|Demo Bot Z 16b|DSurf15a 01|DSurf15a 71|DSurf15a 81|DSurf15a VA|EBrowse 1\\.4b|Educate Search VxB|EmailSiphon|EmailSpider|EmailWolf 1\\.00|ESurf15a 15|ExtractorPro|Franklin Locator 1\\.8|FSurf15a 01|Full Web Bot 0416B|Full Web Bot 0516B|Full Web Bot 2816B|Guestbook Auto Submitter|Industry Program 1\\.0\\.x|ISC Systems iRc Search 2\\.1|IUPUI Research Bot v 1\\.9a|LARBIN-EXPERIMENTAL \\(efp@gmx\\.net\\)|LetsCrawl\\.com/1\\.0 \\+http\\://letscrawl\\.com/|Lincoln State Web Browser|LMQueueBot/0\\.2|LWP\\:\\:Simple/5\\.803|Mac Finder 1\\.0\\.xx|MFC Foundation Class Library 4\\.0|Microsoft URL Control - 6\\.00\\.8xxx|Missauga Locate 1\\.0\\.0|Missigua Locator 1\\.9|Missouri College Browse|Mizzu Labs 2\\.2|Mo College 1\\.9|MVAClient|Mozilla/2\\.0 \\(compatible; NEWT ActiveX; Win32\\)|Mozilla/3\\.0 \\(compatible; Indy Library\\)|Mozilla/3\\.0 \\(compatible; scan4mail \\(advanced version\\) http\\://www\\.peterspages\\.net/?scan4mail\\)|Mozilla/4\\.0 \\(compatible; Advanced Email Extractor v2\\.xx\\)|Mozilla/4\\.0 \\(compatible; Iplexx Spider/1\\.0 http\\://www\\.iplexx\\.at\\)|Mozilla/4\\.0 \\(compatible; MSIE 5\\.0; Windows NT; DigExt; DTS Agent|Mozilla/4\\.0 efp@gmx\\.net|Mozilla/5\\.0 \\(Version\\: xxxx Type\\:xx\\)|NameOfAgent \\(CMS Spider\\)|NASA Search 1\\.0|Nsauditor/1\\.x|PBrowse 1\\.4b|PEval 1\\.4b|Poirot|Port Huron Labs|Production Bot 0116B|Production Bot 2016B|Production Bot DOT 3016B|Program Shareware 1\\.0\\.2|PSurf15a 11|PSurf15a 51|PSurf15a VA|psycheclone|RSurf15a 41|RSurf15a 51|RSurf15a 81|searchbot admin@google\\.com|ShablastBot 1\\.0|snap\\.com beta crawler v0|Snapbot/1\\.0|Snapbot/1\\.0 \\(Snap Shots&amp;#44; \\+http\\://www\\.snap\\.com\\)|sogou develop spider|Sogou Orion spider/3\\.0\\(\\+http\\://www\\.sogou\\.com/docs/help/webmasters\\.htm#07\\)|sogou spider|Sogou web spider/3\\.0\\(\\+http\\://www\\.sogou\\.com/docs/help/webmasters\\.htm#07\\)|sohu agent|SSurf15a 11 |TSurf15a 11|Under the Rainbow 2\\.2|User-Agent\\: Mozilla/4\\.0 \\(compatible; MSIE 6\\.0; Windows NT 5\\.1\\)|VadixBot|WebVulnCrawl\\.unknown/1\\.0 libwww-perl/5\\.803|Wells Search II|WEP Search 00\n\nfailregex = ^&lt;HOST&gt; -.*&quot;(GET|POST|HEAD).*HTTP.*&quot;.*(?:%(badbots)s|%(badbotscustom)s).*&quot;$\nignoreregex =\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-integration\" class=\"mobile-header\">Firewall Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># iptables integration\nsudo tee /etc/fail2ban/action.d/iptables-common.local &lt;&lt;EOF\n[Init]\n# Option: blocktype\n# Note: This is the default block type for all iptables actions\nblocktype = DROP\n\n# Option: iptables\n# Note: Path to iptables command\niptables = /sbin/iptables\n\n# Option: protocol\n# Note: Default protocol\nprotocol = tcp\n\n# Option: chain\n# Note: Default chain for filter table\nchain = INPUT\nEOF\n\n# nftables integration\nsudo tee /etc/fail2ban/action.d/nftables.local &lt;&lt;EOF\n[Definition]\nactionstart = nft add table inet fail2ban\n              nft add chain inet fail2ban f2b-&lt;name&gt; { type filter hook input priority 0 \\; }\n\nactionstop = nft delete chain inet fail2ban f2b-&lt;name&gt;\n\nactionban = nft add rule inet fail2ban f2b-&lt;name&gt; ip saddr &lt;ip&gt; drop\n\nactionunban = nft delete rule inet fail2ban f2b-&lt;name&gt; handle \\$(nft -a list chain inet fail2ban f2b-&lt;name&gt; | grep &lt;ip&gt; | awk &#039;{print \\$NF}&#039;)\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"sqlite-database-configuration\" class=\"mobile-header\">SQLite Database Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Default SQLite database location\nls -la /var/lib/fail2ban/fail2ban.sqlite3\n\n# Custom database configuration\nsudo tee -a /etc/fail2ban/fail2ban.local &lt;&lt;EOF\n\n[Definition]\n# Database configuration\ndbfile = /var/lib/fail2ban/fail2ban.sqlite3\ndbpurgeage = 7d\nEOF\n\n# View database content\nsudo sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT * FROM bans;&quot;\nsudo sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT jail, ip, COUNT(*) as count FROM bans GROUP BY jail, ip ORDER BY count DESC;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-backend-configuration\" class=\"mobile-header\">MySQL Backend Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MySQL connector\nsudo apt install python3-pymysql  # Debian/Ubuntu\nsudo dnf install python3-PyMySQL   # RHEL/CentOS\n\n# Create database and user\nmysql -u root -p &lt;&lt;EOF\nCREATE DATABASE fail2ban;\nCREATE USER &#039;fail2ban&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON fail2ban.* TO &#039;fail2ban&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure fail2ban for MySQL\nsudo tee /etc/fail2ban/fail2ban.d/mysql.conf &lt;&lt;EOF\n[Definition]\ndbdriver = mysql\ndbhost = localhost\ndbport = 3306\ndbuser = fail2ban\ndbpassword = secure_password\ndbname = fail2ban\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize fail2ban performance\nsudo tee /etc/fail2ban/fail2ban.d/performance.conf &lt;&lt;EOF\n[Definition]\n# Use systemd journal instead of log files\nbackend = systemd\n\n# Use pyinotify for better performance\nbackend = pyinotify\n\n# Increase socket timeout\nsocket_timeout = 30\n\n# Database optimization\ndbmaxmatches = 100\ndbpurgeage = 1d\nEOF\n\n# Configure systemd limits\nsudo mkdir -p /etc/systemd/system/fail2ban.service.d\nsudo tee /etc/systemd/system/fail2ban.service.d/limits.conf &lt;&lt;EOF\n[Service]\n# Increase limits for better performance\nLimitNOFILE=65536\nLimitNPROC=4096\nMemoryLimit=512M\nCPUQuota=50%\nNice=-5\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-processing-optimization\" class=\"mobile-header\">Log Processing Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use systemd journal backend for better performance\nsudo tee /etc/fail2ban/jail.d/systemd-backend.conf &lt;&lt;EOF\n[DEFAULT]\nbackend = systemd\n\n[sshd]\nenabled = true\nbackend = systemd\njournalmatch = _SYSTEMD_UNIT=ssh.service + _COMM=sshd\n\n[nginx]\nenabled = true\nbackend = systemd\njournalmatch = _SYSTEMD_UNIT=nginx.service\nEOF\n\n# Configure log rotation for fail2ban\nsudo tee /etc/logrotate.d/fail2ban &lt;&lt;EOF\n/var/log/fail2ban.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 root adm\n    sharedscripts\n    postrotate\n        fail2ban-client flushlogs 1&gt;/dev/null\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check fail2ban status\nsudo fail2ban-client status\n\n# Check specific jail status\nsudo fail2ban-client status sshd\n\n# Get banned IPs for all jails\nfor jail in $(sudo fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;); do\n    echo &quot;=== $jail ===&quot;\n    sudo fail2ban-client status $jail | grep &quot;Banned IP&quot;\ndone\n\n# Monitor fail2ban in real-time\nsudo tail -f /var/log/fail2ban.log\n\n# Show ban statistics\nsudo fail2ban-client banned</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-script\" class=\"mobile-header\">Monitoring Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-monitor.sh\n\nLOG_FILE=&quot;/var/log/fail2ban-monitor.log&quot;\nALERT_EMAIL=&quot;admin@example.com&quot;\n\nlog() {\n    echo &quot;[$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)] $1&quot; | tee -a &quot;$LOG_FILE&quot;\n}\n\n# Check fail2ban service status\ncheck_service() {\n    if ! systemctl is-active --quiet fail2ban; then\n        log &quot;ERROR: fail2ban service is not running!&quot;\n        echo &quot;fail2ban service down on $(hostname)&quot; | mail -s &quot;fail2ban Alert&quot; &quot;$ALERT_EMAIL&quot;\n        return 1\n    fi\n    log &quot;fail2ban service is running&quot;\n}\n\n# Monitor ban activity\nmonitor_bans() {\n    local jail_list=$(fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;)\n    \n    for jail in $jail_list; do\n        local status=$(fail2ban-client status &quot;$jail&quot;)\n        local banned_count=$(echo &quot;$status&quot; | grep &quot;Currently banned:&quot; | awk &#039;{print $NF}&#039;)\n        local total_banned=$(echo &quot;$status&quot; | grep &quot;Total banned:&quot; | awk &#039;{print $NF}&#039;)\n        \n        log &quot;Jail: $jail - Currently banned: $banned_count, Total banned: $total_banned&quot;\n        \n        # Alert if too many bans\n        if [ &quot;$banned_count&quot; -gt 50 ]; then\n            log &quot;WARNING: High number of banned IPs in $jail jail&quot;\n            echo &quot;High ban count in $jail: $banned_count IPs&quot; | mail -s &quot;fail2ban Warning&quot; &quot;$ALERT_EMAIL&quot;\n        fi\n    done\n}\n\n# Check for suspicious patterns\ncheck_patterns() {\n    local recent_bans=$(tail -n 1000 /var/log/fail2ban.log | grep &quot;Ban&quot; | wc -l)\n    \n    if [ &quot;$recent_bans&quot; -gt 100 ]; then\n        log &quot;WARNING: High ban rate detected: $recent_bans bans in recent logs&quot;\n    fi\n}\n\n# Generate report\ngenerate_report() {\n    local report_file=&quot;/tmp/fail2ban-report-$(date +%Y%m%d).txt&quot;\n    \n    {\n        echo &quot;Fail2ban Report - $(date)&quot;\n        echo &quot;=========================&quot;\n        echo\n        fail2ban-client status\n        echo\n        echo &quot;Ban Statistics by Jail:&quot;\n        echo &quot;-----------------------&quot;\n        \n        for jail in $(fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;); do\n            echo\n            echo &quot;[$jail]&quot;\n            fail2ban-client status &quot;$jail&quot;\n        done\n        \n        echo\n        echo &quot;Recent Activity:&quot;\n        echo &quot;----------------&quot;\n        tail -n 50 /var/log/fail2ban.log | grep -E &quot;(Ban|Unban|Found|Restore)&quot;\n    } &gt; &quot;$report_file&quot;\n    \n    log &quot;Report generated: $report_file&quot;\n    \n    # Email report\n    mail -s &quot;Fail2ban Daily Report - $(hostname)&quot; &quot;$ALERT_EMAIL&quot; &lt; &quot;$report_file&quot;\n}\n\n# Main monitoring loop\nmain() {\n    log &quot;Starting fail2ban monitoring...&quot;\n    \n    check_service || exit 1\n    monitor_bans\n    check_patterns\n    generate_report\n    \n    log &quot;Monitoring completed&quot;\n}\n\n# Run monitoring\nmain\n\n# Add to cron:\n# */15 * * * * /usr/local/bin/fail2ban-monitor.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fail2ban exporter\nwget https://github.com/hectorjsmith/fail2ban-prometheus-exporter/releases/download/v0.10.0/fail2ban_exporter\nchmod +x fail2ban_exporter\nsudo mv fail2ban_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/fail2ban-exporter.service &lt;&lt;EOF\n[Unit]\nDescription=Fail2ban Prometheus Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/fail2ban_exporter\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now fail2ban-exporter\n\n# Configure Prometheus\necho &quot;  - job_name: &#039;fail2ban&#039;\n    static_configs:\n      - targets: [&#039;localhost:9191&#039;]&quot; &gt;&gt; /etc/prometheus/prometheus.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-backup.sh\n\nBACKUP_DIR=&quot;/backup/fail2ban&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/fail2ban_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop fail2ban to ensure database consistency\nsystemctl stop fail2ban\n\n# Create backup\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/ \\\n    /var/log/fail2ban.log* \\\n    2&gt;/dev/null\n\n# Start fail2ban\nsystemctl start fail2ban\n\n# Encrypt backup\ngpg --cipher-algo AES256 --symmetric &quot;$BACKUP_FILE&quot;\nrm &quot;$BACKUP_FILE&quot;\n\necho &quot;Backup created: $BACKUP_FILE.gpg&quot;\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;fail2ban_backup_*.gpg&quot; -mtime +30 -delete\n\n# Backup banned IPs list\nfail2ban-client banned &gt; &quot;$BACKUP_DIR/banned_ips_$DATE.txt&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.gpg&gt;&quot;\n    exit 1\nfi\n\n# Decrypt backup\ngpg --decrypt &quot;$BACKUP_FILE&quot; &gt; /tmp/fail2ban_restore.tar.gz\n\n# Stop fail2ban\nsystemctl stop fail2ban\n\n# Extract backup\ntar -xzf /tmp/fail2ban_restore.tar.gz -C /\n\n# Restore permissions\nchown -R root:root /etc/fail2ban\nchmod 644 /etc/fail2ban/*.conf\nchmod 644 /etc/fail2ban/*.local\n\n# Start fail2ban\nsystemctl start fail2ban\n\n# Clean up\nrm /tmp/fail2ban_restore.tar.gz\n\necho &quot;Restore completed&quot;\n\n# Reload jails\nfail2ban-client reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check for syntax errors\nfail2ban-client -t\n\n# Check logs\njournalctl -u fail2ban -n 100\ntail -f /var/log/fail2ban.log\n\n# Check permissions\nls -la /var/run/fail2ban/\nls -la /var/lib/fail2ban/\n\n# Start in foreground for debugging\nfail2ban-server -f -x -v</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>IPs not getting banned</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test regex patterns\nfail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check jail configuration\nfail2ban-client get sshd logpath\nfail2ban-client get sshd findtime\nfail2ban-client get sshd maxretry\n\n# Test specific log line\necho &#039;Dec 10 12:34:56 server sshd[12345]: Failed password for invalid user admin from 192.168.1.100 port 12345 ssh2&#039; | fail2ban-regex - /etc/fail2ban/filter.d/sshd.conf</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check database size\nls -lh /var/lib/fail2ban/fail2ban.sqlite3\n\n# Purge old entries\nfail2ban-client set dbpurgeage 1d\nsqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;DELETE FROM bans WHERE timeofban &lt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-7 days&#039;);&quot;\n\n# Monitor CPU usage\ntop -p $(pgrep fail2ban-server)\n\n# Check number of monitored files\nlsof -p $(pgrep fail2ban-server) | grep -c log</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo tee -a /etc/fail2ban/fail2ban.local &lt;&lt;EOF\n[Definition]\nloglevel = DEBUG\nEOF\n\nsudo systemctl restart fail2ban\n\n# Watch debug logs\ntail -f /var/log/fail2ban.log | grep -E &quot;(DEBUG|ERROR|WARNING)&quot;\n\n# Test jail processing\nfail2ban-client set sshd addlogpath /var/log/auth.log\nfail2ban-client set sshd banip 192.168.1.100\nfail2ban-client set sshd unbanip 192.168.1.100</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">#!/usr/bin/env python3\n# fail2ban_api.py\n\nimport subprocess\nimport json\nimport socket\nfrom datetime import datetime\n\nclass Fail2banManager:\n    def __init__(self):\n        self.socket_path = &quot;/var/run/fail2ban/fail2ban.sock&quot;\n    \n    def execute_command(self, command):\n        &quot;&quot;&quot;Execute fail2ban-client command&quot;&quot;&quot;\n        try:\n            result = subprocess.run(\n                [&#039;fail2ban-client&#039;] + command.split(),\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            return result.stdout.strip()\n        except subprocess.CalledProcessError as e:\n            return f&quot;Error: {e.stderr}&quot;\n    \n    def get_status(self):\n        &quot;&quot;&quot;Get overall status&quot;&quot;&quot;\n        return self.execute_command(&quot;status&quot;)\n    \n    def get_jail_status(self, jail):\n        &quot;&quot;&quot;Get specific jail status&quot;&quot;&quot;\n        status = self.execute_command(f&quot;status {jail}&quot;)\n        \n        # Parse status output\n        lines = status.split(&#039;\\n&#039;)\n        result = {\n            &#039;filter&#039;: {},\n            &#039;actions&#039;: {},\n            &#039;currently_failed&#039;: 0,\n            &#039;total_failed&#039;: 0,\n            &#039;currently_banned&#039;: 0,\n            &#039;total_banned&#039;: 0,\n            &#039;banned_ips&#039;: []\n        }\n        \n        for line in lines:\n            if &#039;Currently failed:&#039; in line:\n                result[&#039;currently_failed&#039;] = int(line.split(&#039;:&#039;)[1].strip())\n            elif &#039;Total failed:&#039; in line:\n                result[&#039;total_failed&#039;] = int(line.split(&#039;:&#039;)[1].strip())\n            elif &#039;Currently banned:&#039; in line:\n                result[&#039;currently_banned&#039;] = int(line.split(&#039;:&#039;)[1].strip())\n            elif &#039;Total banned:&#039; in line:\n                result[&#039;total_banned&#039;] = int(line.split(&#039;:&#039;)[1].strip())\n            elif &#039;Banned IP list:&#039; in line:\n                ips = line.split(&#039;:&#039;)[1].strip()\n                result[&#039;banned_ips&#039;] = ips.split() if ips else []\n        \n        return result\n    \n    def ban_ip(self, jail, ip, duration=None):\n        &quot;&quot;&quot;Ban an IP address&quot;&quot;&quot;\n        if duration:\n            return self.execute_command(f&quot;set {jail} banip {ip} {duration}&quot;)\n        else:\n            return self.execute_command(f&quot;set {jail} banip {ip}&quot;)\n    \n    def unban_ip(self, jail, ip):\n        &quot;&quot;&quot;Unban an IP address&quot;&quot;&quot;\n        return self.execute_command(f&quot;set {jail} unbanip {ip}&quot;)\n    \n    def get_banned_ips(self):\n        &quot;&quot;&quot;Get all banned IPs across all jails&quot;&quot;&quot;\n        banned = {}\n        jails = self.get_jail_list()\n        \n        for jail in jails:\n            status = self.get_jail_status(jail)\n            if status[&#039;banned_ips&#039;]:\n                banned[jail] = status[&#039;banned_ips&#039;]\n        \n        return banned\n    \n    def get_jail_list(self):\n        &quot;&quot;&quot;Get list of all jails&quot;&quot;&quot;\n        status = self.get_status()\n        for line in status.split(&#039;\\n&#039;):\n            if &#039;Jail list:&#039; in line:\n                jails = line.split(&#039;:&#039;)[1].strip()\n                return [j.strip() for j in jails.split(&#039;,&#039;)]\n        return []\n    \n    def add_jail(self, jail_config):\n        &quot;&quot;&quot;Add a new jail configuration&quot;&quot;&quot;\n        config_path = f&quot;/etc/fail2ban/jail.d/{jail_config[&#039;name&#039;]}.conf&quot;\n        \n        config_content = f&quot;&quot;&quot;[{jail_config[&#039;name&#039;]}]\nenabled = true\nport = {jail_config.get(&#039;port&#039;, &#039;http,https&#039;)}\nfilter = {jail_config.get(&#039;filter&#039;, jail_config[&#039;name&#039;])}\nlogpath = {jail_config[&#039;logpath&#039;]}\nmaxretry = {jail_config.get(&#039;maxretry&#039;, 5)}\nbantime = {jail_config.get(&#039;bantime&#039;, 3600)}\nfindtime = {jail_config.get(&#039;findtime&#039;, 600)}\n&quot;&quot;&quot;\n        \n        with open(config_path, &#039;w&#039;) as f:\n            f.write(config_content)\n        \n        # Reload configuration\n        return self.execute_command(&quot;reload&quot;)\n\n# Example usage\nif __name__ == &#039;__main__&#039;:\n    f2b = Fail2banManager()\n    \n    # Get overall status\n    print(&quot;Fail2ban Status:&quot;)\n    print(f2b.get_status())\n    print(&quot;\\n&quot; + &quot;=&quot;*50 + &quot;\\n&quot;)\n    \n    # Get banned IPs\n    print(&quot;Banned IPs by Jail:&quot;)\n    banned = f2b.get_banned_ips()\n    for jail, ips in banned.items():\n        print(f&quot;\\n{jail}: {&#039;, &#039;.join(ips) if ips else &#039;None&#039;}&quot;)\n    \n    # Check specific jail\n    print(&quot;\\n&quot; + &quot;=&quot;*50 + &quot;\\n&quot;)\n    print(&quot;SSH Jail Status:&quot;)\n    ssh_status = f2b.get_jail_status(&#039;sshd&#039;)\n    print(json.dumps(ssh_status, indent=2))</code></pre>\n      </div>\n    </div>\n<h3 id=\"web-dashboard\" class=\"mobile-header\">Web Dashboard</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">#!/usr/bin/env python3\n# fail2ban_dashboard.py\n\nfrom flask import Flask, render_template, jsonify, request\nfrom fail2ban_api import Fail2banManager\nimport json\n\napp = Flask(__name__)\nf2b = Fail2banManager()\n\n@app.route(&#039;/&#039;)\ndef dashboard():\n    return render_template(&#039;dashboard.html&#039;)\n\n@app.route(&#039;/api/status&#039;)\ndef api_status():\n    jails = f2b.get_jail_list()\n    status = {\n        &#039;jails&#039;: {},\n        &#039;total_banned&#039;: 0,\n        &#039;total_failed&#039;: 0\n    }\n    \n    for jail in jails:\n        jail_status = f2b.get_jail_status(jail)\n        status[&#039;jails&#039;][jail] = jail_status\n        status[&#039;total_banned&#039;] += jail_status[&#039;total_banned&#039;]\n        status[&#039;total_failed&#039;] += jail_status[&#039;total_failed&#039;]\n    \n    return jsonify(status)\n\n@app.route(&#039;/api/ban&#039;, methods=[&#039;POST&#039;])\ndef api_ban():\n    data = request.json\n    result = f2b.ban_ip(data[&#039;jail&#039;], data[&#039;ip&#039;], data.get(&#039;duration&#039;))\n    return jsonify({&#039;success&#039;: True, &#039;result&#039;: result})\n\n@app.route(&#039;/api/unban&#039;, methods=[&#039;POST&#039;])\ndef api_unban():\n    data = request.json\n    result = f2b.unban_ip(data[&#039;jail&#039;], data[&#039;ip&#039;])\n    return jsonify({&#039;success&#039;: True, &#039;result&#039;: result})\n\nif __name__ == &#039;__main__&#039;:\n    app.run(host=&#039;0.0.0.0&#039;, port=5000, debug=True)</code></pre>\n      </div>\n    </div>\n<h3 id=\"shell-integration\" class=\"mobile-header\">Shell Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-utils.sh - Fail2ban utility functions\n\n# Source this file in other scripts: source /usr/local/lib/fail2ban-utils.sh\n\n# Check if IP is banned\nis_ip_banned() {\n    local ip=&quot;$1&quot;\n    local jail=&quot;${2:-}&quot;\n    \n    if [ -z &quot;$jail&quot; ]; then\n        # Check all jails\n        for j in $(fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;); do\n            if fail2ban-client status &quot;$j&quot; | grep -q &quot;$ip&quot;; then\n                echo &quot;IP $ip is banned in jail: $j&quot;\n                return 0\n            fi\n        done\n    else\n        # Check specific jail\n        if fail2ban-client status &quot;$jail&quot; | grep -q &quot;$ip&quot;; then\n            return 0\n        fi\n    fi\n    \n    return 1\n}\n\n# Ban IP with reason logging\nban_ip_with_reason() {\n    local jail=&quot;$1&quot;\n    local ip=&quot;$2&quot;\n    local reason=&quot;$3&quot;\n    local duration=&quot;${4:-3600}&quot;\n    \n    echo &quot;[$(date)] Banning IP $ip in jail $jail for $duration seconds. Reason: $reason&quot; &gt;&gt; /var/log/fail2ban-manual-bans.log\n    fail2ban-client set &quot;$jail&quot; banip &quot;$ip&quot; &quot;$duration&quot;\n}\n\n# Get ban statistics\nget_ban_stats() {\n    local total_banned=0\n    local total_failed=0\n    \n    echo &quot;Fail2ban Statistics&quot;\n    echo &quot;==================&quot;\n    \n    for jail in $(fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;); do\n        local status=$(fail2ban-client status &quot;$jail&quot;)\n        local banned=$(echo &quot;$status&quot; | grep &quot;Total banned:&quot; | awk &#039;{print $NF}&#039;)\n        local failed=$(echo &quot;$status&quot; | grep &quot;Total failed:&quot; | awk &#039;{print $NF}&#039;)\n        \n        echo &quot;[$jail]&quot;\n        echo &quot;  Failed: $failed&quot;\n        echo &quot;  Banned: $banned&quot;\n        \n        total_banned=$((total_banned + banned))\n        total_failed=$((total_failed + failed))\n    done\n    \n    echo\n    echo &quot;Totals:&quot;\n    echo &quot;  Failed: $total_failed&quot;\n    echo &quot;  Banned: $total_banned&quot;\n}\n\n# Whitelist management\nadd_to_whitelist() {\n    local ip=&quot;$1&quot;\n    \n    # Add to fail2ban whitelist\n    if grep -q &quot;ignoreip&quot; /etc/fail2ban/jail.local; then\n        sed -i &quot;/ignoreip/s/$/,$ip/&quot; /etc/fail2ban/jail.local\n    else\n        echo &quot;ignoreip = 127.0.0.1/8 ::1 $ip&quot; &gt;&gt; /etc/fail2ban/jail.local\n    fi\n    \n    # Reload configuration\n    fail2ban-client reload\n    \n    echo &quot;Added $ip to whitelist&quot;\n}\n\n# Export functions for use in other scripts\nexport -f is_ip_banned\nexport -f ban_ip_with_reason\nexport -f get_ban_stats\nexport -f add_to_whitelist</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update fail2ban\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade fail2ban\n\n# Arch Linux\nsudo pacman -Syu fail2ban\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade fail2ban\n\n# openSUSE\nsudo zypper update fail2ban\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade py39-fail2ban\n\n# Always backup before updates\n/usr/local/bin/fail2ban-backup.sh\n\n# Restart after updates\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-maintenance.sh\n\nLOG_FILE=&quot;/var/log/fail2ban-maintenance.log&quot;\n\nlog() {\n    echo &quot;[$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)] $1&quot; | tee -a &quot;$LOG_FILE&quot;\n}\n\n# Update filters from repository\nupdate_filters() {\n    log &quot;Updating fail2ban filters...&quot;\n    \n    cd /tmp\n    git clone https://github.com/fail2ban/fail2ban.git\n    \n    # Backup existing filters\n    cp -r /etc/fail2ban/filter.d /etc/fail2ban/filter.d.bak\n    \n    # Copy new filters\n    cp /tmp/fail2ban/config/filter.d/* /etc/fail2ban/filter.d/\n    \n    # Test configuration\n    if fail2ban-client -t; then\n        log &quot;Filter update successful&quot;\n    else\n        log &quot;ERROR: Filter update failed, restoring backup&quot;\n        rm -rf /etc/fail2ban/filter.d\n        mv /etc/fail2ban/filter.d.bak /etc/fail2ban/filter.d\n    fi\n    \n    rm -rf /tmp/fail2ban\n}\n\n# Clean old database entries\nclean_database() {\n    log &quot;Cleaning fail2ban database...&quot;\n    \n    # Get database size before\n    size_before=$(ls -lh /var/lib/fail2ban/fail2ban.sqlite3 | awk &#039;{print $5}&#039;)\n    \n    # Clean entries older than 30 days\n    sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;DELETE FROM bans WHERE timeofban &lt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-30 days&#039;);&quot;\n    sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;VACUUM;&quot;\n    \n    # Get database size after\n    size_after=$(ls -lh /var/lib/fail2ban/fail2ban.sqlite3 | awk &#039;{print $5}&#039;)\n    \n    log &quot;Database cleaned. Size: $size_before -&gt; $size_after&quot;\n}\n\n# Check and update GeoIP database\nupdate_geoip() {\n    log &quot;Updating GeoIP database...&quot;\n    \n    if command -v geoipupdate &gt;/dev/null 2&gt;&amp;1; then\n        geoipupdate\n        log &quot;GeoIP database updated&quot;\n    else\n        log &quot;GeoIP update tool not installed&quot;\n    fi\n}\n\n# Generate monthly report\ngenerate_monthly_report() {\n    log &quot;Generating monthly report...&quot;\n    \n    report_file=&quot;/var/log/fail2ban-monthly-$(date +%Y%m).txt&quot;\n    \n    {\n        echo &quot;Fail2ban Monthly Report - $(date &#039;+%B %Y&#039;)&quot;\n        echo &quot;========================================&quot;\n        echo\n        \n        # Get ban statistics from database\n        echo &quot;Top 10 Banned IPs:&quot;\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT ip, COUNT(*) as count FROM bans WHERE timeofban &gt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-30 days&#039;) GROUP BY ip ORDER BY count DESC LIMIT 10;&quot;\n        \n        echo\n        echo &quot;Bans by Jail:&quot;\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT jail, COUNT(*) as count FROM bans WHERE timeofban &gt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-30 days&#039;) GROUP BY jail ORDER BY count DESC;&quot;\n        \n        echo\n        echo &quot;Daily Ban Trend:&quot;\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT date(timeofban, &#039;unixepoch&#039;) as day, COUNT(*) as count FROM bans WHERE timeofban &gt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-30 days&#039;) GROUP BY day ORDER BY day;&quot;\n    } &gt; &quot;$report_file&quot;\n    \n    log &quot;Monthly report saved to: $report_file&quot;\n}\n\n# Main maintenance routine\nmain() {\n    log &quot;Starting fail2ban maintenance...&quot;\n    \n    update_filters\n    clean_database\n    update_geoip\n    generate_monthly_report\n    \n    # Reload fail2ban\n    fail2ban-client reload\n    \n    log &quot;Maintenance completed&quot;\n}\n\n# Run maintenance\nmain\n\n# Schedule in cron:\n# 0 2 1 * * /usr/local/bin/fail2ban-maintenance.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-health.sh\n\n# Check fail2ban health\ncheck_health() {\n    local status=0\n    \n    # Check service\n    if ! systemctl is-active --quiet fail2ban; then\n        echo &quot;CRITICAL: fail2ban service is not running&quot;\n        status=2\n    fi\n    \n    # Check database\n    if [ ! -f /var/lib/fail2ban/fail2ban.sqlite3 ]; then\n        echo &quot;WARNING: Database file missing&quot;\n        status=1\n    fi\n    \n    # Check socket\n    if [ ! -S /var/run/fail2ban/fail2ban.sock ]; then\n        echo &quot;WARNING: Socket file missing&quot;\n        status=1\n    fi\n    \n    # Check jails\n    active_jails=$(fail2ban-client status | grep &quot;Jail list&quot; | wc -w)\n    if [ &quot;$active_jails&quot; -lt 3 ]; then\n        echo &quot;WARNING: Only $active_jails jails active&quot;\n        status=1\n    fi\n    \n    if [ $status -eq 0 ]; then\n        echo &quot;OK: fail2ban is healthy&quot;\n    fi\n    \n    exit $status\n}\n\ncheck_health</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.fail2ban.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Fail2ban Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2ban GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban/wiki\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2ban Wiki</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/en/latest/filters.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Filter Development Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/en/latest/actions.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Action Development Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban/tree/master/config/filter.d\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Filters</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.fail2ban.org/wiki/index.php/Best_practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.fail2ban.org/wiki/index.php/Security\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Hardening Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"25 min","wordCount":4859,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository","id":"install-epel-repository"},{"level":1,"text":"Install fail2ban","id":"install-fail2ban"},{"level":1,"text":"Install additional dependencies","id":"install-additional-dependencies"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install fail2ban","id":"install-fail2ban"},{"level":1,"text":"Install additional tools","id":"install-additional-tools"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install fail2ban","id":"install-fail2ban"},{"level":1,"text":"Install additional dependencies","id":"install-additional-dependencies"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install fail2ban","id":"install-fail2ban"},{"level":1,"text":"Install additional dependencies","id":"install-additional-dependencies"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"openSUSE Leap/Tumbleweed","id":"opensuse-leaptumbleweed"},{"level":1,"text":"SLES 15","id":"sles-15"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Copy configuration files","id":"copy-configuration-files"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Copy configuration","id":"copy-configuration"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows (WSL2)","id":"windows-wsl2"},{"level":1,"text":"Install WSL2 with Ubuntu","id":"install-wsl2-with-ubuntu"},{"level":1,"text":"Inside WSL2 Ubuntu","id":"inside-wsl2-ubuntu"},{"level":1,"text":"Configure for Windows logs monitoring","id":"configure-for-windows-logs-monitoring"},{"level":1,"text":"Note: Limited functionality - primarily for learning/testing","id":"note-limited-functionality-primarily-for-learningtesting"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create local configuration files (never edit .conf files directly)","id":"create-local-configuration-files-never-edit-conf-files-directly"},{"level":1,"text":"Edit main configuration","id":"edit-main-configuration"},{"level":1,"text":"Configure basic jail settings","id":"configure-basic-jail-settings"},{"level":1,"text":"Ban duration (in seconds)","id":"ban-duration-in-seconds"},{"level":1,"text":"Time window for maxretry","id":"time-window-for-maxretry"},{"level":1,"text":"Number of failures before ban","id":"number-of-failures-before-ban"},{"level":1,"text":"Email notifications","id":"email-notifications"},{"level":1,"text":"Action to take","id":"action-to-take"},{"level":1,"text":"Whitelist","id":"whitelist"},{"level":1,"text":"Restart fail2ban","id":"restart-fail2ban"},{"level":3,"text":"Custom Jail Configuration","id":"custom-jail-configuration"},{"level":1,"text":"Create custom filter for application","id":"create-custom-filter-for-application"},{"level":1,"text":"Create jail for custom application","id":"create-jail-for-custom-application"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Reload configuration","id":"reload-configuration"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using brew services","id":"using-brew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"Manual control","id":"manual-control"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Multi-Service Protection","id":"multi-service-protection"},{"level":1,"text":"Comprehensive jail configuration","id":"comprehensive-jail-configuration"},{"level":1,"text":"SSH Protection","id":"ssh-protection"},{"level":1,"text":"Web Server Protection","id":"web-server-protection"},{"level":1,"text":"Database Protection","id":"database-protection"},{"level":1,"text":"Mail Server Protection","id":"mail-server-protection"},{"level":3,"text":"GeoIP Blocking","id":"geoip-blocking"},{"level":1,"text":"Install GeoIP database","id":"install-geoip-database"},{"level":1,"text":"Create GeoIP action","id":"create-geoip-action"},{"level":1,"text":"Use in jail","id":"use-in-jail"},{"level":3,"text":"Persistent Bans","id":"persistent-bans"},{"level":1,"text":"Create persistent ban action","id":"create-persistent-ban-action"},{"level":1,"text":"Create directory for persistent bans","id":"create-directory-for-persistent-bans"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Reverse Proxy Configuration","id":"nginx-reverse-proxy-configuration"},{"level":1,"text":"/etc/nginx/conf.d/fail2ban.conf","id":"etcnginxconfdfail2banconf"},{"level":1,"text":"Pass real IP to backend for fail2ban processing","id":"pass-real-ip-to-backend-for-fail2ban-processing"},{"level":1,"text":"Define rate limit zone","id":"define-rate-limit-zone"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":1,"text":"/etc/haproxy/haproxy.cfg","id":"etchaproxyhaproxycfg"},{"level":3,"text":"Apache Reverse Proxy","id":"apache-reverse-proxy"},{"level":1,"text":"/etc/apache2/sites-available/reverse-proxy.conf","id":"etcapache2sites-availablereverse-proxyconf"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Enhanced Security Rules","id":"enhanced-security-rules"},{"level":1,"text":"Create comprehensive security configuration","id":"create-comprehensive-security-configuration"},{"level":1,"text":"Aggressive ban settings for security","id":"aggressive-ban-settings-for-security"},{"level":1,"text":"Recidive jail for repeat offenders","id":"recidive-jail-for-repeat-offenders"},{"level":1,"text":"Port scanning detection","id":"port-scanning-detection"},{"level":1,"text":"Block bad bots","id":"block-bad-bots"},{"level":1,"text":"WordPress protection","id":"wordpress-protection"},{"level":1,"text":"Aggressive SSH protection","id":"aggressive-ssh-protection"},{"level":3,"text":"Custom Security Filters","id":"custom-security-filters"},{"level":1,"text":"Create port scan detection filter","id":"create-port-scan-detection-filter"},{"level":1,"text":"Create WordPress attack filter","id":"create-wordpress-attack-filter"},{"level":1,"text":"Create bad bot filter","id":"create-bad-bot-filter"},{"level":3,"text":"Firewall Integration","id":"firewall-integration"},{"level":1,"text":"iptables integration","id":"iptables-integration"},{"level":1,"text":"Option: blocktype","id":"option-blocktype"},{"level":1,"text":"Note: This is the default block type for all iptables actions","id":"note-this-is-the-default-block-type-for-all-iptables-actions"},{"level":1,"text":"Option: iptables","id":"option-iptables"},{"level":1,"text":"Note: Path to iptables command","id":"note-path-to-iptables-command"},{"level":1,"text":"Option: protocol","id":"option-protocol"},{"level":1,"text":"Note: Default protocol","id":"note-default-protocol"},{"level":1,"text":"Option: chain","id":"option-chain"},{"level":1,"text":"Note: Default chain for filter table","id":"note-default-chain-for-filter-table"},{"level":1,"text":"nftables integration","id":"nftables-integration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"SQLite Database Configuration","id":"sqlite-database-configuration"},{"level":1,"text":"Default SQLite database location","id":"default-sqlite-database-location"},{"level":1,"text":"Custom database configuration","id":"custom-database-configuration"},{"level":1,"text":"Database configuration","id":"database-configuration"},{"level":1,"text":"View database content","id":"view-database-content"},{"level":3,"text":"MySQL Backend Configuration","id":"mysql-backend-configuration"},{"level":1,"text":"Install MySQL connector","id":"install-mysql-connector"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":1,"text":"Configure fail2ban for MySQL","id":"configure-fail2ban-for-mysql"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Optimize fail2ban performance","id":"optimize-fail2ban-performance"},{"level":1,"text":"Use systemd journal instead of log files","id":"use-systemd-journal-instead-of-log-files"},{"level":1,"text":"Use pyinotify for better performance","id":"use-pyinotify-for-better-performance"},{"level":1,"text":"Increase socket timeout","id":"increase-socket-timeout"},{"level":1,"text":"Database optimization","id":"database-optimization"},{"level":1,"text":"Configure systemd limits","id":"configure-systemd-limits"},{"level":1,"text":"Increase limits for better performance","id":"increase-limits-for-better-performance"},{"level":3,"text":"Log Processing Optimization","id":"log-processing-optimization"},{"level":1,"text":"Use systemd journal backend for better performance","id":"use-systemd-journal-backend-for-better-performance"},{"level":1,"text":"Configure log rotation for fail2ban","id":"configure-log-rotation-for-fail2ban"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Built-in Monitoring","id":"built-in-monitoring"},{"level":1,"text":"Check fail2ban status","id":"check-fail2ban-status"},{"level":1,"text":"Check specific jail status","id":"check-specific-jail-status"},{"level":1,"text":"Get banned IPs for all jails","id":"get-banned-ips-for-all-jails"},{"level":1,"text":"Monitor fail2ban in real-time","id":"monitor-fail2ban-in-real-time"},{"level":1,"text":"Show ban statistics","id":"show-ban-statistics"},{"level":3,"text":"Monitoring Script","id":"monitoring-script"},{"level":1,"text":"fail2ban-monitor.sh","id":"fail2ban-monitorsh"},{"level":1,"text":"Check fail2ban service status","id":"check-fail2ban-service-status"},{"level":1,"text":"Monitor ban activity","id":"monitor-ban-activity"},{"level":1,"text":"Check for suspicious patterns","id":"check-for-suspicious-patterns"},{"level":1,"text":"Generate report","id":"generate-report"},{"level":1,"text":"Main monitoring loop","id":"main-monitoring-loop"},{"level":1,"text":"Run monitoring","id":"run-monitoring"},{"level":1,"text":"Add to cron:","id":"add-to-cron"},{"level":1,"text":"*/15 * * * * /usr/local/bin/fail2ban-monitor.sh","id":"15-usrlocalbinfail2ban-monitorsh"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":1,"text":"Install fail2ban exporter","id":"install-fail2ban-exporter"},{"level":1,"text":"Create systemd service","id":"create-systemd-service"},{"level":1,"text":"Configure Prometheus","id":"configure-prometheus"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"fail2ban-backup.sh","id":"fail2ban-backupsh"},{"level":1,"text":"Create backup directory","id":"create-backup-directory"},{"level":1,"text":"Stop fail2ban to ensure database consistency","id":"stop-fail2ban-to-ensure-database-consistency"},{"level":1,"text":"Create backup","id":"create-backup"},{"level":1,"text":"Start fail2ban","id":"start-fail2ban"},{"level":1,"text":"Encrypt backup","id":"encrypt-backup"},{"level":1,"text":"Clean old backups (keep 30 days)","id":"clean-old-backups-keep-30-days"},{"level":1,"text":"Backup banned IPs list","id":"backup-banned-ips-list"},{"level":3,"text":"Restore Script","id":"restore-script"},{"level":1,"text":"fail2ban-restore.sh","id":"fail2ban-restoresh"},{"level":1,"text":"Decrypt backup","id":"decrypt-backup"},{"level":1,"text":"Stop fail2ban","id":"stop-fail2ban"},{"level":1,"text":"Extract backup","id":"extract-backup"},{"level":1,"text":"Restore permissions","id":"restore-permissions"},{"level":1,"text":"Start fail2ban","id":"start-fail2ban"},{"level":1,"text":"Clean up","id":"clean-up"},{"level":1,"text":"Reload jails","id":"reload-jails"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check for syntax errors","id":"check-for-syntax-errors"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Start in foreground for debugging","id":"start-in-foreground-for-debugging"},{"level":1,"text":"Test regex patterns","id":"test-regex-patterns"},{"level":1,"text":"Check jail configuration","id":"check-jail-configuration"},{"level":1,"text":"Test specific log line","id":"test-specific-log-line"},{"level":1,"text":"Check database size","id":"check-database-size"},{"level":1,"text":"Purge old entries","id":"purge-old-entries"},{"level":1,"text":"Monitor CPU usage","id":"monitor-cpu-usage"},{"level":1,"text":"Check number of monitored files","id":"check-number-of-monitored-files"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":1,"text":"Enable debug logging","id":"enable-debug-logging"},{"level":1,"text":"Watch debug logs","id":"watch-debug-logs"},{"level":1,"text":"Test jail processing","id":"test-jail-processing"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Python Integration","id":"python-integration"},{"level":1,"text":"fail2ban_api.py","id":"fail2ban_apipy"},{"level":1,"text":"Example usage","id":"example-usage"},{"level":3,"text":"Web Dashboard","id":"web-dashboard"},{"level":1,"text":"fail2ban_dashboard.py","id":"fail2ban_dashboardpy"},{"level":3,"text":"Shell Integration","id":"shell-integration"},{"level":1,"text":"fail2ban-utils.sh - Fail2ban utility functions","id":"fail2ban-utilssh-fail2ban-utility-functions"},{"level":1,"text":"Source this file in other scripts: source /usr/local/lib/fail2ban-utils.sh","id":"source-this-file-in-other-scripts-source-usrlocallibfail2ban-utilssh"},{"level":1,"text":"Check if IP is banned","id":"check-if-ip-is-banned"},{"level":1,"text":"Ban IP with reason logging","id":"ban-ip-with-reason-logging"},{"level":1,"text":"Get ban statistics","id":"get-ban-statistics"},{"level":1,"text":"Whitelist management","id":"whitelist-management"},{"level":1,"text":"Export functions for use in other scripts","id":"export-functions-for-use-in-other-scripts"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":1,"text":"fail2ban-maintenance.sh","id":"fail2ban-maintenancesh"},{"level":1,"text":"Update filters from repository","id":"update-filters-from-repository"},{"level":1,"text":"Clean old database entries","id":"clean-old-database-entries"},{"level":1,"text":"Check and update GeoIP database","id":"check-and-update-geoip-database"},{"level":1,"text":"Generate monthly report","id":"generate-monthly-report"},{"level":1,"text":"Main maintenance routine","id":"main-maintenance-routine"},{"level":1,"text":"Run maintenance","id":"run-maintenance"},{"level":1,"text":"Schedule in cron:","id":"schedule-in-cron"},{"level":1,"text":"0 2 1 * * /usr/local/bin/fail2ban-maintenance.sh","id":"0-2-1-usrlocalbinfail2ban-maintenancesh"},{"level":3,"text":"Health Check Script","id":"health-check-script"},{"level":1,"text":"fail2ban-health.sh","id":"fail2ban-healthsh"},{"level":1,"text":"Check fail2ban health","id":"check-fail2ban-health"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-21T06:16:18.413Z","metadataVersion":"2.0"}]},"__N_SSG":true}