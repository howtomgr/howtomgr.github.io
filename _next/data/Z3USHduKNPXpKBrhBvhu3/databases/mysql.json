{"pageProps":{"guide":{"name":"mysql","displayName":"MySQL Installation Guide","slug":"mysql","description":"MySQL is a free and open-source relational database management system (RDBMS). Originally developed by Michael \"Monty\" Widenius and now owned by Oracle Corporation, MySQL is the world's second-most widely used relational database management system. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade reliability, performance, and scalability without licensing costs, with features like ACID compliance, transactions, replication, and clustering.","category":"databases","subcategory":"databases","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[0,1,30,2048,3306,3307,33060,33061],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["databases","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/databases/mysql","documentationUrl":"https://howtomgr.github.io/databases/mysql","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mysql","updatedAt":"2025-09-16T17:33:36Z","createdAt":"2025-09-16T03:47:41Z","readmeRaw":"# MySQL Installation Guide\n\nMySQL is a free and open-source relational database management system (RDBMS). Originally developed by Michael \"Monty\" Widenius and now owned by Oracle Corporation, MySQL is the world's second-most widely used relational database management system. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade reliability, performance, and scalability without licensing costs, with features like ACID compliance, transactions, replication, and clustering.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (4+ cores recommended for production)\n  - RAM: 1GB minimum (8GB+ recommended for production)\n  - Storage: 5GB minimum (SSD recommended for performance)\n  - Network: Stable connectivity for replication setups\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 2.6+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3306 (default MySQL port)\n  - Port 33060 (MySQL X Protocol)\n  - Additional ports for replication and clustering\n- **Dependencies**:\n  - libc6, libssl, zlib (usually included in distributions)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Add MySQL official repository\nsudo dnf install -y https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm\n\n# Import MySQL GPG key\nsudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022\n\n# Install MySQL server\nsudo dnf install -y mysql-community-server mysql-community-client\n\n# Enable and start service\nsudo systemctl enable --now mysqld\n\n# Get temporary root password\nsudo grep 'temporary password' /var/log/mysqld.log\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y wget lsb-release gnupg\n\n# Add MySQL APT repository\nwget https://dev.mysql.com/get/mysql-apt-config_0.8.29-1_all.deb\nsudo dpkg -i mysql-apt-config_0.8.29-1_all.deb\n\n# Update package index\nsudo apt update\n\n# Install MySQL server\nsudo apt install -y mysql-server mysql-client\n\n# Enable and start service\nsudo systemctl enable --now mysql\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo ufw allow mysql\n```\n\n### Arch Linux\n\n```bash\n# Install MySQL from official repositories\nsudo pacman -S mysql\n\n# Initialize database\nsudo mysqld --initialize --user=mysql --basedir=/usr --datadir=/var/lib/mysql\n\n# Enable and start service\nsudo systemctl enable --now mysqld\n\n# Get temporary root password\nsudo cat /var/lib/mysql/$(hostname).err | grep 'temporary password'\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Optional: Install MariaDB instead (more common on Arch)\nsudo pacman -S mariadb\nsudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\nsudo systemctl enable --now mariadb\n```\n\n### Alpine Linux\n\n```bash\n# Install MySQL (MariaDB is the default MySQL implementation)\napk add --no-cache mariadb mariadb-client\n\n# Initialize database\nmysql_install_db --user=mysql --datadir=/var/lib/mysql\n\n# Create mysql user if not exists\nadduser -D -H -s /sbin/nologin mysql\n\n# Set permissions\nchown -R mysql:mysql /var/lib/mysql\n\n# Enable and start service\nrc-update add mariadb default\nrc-service mariadb start\n\n# Secure installation\nmysql_secure_installation\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y mysql-community-server mysql-community-client\n\n# Alternative: Install MariaDB (more commonly available)\nsudo zypper install -y mariadb mariadb-client mariadb-tools\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y mariadb mariadb-client\n\n# Initialize database (MariaDB)\nsudo mysql_install_db --user=mysql\n\n# Enable and start service\nsudo systemctl enable --now mysql\n# or for MariaDB:\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install mysql\n\n# Start MySQL service\nbrew services start mysql\n\n# Or run manually\nmysql.server start\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/my.cnf\n# Alternative: /opt/homebrew/etc/my.cnf (Apple Silicon)\n\n# Alternative: Install MariaDB\nbrew install mariadb\nbrew services start mariadb\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install mysql80-server mysql80-client\n\n# Using ports\ncd /usr/ports/databases/mysql80-server\nmake install clean\n\n# Enable MySQL\necho 'mysql_enable=\"YES\"' >> /etc/rc.conf\n\n# Initialize database\nservice mysql-server start\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/mysql/my.cnf\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install mysql\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mysql\n\n# Method 3: Manual installation\n# Download MySQL Installer from https://dev.mysql.com/downloads/installer/\n# Run mysql-installer-community-8.0.xx.x.msi\n\n# Install as Windows service\n\"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysqld\" --install MySQL80\nnet start MySQL80\n\n# Configuration location: C:\\ProgramData\\MySQL\\MySQL Server 8.0\\my.ini\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create mysql user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/mysql -s /sbin/nologin -c \"MySQL Server\" mysql\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/my.cnf`\n- Debian/Ubuntu: `/etc/mysql/mysql.conf.d/mysqld.cnf`\n- Arch Linux: `/etc/my.cnf`\n- Alpine Linux: `/etc/my.cnf.d/mariadb-server.cnf`\n- openSUSE/SLES: `/etc/my.cnf`\n- macOS: `/usr/local/etc/my.cnf`\n- FreeBSD: `/usr/local/etc/mysql/my.cnf`\n- Windows: `C:\\ProgramData\\MySQL\\MySQL Server 8.0\\my.ini`\n\n3. **Essential settings to change**:\n\n```ini\n# /etc/mysql/mysql.conf.d/mysqld.cnf\n[mysqld]\n# Basic settings\nbind-address = 127.0.0.1\nport = 3306\nsocket = /var/run/mysqld/mysqld.sock\ndatadir = /var/lib/mysql\n\n# Security settings\nsql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\nlocal_infile = 0\nskip_name_resolve = 1\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\n\n# Performance settings\nmax_connections = 200\nthread_cache_size = 50\ntable_open_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\n\n# Logging\nlog_error = /var/log/mysql/error.log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nexpire_logs_days = 7\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if MySQL is running\nsudo systemctl status mysql\n\n# Test connection\nmysql -u root -p -e \"SELECT VERSION();\"\n\n# Check user accounts\nmysql -u root -p -e \"SELECT User, Host FROM mysql.user;\"\n\n# Test database operations\nmysql -u root -p -e \"CREATE DATABASE test_db; DROP DATABASE test_db;\"\n\n# Check configuration\nmysql -u root -p -e \"SHOW VARIABLES LIKE 'character_set%';\"\nmysql -u root -p -e \"SHOW VARIABLES LIKE 'collation%';\"\n```\n\n**WARNING:** Change the default root password immediately and remove anonymous users!\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable MySQL to start on boot\nsudo systemctl enable mysql\n\n# Start MySQL\nsudo systemctl start mysql\n\n# Stop MySQL\nsudo systemctl stop mysql\n\n# Restart MySQL\nsudo systemctl restart mysql\n\n# Reload configuration\nsudo systemctl reload mysql\n\n# Check status\nsudo systemctl status mysql\n\n# View logs\nsudo journalctl -u mysql -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable MySQL/MariaDB to start on boot\nrc-update add mariadb default\n\n# Start MariaDB\nrc-service mariadb start\n\n# Stop MariaDB\nrc-service mariadb stop\n\n# Restart MariaDB\nrc-service mariadb restart\n\n# Check status\nrc-service mariadb status\n\n# View logs\ntail -f /var/log/mysql/error.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mysql_enable=\"YES\"' >> /etc/rc.conf\n\n# Start MySQL\nservice mysql-server start\n\n# Stop MySQL\nservice mysql-server stop\n\n# Restart MySQL\nservice mysql-server restart\n\n# Check status\nservice mysql-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mysql\nbrew services stop mysql\nbrew services restart mysql\n\n# Check status\nbrew services list | grep mysql\n\n# Manual control\nmysql.server start\nmysql.server stop\nmysql.server restart\n```\n\n### Windows Service Manager\n\n```powershell\n# Start MySQL service\nnet start MySQL80\n\n# Stop MySQL service\nnet stop MySQL80\n\n# Using PowerShell\nStart-Service MySQL80\nStop-Service MySQL80\nRestart-Service MySQL80\n\n# Check status\nGet-Service MySQL80\n\n# View logs\nGet-EventLog -LogName Application -Source MySQL\n```\n\n## Advanced Configuration\n\n### High Availability Configuration\n\n```ini\n# Master-Slave Replication Configuration\n# Master server configuration\n[mysqld]\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = production_db\n\n# Slave server configuration\n[mysqld]\nserver-id = 2\nrelay-log = relay-bin\nread_only = 1\n```\n\n### MySQL 8.0 Group Replication\n\n```ini\n# Group Replication settings\n[mysqld]\n# Group Replication configuration\nloose-group_replication_group_name = \"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"\nloose-group_replication_start_on_boot = off\nloose-group_replication_local_address = \"mysql1.example.com:33061\"\nloose-group_replication_group_seeds = \"mysql1.example.com:33061,mysql2.example.com:33061,mysql3.example.com:33061\"\nloose-group_replication_bootstrap_group = off\n\n# Required settings\ngtid_mode = ON\nenforce_gtid_consistency = ON\nmaster_info_repository = TABLE\nrelay_log_info_repository = TABLE\nbinlog_checksum = NONE\nlog_slave_updates = ON\nlog_bin = binlog\nbinlog_format = ROW\ntransaction_write_set_extraction = XXHASH64\n```\n\n### Advanced Security Settings\n\n```ini\n# Security hardening\n[mysqld]\n# SSL/TLS configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\ntls_version = TLSv1.2,TLSv1.3\n\n# Authentication\ndefault_authentication_plugin = caching_sha2_password\n\n# Connection security\nmax_user_connections = 100\nmax_connect_errors = 10\n\n# Disable dangerous functions\nlocal_infile = 0\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/mysql-proxy\nupstream mysql_backend {\n    server 127.0.0.1:3306 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:3307 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 3306;\n    proxy_pass mysql_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mysql.log;\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend mysql_frontend\n    bind *:3306\n    mode tcp\n    option tcplog\n    default_backend mysql_servers\n\nbackend mysql_servers\n    mode tcp\n    balance roundrobin\n    option mysql-check user haproxy\n    server mysql1 127.0.0.1:3306 check\n    server mysql2 127.0.0.1:3307 check backup\n```\n\n### ProxySQL Configuration\n\n```sql\n-- ProxySQL configuration for MySQL load balancing\nINSERT INTO mysql_servers(hostgroup_id, hostname, port, weight) VALUES\n(0, '127.0.0.1', 3306, 900),\n(0, '127.0.0.1', 3307, 100);\n\nINSERT INTO mysql_query_rules(rule_id, active, match_pattern, destination_hostgroup, apply) VALUES\n(1, 1, '^SELECT.*', 0, 1),\n(2, 1, '^INSERT.*', 0, 1);\n\nLOAD MYSQL SERVERS TO RUNTIME;\nLOAD MYSQL QUERY RULES TO RUNTIME;\nSAVE MYSQL SERVERS TO DISK;\nSAVE MYSQL QUERY RULES TO DISK;\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate SSL certificates for MySQL\nsudo mkdir -p /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa 2048 > /etc/mysql/ssl/ca-key.pem\nsudo openssl req -new -x509 -nodes -days 3650 -key /etc/mysql/ssl/ca-key.pem -out /etc/mysql/ssl/ca-cert.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MySQL-CA\"\n\n# Create server certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mysql.example.com\"\nsudo openssl rsa -in /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/server-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/server-cert.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mysql-client\"\nsudo openssl rsa -in /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/client-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/client-cert.pem\n\n# Set permissions\nsudo chown -R mysql:mysql /etc/mysql/ssl\nsudo chmod 600 /etc/mysql/ssl/*-key.pem\nsudo chmod 644 /etc/mysql/ssl/*-cert.pem /etc/mysql/ssl/ca-cert.pem\n```\n\n### User Security and Privileges\n\n```sql\n-- Create secure users with SSL requirements\nCREATE USER 'appuser'@'%' IDENTIFIED BY 'SecurePassword123!' REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'%';\n\n-- Create backup user\nCREATE USER 'backup'@'localhost' IDENTIFIED BY 'BackupPassword123!' REQUIRE SSL;\nGRANT SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'backup'@'localhost';\n\n-- Create monitoring user\nCREATE USER 'monitor'@'localhost' IDENTIFIED BY 'MonitorPassword123!';\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'monitor'@'localhost';\n\n-- Set password policies\nINSTALL COMPONENT 'file://component_validate_password';\nSET GLOBAL validate_password.policy = STRONG;\nSET GLOBAL validate_password.length = 12;\n\n-- Remove dangerous defaults\nDELETE FROM mysql.user WHERE User = '';\nDELETE FROM mysql.user WHERE User = 'root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\nDROP DATABASE IF EXISTS test;\nFLUSH PRIVILEGES;\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 3306\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mysql\nsudo firewall-cmd --permanent --zone=mysql --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mysql --add-port=3306/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 3306 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 3306\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"MySQL\" -Direction Inbound -Protocol TCP -LocalPort 3306 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Database Creation and Management\n\n```sql\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create user with specific privileges\nCREATE USER 'appuser'@'%' IDENTIFIED BY 'SecurePassword123!' REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'%';\n\n-- Create tables with proper character set\nUSE myapp;\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_username (username),\n    INDEX idx_email (email)\n) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- Example of partitioned table for large datasets\nCREATE TABLE logs (\n    id BIGINT AUTO_INCREMENT,\n    log_date DATE NOT NULL,\n    message TEXT,\n    PRIMARY KEY (id, log_date)\n) ENGINE=InnoDB\nPARTITION BY RANGE (YEAR(log_date)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);\n```\n\n### Database Optimization\n\n```sql\n-- Analyze and optimize tables\nANALYZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.users;\n\n-- Check table status\nSHOW TABLE STATUS FROM myapp;\n\n-- Index optimization\nSHOW INDEX FROM myapp.users;\nALTER TABLE myapp.users ADD INDEX idx_created (created_at);\n\n-- View performance schema statistics\nSELECT * FROM performance_schema.table_io_waits_summary_by_table \nWHERE OBJECT_SCHEMA = 'myapp' ORDER BY SUM_TIMER_WAIT DESC;\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# MySQL-specific kernel parameters\nsudo tee -a /etc/sysctl.conf <<EOF\n# MySQL optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\nmysql soft nofile 65535\nmysql hard nofile 65535\nEOF\n```\n\n### MySQL Performance Tuning\n\n```ini\n# High-performance MySQL configuration\n[mysqld]\n# Memory settings\ninnodb_buffer_pool_size = 8G  # 70-80% of available RAM\ninnodb_buffer_pool_instances = 8\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\n\n# Thread settings\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# Connection settings\nmax_connections = 500\nmax_user_connections = 450\ninteractive_timeout = 3600\nwait_timeout = 600\n\n# Query cache (MySQL 5.7 and earlier)\nquery_cache_type = 1\nquery_cache_size = 256M\n\n# Temporary tables\ntmp_table_size = 128M\nmax_heap_table_size = 128M\n\n# MyISAM settings (if used)\nkey_buffer_size = 256M\nmyisam_sort_buffer_size = 128M\n\n# InnoDB optimization\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\ninnodb_io_capacity = 2000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\n```\n\n### Query Optimization\n\n```sql\n-- Enable performance schema\nSET GLOBAL performance_schema = ON;\n\n-- Query optimization analysis\nSELECT * FROM performance_schema.events_statements_summary_by_digest \nORDER BY SUM_TIMER_WAIT DESC LIMIT 10;\n\n-- Index usage analysis\nSELECT * FROM performance_schema.table_io_waits_summary_by_index_usage \nWHERE OBJECT_SCHEMA = 'myapp' ORDER BY SUM_TIMER_WAIT DESC;\n\n-- Slow query analysis\nSELECT * FROM mysql.slow_log ORDER BY start_time DESC LIMIT 10;\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```sql\n-- Performance monitoring queries\nSHOW GLOBAL STATUS LIKE 'Threads_connected';\nSHOW GLOBAL STATUS LIKE 'Queries';\nSHOW GLOBAL STATUS LIKE 'Slow_queries';\nSHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read_requests';\nSHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_reads';\n\n-- Connection monitoring\nSELECT \n    USER,\n    HOST,\n    DB,\n    COMMAND,\n    TIME,\n    STATE,\n    INFO\nFROM INFORMATION_SCHEMA.PROCESSLIST\nWHERE USER != 'system user'\nORDER BY TIME DESC;\n\n-- Database size monitoring\nSELECT \n    table_schema AS 'Database',\n    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'Size (MB)'\nFROM information_schema.tables \nGROUP BY table_schema\nORDER BY SUM(data_length + index_length) DESC;\n```\n\n### External Monitoring Setup\n\n```bash\n# Install MySQL Exporter for Prometheus\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-*.tar.gz\nsudo cp mysqld_exporter /usr/local/bin/\n\n# Create monitoring user\nmysql -u root -p <<EOF\nCREATE USER 'exporter'@'localhost' IDENTIFIED BY 'ExporterPassword123!';\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysqld_exporter.service <<EOF\n[Unit]\nDescription=MySQL Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mysql\nEnvironment=DATA_SOURCE_NAME=\"exporter:ExporterPassword123!@(localhost:3306)/\"\nExecStart=/usr/local/bin/mysqld_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mysqld_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# mysql-health-check.sh\n\n# Check MySQL service\nif ! systemctl is-active mysql >/dev/null 2>&1; then\n    echo \"CRITICAL: MySQL service is not running\"\n    exit 2\nfi\n\n# Check connectivity\nif ! mysql -e \"SELECT 1;\" >/dev/null 2>&1; then\n    echo \"CRITICAL: Cannot connect to MySQL\"\n    exit 2\nfi\n\n# Check replication (if configured)\nSLAVE_STATUS=$(mysql -e \"SHOW SLAVE STATUS\\G\" 2>/dev/null | grep \"Slave_IO_Running:\")\nif [ -n \"$SLAVE_STATUS\" ]; then\n    IO_RUNNING=$(echo \"$SLAVE_STATUS\" | awk '{print $2}')\n    if [ \"$IO_RUNNING\" != \"Yes\" ]; then\n        echo \"WARNING: Replication IO thread not running\"\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mysql -e \"SHOW STATUS LIKE 'Threads_connected';\" | tail -1 | awk '{print $2}')\nMAX_CONNECTIONS=$(mysql -e \"SHOW VARIABLES LIKE 'max_connections';\" | tail -1 | awk '{print $2}')\nCONNECTION_USAGE=$((CONNECTIONS * 100 / MAX_CONNECTIONS))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo \"WARNING: High connection usage: ${CONNECTION_USAGE}%\"\n    exit 1\nfi\n\necho \"OK: MySQL is healthy\"\nexit 0\n```\n\n## 9. Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# mysql-backup.sh\n\nBACKUP_DIR=\"/backup/mysql/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Full database backup\nmysqldump --all-databases \\\n  --single-transaction \\\n  --routines \\\n  --triggers \\\n  --events \\\n  --master-data=2 \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip > \"$BACKUP_DIR/full-backup.sql.gz\"\n\n# Individual database backup\nmysqldump --single-transaction \\\n  --routines \\\n  --triggers \\\n  myapp \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip > \"$BACKUP_DIR/myapp-backup.sql.gz\"\n\n# Binary log backup\ncp /var/lib/mysql/mysql-bin.* \"$BACKUP_DIR/\" 2>/dev/null || true\n\n# Configuration backup\ntar czf \"$BACKUP_DIR/mysql-config.tar.gz\" /etc/mysql/\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# mysql-restore.sh\n\nBACKUP_FILE=\"$1\"\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.sql.gz>\"\n    exit 1\nfi\n\n# Stop applications using the database\necho \"Stopping applications...\"\n\n# Restore database\necho \"Restoring database from $BACKUP_FILE...\"\nzcat \"$BACKUP_FILE\" | mysql -u root -p\n\n# Verify restore\nmysql -u root -p -e \"SHOW DATABASES;\"\n\necho \"Restore completed\"\n```\n\n### Point-in-Time Recovery\n\n```bash\n#!/bin/bash\n# mysql-pitr.sh\n\nBACKUP_FILE=\"$1\"\nRECOVERY_TIME=\"$2\"\n\nif [ -z \"$BACKUP_FILE\" ] || [ -z \"$RECOVERY_TIME\" ]; then\n    echo \"Usage: $0 <backup-file.sql.gz> <recovery-time>\"\n    echo \"Example: $0 backup.sql.gz '2024-01-15 14:30:00'\"\n    exit 1\nfi\n\n# Restore base backup\nzcat \"$BACKUP_FILE\" | mysql -u root -p\n\n# Apply binary logs up to recovery point\nmysqlbinlog --stop-datetime=\"$RECOVERY_TIME\" /var/lib/mysql/mysql-bin.* | mysql -u root -p\n\necho \"Point-in-time recovery completed to $RECOVERY_TIME\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **MySQL won't start**:\n```bash\n# Check logs\nsudo journalctl -u mysql -f\nsudo tail -f /var/log/mysql/error.log\n\n# Check disk space\ndf -h /var/lib/mysql\n\n# Check permissions\nls -la /var/lib/mysql\n\n# Test configuration\nmysqld --help --verbose\n```\n\n2. **Connection issues**:\n```bash\n# Check if MySQL is listening\nsudo ss -tlnp | grep :3306\n\n# Test local connection\nmysql -u root -p -e \"SELECT 1;\"\n\n# Check user privileges\nmysql -u root -p -e \"SELECT User, Host FROM mysql.user;\"\n\n# Check bind address\nmysql -u root -p -e \"SHOW VARIABLES LIKE 'bind_address';\"\n```\n\n3. **Performance issues**:\n```bash\n# Check slow queries\nmysql -u root -p -e \"SHOW GLOBAL STATUS LIKE 'Slow_queries';\"\n\n# Analyze table statistics\nmysql -u root -p -e \"SHOW TABLE STATUS FROM myapp;\"\n\n# Check buffer pool efficiency\nmysql -u root -p -e \"SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read%';\"\n```\n\n### Debug Mode\n\n```bash\n# Start MySQL with debug options\nsudo mysqld --debug --user=mysql --console\n\n# Enable general query log\nmysql -u root -p -e \"SET GLOBAL general_log = 1;\"\nmysql -u root -p -e \"SET GLOBAL general_log_file = '/var/log/mysql/general.log';\"\n\n# Analyze queries\nsudo tail -f /var/log/mysql/general.log\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update mysql-community-server\nsudo dnf update mysql-community-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mysql-server\n\n# Arch Linux\nsudo pacman -Syu mysql\n\n# Alpine Linux\napk update\napk upgrade mariadb\n\n# openSUSE\nsudo zypper update mysql-community-server\n\n# FreeBSD\npkg update\npkg upgrade mysql80-server\n\n# Always backup before updates\nmysql -u backup -p < backup.sql\n\n# Run mysql_upgrade after major updates\nsudo mysql_upgrade -u root -p\nsudo systemctl restart mysql\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# mysql-maintenance.sh\n\n# Analyze tables\nmysql -u root -p <<EOF\nANALYZE TABLE myapp.users;\nANALYZE TABLE myapp.logs;\nEOF\n\n# Optimize tables\nmysql -u root -p <<EOF\nOPTIMIZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.logs;\nEOF\n\n# Purge old binary logs\nmysql -u root -p -e \"PURGE BINARY LOGS BEFORE DATE_SUB(NOW(), INTERVAL 7 DAY);\"\n\n# Check for corrupted tables\nmysqlcheck --all-databases --check -u root -p\n\necho \"MySQL maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/mysql-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mysql <<EOF\n/var/log/mysql/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 mysql adm\n    sharedscripts\n    postrotate\n        /usr/bin/mysqladmin flush-logs\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Django Integration\n\n```python\n# Django settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'myapp',\n        'USER': 'appuser',\n        'PASSWORD': 'SecurePassword123!',\n        'HOST': 'localhost',\n        'PORT': '3306',\n        'OPTIONS': {\n            'ssl': {\n                'cert': '/etc/mysql/ssl/client-cert.pem',\n                'key': '/etc/mysql/ssl/client-key.pem',\n                'ca': '/etc/mysql/ssl/ca-cert.pem',\n            },\n            'charset': 'utf8mb4',\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n        },\n    }\n}\n```\n\n### WordPress Integration\n\n```php\n// wp-config.php\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wpuser');\ndefine('DB_PASSWORD', 'SecureWpPassword123!');\ndefine('DB_HOST', 'localhost');\ndefine('DB_CHARSET', 'utf8mb4');\ndefine('DB_COLLATE', 'utf8mb4_unicode_ci');\n\n// Enable SSL\ndefine('MYSQL_SSL_CA', '/etc/mysql/ssl/ca-cert.pem');\ndefine('MYSQL_CLIENT_FLAGS', MYSQLI_CLIENT_SSL);\n```\n\n### Node.js Integration\n\n```javascript\n// Using mysql2 with SSL\nconst mysql = require('mysql2/promise');\n\nconst connection = await mysql.createConnection({\n    host: 'localhost',\n    user: 'appuser',\n    password: 'SecurePassword123!',\n    database: 'myapp',\n    ssl: {\n        ca: fs.readFileSync('/etc/mysql/ssl/ca-cert.pem'),\n        cert: fs.readFileSync('/etc/mysql/ssl/client-cert.pem'),\n        key: fs.readFileSync('/etc/mysql/ssl/client-key.pem')\n    }\n});\n```\n\n## Additional Resources\n\n- [Official MySQL Documentation](https://dev.mysql.com/doc/)\n- [MySQL 8.0 Reference Manual](https://dev.mysql.com/doc/refman/8.0/en/)\n- [MariaDB Documentation](https://mariadb.org/documentation/)\n- [MySQL Performance Blog](https://www.percona.com/blog/)\n- [Percona Toolkit](https://www.percona.com/software/database-tools/percona-toolkit)\n- [MySQL Security Guide](https://dev.mysql.com/doc/refman/8.0/en/security.html)\n- [MySQL Community Forums](https://forums.mysql.com/)\n- [MySQL Planet Blog Aggregator](https://planet.mysql.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">MySQL is a free and open-source relational database management system (RDBMS). Originally developed by Michael \"Monty\" Widenius and now owned by Oracle Corporation, MySQL is the world's second-most widely used relational database management system. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade reliability, performance, and scalability without licensing costs, with features like ACID compliance, transactions, replication, and clustering.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 5GB minimum (SSD recommended for performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for replication setups</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 2.6+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3306 (default MySQL port)</li>\n<li class=\"mobile-list-item\">Port 33060 (MySQL X Protocol)</li>\n<li class=\"mobile-list-item\">Additional ports for replication and clustering</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">libc6, libssl, zlib (usually included in distributions)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add MySQL official repository\nsudo dnf install -y https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm\n\n# Import MySQL GPG key\nsudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022\n\n# Install MySQL server\nsudo dnf install -y mysql-community-server mysql-community-client\n\n# Enable and start service\nsudo systemctl enable --now mysqld\n\n# Get temporary root password\nsudo grep &#039;temporary password&#039; /var/log/mysqld.log\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y wget lsb-release gnupg\n\n# Add MySQL APT repository\nwget https://dev.mysql.com/get/mysql-apt-config_0.8.29-1_all.deb\nsudo dpkg -i mysql-apt-config_0.8.29-1_all.deb\n\n# Update package index\nsudo apt update\n\n# Install MySQL server\nsudo apt install -y mysql-server mysql-client\n\n# Enable and start service\nsudo systemctl enable --now mysql\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo ufw allow mysql</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MySQL from official repositories\nsudo pacman -S mysql\n\n# Initialize database\nsudo mysqld --initialize --user=mysql --basedir=/usr --datadir=/var/lib/mysql\n\n# Enable and start service\nsudo systemctl enable --now mysqld\n\n# Get temporary root password\nsudo cat /var/lib/mysql/$(hostname).err | grep &#039;temporary password&#039;\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Optional: Install MariaDB instead (more common on Arch)\nsudo pacman -S mariadb\nsudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\nsudo systemctl enable --now mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MySQL (MariaDB is the default MySQL implementation)\napk add --no-cache mariadb mariadb-client\n\n# Initialize database\nmysql_install_db --user=mysql --datadir=/var/lib/mysql\n\n# Create mysql user if not exists\nadduser -D -H -s /sbin/nologin mysql\n\n# Set permissions\nchown -R mysql:mysql /var/lib/mysql\n\n# Enable and start service\nrc-update add mariadb default\nrc-service mariadb start\n\n# Secure installation\nmysql_secure_installation</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y mysql-community-server mysql-community-client\n\n# Alternative: Install MariaDB (more commonly available)\nsudo zypper install -y mariadb mariadb-client mariadb-tools\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y mariadb mariadb-client\n\n# Initialize database (MariaDB)\nsudo mysql_install_db --user=mysql\n\n# Enable and start service\nsudo systemctl enable --now mysql\n# or for MariaDB:\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install mysql\n\n# Start MySQL service\nbrew services start mysql\n\n# Or run manually\nmysql.server start\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/my.cnf\n# Alternative: /opt/homebrew/etc/my.cnf (Apple Silicon)\n\n# Alternative: Install MariaDB\nbrew install mariadb\nbrew services start mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install mysql80-server mysql80-client\n\n# Using ports\ncd /usr/ports/databases/mysql80-server\nmake install clean\n\n# Enable MySQL\necho &#039;mysql_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Initialize database\nservice mysql-server start\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/mysql/my.cnf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install mysql\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mysql\n\n# Method 3: Manual installation\n# Download MySQL Installer from https://dev.mysql.com/downloads/installer/\n# Run mysql-installer-community-8.0.xx.x.msi\n\n# Install as Windows service\n&quot;C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysqld&quot; --install MySQL80\nnet start MySQL80\n\n# Configuration location: C:\\ProgramData\\MySQL\\MySQL Server 8.0\\my.ini</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create mysql user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/mysql -s /sbin/nologin -c &quot;MySQL Server&quot; mysql</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/mysql/mysql.conf.d/mysqld.cnf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/my.cnf.d/mariadb-server.cnf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/mysql/my.cnf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\ProgramData\\MySQL\\MySQL Server 8.0\\my.ini</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/mysql/mysql.conf.d/mysqld.cnf\n[mysqld]\n# Basic settings\nbind-address = 127.0.0.1\nport = 3306\nsocket = /var/run/mysqld/mysqld.sock\ndatadir = /var/lib/mysql\n\n# Security settings\nsql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\nlocal_infile = 0\nskip_name_resolve = 1\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\n\n# Performance settings\nmax_connections = 200\nthread_cache_size = 50\ntable_open_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\n\n# Logging\nlog_error = /var/log/mysql/error.log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nexpire_logs_days = 7</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MySQL is running\nsudo systemctl status mysql\n\n# Test connection\nmysql -u root -p -e &quot;SELECT VERSION();&quot;\n\n# Check user accounts\nmysql -u root -p -e &quot;SELECT User, Host FROM mysql.user;&quot;\n\n# Test database operations\nmysql -u root -p -e &quot;CREATE DATABASE test_db; DROP DATABASE test_db;&quot;\n\n# Check configuration\nmysql -u root -p -e &quot;SHOW VARIABLES LIKE &#039;character_set%&#039;;&quot;\nmysql -u root -p -e &quot;SHOW VARIABLES LIKE &#039;collation%&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Change the default root password immediately and remove anonymous users!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable MySQL to start on boot\nsudo systemctl enable mysql\n\n# Start MySQL\nsudo systemctl start mysql\n\n# Stop MySQL\nsudo systemctl stop mysql\n\n# Restart MySQL\nsudo systemctl restart mysql\n\n# Reload configuration\nsudo systemctl reload mysql\n\n# Check status\nsudo systemctl status mysql\n\n# View logs\nsudo journalctl -u mysql -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable MySQL/MariaDB to start on boot\nrc-update add mariadb default\n\n# Start MariaDB\nrc-service mariadb start\n\n# Stop MariaDB\nrc-service mariadb stop\n\n# Restart MariaDB\nrc-service mariadb restart\n\n# Check status\nrc-service mariadb status\n\n# View logs\ntail -f /var/log/mysql/error.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mysql_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start MySQL\nservice mysql-server start\n\n# Stop MySQL\nservice mysql-server stop\n\n# Restart MySQL\nservice mysql-server restart\n\n# Check status\nservice mysql-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mysql\nbrew services stop mysql\nbrew services restart mysql\n\n# Check status\nbrew services list | grep mysql\n\n# Manual control\nmysql.server start\nmysql.server stop\nmysql.server restart</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start MySQL service\nnet start MySQL80\n\n# Stop MySQL service\nnet stop MySQL80\n\n# Using PowerShell\nStart-Service MySQL80\nStop-Service MySQL80\nRestart-Service MySQL80\n\n# Check status\nGet-Service MySQL80\n\n# View logs\nGet-EventLog -LogName Application -Source MySQL</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-configuration\" class=\"mobile-header\">High Availability Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Master-Slave Replication Configuration\n# Master server configuration\n[mysqld]\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = production_db\n\n# Slave server configuration\n[mysqld]\nserver-id = 2\nrelay-log = relay-bin\nread_only = 1</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-80-group-replication\" class=\"mobile-header\">MySQL 8.0 Group Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Group Replication settings\n[mysqld]\n# Group Replication configuration\nloose-group_replication_group_name = &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;\nloose-group_replication_start_on_boot = off\nloose-group_replication_local_address = &quot;mysql1.example.com:33061&quot;\nloose-group_replication_group_seeds = &quot;mysql1.example.com:33061,mysql2.example.com:33061,mysql3.example.com:33061&quot;\nloose-group_replication_bootstrap_group = off\n\n# Required settings\ngtid_mode = ON\nenforce_gtid_consistency = ON\nmaster_info_repository = TABLE\nrelay_log_info_repository = TABLE\nbinlog_checksum = NONE\nlog_slave_updates = ON\nlog_bin = binlog\nbinlog_format = ROW\ntransaction_write_set_extraction = XXHASH64</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Security hardening\n[mysqld]\n# SSL/TLS configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\ntls_version = TLSv1.2,TLSv1.3\n\n# Authentication\ndefault_authentication_plugin = caching_sha2_password\n\n# Connection security\nmax_user_connections = 100\nmax_connect_errors = 10\n\n# Disable dangerous functions\nlocal_infile = 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/mysql-proxy\nupstream mysql_backend {\n    server 127.0.0.1:3306 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:3307 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 3306;\n    proxy_pass mysql_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mysql.log;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend mysql_frontend\n    bind *:3306\n    mode tcp\n    option tcplog\n    default_backend mysql_servers\n\nbackend mysql_servers\n    mode tcp\n    balance roundrobin\n    option mysql-check user haproxy\n    server mysql1 127.0.0.1:3306 check\n    server mysql2 127.0.0.1:3307 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"proxysql-configuration\" class=\"mobile-header\">ProxySQL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- ProxySQL configuration for MySQL load balancing\nINSERT INTO mysql_servers(hostgroup_id, hostname, port, weight) VALUES\n(0, &#039;127.0.0.1&#039;, 3306, 900),\n(0, &#039;127.0.0.1&#039;, 3307, 100);\n\nINSERT INTO mysql_query_rules(rule_id, active, match_pattern, destination_hostgroup, apply) VALUES\n(1, 1, &#039;^SELECT.*&#039;, 0, 1),\n(2, 1, &#039;^INSERT.*&#039;, 0, 1);\n\nLOAD MYSQL SERVERS TO RUNTIME;\nLOAD MYSQL QUERY RULES TO RUNTIME;\nSAVE MYSQL SERVERS TO DISK;\nSAVE MYSQL QUERY RULES TO DISK;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates for MySQL\nsudo mkdir -p /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa 2048 &gt; /etc/mysql/ssl/ca-key.pem\nsudo openssl req -new -x509 -nodes -days 3650 -key /etc/mysql/ssl/ca-key.pem -out /etc/mysql/ssl/ca-cert.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MySQL-CA&quot;\n\n# Create server certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mysql.example.com&quot;\nsudo openssl rsa -in /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/server-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/server-cert.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mysql-client&quot;\nsudo openssl rsa -in /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/client-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/client-cert.pem\n\n# Set permissions\nsudo chown -R mysql:mysql /etc/mysql/ssl\nsudo chmod 600 /etc/mysql/ssl/*-key.pem\nsudo chmod 644 /etc/mysql/ssl/*-cert.pem /etc/mysql/ssl/ca-cert.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-security-and-privileges\" class=\"mobile-header\">User Security and Privileges</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create secure users with SSL requirements\nCREATE USER &#039;appuser&#039;@&#039;%&#039; IDENTIFIED BY &#039;SecurePassword123!&#039; REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;%&#039;;\n\n-- Create backup user\nCREATE USER &#039;backup&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;BackupPassword123!&#039; REQUIRE SSL;\nGRANT SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO &#039;backup&#039;@&#039;localhost&#039;;\n\n-- Create monitoring user\nCREATE USER &#039;monitor&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;MonitorPassword123!&#039;;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;monitor&#039;@&#039;localhost&#039;;\n\n-- Set password policies\nINSTALL COMPONENT &#039;file://component_validate_password&#039;;\nSET GLOBAL validate_password.policy = STRONG;\nSET GLOBAL validate_password.length = 12;\n\n-- Remove dangerous defaults\nDELETE FROM mysql.user WHERE User = &#039;&#039;;\nDELETE FROM mysql.user WHERE User = &#039;root&#039; AND Host NOT IN (&#039;localhost&#039;, &#039;127.0.0.1&#039;, &#039;::1&#039;);\nDROP DATABASE IF EXISTS test;\nFLUSH PRIVILEGES;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 3306\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mysql\nsudo firewall-cmd --permanent --zone=mysql --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mysql --add-port=3306/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 3306 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 3306\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;MySQL&quot; -Direction Inbound -Protocol TCP -LocalPort 3306 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"database-creation-and-management\" class=\"mobile-header\">Database Creation and Management</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create user with specific privileges\nCREATE USER &#039;appuser&#039;@&#039;%&#039; IDENTIFIED BY &#039;SecurePassword123!&#039; REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;%&#039;;\n\n-- Create tables with proper character set\nUSE myapp;\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_username (username),\n    INDEX idx_email (email)\n) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- Example of partitioned table for large datasets\nCREATE TABLE logs (\n    id BIGINT AUTO_INCREMENT,\n    log_date DATE NOT NULL,\n    message TEXT,\n    PRIMARY KEY (id, log_date)\n) ENGINE=InnoDB\nPARTITION BY RANGE (YEAR(log_date)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Analyze and optimize tables\nANALYZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.users;\n\n-- Check table status\nSHOW TABLE STATUS FROM myapp;\n\n-- Index optimization\nSHOW INDEX FROM myapp.users;\nALTER TABLE myapp.users ADD INDEX idx_created (created_at);\n\n-- View performance schema statistics\nSELECT * FROM performance_schema.table_io_waits_summary_by_table \nWHERE OBJECT_SCHEMA = &#039;myapp&#039; ORDER BY SUM_TIMER_WAIT DESC;</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL-specific kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# MySQL optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\nmysql soft nofile 65535\nmysql hard nofile 65535\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-performance-tuning\" class=\"mobile-header\">MySQL Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># High-performance MySQL configuration\n[mysqld]\n# Memory settings\ninnodb_buffer_pool_size = 8G  # 70-80% of available RAM\ninnodb_buffer_pool_instances = 8\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\n\n# Thread settings\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# Connection settings\nmax_connections = 500\nmax_user_connections = 450\ninteractive_timeout = 3600\nwait_timeout = 600\n\n# Query cache (MySQL 5.7 and earlier)\nquery_cache_type = 1\nquery_cache_size = 256M\n\n# Temporary tables\ntmp_table_size = 128M\nmax_heap_table_size = 128M\n\n# MyISAM settings (if used)\nkey_buffer_size = 256M\nmyisam_sort_buffer_size = 128M\n\n# InnoDB optimization\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\ninnodb_io_capacity = 2000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8</code></pre>\n      </div>\n    </div>\n<h3 id=\"query-optimization\" class=\"mobile-header\">Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Enable performance schema\nSET GLOBAL performance_schema = ON;\n\n-- Query optimization analysis\nSELECT * FROM performance_schema.events_statements_summary_by_digest \nORDER BY SUM_TIMER_WAIT DESC LIMIT 10;\n\n-- Index usage analysis\nSELECT * FROM performance_schema.table_io_waits_summary_by_index_usage \nWHERE OBJECT_SCHEMA = &#039;myapp&#039; ORDER BY SUM_TIMER_WAIT DESC;\n\n-- Slow query analysis\nSELECT * FROM mysql.slow_log ORDER BY start_time DESC LIMIT 10;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Performance monitoring queries\nSHOW GLOBAL STATUS LIKE &#039;Threads_connected&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Queries&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Slow_queries&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_read_requests&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_reads&#039;;\n\n-- Connection monitoring\nSELECT \n    USER,\n    HOST,\n    DB,\n    COMMAND,\n    TIME,\n    STATE,\n    INFO\nFROM INFORMATION_SCHEMA.PROCESSLIST\nWHERE USER != &#039;system user&#039;\nORDER BY TIME DESC;\n\n-- Database size monitoring\nSELECT \n    table_schema AS &#039;Database&#039;,\n    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS &#039;Size (MB)&#039;\nFROM information_schema.tables \nGROUP BY table_schema\nORDER BY SUM(data_length + index_length) DESC;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MySQL Exporter for Prometheus\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-*.tar.gz\nsudo cp mysqld_exporter /usr/local/bin/\n\n# Create monitoring user\nmysql -u root -p &lt;&lt;EOF\nCREATE USER &#039;exporter&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;ExporterPassword123!&#039;;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;exporter&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysqld_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=MySQL Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mysql\nEnvironment=DATA_SOURCE_NAME=&quot;exporter:ExporterPassword123!@(localhost:3306)/&quot;\nExecStart=/usr/local/bin/mysqld_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mysql-health-check.sh\n\n# Check MySQL service\nif ! systemctl is-active mysql &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: MySQL service is not running&quot;\n    exit 2\nfi\n\n# Check connectivity\nif ! mysql -e &quot;SELECT 1;&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Cannot connect to MySQL&quot;\n    exit 2\nfi\n\n# Check replication (if configured)\nSLAVE_STATUS=$(mysql -e &quot;SHOW SLAVE STATUS\\G&quot; 2&gt;/dev/null | grep &quot;Slave_IO_Running:&quot;)\nif [ -n &quot;$SLAVE_STATUS&quot; ]; then\n    IO_RUNNING=$(echo &quot;$SLAVE_STATUS&quot; | awk &#039;{print $2}&#039;)\n    if [ &quot;$IO_RUNNING&quot; != &quot;Yes&quot; ]; then\n        echo &quot;WARNING: Replication IO thread not running&quot;\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mysql -e &quot;SHOW STATUS LIKE &#039;Threads_connected&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\nMAX_CONNECTIONS=$(mysql -e &quot;SHOW VARIABLES LIKE &#039;max_connections&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\nCONNECTION_USAGE=$((CONNECTIONS * 100 / MAX_CONNECTIONS))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo &quot;WARNING: High connection usage: ${CONNECTION_USAGE}%&quot;\n    exit 1\nfi\n\necho &quot;OK: MySQL is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mysql-backup.sh\n\nBACKUP_DIR=&quot;/backup/mysql/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Full database backup\nmysqldump --all-databases \\\n  --single-transaction \\\n  --routines \\\n  --triggers \\\n  --events \\\n  --master-data=2 \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip &gt; &quot;$BACKUP_DIR/full-backup.sql.gz&quot;\n\n# Individual database backup\nmysqldump --single-transaction \\\n  --routines \\\n  --triggers \\\n  myapp \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip &gt; &quot;$BACKUP_DIR/myapp-backup.sql.gz&quot;\n\n# Binary log backup\ncp /var/lib/mysql/mysql-bin.* &quot;$BACKUP_DIR/&quot; 2&gt;/dev/null || true\n\n# Configuration backup\ntar czf &quot;$BACKUP_DIR/mysql-config.tar.gz&quot; /etc/mysql/\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mysql-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.sql.gz&gt;&quot;\n    exit 1\nfi\n\n# Stop applications using the database\necho &quot;Stopping applications...&quot;\n\n# Restore database\necho &quot;Restoring database from $BACKUP_FILE...&quot;\nzcat &quot;$BACKUP_FILE&quot; | mysql -u root -p\n\n# Verify restore\nmysql -u root -p -e &quot;SHOW DATABASES;&quot;\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"point-in-time-recovery\" class=\"mobile-header\">Point-in-Time Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mysql-pitr.sh\n\nBACKUP_FILE=&quot;$1&quot;\nRECOVERY_TIME=&quot;$2&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ] || [ -z &quot;$RECOVERY_TIME&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.sql.gz&gt; &lt;recovery-time&gt;&quot;\n    echo &quot;Example: $0 backup.sql.gz &#039;2024-01-15 14:30:00&#039;&quot;\n    exit 1\nfi\n\n# Restore base backup\nzcat &quot;$BACKUP_FILE&quot; | mysql -u root -p\n\n# Apply binary logs up to recovery point\nmysqlbinlog --stop-datetime=&quot;$RECOVERY_TIME&quot; /var/lib/mysql/mysql-bin.* | mysql -u root -p\n\necho &quot;Point-in-time recovery completed to $RECOVERY_TIME&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>MySQL won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mysql -f\nsudo tail -f /var/log/mysql/error.log\n\n# Check disk space\ndf -h /var/lib/mysql\n\n# Check permissions\nls -la /var/lib/mysql\n\n# Test configuration\nmysqld --help --verbose</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MySQL is listening\nsudo ss -tlnp | grep :3306\n\n# Test local connection\nmysql -u root -p -e &quot;SELECT 1;&quot;\n\n# Check user privileges\nmysql -u root -p -e &quot;SELECT User, Host FROM mysql.user;&quot;\n\n# Check bind address\nmysql -u root -p -e &quot;SHOW VARIABLES LIKE &#039;bind_address&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check slow queries\nmysql -u root -p -e &quot;SHOW GLOBAL STATUS LIKE &#039;Slow_queries&#039;;&quot;\n\n# Analyze table statistics\nmysql -u root -p -e &quot;SHOW TABLE STATUS FROM myapp;&quot;\n\n# Check buffer pool efficiency\nmysql -u root -p -e &quot;SHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_read%&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start MySQL with debug options\nsudo mysqld --debug --user=mysql --console\n\n# Enable general query log\nmysql -u root -p -e &quot;SET GLOBAL general_log = 1;&quot;\nmysql -u root -p -e &quot;SET GLOBAL general_log_file = &#039;/var/log/mysql/general.log&#039;;&quot;\n\n# Analyze queries\nsudo tail -f /var/log/mysql/general.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update mysql-community-server\nsudo dnf update mysql-community-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mysql-server\n\n# Arch Linux\nsudo pacman -Syu mysql\n\n# Alpine Linux\napk update\napk upgrade mariadb\n\n# openSUSE\nsudo zypper update mysql-community-server\n\n# FreeBSD\npkg update\npkg upgrade mysql80-server\n\n# Always backup before updates\nmysql -u backup -p &lt; backup.sql\n\n# Run mysql_upgrade after major updates\nsudo mysql_upgrade -u root -p\nsudo systemctl restart mysql</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# mysql-maintenance.sh\n\n# Analyze tables\nmysql -u root -p &lt;&lt;EOF\nANALYZE TABLE myapp.users;\nANALYZE TABLE myapp.logs;\nEOF\n\n# Optimize tables\nmysql -u root -p &lt;&lt;EOF\nOPTIMIZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.logs;\nEOF\n\n# Purge old binary logs\nmysql -u root -p -e &quot;PURGE BINARY LOGS BEFORE DATE_SUB(NOW(), INTERVAL 7 DAY);&quot;\n\n# Check for corrupted tables\nmysqlcheck --all-databases --check -u root -p\n\necho &quot;MySQL maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/mysql-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mysql &lt;&lt;EOF\n/var/log/mysql/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 mysql adm\n    sharedscripts\n    postrotate\n        /usr/bin/mysqladmin flush-logs\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"django-integration\" class=\"mobile-header\">Django Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Django settings.py\nDATABASES = {\n    &#039;default&#039;: {\n        &#039;ENGINE&#039;: &#039;django.db.backends.mysql&#039;,\n        &#039;NAME&#039;: &#039;myapp&#039;,\n        &#039;USER&#039;: &#039;appuser&#039;,\n        &#039;PASSWORD&#039;: &#039;SecurePassword123!&#039;,\n        &#039;HOST&#039;: &#039;localhost&#039;,\n        &#039;PORT&#039;: &#039;3306&#039;,\n        &#039;OPTIONS&#039;: {\n            &#039;ssl&#039;: {\n                &#039;cert&#039;: &#039;/etc/mysql/ssl/client-cert.pem&#039;,\n                &#039;key&#039;: &#039;/etc/mysql/ssl/client-key.pem&#039;,\n                &#039;ca&#039;: &#039;/etc/mysql/ssl/ca-cert.pem&#039;,\n            },\n            &#039;charset&#039;: &#039;utf8mb4&#039;,\n            &#039;init_command&#039;: &quot;SET sql_mode=&#039;STRICT_TRANS_TABLES&#039;&quot;,\n        },\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-integration\" class=\"mobile-header\">WordPress Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"php\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">php</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-php\">// wp-config.php\ndefine(&#039;DB_NAME&#039;, &#039;wordpress&#039;);\ndefine(&#039;DB_USER&#039;, &#039;wpuser&#039;);\ndefine(&#039;DB_PASSWORD&#039;, &#039;SecureWpPassword123!&#039;);\ndefine(&#039;DB_HOST&#039;, &#039;localhost&#039;);\ndefine(&#039;DB_CHARSET&#039;, &#039;utf8mb4&#039;);\ndefine(&#039;DB_COLLATE&#039;, &#039;utf8mb4_unicode_ci&#039;);\n\n// Enable SSL\ndefine(&#039;MYSQL_SSL_CA&#039;, &#039;/etc/mysql/ssl/ca-cert.pem&#039;);\ndefine(&#039;MYSQL_CLIENT_FLAGS&#039;, MYSQLI_CLIENT_SSL);</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using mysql2 with SSL\nconst mysql = require(&#039;mysql2/promise&#039;);\n\nconst connection = await mysql.createConnection({\n    host: &#039;localhost&#039;,\n    user: &#039;appuser&#039;,\n    password: &#039;SecurePassword123!&#039;,\n    database: &#039;myapp&#039;,\n    ssl: {\n        ca: fs.readFileSync(&#039;/etc/mysql/ssl/ca-cert.pem&#039;),\n        cert: fs.readFileSync(&#039;/etc/mysql/ssl/client-cert.pem&#039;),\n        key: fs.readFileSync(&#039;/etc/mysql/ssl/client-key.pem&#039;)\n    }\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://dev.mysql.com/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official MySQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MySQL 8.0 Reference Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.org/documentation/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.percona.com/blog/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MySQL Performance Blog</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.percona.com/software/database-tools/percona-toolkit\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Percona Toolkit</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/security.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MySQL Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forums.mysql.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MySQL Community Forums</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://planet.mysql.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MySQL Planet Blog Aggregator</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"18 min","wordCount":3468,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"High Availability Configuration","id":"high-availability-configuration"},{"level":3,"text":"MySQL 8.0 Group Replication","id":"mysql-80-group-replication"},{"level":3,"text":"Advanced Security Settings","id":"advanced-security-settings"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":3,"text":"ProxySQL Configuration","id":"proxysql-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"SSL/TLS Setup","id":"ssltls-setup"},{"level":3,"text":"User Security and Privileges","id":"user-security-and-privileges"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"Database Creation and Management","id":"database-creation-and-management"},{"level":3,"text":"Database Optimization","id":"database-optimization"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"MySQL Performance Tuning","id":"mysql-performance-tuning"},{"level":3,"text":"Query Optimization","id":"query-optimization"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Built-in Monitoring","id":"built-in-monitoring"},{"level":3,"text":"External Monitoring Setup","id":"external-monitoring-setup"},{"level":3,"text":"Health Check Scripts","id":"health-check-scripts"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Procedures","id":"backup-procedures"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":3,"text":"Point-in-Time Recovery","id":"point-in-time-recovery"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Maintenance Tasks","id":"maintenance-tasks"},{"level":3,"text":"Health Monitoring","id":"health-monitoring"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Django Integration","id":"django-integration"},{"level":3,"text":"WordPress Integration","id":"wordpress-integration"},{"level":3,"text":"Node.js Integration","id":"nodejs-integration"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-11T06:14:28.283Z","metadataVersion":"2.0"},"category":{"key":"databases","name":"Databases","description":"Databases tools and applications","icon":"🗄️","color":"#8be9fd"},"relatedGuides":[{"name":"cassandra","displayName":"cassandra Installation Guide","slug":"cassandra","description":"cassandra is a free and open-source distributed NoSQL database. Apache Cassandra provides high availability with no single point of failure, serving as an open-source alternative to Amazon DynamoDB or Azure Cosmos DB","category":"databases","subcategory":"databases","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,7000,9042],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["databases","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/databases/cassandra","documentationUrl":"https://howtomgr.github.io/databases/cassandra","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cassandra","updatedAt":"2025-09-16T17:02:20Z","createdAt":"2025-09-16T02:24:22Z","readmeRaw":"# cassandra Installation Guide\n\ncassandra is a free and open-source distributed NoSQL database. Apache Cassandra provides high availability with no single point of failure, serving as an open-source alternative to Amazon DynamoDB or Azure Cosmos DB\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores minimum (8+ recommended)\n  - RAM: 8GB minimum (32GB+ recommended)\n  - Storage: 10GB+ for data\n  - Network: Cluster communication\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9042 (default cassandra port)\n  - Port 7000 for inter-node\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cassandra\nsudo dnf install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncassandra -v\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cassandra\nsudo apt install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo ufw allow 9042\n\n# Verify installation\ncassandra -v\n```\n\n### Arch Linux\n\n```bash\n# Install cassandra\nsudo pacman -S cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Verify installation\ncassandra -v\n```\n\n### Alpine Linux\n\n```bash\n# Install cassandra\napk add --no-cache cassandra\n\n# Enable and start service\nrc-update add cassandra default\nrc-service cassandra start\n\n# Verify installation\ncassandra -v\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cassandra\nsudo zypper install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncassandra -v\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cassandra\n\n# Start service\nbrew services start cassandra\n\n# Verify installation\ncassandra -v\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cassandra\n\n# Enable in rc.conf\necho 'cassandra_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cassandra start\n\n# Verify installation\ncassandra -v\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cassandra\n\n# Or using Scoop\nscoop install cassandra\n\n# Verify installation\ncassandra -v\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cassandra\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncassandra -v\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cassandra\n\n# Start service\nsudo systemctl start cassandra\n\n# Stop service\nsudo systemctl stop cassandra\n\n# Restart service\nsudo systemctl restart cassandra\n\n# Check status\nsudo systemctl status cassandra\n\n# View logs\nsudo journalctl -u cassandra -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cassandra default\n\n# Start service\nrc-service cassandra start\n\n# Stop service\nrc-service cassandra stop\n\n# Restart service\nrc-service cassandra restart\n\n# Check status\nrc-service cassandra status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cassandra_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cassandra start\n\n# Stop service\nservice cassandra stop\n\n# Restart service\nservice cassandra restart\n\n# Check status\nservice cassandra status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cassandra\nbrew services stop cassandra\nbrew services restart cassandra\n\n# Check status\nbrew services list | grep cassandra\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cassandra\n\n# Stop service\nnet stop cassandra\n\n# Using PowerShell\nStart-Service cassandra\nStop-Service cassandra\nRestart-Service cassandra\n\n# Check status\nGet-Service cassandra\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cassandra_backend {\n    server 127.0.0.1:9042;\n}\n\nserver {\n    listen 80;\n    server_name cassandra.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cassandra.example.com;\n\n    ssl_certificate /etc/ssl/certs/cassandra.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cassandra.example.com.key;\n\n    location / {\n        proxy_pass http://cassandra_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cassandra.example.com\n    Redirect permanent / https://cassandra.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cassandra.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cassandra.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cassandra.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9042/\n    ProxyPassReverse / http://127.0.0.1:9042/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cassandra_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cassandra.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cassandra_backend\n\nbackend cassandra_backend\n    balance roundrobin\n    server cassandra1 127.0.0.1:9042 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cassandra:cassandra /etc/cassandra\nsudo chmod 750 /etc/cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status cassandra\n\n# View logs\nsudo journalctl -u cassandra -f\n\n# Monitor resource usage\ntop -p $(pgrep cassandra)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cassandra\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cassandra-backup-$DATE.tar.gz\" /etc/cassandra /var/lib/cassandra\n\necho \"Backup completed: $BACKUP_DIR/cassandra-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cassandra\n\n# Restore from backup\ntar -xzf /backup/cassandra/cassandra-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cassandra\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cassandra -n 100\nsudo tail -f /var/log/cassandra/cassandra.log\n\n# Check configuration\ncassandra -v\n\n# Check permissions\nls -la /etc/cassandra\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9042\n\n# Test connectivity\ntelnet localhost 9042\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cassandra)\n\n# Check disk I/O\niotop -p $(pgrep cassandra)\n\n# Check connections\nss -an | grep 9042\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cassandra:\n    image: cassandra:latest\n    ports:\n      - \"9042:9042\"\n    volumes:\n      - ./config:/etc/cassandra\n      - ./data:/var/lib/cassandra\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cassandra\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cassandra\n\n# Arch Linux\nsudo pacman -Syu cassandra\n\n# Alpine Linux\napk update && apk upgrade cassandra\n\n# openSUSE\nsudo zypper update cassandra\n\n# FreeBSD\npkg update && pkg upgrade cassandra\n\n# Always backup before updates\ntar -czf /backup/cassandra-pre-update-$(date +%Y%m%d).tar.gz /etc/cassandra\n\n# Restart after updates\nsudo systemctl restart cassandra\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cassandra\n\n# Clean old logs\nfind /var/log/cassandra -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cassandra\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cassandra.org/\n- GitHub Repository: https://github.com/cassandra/cassandra\n- Community Forum: https://forum.cassandra.org/\n- Best Practices Guide: https://docs.cassandra.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">cassandra is a free and open-source distributed NoSQL database. Apache Cassandra provides high availability with no single point of failure, serving as an open-source alternative to Amazon DynamoDB or Azure Cosmos DB</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores minimum (8+ recommended)</li>\n<li class=\"mobile-list-item\">RAM: 8GB minimum (32GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for data</li>\n<li class=\"mobile-list-item\">Network: Cluster communication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9042 (default cassandra port)</li>\n<li class=\"mobile-list-item\">Port 7000 for inter-node</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cassandra\nsudo dnf install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cassandra\nsudo apt install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo ufw allow 9042\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cassandra\nsudo pacman -S cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cassandra\napk add --no-cache cassandra\n\n# Enable and start service\nrc-update add cassandra default\nrc-service cassandra start\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cassandra\nsudo zypper install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cassandra\n\n# Start service\nbrew services start cassandra\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cassandra\n\n# Enable in rc.conf\necho &#039;cassandra_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cassandra start\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cassandra\n\n# Or using Scoop\nscoop install cassandra\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cassandra\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cassandra\n\n# Start service\nsudo systemctl start cassandra\n\n# Stop service\nsudo systemctl stop cassandra\n\n# Restart service\nsudo systemctl restart cassandra\n\n# Check status\nsudo systemctl status cassandra\n\n# View logs\nsudo journalctl -u cassandra -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cassandra default\n\n# Start service\nrc-service cassandra start\n\n# Stop service\nrc-service cassandra stop\n\n# Restart service\nrc-service cassandra restart\n\n# Check status\nrc-service cassandra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cassandra_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cassandra start\n\n# Stop service\nservice cassandra stop\n\n# Restart service\nservice cassandra restart\n\n# Check status\nservice cassandra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cassandra\nbrew services stop cassandra\nbrew services restart cassandra\n\n# Check status\nbrew services list | grep cassandra</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cassandra\n\n# Stop service\nnet stop cassandra\n\n# Using PowerShell\nStart-Service cassandra\nStop-Service cassandra\nRestart-Service cassandra\n\n# Check status\nGet-Service cassandra</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cassandra_backend {\n    server 127.0.0.1:9042;\n}\n\nserver {\n    listen 80;\n    server_name cassandra.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cassandra.example.com;\n\n    ssl_certificate /etc/ssl/certs/cassandra.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cassandra.example.com.key;\n\n    location / {\n        proxy_pass http://cassandra_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cassandra.example.com\n    Redirect permanent / https://cassandra.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cassandra.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cassandra.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cassandra.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9042/\n    ProxyPassReverse / http://127.0.0.1:9042/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cassandra_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cassandra.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cassandra_backend\n\nbackend cassandra_backend\n    balance roundrobin\n    server cassandra1 127.0.0.1:9042 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cassandra:cassandra /etc/cassandra\nsudo chmod 750 /etc/cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status cassandra\n\n# View logs\nsudo journalctl -u cassandra -f\n\n# Monitor resource usage\ntop -p $(pgrep cassandra)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cassandra&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cassandra-backup-$DATE.tar.gz&quot; /etc/cassandra /var/lib/cassandra\n\necho &quot;Backup completed: $BACKUP_DIR/cassandra-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cassandra\n\n# Restore from backup\ntar -xzf /backup/cassandra/cassandra-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cassandra</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cassandra -n 100\nsudo tail -f /var/log/cassandra/cassandra.log\n\n# Check configuration\ncassandra -v\n\n# Check permissions\nls -la /etc/cassandra</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9042\n\n# Test connectivity\ntelnet localhost 9042\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cassandra)\n\n# Check disk I/O\niotop -p $(pgrep cassandra)\n\n# Check connections\nss -an | grep 9042</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cassandra:\n    image: cassandra:latest\n    ports:\n      - &quot;9042:9042&quot;\n    volumes:\n      - ./config:/etc/cassandra\n      - ./data:/var/lib/cassandra\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cassandra\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cassandra\n\n# Arch Linux\nsudo pacman -Syu cassandra\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cassandra\n\n# openSUSE\nsudo zypper update cassandra\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cassandra\n\n# Always backup before updates\ntar -czf /backup/cassandra-pre-update-$(date +%Y%m%d).tar.gz /etc/cassandra\n\n# Restart after updates\nsudo systemctl restart cassandra</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cassandra\n\n# Clean old logs\nfind /var/log/cassandra -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cassandra</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cassandra.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cassandra/cassandra</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cassandra.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cassandra.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1291,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-11T06:15:49.253Z","metadataVersion":"2.0"},{"name":"cockroachdb","displayName":"cockroachdb Installation Guide","slug":"cockroachdb","description":"cockroachdb is a free and open-source distributed SQL database. CockroachDB provides distributed SQL with strong consistency and survivability, serving as an open-source alternative to Google Spanner or Amazon Aurora","category":"databases","subcategory":"databases","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080,26257],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["databases","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/databases/cockroachdb","documentationUrl":"https://howtomgr.github.io/databases/cockroachdb","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cockroachdb","updatedAt":"2025-09-16T17:04:45Z","createdAt":"2025-09-16T02:27:21Z","readmeRaw":"# cockroachdb Installation Guide\n\ncockroachdb is a free and open-source distributed SQL database. CockroachDB provides distributed SQL with strong consistency and survivability, serving as an open-source alternative to Google Spanner or Amazon Aurora\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores minimum (4+ recommended)\n  - RAM: 2GB minimum (8GB+ recommended)\n  - Storage: 10GB+ for data\n  - Network: Cluster communication\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 26257 (default cockroachdb port)\n  - Port 8080 for admin UI\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cockroachdb\nsudo dnf install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockroach version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cockroachdb\nsudo apt install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo ufw allow 26257\n\n# Verify installation\ncockroach version\n```\n\n### Arch Linux\n\n```bash\n# Install cockroachdb\nsudo pacman -S cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Verify installation\ncockroach version\n```\n\n### Alpine Linux\n\n```bash\n# Install cockroachdb\napk add --no-cache cockroachdb\n\n# Enable and start service\nrc-update add cockroachdb default\nrc-service cockroachdb start\n\n# Verify installation\ncockroach version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cockroachdb\nsudo zypper install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockroach version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cockroachdb\n\n# Start service\nbrew services start cockroachdb\n\n# Verify installation\ncockroach version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cockroachdb\n\n# Enable in rc.conf\necho 'cockroachdb_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cockroachdb start\n\n# Verify installation\ncockroach version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cockroachdb\n\n# Or using Scoop\nscoop install cockroachdb\n\n# Verify installation\ncockroach version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cockroachdb\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncockroach version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cockroachdb\n\n# Start service\nsudo systemctl start cockroachdb\n\n# Stop service\nsudo systemctl stop cockroachdb\n\n# Restart service\nsudo systemctl restart cockroachdb\n\n# Check status\nsudo systemctl status cockroachdb\n\n# View logs\nsudo journalctl -u cockroachdb -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cockroachdb default\n\n# Start service\nrc-service cockroachdb start\n\n# Stop service\nrc-service cockroachdb stop\n\n# Restart service\nrc-service cockroachdb restart\n\n# Check status\nrc-service cockroachdb status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cockroachdb_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cockroachdb start\n\n# Stop service\nservice cockroachdb stop\n\n# Restart service\nservice cockroachdb restart\n\n# Check status\nservice cockroachdb status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cockroachdb\nbrew services stop cockroachdb\nbrew services restart cockroachdb\n\n# Check status\nbrew services list | grep cockroachdb\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cockroachdb\n\n# Stop service\nnet stop cockroachdb\n\n# Using PowerShell\nStart-Service cockroachdb\nStop-Service cockroachdb\nRestart-Service cockroachdb\n\n# Check status\nGet-Service cockroachdb\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cockroachdb_backend {\n    server 127.0.0.1:26257;\n}\n\nserver {\n    listen 80;\n    server_name cockroachdb.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cockroachdb.example.com;\n\n    ssl_certificate /etc/ssl/certs/cockroachdb.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cockroachdb.example.com.key;\n\n    location / {\n        proxy_pass http://cockroachdb_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cockroachdb.example.com\n    Redirect permanent / https://cockroachdb.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cockroachdb.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cockroachdb.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cockroachdb.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:26257/\n    ProxyPassReverse / http://127.0.0.1:26257/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cockroachdb_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cockroachdb.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cockroachdb_backend\n\nbackend cockroachdb_backend\n    balance roundrobin\n    server cockroachdb1 127.0.0.1:26257 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cockroachdb:cockroachdb /etc/cockroachdb\nsudo chmod 750 /etc/cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status cockroachdb\n\n# View logs\nsudo journalctl -u cockroachdb -f\n\n# Monitor resource usage\ntop -p $(pgrep cockroachdb)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cockroachdb\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cockroachdb-backup-$DATE.tar.gz\" /etc/cockroachdb /var/lib/cockroachdb\n\necho \"Backup completed: $BACKUP_DIR/cockroachdb-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cockroachdb\n\n# Restore from backup\ntar -xzf /backup/cockroachdb/cockroachdb-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cockroachdb\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cockroachdb -n 100\nsudo tail -f /var/log/cockroachdb/cockroachdb.log\n\n# Check configuration\ncockroach version\n\n# Check permissions\nls -la /etc/cockroachdb\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 26257\n\n# Test connectivity\ntelnet localhost 26257\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cockroachdb)\n\n# Check disk I/O\niotop -p $(pgrep cockroachdb)\n\n# Check connections\nss -an | grep 26257\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cockroachdb:\n    image: cockroachdb:latest\n    ports:\n      - \"26257:26257\"\n    volumes:\n      - ./config:/etc/cockroachdb\n      - ./data:/var/lib/cockroachdb\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cockroachdb\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cockroachdb\n\n# Arch Linux\nsudo pacman -Syu cockroachdb\n\n# Alpine Linux\napk update && apk upgrade cockroachdb\n\n# openSUSE\nsudo zypper update cockroachdb\n\n# FreeBSD\npkg update && pkg upgrade cockroachdb\n\n# Always backup before updates\ntar -czf /backup/cockroachdb-pre-update-$(date +%Y%m%d).tar.gz /etc/cockroachdb\n\n# Restart after updates\nsudo systemctl restart cockroachdb\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cockroachdb\n\n# Clean old logs\nfind /var/log/cockroachdb -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cockroachdb\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cockroachdb.org/\n- GitHub Repository: https://github.com/cockroachdb/cockroachdb\n- Community Forum: https://forum.cockroachdb.org/\n- Best Practices Guide: https://docs.cockroachdb.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">cockroachdb is a free and open-source distributed SQL database. CockroachDB provides distributed SQL with strong consistency and survivability, serving as an open-source alternative to Google Spanner or Amazon Aurora</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores minimum (4+ recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for data</li>\n<li class=\"mobile-list-item\">Network: Cluster communication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 26257 (default cockroachdb port)</li>\n<li class=\"mobile-list-item\">Port 8080 for admin UI</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cockroachdb\nsudo dnf install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cockroachdb\nsudo apt install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo ufw allow 26257\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockroachdb\nsudo pacman -S cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockroachdb\napk add --no-cache cockroachdb\n\n# Enable and start service\nrc-update add cockroachdb default\nrc-service cockroachdb start\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockroachdb\nsudo zypper install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cockroachdb\n\n# Start service\nbrew services start cockroachdb\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cockroachdb\n\n# Enable in rc.conf\necho &#039;cockroachdb_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cockroachdb start\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cockroachdb\n\n# Or using Scoop\nscoop install cockroachdb\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cockroachdb\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncockroach version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cockroachdb\n\n# Start service\nsudo systemctl start cockroachdb\n\n# Stop service\nsudo systemctl stop cockroachdb\n\n# Restart service\nsudo systemctl restart cockroachdb\n\n# Check status\nsudo systemctl status cockroachdb\n\n# View logs\nsudo journalctl -u cockroachdb -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cockroachdb default\n\n# Start service\nrc-service cockroachdb start\n\n# Stop service\nrc-service cockroachdb stop\n\n# Restart service\nrc-service cockroachdb restart\n\n# Check status\nrc-service cockroachdb status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cockroachdb_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cockroachdb start\n\n# Stop service\nservice cockroachdb stop\n\n# Restart service\nservice cockroachdb restart\n\n# Check status\nservice cockroachdb status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cockroachdb\nbrew services stop cockroachdb\nbrew services restart cockroachdb\n\n# Check status\nbrew services list | grep cockroachdb</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cockroachdb\n\n# Stop service\nnet stop cockroachdb\n\n# Using PowerShell\nStart-Service cockroachdb\nStop-Service cockroachdb\nRestart-Service cockroachdb\n\n# Check status\nGet-Service cockroachdb</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cockroachdb_backend {\n    server 127.0.0.1:26257;\n}\n\nserver {\n    listen 80;\n    server_name cockroachdb.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cockroachdb.example.com;\n\n    ssl_certificate /etc/ssl/certs/cockroachdb.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cockroachdb.example.com.key;\n\n    location / {\n        proxy_pass http://cockroachdb_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cockroachdb.example.com\n    Redirect permanent / https://cockroachdb.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cockroachdb.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cockroachdb.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cockroachdb.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:26257/\n    ProxyPassReverse / http://127.0.0.1:26257/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cockroachdb_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cockroachdb.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cockroachdb_backend\n\nbackend cockroachdb_backend\n    balance roundrobin\n    server cockroachdb1 127.0.0.1:26257 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cockroachdb:cockroachdb /etc/cockroachdb\nsudo chmod 750 /etc/cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status cockroachdb\n\n# View logs\nsudo journalctl -u cockroachdb -f\n\n# Monitor resource usage\ntop -p $(pgrep cockroachdb)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cockroachdb&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cockroachdb-backup-$DATE.tar.gz&quot; /etc/cockroachdb /var/lib/cockroachdb\n\necho &quot;Backup completed: $BACKUP_DIR/cockroachdb-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cockroachdb\n\n# Restore from backup\ntar -xzf /backup/cockroachdb/cockroachdb-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cockroachdb</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cockroachdb -n 100\nsudo tail -f /var/log/cockroachdb/cockroachdb.log\n\n# Check configuration\ncockroach version\n\n# Check permissions\nls -la /etc/cockroachdb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 26257\n\n# Test connectivity\ntelnet localhost 26257\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cockroachdb)\n\n# Check disk I/O\niotop -p $(pgrep cockroachdb)\n\n# Check connections\nss -an | grep 26257</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cockroachdb:\n    image: cockroachdb:latest\n    ports:\n      - &quot;26257:26257&quot;\n    volumes:\n      - ./config:/etc/cockroachdb\n      - ./data:/var/lib/cockroachdb\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cockroachdb\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cockroachdb\n\n# Arch Linux\nsudo pacman -Syu cockroachdb\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cockroachdb\n\n# openSUSE\nsudo zypper update cockroachdb\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cockroachdb\n\n# Always backup before updates\ntar -czf /backup/cockroachdb-pre-update-$(date +%Y%m%d).tar.gz /etc/cockroachdb\n\n# Restart after updates\nsudo systemctl restart cockroachdb</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cockroachdb\n\n# Clean old logs\nfind /var/log/cockroachdb -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cockroachdb</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cockroachdb.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cockroachdb/cockroachdb</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cockroachdb.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cockroachdb.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1289,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-11T06:15:43.423Z","metadataVersion":"2.0"},{"name":"mariadb","displayName":"MariaDB Installation Guide","slug":"mariadb","description":"MariaDB is a free and open-source relational database management system (RDBMS) and a fork of MySQL. Originally developed by Michael \"Monty\" Widenius, the original developer of MySQL, MariaDB was created to remain free under the GNU GPL after Oracle's acquisition of MySQL. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade features including Galera clustering, advanced storage engines, and enhanced performance optimizations without licensing costs, with features like ACID compliance, replication, and horizontal scaling.","category":"databases","subcategory":"databases","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[0,1,30,2048,3306,3307,4444,4567,4568],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["databases","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/databases/mariadb","documentationUrl":"https://howtomgr.github.io/databases/mariadb","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mariadb","updatedAt":"2025-09-16T17:29:22Z","createdAt":"2025-09-16T03:39:50Z","readmeRaw":"# MariaDB Installation Guide\n\nMariaDB is a free and open-source relational database management system (RDBMS) and a fork of MySQL. Originally developed by Michael \"Monty\" Widenius, the original developer of MySQL, MariaDB was created to remain free under the GNU GPL after Oracle's acquisition of MySQL. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade features including Galera clustering, advanced storage engines, and enhanced performance optimizations without licensing costs, with features like ACID compliance, replication, and horizontal scaling.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (4+ cores recommended for production)\n  - RAM: 1GB minimum (8GB+ recommended for production)\n  - Storage: 5GB minimum (SSD recommended for performance)\n  - Network: Stable connectivity for replication and clustering setups\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 2.6+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3306 (default MariaDB port)\n  - Port 4444 (Galera SST - State Snapshot Transfer)\n  - Port 4567 (Galera group communication)\n  - Port 4568 (Galera IST - Incremental State Transfer)\n- **Dependencies**:\n  - libc6, libssl, zlib (usually included in distributions)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Add MariaDB official repository\nsudo tee /etc/yum.repos.d/mariadb.repo <<EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.mariadb.org/yum/11.2/rhel/\\$releasever/\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.mariadb.org/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nenabled = 1\nEOF\n\n# Import MariaDB GPG key\nsudo rpm --import https://mirror.mariadb.org/yum/RPM-GPG-KEY-MariaDB\n\n# Install MariaDB server\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y software-properties-common dirmngr apt-transport-https\n\n# Add MariaDB signing key\ncurl -o /tmp/mariadb_release_signing_key.asc 'https://mariadb.org/mariadb_release_signing_key.asc'\nsudo mv /tmp/mariadb_release_signing_key.asc /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc\n\n# Add MariaDB repository\nsudo add-apt-repository \"deb [arch=amd64] https://mirror.mariadb.org/repo/11.2/ubuntu $(lsb_release -cs) main\"\n\n# Update package index\nsudo apt update\n\n# Install MariaDB server\nsudo apt install -y mariadb-server mariadb-client mariadb-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo ufw allow mysql\n```\n\n### Arch Linux\n\n```bash\n# Install MariaDB from official repositories\nsudo pacman -S mariadb\n\n# Initialize database\nsudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configuration location: /etc/my.cnf\n```\n\n### Alpine Linux\n\n```bash\n# Install MariaDB\napk add --no-cache mariadb mariadb-client mariadb-backup\n\n# Initialize database\nmysql_install_db --user=mysql --datadir=/var/lib/mysql\n\n# Create mysql user if not exists\nadduser -D -H -s /sbin/nologin mysql\n\n# Set permissions\nchown -R mysql:mysql /var/lib/mysql\n\n# Enable and start service\nrc-update add mariadb default\nrc-service mariadb start\n\n# Secure installation\nmysql_secure_installation\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y mariadb mariadb-client mariadb-tools\n\n# For latest version from official repository\nsudo zypper addrepo https://mirror.mariadb.org/repo/11.2/sles/15/x86_64 mariadb\nsudo zypper refresh\nsudo zypper install -y MariaDB-server MariaDB-client\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y mariadb mariadb-client\n\n# Initialize database if needed\nsudo mysql_install_db --user=mysql\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install mariadb\n\n# Start MariaDB service\nbrew services start mariadb\n\n# Or run manually\nmariadb-safe --datadir=/usr/local/var/mysql\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/my.cnf\n# Alternative: /opt/homebrew/etc/my.cnf (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install mariadb106-server mariadb106-client\n\n# Using ports\ncd /usr/ports/databases/mariadb106-server\nmake install clean\n\n# Enable MariaDB\necho 'mysql_enable=\"YES\"' >> /etc/rc.conf\n\n# Initialize database\nservice mysql-server start\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/mysql/my.cnf\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install mariadb\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mariadb\n\n# Method 3: Manual installation\n# Download MariaDB from https://mariadb.org/download/\n# Run mariadb-*.msi installer\n\n# Install as Windows service\n\"C:\\Program Files\\MariaDB 11.2\\bin\\mysqld\" --install MariaDB\nnet start MariaDB\n\n# Configuration location: C:\\Program Files\\MariaDB 11.2\\data\\my.ini\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create mysql user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/mysql -s /sbin/nologin -c \"MariaDB Server\" mysql\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/my.cnf`\n- Debian/Ubuntu: `/etc/mysql/mariadb.conf.d/50-server.cnf`\n- Arch Linux: `/etc/my.cnf`\n- Alpine Linux: `/etc/my.cnf.d/mariadb-server.cnf`\n- openSUSE/SLES: `/etc/my.cnf`\n- macOS: `/usr/local/etc/my.cnf`\n- FreeBSD: `/usr/local/etc/mysql/my.cnf`\n- Windows: `C:\\Program Files\\MariaDB 11.2\\data\\my.ini`\n\n3. **Essential settings to change**:\n\n```ini\n# /etc/mysql/mariadb.conf.d/50-server.cnf\n[mysqld]\n# Basic settings\nbind-address = 127.0.0.1\nport = 3306\nsocket = /run/mysqld/mysqld.sock\ndatadir = /var/lib/mysql\n\n# Security settings\nsql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\nlocal_infile = 0\nskip_name_resolve = 1\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\n\n# Performance settings\nmax_connections = 200\nthread_cache_size = 50\ntable_open_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\n\n# Logging\nlog_error = /var/log/mysql/error.log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nexpire_logs_days = 7\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if MariaDB is running\nsudo systemctl status mariadb\n\n# Test connection\nmariadb -u root -p -e \"SELECT VERSION();\"\n\n# Check user accounts\nmariadb -u root -p -e \"SELECT User, Host FROM mysql.user;\"\n\n# Test database operations\nmariadb -u root -p -e \"CREATE DATABASE test_db; DROP DATABASE test_db;\"\n\n# Check configuration\nmariadb -u root -p -e \"SHOW VARIABLES LIKE 'character_set%';\"\nmariadb -u root -p -e \"SHOW VARIABLES LIKE 'collation%';\"\n```\n\n**WARNING:** Change the default root password immediately and remove anonymous users!\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable MariaDB to start on boot\nsudo systemctl enable mariadb\n\n# Start MariaDB\nsudo systemctl start mariadb\n\n# Stop MariaDB\nsudo systemctl stop mariadb\n\n# Restart MariaDB\nsudo systemctl restart mariadb\n\n# Reload configuration\nsudo systemctl reload mariadb\n\n# Check status\nsudo systemctl status mariadb\n\n# View logs\nsudo journalctl -u mariadb -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable MariaDB to start on boot\nrc-update add mariadb default\n\n# Start MariaDB\nrc-service mariadb start\n\n# Stop MariaDB\nrc-service mariadb stop\n\n# Restart MariaDB\nrc-service mariadb restart\n\n# Check status\nrc-service mariadb status\n\n# View logs\ntail -f /var/log/mysql/error.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mysql_enable=\"YES\"' >> /etc/rc.conf\n\n# Start MariaDB\nservice mysql-server start\n\n# Stop MariaDB\nservice mysql-server stop\n\n# Restart MariaDB\nservice mysql-server restart\n\n# Check status\nservice mysql-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mariadb\nbrew services stop mariadb\nbrew services restart mariadb\n\n# Check status\nbrew services list | grep mariadb\n\n# Manual control\nmariadb-safe --datadir=/usr/local/var/mysql\n```\n\n### Windows Service Manager\n\n```powershell\n# Start MariaDB service\nnet start MariaDB\n\n# Stop MariaDB service\nnet stop MariaDB\n\n# Using PowerShell\nStart-Service MariaDB\nStop-Service MariaDB\nRestart-Service MariaDB\n\n# Check status\nGet-Service MariaDB\n\n# View logs\nGet-EventLog -LogName Application -Source MariaDB\n```\n\n## Advanced Configuration\n\n### High Availability Configuration\n\n```ini\n# Master-Slave Replication Configuration\n# Master server configuration\n[mysqld]\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = production_db\n\n# Slave server configuration\n[mysqld]\nserver-id = 2\nrelay-log = relay-bin\nread_only = 1\n```\n\n### Galera Cluster Configuration\n\n```ini\n# Galera Cluster settings\n[mysqld]\n# Galera Provider Configuration\nwsrep_on = ON\nwsrep_provider = /usr/lib/galera/libgalera_smm.so\n\n# Galera Cluster Configuration\nwsrep_cluster_name = \"MariaDB_Cluster\"\nwsrep_cluster_address = \"gcomm://node1.example.com,node2.example.com,node3.example.com\"\n\n# Galera Synchronization Configuration\nwsrep_sst_method = rsync\nwsrep_sst_auth = wsrep_sst:wsrep_password\n\n# Galera Node Configuration\nwsrep_node_address = \"node1.example.com\"\nwsrep_node_name = \"mariadb-node-1\"\n\n# Required settings\nbinlog_format = ROW\ndefault_storage_engine = InnoDB\ninnodb_autoinc_lock_mode = 2\n```\n\n### Advanced Security Settings\n\n```ini\n# Security hardening\n[mysqld]\n# SSL/TLS configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\ntls_version = TLSv1.2,TLSv1.3\n\n# Authentication\nplugin-load-add = server_audit=server_audit.so\nserver_audit_logging = ON\nserver_audit_events = 'CONNECT,QUERY,TABLE'\n\n# Connection security\nmax_user_connections = 100\nmax_connect_errors = 10\n\n# Disable dangerous functions\nlocal_infile = 0\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/mariadb-proxy\nupstream mariadb_backend {\n    server 127.0.0.1:3306 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:3307 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 3306;\n    proxy_pass mariadb_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mariadb.log;\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend mariadb_frontend\n    bind *:3306\n    mode tcp\n    option tcplog\n    default_backend mariadb_servers\n\nbackend mariadb_servers\n    mode tcp\n    balance roundrobin\n    option mysql-check user haproxy\n    server mariadb1 127.0.0.1:3306 check\n    server mariadb2 127.0.0.1:3307 check backup\n```\n\n### ProxySQL Configuration\n\n```sql\n-- ProxySQL configuration for MariaDB load balancing\nINSERT INTO mysql_servers(hostgroup_id, hostname, port, weight) VALUES\n(0, '127.0.0.1', 3306, 900),\n(0, '127.0.0.1', 3307, 100);\n\nINSERT INTO mysql_query_rules(rule_id, active, match_pattern, destination_hostgroup, apply) VALUES\n(1, 1, '^SELECT.*', 0, 1),\n(2, 1, '^INSERT.*', 0, 1);\n\nLOAD MYSQL SERVERS TO RUNTIME;\nLOAD MYSQL QUERY RULES TO RUNTIME;\nSAVE MYSQL SERVERS TO DISK;\nSAVE MYSQL QUERY RULES TO DISK;\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate SSL certificates for MariaDB\nsudo mkdir -p /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa 2048 > /etc/mysql/ssl/ca-key.pem\nsudo openssl req -new -x509 -nodes -days 3650 -key /etc/mysql/ssl/ca-key.pem -out /etc/mysql/ssl/ca-cert.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MariaDB-CA\"\n\n# Create server certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mariadb.example.com\"\nsudo openssl rsa -in /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/server-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/server-cert.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mariadb-client\"\nsudo openssl rsa -in /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/client-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/client-cert.pem\n\n# Set permissions\nsudo chown -R mysql:mysql /etc/mysql/ssl\nsudo chmod 600 /etc/mysql/ssl/*-key.pem\nsudo chmod 644 /etc/mysql/ssl/*-cert.pem /etc/mysql/ssl/ca-cert.pem\n```\n\n### User Security and Privileges\n\n```sql\n-- Create secure users with SSL requirements\nCREATE USER 'appuser'@'%' IDENTIFIED BY 'SecurePassword123!' REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'%';\n\n-- Create backup user\nCREATE USER 'backup'@'localhost' IDENTIFIED BY 'BackupPassword123!' REQUIRE SSL;\nGRANT SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'backup'@'localhost';\n\n-- Create monitoring user\nCREATE USER 'monitor'@'localhost' IDENTIFIED BY 'MonitorPassword123!';\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'monitor'@'localhost';\n\n-- Set password policies\nSET GLOBAL strict_password_validation = ON;\n\n-- Remove dangerous defaults\nDELETE FROM mysql.user WHERE User = '';\nDELETE FROM mysql.user WHERE User = 'root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\nDROP DATABASE IF EXISTS test;\nFLUSH PRIVILEGES;\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 3306\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mariadb\nsudo firewall-cmd --permanent --zone=mariadb --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mariadb --add-port=3306/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 3306 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 3306\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"MariaDB\" -Direction Inbound -Protocol TCP -LocalPort 3306 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Database Creation and Management\n\n```sql\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create user with specific privileges\nCREATE USER 'appuser'@'%' IDENTIFIED BY 'SecurePassword123!' REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'%';\n\n-- Create tables with proper character set\nUSE myapp;\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_username (username),\n    INDEX idx_email (email)\n) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- Example of partitioned table for large datasets\nCREATE TABLE logs (\n    id BIGINT AUTO_INCREMENT,\n    log_date DATE NOT NULL,\n    message TEXT,\n    PRIMARY KEY (id, log_date)\n) ENGINE=InnoDB\nPARTITION BY RANGE (YEAR(log_date)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);\n```\n\n### Database Optimization\n\n```sql\n-- Analyze and optimize tables\nANALYZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.users;\n\n-- Check table status\nSHOW TABLE STATUS FROM myapp;\n\n-- Index optimization\nSHOW INDEX FROM myapp.users;\nALTER TABLE myapp.users ADD INDEX idx_created (created_at);\n\n-- View performance schema statistics\nSELECT * FROM information_schema.table_statistics \nWHERE table_schema = 'myapp' ORDER BY total_latency DESC;\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# MariaDB-specific kernel parameters\nsudo tee -a /etc/sysctl.conf <<EOF\n# MariaDB optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\nmysql soft nofile 65535\nmysql hard nofile 65535\nEOF\n```\n\n### MariaDB Performance Tuning\n\n```ini\n# High-performance MariaDB configuration\n[mysqld]\n# Memory settings\ninnodb_buffer_pool_size = 8G  # 70-80% of available RAM\ninnodb_buffer_pool_instances = 8\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\n\n# Thread settings\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# Connection settings\nmax_connections = 500\nmax_user_connections = 450\ninteractive_timeout = 3600\nwait_timeout = 600\n\n# Query cache\nquery_cache_type = 1\nquery_cache_size = 256M\n\n# Temporary tables\ntmp_table_size = 128M\nmax_heap_table_size = 128M\n\n# MyISAM settings (if used)\nkey_buffer_size = 256M\nmyisam_sort_buffer_size = 128M\n\n# InnoDB optimization\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\ninnodb_io_capacity = 2000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\n```\n\n### Query Optimization\n\n```sql\n-- Enable performance schema\nSET GLOBAL performance_schema = ON;\n\n-- Query optimization analysis\nSELECT * FROM performance_schema.events_statements_summary_by_digest \nORDER BY sum_timer_wait DESC LIMIT 10;\n\n-- Index usage analysis\nSELECT * FROM performance_schema.table_io_waits_summary_by_index_usage \nWHERE object_schema = 'myapp' ORDER BY sum_timer_wait DESC;\n\n-- Slow query analysis\nSELECT * FROM mysql.slow_log ORDER BY start_time DESC LIMIT 10;\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```sql\n-- Performance monitoring queries\nSHOW GLOBAL STATUS LIKE 'Threads_connected';\nSHOW GLOBAL STATUS LIKE 'Queries';\nSHOW GLOBAL STATUS LIKE 'Slow_queries';\nSHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read_requests';\nSHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_reads';\n\n-- Connection monitoring\nSELECT \n    USER,\n    HOST,\n    DB,\n    COMMAND,\n    TIME,\n    STATE,\n    INFO\nFROM INFORMATION_SCHEMA.PROCESSLIST\nWHERE USER != 'system user'\nORDER BY TIME DESC;\n\n-- Database size monitoring\nSELECT \n    table_schema AS 'Database',\n    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'Size (MB)'\nFROM information_schema.tables \nGROUP BY table_schema\nORDER BY SUM(data_length + index_length) DESC;\n```\n\n### External Monitoring Setup\n\n```bash\n# Install MariaDB Exporter for Prometheus\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-*.tar.gz\nsudo cp mysqld_exporter /usr/local/bin/\n\n# Create monitoring user\nmariadb -u root -p <<EOF\nCREATE USER 'exporter'@'localhost' IDENTIFIED BY 'ExporterPassword123!';\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysqld_exporter.service <<EOF\n[Unit]\nDescription=MariaDB Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mysql\nEnvironment=DATA_SOURCE_NAME=\"exporter:ExporterPassword123!@(localhost:3306)/\"\nExecStart=/usr/local/bin/mysqld_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mysqld_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# mariadb-health-check.sh\n\n# Check MariaDB service\nif ! systemctl is-active mariadb >/dev/null 2>&1; then\n    echo \"CRITICAL: MariaDB service is not running\"\n    exit 2\nfi\n\n# Check connectivity\nif ! mariadb -e \"SELECT 1;\" >/dev/null 2>&1; then\n    echo \"CRITICAL: Cannot connect to MariaDB\"\n    exit 2\nfi\n\n# Check replication (if configured)\nSLAVE_STATUS=$(mariadb -e \"SHOW SLAVE STATUS\\G\" 2>/dev/null | grep \"Slave_IO_Running:\")\nif [ -n \"$SLAVE_STATUS\" ]; then\n    IO_RUNNING=$(echo \"$SLAVE_STATUS\" | awk '{print $2}')\n    if [ \"$IO_RUNNING\" != \"Yes\" ]; then\n        echo \"WARNING: Replication IO thread not running\"\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mariadb -e \"SHOW STATUS LIKE 'Threads_connected';\" | tail -1 | awk '{print $2}')\nMAX_CONNECTIONS=$(mariadb -e \"SHOW VARIABLES LIKE 'max_connections';\" | tail -1 | awk '{print $2}')\nCONNECTION_USAGE=$((CONNECTIONS * 100 / MAX_CONNECTIONS))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo \"WARNING: High connection usage: ${CONNECTION_USAGE}%\"\n    exit 1\nfi\n\necho \"OK: MariaDB is healthy\"\nexit 0\n```\n\n## 9. Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# mariadb-backup.sh\n\nBACKUP_DIR=\"/backup/mariadb/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Full database backup\nmariadb-dump --all-databases \\\n  --single-transaction \\\n  --routines \\\n  --triggers \\\n  --events \\\n  --master-data=2 \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip > \"$BACKUP_DIR/full-backup.sql.gz\"\n\n# Individual database backup\nmariadb-dump --single-transaction \\\n  --routines \\\n  --triggers \\\n  myapp \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip > \"$BACKUP_DIR/myapp-backup.sql.gz\"\n\n# Binary log backup\ncp /var/lib/mysql/mysql-bin.* \"$BACKUP_DIR/\" 2>/dev/null || true\n\n# Configuration backup\ntar czf \"$BACKUP_DIR/mariadb-config.tar.gz\" /etc/mysql/\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# mariadb-restore.sh\n\nBACKUP_FILE=\"$1\"\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.sql.gz>\"\n    exit 1\nfi\n\n# Stop applications using the database\necho \"Stopping applications...\"\n\n# Restore database\necho \"Restoring database from $BACKUP_FILE...\"\nzcat \"$BACKUP_FILE\" | mariadb -u root -p\n\n# Verify restore\nmariadb -u root -p -e \"SHOW DATABASES;\"\n\necho \"Restore completed\"\n```\n\n### Point-in-Time Recovery\n\n```bash\n#!/bin/bash\n# mariadb-pitr.sh\n\nBACKUP_FILE=\"$1\"\nRECOVERY_TIME=\"$2\"\n\nif [ -z \"$BACKUP_FILE\" ] || [ -z \"$RECOVERY_TIME\" ]; then\n    echo \"Usage: $0 <backup-file.sql.gz> <recovery-time>\"\n    echo \"Example: $0 backup.sql.gz '2024-01-15 14:30:00'\"\n    exit 1\nfi\n\n# Restore base backup\nzcat \"$BACKUP_FILE\" | mariadb -u root -p\n\n# Apply binary logs up to recovery point\nmysqlbinlog --stop-datetime=\"$RECOVERY_TIME\" /var/lib/mysql/mysql-bin.* | mariadb -u root -p\n\necho \"Point-in-time recovery completed to $RECOVERY_TIME\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **MariaDB won't start**:\n```bash\n# Check logs\nsudo journalctl -u mariadb -f\nsudo tail -f /var/log/mysql/error.log\n\n# Check disk space\ndf -h /var/lib/mysql\n\n# Check permissions\nls -la /var/lib/mysql\n\n# Test configuration\nmariadb --help --verbose\n```\n\n2. **Connection issues**:\n```bash\n# Check if MariaDB is listening\nsudo ss -tlnp | grep :3306\n\n# Test local connection\nmariadb -u root -p -e \"SELECT 1;\"\n\n# Check user privileges\nmariadb -u root -p -e \"SELECT User, Host FROM mysql.user;\"\n\n# Check bind address\nmariadb -u root -p -e \"SHOW VARIABLES LIKE 'bind_address';\"\n```\n\n3. **Performance issues**:\n```bash\n# Check slow queries\nmariadb -u root -p -e \"SHOW GLOBAL STATUS LIKE 'Slow_queries';\"\n\n# Analyze table statistics\nmariadb -u root -p -e \"SHOW TABLE STATUS FROM myapp;\"\n\n# Check buffer pool efficiency\nmariadb -u root -p -e \"SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read%';\"\n```\n\n### Debug Mode\n\n```bash\n# Start MariaDB with debug options\nsudo mariadb --debug --user=mysql --console\n\n# Enable general query log\nmariadb -u root -p -e \"SET GLOBAL general_log = 1;\"\nmariadb -u root -p -e \"SET GLOBAL general_log_file = '/var/log/mysql/general.log';\"\n\n# Analyze queries\nsudo tail -f /var/log/mysql/general.log\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update MariaDB-server\nsudo yum update MariaDB-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mariadb-server\n\n# Arch Linux\nsudo pacman -Syu mariadb\n\n# Alpine Linux\napk update\napk upgrade mariadb\n\n# openSUSE\nsudo zypper update mariadb\n\n# FreeBSD\npkg update\npkg upgrade mariadb106-server\n\n# Always backup before updates\nmariadb -u backup -p < backup.sql\n\n# Run mysql_upgrade after major updates\nsudo mysql_upgrade -u root -p\nsudo systemctl restart mariadb\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# mariadb-maintenance.sh\n\n# Analyze tables\nmariadb -u root -p <<EOF\nANALYZE TABLE myapp.users;\nANALYZE TABLE myapp.logs;\nEOF\n\n# Optimize tables\nmariadb -u root -p <<EOF\nOPTIMIZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.logs;\nEOF\n\n# Purge old binary logs\nmariadb -u root -p -e \"PURGE BINARY LOGS BEFORE DATE_SUB(NOW(), INTERVAL 7 DAY);\"\n\n# Check for corrupted tables\nmysqlcheck --all-databases --check -u root -p\n\necho \"MariaDB maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/mariadb-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mariadb <<EOF\n/var/log/mysql/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 mysql adm\n    sharedscripts\n    postrotate\n        /usr/bin/mysqladmin flush-logs\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Django Integration\n\n```python\n# Django settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'myapp',\n        'USER': 'appuser',\n        'PASSWORD': 'SecurePassword123!',\n        'HOST': 'localhost',\n        'PORT': '3306',\n        'OPTIONS': {\n            'ssl': {\n                'cert': '/etc/mysql/ssl/client-cert.pem',\n                'key': '/etc/mysql/ssl/client-key.pem',\n                'ca': '/etc/mysql/ssl/ca-cert.pem',\n            },\n            'charset': 'utf8mb4',\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n        },\n    }\n}\n```\n\n### WordPress Integration\n\n```php\n// wp-config.php\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wpuser');\ndefine('DB_PASSWORD', 'SecureWpPassword123!');\ndefine('DB_HOST', 'localhost');\ndefine('DB_CHARSET', 'utf8mb4');\ndefine('DB_COLLATE', 'utf8mb4_unicode_ci');\n\n// Enable SSL\ndefine('MYSQL_SSL_CA', '/etc/mysql/ssl/ca-cert.pem');\ndefine('MYSQL_CLIENT_FLAGS', MYSQLI_CLIENT_SSL);\n```\n\n### Node.js Integration\n\n```javascript\n// Using mysql2 with SSL\nconst mysql = require('mysql2/promise');\n\nconst connection = await mysql.createConnection({\n    host: 'localhost',\n    user: 'appuser',\n    password: 'SecurePassword123!',\n    database: 'myapp',\n    ssl: {\n        ca: fs.readFileSync('/etc/mysql/ssl/ca-cert.pem'),\n        cert: fs.readFileSync('/etc/mysql/ssl/client-cert.pem'),\n        key: fs.readFileSync('/etc/mysql/ssl/client-key.pem')\n    }\n});\n```\n\n## Additional Resources\n\n- [Official MariaDB Documentation](https://mariadb.org/documentation/)\n- [MariaDB Knowledge Base](https://mariadb.com/kb/en/)\n- [MariaDB Security Guide](https://mariadb.com/kb/en/securing-mariadb/)\n- [Performance Tuning Guide](https://mariadb.com/kb/en/optimization-and-tuning/)\n- [Galera Cluster Documentation](https://mariadb.com/kb/en/galera-cluster/)\n- [MariaDB Community Forum](https://mariadb.org/community/)\n- [MariaDB Planet Blog Aggregator](https://planet.mariadb.org/)\n- [MariaDB Foundation](https://mariadb.org/about/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">MariaDB is a free and open-source relational database management system (RDBMS) and a fork of MySQL. Originally developed by Michael \"Monty\" Widenius, the original developer of MySQL, MariaDB was created to remain free under the GNU GPL after Oracle's acquisition of MySQL. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade features including Galera clustering, advanced storage engines, and enhanced performance optimizations without licensing costs, with features like ACID compliance, replication, and horizontal scaling.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 5GB minimum (SSD recommended for performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for replication and clustering setups</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 2.6+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3306 (default MariaDB port)</li>\n<li class=\"mobile-list-item\">Port 4444 (Galera SST - State Snapshot Transfer)</li>\n<li class=\"mobile-list-item\">Port 4567 (Galera group communication)</li>\n<li class=\"mobile-list-item\">Port 4568 (Galera IST - Incremental State Transfer)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">libc6, libssl, zlib (usually included in distributions)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add MariaDB official repository\nsudo tee /etc/yum.repos.d/mariadb.repo &lt;&lt;EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.mariadb.org/yum/11.2/rhel/\\$releasever/\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.mariadb.org/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nenabled = 1\nEOF\n\n# Import MariaDB GPG key\nsudo rpm --import https://mirror.mariadb.org/yum/RPM-GPG-KEY-MariaDB\n\n# Install MariaDB server\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y software-properties-common dirmngr apt-transport-https\n\n# Add MariaDB signing key\ncurl -o /tmp/mariadb_release_signing_key.asc &#039;https://mariadb.org/mariadb_release_signing_key.asc&#039;\nsudo mv /tmp/mariadb_release_signing_key.asc /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc\n\n# Add MariaDB repository\nsudo add-apt-repository &quot;deb [arch=amd64] https://mirror.mariadb.org/repo/11.2/ubuntu $(lsb_release -cs) main&quot;\n\n# Update package index\nsudo apt update\n\n# Install MariaDB server\nsudo apt install -y mariadb-server mariadb-client mariadb-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo ufw allow mysql</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB from official repositories\nsudo pacman -S mariadb\n\n# Initialize database\nsudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configuration location: /etc/my.cnf</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB\napk add --no-cache mariadb mariadb-client mariadb-backup\n\n# Initialize database\nmysql_install_db --user=mysql --datadir=/var/lib/mysql\n\n# Create mysql user if not exists\nadduser -D -H -s /sbin/nologin mysql\n\n# Set permissions\nchown -R mysql:mysql /var/lib/mysql\n\n# Enable and start service\nrc-update add mariadb default\nrc-service mariadb start\n\n# Secure installation\nmysql_secure_installation</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y mariadb mariadb-client mariadb-tools\n\n# For latest version from official repository\nsudo zypper addrepo https://mirror.mariadb.org/repo/11.2/sles/15/x86_64 mariadb\nsudo zypper refresh\nsudo zypper install -y MariaDB-server MariaDB-client\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y mariadb mariadb-client\n\n# Initialize database if needed\nsudo mysql_install_db --user=mysql\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install mariadb\n\n# Start MariaDB service\nbrew services start mariadb\n\n# Or run manually\nmariadb-safe --datadir=/usr/local/var/mysql\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/my.cnf\n# Alternative: /opt/homebrew/etc/my.cnf (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install mariadb106-server mariadb106-client\n\n# Using ports\ncd /usr/ports/databases/mariadb106-server\nmake install clean\n\n# Enable MariaDB\necho &#039;mysql_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Initialize database\nservice mysql-server start\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/mysql/my.cnf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install mariadb\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mariadb\n\n# Method 3: Manual installation\n# Download MariaDB from https://mariadb.org/download/\n# Run mariadb-*.msi installer\n\n# Install as Windows service\n&quot;C:\\Program Files\\MariaDB 11.2\\bin\\mysqld&quot; --install MariaDB\nnet start MariaDB\n\n# Configuration location: C:\\Program Files\\MariaDB 11.2\\data\\my.ini</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create mysql user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/mysql -s /sbin/nologin -c &quot;MariaDB Server&quot; mysql</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/mysql/mariadb.conf.d/50-server.cnf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/my.cnf.d/mariadb-server.cnf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/mysql/my.cnf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Program Files\\MariaDB 11.2\\data\\my.ini</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/mysql/mariadb.conf.d/50-server.cnf\n[mysqld]\n# Basic settings\nbind-address = 127.0.0.1\nport = 3306\nsocket = /run/mysqld/mysqld.sock\ndatadir = /var/lib/mysql\n\n# Security settings\nsql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\nlocal_infile = 0\nskip_name_resolve = 1\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\n\n# Performance settings\nmax_connections = 200\nthread_cache_size = 50\ntable_open_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\n\n# Logging\nlog_error = /var/log/mysql/error.log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nexpire_logs_days = 7</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MariaDB is running\nsudo systemctl status mariadb\n\n# Test connection\nmariadb -u root -p -e &quot;SELECT VERSION();&quot;\n\n# Check user accounts\nmariadb -u root -p -e &quot;SELECT User, Host FROM mysql.user;&quot;\n\n# Test database operations\nmariadb -u root -p -e &quot;CREATE DATABASE test_db; DROP DATABASE test_db;&quot;\n\n# Check configuration\nmariadb -u root -p -e &quot;SHOW VARIABLES LIKE &#039;character_set%&#039;;&quot;\nmariadb -u root -p -e &quot;SHOW VARIABLES LIKE &#039;collation%&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Change the default root password immediately and remove anonymous users!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable MariaDB to start on boot\nsudo systemctl enable mariadb\n\n# Start MariaDB\nsudo systemctl start mariadb\n\n# Stop MariaDB\nsudo systemctl stop mariadb\n\n# Restart MariaDB\nsudo systemctl restart mariadb\n\n# Reload configuration\nsudo systemctl reload mariadb\n\n# Check status\nsudo systemctl status mariadb\n\n# View logs\nsudo journalctl -u mariadb -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable MariaDB to start on boot\nrc-update add mariadb default\n\n# Start MariaDB\nrc-service mariadb start\n\n# Stop MariaDB\nrc-service mariadb stop\n\n# Restart MariaDB\nrc-service mariadb restart\n\n# Check status\nrc-service mariadb status\n\n# View logs\ntail -f /var/log/mysql/error.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mysql_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start MariaDB\nservice mysql-server start\n\n# Stop MariaDB\nservice mysql-server stop\n\n# Restart MariaDB\nservice mysql-server restart\n\n# Check status\nservice mysql-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mariadb\nbrew services stop mariadb\nbrew services restart mariadb\n\n# Check status\nbrew services list | grep mariadb\n\n# Manual control\nmariadb-safe --datadir=/usr/local/var/mysql</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start MariaDB service\nnet start MariaDB\n\n# Stop MariaDB service\nnet stop MariaDB\n\n# Using PowerShell\nStart-Service MariaDB\nStop-Service MariaDB\nRestart-Service MariaDB\n\n# Check status\nGet-Service MariaDB\n\n# View logs\nGet-EventLog -LogName Application -Source MariaDB</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-configuration\" class=\"mobile-header\">High Availability Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Master-Slave Replication Configuration\n# Master server configuration\n[mysqld]\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = production_db\n\n# Slave server configuration\n[mysqld]\nserver-id = 2\nrelay-log = relay-bin\nread_only = 1</code></pre>\n      </div>\n    </div>\n<h3 id=\"galera-cluster-configuration\" class=\"mobile-header\">Galera Cluster Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Galera Cluster settings\n[mysqld]\n# Galera Provider Configuration\nwsrep_on = ON\nwsrep_provider = /usr/lib/galera/libgalera_smm.so\n\n# Galera Cluster Configuration\nwsrep_cluster_name = &quot;MariaDB_Cluster&quot;\nwsrep_cluster_address = &quot;gcomm://node1.example.com,node2.example.com,node3.example.com&quot;\n\n# Galera Synchronization Configuration\nwsrep_sst_method = rsync\nwsrep_sst_auth = wsrep_sst:wsrep_password\n\n# Galera Node Configuration\nwsrep_node_address = &quot;node1.example.com&quot;\nwsrep_node_name = &quot;mariadb-node-1&quot;\n\n# Required settings\nbinlog_format = ROW\ndefault_storage_engine = InnoDB\ninnodb_autoinc_lock_mode = 2</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Security hardening\n[mysqld]\n# SSL/TLS configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\ntls_version = TLSv1.2,TLSv1.3\n\n# Authentication\nplugin-load-add = server_audit=server_audit.so\nserver_audit_logging = ON\nserver_audit_events = &#039;CONNECT,QUERY,TABLE&#039;\n\n# Connection security\nmax_user_connections = 100\nmax_connect_errors = 10\n\n# Disable dangerous functions\nlocal_infile = 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/mariadb-proxy\nupstream mariadb_backend {\n    server 127.0.0.1:3306 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:3307 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 3306;\n    proxy_pass mariadb_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mariadb.log;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend mariadb_frontend\n    bind *:3306\n    mode tcp\n    option tcplog\n    default_backend mariadb_servers\n\nbackend mariadb_servers\n    mode tcp\n    balance roundrobin\n    option mysql-check user haproxy\n    server mariadb1 127.0.0.1:3306 check\n    server mariadb2 127.0.0.1:3307 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"proxysql-configuration\" class=\"mobile-header\">ProxySQL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- ProxySQL configuration for MariaDB load balancing\nINSERT INTO mysql_servers(hostgroup_id, hostname, port, weight) VALUES\n(0, &#039;127.0.0.1&#039;, 3306, 900),\n(0, &#039;127.0.0.1&#039;, 3307, 100);\n\nINSERT INTO mysql_query_rules(rule_id, active, match_pattern, destination_hostgroup, apply) VALUES\n(1, 1, &#039;^SELECT.*&#039;, 0, 1),\n(2, 1, &#039;^INSERT.*&#039;, 0, 1);\n\nLOAD MYSQL SERVERS TO RUNTIME;\nLOAD MYSQL QUERY RULES TO RUNTIME;\nSAVE MYSQL SERVERS TO DISK;\nSAVE MYSQL QUERY RULES TO DISK;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates for MariaDB\nsudo mkdir -p /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa 2048 &gt; /etc/mysql/ssl/ca-key.pem\nsudo openssl req -new -x509 -nodes -days 3650 -key /etc/mysql/ssl/ca-key.pem -out /etc/mysql/ssl/ca-cert.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MariaDB-CA&quot;\n\n# Create server certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mariadb.example.com&quot;\nsudo openssl rsa -in /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/server-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/server-cert.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mariadb-client&quot;\nsudo openssl rsa -in /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/client-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/client-cert.pem\n\n# Set permissions\nsudo chown -R mysql:mysql /etc/mysql/ssl\nsudo chmod 600 /etc/mysql/ssl/*-key.pem\nsudo chmod 644 /etc/mysql/ssl/*-cert.pem /etc/mysql/ssl/ca-cert.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-security-and-privileges\" class=\"mobile-header\">User Security and Privileges</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create secure users with SSL requirements\nCREATE USER &#039;appuser&#039;@&#039;%&#039; IDENTIFIED BY &#039;SecurePassword123!&#039; REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;%&#039;;\n\n-- Create backup user\nCREATE USER &#039;backup&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;BackupPassword123!&#039; REQUIRE SSL;\nGRANT SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO &#039;backup&#039;@&#039;localhost&#039;;\n\n-- Create monitoring user\nCREATE USER &#039;monitor&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;MonitorPassword123!&#039;;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;monitor&#039;@&#039;localhost&#039;;\n\n-- Set password policies\nSET GLOBAL strict_password_validation = ON;\n\n-- Remove dangerous defaults\nDELETE FROM mysql.user WHERE User = &#039;&#039;;\nDELETE FROM mysql.user WHERE User = &#039;root&#039; AND Host NOT IN (&#039;localhost&#039;, &#039;127.0.0.1&#039;, &#039;::1&#039;);\nDROP DATABASE IF EXISTS test;\nFLUSH PRIVILEGES;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 3306\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mariadb\nsudo firewall-cmd --permanent --zone=mariadb --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mariadb --add-port=3306/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 3306 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 3306\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;MariaDB&quot; -Direction Inbound -Protocol TCP -LocalPort 3306 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"database-creation-and-management\" class=\"mobile-header\">Database Creation and Management</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create user with specific privileges\nCREATE USER &#039;appuser&#039;@&#039;%&#039; IDENTIFIED BY &#039;SecurePassword123!&#039; REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;%&#039;;\n\n-- Create tables with proper character set\nUSE myapp;\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_username (username),\n    INDEX idx_email (email)\n) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- Example of partitioned table for large datasets\nCREATE TABLE logs (\n    id BIGINT AUTO_INCREMENT,\n    log_date DATE NOT NULL,\n    message TEXT,\n    PRIMARY KEY (id, log_date)\n) ENGINE=InnoDB\nPARTITION BY RANGE (YEAR(log_date)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Analyze and optimize tables\nANALYZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.users;\n\n-- Check table status\nSHOW TABLE STATUS FROM myapp;\n\n-- Index optimization\nSHOW INDEX FROM myapp.users;\nALTER TABLE myapp.users ADD INDEX idx_created (created_at);\n\n-- View performance schema statistics\nSELECT * FROM information_schema.table_statistics \nWHERE table_schema = &#039;myapp&#039; ORDER BY total_latency DESC;</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MariaDB-specific kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# MariaDB optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\nmysql soft nofile 65535\nmysql hard nofile 65535\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"mariadb-performance-tuning\" class=\"mobile-header\">MariaDB Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># High-performance MariaDB configuration\n[mysqld]\n# Memory settings\ninnodb_buffer_pool_size = 8G  # 70-80% of available RAM\ninnodb_buffer_pool_instances = 8\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\n\n# Thread settings\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# Connection settings\nmax_connections = 500\nmax_user_connections = 450\ninteractive_timeout = 3600\nwait_timeout = 600\n\n# Query cache\nquery_cache_type = 1\nquery_cache_size = 256M\n\n# Temporary tables\ntmp_table_size = 128M\nmax_heap_table_size = 128M\n\n# MyISAM settings (if used)\nkey_buffer_size = 256M\nmyisam_sort_buffer_size = 128M\n\n# InnoDB optimization\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\ninnodb_io_capacity = 2000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8</code></pre>\n      </div>\n    </div>\n<h3 id=\"query-optimization\" class=\"mobile-header\">Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Enable performance schema\nSET GLOBAL performance_schema = ON;\n\n-- Query optimization analysis\nSELECT * FROM performance_schema.events_statements_summary_by_digest \nORDER BY sum_timer_wait DESC LIMIT 10;\n\n-- Index usage analysis\nSELECT * FROM performance_schema.table_io_waits_summary_by_index_usage \nWHERE object_schema = &#039;myapp&#039; ORDER BY sum_timer_wait DESC;\n\n-- Slow query analysis\nSELECT * FROM mysql.slow_log ORDER BY start_time DESC LIMIT 10;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Performance monitoring queries\nSHOW GLOBAL STATUS LIKE &#039;Threads_connected&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Queries&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Slow_queries&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_read_requests&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_reads&#039;;\n\n-- Connection monitoring\nSELECT \n    USER,\n    HOST,\n    DB,\n    COMMAND,\n    TIME,\n    STATE,\n    INFO\nFROM INFORMATION_SCHEMA.PROCESSLIST\nWHERE USER != &#039;system user&#039;\nORDER BY TIME DESC;\n\n-- Database size monitoring\nSELECT \n    table_schema AS &#039;Database&#039;,\n    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS &#039;Size (MB)&#039;\nFROM information_schema.tables \nGROUP BY table_schema\nORDER BY SUM(data_length + index_length) DESC;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB Exporter for Prometheus\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-*.tar.gz\nsudo cp mysqld_exporter /usr/local/bin/\n\n# Create monitoring user\nmariadb -u root -p &lt;&lt;EOF\nCREATE USER &#039;exporter&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;ExporterPassword123!&#039;;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;exporter&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysqld_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=MariaDB Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mysql\nEnvironment=DATA_SOURCE_NAME=&quot;exporter:ExporterPassword123!@(localhost:3306)/&quot;\nExecStart=/usr/local/bin/mysqld_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mariadb-health-check.sh\n\n# Check MariaDB service\nif ! systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: MariaDB service is not running&quot;\n    exit 2\nfi\n\n# Check connectivity\nif ! mariadb -e &quot;SELECT 1;&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Cannot connect to MariaDB&quot;\n    exit 2\nfi\n\n# Check replication (if configured)\nSLAVE_STATUS=$(mariadb -e &quot;SHOW SLAVE STATUS\\G&quot; 2&gt;/dev/null | grep &quot;Slave_IO_Running:&quot;)\nif [ -n &quot;$SLAVE_STATUS&quot; ]; then\n    IO_RUNNING=$(echo &quot;$SLAVE_STATUS&quot; | awk &#039;{print $2}&#039;)\n    if [ &quot;$IO_RUNNING&quot; != &quot;Yes&quot; ]; then\n        echo &quot;WARNING: Replication IO thread not running&quot;\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mariadb -e &quot;SHOW STATUS LIKE &#039;Threads_connected&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\nMAX_CONNECTIONS=$(mariadb -e &quot;SHOW VARIABLES LIKE &#039;max_connections&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\nCONNECTION_USAGE=$((CONNECTIONS * 100 / MAX_CONNECTIONS))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo &quot;WARNING: High connection usage: ${CONNECTION_USAGE}%&quot;\n    exit 1\nfi\n\necho &quot;OK: MariaDB is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mariadb-backup.sh\n\nBACKUP_DIR=&quot;/backup/mariadb/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Full database backup\nmariadb-dump --all-databases \\\n  --single-transaction \\\n  --routines \\\n  --triggers \\\n  --events \\\n  --master-data=2 \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip &gt; &quot;$BACKUP_DIR/full-backup.sql.gz&quot;\n\n# Individual database backup\nmariadb-dump --single-transaction \\\n  --routines \\\n  --triggers \\\n  myapp \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip &gt; &quot;$BACKUP_DIR/myapp-backup.sql.gz&quot;\n\n# Binary log backup\ncp /var/lib/mysql/mysql-bin.* &quot;$BACKUP_DIR/&quot; 2&gt;/dev/null || true\n\n# Configuration backup\ntar czf &quot;$BACKUP_DIR/mariadb-config.tar.gz&quot; /etc/mysql/\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mariadb-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.sql.gz&gt;&quot;\n    exit 1\nfi\n\n# Stop applications using the database\necho &quot;Stopping applications...&quot;\n\n# Restore database\necho &quot;Restoring database from $BACKUP_FILE...&quot;\nzcat &quot;$BACKUP_FILE&quot; | mariadb -u root -p\n\n# Verify restore\nmariadb -u root -p -e &quot;SHOW DATABASES;&quot;\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"point-in-time-recovery\" class=\"mobile-header\">Point-in-Time Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mariadb-pitr.sh\n\nBACKUP_FILE=&quot;$1&quot;\nRECOVERY_TIME=&quot;$2&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ] || [ -z &quot;$RECOVERY_TIME&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.sql.gz&gt; &lt;recovery-time&gt;&quot;\n    echo &quot;Example: $0 backup.sql.gz &#039;2024-01-15 14:30:00&#039;&quot;\n    exit 1\nfi\n\n# Restore base backup\nzcat &quot;$BACKUP_FILE&quot; | mariadb -u root -p\n\n# Apply binary logs up to recovery point\nmysqlbinlog --stop-datetime=&quot;$RECOVERY_TIME&quot; /var/lib/mysql/mysql-bin.* | mariadb -u root -p\n\necho &quot;Point-in-time recovery completed to $RECOVERY_TIME&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>MariaDB won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mariadb -f\nsudo tail -f /var/log/mysql/error.log\n\n# Check disk space\ndf -h /var/lib/mysql\n\n# Check permissions\nls -la /var/lib/mysql\n\n# Test configuration\nmariadb --help --verbose</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MariaDB is listening\nsudo ss -tlnp | grep :3306\n\n# Test local connection\nmariadb -u root -p -e &quot;SELECT 1;&quot;\n\n# Check user privileges\nmariadb -u root -p -e &quot;SELECT User, Host FROM mysql.user;&quot;\n\n# Check bind address\nmariadb -u root -p -e &quot;SHOW VARIABLES LIKE &#039;bind_address&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check slow queries\nmariadb -u root -p -e &quot;SHOW GLOBAL STATUS LIKE &#039;Slow_queries&#039;;&quot;\n\n# Analyze table statistics\nmariadb -u root -p -e &quot;SHOW TABLE STATUS FROM myapp;&quot;\n\n# Check buffer pool efficiency\nmariadb -u root -p -e &quot;SHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_read%&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start MariaDB with debug options\nsudo mariadb --debug --user=mysql --console\n\n# Enable general query log\nmariadb -u root -p -e &quot;SET GLOBAL general_log = 1;&quot;\nmariadb -u root -p -e &quot;SET GLOBAL general_log_file = &#039;/var/log/mysql/general.log&#039;;&quot;\n\n# Analyze queries\nsudo tail -f /var/log/mysql/general.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update MariaDB-server\nsudo yum update MariaDB-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mariadb-server\n\n# Arch Linux\nsudo pacman -Syu mariadb\n\n# Alpine Linux\napk update\napk upgrade mariadb\n\n# openSUSE\nsudo zypper update mariadb\n\n# FreeBSD\npkg update\npkg upgrade mariadb106-server\n\n# Always backup before updates\nmariadb -u backup -p &lt; backup.sql\n\n# Run mysql_upgrade after major updates\nsudo mysql_upgrade -u root -p\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# mariadb-maintenance.sh\n\n# Analyze tables\nmariadb -u root -p &lt;&lt;EOF\nANALYZE TABLE myapp.users;\nANALYZE TABLE myapp.logs;\nEOF\n\n# Optimize tables\nmariadb -u root -p &lt;&lt;EOF\nOPTIMIZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.logs;\nEOF\n\n# Purge old binary logs\nmariadb -u root -p -e &quot;PURGE BINARY LOGS BEFORE DATE_SUB(NOW(), INTERVAL 7 DAY);&quot;\n\n# Check for corrupted tables\nmysqlcheck --all-databases --check -u root -p\n\necho &quot;MariaDB maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/mariadb-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mariadb &lt;&lt;EOF\n/var/log/mysql/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 mysql adm\n    sharedscripts\n    postrotate\n        /usr/bin/mysqladmin flush-logs\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"django-integration\" class=\"mobile-header\">Django Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Django settings.py\nDATABASES = {\n    &#039;default&#039;: {\n        &#039;ENGINE&#039;: &#039;django.db.backends.mysql&#039;,\n        &#039;NAME&#039;: &#039;myapp&#039;,\n        &#039;USER&#039;: &#039;appuser&#039;,\n        &#039;PASSWORD&#039;: &#039;SecurePassword123!&#039;,\n        &#039;HOST&#039;: &#039;localhost&#039;,\n        &#039;PORT&#039;: &#039;3306&#039;,\n        &#039;OPTIONS&#039;: {\n            &#039;ssl&#039;: {\n                &#039;cert&#039;: &#039;/etc/mysql/ssl/client-cert.pem&#039;,\n                &#039;key&#039;: &#039;/etc/mysql/ssl/client-key.pem&#039;,\n                &#039;ca&#039;: &#039;/etc/mysql/ssl/ca-cert.pem&#039;,\n            },\n            &#039;charset&#039;: &#039;utf8mb4&#039;,\n            &#039;init_command&#039;: &quot;SET sql_mode=&#039;STRICT_TRANS_TABLES&#039;&quot;,\n        },\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-integration\" class=\"mobile-header\">WordPress Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"php\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">php</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-php\">// wp-config.php\ndefine(&#039;DB_NAME&#039;, &#039;wordpress&#039;);\ndefine(&#039;DB_USER&#039;, &#039;wpuser&#039;);\ndefine(&#039;DB_PASSWORD&#039;, &#039;SecureWpPassword123!&#039;);\ndefine(&#039;DB_HOST&#039;, &#039;localhost&#039;);\ndefine(&#039;DB_CHARSET&#039;, &#039;utf8mb4&#039;);\ndefine(&#039;DB_COLLATE&#039;, &#039;utf8mb4_unicode_ci&#039;);\n\n// Enable SSL\ndefine(&#039;MYSQL_SSL_CA&#039;, &#039;/etc/mysql/ssl/ca-cert.pem&#039;);\ndefine(&#039;MYSQL_CLIENT_FLAGS&#039;, MYSQLI_CLIENT_SSL);</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using mysql2 with SSL\nconst mysql = require(&#039;mysql2/promise&#039;);\n\nconst connection = await mysql.createConnection({\n    host: &#039;localhost&#039;,\n    user: &#039;appuser&#039;,\n    password: &#039;SecurePassword123!&#039;,\n    database: &#039;myapp&#039;,\n    ssl: {\n        ca: fs.readFileSync(&#039;/etc/mysql/ssl/ca-cert.pem&#039;),\n        cert: fs.readFileSync(&#039;/etc/mysql/ssl/client-cert.pem&#039;),\n        key: fs.readFileSync(&#039;/etc/mysql/ssl/client-key.pem&#039;)\n    }\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.org/documentation/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official MariaDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/kb/en/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Knowledge Base</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/kb/en/securing-mariadb/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/kb/en/optimization-and-tuning/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/kb/en/galera-cluster/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Galera Cluster Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.org/community/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://planet.mariadb.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Planet Blog Aggregator</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.org/about/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Foundation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"18 min","wordCount":3464,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"High Availability Configuration","id":"high-availability-configuration"},{"level":3,"text":"Galera Cluster Configuration","id":"galera-cluster-configuration"},{"level":3,"text":"Advanced Security Settings","id":"advanced-security-settings"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":3,"text":"ProxySQL Configuration","id":"proxysql-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"SSL/TLS Setup","id":"ssltls-setup"},{"level":3,"text":"User Security and Privileges","id":"user-security-and-privileges"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"Database Creation and Management","id":"database-creation-and-management"},{"level":3,"text":"Database Optimization","id":"database-optimization"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"MariaDB Performance Tuning","id":"mariadb-performance-tuning"},{"level":3,"text":"Query Optimization","id":"query-optimization"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Built-in Monitoring","id":"built-in-monitoring"},{"level":3,"text":"External Monitoring Setup","id":"external-monitoring-setup"},{"level":3,"text":"Health Check Scripts","id":"health-check-scripts"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Procedures","id":"backup-procedures"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":3,"text":"Point-in-Time Recovery","id":"point-in-time-recovery"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Maintenance Tasks","id":"maintenance-tasks"},{"level":3,"text":"Health Monitoring","id":"health-monitoring"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Django Integration","id":"django-integration"},{"level":3,"text":"WordPress Integration","id":"wordpress-integration"},{"level":3,"text":"Node.js Integration","id":"nodejs-integration"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-11T06:14:39.800Z","metadataVersion":"2.0"}]},"__N_SSG":true}