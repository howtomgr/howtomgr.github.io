{"pageProps":{"guide":{"name":"nodejs","displayName":"Node.js Installation Guide","slug":"nodejs","description":"JavaScript runtime built on Chrome's V8 JavaScript engine. Essential platform for modern web applications, APIs, and microservices with enterprise-grade performance and security features.","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","arch"],"defaultPorts":[10,20,80,443,3000,3001,3002,5432,6379,27017],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/nodejs","documentationUrl":"https://howtomgr.github.io/miscellaneous/nodejs","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nodejs","updatedAt":"2025-09-16T17:35:43Z","createdAt":"2023-08-28T03:49:17Z","readmeRaw":"# Node.js Installation Guide\n\nJavaScript runtime built on Chrome's V8 JavaScript engine. Essential platform for modern web applications, APIs, and microservices with enterprise-grade performance and security features.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 2GB RAM minimum, 4GB+ recommended for production\n- curl or wget for package downloads\n- Git for source code management\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### Using NVM (Recommended for Development)\n```bash\n# Download and install NVM (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n\n# Reload shell profile\nsource ~/.bashrc\n\n# Install latest LTS version (recommended for production)\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install 20.10.0  # Latest LTS as of 2024\nnvm use 20.10.0\n\n# Set default version\nnvm alias default 20.10.0\n\n# Verify installation\nnode --version\nnpm --version\n\n# List available versions\nnvm list-remote --lts\nnvm list\n```\n\n### Ubuntu/Debian (Package Manager)\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Method 1: Install from Ubuntu repositories (older version)\nsudo apt install -y nodejs npm\n\n# Method 2: Install from NodeSource repository (latest LTS)\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Install build tools for native modules\nsudo apt install -y build-essential python3-dev\n\n# Verify installation\nnode --version\nnpm --version\n\n# Update npm to latest version\nsudo npm install -g npm@latest\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Enable EPEL repository\nsudo yum install -y epel-release\n\n# Method 1: Install from EPEL (may be older)\nsudo yum install -y nodejs npm\n\n# Method 2: Install from NodeSource (recommended)\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo yum install -y nodejs\n\n# Install development tools\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Fedora\n```bash\n# Install Node.js from official repositories\nsudo dnf install -y nodejs npm\n\n# Or install from NodeSource for latest LTS\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo dnf install -y nodejs\n\n# Install development tools\nsudo dnf groupinstall -y \"Development Tools\"\nsudo dnf install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Arch Linux\n```bash\n# Install Node.js and npm\nsudo pacman -Syu nodejs npm\n\n# Install base-devel for building native modules\nsudo pacman -S base-devel python\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Docker Installation\n```bash\n# Create Node.js application structure\nmkdir -p ~/nodejs-app/{src,config,logs,node_modules}\ncd ~/nodejs-app\n\n# Create production Dockerfile\ncat > Dockerfile <<EOF\n# Multi-stage build for production\nFROM node:20-alpine AS builder\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies (including dev dependencies)\nRUN npm ci --only=production\n\n# Production stage\nFROM node:20-alpine AS production\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nodejs -u 1001\n\n# Set working directory\nWORKDIR /usr/src/app\n\n# Copy node_modules from builder stage\nCOPY --from=builder /usr/src/app/node_modules ./node_modules\n\n# Copy application code\nCOPY --chown=nodejs:nodejs . .\n\n# Remove unnecessary files\nRUN rm -f .dockerignore Dockerfile* README.md\n\n# Security: Run as non-root user\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\n# Start application\nCMD [\"node\", \"server.js\"]\nEOF\n\n# Create .dockerignore\ncat > .dockerignore <<EOF\nnode_modules\nnpm-debug.log\nDockerfile*\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.npm\n.coverage\n.jest\n.cache\nEOF\n\n# Create production docker-compose.yml\ncat > docker-compose.prod.yml <<EOF\nversion: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      target: production\n    restart: unless-stopped\n    ports:\n      - \"127.0.0.1:3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - PORT=3000\n    volumes:\n      - ./logs:/usr/src/app/logs\n    networks:\n      - app-network\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n    healthcheck:\n      test: [\"CMD\", \"node\", \"healthcheck.js\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n\n  nginx:\n    image: nginx:alpine\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - app\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\nEOF\n\ndocker-compose -f docker-compose.prod.yml up -d\n```\n\n## Production Configuration\n\n### PM2 Process Manager (Production Standard)\n```bash\n# Install PM2 globally\nsudo npm install -g pm2\n\n# Create PM2 ecosystem configuration\ncat > ecosystem.config.js <<EOF\nmodule.exports = {\n  apps: [{\n    name: 'node-app',\n    script: './server.js',\n    instances: 'max',  // Use all CPU cores\n    exec_mode: 'cluster',\n    \n    // Performance settings\n    max_memory_restart: '1G',\n    node_args: '--max-old-space-size=1024',\n    \n    // Environment variables\n    env: {\n      NODE_ENV: 'development',\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    \n    // Logging\n    log_file: './logs/app.log',\n    out_file: './logs/out.log',\n    error_file: './logs/error.log',\n    log_date_format: 'YYYY-MM-DD HH:mm:ss Z',\n    merge_logs: true,\n    \n    // Monitoring\n    monitoring: true,\n    pmx: true,\n    \n    // Auto-restart settings\n    autorestart: true,\n    watch: false,  // Disable in production\n    max_restarts: 10,\n    min_uptime: '10s',\n    \n    // Instance settings\n    instance_var: 'INSTANCE_ID',\n    \n    // Source map support\n    source_map_support: true,\n    \n    // Graceful shutdown\n    kill_timeout: 5000,\n    listen_timeout: 8000,\n    \n    // Health checking\n    health_check_grace_period: 3000\n  }],\n  \n  // Deployment configuration\n  deploy: {\n    production: {\n      user: 'nodejs',\n      host: ['app1.example.com', 'app2.example.com'],\n      ref: 'origin/main',\n      repo: 'git@github.com:username/repository.git',\n      path: '/var/www/production',\n      'post-deploy': 'npm install && pm2 reload ecosystem.config.js --env production',\n      'pre-setup': 'apt update -y; apt install git -y'\n    },\n    staging: {\n      user: 'nodejs',\n      host: 'staging.example.com',\n      ref: 'origin/develop',\n      repo: 'git@github.com:username/repository.git',\n      path: '/var/www/staging',\n      'post-deploy': 'npm install && pm2 reload ecosystem.config.js --env staging'\n    }\n  }\n};\nEOF\n\n# Start application with PM2\npm2 start ecosystem.config.js --env production\n\n# Save PM2 configuration\npm2 save\n\n# Generate startup script\npm2 startup\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $USER --hp $HOME\n\n# Monitor application\npm2 status\npm2 logs\npm2 monit\n```\n\n### NGINX Reverse Proxy Configuration\n```bash\n# Create NGINX configuration for Node.js applications\nsudo tee /etc/nginx/sites-available/nodejs-app > /dev/null <<EOF\n# Node.js Application NGINX Configuration\n\nupstream nodejs_backend {\n    least_conn;\n    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;\n    # Add more servers for load balancing:\n    # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;\n    # server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;\n    keepalive 64;\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name app.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=api_limit:10m rate=10r/s;\n    limit_req zone=api_limit burst=20 nodelay;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    location / {\n        proxy_pass http://nodejs_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n        \n        # Buffer settings\n        proxy_buffer_size 4k;\n        proxy_buffers 4 4k;\n    }\n\n    # Static assets caching\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\\$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        access_log off;\n    }\n\n    # API rate limiting (stricter)\n    location /api/ {\n        limit_req zone=api_limit burst=10 nodelay;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n### SystemD Service (Alternative to PM2)\n```bash\n# Create systemd service for Node.js application\nsudo tee /etc/systemd/system/nodejs-app.service > /dev/null <<EOF\n[Unit]\nDescription=Node.js Application\nDocumentation=https://nodejs.org/\nAfter=network.target\n\n[Service]\nType=simple\nUser=nodejs\nGroup=nodejs\nWorkingDirectory=/var/www/nodejs-app\nExecStart=/usr/bin/node server.js\nExecReload=/bin/kill -SIGUSR2 \\$MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=nodejs-app\n\n# Environment variables\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/www/nodejs-app/logs /var/www/nodejs-app/uploads\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=2G\nCPUQuota=200%\nTasksMax=4096\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create nodejs user\nsudo useradd --system --shell /bin/false --home /var/www/nodejs-app nodejs\n\n# Set up application directory\nsudo mkdir -p /var/www/nodejs-app/{logs,uploads}\nsudo chown -R nodejs:nodejs /var/www/nodejs-app\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nodejs-app\n```\n\n## Security Hardening\n\n### Application Security Best Practices\n```bash\n# Create secure application template\nmkdir -p ~/secure-nodejs-app\ncd ~/secure-nodejs-app\n\n# Create package.json with security-focused dependencies\ncat > package.json <<EOF\n{\n  \"name\": \"secure-nodejs-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Secure Node.js application template\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\",\n    \"test\": \"jest\",\n    \"security:audit\": \"npm audit\",\n    \"security:check\": \"nsp check\",\n    \"lint\": \"eslint .\",\n    \"format\": \"prettier --write .\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"helmet\": \"^7.1.0\",\n    \"cors\": \"^2.8.5\",\n    \"express-rate-limit\": \"^7.1.5\",\n    \"express-validator\": \"^7.0.1\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"mongoose\": \"^8.0.3\",\n    \"dotenv\": \"^16.3.1\",\n    \"compression\": \"^1.7.4\",\n    \"morgan\": \"^1.10.0\",\n    \"winston\": \"^3.11.0\",\n    \"hpp\": \"^0.2.3\",\n    \"express-mongo-sanitize\": \"^2.2.0\",\n    \"xss\": \"^1.0.14\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\",\n    \"jest\": \"^29.7.0\",\n    \"eslint\": \"^8.55.0\",\n    \"prettier\": \"^3.1.0\",\n    \"nsp\": \"^3.2.1\"\n  },\n  \"engines\": {\n    \"node\": \">=20.0.0\",\n    \"npm\": \">=9.0.0\"\n  }\n}\nEOF\n\n# Create secure server template\ncat > server.js <<'EOF'\n'use strict';\n\nconst express = require('express');\nconst helmet = require('helmet');\nconst cors = require('cors');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss');\nconst compression = require('compression');\nconst morgan = require('morgan');\nconst winston = require('winston');\nconst hpp = require('hpp');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['https://example.com'],\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.',\n  standardHeaders: true,\n  legacyHeaders: false\n});\napp.use(limiter);\n\n// API rate limiting (stricter)\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 50,\n  message: 'Too many API requests from this IP'\n});\napp.use('/api/', apiLimiter);\n\n// Body parsing with size limits\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Security sanitization\napp.use(mongoSanitize());\napp.use(hpp()); // Prevent HTTP Parameter Pollution\n\n// Compression\napp.use(compression());\n\n// Logging\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/combined.log' })\n  ]\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\n// Request logging\napp.use(morgan('combined', {\n  stream: { write: message => logger.info(message.trim()) }\n}));\n\n// Input validation middleware\nconst validateInput = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    version: process.version\n  });\n});\n\n// API routes with validation\napp.post('/api/users', [\n  body('email').isEmail().normalizeEmail(),\n  body('name').trim().escape().isLength({ min: 2, max: 50 }),\n  body('password').isLength({ min: 12 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])/),\n  validateInput\n], (req, res) => {\n  try {\n    // Sanitize input\n    const sanitizedBody = {\n      email: xss(req.body.email),\n      name: xss(req.body.name),\n      password: req.body.password // Don't sanitize password, just validate\n    };\n    \n    // Process request\n    res.json({ success: true, message: 'User created successfully' });\n  } catch (error) {\n    logger.error('Error creating user:', error);\n    res.status(500).json({ success: false, message: 'Internal server error' });\n  }\n});\n\n// Error handling middleware\napp.use((error, req, res, next) => {\n  logger.error('Unhandled error:', error);\n  \n  res.status(error.status || 500).json({\n    success: false,\n    message: process.env.NODE_ENV === 'production' \n      ? 'Something went wrong!' \n      : error.message\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    success: false,\n    message: 'Route not found'\n  });\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  logger.info('SIGTERM signal received: closing HTTP server');\n  server.close(() => {\n    logger.info('HTTP server closed');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGINT', () => {\n  logger.info('SIGINT signal received: closing HTTP server');\n  server.close(() => {\n    logger.info('HTTP server closed');\n    process.exit(0);\n  });\n});\n\n// Unhandled promise rejection handling\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  process.exit(1);\n});\n\n// Uncaught exception handling\nprocess.on('uncaughtException', (error) => {\n  logger.error('Uncaught Exception thrown:', error);\n  process.exit(1);\n});\n\nconst server = app.listen(PORT, '127.0.0.1', () => {\n  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\n});\n\nmodule.exports = app;\nEOF\n\n# Create healthcheck script for Docker\ncat > healthcheck.js <<EOF\nconst http = require('http');\n\nconst options = {\n  hostname: 'localhost',\n  port: process.env.PORT || 3000,\n  path: '/health',\n  method: 'GET',\n  timeout: 2000\n};\n\nconst req = http.request(options, (res) => {\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\n\nreq.on('error', () => {\n  process.exit(1);\n});\n\nreq.end();\nEOF\n\n# Install dependencies\nnpm install\n```\n\n### Environment Configuration\n```bash\n# Create secure environment configuration\ncat > .env.example <<EOF\n# Node.js Application Environment Configuration\n\n# Application settings\nNODE_ENV=production\nPORT=3000\nHOST=127.0.0.1\n\n# Database connection\nDATABASE_URL=mongodb://username:password@localhost:27017/myapp?authSource=admin\n# Or PostgreSQL: postgresql://username:password@localhost:5432/myapp\n\n# Security keys (generate with: openssl rand -base64 32)\nJWT_SECRET=your_jwt_secret_here_32_characters_minimum\nSESSION_SECRET=your_session_secret_here_32_characters_minimum\nENCRYPTION_KEY=your_encryption_key_here_32_characters\n\n# CORS settings\nALLOWED_ORIGINS=https://example.com,https://app.example.com\n\n# Email configuration (for notifications)\nSMTP_HOST=smtp.example.com\nSMTP_PORT=587\nSMTP_USER=app@example.com\nSMTP_PASS=smtp_password\n\n# Rate limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX=100\n\n# File upload settings\nMAX_FILE_SIZE=10485760\nUPLOAD_PATH=/var/www/nodejs-app/uploads\n\n# Monitoring\nENABLE_MONITORING=true\nLOG_LEVEL=info\n\n# Security settings\nBCRYPT_ROUNDS=12\nJWT_EXPIRY=24h\nSESSION_TIMEOUT=3600000\n\n# External APIs\nEXTERNAL_API_KEY=your_api_key_here\nEXTERNAL_API_URL=https://api.external-service.com\n\n# Redis configuration (for sessions/caching)\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=redis_password\n\n# Health check settings\nHEALTH_CHECK_INTERVAL=30000\nEOF\n\n# Create production environment file\ncp .env.example .env\necho \".env\" >> .gitignore\n\n# Set secure permissions\nchmod 600 .env\n```\n\n## Performance Optimization\n\n### Node.js Performance Tuning\n```bash\n# Create performance optimization script\nsudo tee /usr/local/bin/nodejs-optimize.sh > /dev/null <<'EOF'\n#!/bin/bash\n\necho \"Optimizing Node.js application performance...\"\n\n# System-level optimizations\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<LIMITS\nnodejs soft nofile 65535\nnodejs hard nofile 65535\nnodejs soft nproc 65535\nnodejs hard nproc 65535\nLIMITS\n\n# Kernel optimizations for Node.js\nsudo tee -a /etc/sysctl.conf > /dev/null <<SYSCTL\n# Node.js optimizations\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\nvm.swappiness = 1\nSYSCTL\n\nsudo sysctl -p\n\n# PM2 optimization for clustering\nif command -v pm2 >/dev/null 2>&1; then\n    # Update PM2 configuration for performance\n    pm2 delete all 2>/dev/null || true\n    \n    cat > /tmp/ecosystem-optimized.config.js <<PM2CONFIG\nmodule.exports = {\n  apps: [{\n    name: 'nodejs-app-optimized',\n    script: './server.js',\n    instances: 'max',\n    exec_mode: 'cluster',\n    \n    // V8 optimizations\n    node_args: [\n      '--max-old-space-size=2048',\n      '--optimize-for-size',\n      '--gc-interval=100',\n      '--expose-gc'\n    ],\n    \n    // Performance settings\n    max_memory_restart: '2G',\n    min_uptime: '10s',\n    max_restarts: 5,\n    \n    // Environment\n    env_production: {\n      NODE_ENV: 'production',\n      UV_THREADPOOL_SIZE: 16\n    }\n  }]\n};\nPM2CONFIG\n    \n    pm2 start /tmp/ecosystem-optimized.config.js --env production\n    pm2 save\nfi\n\necho \"Node.js optimization completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-optimize.sh\n```\n\n### Monitoring and Logging\n```bash\n# Create Node.js monitoring script\nsudo tee /usr/local/bin/nodejs-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/nodejs-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# Check if PM2 is managing processes\nif command -v pm2 >/dev/null 2>&1; then\n    PM2_STATUS=$(pm2 jlist | jq -r '.[].pm2_env.status' 2>/dev/null)\n    if echo \"$PM2_STATUS\" | grep -q \"online\"; then\n        log_message \"✓ PM2 processes are running\"\n        \n        # Check memory usage\n        PM2_MEMORY=$(pm2 jlist | jq -r '.[].monit.memory' 2>/dev/null | awk '{sum += $1} END {print sum/1024/1024}')\n        log_message \"ℹ PM2 total memory usage: ${PM2_MEMORY}MB\"\n        \n        # Check CPU usage\n        PM2_CPU=$(pm2 jlist | jq -r '.[].monit.cpu' 2>/dev/null | awk '{sum += $1} END {print sum}')\n        log_message \"ℹ PM2 total CPU usage: ${PM2_CPU}%\"\n    else\n        log_message \"⚠ PM2 processes not online\"\n    fi\nfi\n\n# Check systemd service (if not using PM2)\nif systemctl is-active nodejs-app >/dev/null 2>&1; then\n    log_message \"✓ Node.js systemd service is running\"\nelse\n    log_message \"ℹ Node.js systemd service not active (may be using PM2)\"\nfi\n\n# Check application health endpoint\nif curl -f http://localhost:3000/health >/dev/null 2>&1; then\n    log_message \"✓ Application health endpoint responding\"\n    \n    # Get detailed health info\n    HEALTH_DATA=$(curl -s http://localhost:3000/health)\n    UPTIME=$(echo \"$HEALTH_DATA\" | jq -r '.uptime' 2>/dev/null)\n    MEMORY_USED=$(echo \"$HEALTH_DATA\" | jq -r '.memory.rss' 2>/dev/null)\n    \n    if [ -n \"$UPTIME\" ]; then\n        log_message \"ℹ Application uptime: ${UPTIME}s\"\n    fi\n    if [ -n \"$MEMORY_USED\" ]; then\n        MEMORY_MB=$((MEMORY_USED / 1024 / 1024))\n        log_message \"ℹ Application memory: ${MEMORY_MB}MB\"\n    fi\nelse\n    log_message \"✗ Application health endpoint not responding\"\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node --version 2>/dev/null)\nif [ -n \"$NODE_VERSION\" ]; then\n    log_message \"ℹ Node.js version: ${NODE_VERSION}\"\nfi\n\n# Check npm security audit\nif [ -f \"package.json\" ]; then\n    AUDIT_RESULT=$(npm audit --audit-level high --json 2>/dev/null)\n    VULNERABILITIES=$(echo \"$AUDIT_RESULT\" | jq -r '.metadata.vulnerabilities.total' 2>/dev/null)\n    if [ -n \"$VULNERABILITIES\" ] && [ \"$VULNERABILITIES\" -gt 0 ]; then\n        log_message \"⚠ ${VULNERABILITIES} security vulnerabilities found\"\n    else\n        log_message \"✓ No high/critical security vulnerabilities\"\n    fi\nfi\n\nlog_message \"Node.js monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/nodejs-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## Backup and Deployment\n\n### Application Backup Strategy\n```bash\nsudo tee /usr/local/bin/nodejs-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/nodejs\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{app,config,logs}\n\necho \"Starting Node.js application backup...\"\n\n# Backup application code and dependencies\ntar --exclude='node_modules' --exclude='logs/*' --exclude='.git' \\\n    -czf ${BACKUP_DIR}/app/nodejs-app-${DATE}.tar.gz \\\n    -C /var/www/nodejs-app .\n\n# Backup PM2 configuration and process list\nif command -v pm2 >/dev/null 2>&1; then\n    pm2 save\n    cp ~/.pm2/dump.pm2 ${BACKUP_DIR}/config/pm2-processes-${DATE}.json\n    cp ecosystem.config.js ${BACKUP_DIR}/config/ecosystem-${DATE}.js 2>/dev/null || true\nfi\n\n# Backup environment configuration\ncp /var/www/nodejs-app/.env ${BACKUP_DIR}/config/env-${DATE}.backup 2>/dev/null || true\n\n# Backup systemd service files\ncp /etc/systemd/system/nodejs-app.service ${BACKUP_DIR}/config/nodejs-app-${DATE}.service 2>/dev/null || true\n\n# Backup logs\ntar -czf ${BACKUP_DIR}/logs/nodejs-logs-${DATE}.tar.gz \\\n    /var/www/nodejs-app/logs/ 2>/dev/null || true\n\n# Backup NGINX configuration\ncp /etc/nginx/sites-available/nodejs-app ${BACKUP_DIR}/config/nginx-${DATE}.conf 2>/dev/null || true\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://nodejs-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://nodejs-backups/\n\n# Keep only last 14 backups\nfind ${BACKUP_DIR} -name \"nodejs-*\" -type f -mtime +14 -delete\n\necho \"Node.js backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * root /usr/local/bin/nodejs-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Zero-Downtime Deployment\n```bash\n# Create deployment script\nsudo tee /usr/local/bin/nodejs-deploy.sh > /dev/null <<'EOF'\n#!/bin/bash\nVERSION=\"${1}\"\nREPO_URL=\"${2:-https://github.com/example/nodejs-app.git}\"\n\nif [ -z \"$VERSION\" ]; then\n    echo \"Usage: $0 <version> [repo_url]\"\n    echo \"Example: $0 v1.2.3\"\n    exit 1\nfi\n\nDEPLOY_DIR=\"/var/www/nodejs-app\"\nRELEASES_DIR=\"${DEPLOY_DIR}/releases\"\nSHARED_DIR=\"${DEPLOY_DIR}/shared\"\nCURRENT_LINK=\"${DEPLOY_DIR}/current\"\nRELEASE_DIR=\"${RELEASES_DIR}/${VERSION}\"\n\necho \"Deploying Node.js application version: ${VERSION}\"\n\n# Create directory structure\nmkdir -p ${RELEASES_DIR} ${SHARED_DIR}/{logs,uploads,config}\n\n# Clone and checkout specific version\ngit clone ${REPO_URL} ${RELEASE_DIR}\ncd ${RELEASE_DIR}\ngit checkout ${VERSION}\n\n# Copy shared configuration\ncp ${SHARED_DIR}/config/.env . 2>/dev/null || true\n\n# Install dependencies (production only)\nnpm ci --only=production\n\n# Run security audit\nnpm audit --audit-level high\n\n# Run tests\nnpm test\n\n# Create symbolic links for shared directories\nln -sfn ${SHARED_DIR}/logs logs\nln -sfn ${SHARED_DIR}/uploads uploads\n\n# Update current symlink (atomic operation)\nln -sfn ${RELEASE_DIR} ${CURRENT_LINK}\n\n# Reload PM2 or systemd service\nif command -v pm2 >/dev/null 2>&1 && pm2 list | grep -q \"nodejs-app\"; then\n    echo \"Reloading PM2 processes...\"\n    cd ${CURRENT_LINK}\n    pm2 reload ecosystem.config.js --env production\nelif systemctl is-active nodejs-app >/dev/null 2>&1; then\n    echo \"Restarting systemd service...\"\n    systemctl restart nodejs-app\nfi\n\n# Wait for application to be ready\necho \"Waiting for application to start...\"\nfor i in {1..30}; do\n    if curl -f http://localhost:3000/health >/dev/null 2>&1; then\n        echo \"✓ Application is healthy\"\n        break\n    fi\n    sleep 2\ndone\n\n# Keep only last 5 releases\ncd ${RELEASES_DIR}\nls -t | tail -n +6 | xargs rm -rf\n\n# Set proper ownership\nchown -R nodejs:nodejs ${DEPLOY_DIR}\n\necho \"Deployment completed successfully: ${VERSION}\"\necho \"Application is available at: http://localhost:3000\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-deploy.sh\n```\n\n## 6. Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Node.js application status\n# PM2 processes\npm2 status\npm2 logs\npm2 monit\n\n# SystemD service\nsudo systemctl status nodejs-app\nsudo journalctl -u nodejs-app -f\n\n# Check application logs\ntail -f /var/www/nodejs-app/logs/combined.log\ntail -f /var/www/nodejs-app/logs/error.log\n\n# Test application health\ncurl -i http://localhost:3000/health\n\n# Check memory leaks\nnode --inspect server.js\n# Connect Chrome DevTools to memory tab\n\n# Performance profiling\nnode --prof server.js\n# Generate profile: node --prof-process isolate-*.log > profile.txt\n\n# Check for security vulnerabilities\nnpm audit\nnpm audit fix\n\n# Update dependencies\nnpm outdated\nnpm update\n\n# Check package vulnerabilities\nnpx retire\n\n# Memory usage analysis\nps aux --sort=-%mem | grep node\npmap -x $(pgrep node)\n\n# Network connectivity\nss -tulpn | grep 3000\nnetstat -tulpn | grep node\n\n# Process monitoring\nhtop -p $(pgrep node)\ntop -p $(pgrep node)\n\n# Debug mode (development only)\nnode --inspect-brk server.js\n\n# Cluster mode debugging\npm2 logs --lines 1000\npm2 flush  # Clear all logs\n\n# Database connection issues\n# Check MongoDB connection\nmongosh --eval \"db.adminCommand('ping')\"\n\n# Check PostgreSQL connection\npsql -h localhost -U username -d dbname -c \"SELECT version();\"\n\n# SSL/HTTPS issues\nopenssl s_client -connect app.example.com:443\ncurl -I https://app.example.com\n\n# Environment issues\nprintenv | grep NODE\necho $NODE_ENV\n\n# Restart applications\npm2 restart all\n# Or\nsudo systemctl restart nodejs-app\n\n# Clean npm cache\nnpm cache clean --force\n\n# Rebuild native modules\nnpm rebuild\n```\n\n## Additional Resources\n\n- [Node.js Official Documentation](https://nodejs.org/docs/)\n- [Node.js Security Best Practices](https://nodejs.org/en/security/)\n- [PM2 Documentation](https://pm2.keymetrics.io/docs/)\n- [Express.js Security Guide](https://expressjs.com/en/advanced/best-practice-security.html)\n- [Node.js Best Practices](https://github.com/goldbergyoni/nodebestpractices)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<p class=\"mobile-paragraph\">JavaScript runtime built on Chrome's V8 JavaScript engine. Essential platform for modern web applications, APIs, and microservices with enterprise-grade performance and security features.</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for production</li>\n<li class=\"mobile-list-item\">curl or wget for package downloads</li>\n<li class=\"mobile-list-item\">Git for source code management</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"using-nvm-recommended-for-development\" class=\"mobile-header\">Using NVM (Recommended for Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and install NVM (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n\n# Reload shell profile\nsource ~/.bashrc\n\n# Install latest LTS version (recommended for production)\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install 20.10.0  # Latest LTS as of 2024\nnvm use 20.10.0\n\n# Set default version\nnvm alias default 20.10.0\n\n# Verify installation\nnode --version\nnpm --version\n\n# List available versions\nnvm list-remote --lts\nnvm list</code></pre>\n      </div>\n    </div>\n<h3 id=\"ubuntudebian-package-manager\" class=\"mobile-header\">Ubuntu/Debian (Package Manager)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Method 1: Install from Ubuntu repositories (older version)\nsudo apt install -y nodejs npm\n\n# Method 2: Install from NodeSource repository (latest LTS)\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Install build tools for native modules\nsudo apt install -y build-essential python3-dev\n\n# Verify installation\nnode --version\nnpm --version\n\n# Update npm to latest version\nsudo npm install -g npm@latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable EPEL repository\nsudo yum install -y epel-release\n\n# Method 1: Install from EPEL (may be older)\nsudo yum install -y nodejs npm\n\n# Method 2: Install from NodeSource (recommended)\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo yum install -y nodejs\n\n# Install development tools\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js from official repositories\nsudo dnf install -y nodejs npm\n\n# Or install from NodeSource for latest LTS\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo dnf install -y nodejs\n\n# Install development tools\nsudo dnf groupinstall -y &quot;Development Tools&quot;\nsudo dnf install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js and npm\nsudo pacman -Syu nodejs npm\n\n# Install base-devel for building native modules\nsudo pacman -S base-devel python\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Node.js application structure\nmkdir -p ~/nodejs-app/{src,config,logs,node_modules}\ncd ~/nodejs-app\n\n# Create production Dockerfile\ncat &gt; Dockerfile &lt;&lt;EOF\n# Multi-stage build for production\nFROM node:20-alpine AS builder\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies (including dev dependencies)\nRUN npm ci --only=production\n\n# Production stage\nFROM node:20-alpine AS production\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs &amp;&amp; \\\n    adduser -S nodejs -u 1001\n\n# Set working directory\nWORKDIR /usr/src/app\n\n# Copy node_modules from builder stage\nCOPY --from=builder /usr/src/app/node_modules ./node_modules\n\n# Copy application code\nCOPY --chown=nodejs:nodejs . .\n\n# Remove unnecessary files\nRUN rm -f .dockerignore Dockerfile* README.md\n\n# Security: Run as non-root user\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\n# Start application\nCMD [&quot;node&quot;, &quot;server.js&quot;]\nEOF\n\n# Create .dockerignore\ncat &gt; .dockerignore &lt;&lt;EOF\nnode_modules\nnpm-debug.log\nDockerfile*\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.npm\n.coverage\n.jest\n.cache\nEOF\n\n# Create production docker-compose.yml\ncat &gt; docker-compose.prod.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  app:\n    build:\n      context: .\n      target: production\n    restart: unless-stopped\n    ports:\n      - &quot;127.0.0.1:3000:3000&quot;\n    environment:\n      - NODE_ENV=production\n      - PORT=3000\n    volumes:\n      - ./logs:/usr/src/app/logs\n    networks:\n      - app-network\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;node&quot;, &quot;healthcheck.js&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n\n  nginx:\n    image: nginx:alpine\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n      - &quot;443:443&quot;\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - app\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\nEOF\n\ndocker-compose -f docker-compose.prod.yml up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"production-configuration\" class=\"mobile-header\">Production Configuration</h2>\n<h3 id=\"pm2-process-manager-production-standard\" class=\"mobile-header\">PM2 Process Manager (Production Standard)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PM2 globally\nsudo npm install -g pm2\n\n# Create PM2 ecosystem configuration\ncat &gt; ecosystem.config.js &lt;&lt;EOF\nmodule.exports = {\n  apps: [{\n    name: &#039;node-app&#039;,\n    script: &#039;./server.js&#039;,\n    instances: &#039;max&#039;,  // Use all CPU cores\n    exec_mode: &#039;cluster&#039;,\n    \n    // Performance settings\n    max_memory_restart: &#039;1G&#039;,\n    node_args: &#039;--max-old-space-size=1024&#039;,\n    \n    // Environment variables\n    env: {\n      NODE_ENV: &#039;development&#039;,\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: &#039;production&#039;,\n      PORT: 3000\n    },\n    \n    // Logging\n    log_file: &#039;./logs/app.log&#039;,\n    out_file: &#039;./logs/out.log&#039;,\n    error_file: &#039;./logs/error.log&#039;,\n    log_date_format: &#039;YYYY-MM-DD HH:mm:ss Z&#039;,\n    merge_logs: true,\n    \n    // Monitoring\n    monitoring: true,\n    pmx: true,\n    \n    // Auto-restart settings\n    autorestart: true,\n    watch: false,  // Disable in production\n    max_restarts: 10,\n    min_uptime: &#039;10s&#039;,\n    \n    // Instance settings\n    instance_var: &#039;INSTANCE_ID&#039;,\n    \n    // Source map support\n    source_map_support: true,\n    \n    // Graceful shutdown\n    kill_timeout: 5000,\n    listen_timeout: 8000,\n    \n    // Health checking\n    health_check_grace_period: 3000\n  }],\n  \n  // Deployment configuration\n  deploy: {\n    production: {\n      user: &#039;nodejs&#039;,\n      host: [&#039;app1.example.com&#039;, &#039;app2.example.com&#039;],\n      ref: &#039;origin/main&#039;,\n      repo: &#039;git@github.com:username/repository.git&#039;,\n      path: &#039;/var/www/production&#039;,\n      &#039;post-deploy&#039;: &#039;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&#039;,\n      &#039;pre-setup&#039;: &#039;apt update -y; apt install git -y&#039;\n    },\n    staging: {\n      user: &#039;nodejs&#039;,\n      host: &#039;staging.example.com&#039;,\n      ref: &#039;origin/develop&#039;,\n      repo: &#039;git@github.com:username/repository.git&#039;,\n      path: &#039;/var/www/staging&#039;,\n      &#039;post-deploy&#039;: &#039;npm install &amp;&amp; pm2 reload ecosystem.config.js --env staging&#039;\n    }\n  }\n};\nEOF\n\n# Start application with PM2\npm2 start ecosystem.config.js --env production\n\n# Save PM2 configuration\npm2 save\n\n# Generate startup script\npm2 startup\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $USER --hp $HOME\n\n# Monitor application\npm2 status\npm2 logs\npm2 monit</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy-configuration\" class=\"mobile-header\">NGINX Reverse Proxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration for Node.js applications\nsudo tee /etc/nginx/sites-available/nodejs-app &gt; /dev/null &lt;&lt;EOF\n# Node.js Application NGINX Configuration\n\nupstream nodejs_backend {\n    least_conn;\n    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;\n    # Add more servers for load balancing:\n    # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;\n    # server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;\n    keepalive 64;\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name app.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=api_limit:10m rate=10r/s;\n    limit_req zone=api_limit burst=20 nodelay;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    location / {\n        proxy_pass http://nodejs_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &#039;upgrade&#039;;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n        \n        # Buffer settings\n        proxy_buffer_size 4k;\n        proxy_buffers 4 4k;\n    }\n\n    # Static assets caching\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\\$ {\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n        access_log off;\n    }\n\n    # API rate limiting (stricter)\n    location /api/ {\n        limit_req zone=api_limit burst=10 nodelay;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service-alternative-to-pm2\" class=\"mobile-header\">SystemD Service (Alternative to PM2)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service for Node.js application\nsudo tee /etc/systemd/system/nodejs-app.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Node.js Application\nDocumentation=https://nodejs.org/\nAfter=network.target\n\n[Service]\nType=simple\nUser=nodejs\nGroup=nodejs\nWorkingDirectory=/var/www/nodejs-app\nExecStart=/usr/bin/node server.js\nExecReload=/bin/kill -SIGUSR2 \\$MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=nodejs-app\n\n# Environment variables\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/www/nodejs-app/logs /var/www/nodejs-app/uploads\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=2G\nCPUQuota=200%\nTasksMax=4096\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create nodejs user\nsudo useradd --system --shell /bin/false --home /var/www/nodejs-app nodejs\n\n# Set up application directory\nsudo mkdir -p /var/www/nodejs-app/{logs,uploads}\nsudo chown -R nodejs:nodejs /var/www/nodejs-app\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nodejs-app</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"application-security-best-practices\" class=\"mobile-header\">Application Security Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure application template\nmkdir -p ~/secure-nodejs-app\ncd ~/secure-nodejs-app\n\n# Create package.json with security-focused dependencies\ncat &gt; package.json &lt;&lt;EOF\n{\n  &quot;name&quot;: &quot;secure-nodejs-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Secure Node.js application template&quot;,\n  &quot;main&quot;: &quot;server.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node server.js&quot;,\n    &quot;dev&quot;: &quot;nodemon server.js&quot;,\n    &quot;test&quot;: &quot;jest&quot;,\n    &quot;security:audit&quot;: &quot;npm audit&quot;,\n    &quot;security:check&quot;: &quot;nsp check&quot;,\n    &quot;lint&quot;: &quot;eslint .&quot;,\n    &quot;format&quot;: &quot;prettier --write .&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;^4.18.2&quot;,\n    &quot;helmet&quot;: &quot;^7.1.0&quot;,\n    &quot;cors&quot;: &quot;^2.8.5&quot;,\n    &quot;express-rate-limit&quot;: &quot;^7.1.5&quot;,\n    &quot;express-validator&quot;: &quot;^7.0.1&quot;,\n    &quot;bcryptjs&quot;: &quot;^2.4.3&quot;,\n    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,\n    &quot;mongoose&quot;: &quot;^8.0.3&quot;,\n    &quot;dotenv&quot;: &quot;^16.3.1&quot;,\n    &quot;compression&quot;: &quot;^1.7.4&quot;,\n    &quot;morgan&quot;: &quot;^1.10.0&quot;,\n    &quot;winston&quot;: &quot;^3.11.0&quot;,\n    &quot;hpp&quot;: &quot;^0.2.3&quot;,\n    &quot;express-mongo-sanitize&quot;: &quot;^2.2.0&quot;,\n    &quot;xss&quot;: &quot;^1.0.14&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;nodemon&quot;: &quot;^3.0.2&quot;,\n    &quot;jest&quot;: &quot;^29.7.0&quot;,\n    &quot;eslint&quot;: &quot;^8.55.0&quot;,\n    &quot;prettier&quot;: &quot;^3.1.0&quot;,\n    &quot;nsp&quot;: &quot;^3.2.1&quot;\n  },\n  &quot;engines&quot;: {\n    &quot;node&quot;: &quot;&gt;=20.0.0&quot;,\n    &quot;npm&quot;: &quot;&gt;=9.0.0&quot;\n  }\n}\nEOF\n\n# Create secure server template\ncat &gt; server.js &lt;&lt;&#039;EOF&#039;\n&#039;use strict&#039;;\n\nconst express = require(&#039;express&#039;);\nconst helmet = require(&#039;helmet&#039;);\nconst cors = require(&#039;cors&#039;);\nconst rateLimit = require(&#039;express-rate-limit&#039;);\nconst { body, validationResult } = require(&#039;express-validator&#039;);\nconst mongoSanitize = require(&#039;express-mongo-sanitize&#039;);\nconst xss = require(&#039;xss&#039;);\nconst compression = require(&#039;compression&#039;);\nconst morgan = require(&#039;morgan&#039;);\nconst winston = require(&#039;winston&#039;);\nconst hpp = require(&#039;hpp&#039;);\nrequire(&#039;dotenv&#039;).config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [&quot;&#039;self&#039;&quot;],\n      styleSrc: [&quot;&#039;self&#039;&quot;, &quot;&#039;unsafe-inline&#039;&quot;],\n      scriptSrc: [&quot;&#039;self&#039;&quot;],\n      imgSrc: [&quot;&#039;self&#039;&quot;, &quot;data:&quot;, &quot;https:&quot;]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(&#039;,&#039;) || [&#039;https://example.com&#039;],\n  methods: [&#039;GET&#039;, &#039;POST&#039;, &#039;PUT&#039;, &#039;DELETE&#039;],\n  allowedHeaders: [&#039;Content-Type&#039;, &#039;Authorization&#039;],\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: &#039;Too many requests from this IP, please try again later.&#039;,\n  standardHeaders: true,\n  legacyHeaders: false\n});\napp.use(limiter);\n\n// API rate limiting (stricter)\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 50,\n  message: &#039;Too many API requests from this IP&#039;\n});\napp.use(&#039;/api/&#039;, apiLimiter);\n\n// Body parsing with size limits\napp.use(express.json({ limit: &#039;10mb&#039; }));\napp.use(express.urlencoded({ extended: true, limit: &#039;10mb&#039; }));\n\n// Security sanitization\napp.use(mongoSanitize());\napp.use(hpp()); // Prevent HTTP Parameter Pollution\n\n// Compression\napp.use(compression());\n\n// Logging\nconst logger = winston.createLogger({\n  level: &#039;info&#039;,\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: &#039;logs/error.log&#039;, level: &#039;error&#039; }),\n    new winston.transports.File({ filename: &#039;logs/combined.log&#039; })\n  ]\n});\n\nif (process.env.NODE_ENV !== &#039;production&#039;) {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\n// Request logging\napp.use(morgan(&#039;combined&#039;, {\n  stream: { write: message =&gt; logger.info(message.trim()) }\n}));\n\n// Input validation middleware\nconst validateInput = (req, res, next) =&gt; {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\n// Health check endpoint\napp.get(&#039;/health&#039;, (req, res) =&gt; {\n  res.status(200).json({\n    status: &#039;healthy&#039;,\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    version: process.version\n  });\n});\n\n// API routes with validation\napp.post(&#039;/api/users&#039;, [\n  body(&#039;email&#039;).isEmail().normalizeEmail(),\n  body(&#039;name&#039;).trim().escape().isLength({ min: 2, max: 50 }),\n  body(&#039;password&#039;).isLength({ min: 12 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])/),\n  validateInput\n], (req, res) =&gt; {\n  try {\n    // Sanitize input\n    const sanitizedBody = {\n      email: xss(req.body.email),\n      name: xss(req.body.name),\n      password: req.body.password // Don&#039;t sanitize password, just validate\n    };\n    \n    // Process request\n    res.json({ success: true, message: &#039;User created successfully&#039; });\n  } catch (error) {\n    logger.error(&#039;Error creating user:&#039;, error);\n    res.status(500).json({ success: false, message: &#039;Internal server error&#039; });\n  }\n});\n\n// Error handling middleware\napp.use((error, req, res, next) =&gt; {\n  logger.error(&#039;Unhandled error:&#039;, error);\n  \n  res.status(error.status || 500).json({\n    success: false,\n    message: process.env.NODE_ENV === &#039;production&#039; \n      ? &#039;Something went wrong!&#039; \n      : error.message\n  });\n});\n\n// 404 handler\napp.use(&#039;*&#039;, (req, res) =&gt; {\n  res.status(404).json({\n    success: false,\n    message: &#039;Route not found&#039;\n  });\n});\n\n// Graceful shutdown\nprocess.on(&#039;SIGTERM&#039;, () =&gt; {\n  logger.info(&#039;SIGTERM signal received: closing HTTP server&#039;);\n  server.close(() =&gt; {\n    logger.info(&#039;HTTP server closed&#039;);\n    process.exit(0);\n  });\n});\n\nprocess.on(&#039;SIGINT&#039;, () =&gt; {\n  logger.info(&#039;SIGINT signal received: closing HTTP server&#039;);\n  server.close(() =&gt; {\n    logger.info(&#039;HTTP server closed&#039;);\n    process.exit(0);\n  });\n});\n\n// Unhandled promise rejection handling\nprocess.on(&#039;unhandledRejection&#039;, (reason, promise) =&gt; {\n  logger.error(&#039;Unhandled Rejection at:&#039;, promise, &#039;reason:&#039;, reason);\n  process.exit(1);\n});\n\n// Uncaught exception handling\nprocess.on(&#039;uncaughtException&#039;, (error) =&gt; {\n  logger.error(&#039;Uncaught Exception thrown:&#039;, error);\n  process.exit(1);\n});\n\nconst server = app.listen(PORT, &#039;127.0.0.1&#039;, () =&gt; {\n  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\n});\n\nmodule.exports = app;\nEOF\n\n# Create healthcheck script for Docker\ncat &gt; healthcheck.js &lt;&lt;EOF\nconst http = require(&#039;http&#039;);\n\nconst options = {\n  hostname: &#039;localhost&#039;,\n  port: process.env.PORT || 3000,\n  path: &#039;/health&#039;,\n  method: &#039;GET&#039;,\n  timeout: 2000\n};\n\nconst req = http.request(options, (res) =&gt; {\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\n\nreq.on(&#039;error&#039;, () =&gt; {\n  process.exit(1);\n});\n\nreq.end();\nEOF\n\n# Install dependencies\nnpm install</code></pre>\n      </div>\n    </div>\n<h3 id=\"environment-configuration\" class=\"mobile-header\">Environment Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure environment configuration\ncat &gt; .env.example &lt;&lt;EOF\n# Node.js Application Environment Configuration\n\n# Application settings\nNODE_ENV=production\nPORT=3000\nHOST=127.0.0.1\n\n# Database connection\nDATABASE_URL=mongodb://username:password@localhost:27017/myapp?authSource=admin\n# Or PostgreSQL: postgresql://username:password@localhost:5432/myapp\n\n# Security keys (generate with: openssl rand -base64 32)\nJWT_SECRET=your_jwt_secret_here_32_characters_minimum\nSESSION_SECRET=your_session_secret_here_32_characters_minimum\nENCRYPTION_KEY=your_encryption_key_here_32_characters\n\n# CORS settings\nALLOWED_ORIGINS=https://example.com,https://app.example.com\n\n# Email configuration (for notifications)\nSMTP_HOST=smtp.example.com\nSMTP_PORT=587\nSMTP_USER=app@example.com\nSMTP_PASS=smtp_password\n\n# Rate limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX=100\n\n# File upload settings\nMAX_FILE_SIZE=10485760\nUPLOAD_PATH=/var/www/nodejs-app/uploads\n\n# Monitoring\nENABLE_MONITORING=true\nLOG_LEVEL=info\n\n# Security settings\nBCRYPT_ROUNDS=12\nJWT_EXPIRY=24h\nSESSION_TIMEOUT=3600000\n\n# External APIs\nEXTERNAL_API_KEY=your_api_key_here\nEXTERNAL_API_URL=https://api.external-service.com\n\n# Redis configuration (for sessions/caching)\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=redis_password\n\n# Health check settings\nHEALTH_CHECK_INTERVAL=30000\nEOF\n\n# Create production environment file\ncp .env.example .env\necho &quot;.env&quot; &gt;&gt; .gitignore\n\n# Set secure permissions\nchmod 600 .env</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"nodejs-performance-tuning\" class=\"mobile-header\">Node.js Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create performance optimization script\nsudo tee /usr/local/bin/nodejs-optimize.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\necho &quot;Optimizing Node.js application performance...&quot;\n\n# System-level optimizations\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;LIMITS\nnodejs soft nofile 65535\nnodejs hard nofile 65535\nnodejs soft nproc 65535\nnodejs hard nproc 65535\nLIMITS\n\n# Kernel optimizations for Node.js\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;SYSCTL\n# Node.js optimizations\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\nvm.swappiness = 1\nSYSCTL\n\nsudo sysctl -p\n\n# PM2 optimization for clustering\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    # Update PM2 configuration for performance\n    pm2 delete all 2&gt;/dev/null || true\n    \n    cat &gt; /tmp/ecosystem-optimized.config.js &lt;&lt;PM2CONFIG\nmodule.exports = {\n  apps: [{\n    name: &#039;nodejs-app-optimized&#039;,\n    script: &#039;./server.js&#039;,\n    instances: &#039;max&#039;,\n    exec_mode: &#039;cluster&#039;,\n    \n    // V8 optimizations\n    node_args: [\n      &#039;--max-old-space-size=2048&#039;,\n      &#039;--optimize-for-size&#039;,\n      &#039;--gc-interval=100&#039;,\n      &#039;--expose-gc&#039;\n    ],\n    \n    // Performance settings\n    max_memory_restart: &#039;2G&#039;,\n    min_uptime: &#039;10s&#039;,\n    max_restarts: 5,\n    \n    // Environment\n    env_production: {\n      NODE_ENV: &#039;production&#039;,\n      UV_THREADPOOL_SIZE: 16\n    }\n  }]\n};\nPM2CONFIG\n    \n    pm2 start /tmp/ecosystem-optimized.config.js --env production\n    pm2 save\nfi\n\necho &quot;Node.js optimization completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-optimize.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-and-logging\" class=\"mobile-header\">Monitoring and Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Node.js monitoring script\nsudo tee /usr/local/bin/nodejs-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/nodejs-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# Check if PM2 is managing processes\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    PM2_STATUS=$(pm2 jlist | jq -r &#039;.[].pm2_env.status&#039; 2&gt;/dev/null)\n    if echo &quot;$PM2_STATUS&quot; | grep -q &quot;online&quot;; then\n        log_message &quot;✓ PM2 processes are running&quot;\n        \n        # Check memory usage\n        PM2_MEMORY=$(pm2 jlist | jq -r &#039;.[].monit.memory&#039; 2&gt;/dev/null | awk &#039;{sum += $1} END {print sum/1024/1024}&#039;)\n        log_message &quot;ℹ PM2 total memory usage: ${PM2_MEMORY}MB&quot;\n        \n        # Check CPU usage\n        PM2_CPU=$(pm2 jlist | jq -r &#039;.[].monit.cpu&#039; 2&gt;/dev/null | awk &#039;{sum += $1} END {print sum}&#039;)\n        log_message &quot;ℹ PM2 total CPU usage: ${PM2_CPU}%&quot;\n    else\n        log_message &quot;⚠ PM2 processes not online&quot;\n    fi\nfi\n\n# Check systemd service (if not using PM2)\nif systemctl is-active nodejs-app &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Node.js systemd service is running&quot;\nelse\n    log_message &quot;ℹ Node.js systemd service not active (may be using PM2)&quot;\nfi\n\n# Check application health endpoint\nif curl -f http://localhost:3000/health &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Application health endpoint responding&quot;\n    \n    # Get detailed health info\n    HEALTH_DATA=$(curl -s http://localhost:3000/health)\n    UPTIME=$(echo &quot;$HEALTH_DATA&quot; | jq -r &#039;.uptime&#039; 2&gt;/dev/null)\n    MEMORY_USED=$(echo &quot;$HEALTH_DATA&quot; | jq -r &#039;.memory.rss&#039; 2&gt;/dev/null)\n    \n    if [ -n &quot;$UPTIME&quot; ]; then\n        log_message &quot;ℹ Application uptime: ${UPTIME}s&quot;\n    fi\n    if [ -n &quot;$MEMORY_USED&quot; ]; then\n        MEMORY_MB=$((MEMORY_USED / 1024 / 1024))\n        log_message &quot;ℹ Application memory: ${MEMORY_MB}MB&quot;\n    fi\nelse\n    log_message &quot;✗ Application health endpoint not responding&quot;\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node --version 2&gt;/dev/null)\nif [ -n &quot;$NODE_VERSION&quot; ]; then\n    log_message &quot;ℹ Node.js version: ${NODE_VERSION}&quot;\nfi\n\n# Check npm security audit\nif [ -f &quot;package.json&quot; ]; then\n    AUDIT_RESULT=$(npm audit --audit-level high --json 2&gt;/dev/null)\n    VULNERABILITIES=$(echo &quot;$AUDIT_RESULT&quot; | jq -r &#039;.metadata.vulnerabilities.total&#039; 2&gt;/dev/null)\n    if [ -n &quot;$VULNERABILITIES&quot; ] &amp;&amp; [ &quot;$VULNERABILITIES&quot; -gt 0 ]; then\n        log_message &quot;⚠ ${VULNERABILITIES} security vulnerabilities found&quot;\n    else\n        log_message &quot;✓ No high/critical security vulnerabilities&quot;\n    fi\nfi\n\nlog_message &quot;Node.js monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/nodejs-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-deployment\" class=\"mobile-header\">Backup and Deployment</h2>\n<h3 id=\"application-backup-strategy\" class=\"mobile-header\">Application Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/nodejs-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/nodejs&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{app,config,logs}\n\necho &quot;Starting Node.js application backup...&quot;\n\n# Backup application code and dependencies\ntar --exclude=&#039;node_modules&#039; --exclude=&#039;logs/*&#039; --exclude=&#039;.git&#039; \\\n    -czf ${BACKUP_DIR}/app/nodejs-app-${DATE}.tar.gz \\\n    -C /var/www/nodejs-app .\n\n# Backup PM2 configuration and process list\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    pm2 save\n    cp ~/.pm2/dump.pm2 ${BACKUP_DIR}/config/pm2-processes-${DATE}.json\n    cp ecosystem.config.js ${BACKUP_DIR}/config/ecosystem-${DATE}.js 2&gt;/dev/null || true\nfi\n\n# Backup environment configuration\ncp /var/www/nodejs-app/.env ${BACKUP_DIR}/config/env-${DATE}.backup 2&gt;/dev/null || true\n\n# Backup systemd service files\ncp /etc/systemd/system/nodejs-app.service ${BACKUP_DIR}/config/nodejs-app-${DATE}.service 2&gt;/dev/null || true\n\n# Backup logs\ntar -czf ${BACKUP_DIR}/logs/nodejs-logs-${DATE}.tar.gz \\\n    /var/www/nodejs-app/logs/ 2&gt;/dev/null || true\n\n# Backup NGINX configuration\ncp /etc/nginx/sites-available/nodejs-app ${BACKUP_DIR}/config/nginx-${DATE}.conf 2&gt;/dev/null || true\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://nodejs-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://nodejs-backups/\n\n# Keep only last 14 backups\nfind ${BACKUP_DIR} -name &quot;nodejs-*&quot; -type f -mtime +14 -delete\n\necho &quot;Node.js backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-backup.sh\n\n# Schedule daily backups\necho &quot;0 2 * * * root /usr/local/bin/nodejs-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"zero-downtime-deployment\" class=\"mobile-header\">Zero-Downtime Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create deployment script\nsudo tee /usr/local/bin/nodejs-deploy.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nVERSION=&quot;${1}&quot;\nREPO_URL=&quot;${2:-https://github.com/example/nodejs-app.git}&quot;\n\nif [ -z &quot;$VERSION&quot; ]; then\n    echo &quot;Usage: $0 &lt;version&gt; [repo_url]&quot;\n    echo &quot;Example: $0 v1.2.3&quot;\n    exit 1\nfi\n\nDEPLOY_DIR=&quot;/var/www/nodejs-app&quot;\nRELEASES_DIR=&quot;${DEPLOY_DIR}/releases&quot;\nSHARED_DIR=&quot;${DEPLOY_DIR}/shared&quot;\nCURRENT_LINK=&quot;${DEPLOY_DIR}/current&quot;\nRELEASE_DIR=&quot;${RELEASES_DIR}/${VERSION}&quot;\n\necho &quot;Deploying Node.js application version: ${VERSION}&quot;\n\n# Create directory structure\nmkdir -p ${RELEASES_DIR} ${SHARED_DIR}/{logs,uploads,config}\n\n# Clone and checkout specific version\ngit clone ${REPO_URL} ${RELEASE_DIR}\ncd ${RELEASE_DIR}\ngit checkout ${VERSION}\n\n# Copy shared configuration\ncp ${SHARED_DIR}/config/.env . 2&gt;/dev/null || true\n\n# Install dependencies (production only)\nnpm ci --only=production\n\n# Run security audit\nnpm audit --audit-level high\n\n# Run tests\nnpm test\n\n# Create symbolic links for shared directories\nln -sfn ${SHARED_DIR}/logs logs\nln -sfn ${SHARED_DIR}/uploads uploads\n\n# Update current symlink (atomic operation)\nln -sfn ${RELEASE_DIR} ${CURRENT_LINK}\n\n# Reload PM2 or systemd service\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pm2 list | grep -q &quot;nodejs-app&quot;; then\n    echo &quot;Reloading PM2 processes...&quot;\n    cd ${CURRENT_LINK}\n    pm2 reload ecosystem.config.js --env production\nelif systemctl is-active nodejs-app &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Restarting systemd service...&quot;\n    systemctl restart nodejs-app\nfi\n\n# Wait for application to be ready\necho &quot;Waiting for application to start...&quot;\nfor i in {1..30}; do\n    if curl -f http://localhost:3000/health &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✓ Application is healthy&quot;\n        break\n    fi\n    sleep 2\ndone\n\n# Keep only last 5 releases\ncd ${RELEASES_DIR}\nls -t | tail -n +6 | xargs rm -rf\n\n# Set proper ownership\nchown -R nodejs:nodejs ${DEPLOY_DIR}\n\necho &quot;Deployment completed successfully: ${VERSION}&quot;\necho &quot;Application is available at: http://localhost:3000&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-deploy.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Node.js application status\n# PM2 processes\npm2 status\npm2 logs\npm2 monit\n\n# SystemD service\nsudo systemctl status nodejs-app\nsudo journalctl -u nodejs-app -f\n\n# Check application logs\ntail -f /var/www/nodejs-app/logs/combined.log\ntail -f /var/www/nodejs-app/logs/error.log\n\n# Test application health\ncurl -i http://localhost:3000/health\n\n# Check memory leaks\nnode --inspect server.js\n# Connect Chrome DevTools to memory tab\n\n# Performance profiling\nnode --prof server.js\n# Generate profile: node --prof-process isolate-*.log &gt; profile.txt\n\n# Check for security vulnerabilities\nnpm audit\nnpm audit fix\n\n# Update dependencies\nnpm outdated\nnpm update\n\n# Check package vulnerabilities\nnpx retire\n\n# Memory usage analysis\nps aux --sort=-%mem | grep node\npmap -x $(pgrep node)\n\n# Network connectivity\nss -tulpn | grep 3000\nnetstat -tulpn | grep node\n\n# Process monitoring\nhtop -p $(pgrep node)\ntop -p $(pgrep node)\n\n# Debug mode (development only)\nnode --inspect-brk server.js\n\n# Cluster mode debugging\npm2 logs --lines 1000\npm2 flush  # Clear all logs\n\n# Database connection issues\n# Check MongoDB connection\nmongosh --eval &quot;db.adminCommand(&#039;ping&#039;)&quot;\n\n# Check PostgreSQL connection\npsql -h localhost -U username -d dbname -c &quot;SELECT version();&quot;\n\n# SSL/HTTPS issues\nopenssl s_client -connect app.example.com:443\ncurl -I https://app.example.com\n\n# Environment issues\nprintenv | grep NODE\necho $NODE_ENV\n\n# Restart applications\npm2 restart all\n# Or\nsudo systemctl restart nodejs-app\n\n# Clean npm cache\nnpm cache clean --force\n\n# Rebuild native modules\nnpm rebuild</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://nodejs.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://nodejs.org/en/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://pm2.keymetrics.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PM2 Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://expressjs.com/en/advanced/best-practice-security.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Express.js Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/goldbergyoni/nodebestpractices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Best Practices</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"18 min","wordCount":3425,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Using NVM (Recommended for Development)","id":"using-nvm-recommended-for-development"},{"level":1,"text":"Download and install NVM (Node Version Manager)","id":"download-and-install-nvm-node-version-manager"},{"level":1,"text":"Reload shell profile","id":"reload-shell-profile"},{"level":1,"text":"Install latest LTS version (recommended for production)","id":"install-latest-lts-version-recommended-for-production"},{"level":1,"text":"Install specific version","id":"install-specific-version"},{"level":1,"text":"Set default version","id":"set-default-version"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"List available versions","id":"list-available-versions"},{"level":3,"text":"Ubuntu/Debian (Package Manager)","id":"ubuntudebian-package-manager"},{"level":1,"text":"Update system packages","id":"update-system-packages"},{"level":1,"text":"Method 1: Install from Ubuntu repositories (older version)","id":"method-1-install-from-ubuntu-repositories-older-version"},{"level":1,"text":"Method 2: Install from NodeSource repository (latest LTS)","id":"method-2-install-from-nodesource-repository-latest-lts"},{"level":1,"text":"Install build tools for native modules","id":"install-build-tools-for-native-modules"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"Update npm to latest version","id":"update-npm-to-latest-version"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Enable EPEL repository","id":"enable-epel-repository"},{"level":1,"text":"Method 1: Install from EPEL (may be older)","id":"method-1-install-from-epel-may-be-older"},{"level":1,"text":"Method 2: Install from NodeSource (recommended)","id":"method-2-install-from-nodesource-recommended"},{"level":1,"text":"Install development tools","id":"install-development-tools"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Fedora","id":"fedora"},{"level":1,"text":"Install Node.js from official repositories","id":"install-nodejs-from-official-repositories"},{"level":1,"text":"Or install from NodeSource for latest LTS","id":"or-install-from-nodesource-for-latest-lts"},{"level":1,"text":"Install development tools","id":"install-development-tools"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install Node.js and npm","id":"install-nodejs-and-npm"},{"level":1,"text":"Install base-devel for building native modules","id":"install-base-devel-for-building-native-modules"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Docker Installation","id":"docker-installation"},{"level":1,"text":"Create Node.js application structure","id":"create-nodejs-application-structure"},{"level":1,"text":"Create production Dockerfile","id":"create-production-dockerfile"},{"level":1,"text":"Multi-stage build for production","id":"multi-stage-build-for-production"},{"level":1,"text":"Create app directory","id":"create-app-directory"},{"level":1,"text":"Copy package files","id":"copy-package-files"},{"level":1,"text":"Install dependencies (including dev dependencies)","id":"install-dependencies-including-dev-dependencies"},{"level":1,"text":"Production stage","id":"production-stage"},{"level":1,"text":"Create non-root user","id":"create-non-root-user"},{"level":1,"text":"Set working directory","id":"set-working-directory"},{"level":1,"text":"Copy node_modules from builder stage","id":"copy-node_modules-from-builder-stage"},{"level":1,"text":"Copy application code","id":"copy-application-code"},{"level":1,"text":"Remove unnecessary files","id":"remove-unnecessary-files"},{"level":1,"text":"Security: Run as non-root user","id":"security-run-as-non-root-user"},{"level":1,"text":"Expose port","id":"expose-port"},{"level":1,"text":"Health check","id":"health-check"},{"level":1,"text":"Start application","id":"start-application"},{"level":1,"text":"Create .dockerignore","id":"create-dockerignore"},{"level":1,"text":"Create production docker-compose.yml","id":"create-production-docker-composeyml"},{"level":2,"text":"Production Configuration","id":"production-configuration"},{"level":3,"text":"PM2 Process Manager (Production Standard)","id":"pm2-process-manager-production-standard"},{"level":1,"text":"Install PM2 globally","id":"install-pm2-globally"},{"level":1,"text":"Create PM2 ecosystem configuration","id":"create-pm2-ecosystem-configuration"},{"level":1,"text":"Start application with PM2","id":"start-application-with-pm2"},{"level":1,"text":"Save PM2 configuration","id":"save-pm2-configuration"},{"level":1,"text":"Generate startup script","id":"generate-startup-script"},{"level":1,"text":"Monitor application","id":"monitor-application"},{"level":3,"text":"NGINX Reverse Proxy Configuration","id":"nginx-reverse-proxy-configuration"},{"level":1,"text":"Create NGINX configuration for Node.js applications","id":"create-nginx-configuration-for-nodejs-applications"},{"level":1,"text":"Node.js Application NGINX Configuration","id":"nodejs-application-nginx-configuration"},{"level":1,"text":"HTTP to HTTPS redirect","id":"http-to-https-redirect"},{"level":1,"text":"HTTPS server","id":"https-server"},{"level":3,"text":"SystemD Service (Alternative to PM2)","id":"systemd-service-alternative-to-pm2"},{"level":1,"text":"Create systemd service for Node.js application","id":"create-systemd-service-for-nodejs-application"},{"level":1,"text":"Environment variables","id":"environment-variables"},{"level":1,"text":"Security settings","id":"security-settings"},{"level":1,"text":"Resource limits","id":"resource-limits"},{"level":1,"text":"Create nodejs user","id":"create-nodejs-user"},{"level":1,"text":"Set up application directory","id":"set-up-application-directory"},{"level":2,"text":"Security Hardening","id":"security-hardening"},{"level":3,"text":"Application Security Best Practices","id":"application-security-best-practices"},{"level":1,"text":"Create secure application template","id":"create-secure-application-template"},{"level":1,"text":"Create package.json with security-focused dependencies","id":"create-packagejson-with-security-focused-dependencies"},{"level":1,"text":"Create secure server template","id":"create-secure-server-template"},{"level":1,"text":"Create healthcheck script for Docker","id":"create-healthcheck-script-for-docker"},{"level":1,"text":"Install dependencies","id":"install-dependencies"},{"level":3,"text":"Environment Configuration","id":"environment-configuration"},{"level":1,"text":"Create secure environment configuration","id":"create-secure-environment-configuration"},{"level":1,"text":"Node.js Application Environment Configuration","id":"nodejs-application-environment-configuration"},{"level":1,"text":"Application settings","id":"application-settings"},{"level":1,"text":"Database connection","id":"database-connection"},{"level":1,"text":"Or PostgreSQL: postgresql://username:password@localhost:5432/myapp","id":"or-postgresql-postgresqlusernamepasswordlocalhost5432myapp"},{"level":1,"text":"Security keys (generate with: openssl rand -base64 32)","id":"security-keys-generate-with-openssl-rand-base64-32"},{"level":1,"text":"CORS settings","id":"cors-settings"},{"level":1,"text":"Email configuration (for notifications)","id":"email-configuration-for-notifications"},{"level":1,"text":"Rate limiting","id":"rate-limiting"},{"level":1,"text":"File upload settings","id":"file-upload-settings"},{"level":1,"text":"Monitoring","id":"monitoring"},{"level":1,"text":"Security settings","id":"security-settings"},{"level":1,"text":"External APIs","id":"external-apis"},{"level":1,"text":"Redis configuration (for sessions/caching)","id":"redis-configuration-for-sessionscaching"},{"level":1,"text":"Health check settings","id":"health-check-settings"},{"level":1,"text":"Create production environment file","id":"create-production-environment-file"},{"level":1,"text":"Set secure permissions","id":"set-secure-permissions"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Node.js Performance Tuning","id":"nodejs-performance-tuning"},{"level":1,"text":"Create performance optimization script","id":"create-performance-optimization-script"},{"level":1,"text":"System-level optimizations","id":"system-level-optimizations"},{"level":1,"text":"Increase file descriptor limits","id":"increase-file-descriptor-limits"},{"level":1,"text":"Kernel optimizations for Node.js","id":"kernel-optimizations-for-nodejs"},{"level":1,"text":"Node.js optimizations","id":"nodejs-optimizations"},{"level":1,"text":"PM2 optimization for clustering","id":"pm2-optimization-for-clustering"},{"level":3,"text":"Monitoring and Logging","id":"monitoring-and-logging"},{"level":1,"text":"Create Node.js monitoring script","id":"create-nodejs-monitoring-script"},{"level":1,"text":"Check if PM2 is managing processes","id":"check-if-pm2-is-managing-processes"},{"level":1,"text":"Check systemd service (if not using PM2)","id":"check-systemd-service-if-not-using-pm2"},{"level":1,"text":"Check application health endpoint","id":"check-application-health-endpoint"},{"level":1,"text":"Check Node.js version","id":"check-nodejs-version"},{"level":1,"text":"Check npm security audit","id":"check-npm-security-audit"},{"level":1,"text":"Schedule monitoring every 5 minutes","id":"schedule-monitoring-every-5-minutes"},{"level":2,"text":"Backup and Deployment","id":"backup-and-deployment"},{"level":3,"text":"Application Backup Strategy","id":"application-backup-strategy"},{"level":1,"text":"Backup application code and dependencies","id":"backup-application-code-and-dependencies"},{"level":1,"text":"Backup PM2 configuration and process list","id":"backup-pm2-configuration-and-process-list"},{"level":1,"text":"Backup environment configuration","id":"backup-environment-configuration"},{"level":1,"text":"Backup systemd service files","id":"backup-systemd-service-files"},{"level":1,"text":"Backup logs","id":"backup-logs"},{"level":1,"text":"Backup NGINX configuration","id":"backup-nginx-configuration"},{"level":1,"text":"Upload to cloud storage","id":"upload-to-cloud-storage"},{"level":1,"text":"Keep only last 14 backups","id":"keep-only-last-14-backups"},{"level":1,"text":"Schedule daily backups","id":"schedule-daily-backups"},{"level":3,"text":"Zero-Downtime Deployment","id":"zero-downtime-deployment"},{"level":1,"text":"Create deployment script","id":"create-deployment-script"},{"level":1,"text":"Create directory structure","id":"create-directory-structure"},{"level":1,"text":"Clone and checkout specific version","id":"clone-and-checkout-specific-version"},{"level":1,"text":"Copy shared configuration","id":"copy-shared-configuration"},{"level":1,"text":"Install dependencies (production only)","id":"install-dependencies-production-only"},{"level":1,"text":"Run security audit","id":"run-security-audit"},{"level":1,"text":"Run tests","id":"run-tests"},{"level":1,"text":"Create symbolic links for shared directories","id":"create-symbolic-links-for-shared-directories"},{"level":1,"text":"Update current symlink (atomic operation)","id":"update-current-symlink-atomic-operation"},{"level":1,"text":"Reload PM2 or systemd service","id":"reload-pm2-or-systemd-service"},{"level":1,"text":"Wait for application to be ready","id":"wait-for-application-to-be-ready"},{"level":1,"text":"Keep only last 5 releases","id":"keep-only-last-5-releases"},{"level":1,"text":"Set proper ownership","id":"set-proper-ownership"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues and Solutions","id":"common-issues-and-solutions"},{"level":1,"text":"Check Node.js application status","id":"check-nodejs-application-status"},{"level":1,"text":"PM2 processes","id":"pm2-processes"},{"level":1,"text":"SystemD service","id":"systemd-service"},{"level":1,"text":"Check application logs","id":"check-application-logs"},{"level":1,"text":"Test application health","id":"test-application-health"},{"level":1,"text":"Check memory leaks","id":"check-memory-leaks"},{"level":1,"text":"Connect Chrome DevTools to memory tab","id":"connect-chrome-devtools-to-memory-tab"},{"level":1,"text":"Performance profiling","id":"performance-profiling"},{"level":1,"text":"Generate profile: node --prof-process isolate-*.log > profile.txt","id":"generate-profile-node-prof-process-isolate-log-profiletxt"},{"level":1,"text":"Check for security vulnerabilities","id":"check-for-security-vulnerabilities"},{"level":1,"text":"Update dependencies","id":"update-dependencies"},{"level":1,"text":"Check package vulnerabilities","id":"check-package-vulnerabilities"},{"level":1,"text":"Memory usage analysis","id":"memory-usage-analysis"},{"level":1,"text":"Network connectivity","id":"network-connectivity"},{"level":1,"text":"Process monitoring","id":"process-monitoring"},{"level":1,"text":"Debug mode (development only)","id":"debug-mode-development-only"},{"level":1,"text":"Cluster mode debugging","id":"cluster-mode-debugging"},{"level":1,"text":"Database connection issues","id":"database-connection-issues"},{"level":1,"text":"Check MongoDB connection","id":"check-mongodb-connection"},{"level":1,"text":"Check PostgreSQL connection","id":"check-postgresql-connection"},{"level":1,"text":"SSL/HTTPS issues","id":"sslhttps-issues"},{"level":1,"text":"Environment issues","id":"environment-issues"},{"level":1,"text":"Restart applications","id":"restart-applications"},{"level":1,"text":"Or","id":"or"},{"level":1,"text":"Clean npm cache","id":"clean-npm-cache"},{"level":1,"text":"Rebuild native modules","id":"rebuild-native-modules"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-19T18:15:54.327Z","metadataVersion":"2.0"},"category":{"key":"miscellaneous","name":"Miscellaneous","description":"Miscellaneous tools and applications","icon":"🔧","color":"#6272a4"},"relatedGuides":[{"name":"ackee","displayName":"ackee Installation Guide","slug":"ackee","description":"ackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,3000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/ackee","documentationUrl":"https://howtomgr.github.io/miscellaneous/ackee","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ackee","updatedAt":"2025-09-16T16:55:26Z","createdAt":"2025-09-16T02:15:54Z","readmeRaw":"# ackee Installation Guide\n\nackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3000 (default ackee port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ackee\nsudo dnf install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install ackee\nsudo apt install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\nackee --version\n```\n\n### Arch Linux\n\n```bash\n# Install ackee\nsudo pacman -S ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Verify installation\nackee --version\n```\n\n### Alpine Linux\n\n```bash\n# Install ackee\napk add --no-cache ackee\n\n# Enable and start service\nrc-update add ackee default\nrc-service ackee start\n\n# Verify installation\nackee --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install ackee\nsudo zypper install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install ackee\n\n# Start service\nbrew services start ackee\n\n# Verify installation\nackee --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install ackee\n\n# Enable in rc.conf\necho 'ackee_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Verify installation\nackee --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install ackee\n\n# Or using Scoop\nscoop install ackee\n\n# Verify installation\nackee --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/ackee\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nackee --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable ackee\n\n# Start service\nsudo systemctl start ackee\n\n# Stop service\nsudo systemctl stop ackee\n\n# Restart service\nsudo systemctl restart ackee\n\n# Check status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add ackee default\n\n# Start service\nrc-service ackee start\n\n# Stop service\nrc-service ackee stop\n\n# Restart service\nrc-service ackee restart\n\n# Check status\nrc-service ackee status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'ackee_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Stop service\nservice ackee stop\n\n# Restart service\nservice ackee restart\n\n# Check status\nservice ackee status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start ackee\nbrew services stop ackee\nbrew services restart ackee\n\n# Check status\nbrew services list | grep ackee\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start ackee\n\n# Stop service\nnet stop ackee\n\n# Using PowerShell\nStart-Service ackee\nStop-Service ackee\nRestart-Service ackee\n\n# Check status\nGet-Service ackee\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream ackee_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name ackee.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ackee.example.com;\n\n    ssl_certificate /etc/ssl/certs/ackee.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ackee.example.com.key;\n\n    location / {\n        proxy_pass http://ackee_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName ackee.example.com\n    Redirect permanent / https://ackee.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName ackee.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ackee.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ackee.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend ackee_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ackee.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ackee_backend\n\nbackend ackee_backend\n    balance roundrobin\n    server ackee1 127.0.0.1:3000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R ackee:ackee /etc/ackee\nsudo chmod 750 /etc/ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n\n# Monitor resource usage\ntop -p $(pgrep ackee)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/ackee\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/ackee-backup-$DATE.tar.gz\" /etc/ackee /var/lib/ackee\n\necho \"Backup completed: $BACKUP_DIR/ackee-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop ackee\n\n# Restore from backup\ntar -xzf /backup/ackee/ackee-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ackee\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u ackee -n 100\nsudo tail -f /var/log/ackee/ackee.log\n\n# Check configuration\nackee --version\n\n# Check permissions\nls -la /etc/ackee\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep ackee)\n\n# Check disk I/O\niotop -p $(pgrep ackee)\n\n# Check connections\nss -an | grep 3000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  ackee:\n    image: ackee:latest\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./config:/etc/ackee\n      - ./data:/var/lib/ackee\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ackee\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade ackee\n\n# Arch Linux\nsudo pacman -Syu ackee\n\n# Alpine Linux\napk update && apk upgrade ackee\n\n# openSUSE\nsudo zypper update ackee\n\n# FreeBSD\npkg update && pkg upgrade ackee\n\n# Always backup before updates\ntar -czf /backup/ackee-pre-update-$(date +%Y%m%d).tar.gz /etc/ackee\n\n# Restart after updates\nsudo systemctl restart ackee\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/ackee\n\n# Clean old logs\nfind /var/log/ackee -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ackee\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.ackee.org/\n- GitHub Repository: https://github.com/ackee/ackee\n- Community Forum: https://forum.ackee.org/\n- Best Practices Guide: https://docs.ackee.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">ackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3000 (default ackee port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ackee\nsudo dnf install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install ackee\nsudo apt install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\nsudo pacman -S ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\napk add --no-cache ackee\n\n# Enable and start service\nrc-update add ackee default\nrc-service ackee start\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\nsudo zypper install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install ackee\n\n# Start service\nbrew services start ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install ackee\n\n# Enable in rc.conf\necho &#039;ackee_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install ackee\n\n# Or using Scoop\nscoop install ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/ackee\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nackee --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable ackee\n\n# Start service\nsudo systemctl start ackee\n\n# Stop service\nsudo systemctl stop ackee\n\n# Restart service\nsudo systemctl restart ackee\n\n# Check status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add ackee default\n\n# Start service\nrc-service ackee start\n\n# Stop service\nrc-service ackee stop\n\n# Restart service\nrc-service ackee restart\n\n# Check status\nrc-service ackee status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;ackee_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Stop service\nservice ackee stop\n\n# Restart service\nservice ackee restart\n\n# Check status\nservice ackee status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start ackee\nbrew services stop ackee\nbrew services restart ackee\n\n# Check status\nbrew services list | grep ackee</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start ackee\n\n# Stop service\nnet stop ackee\n\n# Using PowerShell\nStart-Service ackee\nStop-Service ackee\nRestart-Service ackee\n\n# Check status\nGet-Service ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream ackee_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name ackee.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ackee.example.com;\n\n    ssl_certificate /etc/ssl/certs/ackee.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ackee.example.com.key;\n\n    location / {\n        proxy_pass http://ackee_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName ackee.example.com\n    Redirect permanent / https://ackee.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName ackee.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ackee.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ackee.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend ackee_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ackee.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ackee_backend\n\nbackend ackee_backend\n    balance roundrobin\n    server ackee1 127.0.0.1:3000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R ackee:ackee /etc/ackee\nsudo chmod 750 /etc/ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n\n# Monitor resource usage\ntop -p $(pgrep ackee)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/ackee&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/ackee-backup-$DATE.tar.gz&quot; /etc/ackee /var/lib/ackee\n\necho &quot;Backup completed: $BACKUP_DIR/ackee-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop ackee\n\n# Restore from backup\ntar -xzf /backup/ackee/ackee-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u ackee -n 100\nsudo tail -f /var/log/ackee/ackee.log\n\n# Check configuration\nackee --version\n\n# Check permissions\nls -la /etc/ackee</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep ackee)\n\n# Check disk I/O\niotop -p $(pgrep ackee)\n\n# Check connections\nss -an | grep 3000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  ackee:\n    image: ackee:latest\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./config:/etc/ackee\n      - ./data:/var/lib/ackee\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ackee\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade ackee\n\n# Arch Linux\nsudo pacman -Syu ackee\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade ackee\n\n# openSUSE\nsudo zypper update ackee\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade ackee\n\n# Always backup before updates\ntar -czf /backup/ackee-pre-update-$(date +%Y%m%d).tar.gz /etc/ackee\n\n# Restart after updates\nsudo systemctl restart ackee</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/ackee\n\n# Clean old logs\nfind /var/log/ackee -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.ackee.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/ackee/ackee</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.ackee.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.ackee.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1265,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install ackee","id":"install-ackee"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install ackee","id":"install-ackee"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install ackee","id":"install-ackee"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install ackee","id":"install-ackee"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install ackee","id":"install-ackee"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-19T18:17:54.951Z","metadataVersion":"2.0"},{"name":"appwrite","displayName":"Appwrite Installation Guide","slug":"appwrite","description":"Appwrite is an open-source backend-as-a-service platform that provides developers with all the core APIs required to build modern applications. It includes authentication, databases, storage, functions, and real-time capabilities.","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[10,80,443,999],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","orchestration","observability","data-storage","security","data-protection","communication","networking"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/appwrite","documentationUrl":"https://howtomgr.github.io/miscellaneous/appwrite","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/appwrite","updatedAt":"2025-09-16T16:57:20Z","createdAt":"2025-09-16T02:18:14Z","readmeRaw":"# Appwrite Installation Guide\n\nAppwrite is an open-source backend-as-a-service platform that provides developers with all the core APIs required to build modern applications. It includes authentication, databases, storage, functions, and real-time capabilities.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- Docker and Docker Compose installed\n- Minimum 4GB RAM (8GB recommended for production)\n- 10GB free disk space minimum\n- Domain name with DNS configured (for production)\n- SSL certificate (Let's Encrypt recommended)\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### Docker Compose Installation (Recommended)\n\n1. **Download Appwrite**:\n```bash\n# Create installation directory\nmkdir -p /opt/appwrite\ncd /opt/appwrite\n\n# Download docker-compose.yml\ncurl -o docker-compose.yml https://appwrite.io/install/compose\n\n# Download .env file\ncurl -o .env https://appwrite.io/install/env\n```\n\n2. **Configure Environment**:\n```bash\n# Edit environment variables\nnano .env\n\n# Key variables to configure:\n# _APP_ENV=production\n# _APP_DOMAIN=your-domain.com\n# _APP_DOMAIN_TARGET=your-domain.com\n# _APP_REDIS_PASS=your-redis-password\n# _APP_DB_PASS=your-database-password\n# _APP_OPENSSL_KEY_V1=your-32-char-key\n```\n\n3. **Generate OpenSSL Key**:\n```bash\n# Generate a secure key\nopenssl rand -hex 32\n```\n\n4. **Start Appwrite**:\n```bash\n# Start services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f\n```\n\n### Manual Docker Installation\n\n```bash\n# Create network\ndocker network create appwrite\n\n# Run MariaDB\ndocker run -d \\\n  --name appwrite-mariadb \\\n  --network appwrite \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=appwrite \\\n  -e MYSQL_USER=appwrite \\\n  -e MYSQL_PASSWORD=password \\\n  -v appwrite-mariadb:/var/lib/mysql \\\n  mariadb:10\n\n# Run Redis\ndocker run -d \\\n  --name appwrite-redis \\\n  --network appwrite \\\n  -v appwrite-redis:/data \\\n  redis:alpine\n\n# Run Appwrite\ndocker run -d \\\n  --name appwrite \\\n  --network appwrite \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -e _APP_ENV=production \\\n  -e _APP_OPENSSL_KEY_V1=your-32-char-key \\\n  -e _APP_DOMAIN=localhost \\\n  -e _APP_DB_HOST=appwrite-mariadb \\\n  -e _APP_DB_PORT=3306 \\\n  -e _APP_DB_SCHEMA=appwrite \\\n  -e _APP_DB_USER=appwrite \\\n  -e _APP_DB_PASS=password \\\n  -e _APP_REDIS_HOST=appwrite-redis \\\n  -e _APP_REDIS_PORT=6379 \\\n  -v appwrite-uploads:/storage/uploads \\\n  -v appwrite-cache:/storage/cache \\\n  -v appwrite-config:/storage/config \\\n  -v appwrite-certificates:/storage/certificates \\\n  -v appwrite-functions:/storage/functions \\\n  appwrite/appwrite\n```\n\n## 4. Configuration\n\n### SSL/TLS Setup\n\n1. **Let's Encrypt (Automatic)**:\n```bash\n# Appwrite handles SSL automatically for configured domains\n# Ensure ports 80 and 443 are accessible\n# Domain must point to server IP\n```\n\n2. **Custom SSL Certificate**:\n```bash\n# Copy certificates\ncp /path/to/cert.pem /opt/appwrite/certificates/main.crt\ncp /path/to/key.pem /opt/appwrite/certificates/main.key\n\n# Restart Appwrite\ncd /opt/appwrite\ndocker-compose restart\n```\n\n### Email Configuration\n\nEdit `.env` file:\n```bash\n_APP_SMTP_HOST=smtp.gmail.com\n_APP_SMTP_PORT=587\n_APP_SMTP_SECURE=tls\n_APP_SMTP_USERNAME=your-email@gmail.com\n_APP_SMTP_PASSWORD=your-app-password\n```\n\n### Storage Configuration\n\n1. **Local Storage** (Default):\n```bash\n# Storage is handled automatically\n# Files stored in Docker volumes\n```\n\n2. **S3 Compatible Storage**:\n```bash\n_APP_STORAGE_DEVICE=s3\n_APP_STORAGE_S3_ACCESS_KEY=your-access-key\n_APP_STORAGE_S3_SECRET=your-secret-key\n_APP_STORAGE_S3_REGION=us-east-1\n_APP_STORAGE_S3_BUCKET=appwrite-storage\n```\n\n### Functions Runtime\n\nEnable additional runtimes in `.env`:\n```bash\n_APP_FUNCTIONS_RUNTIMES=node-18.0,python-3.10,php-8.1,ruby-3.1\n```\n\n## Security Configuration\n\n### Firewall Rules\n\n```bash\n# Allow HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow Appwrite console (if different port)\nsudo ufw allow 8080/tcp\n```\n\n### Security Headers\n\nAppwrite includes security headers by default:\n- Content Security Policy\n- X-Frame-Options\n- X-Content-Type-Options\n- Strict-Transport-Security\n\n### API Keys and Secrets\n\n1. **Generate secure keys**:\n```bash\n# Generate encryption key\nopenssl rand -hex 32\n\n# Generate session secret\nopenssl rand -hex 32\n```\n\n2. **Rotate keys regularly**:\n```bash\n# Update in .env\n_APP_OPENSSL_KEY_V1=new-key-here\n\n# Restart services\ndocker-compose restart\n```\n\n## Database Management\n\n### Backup\n\n```bash\n# Backup database\ndocker exec appwrite-mariadb mysqldump -u root -p appwrite > backup.sql\n\n# Backup volumes\ndocker run --rm -v appwrite-mariadb:/data -v $(pwd):/backup ubuntu tar czf /backup/mariadb-backup.tar.gz /data\n```\n\n### Restore\n\n```bash\n# Restore database\ndocker exec -i appwrite-mariadb mysql -u root -p appwrite < backup.sql\n\n# Restore volumes\ndocker run --rm -v appwrite-mariadb:/data -v $(pwd):/backup ubuntu tar xzf /backup/mariadb-backup.tar.gz -C /\n```\n\n## Performance Optimization\n\n### Redis Configuration\n\n```bash\n# Edit Redis configuration\ndocker exec -it appwrite-redis redis-cli\n\n# Set max memory\nCONFIG SET maxmemory 2gb\nCONFIG SET maxmemory-policy allkeys-lru\n```\n\n### Database Optimization\n\n```bash\n# Optimize tables\ndocker exec appwrite-mariadb mysqlcheck -u root -p --optimize appwrite\n\n# Configure MariaDB\ndocker exec -it appwrite-mariadb mysql -u root -p\nSET GLOBAL innodb_buffer_pool_size = 1G;\nSET GLOBAL innodb_log_file_size = 256M;\n```\n\n### Scaling\n\n1. **Horizontal Scaling**:\n```bash\n# Use Docker Swarm or Kubernetes\n# Configure load balancer\n# Share storage between instances\n```\n\n2. **Vertical Scaling**:\n```bash\n# Increase container resources\ndocker-compose down\n# Edit docker-compose.yml to add resource limits\ndocker-compose up -d\n```\n\n## Monitoring\n\n### Health Checks\n\n```bash\n# Check service health\ncurl http://localhost/v1/health\n\n# Check specific services\ncurl http://localhost/v1/health/db\ncurl http://localhost/v1/health/cache\ncurl http://localhost/v1/health/time\n```\n\n### Logging\n\n```bash\n# View all logs\ndocker-compose logs -f\n\n# View specific service logs\ndocker-compose logs -f appwrite\ndocker-compose logs -f appwrite-worker-database\n\n# Export logs\ndocker-compose logs > appwrite-logs.txt\n```\n\n### Metrics\n\nEnable Prometheus metrics:\n```bash\n_APP_PROMETHEUS_ENABLE=enabled\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Port conflicts**:\n```bash\n# Check port usage\nsudo netstat -tlnp | grep -E ':(80|443|8080)'\n\n# Change ports in docker-compose.yml\n```\n\n2. **Permission issues**:\n```bash\n# Fix volume permissions\nsudo chown -R 999:999 /var/lib/docker/volumes/appwrite_*\n```\n\n3. **Memory issues**:\n```bash\n# Check memory usage\ndocker stats\n\n# Increase memory limits in docker-compose.yml\n```\n\n### Debug Mode\n\nEnable debug mode in `.env`:\n```bash\n_APP_ENV=development\n_APP_DEBUG=true\n```\n\n## Maintenance\n\n### Updates\n\n```bash\n# Backup first\n./backup.sh\n\n# Pull latest images\ndocker-compose pull\n\n# Restart services\ndocker-compose down\ndocker-compose up -d\n```\n\n### Cleanup\n\n```bash\n# Remove unused images\ndocker image prune -a\n\n# Clean build cache\ndocker builder prune\n\n# Remove old logs\ndocker-compose logs --tail=0 > /dev/null\n```\n\n## SDK Integration\n\n### JavaScript/Node.js\n\n```javascript\nconst sdk = require('node-appwrite');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://your-domain.com/v1')\n    .setProject('your-project-id')\n    .setKey('your-api-key');\n\nconst database = new sdk.Databases(client);\nconst storage = new sdk.Storage(client);\n```\n\n### Python\n\n```python\nfrom appwrite.client import Client\nfrom appwrite.services.databases import Databases\n\nclient = Client()\nclient.set_endpoint('https://your-domain.com/v1')\nclient.set_project('your-project-id')\nclient.set_key('your-api-key')\n\ndatabases = Databases(client)\n```\n\n### Flutter\n\n```dart\nimport 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://your-domain.com/v1')\n    .setProject('your-project-id');\n\nfinal account = Account(client);\nfinal databases = Databases(client);\n```\n\n## Additional Resources\n\n- [Official Documentation](https://appwrite.io/docs)\n- [API Reference](https://appwrite.io/docs/client/account)\n- [GitHub Repository](https://github.com/appwrite/appwrite)\n- [Community Discord](https://appwrite.io/discord)\n- [Docker Hub](https://hub.docker.com/r/appwrite/appwrite)\n- [SDK Libraries](https://appwrite.io/docs/sdks)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">Appwrite is an open-source backend-as-a-service platform that provides developers with all the core APIs required to build modern applications. It includes authentication, databases, storage, functions, and real-time capabilities.</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\">Docker and Docker Compose installed</li>\n<li class=\"mobile-list-item\">Minimum 4GB RAM (8GB recommended for production)</li>\n<li class=\"mobile-list-item\">10GB free disk space minimum</li>\n<li class=\"mobile-list-item\">Domain name with DNS configured (for production)</li>\n<li class=\"mobile-list-item\">SSL certificate (Let's Encrypt recommended)</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"docker-compose-installation-recommended\" class=\"mobile-header\">Docker Compose Installation (Recommended)</h3>\n<p class=\"mobile-paragraph\">1. <strong>Download Appwrite</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create installation directory\nmkdir -p /opt/appwrite\ncd /opt/appwrite\n\n# Download docker-compose.yml\ncurl -o docker-compose.yml https://appwrite.io/install/compose\n\n# Download .env file\ncurl -o .env https://appwrite.io/install/env</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Configure Environment</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit environment variables\nnano .env\n\n# Key variables to configure:\n# _APP_ENV=production\n# _APP_DOMAIN=your-domain.com\n# _APP_DOMAIN_TARGET=your-domain.com\n# _APP_REDIS_PASS=your-redis-password\n# _APP_DB_PASS=your-database-password\n# _APP_OPENSSL_KEY_V1=your-32-char-key</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Generate OpenSSL Key</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate a secure key\nopenssl rand -hex 32</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Start Appwrite</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-docker-installation\" class=\"mobile-header\">Manual Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create network\ndocker network create appwrite\n\n# Run MariaDB\ndocker run -d \\\n  --name appwrite-mariadb \\\n  --network appwrite \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=appwrite \\\n  -e MYSQL_USER=appwrite \\\n  -e MYSQL_PASSWORD=password \\\n  -v appwrite-mariadb:/var/lib/mysql \\\n  mariadb:10\n\n# Run Redis\ndocker run -d \\\n  --name appwrite-redis \\\n  --network appwrite \\\n  -v appwrite-redis:/data \\\n  redis:alpine\n\n# Run Appwrite\ndocker run -d \\\n  --name appwrite \\\n  --network appwrite \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -e _APP_ENV=production \\\n  -e _APP_OPENSSL_KEY_V1=your-32-char-key \\\n  -e _APP_DOMAIN=localhost \\\n  -e _APP_DB_HOST=appwrite-mariadb \\\n  -e _APP_DB_PORT=3306 \\\n  -e _APP_DB_SCHEMA=appwrite \\\n  -e _APP_DB_USER=appwrite \\\n  -e _APP_DB_PASS=password \\\n  -e _APP_REDIS_HOST=appwrite-redis \\\n  -e _APP_REDIS_PORT=6379 \\\n  -v appwrite-uploads:/storage/uploads \\\n  -v appwrite-cache:/storage/cache \\\n  -v appwrite-config:/storage/config \\\n  -v appwrite-certificates:/storage/certificates \\\n  -v appwrite-functions:/storage/functions \\\n  appwrite/appwrite</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Let's Encrypt (Automatic)</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Appwrite handles SSL automatically for configured domains\n# Ensure ports 80 and 443 are accessible\n# Domain must point to server IP</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Custom SSL Certificate</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Copy certificates\ncp /path/to/cert.pem /opt/appwrite/certificates/main.crt\ncp /path/to/key.pem /opt/appwrite/certificates/main.key\n\n# Restart Appwrite\ncd /opt/appwrite\ndocker-compose restart</code></pre>\n      </div>\n    </div>\n<h3 id=\"email-configuration\" class=\"mobile-header\">Email Configuration</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">.env</code> file:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_SMTP_HOST=smtp.gmail.com\n_APP_SMTP_PORT=587\n_APP_SMTP_SECURE=tls\n_APP_SMTP_USERNAME=your-email@gmail.com\n_APP_SMTP_PASSWORD=your-app-password</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-configuration\" class=\"mobile-header\">Storage Configuration</h3>\n<p class=\"mobile-paragraph\">1. <strong>Local Storage</strong> (Default):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Storage is handled automatically\n# Files stored in Docker volumes</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>S3 Compatible Storage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_STORAGE_DEVICE=s3\n_APP_STORAGE_S3_ACCESS_KEY=your-access-key\n_APP_STORAGE_S3_SECRET=your-secret-key\n_APP_STORAGE_S3_REGION=us-east-1\n_APP_STORAGE_S3_BUCKET=appwrite-storage</code></pre>\n      </div>\n    </div>\n<h3 id=\"functions-runtime\" class=\"mobile-header\">Functions Runtime</h3>\n<p class=\"mobile-paragraph\">Enable additional runtimes in <code class=\"mobile-inline-code\">.env</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_FUNCTIONS_RUNTIMES=node-18.0,python-3.10,php-8.1,ruby-3.1</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow Appwrite console (if different port)\nsudo ufw allow 8080/tcp</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-headers\" class=\"mobile-header\">Security Headers</h3>\n<p class=\"mobile-paragraph\">Appwrite includes security headers by default:</p>\n<li class=\"mobile-list-item\">Content Security Policy</li>\n<li class=\"mobile-list-item\">X-Frame-Options</li>\n<li class=\"mobile-list-item\">X-Content-Type-Options</li>\n<li class=\"mobile-list-item\">Strict-Transport-Security</li>\n<h3 id=\"api-keys-and-secrets\" class=\"mobile-header\">API Keys and Secrets</h3>\n<p class=\"mobile-paragraph\">1. <strong>Generate secure keys</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate encryption key\nopenssl rand -hex 32\n\n# Generate session secret\nopenssl rand -hex 32</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Rotate keys regularly</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update in .env\n_APP_OPENSSL_KEY_V1=new-key-here\n\n# Restart services\ndocker-compose restart</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-management\" class=\"mobile-header\">Database Management</h2>\n<h3 id=\"backup\" class=\"mobile-header\">Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup database\ndocker exec appwrite-mariadb mysqldump -u root -p appwrite &gt; backup.sql\n\n# Backup volumes\ndocker run --rm -v appwrite-mariadb:/data -v $(pwd):/backup ubuntu tar czf /backup/mariadb-backup.tar.gz /data</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore\" class=\"mobile-header\">Restore</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Restore database\ndocker exec -i appwrite-mariadb mysql -u root -p appwrite &lt; backup.sql\n\n# Restore volumes\ndocker run --rm -v appwrite-mariadb:/data -v $(pwd):/backup ubuntu tar xzf /backup/mariadb-backup.tar.gz -C /</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"redis-configuration\" class=\"mobile-header\">Redis Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit Redis configuration\ndocker exec -it appwrite-redis redis-cli\n\n# Set max memory\nCONFIG SET maxmemory 2gb\nCONFIG SET maxmemory-policy allkeys-lru</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize tables\ndocker exec appwrite-mariadb mysqlcheck -u root -p --optimize appwrite\n\n# Configure MariaDB\ndocker exec -it appwrite-mariadb mysql -u root -p\nSET GLOBAL innodb_buffer_pool_size = 1G;\nSET GLOBAL innodb_log_file_size = 256M;</code></pre>\n      </div>\n    </div>\n<h3 id=\"scaling\" class=\"mobile-header\">Scaling</h3>\n<p class=\"mobile-paragraph\">1. <strong>Horizontal Scaling</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use Docker Swarm or Kubernetes\n# Configure load balancer\n# Share storage between instances</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Vertical Scaling</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase container resources\ndocker-compose down\n# Edit docker-compose.yml to add resource limits\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service health\ncurl http://localhost/v1/health\n\n# Check specific services\ncurl http://localhost/v1/health/db\ncurl http://localhost/v1/health/cache\ncurl http://localhost/v1/health/time</code></pre>\n      </div>\n    </div>\n<h3 id=\"logging\" class=\"mobile-header\">Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># View all logs\ndocker-compose logs -f\n\n# View specific service logs\ndocker-compose logs -f appwrite\ndocker-compose logs -f appwrite-worker-database\n\n# Export logs\ndocker-compose logs &gt; appwrite-logs.txt</code></pre>\n      </div>\n    </div>\n<h3 id=\"metrics\" class=\"mobile-header\">Metrics</h3>\n<p class=\"mobile-paragraph\">Enable Prometheus metrics:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_PROMETHEUS_ENABLE=enabled</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Port conflicts</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check port usage\nsudo netstat -tlnp | grep -E &#039;:(80|443|8080)&#039;\n\n# Change ports in docker-compose.yml</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Permission issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix volume permissions\nsudo chown -R 999:999 /var/lib/docker/volumes/appwrite_*</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Memory issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check memory usage\ndocker stats\n\n# Increase memory limits in docker-compose.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<p class=\"mobile-paragraph\">Enable debug mode in <code class=\"mobile-inline-code\">.env</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_ENV=development\n_APP_DEBUG=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"updates\" class=\"mobile-header\">Updates</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup first\n./backup.sh\n\n# Pull latest images\ndocker-compose pull\n\n# Restart services\ndocker-compose down\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup\" class=\"mobile-header\">Cleanup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Remove unused images\ndocker image prune -a\n\n# Clean build cache\ndocker builder prune\n\n# Remove old logs\ndocker-compose logs --tail=0 &gt; /dev/null</code></pre>\n      </div>\n    </div>\n<h2 id=\"sdk-integration\" class=\"mobile-header\">SDK Integration</h2>\n<h3 id=\"javascriptnodejs\" class=\"mobile-header\">JavaScript/Node.js</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">const sdk = require(&#039;node-appwrite&#039;);\n\nconst client = new sdk.Client()\n    .setEndpoint(&#039;https://your-domain.com/v1&#039;)\n    .setProject(&#039;your-project-id&#039;)\n    .setKey(&#039;your-api-key&#039;);\n\nconst database = new sdk.Databases(client);\nconst storage = new sdk.Storage(client);</code></pre>\n      </div>\n    </div>\n<h3 id=\"python\" class=\"mobile-header\">Python</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">from appwrite.client import Client\nfrom appwrite.services.databases import Databases\n\nclient = Client()\nclient.set_endpoint(&#039;https://your-domain.com/v1&#039;)\nclient.set_project(&#039;your-project-id&#039;)\nclient.set_key(&#039;your-api-key&#039;)\n\ndatabases = Databases(client)</code></pre>\n      </div>\n    </div>\n<h3 id=\"flutter\" class=\"mobile-header\">Flutter</h3>\n<div class=\"mobile-code-block\" data-language=\"dart\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">dart</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-dart\">import &#039;package:appwrite/appwrite.dart&#039;;\n\nfinal client = Client()\n    .setEndpoint(&#039;https://your-domain.com/v1&#039;)\n    .setProject(&#039;your-project-id&#039;);\n\nfinal account = Account(client);\nfinal databases = Databases(client);</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://appwrite.io/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://appwrite.io/docs/client/account\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/appwrite/appwrite\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://appwrite.io/discord\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Discord</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://hub.docker.com/r/appwrite/appwrite\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Hub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://appwrite.io/docs/sdks\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">SDK Libraries</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1082,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Docker Compose Installation (Recommended)","id":"docker-compose-installation-recommended"},{"level":1,"text":"Create installation directory","id":"create-installation-directory"},{"level":1,"text":"Download docker-compose.yml","id":"download-docker-composeyml"},{"level":1,"text":"Download .env file","id":"download-env-file"},{"level":1,"text":"Edit environment variables","id":"edit-environment-variables"},{"level":1,"text":"Key variables to configure:","id":"key-variables-to-configure"},{"level":1,"text":"_APP_ENV=production","id":"_app_envproduction"},{"level":1,"text":"_APP_DOMAIN=your-domain.com","id":"_app_domainyour-domaincom"},{"level":1,"text":"_APP_DOMAIN_TARGET=your-domain.com","id":"_app_domain_targetyour-domaincom"},{"level":1,"text":"_APP_REDIS_PASS=your-redis-password","id":"_app_redis_passyour-redis-password"},{"level":1,"text":"_APP_DB_PASS=your-database-password","id":"_app_db_passyour-database-password"},{"level":1,"text":"_APP_OPENSSL_KEY_V1=your-32-char-key","id":"_app_openssl_key_v1your-32-char-key"},{"level":1,"text":"Generate a secure key","id":"generate-a-secure-key"},{"level":1,"text":"Start services","id":"start-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"Manual Docker Installation","id":"manual-docker-installation"},{"level":1,"text":"Create network","id":"create-network"},{"level":1,"text":"Run MariaDB","id":"run-mariadb"},{"level":1,"text":"Run Redis","id":"run-redis"},{"level":1,"text":"Run Appwrite","id":"run-appwrite"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"SSL/TLS Setup","id":"ssltls-setup"},{"level":1,"text":"Appwrite handles SSL automatically for configured domains","id":"appwrite-handles-ssl-automatically-for-configured-domains"},{"level":1,"text":"Ensure ports 80 and 443 are accessible","id":"ensure-ports-80-and-443-are-accessible"},{"level":1,"text":"Domain must point to server IP","id":"domain-must-point-to-server-ip"},{"level":1,"text":"Copy certificates","id":"copy-certificates"},{"level":1,"text":"Restart Appwrite","id":"restart-appwrite"},{"level":3,"text":"Email Configuration","id":"email-configuration"},{"level":3,"text":"Storage Configuration","id":"storage-configuration"},{"level":1,"text":"Storage is handled automatically","id":"storage-is-handled-automatically"},{"level":1,"text":"Files stored in Docker volumes","id":"files-stored-in-docker-volumes"},{"level":3,"text":"Functions Runtime","id":"functions-runtime"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":1,"text":"Allow HTTP/HTTPS","id":"allow-httphttps"},{"level":1,"text":"Allow Appwrite console (if different port)","id":"allow-appwrite-console-if-different-port"},{"level":3,"text":"Security Headers","id":"security-headers"},{"level":3,"text":"API Keys and Secrets","id":"api-keys-and-secrets"},{"level":1,"text":"Generate encryption key","id":"generate-encryption-key"},{"level":1,"text":"Generate session secret","id":"generate-session-secret"},{"level":1,"text":"Update in .env","id":"update-in-env"},{"level":1,"text":"Restart services","id":"restart-services"},{"level":2,"text":"Database Management","id":"database-management"},{"level":3,"text":"Backup","id":"backup"},{"level":1,"text":"Backup database","id":"backup-database"},{"level":1,"text":"Backup volumes","id":"backup-volumes"},{"level":3,"text":"Restore","id":"restore"},{"level":1,"text":"Restore database","id":"restore-database"},{"level":1,"text":"Restore volumes","id":"restore-volumes"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Redis Configuration","id":"redis-configuration"},{"level":1,"text":"Edit Redis configuration","id":"edit-redis-configuration"},{"level":1,"text":"Set max memory","id":"set-max-memory"},{"level":3,"text":"Database Optimization","id":"database-optimization"},{"level":1,"text":"Optimize tables","id":"optimize-tables"},{"level":1,"text":"Configure MariaDB","id":"configure-mariadb"},{"level":3,"text":"Scaling","id":"scaling"},{"level":1,"text":"Use Docker Swarm or Kubernetes","id":"use-docker-swarm-or-kubernetes"},{"level":1,"text":"Configure load balancer","id":"configure-load-balancer"},{"level":1,"text":"Share storage between instances","id":"share-storage-between-instances"},{"level":1,"text":"Increase container resources","id":"increase-container-resources"},{"level":1,"text":"Edit docker-compose.yml to add resource limits","id":"edit-docker-composeyml-to-add-resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":1,"text":"Check service health","id":"check-service-health"},{"level":1,"text":"Check specific services","id":"check-specific-services"},{"level":3,"text":"Logging","id":"logging"},{"level":1,"text":"View all logs","id":"view-all-logs"},{"level":1,"text":"View specific service logs","id":"view-specific-service-logs"},{"level":1,"text":"Export logs","id":"export-logs"},{"level":3,"text":"Metrics","id":"metrics"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check port usage","id":"check-port-usage"},{"level":1,"text":"Change ports in docker-compose.yml","id":"change-ports-in-docker-composeyml"},{"level":1,"text":"Fix volume permissions","id":"fix-volume-permissions"},{"level":1,"text":"Check memory usage","id":"check-memory-usage"},{"level":1,"text":"Increase memory limits in docker-compose.yml","id":"increase-memory-limits-in-docker-composeyml"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Updates","id":"updates"},{"level":1,"text":"Backup first","id":"backup-first"},{"level":1,"text":"Pull latest images","id":"pull-latest-images"},{"level":1,"text":"Restart services","id":"restart-services"},{"level":3,"text":"Cleanup","id":"cleanup"},{"level":1,"text":"Remove unused images","id":"remove-unused-images"},{"level":1,"text":"Clean build cache","id":"clean-build-cache"},{"level":1,"text":"Remove old logs","id":"remove-old-logs"},{"level":2,"text":"SDK Integration","id":"sdk-integration"},{"level":3,"text":"JavaScript/Node.js","id":"javascriptnodejs"},{"level":3,"text":"Python","id":"python"},{"level":3,"text":"Flutter","id":"flutter"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-19T18:17:49.290Z","metadataVersion":"2.0"},{"name":"arangodb","displayName":"arangodb Installation Guide","slug":"arangodb","description":"arangodb is a free and open-source multi-model NoSQL database. ArangoDB combines document, graph, and key-value data models with one query language, serving as an alternative to using multiple specialized databases","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8529],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/arangodb","documentationUrl":"https://howtomgr.github.io/miscellaneous/arangodb","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/arangodb","updatedAt":"2025-09-16T16:57:34Z","createdAt":"2025-09-16T02:18:32Z","readmeRaw":"# arangodb Installation Guide\n\narangodb is a free and open-source multi-model NoSQL database. ArangoDB combines document, graph, and key-value data models with one query language, serving as an alternative to using multiple specialized databases\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 2GB minimum (8GB+ recommended)\n  - Storage: 10GB+ for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8529 (default arangodb port)\n  - Cluster ports if distributed\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install arangodb\nsudo dnf install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narangod --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install arangodb\nsudo apt install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo ufw allow 8529\n\n# Verify installation\narangod --version\n```\n\n### Arch Linux\n\n```bash\n# Install arangodb\nsudo pacman -S arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Verify installation\narangod --version\n```\n\n### Alpine Linux\n\n```bash\n# Install arangodb\napk add --no-cache arangodb\n\n# Enable and start service\nrc-update add arangodb default\nrc-service arangodb start\n\n# Verify installation\narangod --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install arangodb\nsudo zypper install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narangod --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install arangodb\n\n# Start service\nbrew services start arangodb\n\n# Verify installation\narangod --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install arangodb\n\n# Enable in rc.conf\necho 'arangodb_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice arangodb start\n\n# Verify installation\narangod --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install arangodb\n\n# Or using Scoop\nscoop install arangodb\n\n# Verify installation\narangod --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/arangodb\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\narangod --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable arangodb\n\n# Start service\nsudo systemctl start arangodb\n\n# Stop service\nsudo systemctl stop arangodb\n\n# Restart service\nsudo systemctl restart arangodb\n\n# Check status\nsudo systemctl status arangodb\n\n# View logs\nsudo journalctl -u arangodb -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add arangodb default\n\n# Start service\nrc-service arangodb start\n\n# Stop service\nrc-service arangodb stop\n\n# Restart service\nrc-service arangodb restart\n\n# Check status\nrc-service arangodb status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'arangodb_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice arangodb start\n\n# Stop service\nservice arangodb stop\n\n# Restart service\nservice arangodb restart\n\n# Check status\nservice arangodb status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start arangodb\nbrew services stop arangodb\nbrew services restart arangodb\n\n# Check status\nbrew services list | grep arangodb\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start arangodb\n\n# Stop service\nnet stop arangodb\n\n# Using PowerShell\nStart-Service arangodb\nStop-Service arangodb\nRestart-Service arangodb\n\n# Check status\nGet-Service arangodb\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream arangodb_backend {\n    server 127.0.0.1:8529;\n}\n\nserver {\n    listen 80;\n    server_name arangodb.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name arangodb.example.com;\n\n    ssl_certificate /etc/ssl/certs/arangodb.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/arangodb.example.com.key;\n\n    location / {\n        proxy_pass http://arangodb_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName arangodb.example.com\n    Redirect permanent / https://arangodb.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName arangodb.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/arangodb.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/arangodb.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8529/\n    ProxyPassReverse / http://127.0.0.1:8529/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend arangodb_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/arangodb.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend arangodb_backend\n\nbackend arangodb_backend\n    balance roundrobin\n    server arangodb1 127.0.0.1:8529 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R arangodb:arangodb /etc/arangodb\nsudo chmod 750 /etc/arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status arangodb\n\n# View logs\nsudo journalctl -u arangodb -f\n\n# Monitor resource usage\ntop -p $(pgrep arangodb)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/arangodb\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/arangodb-backup-$DATE.tar.gz\" /etc/arangodb /var/lib/arangodb\n\necho \"Backup completed: $BACKUP_DIR/arangodb-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop arangodb\n\n# Restore from backup\ntar -xzf /backup/arangodb/arangodb-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start arangodb\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u arangodb -n 100\nsudo tail -f /var/log/arangodb/arangodb.log\n\n# Check configuration\narangod --version\n\n# Check permissions\nls -la /etc/arangodb\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8529\n\n# Test connectivity\ntelnet localhost 8529\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep arangodb)\n\n# Check disk I/O\niotop -p $(pgrep arangodb)\n\n# Check connections\nss -an | grep 8529\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  arangodb:\n    image: arangodb:latest\n    ports:\n      - \"8529:8529\"\n    volumes:\n      - ./config:/etc/arangodb\n      - ./data:/var/lib/arangodb\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update arangodb\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade arangodb\n\n# Arch Linux\nsudo pacman -Syu arangodb\n\n# Alpine Linux\napk update && apk upgrade arangodb\n\n# openSUSE\nsudo zypper update arangodb\n\n# FreeBSD\npkg update && pkg upgrade arangodb\n\n# Always backup before updates\ntar -czf /backup/arangodb-pre-update-$(date +%Y%m%d).tar.gz /etc/arangodb\n\n# Restart after updates\nsudo systemctl restart arangodb\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/arangodb\n\n# Clean old logs\nfind /var/log/arangodb -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/arangodb\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.arangodb.org/\n- GitHub Repository: https://github.com/arangodb/arangodb\n- Community Forum: https://forum.arangodb.org/\n- Best Practices Guide: https://docs.arangodb.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">arangodb is a free and open-source multi-model NoSQL database. ArangoDB combines document, graph, and key-value data models with one query language, serving as an alternative to using multiple specialized databases</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8529 (default arangodb port)</li>\n<li class=\"mobile-list-item\">Cluster ports if distributed</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install arangodb\nsudo dnf install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install arangodb\nsudo apt install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo ufw allow 8529\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arangodb\nsudo pacman -S arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arangodb\napk add --no-cache arangodb\n\n# Enable and start service\nrc-update add arangodb default\nrc-service arangodb start\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arangodb\nsudo zypper install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install arangodb\n\n# Start service\nbrew services start arangodb\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install arangodb\n\n# Enable in rc.conf\necho &#039;arangodb_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice arangodb start\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install arangodb\n\n# Or using Scoop\nscoop install arangodb\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/arangodb\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\narangod --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable arangodb\n\n# Start service\nsudo systemctl start arangodb\n\n# Stop service\nsudo systemctl stop arangodb\n\n# Restart service\nsudo systemctl restart arangodb\n\n# Check status\nsudo systemctl status arangodb\n\n# View logs\nsudo journalctl -u arangodb -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add arangodb default\n\n# Start service\nrc-service arangodb start\n\n# Stop service\nrc-service arangodb stop\n\n# Restart service\nrc-service arangodb restart\n\n# Check status\nrc-service arangodb status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;arangodb_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice arangodb start\n\n# Stop service\nservice arangodb stop\n\n# Restart service\nservice arangodb restart\n\n# Check status\nservice arangodb status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start arangodb\nbrew services stop arangodb\nbrew services restart arangodb\n\n# Check status\nbrew services list | grep arangodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start arangodb\n\n# Stop service\nnet stop arangodb\n\n# Using PowerShell\nStart-Service arangodb\nStop-Service arangodb\nRestart-Service arangodb\n\n# Check status\nGet-Service arangodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream arangodb_backend {\n    server 127.0.0.1:8529;\n}\n\nserver {\n    listen 80;\n    server_name arangodb.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name arangodb.example.com;\n\n    ssl_certificate /etc/ssl/certs/arangodb.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/arangodb.example.com.key;\n\n    location / {\n        proxy_pass http://arangodb_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName arangodb.example.com\n    Redirect permanent / https://arangodb.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName arangodb.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/arangodb.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/arangodb.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8529/\n    ProxyPassReverse / http://127.0.0.1:8529/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend arangodb_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/arangodb.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend arangodb_backend\n\nbackend arangodb_backend\n    balance roundrobin\n    server arangodb1 127.0.0.1:8529 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R arangodb:arangodb /etc/arangodb\nsudo chmod 750 /etc/arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status arangodb\n\n# View logs\nsudo journalctl -u arangodb -f\n\n# Monitor resource usage\ntop -p $(pgrep arangodb)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/arangodb&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/arangodb-backup-$DATE.tar.gz&quot; /etc/arangodb /var/lib/arangodb\n\necho &quot;Backup completed: $BACKUP_DIR/arangodb-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop arangodb\n\n# Restore from backup\ntar -xzf /backup/arangodb/arangodb-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start arangodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u arangodb -n 100\nsudo tail -f /var/log/arangodb/arangodb.log\n\n# Check configuration\narangod --version\n\n# Check permissions\nls -la /etc/arangodb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8529\n\n# Test connectivity\ntelnet localhost 8529\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep arangodb)\n\n# Check disk I/O\niotop -p $(pgrep arangodb)\n\n# Check connections\nss -an | grep 8529</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  arangodb:\n    image: arangodb:latest\n    ports:\n      - &quot;8529:8529&quot;\n    volumes:\n      - ./config:/etc/arangodb\n      - ./data:/var/lib/arangodb\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update arangodb\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade arangodb\n\n# Arch Linux\nsudo pacman -Syu arangodb\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade arangodb\n\n# openSUSE\nsudo zypper update arangodb\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade arangodb\n\n# Always backup before updates\ntar -czf /backup/arangodb-pre-update-$(date +%Y%m%d).tar.gz /etc/arangodb\n\n# Restart after updates\nsudo systemctl restart arangodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/arangodb\n\n# Clean old logs\nfind /var/log/arangodb -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/arangodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.arangodb.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/arangodb/arangodb</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.arangodb.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.arangodb.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1287,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install arangodb","id":"install-arangodb"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install arangodb","id":"install-arangodb"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install arangodb","id":"install-arangodb"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install arangodb","id":"install-arangodb"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install arangodb","id":"install-arangodb"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-19T18:17:48.633Z","metadataVersion":"2.0"}]},"__N_SSG":true}