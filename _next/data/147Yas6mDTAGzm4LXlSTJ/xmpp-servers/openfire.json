{"pageProps":{"guide":{"name":"openfire","displayName":"Openfire Installation Guide","slug":"openfire","description":"Openfire is a free and open-source XMPP Server. Cross-platform real-time collaboration server","category":"xmpp-servers","subcategory":"xmpp-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048,5222],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["xmpp-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/xmpp-servers/openfire","documentationUrl":"https://howtomgr.github.io/xmpp-servers/openfire","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/openfire","updatedAt":"2025-09-16T10:49:44Z","createdAt":"2025-09-16T07:53:35Z","readmeRaw":"# Openfire Installation Guide\n\nOpenfire is a free and open-source XMPP Server. Cross-platform real-time collaboration server\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 5222/9090 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5222/9090 (default openfire port)\n- **Dependencies**:\n  - java-11-openjdk\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install openfire\nsudo dnf install -y openfire java-11-openjdk\n\n# Enable and start service\nsudo systemctl enable --now openfire\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=openfire\nsudo firewall-cmd --reload\n\n# Verify installation\nopenfire --version || systemctl status openfire\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install openfire\nsudo apt install -y openfire java-11-openjdk\n\n# Enable and start service\nsudo systemctl enable --now openfire\n\n# Configure firewall\nsudo ufw allow 5222/9090\n\n# Verify installation\nopenfire --version || systemctl status openfire\n```\n\n### Arch Linux\n\n```bash\n# Install openfire\nsudo pacman -S openfire\n\n# Enable and start service\nsudo systemctl enable --now openfire\n\n# Verify installation\nopenfire --version || systemctl status openfire\n```\n\n### Alpine Linux\n\n```bash\n# Install openfire\napk add --no-cache openfire\n\n# Enable and start service\nrc-update add openfire default\nrc-service openfire start\n\n# Verify installation\nopenfire --version || rc-service openfire status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install openfire\nsudo zypper install -y openfire java-11-openjdk\n\n# Enable and start service\nsudo systemctl enable --now openfire\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=openfire\nsudo firewall-cmd --reload\n\n# Verify installation\nopenfire --version || systemctl status openfire\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install openfire\n\n# Start service\nbrew services start openfire\n\n# Verify installation\nopenfire --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install openfire\n\n# Enable in rc.conf\necho 'openfire_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice openfire start\n\n# Verify installation\nopenfire --version || service openfire status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install openfire\n\n# Or using Scoop\nscoop install openfire\n\n# Verify installation\nopenfire --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/openfire\n\n# Set up basic configuration\nsudo tee /etc/openfire/openfire.conf << 'EOF'\n# Openfire Configuration\n-Xms512m -Xmx1024m\nEOF\n\n# Test configuration\nsudo openfire -t || sudo openfire configtest\n\n# Reload service\nsudo systemctl reload openfire\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R openfire:openfire /etc/openfire\nsudo chmod 750 /etc/openfire\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable openfire\n\n# Start service\nsudo systemctl start openfire\n\n# Stop service\nsudo systemctl stop openfire\n\n# Restart service\nsudo systemctl restart openfire\n\n# Reload configuration\nsudo systemctl reload openfire\n\n# Check status\nsudo systemctl status openfire\n\n# View logs\nsudo journalctl -u openfire -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add openfire default\n\n# Start service\nrc-service openfire start\n\n# Stop service\nrc-service openfire stop\n\n# Restart service\nrc-service openfire restart\n\n# Check status\nrc-service openfire status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'openfire_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice openfire start\n\n# Stop service\nservice openfire stop\n\n# Restart service\nservice openfire restart\n\n# Check status\nservice openfire status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start openfire\nbrew services stop openfire\nbrew services restart openfire\n\n# Check status\nbrew services list | grep openfire\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start openfire\n\n# Stop service\nnet stop openfire\n\n# Using PowerShell\nStart-Service openfire\nStop-Service openfire\nRestart-Service openfire\n\n# Check status\nGet-Service openfire\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/openfire/openfire.conf << 'EOF'\n-Xms512m -Xmx1024m\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart openfire\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream openfire_backend {\n    server 127.0.0.1:5222/9090;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name openfire.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name openfire.example.com;\n\n    ssl_certificate /etc/ssl/certs/openfire.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/openfire.example.com.key;\n\n    location / {\n        proxy_pass http://openfire_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName openfire.example.com\n    Redirect permanent / https://openfire.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName openfire.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/openfire.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/openfire.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5222/9090/\n    ProxyPassReverse / http://127.0.0.1:5222/9090/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:5222/9090/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend openfire_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/openfire.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend openfire_backend\n\nbackend openfire_backend\n    balance roundrobin\n    option httpchk GET /health\n    server openfire1 127.0.0.1:5222/9090 check\n    server openfire2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R openfire:openfire /etc/openfire\nsudo chmod 750 /etc/openfire\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=openfire\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/openfire.conf << 'EOF'\n[openfire]\nenabled = true\nport = 5222/9090\nfilter = openfire\nlogpath = /var/log/openfire/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/openfire.key \\\n    -out /etc/ssl/certs/openfire.crt\n\n# Configure SSL in openfire\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE openfire_db;\nCREATE USER openfire_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE openfire_db TO openfire_user;\nEOF\n\n# Configure openfire to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE openfire_db;\nCREATE USER 'openfire_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON openfire_db.* TO 'openfire_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Openfire specific tuning\n-Xms512m -Xmx1024m\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nopenfire soft nofile 65535\nopenfire hard nofile 65535\nopenfire soft nproc 32768\nopenfire hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'openfire'\n    static_configs:\n      - targets: ['localhost:5222/9090']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet openfire; then\n    echo \"Openfire is running\"\n    exit 0\nelse\n    echo \"Openfire is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/openfire << 'EOF'\n/var/log/openfire/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 openfire openfire\n    postrotate\n        systemctl reload openfire > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Openfire backup script\nBACKUP_DIR=\"/backup/openfire\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop openfire\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/openfire-config-$DATE.tar.gz\" /etc/openfire\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/openfire-data-$DATE.tar.gz\" /var/lib/openfire\n\n# Start service\nsystemctl start openfire\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop openfire\n\n# Restore configuration\nsudo tar -xzf /backup/openfire/openfire-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/openfire/openfire-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R openfire:openfire /etc/openfire\nsudo chown -R openfire:openfire /var/lib/openfire\n\n# Start service\nsudo systemctl start openfire\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u openfire -n 100\nsudo tail -f /var/log/openfire/*.log\n\n# Check configuration\nsudo openfire -t || sudo openfire configtest\n\n# Check permissions\nls -la /etc/openfire\nls -la /var/lib/openfire\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5222/9090\nsudo netstat -tlnp | grep 5222/9090\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 5222/9090\nnc -zv localhost 5222/9090\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep java)\nhtop -p $(pgrep java)\n\n# Check connections\nss -ant | grep :5222/9090 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep java)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo openfire -d\n# or\nsudo openfire debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  openfire:\n    image: openfire:latest\n    container_name: openfire\n    ports:\n      - \"5222/9090:5222/9090\"\n    volumes:\n      - ./config:/etc/openfire\n      - ./data:/var/lib/openfire\n    environment:\n      - openfire_CONFIG=/etc/openfire/openfire.conf\n    restart: unless-stopped\n    networks:\n      - openfire_net\n\nnetworks:\n  openfire_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: openfire\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: openfire\n  template:\n    metadata:\n      labels:\n        app: openfire\n    spec:\n      containers:\n      - name: openfire\n        image: openfire:latest\n        ports:\n        - containerPort: 5222/9090\n        volumeMounts:\n        - name: config\n          mountPath: /etc/openfire\n      volumes:\n      - name: config\n        configMap:\n          name: openfire-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: openfire\nspec:\n  selector:\n    app: openfire\n  ports:\n  - port: 5222/9090\n    targetPort: 5222/9090\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Openfire\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install openfire\n      package:\n        name: openfire\n        state: present\n    \n    - name: Configure openfire\n      template:\n        src: openfire.conf.j2\n        dest: /etc/openfire/openfire.conf\n        owner: openfire\n        group: openfire\n        mode: '0640'\n      notify: restart openfire\n    \n    - name: Start and enable openfire\n      systemd:\n        name: openfire\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart openfire\n      systemd:\n        name: openfire\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update openfire\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade openfire\n\n# Arch Linux\nsudo pacman -Syu openfire\n\n# Alpine Linux\napk update && apk upgrade openfire\n\n# openSUSE\nsudo zypper update openfire\n\n# FreeBSD\npkg update && pkg upgrade openfire\n\n# Always backup before updates\ntar -czf /backup/openfire-pre-update-$(date +%Y%m%d).tar.gz /etc/openfire\n\n# Restart after updates\nsudo systemctl restart openfire\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/openfire -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo openfire --verify || sudo openfire check\n\n# Update databases (if applicable)\nsudo openfire-update-db\n\n# Optimize performance\nsudo openfire-optimize\n\n# Check for security updates\nsudo openfire --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.openfire.org/\n- GitHub Repository: https://github.com/openfire/openfire\n- Community Forum: https://forum.openfire.org/\n- Wiki: https://wiki.openfire.org/\n- Comparison vs ejabberd, Prosody, Tigase, Spark: https://docs.openfire.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Openfire is a free and open-source XMPP Server. Cross-platform real-time collaboration server</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 5222/9090 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5222/9090 (default openfire port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">java-11-openjdk</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install openfire\nsudo dnf install -y openfire java-11-openjdk\n\n# Enable and start service\nsudo systemctl enable --now openfire\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=openfire\nsudo firewall-cmd --reload\n\n# Verify installation\nopenfire --version || systemctl status openfire</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install openfire\nsudo apt install -y openfire java-11-openjdk\n\n# Enable and start service\nsudo systemctl enable --now openfire\n\n# Configure firewall\nsudo ufw allow 5222/9090\n\n# Verify installation\nopenfire --version || systemctl status openfire</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install openfire\nsudo pacman -S openfire\n\n# Enable and start service\nsudo systemctl enable --now openfire\n\n# Verify installation\nopenfire --version || systemctl status openfire</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install openfire\napk add --no-cache openfire\n\n# Enable and start service\nrc-update add openfire default\nrc-service openfire start\n\n# Verify installation\nopenfire --version || rc-service openfire status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install openfire\nsudo zypper install -y openfire java-11-openjdk\n\n# Enable and start service\nsudo systemctl enable --now openfire\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=openfire\nsudo firewall-cmd --reload\n\n# Verify installation\nopenfire --version || systemctl status openfire</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install openfire\n\n# Start service\nbrew services start openfire\n\n# Verify installation\nopenfire --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install openfire\n\n# Enable in rc.conf\necho &#039;openfire_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice openfire start\n\n# Verify installation\nopenfire --version || service openfire status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install openfire\n\n# Or using Scoop\nscoop install openfire\n\n# Verify installation\nopenfire --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/openfire\n\n# Set up basic configuration\nsudo tee /etc/openfire/openfire.conf &lt;&lt; &#039;EOF&#039;\n# Openfire Configuration\n-Xms512m -Xmx1024m\nEOF\n\n# Test configuration\nsudo openfire -t || sudo openfire configtest\n\n# Reload service\nsudo systemctl reload openfire</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R openfire:openfire /etc/openfire\nsudo chmod 750 /etc/openfire\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable openfire\n\n# Start service\nsudo systemctl start openfire\n\n# Stop service\nsudo systemctl stop openfire\n\n# Restart service\nsudo systemctl restart openfire\n\n# Reload configuration\nsudo systemctl reload openfire\n\n# Check status\nsudo systemctl status openfire\n\n# View logs\nsudo journalctl -u openfire -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add openfire default\n\n# Start service\nrc-service openfire start\n\n# Stop service\nrc-service openfire stop\n\n# Restart service\nrc-service openfire restart\n\n# Check status\nrc-service openfire status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;openfire_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice openfire start\n\n# Stop service\nservice openfire stop\n\n# Restart service\nservice openfire restart\n\n# Check status\nservice openfire status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start openfire\nbrew services stop openfire\nbrew services restart openfire\n\n# Check status\nbrew services list | grep openfire</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start openfire\n\n# Stop service\nnet stop openfire\n\n# Using PowerShell\nStart-Service openfire\nStop-Service openfire\nRestart-Service openfire\n\n# Check status\nGet-Service openfire</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/openfire/openfire.conf &lt;&lt; &#039;EOF&#039;\n-Xms512m -Xmx1024m\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart openfire</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream openfire_backend {\n    server 127.0.0.1:5222/9090;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name openfire.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name openfire.example.com;\n\n    ssl_certificate /etc/ssl/certs/openfire.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/openfire.example.com.key;\n\n    location / {\n        proxy_pass http://openfire_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName openfire.example.com\n    Redirect permanent / https://openfire.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName openfire.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/openfire.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/openfire.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5222/9090/\n    ProxyPassReverse / http://127.0.0.1:5222/9090/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:5222/9090/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend openfire_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/openfire.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend openfire_backend\n\nbackend openfire_backend\n    balance roundrobin\n    option httpchk GET /health\n    server openfire1 127.0.0.1:5222/9090 check\n    server openfire2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R openfire:openfire /etc/openfire\nsudo chmod 750 /etc/openfire\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=openfire\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/openfire.conf &lt;&lt; &#039;EOF&#039;\n[openfire]\nenabled = true\nport = 5222/9090\nfilter = openfire\nlogpath = /var/log/openfire/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/openfire.key \\\n    -out /etc/ssl/certs/openfire.crt\n\n# Configure SSL in openfire\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE openfire_db;\nCREATE USER openfire_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE openfire_db TO openfire_user;\nEOF\n\n# Configure openfire to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE openfire_db;\nCREATE USER &#039;openfire_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON openfire_db.* TO &#039;openfire_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Openfire specific tuning\n-Xms512m -Xmx1024m</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nopenfire soft nofile 65535\nopenfire hard nofile 65535\nopenfire soft nproc 32768\nopenfire hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;openfire&#039;\n    static_configs:\n      - targets: [&#039;localhost:5222/9090&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet openfire; then\n    echo &quot;Openfire is running&quot;\n    exit 0\nelse\n    echo &quot;Openfire is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/openfire &lt;&lt; &#039;EOF&#039;\n/var/log/openfire/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 openfire openfire\n    postrotate\n        systemctl reload openfire &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Openfire backup script\nBACKUP_DIR=&quot;/backup/openfire&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop openfire\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/openfire-config-$DATE.tar.gz&quot; /etc/openfire\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/openfire-data-$DATE.tar.gz&quot; /var/lib/openfire\n\n# Start service\nsystemctl start openfire\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop openfire\n\n# Restore configuration\nsudo tar -xzf /backup/openfire/openfire-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/openfire/openfire-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R openfire:openfire /etc/openfire\nsudo chown -R openfire:openfire /var/lib/openfire\n\n# Start service\nsudo systemctl start openfire</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u openfire -n 100\nsudo tail -f /var/log/openfire/*.log\n\n# Check configuration\nsudo openfire -t || sudo openfire configtest\n\n# Check permissions\nls -la /etc/openfire\nls -la /var/lib/openfire</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5222/9090\nsudo netstat -tlnp | grep 5222/9090\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 5222/9090\nnc -zv localhost 5222/9090</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep java)\nhtop -p $(pgrep java)\n\n# Check connections\nss -ant | grep :5222/9090 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep java)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo openfire -d\n# or\nsudo openfire debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  openfire:\n    image: openfire:latest\n    container_name: openfire\n    ports:\n      - &quot;5222/9090:5222/9090&quot;\n    volumes:\n      - ./config:/etc/openfire\n      - ./data:/var/lib/openfire\n    environment:\n      - openfire_CONFIG=/etc/openfire/openfire.conf\n    restart: unless-stopped\n    networks:\n      - openfire_net\n\nnetworks:\n  openfire_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: openfire\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: openfire\n  template:\n    metadata:\n      labels:\n        app: openfire\n    spec:\n      containers:\n      - name: openfire\n        image: openfire:latest\n        ports:\n        - containerPort: 5222/9090\n        volumeMounts:\n        - name: config\n          mountPath: /etc/openfire\n      volumes:\n      - name: config\n        configMap:\n          name: openfire-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: openfire\nspec:\n  selector:\n    app: openfire\n  ports:\n  - port: 5222/9090\n    targetPort: 5222/9090\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Openfire\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install openfire\n      package:\n        name: openfire\n        state: present\n    \n    - name: Configure openfire\n      template:\n        src: openfire.conf.j2\n        dest: /etc/openfire/openfire.conf\n        owner: openfire\n        group: openfire\n        mode: &#039;0640&#039;\n      notify: restart openfire\n    \n    - name: Start and enable openfire\n      systemd:\n        name: openfire\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart openfire\n      systemd:\n        name: openfire\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update openfire\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade openfire\n\n# Arch Linux\nsudo pacman -Syu openfire\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade openfire\n\n# openSUSE\nsudo zypper update openfire\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade openfire\n\n# Always backup before updates\ntar -czf /backup/openfire-pre-update-$(date +%Y%m%d).tar.gz /etc/openfire\n\n# Restart after updates\nsudo systemctl restart openfire</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/openfire -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo openfire --verify || sudo openfire check\n\n# Update databases (if applicable)\nsudo openfire-update-db\n\n# Optimize performance\nsudo openfire-optimize\n\n# Check for security updates\nsudo openfire --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.openfire.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/openfire/openfire</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.openfire.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.openfire.org/</li>\n<li class=\"mobile-list-item\">Comparison vs ejabberd, Prosody, Tigase, Spark: https://docs.openfire.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1979,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install openfire","id":"install-openfire"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install openfire","id":"install-openfire"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install openfire","id":"install-openfire"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install openfire","id":"install-openfire"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install openfire","id":"install-openfire"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory if needed","id":"create-configuration-directory-if-needed"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"Openfire Configuration","id":"openfire-configuration"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":1,"text":"Reload service","id":"reload-service"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Enable security features","id":"enable-security-features"},{"level":1,"text":"See security section for detailed hardening steps","id":"see-security-section-for-detailed-hardening-steps"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Reload configuration","id":"reload-configuration"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":1,"text":"Configure performance settings","id":"configure-performance-settings"},{"level":1,"text":"Apply system tuning","id":"apply-system-tuning"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":1,"text":"Configure clustering (if supported)","id":"configure-clustering-if-supported"},{"level":1,"text":"See official documentation for cluster setup","id":"see-official-documentation-for-cluster-setup"},{"level":1,"text":"Basic load balancing setup example","id":"basic-load-balancing-setup-example"},{"level":1,"text":"Configure multiple instances on different ports","id":"configure-multiple-instances-on-different-ports"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":1,"text":"Configure fail2ban","id":"configure-fail2ban"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":1,"text":"Generate SSL certificates","id":"generate-ssl-certificates"},{"level":1,"text":"Configure SSL in openfire","id":"configure-ssl-in-openfire"},{"level":1,"text":"See official documentation for SSL configuration","id":"see-official-documentation-for-ssl-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":1,"text":"Configure openfire to use PostgreSQL","id":"configure-openfire-to-use-postgresql"},{"level":1,"text":"See official documentation for database configuration","id":"see-official-documentation-for-database-configuration"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Kernel parameters","id":"kernel-parameters"},{"level":1,"text":"Openfire specific tuning","id":"openfire-specific-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":1,"text":"Configure system limits","id":"configure-system-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":1,"text":"prometheus.yml configuration","id":"prometheusyml-configuration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":1,"text":"Basic health check script","id":"basic-health-check-script"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":1,"text":"Configure log rotation","id":"configure-log-rotation"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Openfire backup script","id":"openfire-backup-script"},{"level":1,"text":"Stop service (if required)","id":"stop-service-if-required"},{"level":1,"text":"Backup configuration","id":"backup-configuration"},{"level":1,"text":"Backup data (adjust paths as needed)","id":"backup-data-adjust-paths-as-needed"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Clean old backups (keep 30 days)","id":"clean-old-backups-keep-30-days"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore configuration","id":"restore-configuration"},{"level":1,"text":"Restore data","id":"restore-data"},{"level":1,"text":"Set permissions","id":"set-permissions"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Test connection","id":"test-connection"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":1,"text":"Monitor I/O","id":"monitor-io"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":1,"text":"Run in debug mode","id":"run-in-debug-mode"},{"level":1,"text":"or","id":"or"},{"level":1,"text":"Increase log verbosity","id":"increase-log-verbosity"},{"level":1,"text":"Edit configuration to enable debug logging","id":"edit-configuration-to-enable-debug-logging"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":1,"text":"Clean logs","id":"clean-logs"},{"level":1,"text":"Verify integrity","id":"verify-integrity"},{"level":1,"text":"Update databases (if applicable)","id":"update-databases-if-applicable"},{"level":1,"text":"Optimize performance","id":"optimize-performance"},{"level":1,"text":"Check for security updates","id":"check-for-security-updates"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-16T17:24:06.508Z","metadataVersion":"2.0"},"category":{"key":"xmpp-servers","name":"Xmpp servers","description":"Xmpp servers tools and applications","icon":"🌐","color":"#50fa7b"},"relatedGuides":[{"name":"ejabberd","displayName":"ejabberd Installation Guide","slug":"ejabberd","description":"ejabberd is a free and open-source XMPP Server. Robust, scalable and extensible XMPP server","category":"xmpp-servers","subcategory":"xmpp-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048,5222],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["xmpp-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/xmpp-servers/ejabberd","documentationUrl":"https://howtomgr.github.io/xmpp-servers/ejabberd","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ejabberd","updatedAt":"2025-09-16T17:09:35Z","createdAt":"2025-09-16T02:33:31Z","readmeRaw":"# ejabberd Installation Guide\n\nejabberd is a free and open-source XMPP Server. Robust, scalable and extensible XMPP server\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 5222/5269 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5222/5269 (default ejabberd port)\n- **Dependencies**:\n  - erlang, openssl\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ejabberd\nsudo dnf install -y ejabberd erlang, openssl\n\n# Enable and start service\nsudo systemctl enable --now ejabberd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=ejabberd\nsudo firewall-cmd --reload\n\n# Verify installation\nejabberd --version || systemctl status ejabberd\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install ejabberd\nsudo apt install -y ejabberd erlang, openssl\n\n# Enable and start service\nsudo systemctl enable --now ejabberd\n\n# Configure firewall\nsudo ufw allow 5222/5269\n\n# Verify installation\nejabberd --version || systemctl status ejabberd\n```\n\n### Arch Linux\n\n```bash\n# Install ejabberd\nsudo pacman -S ejabberd\n\n# Enable and start service\nsudo systemctl enable --now ejabberd\n\n# Verify installation\nejabberd --version || systemctl status ejabberd\n```\n\n### Alpine Linux\n\n```bash\n# Install ejabberd\napk add --no-cache ejabberd\n\n# Enable and start service\nrc-update add ejabberd default\nrc-service ejabberd start\n\n# Verify installation\nejabberd --version || rc-service ejabberd status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install ejabberd\nsudo zypper install -y ejabberd erlang, openssl\n\n# Enable and start service\nsudo systemctl enable --now ejabberd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=ejabberd\nsudo firewall-cmd --reload\n\n# Verify installation\nejabberd --version || systemctl status ejabberd\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install ejabberd\n\n# Start service\nbrew services start ejabberd\n\n# Verify installation\nejabberd --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install ejabberd\n\n# Enable in rc.conf\necho 'ejabberd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ejabberd start\n\n# Verify installation\nejabberd --version || service ejabberd status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install ejabberd\n\n# Or using Scoop\nscoop install ejabberd\n\n# Verify installation\nejabberd --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/ejabberd\n\n# Set up basic configuration\nsudo tee /etc/ejabberd/ejabberd.conf << 'EOF'\n# ejabberd Configuration\nmax_connections: 10000\nEOF\n\n# Test configuration\nsudo ejabberd -t || sudo ejabberd configtest\n\n# Reload service\nsudo systemctl reload ejabberd\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R ejabberd:ejabberd /etc/ejabberd\nsudo chmod 750 /etc/ejabberd\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable ejabberd\n\n# Start service\nsudo systemctl start ejabberd\n\n# Stop service\nsudo systemctl stop ejabberd\n\n# Restart service\nsudo systemctl restart ejabberd\n\n# Reload configuration\nsudo systemctl reload ejabberd\n\n# Check status\nsudo systemctl status ejabberd\n\n# View logs\nsudo journalctl -u ejabberd -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add ejabberd default\n\n# Start service\nrc-service ejabberd start\n\n# Stop service\nrc-service ejabberd stop\n\n# Restart service\nrc-service ejabberd restart\n\n# Check status\nrc-service ejabberd status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'ejabberd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ejabberd start\n\n# Stop service\nservice ejabberd stop\n\n# Restart service\nservice ejabberd restart\n\n# Check status\nservice ejabberd status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start ejabberd\nbrew services stop ejabberd\nbrew services restart ejabberd\n\n# Check status\nbrew services list | grep ejabberd\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start ejabberd\n\n# Stop service\nnet stop ejabberd\n\n# Using PowerShell\nStart-Service ejabberd\nStop-Service ejabberd\nRestart-Service ejabberd\n\n# Check status\nGet-Service ejabberd\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/ejabberd/ejabberd.conf << 'EOF'\nmax_connections: 10000\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart ejabberd\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream ejabberd_backend {\n    server 127.0.0.1:5222/5269;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name ejabberd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ejabberd.example.com;\n\n    ssl_certificate /etc/ssl/certs/ejabberd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ejabberd.example.com.key;\n\n    location / {\n        proxy_pass http://ejabberd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName ejabberd.example.com\n    Redirect permanent / https://ejabberd.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName ejabberd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ejabberd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ejabberd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5222/5269/\n    ProxyPassReverse / http://127.0.0.1:5222/5269/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:5222/5269/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend ejabberd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ejabberd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ejabberd_backend\n\nbackend ejabberd_backend\n    balance roundrobin\n    option httpchk GET /health\n    server ejabberd1 127.0.0.1:5222/5269 check\n    server ejabberd2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R ejabberd:ejabberd /etc/ejabberd\nsudo chmod 750 /etc/ejabberd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=ejabberd\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/ejabberd.conf << 'EOF'\n[ejabberd]\nenabled = true\nport = 5222/5269\nfilter = ejabberd\nlogpath = /var/log/ejabberd/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/ejabberd.key \\\n    -out /etc/ssl/certs/ejabberd.crt\n\n# Configure SSL in ejabberd\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE ejabberd_db;\nCREATE USER ejabberd_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE ejabberd_db TO ejabberd_user;\nEOF\n\n# Configure ejabberd to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE ejabberd_db;\nCREATE USER 'ejabberd_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON ejabberd_db.* TO 'ejabberd_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# ejabberd specific tuning\nmax_connections: 10000\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nejabberd soft nofile 65535\nejabberd hard nofile 65535\nejabberd soft nproc 32768\nejabberd hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'ejabberd'\n    static_configs:\n      - targets: ['localhost:5222/5269']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet ejabberd; then\n    echo \"ejabberd is running\"\n    exit 0\nelse\n    echo \"ejabberd is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/ejabberd << 'EOF'\n/var/log/ejabberd/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 ejabberd ejabberd\n    postrotate\n        systemctl reload ejabberd > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# ejabberd backup script\nBACKUP_DIR=\"/backup/ejabberd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop ejabberd\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/ejabberd-config-$DATE.tar.gz\" /etc/ejabberd\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/ejabberd-data-$DATE.tar.gz\" /var/lib/ejabberd\n\n# Start service\nsystemctl start ejabberd\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop ejabberd\n\n# Restore configuration\nsudo tar -xzf /backup/ejabberd/ejabberd-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/ejabberd/ejabberd-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R ejabberd:ejabberd /etc/ejabberd\nsudo chown -R ejabberd:ejabberd /var/lib/ejabberd\n\n# Start service\nsudo systemctl start ejabberd\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u ejabberd -n 100\nsudo tail -f /var/log/ejabberd/*.log\n\n# Check configuration\nsudo ejabberd -t || sudo ejabberd configtest\n\n# Check permissions\nls -la /etc/ejabberd\nls -la /var/lib/ejabberd\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5222/5269\nsudo netstat -tlnp | grep 5222/5269\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 5222/5269\nnc -zv localhost 5222/5269\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep beam.smp)\nhtop -p $(pgrep beam.smp)\n\n# Check connections\nss -ant | grep :5222/5269 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep beam.smp)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo ejabberd -d\n# or\nsudo ejabberd debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  ejabberd:\n    image: ejabberd:latest\n    container_name: ejabberd\n    ports:\n      - \"5222/5269:5222/5269\"\n    volumes:\n      - ./config:/etc/ejabberd\n      - ./data:/var/lib/ejabberd\n    environment:\n      - ejabberd_CONFIG=/etc/ejabberd/ejabberd.conf\n    restart: unless-stopped\n    networks:\n      - ejabberd_net\n\nnetworks:\n  ejabberd_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ejabberd\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: ejabberd\n  template:\n    metadata:\n      labels:\n        app: ejabberd\n    spec:\n      containers:\n      - name: ejabberd\n        image: ejabberd:latest\n        ports:\n        - containerPort: 5222/5269\n        volumeMounts:\n        - name: config\n          mountPath: /etc/ejabberd\n      volumes:\n      - name: config\n        configMap:\n          name: ejabberd-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ejabberd\nspec:\n  selector:\n    app: ejabberd\n  ports:\n  - port: 5222/5269\n    targetPort: 5222/5269\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure ejabberd\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install ejabberd\n      package:\n        name: ejabberd\n        state: present\n    \n    - name: Configure ejabberd\n      template:\n        src: ejabberd.conf.j2\n        dest: /etc/ejabberd/ejabberd.conf\n        owner: ejabberd\n        group: ejabberd\n        mode: '0640'\n      notify: restart ejabberd\n    \n    - name: Start and enable ejabberd\n      systemd:\n        name: ejabberd\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart ejabberd\n      systemd:\n        name: ejabberd\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ejabberd\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade ejabberd\n\n# Arch Linux\nsudo pacman -Syu ejabberd\n\n# Alpine Linux\napk update && apk upgrade ejabberd\n\n# openSUSE\nsudo zypper update ejabberd\n\n# FreeBSD\npkg update && pkg upgrade ejabberd\n\n# Always backup before updates\ntar -czf /backup/ejabberd-pre-update-$(date +%Y%m%d).tar.gz /etc/ejabberd\n\n# Restart after updates\nsudo systemctl restart ejabberd\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/ejabberd -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo ejabberd --verify || sudo ejabberd check\n\n# Update databases (if applicable)\nsudo ejabberd-update-db\n\n# Optimize performance\nsudo ejabberd-optimize\n\n# Check for security updates\nsudo ejabberd --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.ejabberd.org/\n- GitHub Repository: https://github.com/ejabberd/ejabberd\n- Community Forum: https://forum.ejabberd.org/\n- Wiki: https://wiki.ejabberd.org/\n- Comparison vs Prosody, Openfire, Tigase, MongooseIM: https://docs.ejabberd.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">ejabberd is a free and open-source XMPP Server. Robust, scalable and extensible XMPP server</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 5222/5269 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5222/5269 (default ejabberd port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">erlang, openssl</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ejabberd\nsudo dnf install -y ejabberd erlang, openssl\n\n# Enable and start service\nsudo systemctl enable --now ejabberd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=ejabberd\nsudo firewall-cmd --reload\n\n# Verify installation\nejabberd --version || systemctl status ejabberd</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install ejabberd\nsudo apt install -y ejabberd erlang, openssl\n\n# Enable and start service\nsudo systemctl enable --now ejabberd\n\n# Configure firewall\nsudo ufw allow 5222/5269\n\n# Verify installation\nejabberd --version || systemctl status ejabberd</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ejabberd\nsudo pacman -S ejabberd\n\n# Enable and start service\nsudo systemctl enable --now ejabberd\n\n# Verify installation\nejabberd --version || systemctl status ejabberd</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ejabberd\napk add --no-cache ejabberd\n\n# Enable and start service\nrc-update add ejabberd default\nrc-service ejabberd start\n\n# Verify installation\nejabberd --version || rc-service ejabberd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ejabberd\nsudo zypper install -y ejabberd erlang, openssl\n\n# Enable and start service\nsudo systemctl enable --now ejabberd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=ejabberd\nsudo firewall-cmd --reload\n\n# Verify installation\nejabberd --version || systemctl status ejabberd</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install ejabberd\n\n# Start service\nbrew services start ejabberd\n\n# Verify installation\nejabberd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install ejabberd\n\n# Enable in rc.conf\necho &#039;ejabberd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ejabberd start\n\n# Verify installation\nejabberd --version || service ejabberd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install ejabberd\n\n# Or using Scoop\nscoop install ejabberd\n\n# Verify installation\nejabberd --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/ejabberd\n\n# Set up basic configuration\nsudo tee /etc/ejabberd/ejabberd.conf &lt;&lt; &#039;EOF&#039;\n# ejabberd Configuration\nmax_connections: 10000\nEOF\n\n# Test configuration\nsudo ejabberd -t || sudo ejabberd configtest\n\n# Reload service\nsudo systemctl reload ejabberd</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R ejabberd:ejabberd /etc/ejabberd\nsudo chmod 750 /etc/ejabberd\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable ejabberd\n\n# Start service\nsudo systemctl start ejabberd\n\n# Stop service\nsudo systemctl stop ejabberd\n\n# Restart service\nsudo systemctl restart ejabberd\n\n# Reload configuration\nsudo systemctl reload ejabberd\n\n# Check status\nsudo systemctl status ejabberd\n\n# View logs\nsudo journalctl -u ejabberd -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add ejabberd default\n\n# Start service\nrc-service ejabberd start\n\n# Stop service\nrc-service ejabberd stop\n\n# Restart service\nrc-service ejabberd restart\n\n# Check status\nrc-service ejabberd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;ejabberd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ejabberd start\n\n# Stop service\nservice ejabberd stop\n\n# Restart service\nservice ejabberd restart\n\n# Check status\nservice ejabberd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start ejabberd\nbrew services stop ejabberd\nbrew services restart ejabberd\n\n# Check status\nbrew services list | grep ejabberd</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start ejabberd\n\n# Stop service\nnet stop ejabberd\n\n# Using PowerShell\nStart-Service ejabberd\nStop-Service ejabberd\nRestart-Service ejabberd\n\n# Check status\nGet-Service ejabberd</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/ejabberd/ejabberd.conf &lt;&lt; &#039;EOF&#039;\nmax_connections: 10000\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart ejabberd</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream ejabberd_backend {\n    server 127.0.0.1:5222/5269;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name ejabberd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ejabberd.example.com;\n\n    ssl_certificate /etc/ssl/certs/ejabberd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ejabberd.example.com.key;\n\n    location / {\n        proxy_pass http://ejabberd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName ejabberd.example.com\n    Redirect permanent / https://ejabberd.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName ejabberd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ejabberd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ejabberd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5222/5269/\n    ProxyPassReverse / http://127.0.0.1:5222/5269/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:5222/5269/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend ejabberd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ejabberd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ejabberd_backend\n\nbackend ejabberd_backend\n    balance roundrobin\n    option httpchk GET /health\n    server ejabberd1 127.0.0.1:5222/5269 check\n    server ejabberd2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R ejabberd:ejabberd /etc/ejabberd\nsudo chmod 750 /etc/ejabberd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=ejabberd\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/ejabberd.conf &lt;&lt; &#039;EOF&#039;\n[ejabberd]\nenabled = true\nport = 5222/5269\nfilter = ejabberd\nlogpath = /var/log/ejabberd/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/ejabberd.key \\\n    -out /etc/ssl/certs/ejabberd.crt\n\n# Configure SSL in ejabberd\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE ejabberd_db;\nCREATE USER ejabberd_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE ejabberd_db TO ejabberd_user;\nEOF\n\n# Configure ejabberd to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE ejabberd_db;\nCREATE USER &#039;ejabberd_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON ejabberd_db.* TO &#039;ejabberd_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# ejabberd specific tuning\nmax_connections: 10000</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nejabberd soft nofile 65535\nejabberd hard nofile 65535\nejabberd soft nproc 32768\nejabberd hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;ejabberd&#039;\n    static_configs:\n      - targets: [&#039;localhost:5222/5269&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet ejabberd; then\n    echo &quot;ejabberd is running&quot;\n    exit 0\nelse\n    echo &quot;ejabberd is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/ejabberd &lt;&lt; &#039;EOF&#039;\n/var/log/ejabberd/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 ejabberd ejabberd\n    postrotate\n        systemctl reload ejabberd &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# ejabberd backup script\nBACKUP_DIR=&quot;/backup/ejabberd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop ejabberd\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/ejabberd-config-$DATE.tar.gz&quot; /etc/ejabberd\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/ejabberd-data-$DATE.tar.gz&quot; /var/lib/ejabberd\n\n# Start service\nsystemctl start ejabberd\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop ejabberd\n\n# Restore configuration\nsudo tar -xzf /backup/ejabberd/ejabberd-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/ejabberd/ejabberd-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R ejabberd:ejabberd /etc/ejabberd\nsudo chown -R ejabberd:ejabberd /var/lib/ejabberd\n\n# Start service\nsudo systemctl start ejabberd</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u ejabberd -n 100\nsudo tail -f /var/log/ejabberd/*.log\n\n# Check configuration\nsudo ejabberd -t || sudo ejabberd configtest\n\n# Check permissions\nls -la /etc/ejabberd\nls -la /var/lib/ejabberd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5222/5269\nsudo netstat -tlnp | grep 5222/5269\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 5222/5269\nnc -zv localhost 5222/5269</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep beam.smp)\nhtop -p $(pgrep beam.smp)\n\n# Check connections\nss -ant | grep :5222/5269 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep beam.smp)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo ejabberd -d\n# or\nsudo ejabberd debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  ejabberd:\n    image: ejabberd:latest\n    container_name: ejabberd\n    ports:\n      - &quot;5222/5269:5222/5269&quot;\n    volumes:\n      - ./config:/etc/ejabberd\n      - ./data:/var/lib/ejabberd\n    environment:\n      - ejabberd_CONFIG=/etc/ejabberd/ejabberd.conf\n    restart: unless-stopped\n    networks:\n      - ejabberd_net\n\nnetworks:\n  ejabberd_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ejabberd\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: ejabberd\n  template:\n    metadata:\n      labels:\n        app: ejabberd\n    spec:\n      containers:\n      - name: ejabberd\n        image: ejabberd:latest\n        ports:\n        - containerPort: 5222/5269\n        volumeMounts:\n        - name: config\n          mountPath: /etc/ejabberd\n      volumes:\n      - name: config\n        configMap:\n          name: ejabberd-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ejabberd\nspec:\n  selector:\n    app: ejabberd\n  ports:\n  - port: 5222/5269\n    targetPort: 5222/5269\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure ejabberd\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install ejabberd\n      package:\n        name: ejabberd\n        state: present\n    \n    - name: Configure ejabberd\n      template:\n        src: ejabberd.conf.j2\n        dest: /etc/ejabberd/ejabberd.conf\n        owner: ejabberd\n        group: ejabberd\n        mode: &#039;0640&#039;\n      notify: restart ejabberd\n    \n    - name: Start and enable ejabberd\n      systemd:\n        name: ejabberd\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart ejabberd\n      systemd:\n        name: ejabberd\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ejabberd\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade ejabberd\n\n# Arch Linux\nsudo pacman -Syu ejabberd\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade ejabberd\n\n# openSUSE\nsudo zypper update ejabberd\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade ejabberd\n\n# Always backup before updates\ntar -czf /backup/ejabberd-pre-update-$(date +%Y%m%d).tar.gz /etc/ejabberd\n\n# Restart after updates\nsudo systemctl restart ejabberd</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/ejabberd -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo ejabberd --verify || sudo ejabberd check\n\n# Update databases (if applicable)\nsudo ejabberd-update-db\n\n# Optimize performance\nsudo ejabberd-optimize\n\n# Check for security updates\nsudo ejabberd --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.ejabberd.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/ejabberd/ejabberd</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.ejabberd.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.ejabberd.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Prosody, Openfire, Tigase, MongooseIM: https://docs.ejabberd.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1985,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install ejabberd","id":"install-ejabberd"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install ejabberd","id":"install-ejabberd"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install ejabberd","id":"install-ejabberd"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install ejabberd","id":"install-ejabberd"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install ejabberd","id":"install-ejabberd"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory if needed","id":"create-configuration-directory-if-needed"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"ejabberd Configuration","id":"ejabberd-configuration"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":1,"text":"Reload service","id":"reload-service"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Enable security features","id":"enable-security-features"},{"level":1,"text":"See security section for detailed hardening steps","id":"see-security-section-for-detailed-hardening-steps"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Reload configuration","id":"reload-configuration"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":1,"text":"Configure performance settings","id":"configure-performance-settings"},{"level":1,"text":"Apply system tuning","id":"apply-system-tuning"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":1,"text":"Configure clustering (if supported)","id":"configure-clustering-if-supported"},{"level":1,"text":"See official documentation for cluster setup","id":"see-official-documentation-for-cluster-setup"},{"level":1,"text":"Basic load balancing setup example","id":"basic-load-balancing-setup-example"},{"level":1,"text":"Configure multiple instances on different ports","id":"configure-multiple-instances-on-different-ports"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":1,"text":"Configure fail2ban","id":"configure-fail2ban"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":1,"text":"Generate SSL certificates","id":"generate-ssl-certificates"},{"level":1,"text":"Configure SSL in ejabberd","id":"configure-ssl-in-ejabberd"},{"level":1,"text":"See official documentation for SSL configuration","id":"see-official-documentation-for-ssl-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":1,"text":"Configure ejabberd to use PostgreSQL","id":"configure-ejabberd-to-use-postgresql"},{"level":1,"text":"See official documentation for database configuration","id":"see-official-documentation-for-database-configuration"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Kernel parameters","id":"kernel-parameters"},{"level":1,"text":"ejabberd specific tuning","id":"ejabberd-specific-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":1,"text":"Configure system limits","id":"configure-system-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":1,"text":"prometheus.yml configuration","id":"prometheusyml-configuration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":1,"text":"Basic health check script","id":"basic-health-check-script"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":1,"text":"Configure log rotation","id":"configure-log-rotation"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"ejabberd backup script","id":"ejabberd-backup-script"},{"level":1,"text":"Stop service (if required)","id":"stop-service-if-required"},{"level":1,"text":"Backup configuration","id":"backup-configuration"},{"level":1,"text":"Backup data (adjust paths as needed)","id":"backup-data-adjust-paths-as-needed"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Clean old backups (keep 30 days)","id":"clean-old-backups-keep-30-days"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore configuration","id":"restore-configuration"},{"level":1,"text":"Restore data","id":"restore-data"},{"level":1,"text":"Set permissions","id":"set-permissions"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Test connection","id":"test-connection"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":1,"text":"Monitor I/O","id":"monitor-io"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":1,"text":"Run in debug mode","id":"run-in-debug-mode"},{"level":1,"text":"or","id":"or"},{"level":1,"text":"Increase log verbosity","id":"increase-log-verbosity"},{"level":1,"text":"Edit configuration to enable debug logging","id":"edit-configuration-to-enable-debug-logging"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":1,"text":"Clean logs","id":"clean-logs"},{"level":1,"text":"Verify integrity","id":"verify-integrity"},{"level":1,"text":"Update databases (if applicable)","id":"update-databases-if-applicable"},{"level":1,"text":"Optimize performance","id":"optimize-performance"},{"level":1,"text":"Check for security updates","id":"check-for-security-updates"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-16T17:20:44.378Z","metadataVersion":"2.0"},{"name":"prosody","displayName":"Prosody Installation Guide","slug":"prosody","description":"Prosody is a free and open-source XMPP Server. Modern XMPP communication server","category":"xmpp-servers","subcategory":"xmpp-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048,5222],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["xmpp-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/xmpp-servers/prosody","documentationUrl":"https://howtomgr.github.io/xmpp-servers/prosody","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prosody","updatedAt":"2025-09-16T10:56:10Z","createdAt":"2023-08-28T03:49:26Z","readmeRaw":"# Prosody Installation Guide\n\nProsody is a free and open-source XMPP Server. Modern XMPP communication server\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 5222/5269 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5222/5269 (default prosody port)\n- **Dependencies**:\n  - lua5.2, lua-socket, lua-expat\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install prosody\nsudo dnf install -y prosody lua5.2, lua-socket, lua-expat\n\n# Enable and start service\nsudo systemctl enable --now prosody\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=prosody\nsudo firewall-cmd --reload\n\n# Verify installation\nprosody --version || systemctl status prosody\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prosody\nsudo apt install -y prosody lua5.2, lua-socket, lua-expat\n\n# Enable and start service\nsudo systemctl enable --now prosody\n\n# Configure firewall\nsudo ufw allow 5222/5269\n\n# Verify installation\nprosody --version || systemctl status prosody\n```\n\n### Arch Linux\n\n```bash\n# Install prosody\nsudo pacman -S prosody\n\n# Enable and start service\nsudo systemctl enable --now prosody\n\n# Verify installation\nprosody --version || systemctl status prosody\n```\n\n### Alpine Linux\n\n```bash\n# Install prosody\napk add --no-cache prosody\n\n# Enable and start service\nrc-update add prosody default\nrc-service prosody start\n\n# Verify installation\nprosody --version || rc-service prosody status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install prosody\nsudo zypper install -y prosody lua5.2, lua-socket, lua-expat\n\n# Enable and start service\nsudo systemctl enable --now prosody\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=prosody\nsudo firewall-cmd --reload\n\n# Verify installation\nprosody --version || systemctl status prosody\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install prosody\n\n# Start service\nbrew services start prosody\n\n# Verify installation\nprosody --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install prosody\n\n# Enable in rc.conf\necho 'prosody_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice prosody start\n\n# Verify installation\nprosody --version || service prosody status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install prosody\n\n# Or using Scoop\nscoop install prosody\n\n# Verify installation\nprosody --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/prosody\n\n# Set up basic configuration\nsudo tee /etc/prosody/prosody.conf << 'EOF'\n# Prosody Configuration\nc2s_tcp_keepalives = true\nEOF\n\n# Test configuration\nsudo prosody -t || sudo prosody configtest\n\n# Reload service\nsudo systemctl reload prosody\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R prosody:prosody /etc/prosody\nsudo chmod 750 /etc/prosody\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable prosody\n\n# Start service\nsudo systemctl start prosody\n\n# Stop service\nsudo systemctl stop prosody\n\n# Restart service\nsudo systemctl restart prosody\n\n# Reload configuration\nsudo systemctl reload prosody\n\n# Check status\nsudo systemctl status prosody\n\n# View logs\nsudo journalctl -u prosody -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add prosody default\n\n# Start service\nrc-service prosody start\n\n# Stop service\nrc-service prosody stop\n\n# Restart service\nrc-service prosody restart\n\n# Check status\nrc-service prosody status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'prosody_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice prosody start\n\n# Stop service\nservice prosody stop\n\n# Restart service\nservice prosody restart\n\n# Check status\nservice prosody status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start prosody\nbrew services stop prosody\nbrew services restart prosody\n\n# Check status\nbrew services list | grep prosody\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start prosody\n\n# Stop service\nnet stop prosody\n\n# Using PowerShell\nStart-Service prosody\nStop-Service prosody\nRestart-Service prosody\n\n# Check status\nGet-Service prosody\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/prosody/prosody.conf << 'EOF'\nc2s_tcp_keepalives = true\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart prosody\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream prosody_backend {\n    server 127.0.0.1:5222/5269;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name prosody.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prosody.example.com;\n\n    ssl_certificate /etc/ssl/certs/prosody.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prosody.example.com.key;\n\n    location / {\n        proxy_pass http://prosody_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName prosody.example.com\n    Redirect permanent / https://prosody.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName prosody.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prosody.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prosody.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5222/5269/\n    ProxyPassReverse / http://127.0.0.1:5222/5269/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:5222/5269/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend prosody_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prosody.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prosody_backend\n\nbackend prosody_backend\n    balance roundrobin\n    option httpchk GET /health\n    server prosody1 127.0.0.1:5222/5269 check\n    server prosody2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R prosody:prosody /etc/prosody\nsudo chmod 750 /etc/prosody\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=prosody\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/prosody.conf << 'EOF'\n[prosody]\nenabled = true\nport = 5222/5269\nfilter = prosody\nlogpath = /var/log/prosody/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/prosody.key \\\n    -out /etc/ssl/certs/prosody.crt\n\n# Configure SSL in prosody\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE prosody_db;\nCREATE USER prosody_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE prosody_db TO prosody_user;\nEOF\n\n# Configure prosody to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE prosody_db;\nCREATE USER 'prosody_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON prosody_db.* TO 'prosody_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Prosody specific tuning\nc2s_tcp_keepalives = true\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nprosody soft nofile 65535\nprosody hard nofile 65535\nprosody soft nproc 32768\nprosody hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'prosody'\n    static_configs:\n      - targets: ['localhost:5222/5269']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet prosody; then\n    echo \"Prosody is running\"\n    exit 0\nelse\n    echo \"Prosody is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/prosody << 'EOF'\n/var/log/prosody/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 prosody prosody\n    postrotate\n        systemctl reload prosody > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Prosody backup script\nBACKUP_DIR=\"/backup/prosody\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop prosody\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/prosody-config-$DATE.tar.gz\" /etc/prosody\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/prosody-data-$DATE.tar.gz\" /var/lib/prosody\n\n# Start service\nsystemctl start prosody\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop prosody\n\n# Restore configuration\nsudo tar -xzf /backup/prosody/prosody-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/prosody/prosody-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R prosody:prosody /etc/prosody\nsudo chown -R prosody:prosody /var/lib/prosody\n\n# Start service\nsudo systemctl start prosody\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u prosody -n 100\nsudo tail -f /var/log/prosody/*.log\n\n# Check configuration\nsudo prosody -t || sudo prosody configtest\n\n# Check permissions\nls -la /etc/prosody\nls -la /var/lib/prosody\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5222/5269\nsudo netstat -tlnp | grep 5222/5269\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 5222/5269\nnc -zv localhost 5222/5269\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep lua5.2)\nhtop -p $(pgrep lua5.2)\n\n# Check connections\nss -ant | grep :5222/5269 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep lua5.2)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo prosody -d\n# or\nsudo prosody debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  prosody:\n    image: prosody:latest\n    container_name: prosody\n    ports:\n      - \"5222/5269:5222/5269\"\n    volumes:\n      - ./config:/etc/prosody\n      - ./data:/var/lib/prosody\n    environment:\n      - prosody_CONFIG=/etc/prosody/prosody.conf\n    restart: unless-stopped\n    networks:\n      - prosody_net\n\nnetworks:\n  prosody_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prosody\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: prosody\n  template:\n    metadata:\n      labels:\n        app: prosody\n    spec:\n      containers:\n      - name: prosody\n        image: prosody:latest\n        ports:\n        - containerPort: 5222/5269\n        volumeMounts:\n        - name: config\n          mountPath: /etc/prosody\n      volumes:\n      - name: config\n        configMap:\n          name: prosody-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prosody\nspec:\n  selector:\n    app: prosody\n  ports:\n  - port: 5222/5269\n    targetPort: 5222/5269\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Prosody\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install prosody\n      package:\n        name: prosody\n        state: present\n    \n    - name: Configure prosody\n      template:\n        src: prosody.conf.j2\n        dest: /etc/prosody/prosody.conf\n        owner: prosody\n        group: prosody\n        mode: '0640'\n      notify: restart prosody\n    \n    - name: Start and enable prosody\n      systemd:\n        name: prosody\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart prosody\n      systemd:\n        name: prosody\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prosody\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade prosody\n\n# Arch Linux\nsudo pacman -Syu prosody\n\n# Alpine Linux\napk update && apk upgrade prosody\n\n# openSUSE\nsudo zypper update prosody\n\n# FreeBSD\npkg update && pkg upgrade prosody\n\n# Always backup before updates\ntar -czf /backup/prosody-pre-update-$(date +%Y%m%d).tar.gz /etc/prosody\n\n# Restart after updates\nsudo systemctl restart prosody\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/prosody -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo prosody --verify || sudo prosody check\n\n# Update databases (if applicable)\nsudo prosody-update-db\n\n# Optimize performance\nsudo prosody-optimize\n\n# Check for security updates\nsudo prosody --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.prosody.org/\n- GitHub Repository: https://github.com/prosody/prosody\n- Community Forum: https://forum.prosody.org/\n- Wiki: https://wiki.prosody.org/\n- Comparison vs ejabberd, Openfire, Tigase, Metronome: https://docs.prosody.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Prosody is a free and open-source XMPP Server. Modern XMPP communication server</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 5222/5269 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5222/5269 (default prosody port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">lua5.2, lua-socket, lua-expat</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install prosody\nsudo dnf install -y prosody lua5.2, lua-socket, lua-expat\n\n# Enable and start service\nsudo systemctl enable --now prosody\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=prosody\nsudo firewall-cmd --reload\n\n# Verify installation\nprosody --version || systemctl status prosody</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install prosody\nsudo apt install -y prosody lua5.2, lua-socket, lua-expat\n\n# Enable and start service\nsudo systemctl enable --now prosody\n\n# Configure firewall\nsudo ufw allow 5222/5269\n\n# Verify installation\nprosody --version || systemctl status prosody</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prosody\nsudo pacman -S prosody\n\n# Enable and start service\nsudo systemctl enable --now prosody\n\n# Verify installation\nprosody --version || systemctl status prosody</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prosody\napk add --no-cache prosody\n\n# Enable and start service\nrc-update add prosody default\nrc-service prosody start\n\n# Verify installation\nprosody --version || rc-service prosody status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prosody\nsudo zypper install -y prosody lua5.2, lua-socket, lua-expat\n\n# Enable and start service\nsudo systemctl enable --now prosody\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=prosody\nsudo firewall-cmd --reload\n\n# Verify installation\nprosody --version || systemctl status prosody</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install prosody\n\n# Start service\nbrew services start prosody\n\n# Verify installation\nprosody --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install prosody\n\n# Enable in rc.conf\necho &#039;prosody_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice prosody start\n\n# Verify installation\nprosody --version || service prosody status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install prosody\n\n# Or using Scoop\nscoop install prosody\n\n# Verify installation\nprosody --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/prosody\n\n# Set up basic configuration\nsudo tee /etc/prosody/prosody.conf &lt;&lt; &#039;EOF&#039;\n# Prosody Configuration\nc2s_tcp_keepalives = true\nEOF\n\n# Test configuration\nsudo prosody -t || sudo prosody configtest\n\n# Reload service\nsudo systemctl reload prosody</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R prosody:prosody /etc/prosody\nsudo chmod 750 /etc/prosody\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable prosody\n\n# Start service\nsudo systemctl start prosody\n\n# Stop service\nsudo systemctl stop prosody\n\n# Restart service\nsudo systemctl restart prosody\n\n# Reload configuration\nsudo systemctl reload prosody\n\n# Check status\nsudo systemctl status prosody\n\n# View logs\nsudo journalctl -u prosody -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add prosody default\n\n# Start service\nrc-service prosody start\n\n# Stop service\nrc-service prosody stop\n\n# Restart service\nrc-service prosody restart\n\n# Check status\nrc-service prosody status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;prosody_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice prosody start\n\n# Stop service\nservice prosody stop\n\n# Restart service\nservice prosody restart\n\n# Check status\nservice prosody status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start prosody\nbrew services stop prosody\nbrew services restart prosody\n\n# Check status\nbrew services list | grep prosody</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start prosody\n\n# Stop service\nnet stop prosody\n\n# Using PowerShell\nStart-Service prosody\nStop-Service prosody\nRestart-Service prosody\n\n# Check status\nGet-Service prosody</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/prosody/prosody.conf &lt;&lt; &#039;EOF&#039;\nc2s_tcp_keepalives = true\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart prosody</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream prosody_backend {\n    server 127.0.0.1:5222/5269;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name prosody.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prosody.example.com;\n\n    ssl_certificate /etc/ssl/certs/prosody.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prosody.example.com.key;\n\n    location / {\n        proxy_pass http://prosody_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName prosody.example.com\n    Redirect permanent / https://prosody.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName prosody.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prosody.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prosody.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5222/5269/\n    ProxyPassReverse / http://127.0.0.1:5222/5269/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:5222/5269/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend prosody_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prosody.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prosody_backend\n\nbackend prosody_backend\n    balance roundrobin\n    option httpchk GET /health\n    server prosody1 127.0.0.1:5222/5269 check\n    server prosody2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R prosody:prosody /etc/prosody\nsudo chmod 750 /etc/prosody\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=prosody\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/prosody.conf &lt;&lt; &#039;EOF&#039;\n[prosody]\nenabled = true\nport = 5222/5269\nfilter = prosody\nlogpath = /var/log/prosody/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/prosody.key \\\n    -out /etc/ssl/certs/prosody.crt\n\n# Configure SSL in prosody\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE prosody_db;\nCREATE USER prosody_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE prosody_db TO prosody_user;\nEOF\n\n# Configure prosody to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE prosody_db;\nCREATE USER &#039;prosody_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON prosody_db.* TO &#039;prosody_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Prosody specific tuning\nc2s_tcp_keepalives = true</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nprosody soft nofile 65535\nprosody hard nofile 65535\nprosody soft nproc 32768\nprosody hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;prosody&#039;\n    static_configs:\n      - targets: [&#039;localhost:5222/5269&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet prosody; then\n    echo &quot;Prosody is running&quot;\n    exit 0\nelse\n    echo &quot;Prosody is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/prosody &lt;&lt; &#039;EOF&#039;\n/var/log/prosody/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 prosody prosody\n    postrotate\n        systemctl reload prosody &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Prosody backup script\nBACKUP_DIR=&quot;/backup/prosody&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop prosody\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/prosody-config-$DATE.tar.gz&quot; /etc/prosody\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/prosody-data-$DATE.tar.gz&quot; /var/lib/prosody\n\n# Start service\nsystemctl start prosody\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop prosody\n\n# Restore configuration\nsudo tar -xzf /backup/prosody/prosody-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/prosody/prosody-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R prosody:prosody /etc/prosody\nsudo chown -R prosody:prosody /var/lib/prosody\n\n# Start service\nsudo systemctl start prosody</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u prosody -n 100\nsudo tail -f /var/log/prosody/*.log\n\n# Check configuration\nsudo prosody -t || sudo prosody configtest\n\n# Check permissions\nls -la /etc/prosody\nls -la /var/lib/prosody</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5222/5269\nsudo netstat -tlnp | grep 5222/5269\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 5222/5269\nnc -zv localhost 5222/5269</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep lua5.2)\nhtop -p $(pgrep lua5.2)\n\n# Check connections\nss -ant | grep :5222/5269 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep lua5.2)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo prosody -d\n# or\nsudo prosody debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  prosody:\n    image: prosody:latest\n    container_name: prosody\n    ports:\n      - &quot;5222/5269:5222/5269&quot;\n    volumes:\n      - ./config:/etc/prosody\n      - ./data:/var/lib/prosody\n    environment:\n      - prosody_CONFIG=/etc/prosody/prosody.conf\n    restart: unless-stopped\n    networks:\n      - prosody_net\n\nnetworks:\n  prosody_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prosody\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: prosody\n  template:\n    metadata:\n      labels:\n        app: prosody\n    spec:\n      containers:\n      - name: prosody\n        image: prosody:latest\n        ports:\n        - containerPort: 5222/5269\n        volumeMounts:\n        - name: config\n          mountPath: /etc/prosody\n      volumes:\n      - name: config\n        configMap:\n          name: prosody-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prosody\nspec:\n  selector:\n    app: prosody\n  ports:\n  - port: 5222/5269\n    targetPort: 5222/5269\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Prosody\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install prosody\n      package:\n        name: prosody\n        state: present\n    \n    - name: Configure prosody\n      template:\n        src: prosody.conf.j2\n        dest: /etc/prosody/prosody.conf\n        owner: prosody\n        group: prosody\n        mode: &#039;0640&#039;\n      notify: restart prosody\n    \n    - name: Start and enable prosody\n      systemd:\n        name: prosody\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart prosody\n      systemd:\n        name: prosody\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prosody\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade prosody\n\n# Arch Linux\nsudo pacman -Syu prosody\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade prosody\n\n# openSUSE\nsudo zypper update prosody\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade prosody\n\n# Always backup before updates\ntar -czf /backup/prosody-pre-update-$(date +%Y%m%d).tar.gz /etc/prosody\n\n# Restart after updates\nsudo systemctl restart prosody</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/prosody -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo prosody --verify || sudo prosody check\n\n# Update databases (if applicable)\nsudo prosody-update-db\n\n# Optimize performance\nsudo prosody-optimize\n\n# Check for security updates\nsudo prosody --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.prosody.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/prosody/prosody</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.prosody.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.prosody.org/</li>\n<li class=\"mobile-list-item\">Comparison vs ejabberd, Openfire, Tigase, Metronome: https://docs.prosody.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1990,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install prosody","id":"install-prosody"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install prosody","id":"install-prosody"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install prosody","id":"install-prosody"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install prosody","id":"install-prosody"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install prosody","id":"install-prosody"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory if needed","id":"create-configuration-directory-if-needed"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"Prosody Configuration","id":"prosody-configuration"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":1,"text":"Reload service","id":"reload-service"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Enable security features","id":"enable-security-features"},{"level":1,"text":"See security section for detailed hardening steps","id":"see-security-section-for-detailed-hardening-steps"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Reload configuration","id":"reload-configuration"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":1,"text":"Configure performance settings","id":"configure-performance-settings"},{"level":1,"text":"Apply system tuning","id":"apply-system-tuning"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":1,"text":"Configure clustering (if supported)","id":"configure-clustering-if-supported"},{"level":1,"text":"See official documentation for cluster setup","id":"see-official-documentation-for-cluster-setup"},{"level":1,"text":"Basic load balancing setup example","id":"basic-load-balancing-setup-example"},{"level":1,"text":"Configure multiple instances on different ports","id":"configure-multiple-instances-on-different-ports"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":1,"text":"Configure fail2ban","id":"configure-fail2ban"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":1,"text":"Generate SSL certificates","id":"generate-ssl-certificates"},{"level":1,"text":"Configure SSL in prosody","id":"configure-ssl-in-prosody"},{"level":1,"text":"See official documentation for SSL configuration","id":"see-official-documentation-for-ssl-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":1,"text":"Configure prosody to use PostgreSQL","id":"configure-prosody-to-use-postgresql"},{"level":1,"text":"See official documentation for database configuration","id":"see-official-documentation-for-database-configuration"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Kernel parameters","id":"kernel-parameters"},{"level":1,"text":"Prosody specific tuning","id":"prosody-specific-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":1,"text":"Configure system limits","id":"configure-system-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":1,"text":"prometheus.yml configuration","id":"prometheusyml-configuration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":1,"text":"Basic health check script","id":"basic-health-check-script"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":1,"text":"Configure log rotation","id":"configure-log-rotation"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Prosody backup script","id":"prosody-backup-script"},{"level":1,"text":"Stop service (if required)","id":"stop-service-if-required"},{"level":1,"text":"Backup configuration","id":"backup-configuration"},{"level":1,"text":"Backup data (adjust paths as needed)","id":"backup-data-adjust-paths-as-needed"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Clean old backups (keep 30 days)","id":"clean-old-backups-keep-30-days"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore configuration","id":"restore-configuration"},{"level":1,"text":"Restore data","id":"restore-data"},{"level":1,"text":"Set permissions","id":"set-permissions"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Test connection","id":"test-connection"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":1,"text":"Monitor I/O","id":"monitor-io"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":1,"text":"Run in debug mode","id":"run-in-debug-mode"},{"level":1,"text":"or","id":"or"},{"level":1,"text":"Increase log verbosity","id":"increase-log-verbosity"},{"level":1,"text":"Edit configuration to enable debug logging","id":"edit-configuration-to-enable-debug-logging"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":1,"text":"Clean logs","id":"clean-logs"},{"level":1,"text":"Verify integrity","id":"verify-integrity"},{"level":1,"text":"Update databases (if applicable)","id":"update-databases-if-applicable"},{"level":1,"text":"Optimize performance","id":"optimize-performance"},{"level":1,"text":"Check for security updates","id":"check-for-security-updates"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-16T17:23:33.118Z","metadataVersion":"2.0"}]},"__N_SSG":true}