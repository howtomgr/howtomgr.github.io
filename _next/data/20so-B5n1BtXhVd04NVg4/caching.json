{"pageProps":{"category":{"key":"caching","name":"Caching","description":"Caching tools and applications","icon":"ðŸ”§","color":"#6272a4"},"guides":[{"name":"memcached","displayName":"Memcached Installation Guide","slug":"memcached","description":"Memcached is a free and open-source, high-performance, distributed memory object caching system. Originally developed by Danga Interactive for LiveJournal, it's now used by many high-traffic websites as an in-memory key-value store that significantly reduces database load and improves application response times. It serves as a FOSS alternative to commercial caching solutions like Redis Enterprise or AWS ElastiCache.","category":"caching","subcategory":"caching","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[11211,11212],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["caching","observability","data-storage","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/caching/memcached","documentationUrl":"https://howtomgr.github.io/caching/memcached","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/memcached","updatedAt":"2025-09-16T03:41:34Z","createdAt":"2025-09-16T03:41:24Z","readmeRaw":"# Memcached Installation Guide\n\nMemcached is a free and open-source, high-performance, distributed memory object caching system. Originally developed by Danga Interactive for LiveJournal, it's now used by many high-traffic websites as an in-memory key-value store that significantly reduces database load and improves application response times. It serves as a FOSS alternative to commercial caching solutions like Redis Enterprise or AWS ElastiCache.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for high traffic)\n  - RAM: 64MB minimum (1GB+ recommended for production)\n  - Storage: 100MB for installation\n- **Operating System**: Linux, BSD, macOS, or Windows (via WSL2)\n- **Network Requirements**:\n  - Port 11211 (default, configurable)\n  - TCP and UDP protocols\n  - Low latency network for distributed setups\n- **Dependencies**:\n  - libevent 2.0+ (for event notification)\n  - SASL libraries (optional, for authentication)\n  - C compiler (for building from source)\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# RHEL/CentOS 7\nsudo yum install -y epel-release\nsudo yum install -y memcached\n\n# RHEL/CentOS/Rocky/Alma 8+\nsudo dnf install -y epel-release\nsudo dnf install -y memcached\n\n# Install development tools (optional, for building from source)\nsudo dnf groupinstall -y \"Development Tools\"\nsudo dnf install -y libevent-devel\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package list\nsudo apt update\n\n# Install memcached\nsudo apt install -y memcached libmemcached-tools\n\n# Install development libraries (optional)\nsudo apt install -y build-essential libevent-dev libsasl2-dev\n```\n\n### Arch Linux\n\n```bash\n# Install memcached from official repositories\nsudo pacman -S memcached\n\n# Install development tools (optional)\nsudo pacman -S base-devel libevent\n\n# For additional tools\nsudo pacman -S libmemcached\n\n# Enable and start service\nsudo systemctl enable --now memcached\n```\n\n### Alpine Linux\n\n```bash\n# Install memcached\napk add --no-cache memcached\n\n# Install development tools (optional)\napk add --no-cache build-base libevent-dev\n\n# Create memcached user if not exists\nadduser -D -H -s /sbin/nologin memcached\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y memcached\n\n# Install development tools (optional)\nsudo zypper install -y gcc make libevent-devel\n\n# SLES (may require additional repositories)\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y memcached\n\n# Enable and start service\nsudo systemctl enable --now memcached\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install memcached\n\n# Start as service\nbrew services start memcached\n\n# Or run manually\n/usr/local/opt/memcached/bin/memcached\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install memcached\n\n# Using manual installation\n# 1. Download from: http://downloads.northscale.com/memcached-1.4.5-amd64.zip\n# 2. Extract to C:\\memcached\n# 3. Install as service:\nC:\\memcached\\memcached.exe -d install\n\n# Start service\nnet start memcached\n```\n\n### Build from Source (All Platforms)\n\n```bash\n# Download latest version\nwget https://memcached.org/latest\ntar -zxvf memcached-*.tar.gz\ncd memcached-*\n\n# Configure and build\n./configure --prefix=/usr/local\nmake\nsudo make install\n\n# Create systemd service (Linux)\nsudo nano /etc/systemd/system/memcached.service\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create dedicated user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -s /sbin/nologin memcached\n\n# Verify user exists\nid memcached\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/sysconfig/memcached`\n- Debian/Ubuntu: `/etc/memcached.conf`\n- Arch Linux: `/etc/conf.d/memcached`\n- Alpine Linux: `/etc/conf.d/memcached`\n- openSUSE/SLES: `/etc/sysconfig/memcached`\n- macOS: `~/Library/LaunchAgents/homebrew.mxcl.memcached.plist`\n- FreeBSD: `/usr/local/etc/memcached.conf`\n\n3. **Essential settings to change**:\n\n```bash\n# Set appropriate memory limit (default is often 64MB)\n-m 256    # 256MB cache size\n\n# Bind to specific interface (security)\n-l 127.0.0.1    # localhost only\n# OR for specific network\n-l 192.168.1.100\n\n# Change default port if needed\n-p 11211\n\n# Set max connections\n-c 1024\n```\n\n**WARNING:** Never expose memcached to the public internet without authentication!\n\n### Testing Initial Setup\n\n```bash\n# Test memcached is running\necho \"stats\" | nc localhost 11211\n\n# Check version\necho \"version\" | nc localhost 11211\n\n# Test set/get operation\n(echo \"set test 0 60 5\"; echo \"hello\"; echo \"get test\") | nc localhost 11211\n```\n\n## Advanced Configuration\n\n### RHEL/CentOS Configuration\n\nEdit `/etc/sysconfig/memcached`:\n```bash\n# Port\nPORT=\"11211\"\n\n# User\nUSER=\"memcached\"\n\n# Max connections\nMAXCONN=\"1024\"\n\n# Cache size in MB\nCACHESIZE=\"64\"\n\n# Listening IP (empty for all interfaces)\nOPTIONS=\"-l 127.0.0.1\"\n\n# For network access\n# OPTIONS=\"-l 0.0.0.0\"\n\n# With SASL authentication\n# OPTIONS=\"-l 127.0.0.1 -S\"\n```\n\n### Debian/Ubuntu Configuration\n\nEdit `/etc/memcached.conf`:\n```bash\n# Memory cache size in MB\n-m 64\n\n# Port\n-p 11211\n\n# User to run daemon\n-u memcache\n\n# Listen on localhost only\n-l 127.0.0.1\n\n# Max simultaneous connections\n-c 1024\n\n# Run as daemon\n-d\n\n# Log file\nlogfile /var/log/memcached.log\n\n# Verbose logging (remove for production)\n# -v\n\n# Very verbose (debugging)\n# -vv\n```\n\n### Alpine Linux Configuration\n\nEdit `/etc/conf.d/memcached`:\n```bash\n# Memcached options\nMEMCACHED_USER=\"memcached\"\nMEMCACHED_PORT=\"11211\"\nMEMCACHED_MAX_MEMORY=\"64\"\nMEMCACHED_MAX_CONNECTIONS=\"1024\"\nMEMCACHED_LISTEN=\"127.0.0.1\"\nMEMCACHED_OPTS=\"\"\n```\n\n### macOS Configuration\n\nCreate `~/Library/LaunchAgents/homebrew.mxcl.memcached.plist`:\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>homebrew.mxcl.memcached</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>/usr/local/opt/memcached/bin/memcached</string>\n        <string>-l</string>\n        <string>127.0.0.1</string>\n        <string>-m</string>\n        <string>64</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n</dict>\n</plist>\n```\n\n### Windows Configuration\n\nCreate `C:\\memcached\\memcached.conf`:\n```\n# Memory limit in MB\n-m 64\n\n# Port number\n-p 11211\n\n# IP address to listen on\n-l 127.0.0.1\n\n# Maximum connections\n-c 1024\n```\n\n## Service Management\n\n### RHEL/CentOS/Debian/Ubuntu (systemd)\n\n```bash\n# Enable on boot\nsudo systemctl enable memcached\n\n# Start service\nsudo systemctl start memcached\n\n# Stop service\nsudo systemctl stop memcached\n\n# Restart service\nsudo systemctl restart memcached\n\n# Check status\nsudo systemctl status memcached\n\n# View logs\nsudo journalctl -u memcached -f\n```\n\n### Alpine Linux (OpenRC)\n\n```bash\n# Enable on boot\nrc-update add memcached default\n\n# Start service\nrc-service memcached start\n\n# Stop service\nrc-service memcached stop\n\n# Restart service\nrc-service memcached restart\n\n# Check status\nrc-service memcached status\n```\n\n### macOS\n\n```bash\n# Start service\nbrew services start memcached\n\n# Stop service\nbrew services stop memcached\n\n# Restart service\nbrew services restart memcached\n\n# Check if running\nbrew services list | grep memcached\n```\n\n### Windows\n\n```powershell\n# Start service\nnet start memcached\n\n# Stop service\nnet stop memcached\n\n# Restart service\nnet stop memcached && net start memcached\n\n# Check status\nsc query memcached\n\n# Configure service\nsc config memcached start= auto\n```\n\n## Security Configuration\n\n### Enable SASL Authentication\n\n**RHEL/CentOS/Debian/Ubuntu:**\n```bash\n# Install SASL\n# RHEL/CentOS\nsudo yum install -y cyrus-sasl cyrus-sasl-devel cyrus-sasl-plain\n\n# Debian/Ubuntu\nsudo apt install -y sasl2-bin libsasl2-2 libsasl2-dev libsasl2-modules\n\n# Create SASL configuration\nsudo mkdir -p /etc/sasl2\nsudo nano /etc/sasl2/memcached.conf\n```\n\nAdd to `/etc/sasl2/memcached.conf`:\n```\nmech_list: plain\nlog_level: 5\nsasldb_path: /etc/sasl2/memcached-sasldb2\n```\n\nCreate SASL user:\n```bash\nsudo saslpasswd2 -a memcached -c -f /etc/sasl2/memcached-sasldb2 myuser\nsudo chown memcached:memcached /etc/sasl2/memcached-sasldb2\n```\n\nEnable SASL in memcached:\n```bash\n# RHEL/CentOS - Edit /etc/sysconfig/memcached\nOPTIONS=\"-l 127.0.0.1 -S\"\n\n# Debian/Ubuntu - Edit /etc/memcached.conf\n# Add line:\n-S\n\n# Restart service\nsudo systemctl restart memcached\n```\n\n### Firewall Configuration\n\n**RHEL/CentOS (firewalld):**\n```bash\n# Add service\nsudo firewall-cmd --permanent --add-service=memcache\n# Or specific port\nsudo firewall-cmd --permanent --add-port=11211/tcp\n\n# Reload firewall\nsudo firewall-cmd --reload\n```\n\n**Debian/Ubuntu (ufw):**\n```bash\n# Allow from specific IP\nsudo ufw allow from 192.168.1.100 to any port 11211\n\n# Allow from subnet\nsudo ufw allow from 192.168.1.0/24 to any port 11211\n```\n\n**Alpine (iptables):**\n```bash\n# Add rule\niptables -A INPUT -p tcp --dport 11211 -s 192.168.1.0/24 -j ACCEPT\n\n# Save rules\n/etc/init.d/iptables save\n```\n\n## Performance Tuning\n\n### Linux Kernel Parameters\n\nAdd to `/etc/sysctl.conf`:\n```bash\n# Increase max connections\nnet.core.somaxconn = 1024\nnet.ipv4.tcp_max_syn_backlog = 1024\n\n# TCP memory\nnet.ipv4.tcp_mem = 786432 1048576 26777216\nnet.ipv4.tcp_rmem = 4096 87380 134217728\nnet.ipv4.tcp_wmem = 4096 65536 134217728\n\n# Apply changes\nsudo sysctl -p\n```\n\n### Connection Pooling\n\nConfigure for high-traffic scenarios:\n```bash\n# Edit memcached config\n# RHEL/CentOS: /etc/sysconfig/memcached\n# Debian/Ubuntu: /etc/memcached.conf\n\n# Increase connection limit\n-c 10000\n\n# Use multiple threads (CPU cores)\n-t 4\n\n# Disable CAS (Compare-And-Swap) if not needed\n-C\n\n# Large memory pages (Linux)\n-L\n```\n\n### Memory Optimization\n\n```bash\n# Calculate slab sizes\nmemcached -vv\n\n# Custom slab configuration\nmemcached -f 1.25 -n 48\n\n# Monitor slab usage\necho \"stats slabs\" | nc localhost 11211\n```\n\n## Monitoring\n\n### Built-in Statistics\n\n```bash\n# Basic stats\necho \"stats\" | nc localhost 11211\n\n# Slab statistics\necho \"stats slabs\" | nc localhost 11211\n\n# Item statistics\necho \"stats items\" | nc localhost 11211\n\n# Connection stats\necho \"stats conns\" | nc localhost 11211\n\n# Settings\necho \"stats settings\" | nc localhost 11211\n```\n\n### Monitoring Scripts\n\nCreate `/usr/local/bin/memcached-stats.sh`:\n```bash\n#!/bin/bash\n\necho \"=== Memcached Statistics ===\"\necho \"stats\" | nc localhost 11211 | grep -E \"STAT (bytes|curr_items|get_hits|get_misses|evictions)\"\n\nHITS=$(echo \"stats\" | nc localhost 11211 | grep \"get_hits\" | awk '{print $3}')\nMISSES=$(echo \"stats\" | nc localhost 11211 | grep \"get_misses\" | awk '{print $3}')\n\nif [ $HITS -gt 0 ]; then\n    RATIO=$(echo \"scale=2; $HITS * 100 / ($HITS + $MISSES)\" | bc)\n    echo \"Hit Ratio: ${RATIO}%\"\nfi\n```\n\n### Nagios/Monitoring Plugin\n\n```bash\n#!/bin/bash\n# check_memcached.sh\n\nHOST=${1:-localhost}\nPORT=${2:-11211}\nWARNING=${3:-80}\nCRITICAL=${4:-90}\n\nSTATS=$(echo \"stats\" | nc $HOST $PORT)\nUSED=$(echo \"$STATS\" | grep \"bytes\" | head -1 | awk '{print $3}')\nLIMIT=$(echo \"$STATS\" | grep \"limit_maxbytes\" | awk '{print $3}')\n\nPERCENT=$(echo \"scale=2; $USED * 100 / $LIMIT\" | bc | cut -d. -f1)\n\nif [ $PERCENT -ge $CRITICAL ]; then\n    echo \"CRITICAL - Memory usage at ${PERCENT}%\"\n    exit 2\nelif [ $PERCENT -ge $WARNING ]; then\n    echo \"WARNING - Memory usage at ${PERCENT}%\"\n    exit 1\nelse\n    echo \"OK - Memory usage at ${PERCENT}%\"\n    exit 0\nfi\n```\n\n## Client Configuration Examples\n\n### PHP\n\n```php\n// Install: pecl install memcached\n$memcached = new Memcached();\n$memcached->addServer('localhost', 11211);\n\n// With SASL\n$memcached->setOption(Memcached::OPT_BINARY_PROTOCOL, true);\n$memcached->setSaslAuthData('username', 'password');\n\n// Basic usage\n$memcached->set('key', 'value', 3600);\n$value = $memcached->get('key');\n```\n\n### Python\n\n```python\n# Install: pip install python-memcached\nimport memcache\n\nmc = memcache.Client(['127.0.0.1:11211'], debug=0)\nmc.set(\"key\", \"value\", time=3600)\nvalue = mc.get(\"key\")\n\n# With connection pooling\n# Install: pip install pymemcache\nfrom pymemcache.client import base\nclient = base.Client(('localhost', 11211))\nclient.set('key', 'value', expire=3600)\n```\n\n### Node.js\n\n```javascript\n// Install: npm install memcached\nconst Memcached = require('memcached');\nconst memcached = new Memcached('localhost:11211');\n\nmemcached.set('key', 'value', 3600, (err) => {\n    if (err) console.error(err);\n});\n\nmemcached.get('key', (err, data) => {\n    if (err) console.error(err);\n    console.log(data);\n});\n```\n\n### Ruby\n\n```ruby\n# Install: gem install dalli\nrequire 'dalli'\n\ndc = Dalli::Client.new('localhost:11211')\ndc.set('key', 'value', 3600)\nvalue = dc.get('key')\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Connection refused**:\n```bash\n# Check if service is running\nsudo systemctl status memcached\n\n# Check if listening on correct interface\nsudo netstat -tlnp | grep 11211\n\n# Test connection\ntelnet localhost 11211\n```\n\n2. **Out of memory errors**:\n```bash\n# Check current usage\necho \"stats\" | nc localhost 11211 | grep bytes\n\n# Increase memory limit in configuration\n# Restart service after changes\n```\n\n3. **Permission denied**:\n```bash\n# Check user permissions\nps aux | grep memcached\n\n# Fix permissions\nsudo chown memcached:memcached /var/run/memcached\n```\n\n### Debug Mode\n\n```bash\n# Run in foreground with verbose output\nmemcached -vv -p 11211 -U 0 -l 127.0.0.1\n\n# Maximum verbosity\nmemcached -vvv\n```\n\n## Best Practices\n\n1. **Memory Allocation**\n   - Set memory limit based on available RAM\n   - Leave enough memory for OS and other services\n   - Monitor eviction rates\n\n2. **Security**\n   - Bind to localhost unless network access needed\n   - Use SASL authentication for network access\n   - Implement firewall rules\n   - Never expose to public internet\n\n3. **Key Design**\n   - Use consistent naming conventions\n   - Implement namespacing\n   - Keep keys under 250 bytes\n   - Set appropriate TTLs\n\n4. **Monitoring**\n   - Track hit/miss ratios\n   - Monitor evictions\n   - Watch connection counts\n   - Set up alerts for service failures\n\n## Backup and Restore\n\n### What to Backup\n\nMemcached is an in-memory cache, so there's no persistent data to backup by default. However, you should backup:\n\n1. **Configuration files**:\n```bash\n# Create backup directory\nsudo mkdir -p /backup/memcached/configs\n\n# Backup configurations\nsudo cp /etc/sysconfig/memcached /backup/memcached/configs/  # RHEL-based\nsudo cp /etc/memcached.conf /backup/memcached/configs/       # Debian-based\nsudo cp /etc/conf.d/memcached /backup/memcached/configs/     # Alpine/Arch\n```\n\n2. **Service files** (if customized):\n```bash\nsudo cp /etc/systemd/system/memcached.service /backup/memcached/configs/\n```\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# backup-memcached-config.sh\n\nBACKUP_DIR=\"/backup/memcached/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Detect distribution and backup appropriate config\nif [ -f /etc/sysconfig/memcached ]; then\n    cp /etc/sysconfig/memcached \"$BACKUP_DIR/\"\nelif [ -f /etc/memcached.conf ]; then\n    cp /etc/memcached.conf \"$BACKUP_DIR/\"\nelif [ -f /etc/conf.d/memcached ]; then\n    cp /etc/conf.d/memcached \"$BACKUP_DIR/\"\nfi\n\n# Backup custom service files\nif [ -f /etc/systemd/system/memcached.service ]; then\n    cp /etc/systemd/system/memcached.service \"$BACKUP_DIR/\"\nfi\n\n# Save current memcached stats for reference\necho \"stats\" | nc localhost 11211 > \"$BACKUP_DIR/stats.txt\"\n\necho \"Configuration backed up to: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n#!/bin/bash\n# restore-memcached-config.sh\n\nBACKUP_DIR=\"$1\"\nif [ -z \"$BACKUP_DIR\" ]; then\n    echo \"Usage: $0 <backup-directory>\"\n    exit 1\nfi\n\n# Stop memcached\nsudo systemctl stop memcached\n\n# Restore configuration\nif [ -f \"$BACKUP_DIR/memcached\" ]; then\n    # Detect where to restore\n    if [ -d /etc/sysconfig ]; then\n        sudo cp \"$BACKUP_DIR/memcached\" /etc/sysconfig/\n    elif [ -d /etc/conf.d ]; then\n        sudo cp \"$BACKUP_DIR/memcached\" /etc/conf.d/\n    fi\nelif [ -f \"$BACKUP_DIR/memcached.conf\" ]; then\n    sudo cp \"$BACKUP_DIR/memcached.conf\" /etc/\nfi\n\n# Restore service file if exists\nif [ -f \"$BACKUP_DIR/memcached.service\" ]; then\n    sudo cp \"$BACKUP_DIR/memcached.service\" /etc/systemd/system/\n    sudo systemctl daemon-reload\nfi\n\n# Start memcached\nsudo systemctl start memcached\n\necho \"Configuration restored from: $BACKUP_DIR\"\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update memcached\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade memcached\n\n# Arch Linux\nsudo pacman -Syu memcached\n\n# Alpine Linux\napk upgrade memcached\n\n# openSUSE\nsudo zypper update memcached\n```\n\n### Version Upgrades\n\n1. **Check current version**:\n```bash\nmemcached -V\n```\n\n2. **Plan upgrade**:\n- Review changelog for breaking changes\n- Test in non-production environment\n- Plan for cache warming after restart\n\n3. **Perform upgrade**:\n```bash\n# Backup configuration\n./backup-memcached-config.sh\n\n# Upgrade package\nsudo apt update && sudo apt upgrade memcached  # Debian/Ubuntu\n\n# Restart service\nsudo systemctl restart memcached\n\n# Verify new version\nmemcached -V\n```\n\n### Log Rotation\n\nConfigure log rotation for memcached logs:\n\n```bash\n# Create /etc/logrotate.d/memcached\nsudo tee /etc/logrotate.d/memcached <<EOF\n/var/log/memcached.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 memcached memcached\n    postrotate\n        systemctl reload memcached > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n### Cleanup Procedures\n\n```bash\n# Clear all cache data (WARNING: This removes all cached items!)\necho \"flush_all\" | nc localhost 11211\n\n# Remove old log files\nfind /var/log -name \"memcached.log.*\" -mtime +30 -delete\n\n# Clean up temporary files\nrm -f /tmp/memcached.sock.*\n```\n\n## Integration Examples\n\n### PHP Integration\n\n```php\n<?php\n// Using PECL memcached extension\n$memcached = new Memcached();\n$memcached->addServer('localhost', 11211);\n\n// Connection pooling\n$memcached->setOption(Memcached::OPT_TCP_NODELAY, true);\n$memcached->setOption(Memcached::OPT_NO_BLOCK, true);\n\n// Example caching function\nfunction getCachedData($key, $callback, $ttl = 3600) {\n    global $memcached;\n    \n    $data = $memcached->get($key);\n    if ($memcached->getResultCode() === Memcached::RES_NOTFOUND) {\n        $data = $callback();\n        $memcached->set($key, $data, $ttl);\n    }\n    return $data;\n}\n\n// Usage\n$users = getCachedData('all_users', function() {\n    return db_query(\"SELECT * FROM users\");\n}, 300);\n```\n\n### Python Integration\n\n```python\nimport memcache\nimport functools\nimport time\n\n# Create client with multiple servers\nmc = memcache.Client(['127.0.0.1:11211', '127.0.0.1:11212'], debug=0)\n\n# Decorator for caching\ndef cache_result(expiration=3600):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            cache_key = f\"{func.__name__}:{str(args)}:{str(kwargs)}\"\n            result = mc.get(cache_key)\n            \n            if result is None:\n                result = func(*args, **kwargs)\n                mc.set(cache_key, result, time=expiration)\n            \n            return result\n        return wrapper\n    return decorator\n\n# Usage\n@cache_result(expiration=300)\ndef expensive_calculation(x, y):\n    time.sleep(2)  # Simulate expensive operation\n    return x * y + sum(range(1000000))\n```\n\n### Node.js Integration\n\n```javascript\nconst Memcached = require('memcached');\n\n// Create client with options\nconst memcached = new Memcached('localhost:11211', {\n    retries: 10,\n    retry: 10000,\n    remove: true,\n    failOverServers: ['192.168.1.100:11211']\n});\n\n// Promisified wrapper\nconst cache = {\n    get: (key) => new Promise((resolve, reject) => {\n        memcached.get(key, (err, data) => {\n            if (err) reject(err);\n            else resolve(data);\n        });\n    }),\n    \n    set: (key, value, ttl = 3600) => new Promise((resolve, reject) => {\n        memcached.set(key, value, ttl, (err) => {\n            if (err) reject(err);\n            else resolve(true);\n        });\n    }),\n    \n    delete: (key) => new Promise((resolve, reject) => {\n        memcached.del(key, (err) => {\n            if (err) reject(err);\n            else resolve(true);\n        });\n    })\n};\n\n// Usage with async/await\nasync function getCachedUser(userId) {\n    const cacheKey = `user:${userId}`;\n    \n    try {\n        // Try cache first\n        let user = await cache.get(cacheKey);\n        \n        if (!user) {\n            // Cache miss - fetch from database\n            user = await db.query('SELECT * FROM users WHERE id = ?', [userId]);\n            await cache.set(cacheKey, user, 300); // Cache for 5 minutes\n        }\n        \n        return user;\n    } catch (error) {\n        console.error('Cache error:', error);\n        // Fallback to database\n        return await db.query('SELECT * FROM users WHERE id = ?', [userId]);\n    }\n}\n```\n\n### Ruby on Rails Integration\n\n```ruby\n# config/environments/production.rb\nconfig.cache_store = :mem_cache_store, \n  'localhost:11211', \n  { \n    namespace: 'myapp',\n    expires_in: 1.hour,\n    compress: true,\n    pool_size: 5,\n    pool_timeout: 5\n  }\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  def expensive_calculation\n    Rails.cache.fetch(\"user_#{id}_calculation\", expires_in: 12.hours) do\n      # Expensive calculation here\n      sleep 2\n      posts.count * comments.count\n    end\n  end\nend\n\n# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  around_action :cache_control\n  \n  private\n  \n  def cache_control\n    if user_signed_in?\n      yield\n    else\n      # Cache pages for non-authenticated users\n      expires_in 5.minutes, public: true\n      yield\n    end\n  end\nend\n```\n\n## Additional Resources\n\n- [Official Documentation](https://memcached.org/)\n- [GitHub Repository](https://github.com/memcached/memcached)\n- [Protocol Specification](https://github.com/memcached/memcached/blob/master/doc/protocol.txt)\n- [Best Practices Guide](https://github.com/memcached/memcached/wiki/Programming)\n- [Performance Tuning](https://github.com/memcached/memcached/wiki/Performance)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"memcached-installation-guide\" class=\"mobile-header\">Memcached Installation Guide</h1>\n<p class=\"mobile-paragraph\">Memcached is a free and open-source, high-performance, distributed memory object caching system. Originally developed by Danga Interactive for LiveJournal, it's now used by many high-traffic websites as an in-memory key-value store that significantly reduces database load and improves application response times. It serves as a FOSS alternative to commercial caching solutions like Redis Enterprise or AWS ElastiCache.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for high traffic)</li>\n<li class=\"mobile-list-item\">RAM: 64MB minimum (1GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux, BSD, macOS, or Windows (via WSL2)</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 11211 (default, configurable)</li>\n<li class=\"mobile-list-item\">TCP and UDP protocols</li>\n<li class=\"mobile-list-item\">Low latency network for distributed setups</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">libevent 2.0+ (for event notification)</li>\n<li class=\"mobile-list-item\">SASL libraries (optional, for authentication)</li>\n<li class=\"mobile-list-item\">C compiler (for building from source)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS 7\nsudo yum install -y epel-release\nsudo yum install -y memcached\n\n# RHEL/CentOS/Rocky/Alma 8+\nsudo dnf install -y epel-release\nsudo dnf install -y memcached\n\n# Install development tools (optional, for building from source)\nsudo dnf groupinstall -y &quot;Development Tools&quot;\nsudo dnf install -y libevent-devel</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install memcached\nsudo apt install -y memcached libmemcached-tools\n\n# Install development libraries (optional)\nsudo apt install -y build-essential libevent-dev libsasl2-dev</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install memcached from official repositories\nsudo pacman -S memcached\n\n# Install development tools (optional)\nsudo pacman -S base-devel libevent\n\n# For additional tools\nsudo pacman -S libmemcached\n\n# Enable and start service\nsudo systemctl enable --now memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install memcached\napk add --no-cache memcached\n\n# Install development tools (optional)\napk add --no-cache build-base libevent-dev\n\n# Create memcached user if not exists\nadduser -D -H -s /sbin/nologin memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y memcached\n\n# Install development tools (optional)\nsudo zypper install -y gcc make libevent-devel\n\n# SLES (may require additional repositories)\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y memcached\n\n# Enable and start service\nsudo systemctl enable --now memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install memcached\n\n# Start as service\nbrew services start memcached\n\n# Or run manually\n/usr/local/opt/memcached/bin/memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install memcached\n\n# Using manual installation\n# 1. Download from: http://downloads.northscale.com/memcached-1.4.5-amd64.zip\n# 2. Extract to C:\\memcached\n# 3. Install as service:\nC:\\memcached\\memcached.exe -d install\n\n# Start service\nnet start memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"build-from-source-all-platforms\" class=\"mobile-header\">Build from Source (All Platforms)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest version\nwget https://memcached.org/latest\ntar -zxvf memcached-*.tar.gz\ncd memcached-*\n\n# Configure and build\n./configure --prefix=/usr/local\nmake\nsudo make install\n\n# Create systemd service (Linux)\nsudo nano /etc/systemd/system/memcached.service</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create dedicated user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -s /sbin/nologin memcached\n\n# Verify user exists\nid memcached</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/sysconfig/memcached</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/memcached.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/conf.d/memcached</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/conf.d/memcached</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/sysconfig/memcached</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">~/Library/LaunchAgents/homebrew.mxcl.memcached.plist</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/memcached.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate memory limit (default is often 64MB)\n-m 256    # 256MB cache size\n\n# Bind to specific interface (security)\n-l 127.0.0.1    # localhost only\n# OR for specific network\n-l 192.168.1.100\n\n# Change default port if needed\n-p 11211\n\n# Set max connections\n-c 1024</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never expose memcached to the public internet without authentication!</p>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test memcached is running\necho &quot;stats&quot; | nc localhost 11211\n\n# Check version\necho &quot;version&quot; | nc localhost 11211\n\n# Test set/get operation\n(echo &quot;set test 0 60 5&quot;; echo &quot;hello&quot;; echo &quot;get test&quot;) | nc localhost 11211</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"rhelcentos-configuration\" class=\"mobile-header\">RHEL/CentOS Configuration</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">/etc/sysconfig/memcached</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Port\nPORT=&quot;11211&quot;\n\n# User\nUSER=&quot;memcached&quot;\n\n# Max connections\nMAXCONN=&quot;1024&quot;\n\n# Cache size in MB\nCACHESIZE=&quot;64&quot;\n\n# Listening IP (empty for all interfaces)\nOPTIONS=&quot;-l 127.0.0.1&quot;\n\n# For network access\n# OPTIONS=&quot;-l 0.0.0.0&quot;\n\n# With SASL authentication\n# OPTIONS=&quot;-l 127.0.0.1 -S&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu-configuration\" class=\"mobile-header\">Debian/Ubuntu Configuration</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">/etc/memcached.conf</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Memory cache size in MB\n-m 64\n\n# Port\n-p 11211\n\n# User to run daemon\n-u memcache\n\n# Listen on localhost only\n-l 127.0.0.1\n\n# Max simultaneous connections\n-c 1024\n\n# Run as daemon\n-d\n\n# Log file\nlogfile /var/log/memcached.log\n\n# Verbose logging (remove for production)\n# -v\n\n# Very verbose (debugging)\n# -vv</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux-configuration\" class=\"mobile-header\">Alpine Linux Configuration</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">/etc/conf.d/memcached</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Memcached options\nMEMCACHED_USER=&quot;memcached&quot;\nMEMCACHED_PORT=&quot;11211&quot;\nMEMCACHED_MAX_MEMORY=&quot;64&quot;\nMEMCACHED_MAX_CONNECTIONS=&quot;1024&quot;\nMEMCACHED_LISTEN=&quot;127.0.0.1&quot;\nMEMCACHED_OPTS=&quot;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos-configuration\" class=\"mobile-header\">macOS Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">~/Library/LaunchAgents/homebrew.mxcl.memcached.plist</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"xml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">xml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;\n&lt;plist version=&quot;1.0&quot;&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n    &lt;string&gt;homebrew.mxcl.memcached&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;/usr/local/opt/memcached/bin/memcached&lt;/string&gt;\n        &lt;string&gt;-l&lt;/string&gt;\n        &lt;string&gt;127.0.0.1&lt;/string&gt;\n        &lt;string&gt;-m&lt;/string&gt;\n        &lt;string&gt;64&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-configuration\" class=\"mobile-header\">Windows Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">C:\\memcached\\memcached.conf</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"text\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">text</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-text\"># Memory limit in MB\n-m 64\n\n# Port number\n-p 11211\n\n# IP address to listen on\n-l 127.0.0.1\n\n# Maximum connections\n-c 1024</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"rhelcentosdebianubuntu-systemd\" class=\"mobile-header\">RHEL/CentOS/Debian/Ubuntu (systemd)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable on boot\nsudo systemctl enable memcached\n\n# Start service\nsudo systemctl start memcached\n\n# Stop service\nsudo systemctl stop memcached\n\n# Restart service\nsudo systemctl restart memcached\n\n# Check status\nsudo systemctl status memcached\n\n# View logs\nsudo journalctl -u memcached -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux-openrc\" class=\"mobile-header\">Alpine Linux (OpenRC)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable on boot\nrc-update add memcached default\n\n# Start service\nrc-service memcached start\n\n# Stop service\nrc-service memcached stop\n\n# Restart service\nrc-service memcached restart\n\n# Check status\nrc-service memcached status</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start service\nbrew services start memcached\n\n# Stop service\nbrew services stop memcached\n\n# Restart service\nbrew services restart memcached\n\n# Check if running\nbrew services list | grep memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start memcached\n\n# Stop service\nnet stop memcached\n\n# Restart service\nnet stop memcached &amp;&amp; net start memcached\n\n# Check status\nsc query memcached\n\n# Configure service\nsc config memcached start= auto</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"enable-sasl-authentication\" class=\"mobile-header\">Enable SASL Authentication</h3>\n<p class=\"mobile-paragraph\"><strong>RHEL/CentOS/Debian/Ubuntu:</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install SASL\n# RHEL/CentOS\nsudo yum install -y cyrus-sasl cyrus-sasl-devel cyrus-sasl-plain\n\n# Debian/Ubuntu\nsudo apt install -y sasl2-bin libsasl2-2 libsasl2-dev libsasl2-modules\n\n# Create SASL configuration\nsudo mkdir -p /etc/sasl2\nsudo nano /etc/sasl2/memcached.conf</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Add to <code class=\"mobile-inline-code\">/etc/sasl2/memcached.conf</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"text\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">text</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-text\">mech_list: plain\nlog_level: 5\nsasldb_path: /etc/sasl2/memcached-sasldb2</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create SASL user:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo saslpasswd2 -a memcached -c -f /etc/sasl2/memcached-sasldb2 myuser\nsudo chown memcached:memcached /etc/sasl2/memcached-sasldb2</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Enable SASL in memcached:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS - Edit /etc/sysconfig/memcached\nOPTIONS=&quot;-l 127.0.0.1 -S&quot;\n\n# Debian/Ubuntu - Edit /etc/memcached.conf\n# Add line:\n-S\n\n# Restart service\nsudo systemctl restart memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<p class=\"mobile-paragraph\"><strong>RHEL/CentOS (firewalld):</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add service\nsudo firewall-cmd --permanent --add-service=memcache\n# Or specific port\nsudo firewall-cmd --permanent --add-port=11211/tcp\n\n# Reload firewall\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>Debian/Ubuntu (ufw):</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow from specific IP\nsudo ufw allow from 192.168.1.100 to any port 11211\n\n# Allow from subnet\nsudo ufw allow from 192.168.1.0/24 to any port 11211</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>Alpine (iptables):</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add rule\niptables -A INPUT -p tcp --dport 11211 -s 192.168.1.0/24 -j ACCEPT\n\n# Save rules\n/etc/init.d/iptables save</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h2>\n<h3 id=\"linux-kernel-parameters\" class=\"mobile-header\">Linux Kernel Parameters</h3>\n<p class=\"mobile-paragraph\">Add to <code class=\"mobile-inline-code\">/etc/sysctl.conf</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase max connections\nnet.core.somaxconn = 1024\nnet.ipv4.tcp_max_syn_backlog = 1024\n\n# TCP memory\nnet.ipv4.tcp_mem = 786432 1048576 26777216\nnet.ipv4.tcp_rmem = 4096 87380 134217728\nnet.ipv4.tcp_wmem = 4096 65536 134217728\n\n# Apply changes\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"connection-pooling\" class=\"mobile-header\">Connection Pooling</h3>\n<p class=\"mobile-paragraph\">Configure for high-traffic scenarios:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit memcached config\n# RHEL/CentOS: /etc/sysconfig/memcached\n# Debian/Ubuntu: /etc/memcached.conf\n\n# Increase connection limit\n-c 10000\n\n# Use multiple threads (CPU cores)\n-t 4\n\n# Disable CAS (Compare-And-Swap) if not needed\n-C\n\n# Large memory pages (Linux)\n-L</code></pre>\n      </div>\n    </div>\n<h3 id=\"memory-optimization\" class=\"mobile-header\">Memory Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Calculate slab sizes\nmemcached -vv\n\n# Custom slab configuration\nmemcached -f 1.25 -n 48\n\n# Monitor slab usage\necho &quot;stats slabs&quot; | nc localhost 11211</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-statistics\" class=\"mobile-header\">Built-in Statistics</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic stats\necho &quot;stats&quot; | nc localhost 11211\n\n# Slab statistics\necho &quot;stats slabs&quot; | nc localhost 11211\n\n# Item statistics\necho &quot;stats items&quot; | nc localhost 11211\n\n# Connection stats\necho &quot;stats conns&quot; | nc localhost 11211\n\n# Settings\necho &quot;stats settings&quot; | nc localhost 11211</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-scripts\" class=\"mobile-header\">Monitoring Scripts</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/usr/local/bin/memcached-stats.sh</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n\necho &quot;=== Memcached Statistics ===&quot;\necho &quot;stats&quot; | nc localhost 11211 | grep -E &quot;STAT (bytes|curr_items|get_hits|get_misses|evictions)&quot;\n\nHITS=$(echo &quot;stats&quot; | nc localhost 11211 | grep &quot;get_hits&quot; | awk &#039;{print $3}&#039;)\nMISSES=$(echo &quot;stats&quot; | nc localhost 11211 | grep &quot;get_misses&quot; | awk &#039;{print $3}&#039;)\n\nif [ $HITS -gt 0 ]; then\n    RATIO=$(echo &quot;scale=2; $HITS * 100 / ($HITS + $MISSES)&quot; | bc)\n    echo &quot;Hit Ratio: ${RATIO}%&quot;\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"nagiosmonitoring-plugin\" class=\"mobile-header\">Nagios/Monitoring Plugin</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# check_memcached.sh\n\nHOST=${1:-localhost}\nPORT=${2:-11211}\nWARNING=${3:-80}\nCRITICAL=${4:-90}\n\nSTATS=$(echo &quot;stats&quot; | nc $HOST $PORT)\nUSED=$(echo &quot;$STATS&quot; | grep &quot;bytes&quot; | head -1 | awk &#039;{print $3}&#039;)\nLIMIT=$(echo &quot;$STATS&quot; | grep &quot;limit_maxbytes&quot; | awk &#039;{print $3}&#039;)\n\nPERCENT=$(echo &quot;scale=2; $USED * 100 / $LIMIT&quot; | bc | cut -d. -f1)\n\nif [ $PERCENT -ge $CRITICAL ]; then\n    echo &quot;CRITICAL - Memory usage at ${PERCENT}%&quot;\n    exit 2\nelif [ $PERCENT -ge $WARNING ]; then\n    echo &quot;WARNING - Memory usage at ${PERCENT}%&quot;\n    exit 1\nelse\n    echo &quot;OK - Memory usage at ${PERCENT}%&quot;\n    exit 0\nfi</code></pre>\n      </div>\n    </div>\n<h2 id=\"client-configuration-examples\" class=\"mobile-header\">Client Configuration Examples</h2>\n<h3 id=\"php\" class=\"mobile-header\">PHP</h3>\n<div class=\"mobile-code-block\" data-language=\"php\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">php</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-php\">// Install: pecl install memcached\n$memcached = new Memcached();\n$memcached-&gt;addServer(&#039;localhost&#039;, 11211);\n\n// With SASL\n$memcached-&gt;setOption(Memcached::OPT_BINARY_PROTOCOL, true);\n$memcached-&gt;setSaslAuthData(&#039;username&#039;, &#039;password&#039;);\n\n// Basic usage\n$memcached-&gt;set(&#039;key&#039;, &#039;value&#039;, 3600);\n$value = $memcached-&gt;get(&#039;key&#039;);</code></pre>\n      </div>\n    </div>\n<h3 id=\"python\" class=\"mobile-header\">Python</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Install: pip install python-memcached\nimport memcache\n\nmc = memcache.Client([&#039;127.0.0.1:11211&#039;], debug=0)\nmc.set(&quot;key&quot;, &quot;value&quot;, time=3600)\nvalue = mc.get(&quot;key&quot;)\n\n# With connection pooling\n# Install: pip install pymemcache\nfrom pymemcache.client import base\nclient = base.Client((&#039;localhost&#039;, 11211))\nclient.set(&#039;key&#039;, &#039;value&#039;, expire=3600)</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs\" class=\"mobile-header\">Node.js</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Install: npm install memcached\nconst Memcached = require(&#039;memcached&#039;);\nconst memcached = new Memcached(&#039;localhost:11211&#039;);\n\nmemcached.set(&#039;key&#039;, &#039;value&#039;, 3600, (err) =&gt; {\n    if (err) console.error(err);\n});\n\nmemcached.get(&#039;key&#039;, (err, data) =&gt; {\n    if (err) console.error(err);\n    console.log(data);\n});</code></pre>\n      </div>\n    </div>\n<h3 id=\"ruby\" class=\"mobile-header\">Ruby</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># Install: gem install dalli\nrequire &#039;dalli&#039;\n\ndc = Dalli::Client.new(&#039;localhost:11211&#039;)\ndc.set(&#039;key&#039;, &#039;value&#039;, 3600)\nvalue = dc.get(&#039;key&#039;)</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is running\nsudo systemctl status memcached\n\n# Check if listening on correct interface\nsudo netstat -tlnp | grep 11211\n\n# Test connection\ntelnet localhost 11211</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Out of memory errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check current usage\necho &quot;stats&quot; | nc localhost 11211 | grep bytes\n\n# Increase memory limit in configuration\n# Restart service after changes</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Permission denied</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check user permissions\nps aux | grep memcached\n\n# Fix permissions\nsudo chown memcached:memcached /var/run/memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in foreground with verbose output\nmemcached -vv -p 11211 -U 0 -l 127.0.0.1\n\n# Maximum verbosity\nmemcached -vvv</code></pre>\n      </div>\n    </div>\n<h2 id=\"best-practices\" class=\"mobile-header\">Best Practices</h2>\n<p class=\"mobile-paragraph\">1. <strong>Memory Allocation</strong></p>\n<li class=\"mobile-list-item\">Set memory limit based on available RAM</li>\n<li class=\"mobile-list-item\">Leave enough memory for OS and other services</li>\n<li class=\"mobile-list-item\">Monitor eviction rates</li>\n<p class=\"mobile-paragraph\">2. <strong>Security</strong></p>\n<li class=\"mobile-list-item\">Bind to localhost unless network access needed</li>\n<li class=\"mobile-list-item\">Use SASL authentication for network access</li>\n<li class=\"mobile-list-item\">Implement firewall rules</li>\n<li class=\"mobile-list-item\">Never expose to public internet</li>\n<p class=\"mobile-paragraph\">3. <strong>Key Design</strong></p>\n<li class=\"mobile-list-item\">Use consistent naming conventions</li>\n<li class=\"mobile-list-item\">Implement namespacing</li>\n<li class=\"mobile-list-item\">Keep keys under 250 bytes</li>\n<li class=\"mobile-list-item\">Set appropriate TTLs</li>\n<p class=\"mobile-paragraph\">4. <strong>Monitoring</strong></p>\n<li class=\"mobile-list-item\">Track hit/miss ratios</li>\n<li class=\"mobile-list-item\">Monitor evictions</li>\n<li class=\"mobile-list-item\">Watch connection counts</li>\n<li class=\"mobile-list-item\">Set up alerts for service failures</li>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"what-to-backup\" class=\"mobile-header\">What to Backup</h3>\n<p class=\"mobile-paragraph\">Memcached is an in-memory cache, so there's no persistent data to backup by default. However, you should backup:</p>\n<p class=\"mobile-paragraph\">1. <strong>Configuration files</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup directory\nsudo mkdir -p /backup/memcached/configs\n\n# Backup configurations\nsudo cp /etc/sysconfig/memcached /backup/memcached/configs/  # RHEL-based\nsudo cp /etc/memcached.conf /backup/memcached/configs/       # Debian-based\nsudo cp /etc/conf.d/memcached /backup/memcached/configs/     # Alpine/Arch</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Service files</strong> (if customized):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo cp /etc/systemd/system/memcached.service /backup/memcached/configs/</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-memcached-config.sh\n\nBACKUP_DIR=&quot;/backup/memcached/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Detect distribution and backup appropriate config\nif [ -f /etc/sysconfig/memcached ]; then\n    cp /etc/sysconfig/memcached &quot;$BACKUP_DIR/&quot;\nelif [ -f /etc/memcached.conf ]; then\n    cp /etc/memcached.conf &quot;$BACKUP_DIR/&quot;\nelif [ -f /etc/conf.d/memcached ]; then\n    cp /etc/conf.d/memcached &quot;$BACKUP_DIR/&quot;\nfi\n\n# Backup custom service files\nif [ -f /etc/systemd/system/memcached.service ]; then\n    cp /etc/systemd/system/memcached.service &quot;$BACKUP_DIR/&quot;\nfi\n\n# Save current memcached stats for reference\necho &quot;stats&quot; | nc localhost 11211 &gt; &quot;$BACKUP_DIR/stats.txt&quot;\n\necho &quot;Configuration backed up to: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# restore-memcached-config.sh\n\nBACKUP_DIR=&quot;$1&quot;\nif [ -z &quot;$BACKUP_DIR&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-directory&gt;&quot;\n    exit 1\nfi\n\n# Stop memcached\nsudo systemctl stop memcached\n\n# Restore configuration\nif [ -f &quot;$BACKUP_DIR/memcached&quot; ]; then\n    # Detect where to restore\n    if [ -d /etc/sysconfig ]; then\n        sudo cp &quot;$BACKUP_DIR/memcached&quot; /etc/sysconfig/\n    elif [ -d /etc/conf.d ]; then\n        sudo cp &quot;$BACKUP_DIR/memcached&quot; /etc/conf.d/\n    fi\nelif [ -f &quot;$BACKUP_DIR/memcached.conf&quot; ]; then\n    sudo cp &quot;$BACKUP_DIR/memcached.conf&quot; /etc/\nfi\n\n# Restore service file if exists\nif [ -f &quot;$BACKUP_DIR/memcached.service&quot; ]; then\n    sudo cp &quot;$BACKUP_DIR/memcached.service&quot; /etc/systemd/system/\n    sudo systemctl daemon-reload\nfi\n\n# Start memcached\nsudo systemctl start memcached\n\necho &quot;Configuration restored from: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update memcached\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade memcached\n\n# Arch Linux\nsudo pacman -Syu memcached\n\n# Alpine Linux\napk upgrade memcached\n\n# openSUSE\nsudo zypper update memcached</code></pre>\n      </div>\n    </div>\n<h3 id=\"version-upgrades\" class=\"mobile-header\">Version Upgrades</h3>\n<p class=\"mobile-paragraph\">1. <strong>Check current version</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">memcached -V</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Plan upgrade</strong>:</p>\n<li class=\"mobile-list-item\">Review changelog for breaking changes</li>\n<li class=\"mobile-list-item\">Test in non-production environment</li>\n<li class=\"mobile-list-item\">Plan for cache warming after restart</li>\n<p class=\"mobile-paragraph\">3. <strong>Perform upgrade</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup configuration\n./backup-memcached-config.sh\n\n# Upgrade package\nsudo apt update &amp;&amp; sudo apt upgrade memcached  # Debian/Ubuntu\n\n# Restart service\nsudo systemctl restart memcached\n\n# Verify new version\nmemcached -V</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-rotation\" class=\"mobile-header\">Log Rotation</h3>\n<p class=\"mobile-paragraph\">Configure log rotation for memcached logs:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create /etc/logrotate.d/memcached\nsudo tee /etc/logrotate.d/memcached &lt;&lt;EOF\n/var/log/memcached.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 memcached memcached\n    postrotate\n        systemctl reload memcached &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup-procedures\" class=\"mobile-header\">Cleanup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clear all cache data (WARNING: This removes all cached items!)\necho &quot;flush_all&quot; | nc localhost 11211\n\n# Remove old log files\nfind /var/log -name &quot;memcached.log.*&quot; -mtime +30 -delete\n\n# Clean up temporary files\nrm -f /tmp/memcached.sock.*</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"php-integration\" class=\"mobile-header\">PHP Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"php\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">php</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-php\">&lt;?php\n// Using PECL memcached extension\n$memcached = new Memcached();\n$memcached-&gt;addServer(&#039;localhost&#039;, 11211);\n\n// Connection pooling\n$memcached-&gt;setOption(Memcached::OPT_TCP_NODELAY, true);\n$memcached-&gt;setOption(Memcached::OPT_NO_BLOCK, true);\n\n// Example caching function\nfunction getCachedData($key, $callback, $ttl = 3600) {\n    global $memcached;\n    \n    $data = $memcached-&gt;get($key);\n    if ($memcached-&gt;getResultCode() === Memcached::RES_NOTFOUND) {\n        $data = $callback();\n        $memcached-&gt;set($key, $data, $ttl);\n    }\n    return $data;\n}\n\n// Usage\n$users = getCachedData(&#039;all_users&#039;, function() {\n    return db_query(&quot;SELECT * FROM users&quot;);\n}, 300);</code></pre>\n      </div>\n    </div>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">import memcache\nimport functools\nimport time\n\n# Create client with multiple servers\nmc = memcache.Client([&#039;127.0.0.1:11211&#039;, &#039;127.0.0.1:11212&#039;], debug=0)\n\n# Decorator for caching\ndef cache_result(expiration=3600):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            cache_key = f&quot;{func.__name__}:{str(args)}:{str(kwargs)}&quot;\n            result = mc.get(cache_key)\n            \n            if result is None:\n                result = func(*args, **kwargs)\n                mc.set(cache_key, result, time=expiration)\n            \n            return result\n        return wrapper\n    return decorator\n\n# Usage\n@cache_result(expiration=300)\ndef expensive_calculation(x, y):\n    time.sleep(2)  # Simulate expensive operation\n    return x * y + sum(range(1000000))</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">const Memcached = require(&#039;memcached&#039;);\n\n// Create client with options\nconst memcached = new Memcached(&#039;localhost:11211&#039;, {\n    retries: 10,\n    retry: 10000,\n    remove: true,\n    failOverServers: [&#039;192.168.1.100:11211&#039;]\n});\n\n// Promisified wrapper\nconst cache = {\n    get: (key) =&gt; new Promise((resolve, reject) =&gt; {\n        memcached.get(key, (err, data) =&gt; {\n            if (err) reject(err);\n            else resolve(data);\n        });\n    }),\n    \n    set: (key, value, ttl = 3600) =&gt; new Promise((resolve, reject) =&gt; {\n        memcached.set(key, value, ttl, (err) =&gt; {\n            if (err) reject(err);\n            else resolve(true);\n        });\n    }),\n    \n    delete: (key) =&gt; new Promise((resolve, reject) =&gt; {\n        memcached.del(key, (err) =&gt; {\n            if (err) reject(err);\n            else resolve(true);\n        });\n    })\n};\n\n// Usage with async/await\nasync function getCachedUser(userId) {\n    const cacheKey = `user:${userId}`;\n    \n    try {\n        // Try cache first\n        let user = await cache.get(cacheKey);\n        \n        if (!user) {\n            // Cache miss - fetch from database\n            user = await db.query(&#039;SELECT * FROM users WHERE id = ?&#039;, [userId]);\n            await cache.set(cacheKey, user, 300); // Cache for 5 minutes\n        }\n        \n        return user;\n    } catch (error) {\n        console.error(&#039;Cache error:&#039;, error);\n        // Fallback to database\n        return await db.query(&#039;SELECT * FROM users WHERE id = ?&#039;, [userId]);\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"ruby-on-rails-integration\" class=\"mobile-header\">Ruby on Rails Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># config/environments/production.rb\nconfig.cache_store = :mem_cache_store, \n  &#039;localhost:11211&#039;, \n  { \n    namespace: &#039;myapp&#039;,\n    expires_in: 1.hour,\n    compress: true,\n    pool_size: 5,\n    pool_timeout: 5\n  }\n\n# app/models/user.rb\nclass User &lt; ApplicationRecord\n  def expensive_calculation\n    Rails.cache.fetch(&quot;user_#{id}_calculation&quot;, expires_in: 12.hours) do\n      # Expensive calculation here\n      sleep 2\n      posts.count * comments.count\n    end\n  end\nend\n\n# app/controllers/application_controller.rb\nclass ApplicationController &lt; ActionController::Base\n  around_action :cache_control\n  \n  private\n  \n  def cache_control\n    if user_signed_in?\n      yield\n    else\n      # Cache pages for non-authenticated users\n      expires_in 5.minutes, public: true\n      yield\n    end\n  end\nend</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://memcached.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/memcached/memcached\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/memcached/memcached/blob/master/doc/protocol.txt\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Protocol Specification</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/memcached/memcached/wiki/Programming\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/memcached/memcached/wiki/Performance\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"14 min","wordCount":2764,"lastBuilt":"2025-09-16T07:35:45.876Z","metadataVersion":"2.0"}]},"__N_SSG":true}