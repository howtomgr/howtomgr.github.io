{"pageProps":{"category":{"key":"database-management","name":"Database management","description":"Database management tools and applications","icon":"🗄️","color":"#8be9fd"},"guides":[{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Adminer is a full-featured database management tool written in PHP","category":"database-management","subcategory":"database-management","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["database","web-interface","php","mysql","postgresql"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/database-management/adminer","documentationUrl":"https://howtomgr.github.io/database-management/adminer","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-16T07:09:51Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"# Adminer Installation Guide\n\nAdminer is a free and open-source Database Management. A full-featured database management tool written in PHP\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum\n  - Network: 80 ports required\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10 Pro\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default adminer port)\n  - Firewall rules configured\n- **Dependencies**:\n  - php, php-mysql, php-pgsql\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install adminer\nsudo dnf install -y adminer php, php-mysql, php-pgsql\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=adminer || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nadminer --version || systemctl status httpd\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install adminer\nsudo apt install -y adminer php, php-mysql, php-pgsql\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nadminer --version || systemctl status httpd\n```\n\n### Arch Linux\n\n```bash\n# Install adminer\nsudo pacman -S adminer\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nadminer --version || systemctl status httpd\n```\n\n### Alpine Linux\n\n```bash\n# Install adminer\napk add --no-cache adminer\n\n# Enable and start service\nrc-update add httpd default\nrc-service httpd start\n\n# Verify installation\nadminer --version || rc-service httpd status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install adminer\nsudo zypper install -y adminer php, php-mysql, php-pgsql\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=adminer || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nadminer --version || systemctl status httpd\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install adminer\n\n# Start service\nbrew services start adminer\n\n# Verify installation\nadminer --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install adminer\n\n# Enable in rc.conf\necho 'httpd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice httpd start\n\n# Verify installation\nadminer --version || service httpd status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install adminer\n\n# Or using Scoop\nscoop install adminer\n\n# Verify installation\nadminer --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /var/www/adminer\n\n# Set up basic configuration\nsudo tee /var/www/adminer/adminer.conf << 'EOF'\n# Adminer Configuration\npost_max_size = 256M, upload_max_filesize = 256M\nEOF\n\n# Set appropriate permissions\nsudo chown -R adminer:adminer /var/www/adminer || \\\n  sudo chown -R $(whoami):$(whoami) /var/www/adminer\n\n# Test configuration\nsudo adminer --test || sudo httpd configtest\n```\n\n### Security Hardening\n\n```bash\n# Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false adminer || true\n\n# Secure configuration files\nsudo chmod 750 /var/www/adminer\nsudo chmod 640 /var/www/adminer/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable httpd\n\n# Start service\nsudo systemctl start httpd\n\n# Stop service\nsudo systemctl stop httpd\n\n# Restart service\nsudo systemctl restart httpd\n\n# Reload configuration\nsudo systemctl reload httpd\n\n# Check status\nsudo systemctl status httpd\n\n# View logs\nsudo journalctl -u httpd -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add httpd default\n\n# Start service\nrc-service httpd start\n\n# Stop service\nrc-service httpd stop\n\n# Restart service\nrc-service httpd restart\n\n# Check status\nrc-service httpd status\n\n# View logs\ntail -f /var/log/httpd/httpd.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'httpd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice httpd start\n\n# Stop service\nservice httpd stop\n\n# Restart service\nservice httpd restart\n\n# Check status\nservice httpd status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start adminer\nbrew services stop adminer\nbrew services restart adminer\n\n# Check status\nbrew services list | grep adminer\n\n# View logs\ntail -f $(brew --prefix)/var/log/adminer.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start httpd\n\n# Stop service\nnet stop httpd\n\n# Using PowerShell\nStart-Service httpd\nStop-Service httpd\nRestart-Service httpd\n\n# Check status\nGet-Service httpd\n\n# Set to automatic startup\nSet-Service httpd -StartupType Automatic\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /var/www/adminer/adminer.conf << 'EOF'\n# Performance tuning\npost_max_size = 256M, upload_max_filesize = 256M\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart httpd\n```\n\n### High Availability Setup\n\n```bash\n# Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream adminer_backend {\n    server 127.0.0.1:80;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name adminer.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name adminer.example.com;\n\n    ssl_certificate /etc/ssl/certs/adminer.crt;\n    ssl_certificate_key /etc/ssl/private/adminer.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://adminer_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName adminer.example.com\n    Redirect permanent / https://adminer.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName adminer.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/adminer.crt\n    SSLCertificateKeyFile /etc/ssl/private/adminer.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    <Location />\n        ProxyPass http://127.0.0.1:80/\n        ProxyPassReverse http://127.0.0.1:80/\n    </Location>\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:80/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nglobal\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend adminer_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/adminer.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend adminer_backend\n\nbackend adminer_backend\n    balance roundrobin\n    option httpchk GET /health\n    server adminer1 127.0.0.1:80 check\n```\n\n### Caddy Configuration\n\n```caddy\nadminer.example.com {\n    reverse_proxy 127.0.0.1:80 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    encode gzip\n}\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Create dedicated user\nsudo useradd --system --shell /bin/false --home /var/www/adminer adminer || true\n\n# Set ownership\nsudo chown -R adminer:adminer /var/www/adminer\nsudo chown -R adminer:adminer /var/log/httpd\n\n# Set permissions\nsudo chmod 750 /var/www/adminer\nsudo chmod 640 /var/www/adminer/*\nsudo chmod 750 /var/log/httpd\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 80 proto tcp comment \"Adminer\"\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=adminer\nsudo firewall-cmd --permanent --service=adminer --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=adminer\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 80 || true\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/adminer.key \\\n    -out /etc/ssl/certs/adminer.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=adminer.example.com\"\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/adminer.key\nsudo chmod 644 /etc/ssl/certs/adminer.crt\n\n# For production, use Let's Encrypt\nsudo certbot certonly --standalone -d adminer.example.com\n```\n\n### Fail2ban Configuration\n\n```ini\n# /etc/fail2ban/jail.d/adminer.conf\n[adminer]\nenabled = true\nport = 80\nfilter = adminer\nlogpath = /var/log/httpd/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\n```\n\n```ini\n# /etc/fail2ban/filter.d/adminer.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from <HOST>.*$\n            ^.*Authentication failed.*from <HOST>.*$\n            ^.*Invalid credentials.*from <HOST>.*$\nignoreregex =\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE adminer_db;\nCREATE USER adminer_user WITH ENCRYPTED PASSWORD 'secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE adminer_db TO adminer_user;\n\\q\nEOF\n\n# Configure connection in Adminer\necho \"DATABASE_URL=postgresql://adminer_user:secure_password_here@localhost/adminer_db\" | \\\n  sudo tee -a /var/www/adminer/adminer.env\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE adminer_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'adminer_user'@'localhost' IDENTIFIED BY 'secure_password_here';\nGRANT ALL PRIVILEGES ON adminer_db.* TO 'adminer_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho \"DATABASE_URL=mysql://adminer_user:secure_password_here@localhost/adminer_db\" | \\\n  sudo tee -a /var/www/adminer/adminer.env\n```\n\n### SQLite Backend (if applicable)\n\n```bash\n# Create database directory\nsudo mkdir -p /var/lib/adminer\nsudo chown adminer:adminer /var/lib/adminer\n\n# Initialize database\nsudo -u adminer adminer init-db\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for better performance\ncat << 'EOF' | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat << 'EOF' | sudo tee -a /etc/security/limits.conf\nadminer soft nofile 65535\nadminer hard nofile 65535\nadminer soft nproc 32768\nadminer hard nproc 32768\nEOF\n```\n\n### Application Tuning\n\n```bash\n# Configure application-specific performance settings\ncat << 'EOF' | sudo tee -a /var/www/adminer/performance.conf\n# Performance configuration\npost_max_size = 256M, upload_max_filesize = 256M\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart httpd\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: 'adminer'\n    static_configs:\n      - targets: ['localhost:80/metrics']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/adminer-health\n\n# Check if service is running\nif ! systemctl is-active --quiet httpd; then\n    echo \"CRITICAL: Adminer service is not running\"\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 80 2>/dev/null; then\n    echo \"CRITICAL: Adminer is not listening on port 80\"\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:80/health || echo \"999\")\nif (( $(echo \"$response_time > 5\" | bc -l) )); then\n    echo \"WARNING: Slow response time: ${response_time}s\"\n    exit 1\nfi\n\necho \"OK: Adminer is healthy (response time: ${response_time}s)\"\nexit 0\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\ncat << 'EOF' | sudo tee /etc/logrotate.d/adminer\n/var/log/httpd/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 adminer adminer\n    postrotate\n        systemctl reload httpd > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/adminer\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/adminer-backup\n\nBACKUP_DIR=\"/backup/adminer\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/adminer_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if needed for consistency)\necho \"Stopping Adminer service...\"\nsystemctl stop httpd\n\n# Backup configuration\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_FILE\" \\\n    /var/www/adminer \\\n    /var/lib/adminer \\\n    /var/log/httpd\n\n# Backup database (if applicable)\nif command -v pg_dump &> /dev/null; then\n    echo \"Backing up database...\"\n    sudo -u postgres pg_dump adminer_db | gzip > \"$BACKUP_DIR/adminer_db_$DATE.sql.gz\"\nfi\n\n# Start service\necho \"Starting Adminer service...\"\nsystemctl start httpd\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/adminer-restore\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping Adminer service...\"\nsystemctl stop httpd\n\n# Restore files\necho \"Restoring from backup...\"\ntar -xzf \"$BACKUP_FILE\" -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo \"$BACKUP_FILE\" | sed 's/.tar.gz$/_db.sql.gz/')\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql adminer_db\nfi\n\n# Fix permissions\nchown -R adminer:adminer /var/www/adminer\nchown -R adminer:adminer /var/lib/adminer\n\n# Start service\necho \"Starting Adminer service...\"\nsystemctl start httpd\n\necho \"Restore completed successfully\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status httpd\nsudo journalctl -u httpd -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 80\nsudo lsof -i :80\n\n# Verify configuration\nsudo adminer --test || sudo httpd configtest\n\n# Check permissions\nls -la /var/www/adminer\nls -la /var/log/httpd\n```\n\n2. **Cannot access web interface**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep httpd\ncurl -I http://localhost:80\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 80\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep adminer\n```\n\n3. **High memory/CPU usage**:\n```bash\n# Monitor resource usage\ntop -p $(pgrep httpd)\nhtop -p $(pgrep httpd)\n\n# Check for memory leaks\nps aux | grep httpd\ncat /proc/$(pgrep httpd)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /var/log/httpd/*.log | tail -50\n```\n\n4. **Database connection errors**:\n```bash\n# Test database connection\npsql -U adminer_user -d adminer_db -c \"SELECT 1;\"\nmysql -u adminer_user -p adminer_db -e \"SELECT 1;\"\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"debug = true\" | sudo tee -a /var/www/adminer/adminer.conf\n\n# Restart with debug mode\nsudo systemctl stop httpd\nsudo -u adminer adminer --debug\n\n# Watch debug logs\ntail -f /var/log/httpd/debug.log\n```\n\n### Performance Analysis\n\n```bash\n# Profile CPU usage\nsudo perf record -p $(pgrep httpd) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/adminer.pcap port 80\nsudo tcpdump -r /tmp/adminer.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep httpd)\n```\n\n## Integration Examples\n\n### Docker Deployment\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  adminer:\n    image: adminer:adminer\n    container_name: adminer\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/var/www/adminer\n      - ./data:/var/lib/adminer\n      - ./logs:/var/log/httpd\n    networks:\n      - adminer_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:80/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  adminer_network:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\n# adminer-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: adminer\n  labels:\n    app: adminer\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: adminer\n  template:\n    metadata:\n      labels:\n        app: adminer\n    spec:\n      containers:\n      - name: adminer\n        image: adminer:adminer\n        ports:\n        - containerPort: 80\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /var/www/adminer\n        - name: data\n          mountPath: /var/lib/adminer\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: adminer-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: adminer-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: adminer\nspec:\n  selector:\n    app: adminer\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: adminer-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```\n\n### Ansible Playbook\n\n```yaml\n---\n# adminer-playbook.yml\n- name: Install and configure Adminer\n  hosts: all\n  become: yes\n  vars:\n    adminer_version: latest\n    adminer_port: 80\n    adminer_config_dir: /var/www/adminer\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - php, php-mysql, php-pgsql\n        state: present\n    \n    - name: Install Adminer\n      package:\n        name: adminer\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: \"{{ adminer_config_dir }}\"\n        state: directory\n        owner: adminer\n        group: adminer\n        mode: '0750'\n    \n    - name: Deploy configuration\n      template:\n        src: adminer.conf.j2\n        dest: \"{{ adminer_config_dir }}/adminer.conf\"\n        owner: adminer\n        group: adminer\n        mode: '0640'\n      notify: restart adminer\n    \n    - name: Start and enable service\n      systemd:\n        name: httpd\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: \"{{ adminer_port }}/tcp\"\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart adminer\n      systemd:\n        name: httpd\n        state: restarted\n```\n\n### Terraform Configuration\n\n```hcl\n# adminer.tf\nresource \"aws_instance\" \"adminer_server\" {\n  ami           = var.ami_id\n  instance_type = \"t3.medium\"\n  \n  vpc_security_group_ids = [aws_security_group.adminer.id]\n  \n  user_data = <<-EOF\n    #!/bin/bash\n    # Install Adminer\n    apt-get update\n    apt-get install -y adminer php, php-mysql, php-pgsql\n    \n    # Configure Adminer\n    systemctl enable httpd\n    systemctl start httpd\n  EOF\n  \n  tags = {\n    Name = \"Adminer Server\"\n    Application = \"Adminer\"\n  }\n}\n\nresource \"aws_security_group\" \"adminer\" {\n  name        = \"adminer-sg\"\n  description = \"Security group for Adminer\"\n  \n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = {\n    Name = \"Adminer Security Group\"\n  }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update adminer\nsudo dnf update adminer\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade adminer\n\n# Arch Linux\nsudo pacman -Syu adminer\n\n# Alpine Linux\napk update\napk upgrade adminer\n\n# openSUSE\nsudo zypper ref\nsudo zypper update adminer\n\n# FreeBSD\npkg update\npkg upgrade adminer\n\n# Always backup before updates\n/usr/local/bin/adminer-backup\n\n# Restart after updates\nsudo systemctl restart httpd\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean old logs\nfind /var/log/httpd -name \"*.log\" -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze adminer_db\n\n# Check disk usage\ndf -h | grep -E \"(/$|adminer)\"\ndu -sh /var/lib/adminer\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u httpd | grep -i \"error\\|fail\\|deny\"\n```\n\n### Health Monitoring Checklist\n\n- [ ] Service is running and enabled\n- [ ] Web interface is accessible\n- [ ] Database connections are healthy\n- [ ] Disk usage is below 80%\n- [ ] No critical errors in logs\n- [ ] Backups are running successfully\n- [ ] SSL certificates are valid\n- [ ] Security updates are applied\n\n## Additional Resources\n\n- Official Documentation: https://docs.adminer.org/\n- GitHub Repository: https://github.com/adminer/adminer\n- Community Forum: https://forum.adminer.org/\n- Wiki: https://wiki.adminer.org/\n- Docker Hub: https://hub.docker.com/r/adminer/adminer\n- Security Advisories: https://security.adminer.org/\n- Best Practices: https://docs.adminer.org/best-practices\n- API Documentation: https://api.adminer.org/\n- Comparison with phpMyAdmin, phpPgAdmin, MySQL Workbench, pgAdmin: https://docs.adminer.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"adminer-installation-guide\" class=\"mobile-header\">Adminer Installation Guide</h1>\n<p class=\"mobile-paragraph\">Adminer is a free and open-source Database Management. A full-featured database management tool written in PHP</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum</li>\n<li class=\"mobile-list-item\">Network: 80 ports required</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10 Pro</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default adminer port)</li>\n<li class=\"mobile-list-item\">Firewall rules configured</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">php, php-mysql, php-pgsql</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install adminer\nsudo dnf install -y adminer php, php-mysql, php-pgsql\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=adminer || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nadminer --version || systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install adminer\nsudo apt install -y adminer php, php-mysql, php-pgsql\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nadminer --version || systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install adminer\nsudo pacman -S adminer\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nadminer --version || systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install adminer\napk add --no-cache adminer\n\n# Enable and start service\nrc-update add httpd default\nrc-service httpd start\n\n# Verify installation\nadminer --version || rc-service httpd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install adminer\nsudo zypper install -y adminer php, php-mysql, php-pgsql\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=adminer || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nadminer --version || systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install adminer\n\n# Start service\nbrew services start adminer\n\n# Verify installation\nadminer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install adminer\n\n# Enable in rc.conf\necho &#039;httpd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice httpd start\n\n# Verify installation\nadminer --version || service httpd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install adminer\n\n# Or using Scoop\nscoop install adminer\n\n# Verify installation\nadminer --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /var/www/adminer\n\n# Set up basic configuration\nsudo tee /var/www/adminer/adminer.conf &lt;&lt; &#039;EOF&#039;\n# Adminer Configuration\npost_max_size = 256M, upload_max_filesize = 256M\nEOF\n\n# Set appropriate permissions\nsudo chown -R adminer:adminer /var/www/adminer || \\\n  sudo chown -R $(whoami):$(whoami) /var/www/adminer\n\n# Test configuration\nsudo adminer --test || sudo httpd configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false adminer || true\n\n# Secure configuration files\nsudo chmod 750 /var/www/adminer\nsudo chmod 640 /var/www/adminer/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable httpd\n\n# Start service\nsudo systemctl start httpd\n\n# Stop service\nsudo systemctl stop httpd\n\n# Restart service\nsudo systemctl restart httpd\n\n# Reload configuration\nsudo systemctl reload httpd\n\n# Check status\nsudo systemctl status httpd\n\n# View logs\nsudo journalctl -u httpd -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add httpd default\n\n# Start service\nrc-service httpd start\n\n# Stop service\nrc-service httpd stop\n\n# Restart service\nrc-service httpd restart\n\n# Check status\nrc-service httpd status\n\n# View logs\ntail -f /var/log/httpd/httpd.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;httpd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice httpd start\n\n# Stop service\nservice httpd stop\n\n# Restart service\nservice httpd restart\n\n# Check status\nservice httpd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start adminer\nbrew services stop adminer\nbrew services restart adminer\n\n# Check status\nbrew services list | grep adminer\n\n# View logs\ntail -f $(brew --prefix)/var/log/adminer.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start httpd\n\n# Stop service\nnet stop httpd\n\n# Using PowerShell\nStart-Service httpd\nStop-Service httpd\nRestart-Service httpd\n\n# Check status\nGet-Service httpd\n\n# Set to automatic startup\nSet-Service httpd -StartupType Automatic</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /var/www/adminer/adminer.conf &lt;&lt; &#039;EOF&#039;\n# Performance tuning\npost_max_size = 256M, upload_max_filesize = 256M\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho &quot;vm.swappiness=10&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream adminer_backend {\n    server 127.0.0.1:80;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name adminer.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name adminer.example.com;\n\n    ssl_certificate /etc/ssl/certs/adminer.crt;\n    ssl_certificate_key /etc/ssl/private/adminer.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    location / {\n        proxy_pass http://adminer_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName adminer.example.com\n    Redirect permanent / https://adminer.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName adminer.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/adminer.crt\n    SSLCertificateKeyFile /etc/ssl/private/adminer.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    &lt;Location /&gt;\n        ProxyPass http://127.0.0.1:80/\n        ProxyPassReverse http://127.0.0.1:80/\n    &lt;/Location&gt;\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:80/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">global\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend adminer_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/adminer.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend adminer_backend\n\nbackend adminer_backend\n    balance roundrobin\n    option httpchk GET /health\n    server adminer1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddy\">adminer.example.com {\n    reverse_proxy 127.0.0.1:80 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user\nsudo useradd --system --shell /bin/false --home /var/www/adminer adminer || true\n\n# Set ownership\nsudo chown -R adminer:adminer /var/www/adminer\nsudo chown -R adminer:adminer /var/log/httpd\n\n# Set permissions\nsudo chmod 750 /var/www/adminer\nsudo chmod 640 /var/www/adminer/*\nsudo chmod 750 /var/log/httpd\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 80 proto tcp comment &quot;Adminer&quot;\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=adminer\nsudo firewall-cmd --permanent --service=adminer --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=adminer\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 80 || true</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/adminer.key \\\n    -out /etc/ssl/certs/adminer.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=adminer.example.com&quot;\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/adminer.key\nsudo chmod 644 /etc/ssl/certs/adminer.crt\n\n# For production, use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d adminer.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/jail.d/adminer.conf\n[adminer]\nenabled = true\nport = 80\nfilter = adminer\nlogpath = /var/log/httpd/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/filter.d/adminer.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from &lt;HOST&gt;.*$\n            ^.*Authentication failed.*from &lt;HOST&gt;.*$\n            ^.*Invalid credentials.*from &lt;HOST&gt;.*$\nignoreregex =</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE adminer_db;\nCREATE USER adminer_user WITH ENCRYPTED PASSWORD &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON DATABASE adminer_db TO adminer_user;\n\\q\nEOF\n\n# Configure connection in Adminer\necho &quot;DATABASE_URL=postgresql://adminer_user:secure_password_here@localhost/adminer_db&quot; | \\\n  sudo tee -a /var/www/adminer/adminer.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE adminer_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;adminer_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON adminer_db.* TO &#039;adminer_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho &quot;DATABASE_URL=mysql://adminer_user:secure_password_here@localhost/adminer_db&quot; | \\\n  sudo tee -a /var/www/adminer/adminer.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"sqlite-backend-if-applicable\" class=\"mobile-header\">SQLite Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database directory\nsudo mkdir -p /var/lib/adminer\nsudo chown adminer:adminer /var/lib/adminer\n\n# Initialize database\nsudo -u adminer adminer init-db</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for better performance\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/security/limits.conf\nadminer soft nofile 65535\nadminer hard nofile 65535\nadminer soft nproc 32768\nadminer hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-tuning\" class=\"mobile-header\">Application Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure application-specific performance settings\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /var/www/adminer/performance.conf\n# Performance configuration\npost_max_size = 256M, upload_max_filesize = 256M\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart httpd</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: &#039;adminer&#039;\n    static_configs:\n      - targets: [&#039;localhost:80/metrics&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/adminer-health\n\n# Check if service is running\nif ! systemctl is-active --quiet httpd; then\n    echo &quot;CRITICAL: Adminer service is not running&quot;\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 80 2&gt;/dev/null; then\n    echo &quot;CRITICAL: Adminer is not listening on port 80&quot;\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w &#039;%{time_total}&#039; http://localhost:80/health || echo &quot;999&quot;)\nif (( $(echo &quot;$response_time &gt; 5&quot; | bc -l) )); then\n    echo &quot;WARNING: Slow response time: ${response_time}s&quot;\n    exit 1\nfi\n\necho &quot;OK: Adminer is healthy (response time: ${response_time}s)&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\ncat &lt;&lt; &#039;EOF&#039; | sudo tee /etc/logrotate.d/adminer\n/var/log/httpd/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 adminer adminer\n    postrotate\n        systemctl reload httpd &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/adminer</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/adminer-backup\n\nBACKUP_DIR=&quot;/backup/adminer&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/adminer_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if needed for consistency)\necho &quot;Stopping Adminer service...&quot;\nsystemctl stop httpd\n\n# Backup configuration\necho &quot;Backing up configuration...&quot;\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /var/www/adminer \\\n    /var/lib/adminer \\\n    /var/log/httpd\n\n# Backup database (if applicable)\nif command -v pg_dump &amp;&gt; /dev/null; then\n    echo &quot;Backing up database...&quot;\n    sudo -u postgres pg_dump adminer_db | gzip &gt; &quot;$BACKUP_DIR/adminer_db_$DATE.sql.gz&quot;\nfi\n\n# Start service\necho &quot;Starting Adminer service...&quot;\nsystemctl start httpd\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.sql.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/adminer-restore\n\nif [ $# -ne 1 ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Error: Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Stop service\necho &quot;Stopping Adminer service...&quot;\nsystemctl stop httpd\n\n# Restore files\necho &quot;Restoring from backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo &quot;$BACKUP_FILE&quot; | sed &#039;s/.tar.gz$/_db.sql.gz/&#039;)\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql adminer_db\nfi\n\n# Fix permissions\nchown -R adminer:adminer /var/www/adminer\nchown -R adminer:adminer /var/lib/adminer\n\n# Start service\necho &quot;Starting Adminer service...&quot;\nsystemctl start httpd\n\necho &quot;Restore completed successfully&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status httpd\nsudo journalctl -u httpd -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 80\nsudo lsof -i :80\n\n# Verify configuration\nsudo adminer --test || sudo httpd configtest\n\n# Check permissions\nls -la /var/www/adminer\nls -la /var/log/httpd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cannot access web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep httpd\ncurl -I http://localhost:80\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 80\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep adminer</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>High memory/CPU usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor resource usage\ntop -p $(pgrep httpd)\nhtop -p $(pgrep httpd)\n\n# Check for memory leaks\nps aux | grep httpd\ncat /proc/$(pgrep httpd)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /var/log/httpd/*.log | tail -50</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database connection errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connection\npsql -U adminer_user -d adminer_db -c &quot;SELECT 1;&quot;\nmysql -u adminer_user -p adminer_db -e &quot;SELECT 1;&quot;\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;debug = true&quot; | sudo tee -a /var/www/adminer/adminer.conf\n\n# Restart with debug mode\nsudo systemctl stop httpd\nsudo -u adminer adminer --debug\n\n# Watch debug logs\ntail -f /var/log/httpd/debug.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-analysis\" class=\"mobile-header\">Performance Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile CPU usage\nsudo perf record -p $(pgrep httpd) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/adminer.pcap port 80\nsudo tcpdump -r /tmp/adminer.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep httpd)</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml\nversion: &#039;3.8&#039;\n\nservices:\n  adminer:\n    image: adminer:adminer\n    container_name: adminer\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/var/www/adminer\n      - ./data:/var/lib/adminer\n      - ./logs:/var/log/httpd\n    networks:\n      - adminer_network\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:80/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  adminer_network:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># adminer-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: adminer\n  labels:\n    app: adminer\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: adminer\n  template:\n    metadata:\n      labels:\n        app: adminer\n    spec:\n      containers:\n      - name: adminer\n        image: adminer:adminer\n        ports:\n        - containerPort: 80\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /var/www/adminer\n        - name: data\n          mountPath: /var/lib/adminer\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: adminer-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: adminer-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: adminer\nspec:\n  selector:\n    app: adminer\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: adminer-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n# adminer-playbook.yml\n- name: Install and configure Adminer\n  hosts: all\n  become: yes\n  vars:\n    adminer_version: latest\n    adminer_port: 80\n    adminer_config_dir: /var/www/adminer\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - php, php-mysql, php-pgsql\n        state: present\n    \n    - name: Install Adminer\n      package:\n        name: adminer\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: &quot;{{ adminer_config_dir }}&quot;\n        state: directory\n        owner: adminer\n        group: adminer\n        mode: &#039;0750&#039;\n    \n    - name: Deploy configuration\n      template:\n        src: adminer.conf.j2\n        dest: &quot;{{ adminer_config_dir }}/adminer.conf&quot;\n        owner: adminer\n        group: adminer\n        mode: &#039;0640&#039;\n      notify: restart adminer\n    \n    - name: Start and enable service\n      systemd:\n        name: httpd\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: &quot;{{ adminer_port }}/tcp&quot;\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart adminer\n      systemd:\n        name: httpd\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-configuration\" class=\"mobile-header\">Terraform Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"hcl\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">hcl</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-hcl\"># adminer.tf\nresource &quot;aws_instance&quot; &quot;adminer_server&quot; {\n  ami           = var.ami_id\n  instance_type = &quot;t3.medium&quot;\n  \n  vpc_security_group_ids = [aws_security_group.adminer.id]\n  \n  user_data = &lt;&lt;-EOF\n    #!/bin/bash\n    # Install Adminer\n    apt-get update\n    apt-get install -y adminer php, php-mysql, php-pgsql\n    \n    # Configure Adminer\n    systemctl enable httpd\n    systemctl start httpd\n  EOF\n  \n  tags = {\n    Name = &quot;Adminer Server&quot;\n    Application = &quot;Adminer&quot;\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;adminer&quot; {\n  name        = &quot;adminer-sg&quot;\n  description = &quot;Security group for Adminer&quot;\n  \n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  tags = {\n    Name = &quot;Adminer Security Group&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update adminer\nsudo dnf update adminer\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade adminer\n\n# Arch Linux\nsudo pacman -Syu adminer\n\n# Alpine Linux\napk update\napk upgrade adminer\n\n# openSUSE\nsudo zypper ref\nsudo zypper update adminer\n\n# FreeBSD\npkg update\npkg upgrade adminer\n\n# Always backup before updates\n/usr/local/bin/adminer-backup\n\n# Restart after updates\nsudo systemctl restart httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old logs\nfind /var/log/httpd -name &quot;*.log&quot; -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze adminer_db\n\n# Check disk usage\ndf -h | grep -E &quot;(/$|adminer)&quot;\ndu -sh /var/lib/adminer\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u httpd | grep -i &quot;error\\|fail\\|deny&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring-checklist\" class=\"mobile-header\">Health Monitoring Checklist</h3>\n<li class=\"mobile-list-item\">[ ] Service is running and enabled</li>\n<li class=\"mobile-list-item\">[ ] Web interface is accessible</li>\n<li class=\"mobile-list-item\">[ ] Database connections are healthy</li>\n<li class=\"mobile-list-item\">[ ] Disk usage is below 80%</li>\n<li class=\"mobile-list-item\">[ ] No critical errors in logs</li>\n<li class=\"mobile-list-item\">[ ] Backups are running successfully</li>\n<li class=\"mobile-list-item\">[ ] SSL certificates are valid</li>\n<li class=\"mobile-list-item\">[ ] Security updates are applied</li>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.adminer.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/adminer/adminer</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.adminer.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.adminer.org/</li>\n<li class=\"mobile-list-item\">Docker Hub: https://hub.docker.com/r/adminer/adminer</li>\n<li class=\"mobile-list-item\">Security Advisories: https://security.adminer.org/</li>\n<li class=\"mobile-list-item\">Best Practices: https://docs.adminer.org/best-practices</li>\n<li class=\"mobile-list-item\">API Documentation: https://api.adminer.org/</li>\n<li class=\"mobile-list-item\">Comparison with phpMyAdmin, phpPgAdmin, MySQL Workbench, pgAdmin: https://docs.adminer.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"16 min","wordCount":3122,"lastBuilt":"2025-09-16T07:35:28.798Z","metadataVersion":"2.0"}]},"__N_SSG":true}