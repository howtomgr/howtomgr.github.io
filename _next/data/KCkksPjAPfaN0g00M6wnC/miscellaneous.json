{"pageProps":{"category":{"key":"miscellaneous","name":"Miscellaneous","description":"Other useful tools and applications","icon":"ðŸ”§","color":"#6272a4","keywords":[]},"guides":[{"name":"ackee","displayName":"ackee Installation Guide","slug":"ackee","description":"ackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,3000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/ackee","documentationUrl":"https://howtomgr.github.io/miscellaneous/ackee","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ackee","updatedAt":"2025-09-16T02:53:58Z","createdAt":"2025-09-16T02:15:54Z","readmeRaw":"# ackee Installation Guide\n\nackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3000 (default ackee port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ackee\nsudo dnf install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install ackee\nsudo apt install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\nackee --version\n```\n\n### Arch Linux\n\n```bash\n# Install ackee\nsudo pacman -S ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Verify installation\nackee --version\n```\n\n### Alpine Linux\n\n```bash\n# Install ackee\napk add --no-cache ackee\n\n# Enable and start service\nrc-update add ackee default\nrc-service ackee start\n\n# Verify installation\nackee --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install ackee\nsudo zypper install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install ackee\n\n# Start service\nbrew services start ackee\n\n# Verify installation\nackee --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install ackee\n\n# Enable in rc.conf\necho 'ackee_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Verify installation\nackee --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install ackee\n\n# Or using Scoop\nscoop install ackee\n\n# Verify installation\nackee --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/ackee\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nackee --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable ackee\n\n# Start service\nsudo systemctl start ackee\n\n# Stop service\nsudo systemctl stop ackee\n\n# Restart service\nsudo systemctl restart ackee\n\n# Check status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add ackee default\n\n# Start service\nrc-service ackee start\n\n# Stop service\nrc-service ackee stop\n\n# Restart service\nrc-service ackee restart\n\n# Check status\nrc-service ackee status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'ackee_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Stop service\nservice ackee stop\n\n# Restart service\nservice ackee restart\n\n# Check status\nservice ackee status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start ackee\nbrew services stop ackee\nbrew services restart ackee\n\n# Check status\nbrew services list | grep ackee\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start ackee\n\n# Stop service\nnet stop ackee\n\n# Using PowerShell\nStart-Service ackee\nStop-Service ackee\nRestart-Service ackee\n\n# Check status\nGet-Service ackee\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream ackee_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name ackee.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ackee.example.com;\n\n    ssl_certificate /etc/ssl/certs/ackee.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ackee.example.com.key;\n\n    location / {\n        proxy_pass http://ackee_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName ackee.example.com\n    Redirect permanent / https://ackee.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName ackee.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ackee.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ackee.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend ackee_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ackee.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ackee_backend\n\nbackend ackee_backend\n    balance roundrobin\n    server ackee1 127.0.0.1:3000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R ackee:ackee /etc/ackee\nsudo chmod 750 /etc/ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n\n# Monitor resource usage\ntop -p $(pgrep ackee)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/ackee\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/ackee-backup-$DATE.tar.gz\" /etc/ackee /var/lib/ackee\n\necho \"Backup completed: $BACKUP_DIR/ackee-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop ackee\n\n# Restore from backup\ntar -xzf /backup/ackee/ackee-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ackee\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u ackee -n 100\nsudo tail -f /var/log/ackee/ackee.log\n\n# Check configuration\nackee --version\n\n# Check permissions\nls -la /etc/ackee\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep ackee)\n\n# Check disk I/O\niotop -p $(pgrep ackee)\n\n# Check connections\nss -an | grep 3000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  ackee:\n    image: ackee:latest\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./config:/etc/ackee\n      - ./data:/var/lib/ackee\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ackee\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade ackee\n\n# Arch Linux\nsudo pacman -Syu ackee\n\n# Alpine Linux\napk update && apk upgrade ackee\n\n# openSUSE\nsudo zypper update ackee\n\n# FreeBSD\npkg update && pkg upgrade ackee\n\n# Always backup before updates\ntar -czf /backup/ackee-pre-update-$(date +%Y%m%d).tar.gz /etc/ackee\n\n# Restart after updates\nsudo systemctl restart ackee\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/ackee\n\n# Clean old logs\nfind /var/log/ackee -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ackee\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.ackee.org/\n- GitHub Repository: https://github.com/ackee/ackee\n- Community Forum: https://forum.ackee.org/\n- Best Practices Guide: https://docs.ackee.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"ackee-installation-guide\" class=\"mobile-header\">ackee Installation Guide</h1>\n<p class=\"mobile-paragraph\">ackee is a free and open-source analytics tool. Ackee provides self-hosted, privacy-focused analytics</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3000 (default ackee port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ackee\nsudo dnf install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install ackee\nsudo apt install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\nsudo pacman -S ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\napk add --no-cache ackee\n\n# Enable and start service\nrc-update add ackee default\nrc-service ackee start\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ackee\nsudo zypper install -y ackee\n\n# Enable and start service\nsudo systemctl enable --now ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install ackee\n\n# Start service\nbrew services start ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install ackee\n\n# Enable in rc.conf\necho &#039;ackee_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install ackee\n\n# Or using Scoop\nscoop install ackee\n\n# Verify installation\nackee --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/ackee\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nackee --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable ackee\n\n# Start service\nsudo systemctl start ackee\n\n# Stop service\nsudo systemctl stop ackee\n\n# Restart service\nsudo systemctl restart ackee\n\n# Check status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add ackee default\n\n# Start service\nrc-service ackee start\n\n# Stop service\nrc-service ackee stop\n\n# Restart service\nrc-service ackee restart\n\n# Check status\nrc-service ackee status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;ackee_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ackee start\n\n# Stop service\nservice ackee stop\n\n# Restart service\nservice ackee restart\n\n# Check status\nservice ackee status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start ackee\nbrew services stop ackee\nbrew services restart ackee\n\n# Check status\nbrew services list | grep ackee</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start ackee\n\n# Stop service\nnet stop ackee\n\n# Using PowerShell\nStart-Service ackee\nStop-Service ackee\nRestart-Service ackee\n\n# Check status\nGet-Service ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream ackee_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name ackee.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ackee.example.com;\n\n    ssl_certificate /etc/ssl/certs/ackee.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ackee.example.com.key;\n\n    location / {\n        proxy_pass http://ackee_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName ackee.example.com\n    Redirect permanent / https://ackee.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName ackee.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ackee.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ackee.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend ackee_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ackee.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ackee_backend\n\nbackend ackee_backend\n    balance roundrobin\n    server ackee1 127.0.0.1:3000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R ackee:ackee /etc/ackee\nsudo chmod 750 /etc/ackee\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status ackee\n\n# View logs\nsudo journalctl -u ackee -f\n\n# Monitor resource usage\ntop -p $(pgrep ackee)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/ackee&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/ackee-backup-$DATE.tar.gz&quot; /etc/ackee /var/lib/ackee\n\necho &quot;Backup completed: $BACKUP_DIR/ackee-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop ackee\n\n# Restore from backup\ntar -xzf /backup/ackee/ackee-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u ackee -n 100\nsudo tail -f /var/log/ackee/ackee.log\n\n# Check configuration\nackee --version\n\n# Check permissions\nls -la /etc/ackee</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep ackee)\n\n# Check disk I/O\niotop -p $(pgrep ackee)\n\n# Check connections\nss -an | grep 3000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  ackee:\n    image: ackee:latest\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./config:/etc/ackee\n      - ./data:/var/lib/ackee\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ackee\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade ackee\n\n# Arch Linux\nsudo pacman -Syu ackee\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade ackee\n\n# openSUSE\nsudo zypper update ackee\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade ackee\n\n# Always backup before updates\ntar -czf /backup/ackee-pre-update-$(date +%Y%m%d).tar.gz /etc/ackee\n\n# Restart after updates\nsudo systemctl restart ackee</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/ackee\n\n# Clean old logs\nfind /var/log/ackee -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ackee</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.ackee.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/ackee/ackee</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.ackee.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.ackee.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1151,"lastBuilt":"2025-09-16T03:18:30.327Z","metadataVersion":"2.0"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"adminer README","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/adminer","documentationUrl":"https://howtomgr.github.io/miscellaneous/adminer","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-16T02:54:11Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## ðŸ‘‹ Welcome to adminer ðŸš€  \n\nadminer README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">ðŸ‘‹ Welcome to adminer ðŸš€  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-16T03:18:29.627Z","metadataVersion":"2.0"},{"name":"appwrite","displayName":"Appwrite Installation Guide","slug":"appwrite","description":"Appwrite is an open-source backend-as-a-service platform that provides developers with all the core APIs required to build modern applications. It includes authentication, databases, storage, functions, and real-time capabilities.","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[10,80,443,999],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","orchestration","observability","data-storage","security","data-protection","communication","networking"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/appwrite","documentationUrl":"https://howtomgr.github.io/miscellaneous/appwrite","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/appwrite","updatedAt":"2025-09-16T02:55:57Z","createdAt":"2025-09-16T02:18:14Z","readmeRaw":"# Appwrite Installation Guide\n\nAppwrite is an open-source backend-as-a-service platform that provides developers with all the core APIs required to build modern applications. It includes authentication, databases, storage, functions, and real-time capabilities.\n\n## Prerequisites\n\n- Docker and Docker Compose installed\n- Minimum 4GB RAM (8GB recommended for production)\n- 10GB free disk space minimum\n- Domain name with DNS configured (for production)\n- SSL certificate (Let's Encrypt recommended)\n\n## Installation\n\n### Docker Compose Installation (Recommended)\n\n1. **Download Appwrite**:\n```bash\n# Create installation directory\nmkdir -p /opt/appwrite\ncd /opt/appwrite\n\n# Download docker-compose.yml\ncurl -o docker-compose.yml https://appwrite.io/install/compose\n\n# Download .env file\ncurl -o .env https://appwrite.io/install/env\n```\n\n2. **Configure Environment**:\n```bash\n# Edit environment variables\nnano .env\n\n# Key variables to configure:\n# _APP_ENV=production\n# _APP_DOMAIN=your-domain.com\n# _APP_DOMAIN_TARGET=your-domain.com\n# _APP_REDIS_PASS=your-redis-password\n# _APP_DB_PASS=your-database-password\n# _APP_OPENSSL_KEY_V1=your-32-char-key\n```\n\n3. **Generate OpenSSL Key**:\n```bash\n# Generate a secure key\nopenssl rand -hex 32\n```\n\n4. **Start Appwrite**:\n```bash\n# Start services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f\n```\n\n### Manual Docker Installation\n\n```bash\n# Create network\ndocker network create appwrite\n\n# Run MariaDB\ndocker run -d \\\n  --name appwrite-mariadb \\\n  --network appwrite \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=appwrite \\\n  -e MYSQL_USER=appwrite \\\n  -e MYSQL_PASSWORD=password \\\n  -v appwrite-mariadb:/var/lib/mysql \\\n  mariadb:10\n\n# Run Redis\ndocker run -d \\\n  --name appwrite-redis \\\n  --network appwrite \\\n  -v appwrite-redis:/data \\\n  redis:alpine\n\n# Run Appwrite\ndocker run -d \\\n  --name appwrite \\\n  --network appwrite \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -e _APP_ENV=production \\\n  -e _APP_OPENSSL_KEY_V1=your-32-char-key \\\n  -e _APP_DOMAIN=localhost \\\n  -e _APP_DB_HOST=appwrite-mariadb \\\n  -e _APP_DB_PORT=3306 \\\n  -e _APP_DB_SCHEMA=appwrite \\\n  -e _APP_DB_USER=appwrite \\\n  -e _APP_DB_PASS=password \\\n  -e _APP_REDIS_HOST=appwrite-redis \\\n  -e _APP_REDIS_PORT=6379 \\\n  -v appwrite-uploads:/storage/uploads \\\n  -v appwrite-cache:/storage/cache \\\n  -v appwrite-config:/storage/config \\\n  -v appwrite-certificates:/storage/certificates \\\n  -v appwrite-functions:/storage/functions \\\n  appwrite/appwrite\n```\n\n## Configuration\n\n### SSL/TLS Setup\n\n1. **Let's Encrypt (Automatic)**:\n```bash\n# Appwrite handles SSL automatically for configured domains\n# Ensure ports 80 and 443 are accessible\n# Domain must point to server IP\n```\n\n2. **Custom SSL Certificate**:\n```bash\n# Copy certificates\ncp /path/to/cert.pem /opt/appwrite/certificates/main.crt\ncp /path/to/key.pem /opt/appwrite/certificates/main.key\n\n# Restart Appwrite\ncd /opt/appwrite\ndocker-compose restart\n```\n\n### Email Configuration\n\nEdit `.env` file:\n```bash\n_APP_SMTP_HOST=smtp.gmail.com\n_APP_SMTP_PORT=587\n_APP_SMTP_SECURE=tls\n_APP_SMTP_USERNAME=your-email@gmail.com\n_APP_SMTP_PASSWORD=your-app-password\n```\n\n### Storage Configuration\n\n1. **Local Storage** (Default):\n```bash\n# Storage is handled automatically\n# Files stored in Docker volumes\n```\n\n2. **S3 Compatible Storage**:\n```bash\n_APP_STORAGE_DEVICE=s3\n_APP_STORAGE_S3_ACCESS_KEY=your-access-key\n_APP_STORAGE_S3_SECRET=your-secret-key\n_APP_STORAGE_S3_REGION=us-east-1\n_APP_STORAGE_S3_BUCKET=appwrite-storage\n```\n\n### Functions Runtime\n\nEnable additional runtimes in `.env`:\n```bash\n_APP_FUNCTIONS_RUNTIMES=node-18.0,python-3.10,php-8.1,ruby-3.1\n```\n\n## Security Configuration\n\n### Firewall Rules\n\n```bash\n# Allow HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow Appwrite console (if different port)\nsudo ufw allow 8080/tcp\n```\n\n### Security Headers\n\nAppwrite includes security headers by default:\n- Content Security Policy\n- X-Frame-Options\n- X-Content-Type-Options\n- Strict-Transport-Security\n\n### API Keys and Secrets\n\n1. **Generate secure keys**:\n```bash\n# Generate encryption key\nopenssl rand -hex 32\n\n# Generate session secret\nopenssl rand -hex 32\n```\n\n2. **Rotate keys regularly**:\n```bash\n# Update in .env\n_APP_OPENSSL_KEY_V1=new-key-here\n\n# Restart services\ndocker-compose restart\n```\n\n## Database Management\n\n### Backup\n\n```bash\n# Backup database\ndocker exec appwrite-mariadb mysqldump -u root -p appwrite > backup.sql\n\n# Backup volumes\ndocker run --rm -v appwrite-mariadb:/data -v $(pwd):/backup ubuntu tar czf /backup/mariadb-backup.tar.gz /data\n```\n\n### Restore\n\n```bash\n# Restore database\ndocker exec -i appwrite-mariadb mysql -u root -p appwrite < backup.sql\n\n# Restore volumes\ndocker run --rm -v appwrite-mariadb:/data -v $(pwd):/backup ubuntu tar xzf /backup/mariadb-backup.tar.gz -C /\n```\n\n## Performance Optimization\n\n### Redis Configuration\n\n```bash\n# Edit Redis configuration\ndocker exec -it appwrite-redis redis-cli\n\n# Set max memory\nCONFIG SET maxmemory 2gb\nCONFIG SET maxmemory-policy allkeys-lru\n```\n\n### Database Optimization\n\n```bash\n# Optimize tables\ndocker exec appwrite-mariadb mysqlcheck -u root -p --optimize appwrite\n\n# Configure MariaDB\ndocker exec -it appwrite-mariadb mysql -u root -p\nSET GLOBAL innodb_buffer_pool_size = 1G;\nSET GLOBAL innodb_log_file_size = 256M;\n```\n\n### Scaling\n\n1. **Horizontal Scaling**:\n```bash\n# Use Docker Swarm or Kubernetes\n# Configure load balancer\n# Share storage between instances\n```\n\n2. **Vertical Scaling**:\n```bash\n# Increase container resources\ndocker-compose down\n# Edit docker-compose.yml to add resource limits\ndocker-compose up -d\n```\n\n## Monitoring\n\n### Health Checks\n\n```bash\n# Check service health\ncurl http://localhost/v1/health\n\n# Check specific services\ncurl http://localhost/v1/health/db\ncurl http://localhost/v1/health/cache\ncurl http://localhost/v1/health/time\n```\n\n### Logging\n\n```bash\n# View all logs\ndocker-compose logs -f\n\n# View specific service logs\ndocker-compose logs -f appwrite\ndocker-compose logs -f appwrite-worker-database\n\n# Export logs\ndocker-compose logs > appwrite-logs.txt\n```\n\n### Metrics\n\nEnable Prometheus metrics:\n```bash\n_APP_PROMETHEUS_ENABLE=enabled\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Port conflicts**:\n```bash\n# Check port usage\nsudo netstat -tlnp | grep -E ':(80|443|8080)'\n\n# Change ports in docker-compose.yml\n```\n\n2. **Permission issues**:\n```bash\n# Fix volume permissions\nsudo chown -R 999:999 /var/lib/docker/volumes/appwrite_*\n```\n\n3. **Memory issues**:\n```bash\n# Check memory usage\ndocker stats\n\n# Increase memory limits in docker-compose.yml\n```\n\n### Debug Mode\n\nEnable debug mode in `.env`:\n```bash\n_APP_ENV=development\n_APP_DEBUG=true\n```\n\n## Maintenance\n\n### Updates\n\n```bash\n# Backup first\n./backup.sh\n\n# Pull latest images\ndocker-compose pull\n\n# Restart services\ndocker-compose down\ndocker-compose up -d\n```\n\n### Cleanup\n\n```bash\n# Remove unused images\ndocker image prune -a\n\n# Clean build cache\ndocker builder prune\n\n# Remove old logs\ndocker-compose logs --tail=0 > /dev/null\n```\n\n## SDK Integration\n\n### JavaScript/Node.js\n\n```javascript\nconst sdk = require('node-appwrite');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://your-domain.com/v1')\n    .setProject('your-project-id')\n    .setKey('your-api-key');\n\nconst database = new sdk.Databases(client);\nconst storage = new sdk.Storage(client);\n```\n\n### Python\n\n```python\nfrom appwrite.client import Client\nfrom appwrite.services.databases import Databases\n\nclient = Client()\nclient.set_endpoint('https://your-domain.com/v1')\nclient.set_project('your-project-id')\nclient.set_key('your-api-key')\n\ndatabases = Databases(client)\n```\n\n### Flutter\n\n```dart\nimport 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://your-domain.com/v1')\n    .setProject('your-project-id');\n\nfinal account = Account(client);\nfinal databases = Databases(client);\n```\n\n## Additional Resources\n\n- [Official Documentation](https://appwrite.io/docs)\n- [API Reference](https://appwrite.io/docs/client/account)\n- [GitHub Repository](https://github.com/appwrite/appwrite)\n- [Community Discord](https://appwrite.io/discord)\n- [Docker Hub](https://hub.docker.com/r/appwrite/appwrite)\n- [SDK Libraries](https://appwrite.io/docs/sdks)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"appwrite-installation-guide\" class=\"mobile-header\">Appwrite Installation Guide</h1>\n<p class=\"mobile-paragraph\">Appwrite is an open-source backend-as-a-service platform that provides developers with all the core APIs required to build modern applications. It includes authentication, databases, storage, functions, and real-time capabilities.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Docker and Docker Compose installed</li>\n<li class=\"mobile-list-item\">Minimum 4GB RAM (8GB recommended for production)</li>\n<li class=\"mobile-list-item\">10GB free disk space minimum</li>\n<li class=\"mobile-list-item\">Domain name with DNS configured (for production)</li>\n<li class=\"mobile-list-item\">SSL certificate (Let's Encrypt recommended)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"docker-compose-installation-recommended\" class=\"mobile-header\">Docker Compose Installation (Recommended)</h3>\n<p class=\"mobile-paragraph\">1. <strong>Download Appwrite</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create installation directory\nmkdir -p /opt/appwrite\ncd /opt/appwrite\n\n# Download docker-compose.yml\ncurl -o docker-compose.yml https://appwrite.io/install/compose\n\n# Download .env file\ncurl -o .env https://appwrite.io/install/env</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Configure Environment</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit environment variables\nnano .env\n\n# Key variables to configure:\n# _APP_ENV=production\n# _APP_DOMAIN=your-domain.com\n# _APP_DOMAIN_TARGET=your-domain.com\n# _APP_REDIS_PASS=your-redis-password\n# _APP_DB_PASS=your-database-password\n# _APP_OPENSSL_KEY_V1=your-32-char-key</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Generate OpenSSL Key</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate a secure key\nopenssl rand -hex 32</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Start Appwrite</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-docker-installation\" class=\"mobile-header\">Manual Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create network\ndocker network create appwrite\n\n# Run MariaDB\ndocker run -d \\\n  --name appwrite-mariadb \\\n  --network appwrite \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=appwrite \\\n  -e MYSQL_USER=appwrite \\\n  -e MYSQL_PASSWORD=password \\\n  -v appwrite-mariadb:/var/lib/mysql \\\n  mariadb:10\n\n# Run Redis\ndocker run -d \\\n  --name appwrite-redis \\\n  --network appwrite \\\n  -v appwrite-redis:/data \\\n  redis:alpine\n\n# Run Appwrite\ndocker run -d \\\n  --name appwrite \\\n  --network appwrite \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -e _APP_ENV=production \\\n  -e _APP_OPENSSL_KEY_V1=your-32-char-key \\\n  -e _APP_DOMAIN=localhost \\\n  -e _APP_DB_HOST=appwrite-mariadb \\\n  -e _APP_DB_PORT=3306 \\\n  -e _APP_DB_SCHEMA=appwrite \\\n  -e _APP_DB_USER=appwrite \\\n  -e _APP_DB_PASS=password \\\n  -e _APP_REDIS_HOST=appwrite-redis \\\n  -e _APP_REDIS_PORT=6379 \\\n  -v appwrite-uploads:/storage/uploads \\\n  -v appwrite-cache:/storage/cache \\\n  -v appwrite-config:/storage/config \\\n  -v appwrite-certificates:/storage/certificates \\\n  -v appwrite-functions:/storage/functions \\\n  appwrite/appwrite</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Let's Encrypt (Automatic)</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Appwrite handles SSL automatically for configured domains\n# Ensure ports 80 and 443 are accessible\n# Domain must point to server IP</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Custom SSL Certificate</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Copy certificates\ncp /path/to/cert.pem /opt/appwrite/certificates/main.crt\ncp /path/to/key.pem /opt/appwrite/certificates/main.key\n\n# Restart Appwrite\ncd /opt/appwrite\ndocker-compose restart</code></pre>\n      </div>\n    </div>\n<h3 id=\"email-configuration\" class=\"mobile-header\">Email Configuration</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">.env</code> file:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_SMTP_HOST=smtp.gmail.com\n_APP_SMTP_PORT=587\n_APP_SMTP_SECURE=tls\n_APP_SMTP_USERNAME=your-email@gmail.com\n_APP_SMTP_PASSWORD=your-app-password</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-configuration\" class=\"mobile-header\">Storage Configuration</h3>\n<p class=\"mobile-paragraph\">1. <strong>Local Storage</strong> (Default):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Storage is handled automatically\n# Files stored in Docker volumes</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>S3 Compatible Storage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_STORAGE_DEVICE=s3\n_APP_STORAGE_S3_ACCESS_KEY=your-access-key\n_APP_STORAGE_S3_SECRET=your-secret-key\n_APP_STORAGE_S3_REGION=us-east-1\n_APP_STORAGE_S3_BUCKET=appwrite-storage</code></pre>\n      </div>\n    </div>\n<h3 id=\"functions-runtime\" class=\"mobile-header\">Functions Runtime</h3>\n<p class=\"mobile-paragraph\">Enable additional runtimes in <code class=\"mobile-inline-code\">.env</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_FUNCTIONS_RUNTIMES=node-18.0,python-3.10,php-8.1,ruby-3.1</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow Appwrite console (if different port)\nsudo ufw allow 8080/tcp</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-headers\" class=\"mobile-header\">Security Headers</h3>\n<p class=\"mobile-paragraph\">Appwrite includes security headers by default:</p>\n<li class=\"mobile-list-item\">Content Security Policy</li>\n<li class=\"mobile-list-item\">X-Frame-Options</li>\n<li class=\"mobile-list-item\">X-Content-Type-Options</li>\n<li class=\"mobile-list-item\">Strict-Transport-Security</li>\n<h3 id=\"api-keys-and-secrets\" class=\"mobile-header\">API Keys and Secrets</h3>\n<p class=\"mobile-paragraph\">1. <strong>Generate secure keys</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate encryption key\nopenssl rand -hex 32\n\n# Generate session secret\nopenssl rand -hex 32</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Rotate keys regularly</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update in .env\n_APP_OPENSSL_KEY_V1=new-key-here\n\n# Restart services\ndocker-compose restart</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-management\" class=\"mobile-header\">Database Management</h2>\n<h3 id=\"backup\" class=\"mobile-header\">Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup database\ndocker exec appwrite-mariadb mysqldump -u root -p appwrite &gt; backup.sql\n\n# Backup volumes\ndocker run --rm -v appwrite-mariadb:/data -v $(pwd):/backup ubuntu tar czf /backup/mariadb-backup.tar.gz /data</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore\" class=\"mobile-header\">Restore</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Restore database\ndocker exec -i appwrite-mariadb mysql -u root -p appwrite &lt; backup.sql\n\n# Restore volumes\ndocker run --rm -v appwrite-mariadb:/data -v $(pwd):/backup ubuntu tar xzf /backup/mariadb-backup.tar.gz -C /</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"redis-configuration\" class=\"mobile-header\">Redis Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit Redis configuration\ndocker exec -it appwrite-redis redis-cli\n\n# Set max memory\nCONFIG SET maxmemory 2gb\nCONFIG SET maxmemory-policy allkeys-lru</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize tables\ndocker exec appwrite-mariadb mysqlcheck -u root -p --optimize appwrite\n\n# Configure MariaDB\ndocker exec -it appwrite-mariadb mysql -u root -p\nSET GLOBAL innodb_buffer_pool_size = 1G;\nSET GLOBAL innodb_log_file_size = 256M;</code></pre>\n      </div>\n    </div>\n<h3 id=\"scaling\" class=\"mobile-header\">Scaling</h3>\n<p class=\"mobile-paragraph\">1. <strong>Horizontal Scaling</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use Docker Swarm or Kubernetes\n# Configure load balancer\n# Share storage between instances</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Vertical Scaling</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase container resources\ndocker-compose down\n# Edit docker-compose.yml to add resource limits\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service health\ncurl http://localhost/v1/health\n\n# Check specific services\ncurl http://localhost/v1/health/db\ncurl http://localhost/v1/health/cache\ncurl http://localhost/v1/health/time</code></pre>\n      </div>\n    </div>\n<h3 id=\"logging\" class=\"mobile-header\">Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># View all logs\ndocker-compose logs -f\n\n# View specific service logs\ndocker-compose logs -f appwrite\ndocker-compose logs -f appwrite-worker-database\n\n# Export logs\ndocker-compose logs &gt; appwrite-logs.txt</code></pre>\n      </div>\n    </div>\n<h3 id=\"metrics\" class=\"mobile-header\">Metrics</h3>\n<p class=\"mobile-paragraph\">Enable Prometheus metrics:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_PROMETHEUS_ENABLE=enabled</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Port conflicts</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check port usage\nsudo netstat -tlnp | grep -E &#039;:(80|443|8080)&#039;\n\n# Change ports in docker-compose.yml</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Permission issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix volume permissions\nsudo chown -R 999:999 /var/lib/docker/volumes/appwrite_*</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Memory issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check memory usage\ndocker stats\n\n# Increase memory limits in docker-compose.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<p class=\"mobile-paragraph\">Enable debug mode in <code class=\"mobile-inline-code\">.env</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">_APP_ENV=development\n_APP_DEBUG=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"updates\" class=\"mobile-header\">Updates</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup first\n./backup.sh\n\n# Pull latest images\ndocker-compose pull\n\n# Restart services\ndocker-compose down\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup\" class=\"mobile-header\">Cleanup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Remove unused images\ndocker image prune -a\n\n# Clean build cache\ndocker builder prune\n\n# Remove old logs\ndocker-compose logs --tail=0 &gt; /dev/null</code></pre>\n      </div>\n    </div>\n<h2 id=\"sdk-integration\" class=\"mobile-header\">SDK Integration</h2>\n<h3 id=\"javascriptnodejs\" class=\"mobile-header\">JavaScript/Node.js</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">const sdk = require(&#039;node-appwrite&#039;);\n\nconst client = new sdk.Client()\n    .setEndpoint(&#039;https://your-domain.com/v1&#039;)\n    .setProject(&#039;your-project-id&#039;)\n    .setKey(&#039;your-api-key&#039;);\n\nconst database = new sdk.Databases(client);\nconst storage = new sdk.Storage(client);</code></pre>\n      </div>\n    </div>\n<h3 id=\"python\" class=\"mobile-header\">Python</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">from appwrite.client import Client\nfrom appwrite.services.databases import Databases\n\nclient = Client()\nclient.set_endpoint(&#039;https://your-domain.com/v1&#039;)\nclient.set_project(&#039;your-project-id&#039;)\nclient.set_key(&#039;your-api-key&#039;)\n\ndatabases = Databases(client)</code></pre>\n      </div>\n    </div>\n<h3 id=\"flutter\" class=\"mobile-header\">Flutter</h3>\n<div class=\"mobile-code-block\" data-language=\"dart\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">dart</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-dart\">import &#039;package:appwrite/appwrite.dart&#039;;\n\nfinal client = Client()\n    .setEndpoint(&#039;https://your-domain.com/v1&#039;)\n    .setProject(&#039;your-project-id&#039;);\n\nfinal account = Account(client);\nfinal databases = Databases(client);</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://appwrite.io/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://appwrite.io/docs/client/account\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/appwrite/appwrite\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://appwrite.io/discord\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Discord</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://hub.docker.com/r/appwrite/appwrite\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Hub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://appwrite.io/docs/sdks\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">SDK Libraries</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"5 min","wordCount":969,"lastBuilt":"2025-09-16T03:18:24.277Z","metadataVersion":"2.0"},{"name":"arangodb","displayName":"arangodb Installation Guide","slug":"arangodb","description":"arangodb is a free and open-source multi-model NoSQL database. ArangoDB combines document, graph, and key-value data models with one query language, serving as an alternative to using multiple specialized databases","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8529],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/arangodb","documentationUrl":"https://howtomgr.github.io/miscellaneous/arangodb","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/arangodb","updatedAt":"2025-09-16T02:56:12Z","createdAt":"2025-09-16T02:18:32Z","readmeRaw":"# arangodb Installation Guide\n\narangodb is a free and open-source multi-model NoSQL database. ArangoDB combines document, graph, and key-value data models with one query language, serving as an alternative to using multiple specialized databases\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 2GB minimum (8GB+ recommended)\n  - Storage: 10GB+ for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8529 (default arangodb port)\n  - Cluster ports if distributed\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install arangodb\nsudo dnf install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narangod --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install arangodb\nsudo apt install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo ufw allow 8529\n\n# Verify installation\narangod --version\n```\n\n### Arch Linux\n\n```bash\n# Install arangodb\nsudo pacman -S arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Verify installation\narangod --version\n```\n\n### Alpine Linux\n\n```bash\n# Install arangodb\napk add --no-cache arangodb\n\n# Enable and start service\nrc-update add arangodb default\nrc-service arangodb start\n\n# Verify installation\narangod --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install arangodb\nsudo zypper install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narangod --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install arangodb\n\n# Start service\nbrew services start arangodb\n\n# Verify installation\narangod --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install arangodb\n\n# Enable in rc.conf\necho 'arangodb_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice arangodb start\n\n# Verify installation\narangod --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install arangodb\n\n# Or using Scoop\nscoop install arangodb\n\n# Verify installation\narangod --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/arangodb\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\narangod --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable arangodb\n\n# Start service\nsudo systemctl start arangodb\n\n# Stop service\nsudo systemctl stop arangodb\n\n# Restart service\nsudo systemctl restart arangodb\n\n# Check status\nsudo systemctl status arangodb\n\n# View logs\nsudo journalctl -u arangodb -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add arangodb default\n\n# Start service\nrc-service arangodb start\n\n# Stop service\nrc-service arangodb stop\n\n# Restart service\nrc-service arangodb restart\n\n# Check status\nrc-service arangodb status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'arangodb_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice arangodb start\n\n# Stop service\nservice arangodb stop\n\n# Restart service\nservice arangodb restart\n\n# Check status\nservice arangodb status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start arangodb\nbrew services stop arangodb\nbrew services restart arangodb\n\n# Check status\nbrew services list | grep arangodb\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start arangodb\n\n# Stop service\nnet stop arangodb\n\n# Using PowerShell\nStart-Service arangodb\nStop-Service arangodb\nRestart-Service arangodb\n\n# Check status\nGet-Service arangodb\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream arangodb_backend {\n    server 127.0.0.1:8529;\n}\n\nserver {\n    listen 80;\n    server_name arangodb.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name arangodb.example.com;\n\n    ssl_certificate /etc/ssl/certs/arangodb.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/arangodb.example.com.key;\n\n    location / {\n        proxy_pass http://arangodb_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName arangodb.example.com\n    Redirect permanent / https://arangodb.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName arangodb.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/arangodb.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/arangodb.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8529/\n    ProxyPassReverse / http://127.0.0.1:8529/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend arangodb_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/arangodb.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend arangodb_backend\n\nbackend arangodb_backend\n    balance roundrobin\n    server arangodb1 127.0.0.1:8529 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R arangodb:arangodb /etc/arangodb\nsudo chmod 750 /etc/arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status arangodb\n\n# View logs\nsudo journalctl -u arangodb -f\n\n# Monitor resource usage\ntop -p $(pgrep arangodb)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/arangodb\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/arangodb-backup-$DATE.tar.gz\" /etc/arangodb /var/lib/arangodb\n\necho \"Backup completed: $BACKUP_DIR/arangodb-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop arangodb\n\n# Restore from backup\ntar -xzf /backup/arangodb/arangodb-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start arangodb\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u arangodb -n 100\nsudo tail -f /var/log/arangodb/arangodb.log\n\n# Check configuration\narangod --version\n\n# Check permissions\nls -la /etc/arangodb\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8529\n\n# Test connectivity\ntelnet localhost 8529\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep arangodb)\n\n# Check disk I/O\niotop -p $(pgrep arangodb)\n\n# Check connections\nss -an | grep 8529\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  arangodb:\n    image: arangodb:latest\n    ports:\n      - \"8529:8529\"\n    volumes:\n      - ./config:/etc/arangodb\n      - ./data:/var/lib/arangodb\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update arangodb\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade arangodb\n\n# Arch Linux\nsudo pacman -Syu arangodb\n\n# Alpine Linux\napk update && apk upgrade arangodb\n\n# openSUSE\nsudo zypper update arangodb\n\n# FreeBSD\npkg update && pkg upgrade arangodb\n\n# Always backup before updates\ntar -czf /backup/arangodb-pre-update-$(date +%Y%m%d).tar.gz /etc/arangodb\n\n# Restart after updates\nsudo systemctl restart arangodb\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/arangodb\n\n# Clean old logs\nfind /var/log/arangodb -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/arangodb\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.arangodb.org/\n- GitHub Repository: https://github.com/arangodb/arangodb\n- Community Forum: https://forum.arangodb.org/\n- Best Practices Guide: https://docs.arangodb.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"arangodb-installation-guide\" class=\"mobile-header\">arangodb Installation Guide</h1>\n<p class=\"mobile-paragraph\">arangodb is a free and open-source multi-model NoSQL database. ArangoDB combines document, graph, and key-value data models with one query language, serving as an alternative to using multiple specialized databases</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8529 (default arangodb port)</li>\n<li class=\"mobile-list-item\">Cluster ports if distributed</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install arangodb\nsudo dnf install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install arangodb\nsudo apt install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo ufw allow 8529\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arangodb\nsudo pacman -S arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arangodb\napk add --no-cache arangodb\n\n# Enable and start service\nrc-update add arangodb default\nrc-service arangodb start\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arangodb\nsudo zypper install -y arangodb\n\n# Enable and start service\nsudo systemctl enable --now arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install arangodb\n\n# Start service\nbrew services start arangodb\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install arangodb\n\n# Enable in rc.conf\necho &#039;arangodb_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice arangodb start\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install arangodb\n\n# Or using Scoop\nscoop install arangodb\n\n# Verify installation\narangod --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/arangodb\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\narangod --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable arangodb\n\n# Start service\nsudo systemctl start arangodb\n\n# Stop service\nsudo systemctl stop arangodb\n\n# Restart service\nsudo systemctl restart arangodb\n\n# Check status\nsudo systemctl status arangodb\n\n# View logs\nsudo journalctl -u arangodb -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add arangodb default\n\n# Start service\nrc-service arangodb start\n\n# Stop service\nrc-service arangodb stop\n\n# Restart service\nrc-service arangodb restart\n\n# Check status\nrc-service arangodb status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;arangodb_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice arangodb start\n\n# Stop service\nservice arangodb stop\n\n# Restart service\nservice arangodb restart\n\n# Check status\nservice arangodb status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start arangodb\nbrew services stop arangodb\nbrew services restart arangodb\n\n# Check status\nbrew services list | grep arangodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start arangodb\n\n# Stop service\nnet stop arangodb\n\n# Using PowerShell\nStart-Service arangodb\nStop-Service arangodb\nRestart-Service arangodb\n\n# Check status\nGet-Service arangodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream arangodb_backend {\n    server 127.0.0.1:8529;\n}\n\nserver {\n    listen 80;\n    server_name arangodb.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name arangodb.example.com;\n\n    ssl_certificate /etc/ssl/certs/arangodb.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/arangodb.example.com.key;\n\n    location / {\n        proxy_pass http://arangodb_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName arangodb.example.com\n    Redirect permanent / https://arangodb.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName arangodb.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/arangodb.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/arangodb.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8529/\n    ProxyPassReverse / http://127.0.0.1:8529/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend arangodb_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/arangodb.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend arangodb_backend\n\nbackend arangodb_backend\n    balance roundrobin\n    server arangodb1 127.0.0.1:8529 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R arangodb:arangodb /etc/arangodb\nsudo chmod 750 /etc/arangodb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8529/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status arangodb\n\n# View logs\nsudo journalctl -u arangodb -f\n\n# Monitor resource usage\ntop -p $(pgrep arangodb)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/arangodb&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/arangodb-backup-$DATE.tar.gz&quot; /etc/arangodb /var/lib/arangodb\n\necho &quot;Backup completed: $BACKUP_DIR/arangodb-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop arangodb\n\n# Restore from backup\ntar -xzf /backup/arangodb/arangodb-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start arangodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u arangodb -n 100\nsudo tail -f /var/log/arangodb/arangodb.log\n\n# Check configuration\narangod --version\n\n# Check permissions\nls -la /etc/arangodb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8529\n\n# Test connectivity\ntelnet localhost 8529\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep arangodb)\n\n# Check disk I/O\niotop -p $(pgrep arangodb)\n\n# Check connections\nss -an | grep 8529</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  arangodb:\n    image: arangodb:latest\n    ports:\n      - &quot;8529:8529&quot;\n    volumes:\n      - ./config:/etc/arangodb\n      - ./data:/var/lib/arangodb\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update arangodb\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade arangodb\n\n# Arch Linux\nsudo pacman -Syu arangodb\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade arangodb\n\n# openSUSE\nsudo zypper update arangodb\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade arangodb\n\n# Always backup before updates\ntar -czf /backup/arangodb-pre-update-$(date +%Y%m%d).tar.gz /etc/arangodb\n\n# Restart after updates\nsudo systemctl restart arangodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/arangodb\n\n# Clean old logs\nfind /var/log/arangodb -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/arangodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.arangodb.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/arangodb/arangodb</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.arangodb.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.arangodb.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1173,"lastBuilt":"2025-09-16T03:18:23.512Z","metadataVersion":"2.0"},{"name":"argocd","displayName":"argo-cd Installation Guide","slug":"argocd","description":"argo-cd is a free and open-source declarative GitOps CD for Kubernetes. Argo CD automates deployment of applications to Kubernetes clusters using Git repositories as the source of truth","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080,8083],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/argocd","documentationUrl":"https://howtomgr.github.io/miscellaneous/argocd","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/argocd","updatedAt":"2025-09-16T02:56:26Z","createdAt":"2025-09-16T02:18:50Z","readmeRaw":"# argo-cd Installation Guide\n\nargo-cd is a free and open-source declarative GitOps CD for Kubernetes. Argo CD automates deployment of applications to Kubernetes clusters using Git repositories as the source of truth\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: Git and Kubernetes access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default argo-cd port)\n  - Port 8083 for metrics\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install argo-cd\nsudo dnf install -y argocd\n\n# Enable and start service\nsudo systemctl enable --now argocd-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nargocd version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install argo-cd\nsudo apt install -y argocd\n\n# Enable and start service\nsudo systemctl enable --now argocd-server\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nargocd version\n```\n\n### Arch Linux\n\n```bash\n# Install argo-cd\nsudo pacman -S argocd\n\n# Enable and start service\nsudo systemctl enable --now argocd-server\n\n# Verify installation\nargocd version\n```\n\n### Alpine Linux\n\n```bash\n# Install argo-cd\napk add --no-cache argocd\n\n# Enable and start service\nrc-update add argocd-server default\nrc-service argocd-server start\n\n# Verify installation\nargocd version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install argo-cd\nsudo zypper install -y argocd\n\n# Enable and start service\nsudo systemctl enable --now argocd-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nargocd version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install argocd\n\n# Start service\nbrew services start argocd\n\n# Verify installation\nargocd version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install argocd\n\n# Enable in rc.conf\necho 'argocd-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice argocd-server start\n\n# Verify installation\nargocd version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install argocd\n\n# Or using Scoop\nscoop install argocd\n\n# Verify installation\nargocd version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/argocd\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nargocd version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable argocd-server\n\n# Start service\nsudo systemctl start argocd-server\n\n# Stop service\nsudo systemctl stop argocd-server\n\n# Restart service\nsudo systemctl restart argocd-server\n\n# Check status\nsudo systemctl status argocd-server\n\n# View logs\nsudo journalctl -u argocd-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add argocd-server default\n\n# Start service\nrc-service argocd-server start\n\n# Stop service\nrc-service argocd-server stop\n\n# Restart service\nrc-service argocd-server restart\n\n# Check status\nrc-service argocd-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'argocd-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice argocd-server start\n\n# Stop service\nservice argocd-server stop\n\n# Restart service\nservice argocd-server restart\n\n# Check status\nservice argocd-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start argocd\nbrew services stop argocd\nbrew services restart argocd\n\n# Check status\nbrew services list | grep argocd\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start argocd-server\n\n# Stop service\nnet stop argocd-server\n\n# Using PowerShell\nStart-Service argocd-server\nStop-Service argocd-server\nRestart-Service argocd-server\n\n# Check status\nGet-Service argocd-server\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream argocd_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name argocd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name argocd.example.com;\n\n    ssl_certificate /etc/ssl/certs/argocd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/argocd.example.com.key;\n\n    location / {\n        proxy_pass http://argocd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName argocd.example.com\n    Redirect permanent / https://argocd.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName argocd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/argocd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/argocd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend argocd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/argocd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend argocd_backend\n\nbackend argocd_backend\n    balance roundrobin\n    server argocd1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R argocd:argocd /etc/argocd\nsudo chmod 750 /etc/argocd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status argocd-server\n\n# View logs\nsudo journalctl -u argocd-server -f\n\n# Monitor resource usage\ntop -p $(pgrep argocd)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/argocd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/argocd-backup-$DATE.tar.gz\" /etc/argocd /var/lib/argocd\n\necho \"Backup completed: $BACKUP_DIR/argocd-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop argocd-server\n\n# Restore from backup\ntar -xzf /backup/argocd/argocd-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start argocd-server\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u argocd-server -n 100\nsudo tail -f /var/log/argocd/argocd.log\n\n# Check configuration\nargocd version\n\n# Check permissions\nls -la /etc/argocd\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep argocd)\n\n# Check disk I/O\niotop -p $(pgrep argocd)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  argocd:\n    image: argocd:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/argocd\n      - ./data:/var/lib/argocd\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update argocd\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade argocd\n\n# Arch Linux\nsudo pacman -Syu argocd\n\n# Alpine Linux\napk update && apk upgrade argocd\n\n# openSUSE\nsudo zypper update argocd\n\n# FreeBSD\npkg update && pkg upgrade argocd\n\n# Always backup before updates\ntar -czf /backup/argocd-pre-update-$(date +%Y%m%d).tar.gz /etc/argocd\n\n# Restart after updates\nsudo systemctl restart argocd-server\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/argocd\n\n# Clean old logs\nfind /var/log/argocd -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/argocd\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.argocd.org/\n- GitHub Repository: https://github.com/argocd/argocd\n- Community Forum: https://forum.argocd.org/\n- Best Practices Guide: https://docs.argocd.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"argo-cd-installation-guide\" class=\"mobile-header\">argo-cd Installation Guide</h1>\n<p class=\"mobile-paragraph\">argo-cd is a free and open-source declarative GitOps CD for Kubernetes. Argo CD automates deployment of applications to Kubernetes clusters using Git repositories as the source of truth</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: Git and Kubernetes access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default argo-cd port)</li>\n<li class=\"mobile-list-item\">Port 8083 for metrics</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install argo-cd\nsudo dnf install -y argocd\n\n# Enable and start service\nsudo systemctl enable --now argocd-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nargocd version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install argo-cd\nsudo apt install -y argocd\n\n# Enable and start service\nsudo systemctl enable --now argocd-server\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nargocd version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install argo-cd\nsudo pacman -S argocd\n\n# Enable and start service\nsudo systemctl enable --now argocd-server\n\n# Verify installation\nargocd version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install argo-cd\napk add --no-cache argocd\n\n# Enable and start service\nrc-update add argocd-server default\nrc-service argocd-server start\n\n# Verify installation\nargocd version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install argo-cd\nsudo zypper install -y argocd\n\n# Enable and start service\nsudo systemctl enable --now argocd-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nargocd version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install argocd\n\n# Start service\nbrew services start argocd\n\n# Verify installation\nargocd version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install argocd\n\n# Enable in rc.conf\necho &#039;argocd-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice argocd-server start\n\n# Verify installation\nargocd version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install argocd\n\n# Or using Scoop\nscoop install argocd\n\n# Verify installation\nargocd version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/argocd\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nargocd version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable argocd-server\n\n# Start service\nsudo systemctl start argocd-server\n\n# Stop service\nsudo systemctl stop argocd-server\n\n# Restart service\nsudo systemctl restart argocd-server\n\n# Check status\nsudo systemctl status argocd-server\n\n# View logs\nsudo journalctl -u argocd-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add argocd-server default\n\n# Start service\nrc-service argocd-server start\n\n# Stop service\nrc-service argocd-server stop\n\n# Restart service\nrc-service argocd-server restart\n\n# Check status\nrc-service argocd-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;argocd-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice argocd-server start\n\n# Stop service\nservice argocd-server stop\n\n# Restart service\nservice argocd-server restart\n\n# Check status\nservice argocd-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start argocd\nbrew services stop argocd\nbrew services restart argocd\n\n# Check status\nbrew services list | grep argocd</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start argocd-server\n\n# Stop service\nnet stop argocd-server\n\n# Using PowerShell\nStart-Service argocd-server\nStop-Service argocd-server\nRestart-Service argocd-server\n\n# Check status\nGet-Service argocd-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream argocd_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name argocd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name argocd.example.com;\n\n    ssl_certificate /etc/ssl/certs/argocd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/argocd.example.com.key;\n\n    location / {\n        proxy_pass http://argocd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName argocd.example.com\n    Redirect permanent / https://argocd.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName argocd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/argocd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/argocd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend argocd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/argocd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend argocd_backend\n\nbackend argocd_backend\n    balance roundrobin\n    server argocd1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R argocd:argocd /etc/argocd\nsudo chmod 750 /etc/argocd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status argocd-server\n\n# View logs\nsudo journalctl -u argocd-server -f\n\n# Monitor resource usage\ntop -p $(pgrep argocd)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/argocd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/argocd-backup-$DATE.tar.gz&quot; /etc/argocd /var/lib/argocd\n\necho &quot;Backup completed: $BACKUP_DIR/argocd-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop argocd-server\n\n# Restore from backup\ntar -xzf /backup/argocd/argocd-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start argocd-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u argocd-server -n 100\nsudo tail -f /var/log/argocd/argocd.log\n\n# Check configuration\nargocd version\n\n# Check permissions\nls -la /etc/argocd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep argocd)\n\n# Check disk I/O\niotop -p $(pgrep argocd)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  argocd:\n    image: argocd:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/argocd\n      - ./data:/var/lib/argocd\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update argocd\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade argocd\n\n# Arch Linux\nsudo pacman -Syu argocd\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade argocd\n\n# openSUSE\nsudo zypper update argocd\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade argocd\n\n# Always backup before updates\ntar -czf /backup/argocd-pre-update-$(date +%Y%m%d).tar.gz /etc/argocd\n\n# Restart after updates\nsudo systemctl restart argocd-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/argocd\n\n# Clean old logs\nfind /var/log/argocd -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/argocd</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.argocd.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/argocd/argocd</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.argocd.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.argocd.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1173,"lastBuilt":"2025-09-16T03:18:22.856Z","metadataVersion":"2.0"},{"name":"aria2","displayName":"aria2 Installation Guide","slug":"aria2","description":"aria2 is a free and open-source download utility. Aria2 supports HTTP/S, FTP, SFTP, BitTorrent, and Metalink downloads","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,6800],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/aria2","documentationUrl":"https://howtomgr.github.io/miscellaneous/aria2","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/aria2","updatedAt":"2025-09-16T02:56:32Z","createdAt":"2025-09-16T02:19:00Z","readmeRaw":"# aria2 Installation Guide\n\naria2 is a free and open-source download utility. Aria2 supports HTTP/S, FTP, SFTP, BitTorrent, and Metalink downloads\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 1GB for downloads\n  - Network: Multiple protocols\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 6800 (default aria2 port)\n  - RPC port 6800\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install aria2\nsudo dnf install -y aria2\n\n# Enable and start service\nsudo systemctl enable --now aria2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6800/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\naria2 --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install aria2\nsudo apt install -y aria2\n\n# Enable and start service\nsudo systemctl enable --now aria2\n\n# Configure firewall\nsudo ufw allow 6800\n\n# Verify installation\naria2 --version\n```\n\n### Arch Linux\n\n```bash\n# Install aria2\nsudo pacman -S aria2\n\n# Enable and start service\nsudo systemctl enable --now aria2\n\n# Verify installation\naria2 --version\n```\n\n### Alpine Linux\n\n```bash\n# Install aria2\napk add --no-cache aria2\n\n# Enable and start service\nrc-update add aria2 default\nrc-service aria2 start\n\n# Verify installation\naria2 --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install aria2\nsudo zypper install -y aria2\n\n# Enable and start service\nsudo systemctl enable --now aria2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6800/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\naria2 --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install aria2\n\n# Start service\nbrew services start aria2\n\n# Verify installation\naria2 --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install aria2\n\n# Enable in rc.conf\necho 'aria2_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice aria2 start\n\n# Verify installation\naria2 --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install aria2\n\n# Or using Scoop\nscoop install aria2\n\n# Verify installation\naria2 --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/aria2\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\naria2 --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable aria2\n\n# Start service\nsudo systemctl start aria2\n\n# Stop service\nsudo systemctl stop aria2\n\n# Restart service\nsudo systemctl restart aria2\n\n# Check status\nsudo systemctl status aria2\n\n# View logs\nsudo journalctl -u aria2 -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add aria2 default\n\n# Start service\nrc-service aria2 start\n\n# Stop service\nrc-service aria2 stop\n\n# Restart service\nrc-service aria2 restart\n\n# Check status\nrc-service aria2 status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'aria2_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice aria2 start\n\n# Stop service\nservice aria2 stop\n\n# Restart service\nservice aria2 restart\n\n# Check status\nservice aria2 status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start aria2\nbrew services stop aria2\nbrew services restart aria2\n\n# Check status\nbrew services list | grep aria2\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start aria2\n\n# Stop service\nnet stop aria2\n\n# Using PowerShell\nStart-Service aria2\nStop-Service aria2\nRestart-Service aria2\n\n# Check status\nGet-Service aria2\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream aria2_backend {\n    server 127.0.0.1:6800;\n}\n\nserver {\n    listen 80;\n    server_name aria2.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name aria2.example.com;\n\n    ssl_certificate /etc/ssl/certs/aria2.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/aria2.example.com.key;\n\n    location / {\n        proxy_pass http://aria2_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName aria2.example.com\n    Redirect permanent / https://aria2.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName aria2.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/aria2.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/aria2.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6800/\n    ProxyPassReverse / http://127.0.0.1:6800/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend aria2_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/aria2.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend aria2_backend\n\nbackend aria2_backend\n    balance roundrobin\n    server aria21 127.0.0.1:6800 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R aria2:aria2 /etc/aria2\nsudo chmod 750 /etc/aria2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6800/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status aria2\n\n# View logs\nsudo journalctl -u aria2 -f\n\n# Monitor resource usage\ntop -p $(pgrep aria2)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/aria2\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/aria2-backup-$DATE.tar.gz\" /etc/aria2 /var/lib/aria2\n\necho \"Backup completed: $BACKUP_DIR/aria2-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop aria2\n\n# Restore from backup\ntar -xzf /backup/aria2/aria2-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start aria2\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u aria2 -n 100\nsudo tail -f /var/log/aria2/aria2.log\n\n# Check configuration\naria2 --version\n\n# Check permissions\nls -la /etc/aria2\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 6800\n\n# Test connectivity\ntelnet localhost 6800\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep aria2)\n\n# Check disk I/O\niotop -p $(pgrep aria2)\n\n# Check connections\nss -an | grep 6800\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  aria2:\n    image: aria2:latest\n    ports:\n      - \"6800:6800\"\n    volumes:\n      - ./config:/etc/aria2\n      - ./data:/var/lib/aria2\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update aria2\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade aria2\n\n# Arch Linux\nsudo pacman -Syu aria2\n\n# Alpine Linux\napk update && apk upgrade aria2\n\n# openSUSE\nsudo zypper update aria2\n\n# FreeBSD\npkg update && pkg upgrade aria2\n\n# Always backup before updates\ntar -czf /backup/aria2-pre-update-$(date +%Y%m%d).tar.gz /etc/aria2\n\n# Restart after updates\nsudo systemctl restart aria2\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/aria2\n\n# Clean old logs\nfind /var/log/aria2 -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/aria2\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.aria2.org/\n- GitHub Repository: https://github.com/aria2/aria2\n- Community Forum: https://forum.aria2.org/\n- Best Practices Guide: https://docs.aria2.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"aria2-installation-guide\" class=\"mobile-header\">aria2 Installation Guide</h1>\n<p class=\"mobile-paragraph\">aria2 is a free and open-source download utility. Aria2 supports HTTP/S, FTP, SFTP, BitTorrent, and Metalink downloads</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for downloads</li>\n<li class=\"mobile-list-item\">Network: Multiple protocols</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 6800 (default aria2 port)</li>\n<li class=\"mobile-list-item\">RPC port 6800</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install aria2\nsudo dnf install -y aria2\n\n# Enable and start service\nsudo systemctl enable --now aria2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6800/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\naria2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install aria2\nsudo apt install -y aria2\n\n# Enable and start service\nsudo systemctl enable --now aria2\n\n# Configure firewall\nsudo ufw allow 6800\n\n# Verify installation\naria2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install aria2\nsudo pacman -S aria2\n\n# Enable and start service\nsudo systemctl enable --now aria2\n\n# Verify installation\naria2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install aria2\napk add --no-cache aria2\n\n# Enable and start service\nrc-update add aria2 default\nrc-service aria2 start\n\n# Verify installation\naria2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install aria2\nsudo zypper install -y aria2\n\n# Enable and start service\nsudo systemctl enable --now aria2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6800/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\naria2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install aria2\n\n# Start service\nbrew services start aria2\n\n# Verify installation\naria2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install aria2\n\n# Enable in rc.conf\necho &#039;aria2_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice aria2 start\n\n# Verify installation\naria2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install aria2\n\n# Or using Scoop\nscoop install aria2\n\n# Verify installation\naria2 --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/aria2\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\naria2 --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable aria2\n\n# Start service\nsudo systemctl start aria2\n\n# Stop service\nsudo systemctl stop aria2\n\n# Restart service\nsudo systemctl restart aria2\n\n# Check status\nsudo systemctl status aria2\n\n# View logs\nsudo journalctl -u aria2 -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add aria2 default\n\n# Start service\nrc-service aria2 start\n\n# Stop service\nrc-service aria2 stop\n\n# Restart service\nrc-service aria2 restart\n\n# Check status\nrc-service aria2 status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;aria2_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice aria2 start\n\n# Stop service\nservice aria2 stop\n\n# Restart service\nservice aria2 restart\n\n# Check status\nservice aria2 status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start aria2\nbrew services stop aria2\nbrew services restart aria2\n\n# Check status\nbrew services list | grep aria2</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start aria2\n\n# Stop service\nnet stop aria2\n\n# Using PowerShell\nStart-Service aria2\nStop-Service aria2\nRestart-Service aria2\n\n# Check status\nGet-Service aria2</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream aria2_backend {\n    server 127.0.0.1:6800;\n}\n\nserver {\n    listen 80;\n    server_name aria2.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name aria2.example.com;\n\n    ssl_certificate /etc/ssl/certs/aria2.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/aria2.example.com.key;\n\n    location / {\n        proxy_pass http://aria2_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName aria2.example.com\n    Redirect permanent / https://aria2.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName aria2.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/aria2.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/aria2.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6800/\n    ProxyPassReverse / http://127.0.0.1:6800/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend aria2_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/aria2.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend aria2_backend\n\nbackend aria2_backend\n    balance roundrobin\n    server aria21 127.0.0.1:6800 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R aria2:aria2 /etc/aria2\nsudo chmod 750 /etc/aria2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6800/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status aria2\n\n# View logs\nsudo journalctl -u aria2 -f\n\n# Monitor resource usage\ntop -p $(pgrep aria2)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/aria2&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/aria2-backup-$DATE.tar.gz&quot; /etc/aria2 /var/lib/aria2\n\necho &quot;Backup completed: $BACKUP_DIR/aria2-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop aria2\n\n# Restore from backup\ntar -xzf /backup/aria2/aria2-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start aria2</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u aria2 -n 100\nsudo tail -f /var/log/aria2/aria2.log\n\n# Check configuration\naria2 --version\n\n# Check permissions\nls -la /etc/aria2</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 6800\n\n# Test connectivity\ntelnet localhost 6800\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep aria2)\n\n# Check disk I/O\niotop -p $(pgrep aria2)\n\n# Check connections\nss -an | grep 6800</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  aria2:\n    image: aria2:latest\n    ports:\n      - &quot;6800:6800&quot;\n    volumes:\n      - ./config:/etc/aria2\n      - ./data:/var/lib/aria2\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update aria2\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade aria2\n\n# Arch Linux\nsudo pacman -Syu aria2\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade aria2\n\n# openSUSE\nsudo zypper update aria2\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade aria2\n\n# Always backup before updates\ntar -czf /backup/aria2-pre-update-$(date +%Y%m%d).tar.gz /etc/aria2\n\n# Restart after updates\nsudo systemctl restart aria2</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/aria2\n\n# Clean old logs\nfind /var/log/aria2 -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/aria2</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.aria2.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/aria2/aria2</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.aria2.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.aria2.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1157,"lastBuilt":"2025-09-16T03:18:22.455Z","metadataVersion":"2.0"},{"name":"arkserver","displayName":"arkserver Installation Guide","slug":"arkserver","description":"arkserver is a free and open-source ARK Survival server. ARK: Survival Evolved dedicated server","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,27015],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/arkserver","documentationUrl":"https://howtomgr.github.io/miscellaneous/arkserver","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/arkserver","updatedAt":"2025-09-16T02:56:40Z","createdAt":"2025-09-16T02:19:09Z","readmeRaw":"# arkserver Installation Guide\n\narkserver is a free and open-source ARK Survival server. ARK: Survival Evolved dedicated server\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 8GB minimum\n  - Storage: 100GB for game\n  - Network: Steam protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 27015 (default arkserver port)\n  - Query on 27016\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install arkserver\nsudo dnf install -y arkserver\n\n# Enable and start service\nsudo systemctl enable --now ark\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narkserver --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install arkserver\nsudo apt install -y arkserver\n\n# Enable and start service\nsudo systemctl enable --now ark\n\n# Configure firewall\nsudo ufw allow 27015\n\n# Verify installation\narkserver --version\n```\n\n### Arch Linux\n\n```bash\n# Install arkserver\nsudo pacman -S arkserver\n\n# Enable and start service\nsudo systemctl enable --now ark\n\n# Verify installation\narkserver --version\n```\n\n### Alpine Linux\n\n```bash\n# Install arkserver\napk add --no-cache arkserver\n\n# Enable and start service\nrc-update add ark default\nrc-service ark start\n\n# Verify installation\narkserver --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install arkserver\nsudo zypper install -y arkserver\n\n# Enable and start service\nsudo systemctl enable --now ark\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narkserver --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install arkserver\n\n# Start service\nbrew services start arkserver\n\n# Verify installation\narkserver --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install arkserver\n\n# Enable in rc.conf\necho 'ark_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ark start\n\n# Verify installation\narkserver --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install arkserver\n\n# Or using Scoop\nscoop install arkserver\n\n# Verify installation\narkserver --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/arkserver\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\narkserver --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable ark\n\n# Start service\nsudo systemctl start ark\n\n# Stop service\nsudo systemctl stop ark\n\n# Restart service\nsudo systemctl restart ark\n\n# Check status\nsudo systemctl status ark\n\n# View logs\nsudo journalctl -u ark -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add ark default\n\n# Start service\nrc-service ark start\n\n# Stop service\nrc-service ark stop\n\n# Restart service\nrc-service ark restart\n\n# Check status\nrc-service ark status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'ark_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ark start\n\n# Stop service\nservice ark stop\n\n# Restart service\nservice ark restart\n\n# Check status\nservice ark status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start arkserver\nbrew services stop arkserver\nbrew services restart arkserver\n\n# Check status\nbrew services list | grep arkserver\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start ark\n\n# Stop service\nnet stop ark\n\n# Using PowerShell\nStart-Service ark\nStop-Service ark\nRestart-Service ark\n\n# Check status\nGet-Service ark\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream arkserver_backend {\n    server 127.0.0.1:27015;\n}\n\nserver {\n    listen 80;\n    server_name arkserver.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name arkserver.example.com;\n\n    ssl_certificate /etc/ssl/certs/arkserver.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/arkserver.example.com.key;\n\n    location / {\n        proxy_pass http://arkserver_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName arkserver.example.com\n    Redirect permanent / https://arkserver.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName arkserver.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/arkserver.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/arkserver.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:27015/\n    ProxyPassReverse / http://127.0.0.1:27015/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend arkserver_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/arkserver.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend arkserver_backend\n\nbackend arkserver_backend\n    balance roundrobin\n    server arkserver1 127.0.0.1:27015 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R arkserver:arkserver /etc/arkserver\nsudo chmod 750 /etc/arkserver\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status ark\n\n# View logs\nsudo journalctl -u ark -f\n\n# Monitor resource usage\ntop -p $(pgrep arkserver)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/arkserver\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/arkserver-backup-$DATE.tar.gz\" /etc/arkserver /var/lib/arkserver\n\necho \"Backup completed: $BACKUP_DIR/arkserver-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop ark\n\n# Restore from backup\ntar -xzf /backup/arkserver/arkserver-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ark\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u ark -n 100\nsudo tail -f /var/log/arkserver/arkserver.log\n\n# Check configuration\narkserver --version\n\n# Check permissions\nls -la /etc/arkserver\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 27015\n\n# Test connectivity\ntelnet localhost 27015\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep arkserver)\n\n# Check disk I/O\niotop -p $(pgrep arkserver)\n\n# Check connections\nss -an | grep 27015\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  arkserver:\n    image: arkserver:latest\n    ports:\n      - \"27015:27015\"\n    volumes:\n      - ./config:/etc/arkserver\n      - ./data:/var/lib/arkserver\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update arkserver\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade arkserver\n\n# Arch Linux\nsudo pacman -Syu arkserver\n\n# Alpine Linux\napk update && apk upgrade arkserver\n\n# openSUSE\nsudo zypper update arkserver\n\n# FreeBSD\npkg update && pkg upgrade arkserver\n\n# Always backup before updates\ntar -czf /backup/arkserver-pre-update-$(date +%Y%m%d).tar.gz /etc/arkserver\n\n# Restart after updates\nsudo systemctl restart ark\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/arkserver\n\n# Clean old logs\nfind /var/log/arkserver -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/arkserver\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.arkserver.org/\n- GitHub Repository: https://github.com/arkserver/arkserver\n- Community Forum: https://forum.arkserver.org/\n- Best Practices Guide: https://docs.arkserver.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"arkserver-installation-guide\" class=\"mobile-header\">arkserver Installation Guide</h1>\n<p class=\"mobile-paragraph\">arkserver is a free and open-source ARK Survival server. ARK: Survival Evolved dedicated server</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 8GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100GB for game</li>\n<li class=\"mobile-list-item\">Network: Steam protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 27015 (default arkserver port)</li>\n<li class=\"mobile-list-item\">Query on 27016</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install arkserver\nsudo dnf install -y arkserver\n\n# Enable and start service\nsudo systemctl enable --now ark\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narkserver --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install arkserver\nsudo apt install -y arkserver\n\n# Enable and start service\nsudo systemctl enable --now ark\n\n# Configure firewall\nsudo ufw allow 27015\n\n# Verify installation\narkserver --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arkserver\nsudo pacman -S arkserver\n\n# Enable and start service\nsudo systemctl enable --now ark\n\n# Verify installation\narkserver --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arkserver\napk add --no-cache arkserver\n\n# Enable and start service\nrc-update add ark default\nrc-service ark start\n\n# Verify installation\narkserver --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install arkserver\nsudo zypper install -y arkserver\n\n# Enable and start service\nsudo systemctl enable --now ark\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\narkserver --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install arkserver\n\n# Start service\nbrew services start arkserver\n\n# Verify installation\narkserver --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install arkserver\n\n# Enable in rc.conf\necho &#039;ark_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ark start\n\n# Verify installation\narkserver --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install arkserver\n\n# Or using Scoop\nscoop install arkserver\n\n# Verify installation\narkserver --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/arkserver\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\narkserver --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable ark\n\n# Start service\nsudo systemctl start ark\n\n# Stop service\nsudo systemctl stop ark\n\n# Restart service\nsudo systemctl restart ark\n\n# Check status\nsudo systemctl status ark\n\n# View logs\nsudo journalctl -u ark -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add ark default\n\n# Start service\nrc-service ark start\n\n# Stop service\nrc-service ark stop\n\n# Restart service\nrc-service ark restart\n\n# Check status\nrc-service ark status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;ark_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ark start\n\n# Stop service\nservice ark stop\n\n# Restart service\nservice ark restart\n\n# Check status\nservice ark status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start arkserver\nbrew services stop arkserver\nbrew services restart arkserver\n\n# Check status\nbrew services list | grep arkserver</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start ark\n\n# Stop service\nnet stop ark\n\n# Using PowerShell\nStart-Service ark\nStop-Service ark\nRestart-Service ark\n\n# Check status\nGet-Service ark</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream arkserver_backend {\n    server 127.0.0.1:27015;\n}\n\nserver {\n    listen 80;\n    server_name arkserver.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name arkserver.example.com;\n\n    ssl_certificate /etc/ssl/certs/arkserver.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/arkserver.example.com.key;\n\n    location / {\n        proxy_pass http://arkserver_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName arkserver.example.com\n    Redirect permanent / https://arkserver.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName arkserver.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/arkserver.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/arkserver.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:27015/\n    ProxyPassReverse / http://127.0.0.1:27015/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend arkserver_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/arkserver.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend arkserver_backend\n\nbackend arkserver_backend\n    balance roundrobin\n    server arkserver1 127.0.0.1:27015 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R arkserver:arkserver /etc/arkserver\nsudo chmod 750 /etc/arkserver\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status ark\n\n# View logs\nsudo journalctl -u ark -f\n\n# Monitor resource usage\ntop -p $(pgrep arkserver)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/arkserver&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/arkserver-backup-$DATE.tar.gz&quot; /etc/arkserver /var/lib/arkserver\n\necho &quot;Backup completed: $BACKUP_DIR/arkserver-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop ark\n\n# Restore from backup\ntar -xzf /backup/arkserver/arkserver-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ark</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u ark -n 100\nsudo tail -f /var/log/arkserver/arkserver.log\n\n# Check configuration\narkserver --version\n\n# Check permissions\nls -la /etc/arkserver</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 27015\n\n# Test connectivity\ntelnet localhost 27015\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep arkserver)\n\n# Check disk I/O\niotop -p $(pgrep arkserver)\n\n# Check connections\nss -an | grep 27015</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  arkserver:\n    image: arkserver:latest\n    ports:\n      - &quot;27015:27015&quot;\n    volumes:\n      - ./config:/etc/arkserver\n      - ./data:/var/lib/arkserver\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update arkserver\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade arkserver\n\n# Arch Linux\nsudo pacman -Syu arkserver\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade arkserver\n\n# openSUSE\nsudo zypper update arkserver\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade arkserver\n\n# Always backup before updates\ntar -czf /backup/arkserver-pre-update-$(date +%Y%m%d).tar.gz /etc/arkserver\n\n# Restart after updates\nsudo systemctl restart ark</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/arkserver\n\n# Clean old logs\nfind /var/log/arkserver -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/arkserver</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.arkserver.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/arkserver/arkserver</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.arkserver.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.arkserver.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1153,"lastBuilt":"2025-09-16T03:18:22.149Z","metadataVersion":"2.0"},{"name":"auditbeat","displayName":"auditbeat Installation Guide","slug":"auditbeat","description":"auditbeat is a free and open-source audit data shipper. Auditbeat ships audit framework data and monitors integrity","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,5066],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/auditbeat","documentationUrl":"https://howtomgr.github.io/miscellaneous/auditbeat","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/auditbeat","updatedAt":"2025-09-16T02:57:09Z","createdAt":"2025-09-16T02:19:46Z","readmeRaw":"# auditbeat Installation Guide\n\nauditbeat is a free and open-source audit data shipper. Auditbeat ships audit framework data and monitors integrity\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 1GB for data\n  - Network: System audit\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5066 (default auditbeat port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install auditbeat\nsudo dnf install -y auditbeat\n\n# Enable and start service\nsudo systemctl enable --now auditbeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nauditbeat --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install auditbeat\nsudo apt install -y auditbeat\n\n# Enable and start service\nsudo systemctl enable --now auditbeat\n\n# Configure firewall\nsudo ufw allow 5066\n\n# Verify installation\nauditbeat --version\n```\n\n### Arch Linux\n\n```bash\n# Install auditbeat\nsudo pacman -S auditbeat\n\n# Enable and start service\nsudo systemctl enable --now auditbeat\n\n# Verify installation\nauditbeat --version\n```\n\n### Alpine Linux\n\n```bash\n# Install auditbeat\napk add --no-cache auditbeat\n\n# Enable and start service\nrc-update add auditbeat default\nrc-service auditbeat start\n\n# Verify installation\nauditbeat --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install auditbeat\nsudo zypper install -y auditbeat\n\n# Enable and start service\nsudo systemctl enable --now auditbeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nauditbeat --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install auditbeat\n\n# Start service\nbrew services start auditbeat\n\n# Verify installation\nauditbeat --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install auditbeat\n\n# Enable in rc.conf\necho 'auditbeat_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice auditbeat start\n\n# Verify installation\nauditbeat --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install auditbeat\n\n# Or using Scoop\nscoop install auditbeat\n\n# Verify installation\nauditbeat --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/auditbeat\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nauditbeat --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable auditbeat\n\n# Start service\nsudo systemctl start auditbeat\n\n# Stop service\nsudo systemctl stop auditbeat\n\n# Restart service\nsudo systemctl restart auditbeat\n\n# Check status\nsudo systemctl status auditbeat\n\n# View logs\nsudo journalctl -u auditbeat -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add auditbeat default\n\n# Start service\nrc-service auditbeat start\n\n# Stop service\nrc-service auditbeat stop\n\n# Restart service\nrc-service auditbeat restart\n\n# Check status\nrc-service auditbeat status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'auditbeat_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice auditbeat start\n\n# Stop service\nservice auditbeat stop\n\n# Restart service\nservice auditbeat restart\n\n# Check status\nservice auditbeat status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start auditbeat\nbrew services stop auditbeat\nbrew services restart auditbeat\n\n# Check status\nbrew services list | grep auditbeat\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start auditbeat\n\n# Stop service\nnet stop auditbeat\n\n# Using PowerShell\nStart-Service auditbeat\nStop-Service auditbeat\nRestart-Service auditbeat\n\n# Check status\nGet-Service auditbeat\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream auditbeat_backend {\n    server 127.0.0.1:5066;\n}\n\nserver {\n    listen 80;\n    server_name auditbeat.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name auditbeat.example.com;\n\n    ssl_certificate /etc/ssl/certs/auditbeat.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/auditbeat.example.com.key;\n\n    location / {\n        proxy_pass http://auditbeat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName auditbeat.example.com\n    Redirect permanent / https://auditbeat.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName auditbeat.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/auditbeat.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/auditbeat.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5066/\n    ProxyPassReverse / http://127.0.0.1:5066/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend auditbeat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/auditbeat.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend auditbeat_backend\n\nbackend auditbeat_backend\n    balance roundrobin\n    server auditbeat1 127.0.0.1:5066 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R auditbeat:auditbeat /etc/auditbeat\nsudo chmod 750 /etc/auditbeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status auditbeat\n\n# View logs\nsudo journalctl -u auditbeat -f\n\n# Monitor resource usage\ntop -p $(pgrep auditbeat)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/auditbeat\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/auditbeat-backup-$DATE.tar.gz\" /etc/auditbeat /var/lib/auditbeat\n\necho \"Backup completed: $BACKUP_DIR/auditbeat-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop auditbeat\n\n# Restore from backup\ntar -xzf /backup/auditbeat/auditbeat-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start auditbeat\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u auditbeat -n 100\nsudo tail -f /var/log/auditbeat/auditbeat.log\n\n# Check configuration\nauditbeat --version\n\n# Check permissions\nls -la /etc/auditbeat\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5066\n\n# Test connectivity\ntelnet localhost 5066\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep auditbeat)\n\n# Check disk I/O\niotop -p $(pgrep auditbeat)\n\n# Check connections\nss -an | grep 5066\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  auditbeat:\n    image: auditbeat:latest\n    ports:\n      - \"5066:5066\"\n    volumes:\n      - ./config:/etc/auditbeat\n      - ./data:/var/lib/auditbeat\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update auditbeat\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade auditbeat\n\n# Arch Linux\nsudo pacman -Syu auditbeat\n\n# Alpine Linux\napk update && apk upgrade auditbeat\n\n# openSUSE\nsudo zypper update auditbeat\n\n# FreeBSD\npkg update && pkg upgrade auditbeat\n\n# Always backup before updates\ntar -czf /backup/auditbeat-pre-update-$(date +%Y%m%d).tar.gz /etc/auditbeat\n\n# Restart after updates\nsudo systemctl restart auditbeat\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/auditbeat\n\n# Clean old logs\nfind /var/log/auditbeat -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/auditbeat\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.auditbeat.org/\n- GitHub Repository: https://github.com/auditbeat/auditbeat\n- Community Forum: https://forum.auditbeat.org/\n- Best Practices Guide: https://docs.auditbeat.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"auditbeat-installation-guide\" class=\"mobile-header\">auditbeat Installation Guide</h1>\n<p class=\"mobile-paragraph\">auditbeat is a free and open-source audit data shipper. Auditbeat ships audit framework data and monitors integrity</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: System audit</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5066 (default auditbeat port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install auditbeat\nsudo dnf install -y auditbeat\n\n# Enable and start service\nsudo systemctl enable --now auditbeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install auditbeat\nsudo apt install -y auditbeat\n\n# Enable and start service\nsudo systemctl enable --now auditbeat\n\n# Configure firewall\nsudo ufw allow 5066\n\n# Verify installation\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install auditbeat\nsudo pacman -S auditbeat\n\n# Enable and start service\nsudo systemctl enable --now auditbeat\n\n# Verify installation\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install auditbeat\napk add --no-cache auditbeat\n\n# Enable and start service\nrc-update add auditbeat default\nrc-service auditbeat start\n\n# Verify installation\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install auditbeat\nsudo zypper install -y auditbeat\n\n# Enable and start service\nsudo systemctl enable --now auditbeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install auditbeat\n\n# Start service\nbrew services start auditbeat\n\n# Verify installation\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install auditbeat\n\n# Enable in rc.conf\necho &#039;auditbeat_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice auditbeat start\n\n# Verify installation\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install auditbeat\n\n# Or using Scoop\nscoop install auditbeat\n\n# Verify installation\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/auditbeat\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nauditbeat --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable auditbeat\n\n# Start service\nsudo systemctl start auditbeat\n\n# Stop service\nsudo systemctl stop auditbeat\n\n# Restart service\nsudo systemctl restart auditbeat\n\n# Check status\nsudo systemctl status auditbeat\n\n# View logs\nsudo journalctl -u auditbeat -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add auditbeat default\n\n# Start service\nrc-service auditbeat start\n\n# Stop service\nrc-service auditbeat stop\n\n# Restart service\nrc-service auditbeat restart\n\n# Check status\nrc-service auditbeat status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;auditbeat_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice auditbeat start\n\n# Stop service\nservice auditbeat stop\n\n# Restart service\nservice auditbeat restart\n\n# Check status\nservice auditbeat status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start auditbeat\nbrew services stop auditbeat\nbrew services restart auditbeat\n\n# Check status\nbrew services list | grep auditbeat</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start auditbeat\n\n# Stop service\nnet stop auditbeat\n\n# Using PowerShell\nStart-Service auditbeat\nStop-Service auditbeat\nRestart-Service auditbeat\n\n# Check status\nGet-Service auditbeat</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream auditbeat_backend {\n    server 127.0.0.1:5066;\n}\n\nserver {\n    listen 80;\n    server_name auditbeat.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name auditbeat.example.com;\n\n    ssl_certificate /etc/ssl/certs/auditbeat.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/auditbeat.example.com.key;\n\n    location / {\n        proxy_pass http://auditbeat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName auditbeat.example.com\n    Redirect permanent / https://auditbeat.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName auditbeat.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/auditbeat.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/auditbeat.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5066/\n    ProxyPassReverse / http://127.0.0.1:5066/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend auditbeat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/auditbeat.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend auditbeat_backend\n\nbackend auditbeat_backend\n    balance roundrobin\n    server auditbeat1 127.0.0.1:5066 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R auditbeat:auditbeat /etc/auditbeat\nsudo chmod 750 /etc/auditbeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status auditbeat\n\n# View logs\nsudo journalctl -u auditbeat -f\n\n# Monitor resource usage\ntop -p $(pgrep auditbeat)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/auditbeat&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/auditbeat-backup-$DATE.tar.gz&quot; /etc/auditbeat /var/lib/auditbeat\n\necho &quot;Backup completed: $BACKUP_DIR/auditbeat-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop auditbeat\n\n# Restore from backup\ntar -xzf /backup/auditbeat/auditbeat-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start auditbeat</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u auditbeat -n 100\nsudo tail -f /var/log/auditbeat/auditbeat.log\n\n# Check configuration\nauditbeat --version\n\n# Check permissions\nls -la /etc/auditbeat</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5066\n\n# Test connectivity\ntelnet localhost 5066\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep auditbeat)\n\n# Check disk I/O\niotop -p $(pgrep auditbeat)\n\n# Check connections\nss -an | grep 5066</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  auditbeat:\n    image: auditbeat:latest\n    ports:\n      - &quot;5066:5066&quot;\n    volumes:\n      - ./config:/etc/auditbeat\n      - ./data:/var/lib/auditbeat\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update auditbeat\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade auditbeat\n\n# Arch Linux\nsudo pacman -Syu auditbeat\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade auditbeat\n\n# openSUSE\nsudo zypper update auditbeat\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade auditbeat\n\n# Always backup before updates\ntar -czf /backup/auditbeat-pre-update-$(date +%Y%m%d).tar.gz /etc/auditbeat\n\n# Restart after updates\nsudo systemctl restart auditbeat</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/auditbeat\n\n# Clean old logs\nfind /var/log/auditbeat -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/auditbeat</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.auditbeat.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/auditbeat/auditbeat</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.auditbeat.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.auditbeat.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1155,"lastBuilt":"2025-09-16T03:18:20.528Z","metadataVersion":"2.0"},{"name":"authentik","displayName":"authentik Installation Guide","slug":"authentik","description":"authentik is a free and open-source identity provider with flexible authentication. Authentik is a modern identity provider supporting SAML, OAuth2, and LDAP, serving as an alternative to Auth0, Okta, or Active Directory","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/authentik","documentationUrl":"https://howtomgr.github.io/miscellaneous/authentik","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/authentik","updatedAt":"2025-09-16T02:57:23Z","createdAt":"2025-09-16T02:20:06Z","readmeRaw":"# authentik Installation Guide\n\nauthentik is a free and open-source identity provider with flexible authentication. Authentik is a modern identity provider supporting SAML, OAuth2, and LDAP, serving as an alternative to Auth0, Okta, or Active Directory\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for application\n  - Network: HTTPS for authentication\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9000/9443 (default authentik port)\n  - LDAP on 389/636\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install authentik\nsudo dnf install -y authentik\n\n# Enable and start service\nsudo systemctl enable --now authentik\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nak --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install authentik\nsudo apt install -y authentik\n\n# Enable and start service\nsudo systemctl enable --now authentik\n\n# Configure firewall\nsudo ufw allow 9000/9443\n\n# Verify installation\nak --version\n```\n\n### Arch Linux\n\n```bash\n# Install authentik\nsudo pacman -S authentik\n\n# Enable and start service\nsudo systemctl enable --now authentik\n\n# Verify installation\nak --version\n```\n\n### Alpine Linux\n\n```bash\n# Install authentik\napk add --no-cache authentik\n\n# Enable and start service\nrc-update add authentik default\nrc-service authentik start\n\n# Verify installation\nak --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install authentik\nsudo zypper install -y authentik\n\n# Enable and start service\nsudo systemctl enable --now authentik\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nak --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install authentik\n\n# Start service\nbrew services start authentik\n\n# Verify installation\nak --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install authentik\n\n# Enable in rc.conf\necho 'authentik_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice authentik start\n\n# Verify installation\nak --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install authentik\n\n# Or using Scoop\nscoop install authentik\n\n# Verify installation\nak --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/authentik\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nak --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable authentik\n\n# Start service\nsudo systemctl start authentik\n\n# Stop service\nsudo systemctl stop authentik\n\n# Restart service\nsudo systemctl restart authentik\n\n# Check status\nsudo systemctl status authentik\n\n# View logs\nsudo journalctl -u authentik -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add authentik default\n\n# Start service\nrc-service authentik start\n\n# Stop service\nrc-service authentik stop\n\n# Restart service\nrc-service authentik restart\n\n# Check status\nrc-service authentik status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'authentik_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice authentik start\n\n# Stop service\nservice authentik stop\n\n# Restart service\nservice authentik restart\n\n# Check status\nservice authentik status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start authentik\nbrew services stop authentik\nbrew services restart authentik\n\n# Check status\nbrew services list | grep authentik\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start authentik\n\n# Stop service\nnet stop authentik\n\n# Using PowerShell\nStart-Service authentik\nStop-Service authentik\nRestart-Service authentik\n\n# Check status\nGet-Service authentik\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream authentik_backend {\n    server 127.0.0.1:9000/9443;\n}\n\nserver {\n    listen 80;\n    server_name authentik.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name authentik.example.com;\n\n    ssl_certificate /etc/ssl/certs/authentik.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/authentik.example.com.key;\n\n    location / {\n        proxy_pass http://authentik_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName authentik.example.com\n    Redirect permanent / https://authentik.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName authentik.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/authentik.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/authentik.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9000/9443/\n    ProxyPassReverse / http://127.0.0.1:9000/9443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend authentik_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/authentik.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend authentik_backend\n\nbackend authentik_backend\n    balance roundrobin\n    server authentik1 127.0.0.1:9000/9443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R authentik:authentik /etc/authentik\nsudo chmod 750 /etc/authentik\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/9443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status authentik\n\n# View logs\nsudo journalctl -u authentik -f\n\n# Monitor resource usage\ntop -p $(pgrep authentik)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/authentik\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/authentik-backup-$DATE.tar.gz\" /etc/authentik /var/lib/authentik\n\necho \"Backup completed: $BACKUP_DIR/authentik-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop authentik\n\n# Restore from backup\ntar -xzf /backup/authentik/authentik-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start authentik\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u authentik -n 100\nsudo tail -f /var/log/authentik/authentik.log\n\n# Check configuration\nak --version\n\n# Check permissions\nls -la /etc/authentik\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9000/9443\n\n# Test connectivity\ntelnet localhost 9000/9443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep authentik)\n\n# Check disk I/O\niotop -p $(pgrep authentik)\n\n# Check connections\nss -an | grep 9000/9443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  authentik:\n    image: authentik:latest\n    ports:\n      - \"9000/9443:9000/9443\"\n    volumes:\n      - ./config:/etc/authentik\n      - ./data:/var/lib/authentik\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update authentik\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade authentik\n\n# Arch Linux\nsudo pacman -Syu authentik\n\n# Alpine Linux\napk update && apk upgrade authentik\n\n# openSUSE\nsudo zypper update authentik\n\n# FreeBSD\npkg update && pkg upgrade authentik\n\n# Always backup before updates\ntar -czf /backup/authentik-pre-update-$(date +%Y%m%d).tar.gz /etc/authentik\n\n# Restart after updates\nsudo systemctl restart authentik\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/authentik\n\n# Clean old logs\nfind /var/log/authentik -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/authentik\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.authentik.org/\n- GitHub Repository: https://github.com/authentik/authentik\n- Community Forum: https://forum.authentik.org/\n- Best Practices Guide: https://docs.authentik.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"authentik-installation-guide\" class=\"mobile-header\">authentik Installation Guide</h1>\n<p class=\"mobile-paragraph\">authentik is a free and open-source identity provider with flexible authentication. Authentik is a modern identity provider supporting SAML, OAuth2, and LDAP, serving as an alternative to Auth0, Okta, or Active Directory</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for application</li>\n<li class=\"mobile-list-item\">Network: HTTPS for authentication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9000/9443 (default authentik port)</li>\n<li class=\"mobile-list-item\">LDAP on 389/636</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install authentik\nsudo dnf install -y authentik\n\n# Enable and start service\nsudo systemctl enable --now authentik\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nak --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install authentik\nsudo apt install -y authentik\n\n# Enable and start service\nsudo systemctl enable --now authentik\n\n# Configure firewall\nsudo ufw allow 9000/9443\n\n# Verify installation\nak --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install authentik\nsudo pacman -S authentik\n\n# Enable and start service\nsudo systemctl enable --now authentik\n\n# Verify installation\nak --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install authentik\napk add --no-cache authentik\n\n# Enable and start service\nrc-update add authentik default\nrc-service authentik start\n\n# Verify installation\nak --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install authentik\nsudo zypper install -y authentik\n\n# Enable and start service\nsudo systemctl enable --now authentik\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nak --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install authentik\n\n# Start service\nbrew services start authentik\n\n# Verify installation\nak --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install authentik\n\n# Enable in rc.conf\necho &#039;authentik_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice authentik start\n\n# Verify installation\nak --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install authentik\n\n# Or using Scoop\nscoop install authentik\n\n# Verify installation\nak --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/authentik\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nak --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable authentik\n\n# Start service\nsudo systemctl start authentik\n\n# Stop service\nsudo systemctl stop authentik\n\n# Restart service\nsudo systemctl restart authentik\n\n# Check status\nsudo systemctl status authentik\n\n# View logs\nsudo journalctl -u authentik -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add authentik default\n\n# Start service\nrc-service authentik start\n\n# Stop service\nrc-service authentik stop\n\n# Restart service\nrc-service authentik restart\n\n# Check status\nrc-service authentik status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;authentik_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice authentik start\n\n# Stop service\nservice authentik stop\n\n# Restart service\nservice authentik restart\n\n# Check status\nservice authentik status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start authentik\nbrew services stop authentik\nbrew services restart authentik\n\n# Check status\nbrew services list | grep authentik</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start authentik\n\n# Stop service\nnet stop authentik\n\n# Using PowerShell\nStart-Service authentik\nStop-Service authentik\nRestart-Service authentik\n\n# Check status\nGet-Service authentik</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream authentik_backend {\n    server 127.0.0.1:9000/9443;\n}\n\nserver {\n    listen 80;\n    server_name authentik.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name authentik.example.com;\n\n    ssl_certificate /etc/ssl/certs/authentik.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/authentik.example.com.key;\n\n    location / {\n        proxy_pass http://authentik_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName authentik.example.com\n    Redirect permanent / https://authentik.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName authentik.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/authentik.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/authentik.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9000/9443/\n    ProxyPassReverse / http://127.0.0.1:9000/9443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend authentik_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/authentik.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend authentik_backend\n\nbackend authentik_backend\n    balance roundrobin\n    server authentik1 127.0.0.1:9000/9443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R authentik:authentik /etc/authentik\nsudo chmod 750 /etc/authentik\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/9443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status authentik\n\n# View logs\nsudo journalctl -u authentik -f\n\n# Monitor resource usage\ntop -p $(pgrep authentik)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/authentik&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/authentik-backup-$DATE.tar.gz&quot; /etc/authentik /var/lib/authentik\n\necho &quot;Backup completed: $BACKUP_DIR/authentik-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop authentik\n\n# Restore from backup\ntar -xzf /backup/authentik/authentik-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start authentik</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u authentik -n 100\nsudo tail -f /var/log/authentik/authentik.log\n\n# Check configuration\nak --version\n\n# Check permissions\nls -la /etc/authentik</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9000/9443\n\n# Test connectivity\ntelnet localhost 9000/9443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep authentik)\n\n# Check disk I/O\niotop -p $(pgrep authentik)\n\n# Check connections\nss -an | grep 9000/9443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  authentik:\n    image: authentik:latest\n    ports:\n      - &quot;9000/9443:9000/9443&quot;\n    volumes:\n      - ./config:/etc/authentik\n      - ./data:/var/lib/authentik\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update authentik\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade authentik\n\n# Arch Linux\nsudo pacman -Syu authentik\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade authentik\n\n# openSUSE\nsudo zypper update authentik\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade authentik\n\n# Always backup before updates\ntar -czf /backup/authentik-pre-update-$(date +%Y%m%d).tar.gz /etc/authentik\n\n# Restart after updates\nsudo systemctl restart authentik</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/authentik\n\n# Clean old logs\nfind /var/log/authentik -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/authentik</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.authentik.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/authentik/authentik</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.authentik.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.authentik.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1175,"lastBuilt":"2025-09-16T03:18:19.878Z","metadataVersion":"2.0"},{"name":"backuppc","displayName":"backuppc Installation Guide","slug":"backuppc","description":"backuppc is a free and open-source PC backup system. BackupPC provides high-performance enterprise backup system","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/backuppc","documentationUrl":"https://howtomgr.github.io/miscellaneous/backuppc","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/backuppc","updatedAt":"2025-09-16T02:57:37Z","createdAt":"2025-09-16T02:20:25Z","readmeRaw":"# backuppc Installation Guide\n\nbackuppc is a free and open-source PC backup system. BackupPC provides high-performance enterprise backup system\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 100GB for backups\n  - Network: SMB/rsync/tar\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default backuppc port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install backuppc\nsudo dnf install -y backuppc\n\n# Enable and start service\nsudo systemctl enable --now backuppc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbackuppc --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install backuppc\nsudo apt install -y backuppc\n\n# Enable and start service\nsudo systemctl enable --now backuppc\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nbackuppc --version\n```\n\n### Arch Linux\n\n```bash\n# Install backuppc\nsudo pacman -S backuppc\n\n# Enable and start service\nsudo systemctl enable --now backuppc\n\n# Verify installation\nbackuppc --version\n```\n\n### Alpine Linux\n\n```bash\n# Install backuppc\napk add --no-cache backuppc\n\n# Enable and start service\nrc-update add backuppc default\nrc-service backuppc start\n\n# Verify installation\nbackuppc --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install backuppc\nsudo zypper install -y backuppc\n\n# Enable and start service\nsudo systemctl enable --now backuppc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbackuppc --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install backuppc\n\n# Start service\nbrew services start backuppc\n\n# Verify installation\nbackuppc --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install backuppc\n\n# Enable in rc.conf\necho 'backuppc_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice backuppc start\n\n# Verify installation\nbackuppc --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install backuppc\n\n# Or using Scoop\nscoop install backuppc\n\n# Verify installation\nbackuppc --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/backuppc\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbackuppc --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable backuppc\n\n# Start service\nsudo systemctl start backuppc\n\n# Stop service\nsudo systemctl stop backuppc\n\n# Restart service\nsudo systemctl restart backuppc\n\n# Check status\nsudo systemctl status backuppc\n\n# View logs\nsudo journalctl -u backuppc -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add backuppc default\n\n# Start service\nrc-service backuppc start\n\n# Stop service\nrc-service backuppc stop\n\n# Restart service\nrc-service backuppc restart\n\n# Check status\nrc-service backuppc status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'backuppc_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice backuppc start\n\n# Stop service\nservice backuppc stop\n\n# Restart service\nservice backuppc restart\n\n# Check status\nservice backuppc status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start backuppc\nbrew services stop backuppc\nbrew services restart backuppc\n\n# Check status\nbrew services list | grep backuppc\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start backuppc\n\n# Stop service\nnet stop backuppc\n\n# Using PowerShell\nStart-Service backuppc\nStop-Service backuppc\nRestart-Service backuppc\n\n# Check status\nGet-Service backuppc\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream backuppc_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name backuppc.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name backuppc.example.com;\n\n    ssl_certificate /etc/ssl/certs/backuppc.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/backuppc.example.com.key;\n\n    location / {\n        proxy_pass http://backuppc_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName backuppc.example.com\n    Redirect permanent / https://backuppc.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName backuppc.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/backuppc.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/backuppc.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend backuppc_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/backuppc.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend backuppc_backend\n\nbackend backuppc_backend\n    balance roundrobin\n    server backuppc1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R backuppc:backuppc /etc/backuppc\nsudo chmod 750 /etc/backuppc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status backuppc\n\n# View logs\nsudo journalctl -u backuppc -f\n\n# Monitor resource usage\ntop -p $(pgrep backuppc)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/backuppc\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/backuppc-backup-$DATE.tar.gz\" /etc/backuppc /var/lib/backuppc\n\necho \"Backup completed: $BACKUP_DIR/backuppc-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop backuppc\n\n# Restore from backup\ntar -xzf /backup/backuppc/backuppc-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start backuppc\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u backuppc -n 100\nsudo tail -f /var/log/backuppc/backuppc.log\n\n# Check configuration\nbackuppc --version\n\n# Check permissions\nls -la /etc/backuppc\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep backuppc)\n\n# Check disk I/O\niotop -p $(pgrep backuppc)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  backuppc:\n    image: backuppc:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/backuppc\n      - ./data:/var/lib/backuppc\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update backuppc\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade backuppc\n\n# Arch Linux\nsudo pacman -Syu backuppc\n\n# Alpine Linux\napk update && apk upgrade backuppc\n\n# openSUSE\nsudo zypper update backuppc\n\n# FreeBSD\npkg update && pkg upgrade backuppc\n\n# Always backup before updates\ntar -czf /backup/backuppc-pre-update-$(date +%Y%m%d).tar.gz /etc/backuppc\n\n# Restart after updates\nsudo systemctl restart backuppc\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/backuppc\n\n# Clean old logs\nfind /var/log/backuppc -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/backuppc\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.backuppc.org/\n- GitHub Repository: https://github.com/backuppc/backuppc\n- Community Forum: https://forum.backuppc.org/\n- Best Practices Guide: https://docs.backuppc.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"backuppc-installation-guide\" class=\"mobile-header\">backuppc Installation Guide</h1>\n<p class=\"mobile-paragraph\">backuppc is a free and open-source PC backup system. BackupPC provides high-performance enterprise backup system</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100GB for backups</li>\n<li class=\"mobile-list-item\">Network: SMB/rsync/tar</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default backuppc port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install backuppc\nsudo dnf install -y backuppc\n\n# Enable and start service\nsudo systemctl enable --now backuppc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install backuppc\nsudo apt install -y backuppc\n\n# Enable and start service\nsudo systemctl enable --now backuppc\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install backuppc\nsudo pacman -S backuppc\n\n# Enable and start service\nsudo systemctl enable --now backuppc\n\n# Verify installation\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install backuppc\napk add --no-cache backuppc\n\n# Enable and start service\nrc-update add backuppc default\nrc-service backuppc start\n\n# Verify installation\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install backuppc\nsudo zypper install -y backuppc\n\n# Enable and start service\nsudo systemctl enable --now backuppc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install backuppc\n\n# Start service\nbrew services start backuppc\n\n# Verify installation\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install backuppc\n\n# Enable in rc.conf\necho &#039;backuppc_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice backuppc start\n\n# Verify installation\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install backuppc\n\n# Or using Scoop\nscoop install backuppc\n\n# Verify installation\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/backuppc\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbackuppc --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable backuppc\n\n# Start service\nsudo systemctl start backuppc\n\n# Stop service\nsudo systemctl stop backuppc\n\n# Restart service\nsudo systemctl restart backuppc\n\n# Check status\nsudo systemctl status backuppc\n\n# View logs\nsudo journalctl -u backuppc -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add backuppc default\n\n# Start service\nrc-service backuppc start\n\n# Stop service\nrc-service backuppc stop\n\n# Restart service\nrc-service backuppc restart\n\n# Check status\nrc-service backuppc status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;backuppc_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice backuppc start\n\n# Stop service\nservice backuppc stop\n\n# Restart service\nservice backuppc restart\n\n# Check status\nservice backuppc status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start backuppc\nbrew services stop backuppc\nbrew services restart backuppc\n\n# Check status\nbrew services list | grep backuppc</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start backuppc\n\n# Stop service\nnet stop backuppc\n\n# Using PowerShell\nStart-Service backuppc\nStop-Service backuppc\nRestart-Service backuppc\n\n# Check status\nGet-Service backuppc</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream backuppc_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name backuppc.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name backuppc.example.com;\n\n    ssl_certificate /etc/ssl/certs/backuppc.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/backuppc.example.com.key;\n\n    location / {\n        proxy_pass http://backuppc_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName backuppc.example.com\n    Redirect permanent / https://backuppc.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName backuppc.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/backuppc.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/backuppc.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend backuppc_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/backuppc.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend backuppc_backend\n\nbackend backuppc_backend\n    balance roundrobin\n    server backuppc1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R backuppc:backuppc /etc/backuppc\nsudo chmod 750 /etc/backuppc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status backuppc\n\n# View logs\nsudo journalctl -u backuppc -f\n\n# Monitor resource usage\ntop -p $(pgrep backuppc)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/backuppc&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/backuppc-backup-$DATE.tar.gz&quot; /etc/backuppc /var/lib/backuppc\n\necho &quot;Backup completed: $BACKUP_DIR/backuppc-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop backuppc\n\n# Restore from backup\ntar -xzf /backup/backuppc/backuppc-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start backuppc</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u backuppc -n 100\nsudo tail -f /var/log/backuppc/backuppc.log\n\n# Check configuration\nbackuppc --version\n\n# Check permissions\nls -la /etc/backuppc</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep backuppc)\n\n# Check disk I/O\niotop -p $(pgrep backuppc)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  backuppc:\n    image: backuppc:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/backuppc\n      - ./data:/var/lib/backuppc\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update backuppc\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade backuppc\n\n# Arch Linux\nsudo pacman -Syu backuppc\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade backuppc\n\n# openSUSE\nsudo zypper update backuppc\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade backuppc\n\n# Always backup before updates\ntar -czf /backup/backuppc-pre-update-$(date +%Y%m%d).tar.gz /etc/backuppc\n\n# Restart after updates\nsudo systemctl restart backuppc</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/backuppc\n\n# Clean old logs\nfind /var/log/backuppc -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/backuppc</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.backuppc.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/backuppc/backuppc</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.backuppc.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.backuppc.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1151,"lastBuilt":"2025-09-16T03:18:19.241Z","metadataVersion":"2.0"},{"name":"bareos","displayName":"bareos Installation Guide","slug":"bareos","description":"bareos is a free and open-source backup archiving recovery. Fork of Bacula, Bareos provides reliable backup and recovery","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9101],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/bareos","documentationUrl":"https://howtomgr.github.io/miscellaneous/bareos","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bareos","updatedAt":"2025-09-16T02:58:06Z","createdAt":"2025-09-16T02:21:03Z","readmeRaw":"# bareos Installation Guide\n\nbareos is a free and open-source backup archiving recovery. Fork of Bacula, Bareos provides reliable backup and recovery\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 100GB for backups\n  - Network: Network backup\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9101 (default bareos port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bareos\nsudo dnf install -y bareos\n\n# Enable and start service\nsudo systemctl enable --now bareos\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbareos --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bareos\nsudo apt install -y bareos\n\n# Enable and start service\nsudo systemctl enable --now bareos\n\n# Configure firewall\nsudo ufw allow 9101\n\n# Verify installation\nbareos --version\n```\n\n### Arch Linux\n\n```bash\n# Install bareos\nsudo pacman -S bareos\n\n# Enable and start service\nsudo systemctl enable --now bareos\n\n# Verify installation\nbareos --version\n```\n\n### Alpine Linux\n\n```bash\n# Install bareos\napk add --no-cache bareos\n\n# Enable and start service\nrc-update add bareos default\nrc-service bareos start\n\n# Verify installation\nbareos --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bareos\nsudo zypper install -y bareos\n\n# Enable and start service\nsudo systemctl enable --now bareos\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbareos --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bareos\n\n# Start service\nbrew services start bareos\n\n# Verify installation\nbareos --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bareos\n\n# Enable in rc.conf\necho 'bareos_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bareos start\n\n# Verify installation\nbareos --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install bareos\n\n# Or using Scoop\nscoop install bareos\n\n# Verify installation\nbareos --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/bareos\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbareos --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable bareos\n\n# Start service\nsudo systemctl start bareos\n\n# Stop service\nsudo systemctl stop bareos\n\n# Restart service\nsudo systemctl restart bareos\n\n# Check status\nsudo systemctl status bareos\n\n# View logs\nsudo journalctl -u bareos -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add bareos default\n\n# Start service\nrc-service bareos start\n\n# Stop service\nrc-service bareos stop\n\n# Restart service\nrc-service bareos restart\n\n# Check status\nrc-service bareos status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'bareos_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bareos start\n\n# Stop service\nservice bareos stop\n\n# Restart service\nservice bareos restart\n\n# Check status\nservice bareos status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bareos\nbrew services stop bareos\nbrew services restart bareos\n\n# Check status\nbrew services list | grep bareos\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start bareos\n\n# Stop service\nnet stop bareos\n\n# Using PowerShell\nStart-Service bareos\nStop-Service bareos\nRestart-Service bareos\n\n# Check status\nGet-Service bareos\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bareos_backend {\n    server 127.0.0.1:9101;\n}\n\nserver {\n    listen 80;\n    server_name bareos.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bareos.example.com;\n\n    ssl_certificate /etc/ssl/certs/bareos.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bareos.example.com.key;\n\n    location / {\n        proxy_pass http://bareos_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bareos.example.com\n    Redirect permanent / https://bareos.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bareos.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bareos.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bareos.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9101/\n    ProxyPassReverse / http://127.0.0.1:9101/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bareos_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bareos.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bareos_backend\n\nbackend bareos_backend\n    balance roundrobin\n    server bareos1 127.0.0.1:9101 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bareos:bareos /etc/bareos\nsudo chmod 750 /etc/bareos\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status bareos\n\n# View logs\nsudo journalctl -u bareos -f\n\n# Monitor resource usage\ntop -p $(pgrep bareos)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/bareos\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/bareos-backup-$DATE.tar.gz\" /etc/bareos /var/lib/bareos\n\necho \"Backup completed: $BACKUP_DIR/bareos-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop bareos\n\n# Restore from backup\ntar -xzf /backup/bareos/bareos-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bareos\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u bareos -n 100\nsudo tail -f /var/log/bareos/bareos.log\n\n# Check configuration\nbareos --version\n\n# Check permissions\nls -la /etc/bareos\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9101\n\n# Test connectivity\ntelnet localhost 9101\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep bareos)\n\n# Check disk I/O\niotop -p $(pgrep bareos)\n\n# Check connections\nss -an | grep 9101\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  bareos:\n    image: bareos:latest\n    ports:\n      - \"9101:9101\"\n    volumes:\n      - ./config:/etc/bareos\n      - ./data:/var/lib/bareos\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bareos\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bareos\n\n# Arch Linux\nsudo pacman -Syu bareos\n\n# Alpine Linux\napk update && apk upgrade bareos\n\n# openSUSE\nsudo zypper update bareos\n\n# FreeBSD\npkg update && pkg upgrade bareos\n\n# Always backup before updates\ntar -czf /backup/bareos-pre-update-$(date +%Y%m%d).tar.gz /etc/bareos\n\n# Restart after updates\nsudo systemctl restart bareos\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/bareos\n\n# Clean old logs\nfind /var/log/bareos -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bareos\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bareos.org/\n- GitHub Repository: https://github.com/bareos/bareos\n- Community Forum: https://forum.bareos.org/\n- Best Practices Guide: https://docs.bareos.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"bareos-installation-guide\" class=\"mobile-header\">bareos Installation Guide</h1>\n<p class=\"mobile-paragraph\">bareos is a free and open-source backup archiving recovery. Fork of Bacula, Bareos provides reliable backup and recovery</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100GB for backups</li>\n<li class=\"mobile-list-item\">Network: Network backup</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9101 (default bareos port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bareos\nsudo dnf install -y bareos\n\n# Enable and start service\nsudo systemctl enable --now bareos\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbareos --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bareos\nsudo apt install -y bareos\n\n# Enable and start service\nsudo systemctl enable --now bareos\n\n# Configure firewall\nsudo ufw allow 9101\n\n# Verify installation\nbareos --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bareos\nsudo pacman -S bareos\n\n# Enable and start service\nsudo systemctl enable --now bareos\n\n# Verify installation\nbareos --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bareos\napk add --no-cache bareos\n\n# Enable and start service\nrc-update add bareos default\nrc-service bareos start\n\n# Verify installation\nbareos --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bareos\nsudo zypper install -y bareos\n\n# Enable and start service\nsudo systemctl enable --now bareos\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbareos --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bareos\n\n# Start service\nbrew services start bareos\n\n# Verify installation\nbareos --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bareos\n\n# Enable in rc.conf\necho &#039;bareos_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bareos start\n\n# Verify installation\nbareos --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install bareos\n\n# Or using Scoop\nscoop install bareos\n\n# Verify installation\nbareos --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/bareos\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbareos --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable bareos\n\n# Start service\nsudo systemctl start bareos\n\n# Stop service\nsudo systemctl stop bareos\n\n# Restart service\nsudo systemctl restart bareos\n\n# Check status\nsudo systemctl status bareos\n\n# View logs\nsudo journalctl -u bareos -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add bareos default\n\n# Start service\nrc-service bareos start\n\n# Stop service\nrc-service bareos stop\n\n# Restart service\nrc-service bareos restart\n\n# Check status\nrc-service bareos status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;bareos_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bareos start\n\n# Stop service\nservice bareos stop\n\n# Restart service\nservice bareos restart\n\n# Check status\nservice bareos status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bareos\nbrew services stop bareos\nbrew services restart bareos\n\n# Check status\nbrew services list | grep bareos</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start bareos\n\n# Stop service\nnet stop bareos\n\n# Using PowerShell\nStart-Service bareos\nStop-Service bareos\nRestart-Service bareos\n\n# Check status\nGet-Service bareos</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bareos_backend {\n    server 127.0.0.1:9101;\n}\n\nserver {\n    listen 80;\n    server_name bareos.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bareos.example.com;\n\n    ssl_certificate /etc/ssl/certs/bareos.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bareos.example.com.key;\n\n    location / {\n        proxy_pass http://bareos_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bareos.example.com\n    Redirect permanent / https://bareos.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bareos.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bareos.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bareos.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9101/\n    ProxyPassReverse / http://127.0.0.1:9101/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bareos_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bareos.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bareos_backend\n\nbackend bareos_backend\n    balance roundrobin\n    server bareos1 127.0.0.1:9101 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bareos:bareos /etc/bareos\nsudo chmod 750 /etc/bareos\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status bareos\n\n# View logs\nsudo journalctl -u bareos -f\n\n# Monitor resource usage\ntop -p $(pgrep bareos)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/bareos&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/bareos-backup-$DATE.tar.gz&quot; /etc/bareos /var/lib/bareos\n\necho &quot;Backup completed: $BACKUP_DIR/bareos-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop bareos\n\n# Restore from backup\ntar -xzf /backup/bareos/bareos-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bareos</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u bareos -n 100\nsudo tail -f /var/log/bareos/bareos.log\n\n# Check configuration\nbareos --version\n\n# Check permissions\nls -la /etc/bareos</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9101\n\n# Test connectivity\ntelnet localhost 9101\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep bareos)\n\n# Check disk I/O\niotop -p $(pgrep bareos)\n\n# Check connections\nss -an | grep 9101</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bareos:\n    image: bareos:latest\n    ports:\n      - &quot;9101:9101&quot;\n    volumes:\n      - ./config:/etc/bareos\n      - ./data:/var/lib/bareos\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bareos\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bareos\n\n# Arch Linux\nsudo pacman -Syu bareos\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bareos\n\n# openSUSE\nsudo zypper update bareos\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bareos\n\n# Always backup before updates\ntar -czf /backup/bareos-pre-update-$(date +%Y%m%d).tar.gz /etc/bareos\n\n# Restart after updates\nsudo systemctl restart bareos</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/bareos\n\n# Clean old logs\nfind /var/log/bareos -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bareos</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bareos.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bareos/bareos</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bareos.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.bareos.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1157,"lastBuilt":"2025-09-16T03:18:17.931Z","metadataVersion":"2.0"},{"name":"bazarr","displayName":"bazarr Installation Guide","slug":"bazarr","description":"bazarr is a free and open-source subtitle management. Bazarr automates subtitle downloading for Sonarr and Radarr, supporting multiple languages","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,6767],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/bazarr","documentationUrl":"https://howtomgr.github.io/miscellaneous/bazarr","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bazarr","updatedAt":"2025-09-16T02:58:13Z","createdAt":"2025-09-16T02:21:13Z","readmeRaw":"# bazarr Installation Guide\n\nbazarr is a free and open-source subtitle management. Bazarr automates subtitle downloading for Sonarr and Radarr, supporting multiple languages\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 500MB for app\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 6767 (default bazarr port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bazarr\nsudo dnf install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbazarr --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bazarr\nsudo apt install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo ufw allow 6767\n\n# Verify installation\nbazarr --version\n```\n\n### Arch Linux\n\n```bash\n# Install bazarr\nsudo pacman -S bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Verify installation\nbazarr --version\n```\n\n### Alpine Linux\n\n```bash\n# Install bazarr\napk add --no-cache bazarr\n\n# Enable and start service\nrc-update add bazarr default\nrc-service bazarr start\n\n# Verify installation\nbazarr --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bazarr\nsudo zypper install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbazarr --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bazarr\n\n# Start service\nbrew services start bazarr\n\n# Verify installation\nbazarr --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bazarr\n\n# Enable in rc.conf\necho 'bazarr_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bazarr start\n\n# Verify installation\nbazarr --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install bazarr\n\n# Or using Scoop\nscoop install bazarr\n\n# Verify installation\nbazarr --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/bazarr\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbazarr --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable bazarr\n\n# Start service\nsudo systemctl start bazarr\n\n# Stop service\nsudo systemctl stop bazarr\n\n# Restart service\nsudo systemctl restart bazarr\n\n# Check status\nsudo systemctl status bazarr\n\n# View logs\nsudo journalctl -u bazarr -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add bazarr default\n\n# Start service\nrc-service bazarr start\n\n# Stop service\nrc-service bazarr stop\n\n# Restart service\nrc-service bazarr restart\n\n# Check status\nrc-service bazarr status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'bazarr_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bazarr start\n\n# Stop service\nservice bazarr stop\n\n# Restart service\nservice bazarr restart\n\n# Check status\nservice bazarr status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bazarr\nbrew services stop bazarr\nbrew services restart bazarr\n\n# Check status\nbrew services list | grep bazarr\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start bazarr\n\n# Stop service\nnet stop bazarr\n\n# Using PowerShell\nStart-Service bazarr\nStop-Service bazarr\nRestart-Service bazarr\n\n# Check status\nGet-Service bazarr\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bazarr_backend {\n    server 127.0.0.1:6767;\n}\n\nserver {\n    listen 80;\n    server_name bazarr.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bazarr.example.com;\n\n    ssl_certificate /etc/ssl/certs/bazarr.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bazarr.example.com.key;\n\n    location / {\n        proxy_pass http://bazarr_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bazarr.example.com\n    Redirect permanent / https://bazarr.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bazarr.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bazarr.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bazarr.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6767/\n    ProxyPassReverse / http://127.0.0.1:6767/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bazarr_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bazarr.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bazarr_backend\n\nbackend bazarr_backend\n    balance roundrobin\n    server bazarr1 127.0.0.1:6767 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bazarr:bazarr /etc/bazarr\nsudo chmod 750 /etc/bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status bazarr\n\n# View logs\nsudo journalctl -u bazarr -f\n\n# Monitor resource usage\ntop -p $(pgrep bazarr)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/bazarr\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/bazarr-backup-$DATE.tar.gz\" /etc/bazarr /var/lib/bazarr\n\necho \"Backup completed: $BACKUP_DIR/bazarr-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop bazarr\n\n# Restore from backup\ntar -xzf /backup/bazarr/bazarr-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bazarr\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u bazarr -n 100\nsudo tail -f /var/log/bazarr/bazarr.log\n\n# Check configuration\nbazarr --version\n\n# Check permissions\nls -la /etc/bazarr\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 6767\n\n# Test connectivity\ntelnet localhost 6767\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep bazarr)\n\n# Check disk I/O\niotop -p $(pgrep bazarr)\n\n# Check connections\nss -an | grep 6767\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  bazarr:\n    image: bazarr:latest\n    ports:\n      - \"6767:6767\"\n    volumes:\n      - ./config:/etc/bazarr\n      - ./data:/var/lib/bazarr\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bazarr\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bazarr\n\n# Arch Linux\nsudo pacman -Syu bazarr\n\n# Alpine Linux\napk update && apk upgrade bazarr\n\n# openSUSE\nsudo zypper update bazarr\n\n# FreeBSD\npkg update && pkg upgrade bazarr\n\n# Always backup before updates\ntar -czf /backup/bazarr-pre-update-$(date +%Y%m%d).tar.gz /etc/bazarr\n\n# Restart after updates\nsudo systemctl restart bazarr\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/bazarr\n\n# Clean old logs\nfind /var/log/bazarr -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bazarr\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bazarr.org/\n- GitHub Repository: https://github.com/bazarr/bazarr\n- Community Forum: https://forum.bazarr.org/\n- Best Practices Guide: https://docs.bazarr.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"bazarr-installation-guide\" class=\"mobile-header\">bazarr Installation Guide</h1>\n<p class=\"mobile-paragraph\">bazarr is a free and open-source subtitle management. Bazarr automates subtitle downloading for Sonarr and Radarr, supporting multiple languages</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for app</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 6767 (default bazarr port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bazarr\nsudo dnf install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bazarr\nsudo apt install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo ufw allow 6767\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bazarr\nsudo pacman -S bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bazarr\napk add --no-cache bazarr\n\n# Enable and start service\nrc-update add bazarr default\nrc-service bazarr start\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bazarr\nsudo zypper install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bazarr\n\n# Start service\nbrew services start bazarr\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bazarr\n\n# Enable in rc.conf\necho &#039;bazarr_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bazarr start\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install bazarr\n\n# Or using Scoop\nscoop install bazarr\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/bazarr\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable bazarr\n\n# Start service\nsudo systemctl start bazarr\n\n# Stop service\nsudo systemctl stop bazarr\n\n# Restart service\nsudo systemctl restart bazarr\n\n# Check status\nsudo systemctl status bazarr\n\n# View logs\nsudo journalctl -u bazarr -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add bazarr default\n\n# Start service\nrc-service bazarr start\n\n# Stop service\nrc-service bazarr stop\n\n# Restart service\nrc-service bazarr restart\n\n# Check status\nrc-service bazarr status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;bazarr_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bazarr start\n\n# Stop service\nservice bazarr stop\n\n# Restart service\nservice bazarr restart\n\n# Check status\nservice bazarr status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bazarr\nbrew services stop bazarr\nbrew services restart bazarr\n\n# Check status\nbrew services list | grep bazarr</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start bazarr\n\n# Stop service\nnet stop bazarr\n\n# Using PowerShell\nStart-Service bazarr\nStop-Service bazarr\nRestart-Service bazarr\n\n# Check status\nGet-Service bazarr</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bazarr_backend {\n    server 127.0.0.1:6767;\n}\n\nserver {\n    listen 80;\n    server_name bazarr.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bazarr.example.com;\n\n    ssl_certificate /etc/ssl/certs/bazarr.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bazarr.example.com.key;\n\n    location / {\n        proxy_pass http://bazarr_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bazarr.example.com\n    Redirect permanent / https://bazarr.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bazarr.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bazarr.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bazarr.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6767/\n    ProxyPassReverse / http://127.0.0.1:6767/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bazarr_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bazarr.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bazarr_backend\n\nbackend bazarr_backend\n    balance roundrobin\n    server bazarr1 127.0.0.1:6767 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bazarr:bazarr /etc/bazarr\nsudo chmod 750 /etc/bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status bazarr\n\n# View logs\nsudo journalctl -u bazarr -f\n\n# Monitor resource usage\ntop -p $(pgrep bazarr)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/bazarr&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/bazarr-backup-$DATE.tar.gz&quot; /etc/bazarr /var/lib/bazarr\n\necho &quot;Backup completed: $BACKUP_DIR/bazarr-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop bazarr\n\n# Restore from backup\ntar -xzf /backup/bazarr/bazarr-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bazarr</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u bazarr -n 100\nsudo tail -f /var/log/bazarr/bazarr.log\n\n# Check configuration\nbazarr --version\n\n# Check permissions\nls -la /etc/bazarr</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 6767\n\n# Test connectivity\ntelnet localhost 6767\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep bazarr)\n\n# Check disk I/O\niotop -p $(pgrep bazarr)\n\n# Check connections\nss -an | grep 6767</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bazarr:\n    image: bazarr:latest\n    ports:\n      - &quot;6767:6767&quot;\n    volumes:\n      - ./config:/etc/bazarr\n      - ./data:/var/lib/bazarr\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bazarr\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bazarr\n\n# Arch Linux\nsudo pacman -Syu bazarr\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bazarr\n\n# openSUSE\nsudo zypper update bazarr\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bazarr\n\n# Always backup before updates\ntar -czf /backup/bazarr-pre-update-$(date +%Y%m%d).tar.gz /etc/bazarr\n\n# Restart after updates\nsudo systemctl restart bazarr</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/bazarr\n\n# Clean old logs\nfind /var/log/bazarr -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bazarr</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bazarr.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bazarr/bazarr</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bazarr.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.bazarr.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1157,"lastBuilt":"2025-09-16T03:18:17.351Z","metadataVersion":"2.0"},{"name":"beets","displayName":"beets Installation Guide","slug":"beets","description":"beets is a free and open-source music library manager. Beets helps organize music collections with automatic tagging and format conversion","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/beets","documentationUrl":"https://howtomgr.github.io/miscellaneous/beets","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/beets","updatedAt":"2025-09-16T02:58:36Z","createdAt":"2025-09-16T02:21:41Z","readmeRaw":"# beets Installation Guide\n\nbeets is a free and open-source music library manager. Beets helps organize music collections with automatic tagging and format conversion\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for app\n  - Network: MusicBrainz access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default beets port)\n  - Web UI on 8337\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install beets\nsudo dnf install -y beets\n\n# Enable and start service\nsudo systemctl enable --now beets\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbeet version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install beets\nsudo apt install -y beets\n\n# Enable and start service\nsudo systemctl enable --now beets\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nbeet version\n```\n\n### Arch Linux\n\n```bash\n# Install beets\nsudo pacman -S beets\n\n# Enable and start service\nsudo systemctl enable --now beets\n\n# Verify installation\nbeet version\n```\n\n### Alpine Linux\n\n```bash\n# Install beets\napk add --no-cache beets\n\n# Enable and start service\nrc-update add beets default\nrc-service beets start\n\n# Verify installation\nbeet version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install beets\nsudo zypper install -y beets\n\n# Enable and start service\nsudo systemctl enable --now beets\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbeet version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install beets\n\n# Start service\nbrew services start beets\n\n# Verify installation\nbeet version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install beets\n\n# Enable in rc.conf\necho 'beets_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice beets start\n\n# Verify installation\nbeet version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install beets\n\n# Or using Scoop\nscoop install beets\n\n# Verify installation\nbeet version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/beets\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbeet version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable beets\n\n# Start service\nsudo systemctl start beets\n\n# Stop service\nsudo systemctl stop beets\n\n# Restart service\nsudo systemctl restart beets\n\n# Check status\nsudo systemctl status beets\n\n# View logs\nsudo journalctl -u beets -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add beets default\n\n# Start service\nrc-service beets start\n\n# Stop service\nrc-service beets stop\n\n# Restart service\nrc-service beets restart\n\n# Check status\nrc-service beets status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'beets_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice beets start\n\n# Stop service\nservice beets stop\n\n# Restart service\nservice beets restart\n\n# Check status\nservice beets status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start beets\nbrew services stop beets\nbrew services restart beets\n\n# Check status\nbrew services list | grep beets\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start beets\n\n# Stop service\nnet stop beets\n\n# Using PowerShell\nStart-Service beets\nStop-Service beets\nRestart-Service beets\n\n# Check status\nGet-Service beets\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream beets_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name beets.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name beets.example.com;\n\n    ssl_certificate /etc/ssl/certs/beets.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/beets.example.com.key;\n\n    location / {\n        proxy_pass http://beets_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName beets.example.com\n    Redirect permanent / https://beets.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName beets.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/beets.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/beets.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend beets_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/beets.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend beets_backend\n\nbackend beets_backend\n    balance roundrobin\n    server beets1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R beets:beets /etc/beets\nsudo chmod 750 /etc/beets\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status beets\n\n# View logs\nsudo journalctl -u beets -f\n\n# Monitor resource usage\ntop -p $(pgrep beets)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/beets\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/beets-backup-$DATE.tar.gz\" /etc/beets /var/lib/beets\n\necho \"Backup completed: $BACKUP_DIR/beets-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop beets\n\n# Restore from backup\ntar -xzf /backup/beets/beets-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start beets\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u beets -n 100\nsudo tail -f /var/log/beets/beets.log\n\n# Check configuration\nbeet version\n\n# Check permissions\nls -la /etc/beets\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep beets)\n\n# Check disk I/O\niotop -p $(pgrep beets)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  beets:\n    image: beets:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/beets\n      - ./data:/var/lib/beets\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update beets\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade beets\n\n# Arch Linux\nsudo pacman -Syu beets\n\n# Alpine Linux\napk update && apk upgrade beets\n\n# openSUSE\nsudo zypper update beets\n\n# FreeBSD\npkg update && pkg upgrade beets\n\n# Always backup before updates\ntar -czf /backup/beets-pre-update-$(date +%Y%m%d).tar.gz /etc/beets\n\n# Restart after updates\nsudo systemctl restart beets\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/beets\n\n# Clean old logs\nfind /var/log/beets -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/beets\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.beets.org/\n- GitHub Repository: https://github.com/beets/beets\n- Community Forum: https://forum.beets.org/\n- Best Practices Guide: https://docs.beets.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"beets-installation-guide\" class=\"mobile-header\">beets Installation Guide</h1>\n<p class=\"mobile-paragraph\">beets is a free and open-source music library manager. Beets helps organize music collections with automatic tagging and format conversion</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for app</li>\n<li class=\"mobile-list-item\">Network: MusicBrainz access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default beets port)</li>\n<li class=\"mobile-list-item\">Web UI on 8337</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install beets\nsudo dnf install -y beets\n\n# Enable and start service\nsudo systemctl enable --now beets\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbeet version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install beets\nsudo apt install -y beets\n\n# Enable and start service\nsudo systemctl enable --now beets\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nbeet version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install beets\nsudo pacman -S beets\n\n# Enable and start service\nsudo systemctl enable --now beets\n\n# Verify installation\nbeet version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install beets\napk add --no-cache beets\n\n# Enable and start service\nrc-update add beets default\nrc-service beets start\n\n# Verify installation\nbeet version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install beets\nsudo zypper install -y beets\n\n# Enable and start service\nsudo systemctl enable --now beets\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbeet version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install beets\n\n# Start service\nbrew services start beets\n\n# Verify installation\nbeet version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install beets\n\n# Enable in rc.conf\necho &#039;beets_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice beets start\n\n# Verify installation\nbeet version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install beets\n\n# Or using Scoop\nscoop install beets\n\n# Verify installation\nbeet version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/beets\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbeet version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable beets\n\n# Start service\nsudo systemctl start beets\n\n# Stop service\nsudo systemctl stop beets\n\n# Restart service\nsudo systemctl restart beets\n\n# Check status\nsudo systemctl status beets\n\n# View logs\nsudo journalctl -u beets -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add beets default\n\n# Start service\nrc-service beets start\n\n# Stop service\nrc-service beets stop\n\n# Restart service\nrc-service beets restart\n\n# Check status\nrc-service beets status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;beets_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice beets start\n\n# Stop service\nservice beets stop\n\n# Restart service\nservice beets restart\n\n# Check status\nservice beets status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start beets\nbrew services stop beets\nbrew services restart beets\n\n# Check status\nbrew services list | grep beets</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start beets\n\n# Stop service\nnet stop beets\n\n# Using PowerShell\nStart-Service beets\nStop-Service beets\nRestart-Service beets\n\n# Check status\nGet-Service beets</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream beets_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name beets.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name beets.example.com;\n\n    ssl_certificate /etc/ssl/certs/beets.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/beets.example.com.key;\n\n    location / {\n        proxy_pass http://beets_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName beets.example.com\n    Redirect permanent / https://beets.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName beets.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/beets.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/beets.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend beets_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/beets.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend beets_backend\n\nbackend beets_backend\n    balance roundrobin\n    server beets1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R beets:beets /etc/beets\nsudo chmod 750 /etc/beets\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status beets\n\n# View logs\nsudo journalctl -u beets -f\n\n# Monitor resource usage\ntop -p $(pgrep beets)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/beets&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/beets-backup-$DATE.tar.gz&quot; /etc/beets /var/lib/beets\n\necho &quot;Backup completed: $BACKUP_DIR/beets-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop beets\n\n# Restore from backup\ntar -xzf /backup/beets/beets-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start beets</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u beets -n 100\nsudo tail -f /var/log/beets/beets.log\n\n# Check configuration\nbeet version\n\n# Check permissions\nls -la /etc/beets</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep beets)\n\n# Check disk I/O\niotop -p $(pgrep beets)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  beets:\n    image: beets:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/beets\n      - ./data:/var/lib/beets\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update beets\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade beets\n\n# Arch Linux\nsudo pacman -Syu beets\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade beets\n\n# openSUSE\nsudo zypper update beets\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade beets\n\n# Always backup before updates\ntar -czf /backup/beets-pre-update-$(date +%Y%m%d).tar.gz /etc/beets\n\n# Restart after updates\nsudo systemctl restart beets</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/beets\n\n# Clean old logs\nfind /var/log/beets -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/beets</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.beets.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/beets/beets</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.beets.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.beets.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1161,"lastBuilt":"2025-09-16T03:18:16.344Z","metadataVersion":"2.0"},{"name":"bigbluebutton","displayName":"bigbluebutton Installation Guide","slug":"bigbluebutton","description":"bigbluebutton is a free and open-source web conferencing. BigBlueButton provides open source web conferencing for online learning","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/bigbluebutton","documentationUrl":"https://howtomgr.github.io/miscellaneous/bigbluebutton","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bigbluebutton","updatedAt":"2025-09-16T02:58:44Z","createdAt":"2025-09-16T02:21:50Z","readmeRaw":"# bigbluebutton Installation Guide\n\nbigbluebutton is a free and open-source web conferencing. BigBlueButton provides open source web conferencing for online learning\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 8+ cores\n  - RAM: 16GB minimum\n  - Storage: 50GB for recordings\n  - Network: HTTP/WebRTC\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default bigbluebutton port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bigbluebutton\nsudo dnf install -y bigbluebutton\n\n# Enable and start service\nsudo systemctl enable --now bigbluebutton\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbigbluebutton --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bigbluebutton\nsudo apt install -y bigbluebutton\n\n# Enable and start service\nsudo systemctl enable --now bigbluebutton\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nbigbluebutton --version\n```\n\n### Arch Linux\n\n```bash\n# Install bigbluebutton\nsudo pacman -S bigbluebutton\n\n# Enable and start service\nsudo systemctl enable --now bigbluebutton\n\n# Verify installation\nbigbluebutton --version\n```\n\n### Alpine Linux\n\n```bash\n# Install bigbluebutton\napk add --no-cache bigbluebutton\n\n# Enable and start service\nrc-update add bigbluebutton default\nrc-service bigbluebutton start\n\n# Verify installation\nbigbluebutton --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bigbluebutton\nsudo zypper install -y bigbluebutton\n\n# Enable and start service\nsudo systemctl enable --now bigbluebutton\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbigbluebutton --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bigbluebutton\n\n# Start service\nbrew services start bigbluebutton\n\n# Verify installation\nbigbluebutton --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bigbluebutton\n\n# Enable in rc.conf\necho 'bigbluebutton_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bigbluebutton start\n\n# Verify installation\nbigbluebutton --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install bigbluebutton\n\n# Or using Scoop\nscoop install bigbluebutton\n\n# Verify installation\nbigbluebutton --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/bigbluebutton\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbigbluebutton --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable bigbluebutton\n\n# Start service\nsudo systemctl start bigbluebutton\n\n# Stop service\nsudo systemctl stop bigbluebutton\n\n# Restart service\nsudo systemctl restart bigbluebutton\n\n# Check status\nsudo systemctl status bigbluebutton\n\n# View logs\nsudo journalctl -u bigbluebutton -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add bigbluebutton default\n\n# Start service\nrc-service bigbluebutton start\n\n# Stop service\nrc-service bigbluebutton stop\n\n# Restart service\nrc-service bigbluebutton restart\n\n# Check status\nrc-service bigbluebutton status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'bigbluebutton_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bigbluebutton start\n\n# Stop service\nservice bigbluebutton stop\n\n# Restart service\nservice bigbluebutton restart\n\n# Check status\nservice bigbluebutton status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bigbluebutton\nbrew services stop bigbluebutton\nbrew services restart bigbluebutton\n\n# Check status\nbrew services list | grep bigbluebutton\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start bigbluebutton\n\n# Stop service\nnet stop bigbluebutton\n\n# Using PowerShell\nStart-Service bigbluebutton\nStop-Service bigbluebutton\nRestart-Service bigbluebutton\n\n# Check status\nGet-Service bigbluebutton\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bigbluebutton_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name bigbluebutton.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bigbluebutton.example.com;\n\n    ssl_certificate /etc/ssl/certs/bigbluebutton.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bigbluebutton.example.com.key;\n\n    location / {\n        proxy_pass http://bigbluebutton_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bigbluebutton.example.com\n    Redirect permanent / https://bigbluebutton.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bigbluebutton.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bigbluebutton.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bigbluebutton.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bigbluebutton_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bigbluebutton.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bigbluebutton_backend\n\nbackend bigbluebutton_backend\n    balance roundrobin\n    server bigbluebutton1 127.0.0.1:443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bigbluebutton:bigbluebutton /etc/bigbluebutton\nsudo chmod 750 /etc/bigbluebutton\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status bigbluebutton\n\n# View logs\nsudo journalctl -u bigbluebutton -f\n\n# Monitor resource usage\ntop -p $(pgrep bigbluebutton)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/bigbluebutton\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/bigbluebutton-backup-$DATE.tar.gz\" /etc/bigbluebutton /var/lib/bigbluebutton\n\necho \"Backup completed: $BACKUP_DIR/bigbluebutton-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop bigbluebutton\n\n# Restore from backup\ntar -xzf /backup/bigbluebutton/bigbluebutton-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bigbluebutton\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u bigbluebutton -n 100\nsudo tail -f /var/log/bigbluebutton/bigbluebutton.log\n\n# Check configuration\nbigbluebutton --version\n\n# Check permissions\nls -la /etc/bigbluebutton\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep bigbluebutton)\n\n# Check disk I/O\niotop -p $(pgrep bigbluebutton)\n\n# Check connections\nss -an | grep 443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  bigbluebutton:\n    image: bigbluebutton:latest\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/etc/bigbluebutton\n      - ./data:/var/lib/bigbluebutton\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bigbluebutton\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bigbluebutton\n\n# Arch Linux\nsudo pacman -Syu bigbluebutton\n\n# Alpine Linux\napk update && apk upgrade bigbluebutton\n\n# openSUSE\nsudo zypper update bigbluebutton\n\n# FreeBSD\npkg update && pkg upgrade bigbluebutton\n\n# Always backup before updates\ntar -czf /backup/bigbluebutton-pre-update-$(date +%Y%m%d).tar.gz /etc/bigbluebutton\n\n# Restart after updates\nsudo systemctl restart bigbluebutton\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/bigbluebutton\n\n# Clean old logs\nfind /var/log/bigbluebutton -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bigbluebutton\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bigbluebutton.org/\n- GitHub Repository: https://github.com/bigbluebutton/bigbluebutton\n- Community Forum: https://forum.bigbluebutton.org/\n- Best Practices Guide: https://docs.bigbluebutton.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"bigbluebutton-installation-guide\" class=\"mobile-header\">bigbluebutton Installation Guide</h1>\n<p class=\"mobile-paragraph\">bigbluebutton is a free and open-source web conferencing. BigBlueButton provides open source web conferencing for online learning</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 8+ cores</li>\n<li class=\"mobile-list-item\">RAM: 16GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50GB for recordings</li>\n<li class=\"mobile-list-item\">Network: HTTP/WebRTC</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default bigbluebutton port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bigbluebutton\nsudo dnf install -y bigbluebutton\n\n# Enable and start service\nsudo systemctl enable --now bigbluebutton\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bigbluebutton\nsudo apt install -y bigbluebutton\n\n# Enable and start service\nsudo systemctl enable --now bigbluebutton\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bigbluebutton\nsudo pacman -S bigbluebutton\n\n# Enable and start service\nsudo systemctl enable --now bigbluebutton\n\n# Verify installation\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bigbluebutton\napk add --no-cache bigbluebutton\n\n# Enable and start service\nrc-update add bigbluebutton default\nrc-service bigbluebutton start\n\n# Verify installation\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bigbluebutton\nsudo zypper install -y bigbluebutton\n\n# Enable and start service\nsudo systemctl enable --now bigbluebutton\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bigbluebutton\n\n# Start service\nbrew services start bigbluebutton\n\n# Verify installation\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bigbluebutton\n\n# Enable in rc.conf\necho &#039;bigbluebutton_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bigbluebutton start\n\n# Verify installation\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install bigbluebutton\n\n# Or using Scoop\nscoop install bigbluebutton\n\n# Verify installation\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/bigbluebutton\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbigbluebutton --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable bigbluebutton\n\n# Start service\nsudo systemctl start bigbluebutton\n\n# Stop service\nsudo systemctl stop bigbluebutton\n\n# Restart service\nsudo systemctl restart bigbluebutton\n\n# Check status\nsudo systemctl status bigbluebutton\n\n# View logs\nsudo journalctl -u bigbluebutton -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add bigbluebutton default\n\n# Start service\nrc-service bigbluebutton start\n\n# Stop service\nrc-service bigbluebutton stop\n\n# Restart service\nrc-service bigbluebutton restart\n\n# Check status\nrc-service bigbluebutton status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;bigbluebutton_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bigbluebutton start\n\n# Stop service\nservice bigbluebutton stop\n\n# Restart service\nservice bigbluebutton restart\n\n# Check status\nservice bigbluebutton status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bigbluebutton\nbrew services stop bigbluebutton\nbrew services restart bigbluebutton\n\n# Check status\nbrew services list | grep bigbluebutton</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start bigbluebutton\n\n# Stop service\nnet stop bigbluebutton\n\n# Using PowerShell\nStart-Service bigbluebutton\nStop-Service bigbluebutton\nRestart-Service bigbluebutton\n\n# Check status\nGet-Service bigbluebutton</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bigbluebutton_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name bigbluebutton.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bigbluebutton.example.com;\n\n    ssl_certificate /etc/ssl/certs/bigbluebutton.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bigbluebutton.example.com.key;\n\n    location / {\n        proxy_pass http://bigbluebutton_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bigbluebutton.example.com\n    Redirect permanent / https://bigbluebutton.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bigbluebutton.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bigbluebutton.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bigbluebutton.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bigbluebutton_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bigbluebutton.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bigbluebutton_backend\n\nbackend bigbluebutton_backend\n    balance roundrobin\n    server bigbluebutton1 127.0.0.1:443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bigbluebutton:bigbluebutton /etc/bigbluebutton\nsudo chmod 750 /etc/bigbluebutton\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status bigbluebutton\n\n# View logs\nsudo journalctl -u bigbluebutton -f\n\n# Monitor resource usage\ntop -p $(pgrep bigbluebutton)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/bigbluebutton&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/bigbluebutton-backup-$DATE.tar.gz&quot; /etc/bigbluebutton /var/lib/bigbluebutton\n\necho &quot;Backup completed: $BACKUP_DIR/bigbluebutton-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop bigbluebutton\n\n# Restore from backup\ntar -xzf /backup/bigbluebutton/bigbluebutton-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bigbluebutton</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u bigbluebutton -n 100\nsudo tail -f /var/log/bigbluebutton/bigbluebutton.log\n\n# Check configuration\nbigbluebutton --version\n\n# Check permissions\nls -la /etc/bigbluebutton</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep bigbluebutton)\n\n# Check disk I/O\niotop -p $(pgrep bigbluebutton)\n\n# Check connections\nss -an | grep 443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bigbluebutton:\n    image: bigbluebutton:latest\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/etc/bigbluebutton\n      - ./data:/var/lib/bigbluebutton\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bigbluebutton\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bigbluebutton\n\n# Arch Linux\nsudo pacman -Syu bigbluebutton\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bigbluebutton\n\n# openSUSE\nsudo zypper update bigbluebutton\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bigbluebutton\n\n# Always backup before updates\ntar -czf /backup/bigbluebutton-pre-update-$(date +%Y%m%d).tar.gz /etc/bigbluebutton\n\n# Restart after updates\nsudo systemctl restart bigbluebutton</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/bigbluebutton\n\n# Clean old logs\nfind /var/log/bigbluebutton -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bigbluebutton</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bigbluebutton.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bigbluebutton/bigbluebutton</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bigbluebutton.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.bigbluebutton.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1155,"lastBuilt":"2025-09-16T03:18:16.034Z","metadataVersion":"2.0"},{"name":"bitcoin_core","displayName":"bitcoin-core Installation Guide","slug":"bitcoin_core","description":"bitcoin-core is a free and open-source Bitcoin node. Bitcoin Core provides full Bitcoin node implementation","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8333],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/bitcoin_core","documentationUrl":"https://howtomgr.github.io/miscellaneous/bitcoin_core","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bitcoin_core","updatedAt":"2025-09-16T02:58:56Z","createdAt":"2025-09-16T02:22:09Z","readmeRaw":"# bitcoin-core Installation Guide\n\nbitcoin-core is a free and open-source Bitcoin node. Bitcoin Core provides full Bitcoin node implementation\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 350GB+ for blockchain\n  - Network: P2P protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8333 (default bitcoin-core port)\n  - RPC on 8332\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bitcoin-core\nsudo dnf install -y bitcoin_core\n\n# Enable and start service\nsudo systemctl enable --now bitcoin-core\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8333/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbitcoin-core --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bitcoin-core\nsudo apt install -y bitcoin_core\n\n# Enable and start service\nsudo systemctl enable --now bitcoin-core\n\n# Configure firewall\nsudo ufw allow 8333\n\n# Verify installation\nbitcoin-core --version\n```\n\n### Arch Linux\n\n```bash\n# Install bitcoin-core\nsudo pacman -S bitcoin_core\n\n# Enable and start service\nsudo systemctl enable --now bitcoin-core\n\n# Verify installation\nbitcoin-core --version\n```\n\n### Alpine Linux\n\n```bash\n# Install bitcoin-core\napk add --no-cache bitcoin_core\n\n# Enable and start service\nrc-update add bitcoin-core default\nrc-service bitcoin-core start\n\n# Verify installation\nbitcoin-core --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bitcoin-core\nsudo zypper install -y bitcoin_core\n\n# Enable and start service\nsudo systemctl enable --now bitcoin-core\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8333/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbitcoin-core --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bitcoin_core\n\n# Start service\nbrew services start bitcoin_core\n\n# Verify installation\nbitcoin-core --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bitcoin_core\n\n# Enable in rc.conf\necho 'bitcoin-core_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bitcoin-core start\n\n# Verify installation\nbitcoin-core --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install bitcoin_core\n\n# Or using Scoop\nscoop install bitcoin_core\n\n# Verify installation\nbitcoin-core --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/bitcoin_core\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbitcoin-core --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable bitcoin-core\n\n# Start service\nsudo systemctl start bitcoin-core\n\n# Stop service\nsudo systemctl stop bitcoin-core\n\n# Restart service\nsudo systemctl restart bitcoin-core\n\n# Check status\nsudo systemctl status bitcoin-core\n\n# View logs\nsudo journalctl -u bitcoin-core -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add bitcoin-core default\n\n# Start service\nrc-service bitcoin-core start\n\n# Stop service\nrc-service bitcoin-core stop\n\n# Restart service\nrc-service bitcoin-core restart\n\n# Check status\nrc-service bitcoin-core status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'bitcoin-core_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bitcoin-core start\n\n# Stop service\nservice bitcoin-core stop\n\n# Restart service\nservice bitcoin-core restart\n\n# Check status\nservice bitcoin-core status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bitcoin_core\nbrew services stop bitcoin_core\nbrew services restart bitcoin_core\n\n# Check status\nbrew services list | grep bitcoin_core\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start bitcoin-core\n\n# Stop service\nnet stop bitcoin-core\n\n# Using PowerShell\nStart-Service bitcoin-core\nStop-Service bitcoin-core\nRestart-Service bitcoin-core\n\n# Check status\nGet-Service bitcoin-core\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bitcoin_core_backend {\n    server 127.0.0.1:8333;\n}\n\nserver {\n    listen 80;\n    server_name bitcoin_core.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bitcoin_core.example.com;\n\n    ssl_certificate /etc/ssl/certs/bitcoin_core.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bitcoin_core.example.com.key;\n\n    location / {\n        proxy_pass http://bitcoin_core_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bitcoin_core.example.com\n    Redirect permanent / https://bitcoin_core.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bitcoin_core.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bitcoin_core.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bitcoin_core.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8333/\n    ProxyPassReverse / http://127.0.0.1:8333/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bitcoin_core_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bitcoin_core.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bitcoin_core_backend\n\nbackend bitcoin_core_backend\n    balance roundrobin\n    server bitcoin_core1 127.0.0.1:8333 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bitcoin_core:bitcoin_core /etc/bitcoin_core\nsudo chmod 750 /etc/bitcoin_core\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8333/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status bitcoin-core\n\n# View logs\nsudo journalctl -u bitcoin-core -f\n\n# Monitor resource usage\ntop -p $(pgrep bitcoin_core)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/bitcoin_core\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/bitcoin_core-backup-$DATE.tar.gz\" /etc/bitcoin_core /var/lib/bitcoin_core\n\necho \"Backup completed: $BACKUP_DIR/bitcoin_core-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop bitcoin-core\n\n# Restore from backup\ntar -xzf /backup/bitcoin_core/bitcoin_core-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bitcoin-core\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u bitcoin-core -n 100\nsudo tail -f /var/log/bitcoin_core/bitcoin_core.log\n\n# Check configuration\nbitcoin-core --version\n\n# Check permissions\nls -la /etc/bitcoin_core\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8333\n\n# Test connectivity\ntelnet localhost 8333\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep bitcoin_core)\n\n# Check disk I/O\niotop -p $(pgrep bitcoin_core)\n\n# Check connections\nss -an | grep 8333\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  bitcoin_core:\n    image: bitcoin_core:latest\n    ports:\n      - \"8333:8333\"\n    volumes:\n      - ./config:/etc/bitcoin_core\n      - ./data:/var/lib/bitcoin_core\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bitcoin_core\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bitcoin_core\n\n# Arch Linux\nsudo pacman -Syu bitcoin_core\n\n# Alpine Linux\napk update && apk upgrade bitcoin_core\n\n# openSUSE\nsudo zypper update bitcoin_core\n\n# FreeBSD\npkg update && pkg upgrade bitcoin_core\n\n# Always backup before updates\ntar -czf /backup/bitcoin_core-pre-update-$(date +%Y%m%d).tar.gz /etc/bitcoin_core\n\n# Restart after updates\nsudo systemctl restart bitcoin-core\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/bitcoin_core\n\n# Clean old logs\nfind /var/log/bitcoin_core -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bitcoin_core\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bitcoin_core.org/\n- GitHub Repository: https://github.com/bitcoin_core/bitcoin_core\n- Community Forum: https://forum.bitcoin_core.org/\n- Best Practices Guide: https://docs.bitcoin_core.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"bitcoin-core-installation-guide\" class=\"mobile-header\">bitcoin-core Installation Guide</h1>\n<p class=\"mobile-paragraph\">bitcoin-core is a free and open-source Bitcoin node. Bitcoin Core provides full Bitcoin node implementation</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 350GB+ for blockchain</li>\n<li class=\"mobile-list-item\">Network: P2P protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8333 (default bitcoin-core port)</li>\n<li class=\"mobile-list-item\">RPC on 8332</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bitcoin-core\nsudo dnf install -y bitcoin_core\n\n# Enable and start service\nsudo systemctl enable --now bitcoin-core\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8333/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bitcoin-core\nsudo apt install -y bitcoin_core\n\n# Enable and start service\nsudo systemctl enable --now bitcoin-core\n\n# Configure firewall\nsudo ufw allow 8333\n\n# Verify installation\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bitcoin-core\nsudo pacman -S bitcoin_core\n\n# Enable and start service\nsudo systemctl enable --now bitcoin-core\n\n# Verify installation\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bitcoin-core\napk add --no-cache bitcoin_core\n\n# Enable and start service\nrc-update add bitcoin-core default\nrc-service bitcoin-core start\n\n# Verify installation\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bitcoin-core\nsudo zypper install -y bitcoin_core\n\n# Enable and start service\nsudo systemctl enable --now bitcoin-core\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8333/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bitcoin_core\n\n# Start service\nbrew services start bitcoin_core\n\n# Verify installation\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bitcoin_core\n\n# Enable in rc.conf\necho &#039;bitcoin-core_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bitcoin-core start\n\n# Verify installation\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install bitcoin_core\n\n# Or using Scoop\nscoop install bitcoin_core\n\n# Verify installation\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/bitcoin_core\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbitcoin-core --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable bitcoin-core\n\n# Start service\nsudo systemctl start bitcoin-core\n\n# Stop service\nsudo systemctl stop bitcoin-core\n\n# Restart service\nsudo systemctl restart bitcoin-core\n\n# Check status\nsudo systemctl status bitcoin-core\n\n# View logs\nsudo journalctl -u bitcoin-core -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add bitcoin-core default\n\n# Start service\nrc-service bitcoin-core start\n\n# Stop service\nrc-service bitcoin-core stop\n\n# Restart service\nrc-service bitcoin-core restart\n\n# Check status\nrc-service bitcoin-core status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;bitcoin-core_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bitcoin-core start\n\n# Stop service\nservice bitcoin-core stop\n\n# Restart service\nservice bitcoin-core restart\n\n# Check status\nservice bitcoin-core status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bitcoin_core\nbrew services stop bitcoin_core\nbrew services restart bitcoin_core\n\n# Check status\nbrew services list | grep bitcoin_core</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start bitcoin-core\n\n# Stop service\nnet stop bitcoin-core\n\n# Using PowerShell\nStart-Service bitcoin-core\nStop-Service bitcoin-core\nRestart-Service bitcoin-core\n\n# Check status\nGet-Service bitcoin-core</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bitcoin_core_backend {\n    server 127.0.0.1:8333;\n}\n\nserver {\n    listen 80;\n    server_name bitcoin_core.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bitcoin_core.example.com;\n\n    ssl_certificate /etc/ssl/certs/bitcoin_core.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bitcoin_core.example.com.key;\n\n    location / {\n        proxy_pass http://bitcoin_core_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bitcoin_core.example.com\n    Redirect permanent / https://bitcoin_core.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bitcoin_core.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bitcoin_core.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bitcoin_core.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8333/\n    ProxyPassReverse / http://127.0.0.1:8333/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bitcoin_core_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bitcoin_core.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bitcoin_core_backend\n\nbackend bitcoin_core_backend\n    balance roundrobin\n    server bitcoin_core1 127.0.0.1:8333 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bitcoin_core:bitcoin_core /etc/bitcoin_core\nsudo chmod 750 /etc/bitcoin_core\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8333/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status bitcoin-core\n\n# View logs\nsudo journalctl -u bitcoin-core -f\n\n# Monitor resource usage\ntop -p $(pgrep bitcoin_core)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/bitcoin_core&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/bitcoin_core-backup-$DATE.tar.gz&quot; /etc/bitcoin_core /var/lib/bitcoin_core\n\necho &quot;Backup completed: $BACKUP_DIR/bitcoin_core-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop bitcoin-core\n\n# Restore from backup\ntar -xzf /backup/bitcoin_core/bitcoin_core-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bitcoin-core</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u bitcoin-core -n 100\nsudo tail -f /var/log/bitcoin_core/bitcoin_core.log\n\n# Check configuration\nbitcoin-core --version\n\n# Check permissions\nls -la /etc/bitcoin_core</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8333\n\n# Test connectivity\ntelnet localhost 8333\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep bitcoin_core)\n\n# Check disk I/O\niotop -p $(pgrep bitcoin_core)\n\n# Check connections\nss -an | grep 8333</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bitcoin_core:\n    image: bitcoin_core:latest\n    ports:\n      - &quot;8333:8333&quot;\n    volumes:\n      - ./config:/etc/bitcoin_core\n      - ./data:/var/lib/bitcoin_core\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bitcoin_core\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bitcoin_core\n\n# Arch Linux\nsudo pacman -Syu bitcoin_core\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bitcoin_core\n\n# openSUSE\nsudo zypper update bitcoin_core\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bitcoin_core\n\n# Always backup before updates\ntar -czf /backup/bitcoin_core-pre-update-$(date +%Y%m%d).tar.gz /etc/bitcoin_core\n\n# Restart after updates\nsudo systemctl restart bitcoin-core</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/bitcoin_core\n\n# Clean old logs\nfind /var/log/bitcoin_core -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bitcoin_core</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bitcoin_core.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bitcoin_core/bitcoin_core</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bitcoin_core.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.bitcoin_core.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1154,"lastBuilt":"2025-09-16T03:18:15.325Z","metadataVersion":"2.0"},{"name":"bitwarden","displayName":"bitwarden Installation Guide","slug":"bitwarden","description":"bitwarden is a free and open-source open source password manager. Bitwarden provides secure password management for individuals and teams, serving as a FOSS alternative to LastPass, 1Password, or Dashlane","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,3012],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/bitwarden","documentationUrl":"https://howtomgr.github.io/miscellaneous/bitwarden","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bitwarden","updatedAt":"2025-09-16T02:59:04Z","createdAt":"2025-09-16T02:22:17Z","readmeRaw":"# bitwarden Installation Guide\n\nbitwarden is a free and open-source open source password manager. Bitwarden provides secure password management for individuals and teams, serving as a FOSS alternative to LastPass, 1Password, or Dashlane\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ recommended)\n  - RAM: 512MB minimum (2GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: HTTPS for secure access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80/443 (default bitwarden port)\n  - Port 3012 for WebSocket\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bitwarden\nsudo dnf install -y bitwarden\n\n# Enable and start service\nsudo systemctl enable --now bitwarden\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\n./bitwarden.sh version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bitwarden\nsudo apt install -y bitwarden\n\n# Enable and start service\nsudo systemctl enable --now bitwarden\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\n./bitwarden.sh version\n```\n\n### Arch Linux\n\n```bash\n# Install bitwarden\nsudo pacman -S bitwarden\n\n# Enable and start service\nsudo systemctl enable --now bitwarden\n\n# Verify installation\n./bitwarden.sh version\n```\n\n### Alpine Linux\n\n```bash\n# Install bitwarden\napk add --no-cache bitwarden\n\n# Enable and start service\nrc-update add bitwarden default\nrc-service bitwarden start\n\n# Verify installation\n./bitwarden.sh version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bitwarden\nsudo zypper install -y bitwarden\n\n# Enable and start service\nsudo systemctl enable --now bitwarden\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\n./bitwarden.sh version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bitwarden\n\n# Start service\nbrew services start bitwarden\n\n# Verify installation\n./bitwarden.sh version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bitwarden\n\n# Enable in rc.conf\necho 'bitwarden_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bitwarden start\n\n# Verify installation\n./bitwarden.sh version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install bitwarden\n\n# Or using Scoop\nscoop install bitwarden\n\n# Verify installation\n./bitwarden.sh version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/bitwarden\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\n./bitwarden.sh version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable bitwarden\n\n# Start service\nsudo systemctl start bitwarden\n\n# Stop service\nsudo systemctl stop bitwarden\n\n# Restart service\nsudo systemctl restart bitwarden\n\n# Check status\nsudo systemctl status bitwarden\n\n# View logs\nsudo journalctl -u bitwarden -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add bitwarden default\n\n# Start service\nrc-service bitwarden start\n\n# Stop service\nrc-service bitwarden stop\n\n# Restart service\nrc-service bitwarden restart\n\n# Check status\nrc-service bitwarden status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'bitwarden_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bitwarden start\n\n# Stop service\nservice bitwarden stop\n\n# Restart service\nservice bitwarden restart\n\n# Check status\nservice bitwarden status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bitwarden\nbrew services stop bitwarden\nbrew services restart bitwarden\n\n# Check status\nbrew services list | grep bitwarden\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start bitwarden\n\n# Stop service\nnet stop bitwarden\n\n# Using PowerShell\nStart-Service bitwarden\nStop-Service bitwarden\nRestart-Service bitwarden\n\n# Check status\nGet-Service bitwarden\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bitwarden_backend {\n    server 127.0.0.1:80/443;\n}\n\nserver {\n    listen 80;\n    server_name bitwarden.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bitwarden.example.com;\n\n    ssl_certificate /etc/ssl/certs/bitwarden.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bitwarden.example.com.key;\n\n    location / {\n        proxy_pass http://bitwarden_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bitwarden.example.com\n    Redirect permanent / https://bitwarden.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bitwarden.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bitwarden.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bitwarden.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bitwarden_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bitwarden.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bitwarden_backend\n\nbackend bitwarden_backend\n    balance roundrobin\n    server bitwarden1 127.0.0.1:80/443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bitwarden:bitwarden /etc/bitwarden\nsudo chmod 750 /etc/bitwarden\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status bitwarden\n\n# View logs\nsudo journalctl -u bitwarden -f\n\n# Monitor resource usage\ntop -p $(pgrep bitwarden)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/bitwarden\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/bitwarden-backup-$DATE.tar.gz\" /etc/bitwarden /var/lib/bitwarden\n\necho \"Backup completed: $BACKUP_DIR/bitwarden-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop bitwarden\n\n# Restore from backup\ntar -xzf /backup/bitwarden/bitwarden-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bitwarden\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u bitwarden -n 100\nsudo tail -f /var/log/bitwarden/bitwarden.log\n\n# Check configuration\n./bitwarden.sh version\n\n# Check permissions\nls -la /etc/bitwarden\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80/443\n\n# Test connectivity\ntelnet localhost 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep bitwarden)\n\n# Check disk I/O\niotop -p $(pgrep bitwarden)\n\n# Check connections\nss -an | grep 80/443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  bitwarden:\n    image: bitwarden:latest\n    ports:\n      - \"80/443:80/443\"\n    volumes:\n      - ./config:/etc/bitwarden\n      - ./data:/var/lib/bitwarden\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bitwarden\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bitwarden\n\n# Arch Linux\nsudo pacman -Syu bitwarden\n\n# Alpine Linux\napk update && apk upgrade bitwarden\n\n# openSUSE\nsudo zypper update bitwarden\n\n# FreeBSD\npkg update && pkg upgrade bitwarden\n\n# Always backup before updates\ntar -czf /backup/bitwarden-pre-update-$(date +%Y%m%d).tar.gz /etc/bitwarden\n\n# Restart after updates\nsudo systemctl restart bitwarden\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/bitwarden\n\n# Clean old logs\nfind /var/log/bitwarden -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bitwarden\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bitwarden.org/\n- GitHub Repository: https://github.com/bitwarden/bitwarden\n- Community Forum: https://forum.bitwarden.org/\n- Best Practices Guide: https://docs.bitwarden.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"bitwarden-installation-guide\" class=\"mobile-header\">bitwarden Installation Guide</h1>\n<p class=\"mobile-paragraph\">bitwarden is a free and open-source open source password manager. Bitwarden provides secure password management for individuals and teams, serving as a FOSS alternative to LastPass, 1Password, or Dashlane</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ recommended)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (2GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: HTTPS for secure access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80/443 (default bitwarden port)</li>\n<li class=\"mobile-list-item\">Port 3012 for WebSocket</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bitwarden\nsudo dnf install -y bitwarden\n\n# Enable and start service\nsudo systemctl enable --now bitwarden\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bitwarden\nsudo apt install -y bitwarden\n\n# Enable and start service\nsudo systemctl enable --now bitwarden\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bitwarden\nsudo pacman -S bitwarden\n\n# Enable and start service\nsudo systemctl enable --now bitwarden\n\n# Verify installation\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bitwarden\napk add --no-cache bitwarden\n\n# Enable and start service\nrc-update add bitwarden default\nrc-service bitwarden start\n\n# Verify installation\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bitwarden\nsudo zypper install -y bitwarden\n\n# Enable and start service\nsudo systemctl enable --now bitwarden\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bitwarden\n\n# Start service\nbrew services start bitwarden\n\n# Verify installation\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bitwarden\n\n# Enable in rc.conf\necho &#039;bitwarden_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bitwarden start\n\n# Verify installation\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install bitwarden\n\n# Or using Scoop\nscoop install bitwarden\n\n# Verify installation\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/bitwarden\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\n./bitwarden.sh version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable bitwarden\n\n# Start service\nsudo systemctl start bitwarden\n\n# Stop service\nsudo systemctl stop bitwarden\n\n# Restart service\nsudo systemctl restart bitwarden\n\n# Check status\nsudo systemctl status bitwarden\n\n# View logs\nsudo journalctl -u bitwarden -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add bitwarden default\n\n# Start service\nrc-service bitwarden start\n\n# Stop service\nrc-service bitwarden stop\n\n# Restart service\nrc-service bitwarden restart\n\n# Check status\nrc-service bitwarden status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;bitwarden_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bitwarden start\n\n# Stop service\nservice bitwarden stop\n\n# Restart service\nservice bitwarden restart\n\n# Check status\nservice bitwarden status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bitwarden\nbrew services stop bitwarden\nbrew services restart bitwarden\n\n# Check status\nbrew services list | grep bitwarden</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start bitwarden\n\n# Stop service\nnet stop bitwarden\n\n# Using PowerShell\nStart-Service bitwarden\nStop-Service bitwarden\nRestart-Service bitwarden\n\n# Check status\nGet-Service bitwarden</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bitwarden_backend {\n    server 127.0.0.1:80/443;\n}\n\nserver {\n    listen 80;\n    server_name bitwarden.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bitwarden.example.com;\n\n    ssl_certificate /etc/ssl/certs/bitwarden.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bitwarden.example.com.key;\n\n    location / {\n        proxy_pass http://bitwarden_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bitwarden.example.com\n    Redirect permanent / https://bitwarden.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bitwarden.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bitwarden.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bitwarden.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bitwarden_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bitwarden.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bitwarden_backend\n\nbackend bitwarden_backend\n    balance roundrobin\n    server bitwarden1 127.0.0.1:80/443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bitwarden:bitwarden /etc/bitwarden\nsudo chmod 750 /etc/bitwarden\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status bitwarden\n\n# View logs\nsudo journalctl -u bitwarden -f\n\n# Monitor resource usage\ntop -p $(pgrep bitwarden)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/bitwarden&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/bitwarden-backup-$DATE.tar.gz&quot; /etc/bitwarden /var/lib/bitwarden\n\necho &quot;Backup completed: $BACKUP_DIR/bitwarden-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop bitwarden\n\n# Restore from backup\ntar -xzf /backup/bitwarden/bitwarden-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bitwarden</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u bitwarden -n 100\nsudo tail -f /var/log/bitwarden/bitwarden.log\n\n# Check configuration\n./bitwarden.sh version\n\n# Check permissions\nls -la /etc/bitwarden</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80/443\n\n# Test connectivity\ntelnet localhost 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep bitwarden)\n\n# Check disk I/O\niotop -p $(pgrep bitwarden)\n\n# Check connections\nss -an | grep 80/443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bitwarden:\n    image: bitwarden:latest\n    ports:\n      - &quot;80/443:80/443&quot;\n    volumes:\n      - ./config:/etc/bitwarden\n      - ./data:/var/lib/bitwarden\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bitwarden\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bitwarden\n\n# Arch Linux\nsudo pacman -Syu bitwarden\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bitwarden\n\n# openSUSE\nsudo zypper update bitwarden\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bitwarden\n\n# Always backup before updates\ntar -czf /backup/bitwarden-pre-update-$(date +%Y%m%d).tar.gz /etc/bitwarden\n\n# Restart after updates\nsudo systemctl restart bitwarden</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/bitwarden\n\n# Clean old logs\nfind /var/log/bitwarden -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bitwarden</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bitwarden.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bitwarden/bitwarden</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bitwarden.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.bitwarden.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1176,"lastBuilt":"2025-09-16T03:18:14.912Z","metadataVersion":"2.0"},{"name":"borgbackup","displayName":"borgbackup Installation Guide","slug":"borgbackup","description":"borgbackup is a free and open-source deduplicating backup. BorgBackup provides space efficient backup with deduplication","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/borgbackup","documentationUrl":"https://howtomgr.github.io/miscellaneous/borgbackup","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/borgbackup","updatedAt":"2025-09-16T02:59:32Z","createdAt":"2025-09-16T02:22:55Z","readmeRaw":"# borgbackup Installation Guide\n\nborgbackup is a free and open-source deduplicating backup. BorgBackup provides space efficient backup with deduplication\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 100GB for repos\n  - Network: SSH/local access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default borgbackup port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install borgbackup\nsudo dnf install -y borgbackup\n\n# Enable and start service\nsudo systemctl enable --now borgbackup\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nborg --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install borgbackup\nsudo apt install -y borgbackup\n\n# Enable and start service\nsudo systemctl enable --now borgbackup\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nborg --version\n```\n\n### Arch Linux\n\n```bash\n# Install borgbackup\nsudo pacman -S borgbackup\n\n# Enable and start service\nsudo systemctl enable --now borgbackup\n\n# Verify installation\nborg --version\n```\n\n### Alpine Linux\n\n```bash\n# Install borgbackup\napk add --no-cache borgbackup\n\n# Enable and start service\nrc-update add borgbackup default\nrc-service borgbackup start\n\n# Verify installation\nborg --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install borgbackup\nsudo zypper install -y borgbackup\n\n# Enable and start service\nsudo systemctl enable --now borgbackup\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nborg --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install borgbackup\n\n# Start service\nbrew services start borgbackup\n\n# Verify installation\nborg --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install borgbackup\n\n# Enable in rc.conf\necho 'borgbackup_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice borgbackup start\n\n# Verify installation\nborg --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install borgbackup\n\n# Or using Scoop\nscoop install borgbackup\n\n# Verify installation\nborg --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/borgbackup\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nborg --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable borgbackup\n\n# Start service\nsudo systemctl start borgbackup\n\n# Stop service\nsudo systemctl stop borgbackup\n\n# Restart service\nsudo systemctl restart borgbackup\n\n# Check status\nsudo systemctl status borgbackup\n\n# View logs\nsudo journalctl -u borgbackup -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add borgbackup default\n\n# Start service\nrc-service borgbackup start\n\n# Stop service\nrc-service borgbackup stop\n\n# Restart service\nrc-service borgbackup restart\n\n# Check status\nrc-service borgbackup status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'borgbackup_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice borgbackup start\n\n# Stop service\nservice borgbackup stop\n\n# Restart service\nservice borgbackup restart\n\n# Check status\nservice borgbackup status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start borgbackup\nbrew services stop borgbackup\nbrew services restart borgbackup\n\n# Check status\nbrew services list | grep borgbackup\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start borgbackup\n\n# Stop service\nnet stop borgbackup\n\n# Using PowerShell\nStart-Service borgbackup\nStop-Service borgbackup\nRestart-Service borgbackup\n\n# Check status\nGet-Service borgbackup\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream borgbackup_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name borgbackup.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name borgbackup.example.com;\n\n    ssl_certificate /etc/ssl/certs/borgbackup.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/borgbackup.example.com.key;\n\n    location / {\n        proxy_pass http://borgbackup_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName borgbackup.example.com\n    Redirect permanent / https://borgbackup.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName borgbackup.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/borgbackup.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/borgbackup.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend borgbackup_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/borgbackup.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend borgbackup_backend\n\nbackend borgbackup_backend\n    balance roundrobin\n    server borgbackup1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R borgbackup:borgbackup /etc/borgbackup\nsudo chmod 750 /etc/borgbackup\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status borgbackup\n\n# View logs\nsudo journalctl -u borgbackup -f\n\n# Monitor resource usage\ntop -p $(pgrep borgbackup)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/borgbackup\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/borgbackup-backup-$DATE.tar.gz\" /etc/borgbackup /var/lib/borgbackup\n\necho \"Backup completed: $BACKUP_DIR/borgbackup-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop borgbackup\n\n# Restore from backup\ntar -xzf /backup/borgbackup/borgbackup-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start borgbackup\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u borgbackup -n 100\nsudo tail -f /var/log/borgbackup/borgbackup.log\n\n# Check configuration\nborg --version\n\n# Check permissions\nls -la /etc/borgbackup\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep borgbackup)\n\n# Check disk I/O\niotop -p $(pgrep borgbackup)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  borgbackup:\n    image: borgbackup:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/borgbackup\n      - ./data:/var/lib/borgbackup\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update borgbackup\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade borgbackup\n\n# Arch Linux\nsudo pacman -Syu borgbackup\n\n# Alpine Linux\napk update && apk upgrade borgbackup\n\n# openSUSE\nsudo zypper update borgbackup\n\n# FreeBSD\npkg update && pkg upgrade borgbackup\n\n# Always backup before updates\ntar -czf /backup/borgbackup-pre-update-$(date +%Y%m%d).tar.gz /etc/borgbackup\n\n# Restart after updates\nsudo systemctl restart borgbackup\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/borgbackup\n\n# Clean old logs\nfind /var/log/borgbackup -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/borgbackup\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.borgbackup.org/\n- GitHub Repository: https://github.com/borgbackup/borgbackup\n- Community Forum: https://forum.borgbackup.org/\n- Best Practices Guide: https://docs.borgbackup.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"borgbackup-installation-guide\" class=\"mobile-header\">borgbackup Installation Guide</h1>\n<p class=\"mobile-paragraph\">borgbackup is a free and open-source deduplicating backup. BorgBackup provides space efficient backup with deduplication</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100GB for repos</li>\n<li class=\"mobile-list-item\">Network: SSH/local access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default borgbackup port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install borgbackup\nsudo dnf install -y borgbackup\n\n# Enable and start service\nsudo systemctl enable --now borgbackup\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nborg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install borgbackup\nsudo apt install -y borgbackup\n\n# Enable and start service\nsudo systemctl enable --now borgbackup\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nborg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install borgbackup\nsudo pacman -S borgbackup\n\n# Enable and start service\nsudo systemctl enable --now borgbackup\n\n# Verify installation\nborg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install borgbackup\napk add --no-cache borgbackup\n\n# Enable and start service\nrc-update add borgbackup default\nrc-service borgbackup start\n\n# Verify installation\nborg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install borgbackup\nsudo zypper install -y borgbackup\n\n# Enable and start service\nsudo systemctl enable --now borgbackup\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nborg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install borgbackup\n\n# Start service\nbrew services start borgbackup\n\n# Verify installation\nborg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install borgbackup\n\n# Enable in rc.conf\necho &#039;borgbackup_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice borgbackup start\n\n# Verify installation\nborg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install borgbackup\n\n# Or using Scoop\nscoop install borgbackup\n\n# Verify installation\nborg --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/borgbackup\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nborg --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable borgbackup\n\n# Start service\nsudo systemctl start borgbackup\n\n# Stop service\nsudo systemctl stop borgbackup\n\n# Restart service\nsudo systemctl restart borgbackup\n\n# Check status\nsudo systemctl status borgbackup\n\n# View logs\nsudo journalctl -u borgbackup -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add borgbackup default\n\n# Start service\nrc-service borgbackup start\n\n# Stop service\nrc-service borgbackup stop\n\n# Restart service\nrc-service borgbackup restart\n\n# Check status\nrc-service borgbackup status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;borgbackup_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice borgbackup start\n\n# Stop service\nservice borgbackup stop\n\n# Restart service\nservice borgbackup restart\n\n# Check status\nservice borgbackup status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start borgbackup\nbrew services stop borgbackup\nbrew services restart borgbackup\n\n# Check status\nbrew services list | grep borgbackup</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start borgbackup\n\n# Stop service\nnet stop borgbackup\n\n# Using PowerShell\nStart-Service borgbackup\nStop-Service borgbackup\nRestart-Service borgbackup\n\n# Check status\nGet-Service borgbackup</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream borgbackup_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name borgbackup.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name borgbackup.example.com;\n\n    ssl_certificate /etc/ssl/certs/borgbackup.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/borgbackup.example.com.key;\n\n    location / {\n        proxy_pass http://borgbackup_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName borgbackup.example.com\n    Redirect permanent / https://borgbackup.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName borgbackup.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/borgbackup.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/borgbackup.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend borgbackup_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/borgbackup.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend borgbackup_backend\n\nbackend borgbackup_backend\n    balance roundrobin\n    server borgbackup1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R borgbackup:borgbackup /etc/borgbackup\nsudo chmod 750 /etc/borgbackup\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status borgbackup\n\n# View logs\nsudo journalctl -u borgbackup -f\n\n# Monitor resource usage\ntop -p $(pgrep borgbackup)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/borgbackup&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/borgbackup-backup-$DATE.tar.gz&quot; /etc/borgbackup /var/lib/borgbackup\n\necho &quot;Backup completed: $BACKUP_DIR/borgbackup-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop borgbackup\n\n# Restore from backup\ntar -xzf /backup/borgbackup/borgbackup-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start borgbackup</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u borgbackup -n 100\nsudo tail -f /var/log/borgbackup/borgbackup.log\n\n# Check configuration\nborg --version\n\n# Check permissions\nls -la /etc/borgbackup</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep borgbackup)\n\n# Check disk I/O\niotop -p $(pgrep borgbackup)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  borgbackup:\n    image: borgbackup:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/borgbackup\n      - ./data:/var/lib/borgbackup\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update borgbackup\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade borgbackup\n\n# Arch Linux\nsudo pacman -Syu borgbackup\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade borgbackup\n\n# openSUSE\nsudo zypper update borgbackup\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade borgbackup\n\n# Always backup before updates\ntar -czf /backup/borgbackup-pre-update-$(date +%Y%m%d).tar.gz /etc/borgbackup\n\n# Restart after updates\nsudo systemctl restart borgbackup</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/borgbackup\n\n# Clean old logs\nfind /var/log/borgbackup -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/borgbackup</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.borgbackup.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/borgbackup/borgbackup</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.borgbackup.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.borgbackup.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1153,"lastBuilt":"2025-09-16T03:18:13.502Z","metadataVersion":"2.0"},{"name":"buildah","displayName":"buildah Installation Guide","slug":"buildah","description":"buildah is a free and open-source tool for building OCI images. Buildah facilitates building OCI container images without requiring a full container runtime, complementing Podman for a Docker-free workflow","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/buildah","documentationUrl":"https://howtomgr.github.io/miscellaneous/buildah","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/buildah","updatedAt":"2025-09-16T02:59:47Z","createdAt":"2025-09-16T02:23:14Z","readmeRaw":"# buildah Installation Guide\n\nbuildah is a free and open-source tool for building OCI images. Buildah facilitates building OCI container images without requiring a full container runtime, complementing Podman for a Docker-free workflow\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for installation\n  - Network: Registry access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default buildah port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install buildah\nsudo dnf install -y buildah\n\n# Enable and start service\nsudo systemctl enable --now buildah\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuildah --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install buildah\nsudo apt install -y buildah\n\n# Enable and start service\nsudo systemctl enable --now buildah\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nbuildah --version\n```\n\n### Arch Linux\n\n```bash\n# Install buildah\nsudo pacman -S buildah\n\n# Enable and start service\nsudo systemctl enable --now buildah\n\n# Verify installation\nbuildah --version\n```\n\n### Alpine Linux\n\n```bash\n# Install buildah\napk add --no-cache buildah\n\n# Enable and start service\nrc-update add buildah default\nrc-service buildah start\n\n# Verify installation\nbuildah --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install buildah\nsudo zypper install -y buildah\n\n# Enable and start service\nsudo systemctl enable --now buildah\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuildah --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install buildah\n\n# Start service\nbrew services start buildah\n\n# Verify installation\nbuildah --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install buildah\n\n# Enable in rc.conf\necho 'buildah_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice buildah start\n\n# Verify installation\nbuildah --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install buildah\n\n# Or using Scoop\nscoop install buildah\n\n# Verify installation\nbuildah --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/buildah\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbuildah --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable buildah\n\n# Start service\nsudo systemctl start buildah\n\n# Stop service\nsudo systemctl stop buildah\n\n# Restart service\nsudo systemctl restart buildah\n\n# Check status\nsudo systemctl status buildah\n\n# View logs\nsudo journalctl -u buildah -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add buildah default\n\n# Start service\nrc-service buildah start\n\n# Stop service\nrc-service buildah stop\n\n# Restart service\nrc-service buildah restart\n\n# Check status\nrc-service buildah status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'buildah_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice buildah start\n\n# Stop service\nservice buildah stop\n\n# Restart service\nservice buildah restart\n\n# Check status\nservice buildah status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start buildah\nbrew services stop buildah\nbrew services restart buildah\n\n# Check status\nbrew services list | grep buildah\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start buildah\n\n# Stop service\nnet stop buildah\n\n# Using PowerShell\nStart-Service buildah\nStop-Service buildah\nRestart-Service buildah\n\n# Check status\nGet-Service buildah\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream buildah_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name buildah.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name buildah.example.com;\n\n    ssl_certificate /etc/ssl/certs/buildah.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/buildah.example.com.key;\n\n    location / {\n        proxy_pass http://buildah_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName buildah.example.com\n    Redirect permanent / https://buildah.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName buildah.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/buildah.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/buildah.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend buildah_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/buildah.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend buildah_backend\n\nbackend buildah_backend\n    balance roundrobin\n    server buildah1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R buildah:buildah /etc/buildah\nsudo chmod 750 /etc/buildah\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status buildah\n\n# View logs\nsudo journalctl -u buildah -f\n\n# Monitor resource usage\ntop -p $(pgrep buildah)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/buildah\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/buildah-backup-$DATE.tar.gz\" /etc/buildah /var/lib/buildah\n\necho \"Backup completed: $BACKUP_DIR/buildah-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop buildah\n\n# Restore from backup\ntar -xzf /backup/buildah/buildah-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start buildah\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u buildah -n 100\nsudo tail -f /var/log/buildah/buildah.log\n\n# Check configuration\nbuildah --version\n\n# Check permissions\nls -la /etc/buildah\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep buildah)\n\n# Check disk I/O\niotop -p $(pgrep buildah)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  buildah:\n    image: buildah:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/buildah\n      - ./data:/var/lib/buildah\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update buildah\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade buildah\n\n# Arch Linux\nsudo pacman -Syu buildah\n\n# Alpine Linux\napk update && apk upgrade buildah\n\n# openSUSE\nsudo zypper update buildah\n\n# FreeBSD\npkg update && pkg upgrade buildah\n\n# Always backup before updates\ntar -czf /backup/buildah-pre-update-$(date +%Y%m%d).tar.gz /etc/buildah\n\n# Restart after updates\nsudo systemctl restart buildah\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/buildah\n\n# Clean old logs\nfind /var/log/buildah -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/buildah\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.buildah.org/\n- GitHub Repository: https://github.com/buildah/buildah\n- Community Forum: https://forum.buildah.org/\n- Best Practices Guide: https://docs.buildah.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"buildah-installation-guide\" class=\"mobile-header\">buildah Installation Guide</h1>\n<p class=\"mobile-paragraph\">buildah is a free and open-source tool for building OCI images. Buildah facilitates building OCI container images without requiring a full container runtime, complementing Podman for a Docker-free workflow</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: Registry access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default buildah port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install buildah\nsudo dnf install -y buildah\n\n# Enable and start service\nsudo systemctl enable --now buildah\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install buildah\nsudo apt install -y buildah\n\n# Enable and start service\nsudo systemctl enable --now buildah\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buildah\nsudo pacman -S buildah\n\n# Enable and start service\nsudo systemctl enable --now buildah\n\n# Verify installation\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buildah\napk add --no-cache buildah\n\n# Enable and start service\nrc-update add buildah default\nrc-service buildah start\n\n# Verify installation\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buildah\nsudo zypper install -y buildah\n\n# Enable and start service\nsudo systemctl enable --now buildah\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install buildah\n\n# Start service\nbrew services start buildah\n\n# Verify installation\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install buildah\n\n# Enable in rc.conf\necho &#039;buildah_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice buildah start\n\n# Verify installation\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install buildah\n\n# Or using Scoop\nscoop install buildah\n\n# Verify installation\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/buildah\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbuildah --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable buildah\n\n# Start service\nsudo systemctl start buildah\n\n# Stop service\nsudo systemctl stop buildah\n\n# Restart service\nsudo systemctl restart buildah\n\n# Check status\nsudo systemctl status buildah\n\n# View logs\nsudo journalctl -u buildah -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add buildah default\n\n# Start service\nrc-service buildah start\n\n# Stop service\nrc-service buildah stop\n\n# Restart service\nrc-service buildah restart\n\n# Check status\nrc-service buildah status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;buildah_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice buildah start\n\n# Stop service\nservice buildah stop\n\n# Restart service\nservice buildah restart\n\n# Check status\nservice buildah status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start buildah\nbrew services stop buildah\nbrew services restart buildah\n\n# Check status\nbrew services list | grep buildah</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start buildah\n\n# Stop service\nnet stop buildah\n\n# Using PowerShell\nStart-Service buildah\nStop-Service buildah\nRestart-Service buildah\n\n# Check status\nGet-Service buildah</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream buildah_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name buildah.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name buildah.example.com;\n\n    ssl_certificate /etc/ssl/certs/buildah.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/buildah.example.com.key;\n\n    location / {\n        proxy_pass http://buildah_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName buildah.example.com\n    Redirect permanent / https://buildah.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName buildah.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/buildah.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/buildah.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend buildah_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/buildah.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend buildah_backend\n\nbackend buildah_backend\n    balance roundrobin\n    server buildah1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R buildah:buildah /etc/buildah\nsudo chmod 750 /etc/buildah\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status buildah\n\n# View logs\nsudo journalctl -u buildah -f\n\n# Monitor resource usage\ntop -p $(pgrep buildah)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/buildah&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/buildah-backup-$DATE.tar.gz&quot; /etc/buildah /var/lib/buildah\n\necho &quot;Backup completed: $BACKUP_DIR/buildah-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop buildah\n\n# Restore from backup\ntar -xzf /backup/buildah/buildah-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start buildah</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u buildah -n 100\nsudo tail -f /var/log/buildah/buildah.log\n\n# Check configuration\nbuildah --version\n\n# Check permissions\nls -la /etc/buildah</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep buildah)\n\n# Check disk I/O\niotop -p $(pgrep buildah)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  buildah:\n    image: buildah:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/buildah\n      - ./data:/var/lib/buildah\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update buildah\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade buildah\n\n# Arch Linux\nsudo pacman -Syu buildah\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade buildah\n\n# openSUSE\nsudo zypper update buildah\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade buildah\n\n# Always backup before updates\ntar -czf /backup/buildah-pre-update-$(date +%Y%m%d).tar.gz /etc/buildah\n\n# Restart after updates\nsudo systemctl restart buildah</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/buildah\n\n# Clean old logs\nfind /var/log/buildah -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/buildah</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.buildah.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/buildah/buildah</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.buildah.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.buildah.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1167,"lastBuilt":"2025-09-16T03:18:12.561Z","metadataVersion":"2.0"},{"name":"cacti","displayName":"cacti Installation Guide","slug":"cacti","description":"cacti is a free and open-source network graphing. Cacti provides complete RRDtool-based graphing solution","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/cacti","documentationUrl":"https://howtomgr.github.io/miscellaneous/cacti","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cacti","updatedAt":"2025-09-16T03:00:11Z","createdAt":"2025-09-16T02:23:42Z","readmeRaw":"# cacti Installation Guide\n\ncacti is a free and open-source network graphing. Cacti provides complete RRDtool-based graphing solution\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 5GB for RRDs\n  - Network: SNMP/HTTP\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default cacti port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cacti\nsudo dnf install -y cacti\n\n# Enable and start service\nsudo systemctl enable --now cacti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncacti --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cacti\nsudo apt install -y cacti\n\n# Enable and start service\nsudo systemctl enable --now cacti\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ncacti --version\n```\n\n### Arch Linux\n\n```bash\n# Install cacti\nsudo pacman -S cacti\n\n# Enable and start service\nsudo systemctl enable --now cacti\n\n# Verify installation\ncacti --version\n```\n\n### Alpine Linux\n\n```bash\n# Install cacti\napk add --no-cache cacti\n\n# Enable and start service\nrc-update add cacti default\nrc-service cacti start\n\n# Verify installation\ncacti --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cacti\nsudo zypper install -y cacti\n\n# Enable and start service\nsudo systemctl enable --now cacti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncacti --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cacti\n\n# Start service\nbrew services start cacti\n\n# Verify installation\ncacti --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cacti\n\n# Enable in rc.conf\necho 'cacti_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cacti start\n\n# Verify installation\ncacti --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cacti\n\n# Or using Scoop\nscoop install cacti\n\n# Verify installation\ncacti --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cacti\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncacti --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cacti\n\n# Start service\nsudo systemctl start cacti\n\n# Stop service\nsudo systemctl stop cacti\n\n# Restart service\nsudo systemctl restart cacti\n\n# Check status\nsudo systemctl status cacti\n\n# View logs\nsudo journalctl -u cacti -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cacti default\n\n# Start service\nrc-service cacti start\n\n# Stop service\nrc-service cacti stop\n\n# Restart service\nrc-service cacti restart\n\n# Check status\nrc-service cacti status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cacti_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cacti start\n\n# Stop service\nservice cacti stop\n\n# Restart service\nservice cacti restart\n\n# Check status\nservice cacti status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cacti\nbrew services stop cacti\nbrew services restart cacti\n\n# Check status\nbrew services list | grep cacti\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cacti\n\n# Stop service\nnet stop cacti\n\n# Using PowerShell\nStart-Service cacti\nStop-Service cacti\nRestart-Service cacti\n\n# Check status\nGet-Service cacti\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cacti_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name cacti.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cacti.example.com;\n\n    ssl_certificate /etc/ssl/certs/cacti.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cacti.example.com.key;\n\n    location / {\n        proxy_pass http://cacti_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cacti.example.com\n    Redirect permanent / https://cacti.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cacti.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cacti.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cacti.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cacti_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cacti.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cacti_backend\n\nbackend cacti_backend\n    balance roundrobin\n    server cacti1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cacti:cacti /etc/cacti\nsudo chmod 750 /etc/cacti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status cacti\n\n# View logs\nsudo journalctl -u cacti -f\n\n# Monitor resource usage\ntop -p $(pgrep cacti)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cacti\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cacti-backup-$DATE.tar.gz\" /etc/cacti /var/lib/cacti\n\necho \"Backup completed: $BACKUP_DIR/cacti-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cacti\n\n# Restore from backup\ntar -xzf /backup/cacti/cacti-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cacti\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cacti -n 100\nsudo tail -f /var/log/cacti/cacti.log\n\n# Check configuration\ncacti --version\n\n# Check permissions\nls -la /etc/cacti\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cacti)\n\n# Check disk I/O\niotop -p $(pgrep cacti)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cacti:\n    image: cacti:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/cacti\n      - ./data:/var/lib/cacti\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cacti\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cacti\n\n# Arch Linux\nsudo pacman -Syu cacti\n\n# Alpine Linux\napk update && apk upgrade cacti\n\n# openSUSE\nsudo zypper update cacti\n\n# FreeBSD\npkg update && pkg upgrade cacti\n\n# Always backup before updates\ntar -czf /backup/cacti-pre-update-$(date +%Y%m%d).tar.gz /etc/cacti\n\n# Restart after updates\nsudo systemctl restart cacti\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cacti\n\n# Clean old logs\nfind /var/log/cacti -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cacti\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cacti.org/\n- GitHub Repository: https://github.com/cacti/cacti\n- Community Forum: https://forum.cacti.org/\n- Best Practices Guide: https://docs.cacti.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"cacti-installation-guide\" class=\"mobile-header\">cacti Installation Guide</h1>\n<p class=\"mobile-paragraph\">cacti is a free and open-source network graphing. Cacti provides complete RRDtool-based graphing solution</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for RRDs</li>\n<li class=\"mobile-list-item\">Network: SNMP/HTTP</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default cacti port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cacti\nsudo dnf install -y cacti\n\n# Enable and start service\nsudo systemctl enable --now cacti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncacti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cacti\nsudo apt install -y cacti\n\n# Enable and start service\nsudo systemctl enable --now cacti\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ncacti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cacti\nsudo pacman -S cacti\n\n# Enable and start service\nsudo systemctl enable --now cacti\n\n# Verify installation\ncacti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cacti\napk add --no-cache cacti\n\n# Enable and start service\nrc-update add cacti default\nrc-service cacti start\n\n# Verify installation\ncacti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cacti\nsudo zypper install -y cacti\n\n# Enable and start service\nsudo systemctl enable --now cacti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncacti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cacti\n\n# Start service\nbrew services start cacti\n\n# Verify installation\ncacti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cacti\n\n# Enable in rc.conf\necho &#039;cacti_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cacti start\n\n# Verify installation\ncacti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cacti\n\n# Or using Scoop\nscoop install cacti\n\n# Verify installation\ncacti --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cacti\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncacti --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cacti\n\n# Start service\nsudo systemctl start cacti\n\n# Stop service\nsudo systemctl stop cacti\n\n# Restart service\nsudo systemctl restart cacti\n\n# Check status\nsudo systemctl status cacti\n\n# View logs\nsudo journalctl -u cacti -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cacti default\n\n# Start service\nrc-service cacti start\n\n# Stop service\nrc-service cacti stop\n\n# Restart service\nrc-service cacti restart\n\n# Check status\nrc-service cacti status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cacti_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cacti start\n\n# Stop service\nservice cacti stop\n\n# Restart service\nservice cacti restart\n\n# Check status\nservice cacti status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cacti\nbrew services stop cacti\nbrew services restart cacti\n\n# Check status\nbrew services list | grep cacti</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cacti\n\n# Stop service\nnet stop cacti\n\n# Using PowerShell\nStart-Service cacti\nStop-Service cacti\nRestart-Service cacti\n\n# Check status\nGet-Service cacti</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cacti_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name cacti.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cacti.example.com;\n\n    ssl_certificate /etc/ssl/certs/cacti.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cacti.example.com.key;\n\n    location / {\n        proxy_pass http://cacti_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cacti.example.com\n    Redirect permanent / https://cacti.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cacti.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cacti.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cacti.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cacti_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cacti.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cacti_backend\n\nbackend cacti_backend\n    balance roundrobin\n    server cacti1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cacti:cacti /etc/cacti\nsudo chmod 750 /etc/cacti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status cacti\n\n# View logs\nsudo journalctl -u cacti -f\n\n# Monitor resource usage\ntop -p $(pgrep cacti)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cacti&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cacti-backup-$DATE.tar.gz&quot; /etc/cacti /var/lib/cacti\n\necho &quot;Backup completed: $BACKUP_DIR/cacti-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cacti\n\n# Restore from backup\ntar -xzf /backup/cacti/cacti-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cacti</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cacti -n 100\nsudo tail -f /var/log/cacti/cacti.log\n\n# Check configuration\ncacti --version\n\n# Check permissions\nls -la /etc/cacti</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cacti)\n\n# Check disk I/O\niotop -p $(pgrep cacti)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cacti:\n    image: cacti:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/cacti\n      - ./data:/var/lib/cacti\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cacti\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cacti\n\n# Arch Linux\nsudo pacman -Syu cacti\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cacti\n\n# openSUSE\nsudo zypper update cacti\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cacti\n\n# Always backup before updates\ntar -czf /backup/cacti-pre-update-$(date +%Y%m%d).tar.gz /etc/cacti\n\n# Restart after updates\nsudo systemctl restart cacti</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cacti\n\n# Clean old logs\nfind /var/log/cacti -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cacti</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cacti.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cacti/cacti</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cacti.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cacti.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1151,"lastBuilt":"2025-09-16T03:18:11.495Z","metadataVersion":"2.0"},{"name":"calibre-web","displayName":"calibre-web Installation Guide","slug":"calibre-web","description":"calibre-web is a free and open-source ebook library interface. Calibre-Web provides a web interface for browsing, reading and downloading ebooks","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8083],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/calibre-web","documentationUrl":"https://howtomgr.github.io/miscellaneous/calibre-web","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/calibre-web","updatedAt":"2025-09-16T03:00:34Z","createdAt":"2025-09-16T02:24:03Z","readmeRaw":"# calibre-web Installation Guide\n\ncalibre-web is a free and open-source ebook library interface. Calibre-Web provides a web interface for browsing, reading and downloading ebooks\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 500MB for app\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8083 (default calibre-web port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install calibre-web\nsudo dnf install -y calibre-web\n\n# Enable and start service\nsudo systemctl enable --now calibre-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8083/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncalibre-web --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install calibre-web\nsudo apt install -y calibre-web\n\n# Enable and start service\nsudo systemctl enable --now calibre-web\n\n# Configure firewall\nsudo ufw allow 8083\n\n# Verify installation\ncalibre-web --version\n```\n\n### Arch Linux\n\n```bash\n# Install calibre-web\nsudo pacman -S calibre-web\n\n# Enable and start service\nsudo systemctl enable --now calibre-web\n\n# Verify installation\ncalibre-web --version\n```\n\n### Alpine Linux\n\n```bash\n# Install calibre-web\napk add --no-cache calibre-web\n\n# Enable and start service\nrc-update add calibre-web default\nrc-service calibre-web start\n\n# Verify installation\ncalibre-web --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install calibre-web\nsudo zypper install -y calibre-web\n\n# Enable and start service\nsudo systemctl enable --now calibre-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8083/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncalibre-web --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install calibre-web\n\n# Start service\nbrew services start calibre-web\n\n# Verify installation\ncalibre-web --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install calibre-web\n\n# Enable in rc.conf\necho 'calibre-web_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice calibre-web start\n\n# Verify installation\ncalibre-web --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install calibre-web\n\n# Or using Scoop\nscoop install calibre-web\n\n# Verify installation\ncalibre-web --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/calibre-web\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncalibre-web --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable calibre-web\n\n# Start service\nsudo systemctl start calibre-web\n\n# Stop service\nsudo systemctl stop calibre-web\n\n# Restart service\nsudo systemctl restart calibre-web\n\n# Check status\nsudo systemctl status calibre-web\n\n# View logs\nsudo journalctl -u calibre-web -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add calibre-web default\n\n# Start service\nrc-service calibre-web start\n\n# Stop service\nrc-service calibre-web stop\n\n# Restart service\nrc-service calibre-web restart\n\n# Check status\nrc-service calibre-web status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'calibre-web_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice calibre-web start\n\n# Stop service\nservice calibre-web stop\n\n# Restart service\nservice calibre-web restart\n\n# Check status\nservice calibre-web status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start calibre-web\nbrew services stop calibre-web\nbrew services restart calibre-web\n\n# Check status\nbrew services list | grep calibre-web\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start calibre-web\n\n# Stop service\nnet stop calibre-web\n\n# Using PowerShell\nStart-Service calibre-web\nStop-Service calibre-web\nRestart-Service calibre-web\n\n# Check status\nGet-Service calibre-web\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream calibre-web_backend {\n    server 127.0.0.1:8083;\n}\n\nserver {\n    listen 80;\n    server_name calibre-web.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name calibre-web.example.com;\n\n    ssl_certificate /etc/ssl/certs/calibre-web.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/calibre-web.example.com.key;\n\n    location / {\n        proxy_pass http://calibre-web_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName calibre-web.example.com\n    Redirect permanent / https://calibre-web.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName calibre-web.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/calibre-web.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/calibre-web.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8083/\n    ProxyPassReverse / http://127.0.0.1:8083/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend calibre-web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/calibre-web.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend calibre-web_backend\n\nbackend calibre-web_backend\n    balance roundrobin\n    server calibre-web1 127.0.0.1:8083 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R calibre-web:calibre-web /etc/calibre-web\nsudo chmod 750 /etc/calibre-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8083/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status calibre-web\n\n# View logs\nsudo journalctl -u calibre-web -f\n\n# Monitor resource usage\ntop -p $(pgrep calibre-web)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/calibre-web\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/calibre-web-backup-$DATE.tar.gz\" /etc/calibre-web /var/lib/calibre-web\n\necho \"Backup completed: $BACKUP_DIR/calibre-web-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop calibre-web\n\n# Restore from backup\ntar -xzf /backup/calibre-web/calibre-web-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start calibre-web\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u calibre-web -n 100\nsudo tail -f /var/log/calibre-web/calibre-web.log\n\n# Check configuration\ncalibre-web --version\n\n# Check permissions\nls -la /etc/calibre-web\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8083\n\n# Test connectivity\ntelnet localhost 8083\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep calibre-web)\n\n# Check disk I/O\niotop -p $(pgrep calibre-web)\n\n# Check connections\nss -an | grep 8083\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  calibre-web:\n    image: calibre-web:latest\n    ports:\n      - \"8083:8083\"\n    volumes:\n      - ./config:/etc/calibre-web\n      - ./data:/var/lib/calibre-web\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update calibre-web\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade calibre-web\n\n# Arch Linux\nsudo pacman -Syu calibre-web\n\n# Alpine Linux\napk update && apk upgrade calibre-web\n\n# openSUSE\nsudo zypper update calibre-web\n\n# FreeBSD\npkg update && pkg upgrade calibre-web\n\n# Always backup before updates\ntar -czf /backup/calibre-web-pre-update-$(date +%Y%m%d).tar.gz /etc/calibre-web\n\n# Restart after updates\nsudo systemctl restart calibre-web\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/calibre-web\n\n# Clean old logs\nfind /var/log/calibre-web -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/calibre-web\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.calibre-web.org/\n- GitHub Repository: https://github.com/calibre-web/calibre-web\n- Community Forum: https://forum.calibre-web.org/\n- Best Practices Guide: https://docs.calibre-web.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"calibre-web-installation-guide\" class=\"mobile-header\">calibre-web Installation Guide</h1>\n<p class=\"mobile-paragraph\">calibre-web is a free and open-source ebook library interface. Calibre-Web provides a web interface for browsing, reading and downloading ebooks</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for app</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8083 (default calibre-web port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install calibre-web\nsudo dnf install -y calibre-web\n\n# Enable and start service\nsudo systemctl enable --now calibre-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8083/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install calibre-web\nsudo apt install -y calibre-web\n\n# Enable and start service\nsudo systemctl enable --now calibre-web\n\n# Configure firewall\nsudo ufw allow 8083\n\n# Verify installation\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install calibre-web\nsudo pacman -S calibre-web\n\n# Enable and start service\nsudo systemctl enable --now calibre-web\n\n# Verify installation\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install calibre-web\napk add --no-cache calibre-web\n\n# Enable and start service\nrc-update add calibre-web default\nrc-service calibre-web start\n\n# Verify installation\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install calibre-web\nsudo zypper install -y calibre-web\n\n# Enable and start service\nsudo systemctl enable --now calibre-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8083/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install calibre-web\n\n# Start service\nbrew services start calibre-web\n\n# Verify installation\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install calibre-web\n\n# Enable in rc.conf\necho &#039;calibre-web_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice calibre-web start\n\n# Verify installation\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install calibre-web\n\n# Or using Scoop\nscoop install calibre-web\n\n# Verify installation\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/calibre-web\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncalibre-web --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable calibre-web\n\n# Start service\nsudo systemctl start calibre-web\n\n# Stop service\nsudo systemctl stop calibre-web\n\n# Restart service\nsudo systemctl restart calibre-web\n\n# Check status\nsudo systemctl status calibre-web\n\n# View logs\nsudo journalctl -u calibre-web -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add calibre-web default\n\n# Start service\nrc-service calibre-web start\n\n# Stop service\nrc-service calibre-web stop\n\n# Restart service\nrc-service calibre-web restart\n\n# Check status\nrc-service calibre-web status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;calibre-web_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice calibre-web start\n\n# Stop service\nservice calibre-web stop\n\n# Restart service\nservice calibre-web restart\n\n# Check status\nservice calibre-web status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start calibre-web\nbrew services stop calibre-web\nbrew services restart calibre-web\n\n# Check status\nbrew services list | grep calibre-web</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start calibre-web\n\n# Stop service\nnet stop calibre-web\n\n# Using PowerShell\nStart-Service calibre-web\nStop-Service calibre-web\nRestart-Service calibre-web\n\n# Check status\nGet-Service calibre-web</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream calibre-web_backend {\n    server 127.0.0.1:8083;\n}\n\nserver {\n    listen 80;\n    server_name calibre-web.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name calibre-web.example.com;\n\n    ssl_certificate /etc/ssl/certs/calibre-web.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/calibre-web.example.com.key;\n\n    location / {\n        proxy_pass http://calibre-web_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName calibre-web.example.com\n    Redirect permanent / https://calibre-web.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName calibre-web.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/calibre-web.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/calibre-web.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8083/\n    ProxyPassReverse / http://127.0.0.1:8083/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend calibre-web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/calibre-web.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend calibre-web_backend\n\nbackend calibre-web_backend\n    balance roundrobin\n    server calibre-web1 127.0.0.1:8083 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R calibre-web:calibre-web /etc/calibre-web\nsudo chmod 750 /etc/calibre-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8083/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status calibre-web\n\n# View logs\nsudo journalctl -u calibre-web -f\n\n# Monitor resource usage\ntop -p $(pgrep calibre-web)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/calibre-web&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/calibre-web-backup-$DATE.tar.gz&quot; /etc/calibre-web /var/lib/calibre-web\n\necho &quot;Backup completed: $BACKUP_DIR/calibre-web-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop calibre-web\n\n# Restore from backup\ntar -xzf /backup/calibre-web/calibre-web-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start calibre-web</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u calibre-web -n 100\nsudo tail -f /var/log/calibre-web/calibre-web.log\n\n# Check configuration\ncalibre-web --version\n\n# Check permissions\nls -la /etc/calibre-web</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8083\n\n# Test connectivity\ntelnet localhost 8083\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep calibre-web)\n\n# Check disk I/O\niotop -p $(pgrep calibre-web)\n\n# Check connections\nss -an | grep 8083</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  calibre-web:\n    image: calibre-web:latest\n    ports:\n      - &quot;8083:8083&quot;\n    volumes:\n      - ./config:/etc/calibre-web\n      - ./data:/var/lib/calibre-web\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update calibre-web\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade calibre-web\n\n# Arch Linux\nsudo pacman -Syu calibre-web\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade calibre-web\n\n# openSUSE\nsudo zypper update calibre-web\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade calibre-web\n\n# Always backup before updates\ntar -czf /backup/calibre-web-pre-update-$(date +%Y%m%d).tar.gz /etc/calibre-web\n\n# Restart after updates\nsudo systemctl restart calibre-web</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/calibre-web\n\n# Clean old logs\nfind /var/log/calibre-web -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/calibre-web</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.calibre-web.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/calibre-web/calibre-web</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.calibre-web.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.calibre-web.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1158,"lastBuilt":"2025-09-16T03:18:10.465Z","metadataVersion":"2.0"},{"name":"canvas_lms","displayName":"canvas-lms Installation Guide","slug":"canvas_lms","description":"canvas-lms is a free and open-source learning management. Canvas provides open source learning management system","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/canvas_lms","documentationUrl":"https://howtomgr.github.io/miscellaneous/canvas_lms","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/canvas_lms","updatedAt":"2025-09-16T03:00:42Z","createdAt":"2025-09-16T02:24:13Z","readmeRaw":"# canvas-lms Installation Guide\n\ncanvas-lms is a free and open-source learning management. Canvas provides open source learning management system\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 8GB minimum\n  - Storage: 50GB for data\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default canvas-lms port)\n  - Various services\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install canvas-lms\nsudo dnf install -y canvas_lms\n\n# Enable and start service\nsudo systemctl enable --now canvas-lms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncanvas-lms --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install canvas-lms\nsudo apt install -y canvas_lms\n\n# Enable and start service\nsudo systemctl enable --now canvas-lms\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ncanvas-lms --version\n```\n\n### Arch Linux\n\n```bash\n# Install canvas-lms\nsudo pacman -S canvas_lms\n\n# Enable and start service\nsudo systemctl enable --now canvas-lms\n\n# Verify installation\ncanvas-lms --version\n```\n\n### Alpine Linux\n\n```bash\n# Install canvas-lms\napk add --no-cache canvas_lms\n\n# Enable and start service\nrc-update add canvas-lms default\nrc-service canvas-lms start\n\n# Verify installation\ncanvas-lms --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install canvas-lms\nsudo zypper install -y canvas_lms\n\n# Enable and start service\nsudo systemctl enable --now canvas-lms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncanvas-lms --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install canvas_lms\n\n# Start service\nbrew services start canvas_lms\n\n# Verify installation\ncanvas-lms --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install canvas_lms\n\n# Enable in rc.conf\necho 'canvas-lms_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice canvas-lms start\n\n# Verify installation\ncanvas-lms --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install canvas_lms\n\n# Or using Scoop\nscoop install canvas_lms\n\n# Verify installation\ncanvas-lms --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/canvas_lms\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncanvas-lms --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable canvas-lms\n\n# Start service\nsudo systemctl start canvas-lms\n\n# Stop service\nsudo systemctl stop canvas-lms\n\n# Restart service\nsudo systemctl restart canvas-lms\n\n# Check status\nsudo systemctl status canvas-lms\n\n# View logs\nsudo journalctl -u canvas-lms -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add canvas-lms default\n\n# Start service\nrc-service canvas-lms start\n\n# Stop service\nrc-service canvas-lms stop\n\n# Restart service\nrc-service canvas-lms restart\n\n# Check status\nrc-service canvas-lms status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'canvas-lms_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice canvas-lms start\n\n# Stop service\nservice canvas-lms stop\n\n# Restart service\nservice canvas-lms restart\n\n# Check status\nservice canvas-lms status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start canvas_lms\nbrew services stop canvas_lms\nbrew services restart canvas_lms\n\n# Check status\nbrew services list | grep canvas_lms\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start canvas-lms\n\n# Stop service\nnet stop canvas-lms\n\n# Using PowerShell\nStart-Service canvas-lms\nStop-Service canvas-lms\nRestart-Service canvas-lms\n\n# Check status\nGet-Service canvas-lms\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream canvas_lms_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name canvas_lms.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name canvas_lms.example.com;\n\n    ssl_certificate /etc/ssl/certs/canvas_lms.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/canvas_lms.example.com.key;\n\n    location / {\n        proxy_pass http://canvas_lms_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName canvas_lms.example.com\n    Redirect permanent / https://canvas_lms.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName canvas_lms.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/canvas_lms.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/canvas_lms.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend canvas_lms_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/canvas_lms.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend canvas_lms_backend\n\nbackend canvas_lms_backend\n    balance roundrobin\n    server canvas_lms1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R canvas_lms:canvas_lms /etc/canvas_lms\nsudo chmod 750 /etc/canvas_lms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status canvas-lms\n\n# View logs\nsudo journalctl -u canvas-lms -f\n\n# Monitor resource usage\ntop -p $(pgrep canvas_lms)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/canvas_lms\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/canvas_lms-backup-$DATE.tar.gz\" /etc/canvas_lms /var/lib/canvas_lms\n\necho \"Backup completed: $BACKUP_DIR/canvas_lms-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop canvas-lms\n\n# Restore from backup\ntar -xzf /backup/canvas_lms/canvas_lms-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start canvas-lms\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u canvas-lms -n 100\nsudo tail -f /var/log/canvas_lms/canvas_lms.log\n\n# Check configuration\ncanvas-lms --version\n\n# Check permissions\nls -la /etc/canvas_lms\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep canvas_lms)\n\n# Check disk I/O\niotop -p $(pgrep canvas_lms)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  canvas_lms:\n    image: canvas_lms:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/canvas_lms\n      - ./data:/var/lib/canvas_lms\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update canvas_lms\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade canvas_lms\n\n# Arch Linux\nsudo pacman -Syu canvas_lms\n\n# Alpine Linux\napk update && apk upgrade canvas_lms\n\n# openSUSE\nsudo zypper update canvas_lms\n\n# FreeBSD\npkg update && pkg upgrade canvas_lms\n\n# Always backup before updates\ntar -czf /backup/canvas_lms-pre-update-$(date +%Y%m%d).tar.gz /etc/canvas_lms\n\n# Restart after updates\nsudo systemctl restart canvas-lms\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/canvas_lms\n\n# Clean old logs\nfind /var/log/canvas_lms -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/canvas_lms\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.canvas_lms.org/\n- GitHub Repository: https://github.com/canvas_lms/canvas_lms\n- Community Forum: https://forum.canvas_lms.org/\n- Best Practices Guide: https://docs.canvas_lms.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"canvas-lms-installation-guide\" class=\"mobile-header\">canvas-lms Installation Guide</h1>\n<p class=\"mobile-paragraph\">canvas-lms is a free and open-source learning management. Canvas provides open source learning management system</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 8GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default canvas-lms port)</li>\n<li class=\"mobile-list-item\">Various services</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install canvas-lms\nsudo dnf install -y canvas_lms\n\n# Enable and start service\nsudo systemctl enable --now canvas-lms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install canvas-lms\nsudo apt install -y canvas_lms\n\n# Enable and start service\nsudo systemctl enable --now canvas-lms\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install canvas-lms\nsudo pacman -S canvas_lms\n\n# Enable and start service\nsudo systemctl enable --now canvas-lms\n\n# Verify installation\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install canvas-lms\napk add --no-cache canvas_lms\n\n# Enable and start service\nrc-update add canvas-lms default\nrc-service canvas-lms start\n\n# Verify installation\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install canvas-lms\nsudo zypper install -y canvas_lms\n\n# Enable and start service\nsudo systemctl enable --now canvas-lms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install canvas_lms\n\n# Start service\nbrew services start canvas_lms\n\n# Verify installation\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install canvas_lms\n\n# Enable in rc.conf\necho &#039;canvas-lms_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice canvas-lms start\n\n# Verify installation\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install canvas_lms\n\n# Or using Scoop\nscoop install canvas_lms\n\n# Verify installation\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/canvas_lms\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncanvas-lms --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable canvas-lms\n\n# Start service\nsudo systemctl start canvas-lms\n\n# Stop service\nsudo systemctl stop canvas-lms\n\n# Restart service\nsudo systemctl restart canvas-lms\n\n# Check status\nsudo systemctl status canvas-lms\n\n# View logs\nsudo journalctl -u canvas-lms -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add canvas-lms default\n\n# Start service\nrc-service canvas-lms start\n\n# Stop service\nrc-service canvas-lms stop\n\n# Restart service\nrc-service canvas-lms restart\n\n# Check status\nrc-service canvas-lms status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;canvas-lms_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice canvas-lms start\n\n# Stop service\nservice canvas-lms stop\n\n# Restart service\nservice canvas-lms restart\n\n# Check status\nservice canvas-lms status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start canvas_lms\nbrew services stop canvas_lms\nbrew services restart canvas_lms\n\n# Check status\nbrew services list | grep canvas_lms</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start canvas-lms\n\n# Stop service\nnet stop canvas-lms\n\n# Using PowerShell\nStart-Service canvas-lms\nStop-Service canvas-lms\nRestart-Service canvas-lms\n\n# Check status\nGet-Service canvas-lms</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream canvas_lms_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name canvas_lms.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name canvas_lms.example.com;\n\n    ssl_certificate /etc/ssl/certs/canvas_lms.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/canvas_lms.example.com.key;\n\n    location / {\n        proxy_pass http://canvas_lms_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName canvas_lms.example.com\n    Redirect permanent / https://canvas_lms.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName canvas_lms.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/canvas_lms.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/canvas_lms.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend canvas_lms_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/canvas_lms.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend canvas_lms_backend\n\nbackend canvas_lms_backend\n    balance roundrobin\n    server canvas_lms1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R canvas_lms:canvas_lms /etc/canvas_lms\nsudo chmod 750 /etc/canvas_lms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status canvas-lms\n\n# View logs\nsudo journalctl -u canvas-lms -f\n\n# Monitor resource usage\ntop -p $(pgrep canvas_lms)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/canvas_lms&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/canvas_lms-backup-$DATE.tar.gz&quot; /etc/canvas_lms /var/lib/canvas_lms\n\necho &quot;Backup completed: $BACKUP_DIR/canvas_lms-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop canvas-lms\n\n# Restore from backup\ntar -xzf /backup/canvas_lms/canvas_lms-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start canvas-lms</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u canvas-lms -n 100\nsudo tail -f /var/log/canvas_lms/canvas_lms.log\n\n# Check configuration\ncanvas-lms --version\n\n# Check permissions\nls -la /etc/canvas_lms</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep canvas_lms)\n\n# Check disk I/O\niotop -p $(pgrep canvas_lms)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  canvas_lms:\n    image: canvas_lms:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/canvas_lms\n      - ./data:/var/lib/canvas_lms\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update canvas_lms\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade canvas_lms\n\n# Arch Linux\nsudo pacman -Syu canvas_lms\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade canvas_lms\n\n# openSUSE\nsudo zypper update canvas_lms\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade canvas_lms\n\n# Always backup before updates\ntar -czf /backup/canvas_lms-pre-update-$(date +%Y%m%d).tar.gz /etc/canvas_lms\n\n# Restart after updates\nsudo systemctl restart canvas-lms</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/canvas_lms\n\n# Clean old logs\nfind /var/log/canvas_lms -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/canvas_lms</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.canvas_lms.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/canvas_lms/canvas_lms</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.canvas_lms.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.canvas_lms.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1152,"lastBuilt":"2025-09-16T03:18:10.113Z","metadataVersion":"2.0"},{"name":"certbot","displayName":"Certbot Installation Guide","slug":"certbot","description":"Certbot is a free and open-source ACME client for Let's Encrypt SSL/TLS certificate automation. Developed by the Electronic Frontier Foundation (EFF), Certbot automates the process of obtaining and renewing SSL/TLS certificates from Let's Encrypt, providing a free alternative to commercial certificate authorities like DigiCert, Comodo, or GoDaddy","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","web-services","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/certbot","documentationUrl":"https://howtomgr.github.io/miscellaneous/certbot","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/certbot","updatedAt":"2025-09-16T03:01:11Z","createdAt":"2025-09-08T03:05:34Z","readmeRaw":"# Certbot Installation Guide\n\nCertbot is a free and open-source ACME client for Let's Encrypt SSL/TLS certificate automation. Developed by the Electronic Frontier Foundation (EFF), Certbot automates the process of obtaining and renewing SSL/TLS certificates from Let's Encrypt, providing a free alternative to commercial certificate authorities like DigiCert, Comodo, or GoDaddy\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 100MB for installation\n  - Network: HTTPS access to Let's Encrypt servers\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.12+ (Sierra or newer)\n  - Windows: Windows 10+ with WSL2\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80/443 (default Certbot port)\n  - Port 80 for HTTP-01 challenge, Port 443 for TLS-ALPN-01 challenge\n- **Dependencies**:\n  - Python 3.6+, nginx/Apache (for web server plugins)\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install Certbot\nsudo dnf install -y certbot\n\n# Enable and start service\nsudo systemctl enable --now certbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncertbot --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install Certbot\nsudo apt install -y certbot\n\n# Enable and start service\nsudo systemctl enable --now certbot\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\ncertbot --version\n```\n\n### Arch Linux\n\n```bash\n# Install Certbot\nsudo pacman -S certbot\n\n# Enable and start service\nsudo systemctl enable --now certbot\n\n# Verify installation\ncertbot --version\n```\n\n### Alpine Linux\n\n```bash\n# Install Certbot\napk add --no-cache certbot\n\n# Enable and start service\nrc-update add certbot default\nrc-service certbot start\n\n# Verify installation\ncertbot --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install Certbot\nsudo zypper install -y certbot\n\n# Enable and start service\nsudo systemctl enable --now certbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncertbot --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install certbot\n\n# Start service\nbrew services start certbot\n\n# Verify installation\ncertbot --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install certbot\n\n# Enable in rc.conf\necho 'certbot_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice certbot start\n\n# Verify installation\ncertbot --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install certbot\n\n# Or using Scoop\nscoop install certbot\n\n# Verify installation\ncertbot --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/letsencrypt\n\n# Set up basic configuration\n# Configuration details will vary based on your specific needs\n# See official documentation for detailed configuration options\n\n# Test configuration\ncertbot certificates\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable certbot\n\n# Start service\nsudo systemctl start certbot\n\n# Stop service\nsudo systemctl stop certbot\n\n# Restart service\nsudo systemctl restart certbot\n\n# Check status\nsudo systemctl status certbot\n\n# View logs\nsudo journalctl -u certbot -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add certbot default\n\n# Start service\nrc-service certbot start\n\n# Stop service\nrc-service certbot stop\n\n# Restart service\nrc-service certbot restart\n\n# Check status\nrc-service certbot status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'certbot_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice certbot start\n\n# Stop service\nservice certbot stop\n\n# Restart service\nservice certbot restart\n\n# Check status\nservice certbot status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start certbot\nbrew services stop certbot\nbrew services restart certbot\n\n# Check status\nbrew services list | grep certbot\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start certbot\n\n# Stop service\nnet stop certbot\n\n# Using PowerShell\nStart-Service certbot\nStop-Service certbot\nRestart-Service certbot\n\n# Check status\nGet-Service certbot\n```\n\n## Advanced Configuration\n\n### Advanced Certbot Configuration\n\nSee the official documentation for advanced configuration options including:\n- High availability setup\n- Performance tuning\n- Security hardening\n- Integration with other services\n\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream certbot_backend {\n    server 127.0.0.1:80/443;\n}\n\nserver {\n    listen 80;\n    server_name certbot.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name certbot.example.com;\n\n    ssl_certificate /etc/ssl/certs/certbot.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/certbot.example.com.key;\n\n    location / {\n        proxy_pass http://certbot_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName certbot.example.com\n    Redirect permanent / https://certbot.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName certbot.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/certbot.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/certbot.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend certbot_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/certbot.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend certbot_backend\n\nbackend certbot_backend\n    balance roundrobin\n    server certbot1 127.0.0.1:80/443 check\n```\n\n## Security Configuration\n\n### Security Best Practices\n\n```bash\n# Set appropriate permissions\nsudo chown -R certbot:certbot /etc/letsencrypt\nsudo chmod 750 /etc/letsencrypt\n\n# Configure firewall rules\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nNot applicable\n\n## Performance Optimization\n\n### Performance Tuning\n\n```bash\n# System tuning for Certbot\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Monitor performance\ncertbot renew --dry-run\n```\n\n## Monitoring\n\n### Monitoring Setup\n\n```bash\n# Basic monitoring\nsudo systemctl status certbot\nsudo journalctl -u certbot -f\n\n# Set up health checks\ncurl -f http://localhost:80/health || exit 1\n```\n\n## Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# Backup script\nBACKUP_DIR=\"/backup/certbot\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf /backup/certbot-$(date +%Y%m%d).tar.gz /etc/letsencrypt\n\n# Restore procedure\n# Stop service, restore files, restart service\nsudo systemctl stop certbot\n# Restore backed up files\nsudo systemctl start certbot\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u certbot -f\nsudo tail -f /var/log/certbot/certbot.log\n\n# Check configuration\ncertbot certificates\n\n# Check permissions\nls -la /etc/letsencrypt\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80/443\n\n# Test connectivity\ntelnet localhost 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep certbot)\n\n# Check disk I/O\niotop -p $(pgrep certbot)\n\n# Check network connections\nss -an | grep 80/443\n```\n\n\n\n## Integration Examples\n\n### Example Integration\n\n```yaml\n# Docker Compose example\nversion: '3.8'\nservices:\n  certbot:\n    image: certbot:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/letsencrypt\n      - ./data:/etc/letsencrypt\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update certbot\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade certbot\n\n# Arch Linux\nsudo pacman -Syu certbot\n\n# Alpine Linux\napk update && apk upgrade certbot\n\n# openSUSE\nsudo zypper update certbot\n\n# FreeBSD\npkg update && pkg upgrade certbot\n\n# Always backup before updates\ntar -czf /backup/certbot-$(date +%Y%m%d).tar.gz /etc/letsencrypt\n\n# Restart after updates\nsudo systemctl restart certbot\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/certbot\n\n# Clean old logs\nfind /var/log/certbot -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /etc/letsencrypt\n\n# Verify configuration\ncertbot certificates\n\n# Test functionality\ncertbot renew --dry-run\n```\n\n\n\n## Additional Resources\n\n- [Official Documentation](https://certbot.eff.org/docs/)\n- [GitHub Repository](https://github.com/certbot/certbot)\n- [Community Forum](https://community.letsencrypt.org/)\n- [Best Practices Guide](https://certbot.eff.org/docs/best-practices.html)\n\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"certbot-installation-guide\" class=\"mobile-header\">Certbot Installation Guide</h1>\n<p class=\"mobile-paragraph\">Certbot is a free and open-source ACME client for Let's Encrypt SSL/TLS certificate automation. Developed by the Electronic Frontier Foundation (EFF), Certbot automates the process of obtaining and renewing SSL/TLS certificates from Let's Encrypt, providing a free alternative to commercial certificate authorities like DigiCert, Comodo, or GoDaddy</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: HTTPS access to Let's Encrypt servers</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.12+ (Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows 10+ with WSL2</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80/443 (default Certbot port)</li>\n<li class=\"mobile-list-item\">Port 80 for HTTP-01 challenge, Port 443 for TLS-ALPN-01 challenge</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Python 3.6+, nginx/Apache (for web server plugins)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install Certbot\nsudo dnf install -y certbot\n\n# Enable and start service\nsudo systemctl enable --now certbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncertbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install Certbot\nsudo apt install -y certbot\n\n# Enable and start service\nsudo systemctl enable --now certbot\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\ncertbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo pacman -S certbot\n\n# Enable and start service\nsudo systemctl enable --now certbot\n\n# Verify installation\ncertbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\napk add --no-cache certbot\n\n# Enable and start service\nrc-update add certbot default\nrc-service certbot start\n\n# Verify installation\ncertbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo zypper install -y certbot\n\n# Enable and start service\nsudo systemctl enable --now certbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncertbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install certbot\n\n# Start service\nbrew services start certbot\n\n# Verify installation\ncertbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install certbot\n\n# Enable in rc.conf\necho &#039;certbot_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice certbot start\n\n# Verify installation\ncertbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install certbot\n\n# Or using Scoop\nscoop install certbot\n\n# Verify installation\ncertbot --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/letsencrypt\n\n# Set up basic configuration\n# Configuration details will vary based on your specific needs\n# See official documentation for detailed configuration options\n\n# Test configuration\ncertbot certificates</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable certbot\n\n# Start service\nsudo systemctl start certbot\n\n# Stop service\nsudo systemctl stop certbot\n\n# Restart service\nsudo systemctl restart certbot\n\n# Check status\nsudo systemctl status certbot\n\n# View logs\nsudo journalctl -u certbot -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add certbot default\n\n# Start service\nrc-service certbot start\n\n# Stop service\nrc-service certbot stop\n\n# Restart service\nrc-service certbot restart\n\n# Check status\nrc-service certbot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;certbot_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice certbot start\n\n# Stop service\nservice certbot stop\n\n# Restart service\nservice certbot restart\n\n# Check status\nservice certbot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start certbot\nbrew services stop certbot\nbrew services restart certbot\n\n# Check status\nbrew services list | grep certbot</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start certbot\n\n# Stop service\nnet stop certbot\n\n# Using PowerShell\nStart-Service certbot\nStop-Service certbot\nRestart-Service certbot\n\n# Check status\nGet-Service certbot</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"advanced-certbot-configuration\" class=\"mobile-header\">Advanced Certbot Configuration</h3>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options including:</p>\n<li class=\"mobile-list-item\">High availability setup</li>\n<li class=\"mobile-list-item\">Performance tuning</li>\n<li class=\"mobile-list-item\">Security hardening</li>\n<li class=\"mobile-list-item\">Integration with other services</li>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream certbot_backend {\n    server 127.0.0.1:80/443;\n}\n\nserver {\n    listen 80;\n    server_name certbot.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name certbot.example.com;\n\n    ssl_certificate /etc/ssl/certs/certbot.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/certbot.example.com.key;\n\n    location / {\n        proxy_pass http://certbot_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName certbot.example.com\n    Redirect permanent / https://certbot.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName certbot.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/certbot.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/certbot.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend certbot_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/certbot.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend certbot_backend\n\nbackend certbot_backend\n    balance roundrobin\n    server certbot1 127.0.0.1:80/443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"security-best-practices\" class=\"mobile-header\">Security Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R certbot:certbot /etc/letsencrypt\nsudo chmod 750 /etc/letsencrypt\n\n# Configure firewall rules\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Not applicable</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># System tuning for Certbot\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Monitor performance\ncertbot renew --dry-run</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"monitoring-setup\" class=\"mobile-header\">Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic monitoring\nsudo systemctl status certbot\nsudo journalctl -u certbot -f\n\n# Set up health checks\ncurl -f http://localhost:80/health || exit 1</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Backup script\nBACKUP_DIR=&quot;/backup/certbot&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf /backup/certbot-$(date +%Y%m%d).tar.gz /etc/letsencrypt\n\n# Restore procedure\n# Stop service, restore files, restart service\nsudo systemctl stop certbot\n# Restore backed up files\nsudo systemctl start certbot</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u certbot -f\nsudo tail -f /var/log/certbot/certbot.log\n\n# Check configuration\ncertbot certificates\n\n# Check permissions\nls -la /etc/letsencrypt</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80/443\n\n# Test connectivity\ntelnet localhost 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep certbot)\n\n# Check disk I/O\niotop -p $(pgrep certbot)\n\n# Check network connections\nss -an | grep 80/443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"example-integration\" class=\"mobile-header\">Example Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Docker Compose example\nversion: &#039;3.8&#039;\nservices:\n  certbot:\n    image: certbot:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/letsencrypt\n      - ./data:/etc/letsencrypt\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update certbot\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade certbot\n\n# Arch Linux\nsudo pacman -Syu certbot\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade certbot\n\n# openSUSE\nsudo zypper update certbot\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade certbot\n\n# Always backup before updates\ntar -czf /backup/certbot-$(date +%Y%m%d).tar.gz /etc/letsencrypt\n\n# Restart after updates\nsudo systemctl restart certbot</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/certbot\n\n# Clean old logs\nfind /var/log/certbot -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /etc/letsencrypt\n\n# Verify configuration\ncertbot certificates\n\n# Test functionality\ncertbot renew --dry-run</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://certbot.eff.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/certbot/certbot\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://community.letsencrypt.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://certbot.eff.org/docs/best-practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1230,"lastBuilt":"2025-09-16T03:18:08.690Z","metadataVersion":"2.0"},{"name":"checkmk","displayName":"checkmk Installation Guide","slug":"checkmk","description":"checkmk is a free and open-source IT monitoring. Checkmk provides comprehensive IT monitoring solution","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/checkmk","documentationUrl":"https://howtomgr.github.io/miscellaneous/checkmk","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/checkmk","updatedAt":"2025-09-16T03:01:33Z","createdAt":"2025-09-16T02:25:14Z","readmeRaw":"# checkmk Installation Guide\n\ncheckmk is a free and open-source IT monitoring. Checkmk provides comprehensive IT monitoring solution\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 4GB minimum\n  - Storage: 10GB for data\n  - Network: HTTP/agent access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default checkmk port)\n  - Agent on 6556\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install checkmk\nsudo dnf install -y checkmk\n\n# Enable and start service\nsudo systemctl enable --now checkmk\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncheckmk --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install checkmk\nsudo apt install -y checkmk\n\n# Enable and start service\nsudo systemctl enable --now checkmk\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ncheckmk --version\n```\n\n### Arch Linux\n\n```bash\n# Install checkmk\nsudo pacman -S checkmk\n\n# Enable and start service\nsudo systemctl enable --now checkmk\n\n# Verify installation\ncheckmk --version\n```\n\n### Alpine Linux\n\n```bash\n# Install checkmk\napk add --no-cache checkmk\n\n# Enable and start service\nrc-update add checkmk default\nrc-service checkmk start\n\n# Verify installation\ncheckmk --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install checkmk\nsudo zypper install -y checkmk\n\n# Enable and start service\nsudo systemctl enable --now checkmk\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncheckmk --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install checkmk\n\n# Start service\nbrew services start checkmk\n\n# Verify installation\ncheckmk --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install checkmk\n\n# Enable in rc.conf\necho 'checkmk_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice checkmk start\n\n# Verify installation\ncheckmk --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install checkmk\n\n# Or using Scoop\nscoop install checkmk\n\n# Verify installation\ncheckmk --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/checkmk\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncheckmk --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable checkmk\n\n# Start service\nsudo systemctl start checkmk\n\n# Stop service\nsudo systemctl stop checkmk\n\n# Restart service\nsudo systemctl restart checkmk\n\n# Check status\nsudo systemctl status checkmk\n\n# View logs\nsudo journalctl -u checkmk -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add checkmk default\n\n# Start service\nrc-service checkmk start\n\n# Stop service\nrc-service checkmk stop\n\n# Restart service\nrc-service checkmk restart\n\n# Check status\nrc-service checkmk status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'checkmk_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice checkmk start\n\n# Stop service\nservice checkmk stop\n\n# Restart service\nservice checkmk restart\n\n# Check status\nservice checkmk status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start checkmk\nbrew services stop checkmk\nbrew services restart checkmk\n\n# Check status\nbrew services list | grep checkmk\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start checkmk\n\n# Stop service\nnet stop checkmk\n\n# Using PowerShell\nStart-Service checkmk\nStop-Service checkmk\nRestart-Service checkmk\n\n# Check status\nGet-Service checkmk\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream checkmk_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name checkmk.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name checkmk.example.com;\n\n    ssl_certificate /etc/ssl/certs/checkmk.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/checkmk.example.com.key;\n\n    location / {\n        proxy_pass http://checkmk_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName checkmk.example.com\n    Redirect permanent / https://checkmk.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName checkmk.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/checkmk.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/checkmk.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend checkmk_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/checkmk.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend checkmk_backend\n\nbackend checkmk_backend\n    balance roundrobin\n    server checkmk1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R checkmk:checkmk /etc/checkmk\nsudo chmod 750 /etc/checkmk\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status checkmk\n\n# View logs\nsudo journalctl -u checkmk -f\n\n# Monitor resource usage\ntop -p $(pgrep checkmk)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/checkmk\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/checkmk-backup-$DATE.tar.gz\" /etc/checkmk /var/lib/checkmk\n\necho \"Backup completed: $BACKUP_DIR/checkmk-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop checkmk\n\n# Restore from backup\ntar -xzf /backup/checkmk/checkmk-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start checkmk\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u checkmk -n 100\nsudo tail -f /var/log/checkmk/checkmk.log\n\n# Check configuration\ncheckmk --version\n\n# Check permissions\nls -la /etc/checkmk\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep checkmk)\n\n# Check disk I/O\niotop -p $(pgrep checkmk)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  checkmk:\n    image: checkmk:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/checkmk\n      - ./data:/var/lib/checkmk\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update checkmk\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade checkmk\n\n# Arch Linux\nsudo pacman -Syu checkmk\n\n# Alpine Linux\napk update && apk upgrade checkmk\n\n# openSUSE\nsudo zypper update checkmk\n\n# FreeBSD\npkg update && pkg upgrade checkmk\n\n# Always backup before updates\ntar -czf /backup/checkmk-pre-update-$(date +%Y%m%d).tar.gz /etc/checkmk\n\n# Restart after updates\nsudo systemctl restart checkmk\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/checkmk\n\n# Clean old logs\nfind /var/log/checkmk -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/checkmk\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.checkmk.org/\n- GitHub Repository: https://github.com/checkmk/checkmk\n- Community Forum: https://forum.checkmk.org/\n- Best Practices Guide: https://docs.checkmk.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"checkmk-installation-guide\" class=\"mobile-header\">checkmk Installation Guide</h1>\n<p class=\"mobile-paragraph\">checkmk is a free and open-source IT monitoring. Checkmk provides comprehensive IT monitoring solution</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/agent access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default checkmk port)</li>\n<li class=\"mobile-list-item\">Agent on 6556</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install checkmk\nsudo dnf install -y checkmk\n\n# Enable and start service\nsudo systemctl enable --now checkmk\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install checkmk\nsudo apt install -y checkmk\n\n# Enable and start service\nsudo systemctl enable --now checkmk\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install checkmk\nsudo pacman -S checkmk\n\n# Enable and start service\nsudo systemctl enable --now checkmk\n\n# Verify installation\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install checkmk\napk add --no-cache checkmk\n\n# Enable and start service\nrc-update add checkmk default\nrc-service checkmk start\n\n# Verify installation\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install checkmk\nsudo zypper install -y checkmk\n\n# Enable and start service\nsudo systemctl enable --now checkmk\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install checkmk\n\n# Start service\nbrew services start checkmk\n\n# Verify installation\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install checkmk\n\n# Enable in rc.conf\necho &#039;checkmk_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice checkmk start\n\n# Verify installation\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install checkmk\n\n# Or using Scoop\nscoop install checkmk\n\n# Verify installation\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/checkmk\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncheckmk --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable checkmk\n\n# Start service\nsudo systemctl start checkmk\n\n# Stop service\nsudo systemctl stop checkmk\n\n# Restart service\nsudo systemctl restart checkmk\n\n# Check status\nsudo systemctl status checkmk\n\n# View logs\nsudo journalctl -u checkmk -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add checkmk default\n\n# Start service\nrc-service checkmk start\n\n# Stop service\nrc-service checkmk stop\n\n# Restart service\nrc-service checkmk restart\n\n# Check status\nrc-service checkmk status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;checkmk_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice checkmk start\n\n# Stop service\nservice checkmk stop\n\n# Restart service\nservice checkmk restart\n\n# Check status\nservice checkmk status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start checkmk\nbrew services stop checkmk\nbrew services restart checkmk\n\n# Check status\nbrew services list | grep checkmk</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start checkmk\n\n# Stop service\nnet stop checkmk\n\n# Using PowerShell\nStart-Service checkmk\nStop-Service checkmk\nRestart-Service checkmk\n\n# Check status\nGet-Service checkmk</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream checkmk_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name checkmk.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name checkmk.example.com;\n\n    ssl_certificate /etc/ssl/certs/checkmk.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/checkmk.example.com.key;\n\n    location / {\n        proxy_pass http://checkmk_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName checkmk.example.com\n    Redirect permanent / https://checkmk.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName checkmk.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/checkmk.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/checkmk.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend checkmk_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/checkmk.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend checkmk_backend\n\nbackend checkmk_backend\n    balance roundrobin\n    server checkmk1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R checkmk:checkmk /etc/checkmk\nsudo chmod 750 /etc/checkmk\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status checkmk\n\n# View logs\nsudo journalctl -u checkmk -f\n\n# Monitor resource usage\ntop -p $(pgrep checkmk)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/checkmk&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/checkmk-backup-$DATE.tar.gz&quot; /etc/checkmk /var/lib/checkmk\n\necho &quot;Backup completed: $BACKUP_DIR/checkmk-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop checkmk\n\n# Restore from backup\ntar -xzf /backup/checkmk/checkmk-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start checkmk</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u checkmk -n 100\nsudo tail -f /var/log/checkmk/checkmk.log\n\n# Check configuration\ncheckmk --version\n\n# Check permissions\nls -la /etc/checkmk</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep checkmk)\n\n# Check disk I/O\niotop -p $(pgrep checkmk)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  checkmk:\n    image: checkmk:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/checkmk\n      - ./data:/var/lib/checkmk\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update checkmk\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade checkmk\n\n# Arch Linux\nsudo pacman -Syu checkmk\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade checkmk\n\n# openSUSE\nsudo zypper update checkmk\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade checkmk\n\n# Always backup before updates\ntar -czf /backup/checkmk-pre-update-$(date +%Y%m%d).tar.gz /etc/checkmk\n\n# Restart after updates\nsudo systemctl restart checkmk</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/checkmk\n\n# Clean old logs\nfind /var/log/checkmk -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/checkmk</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.checkmk.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/checkmk/checkmk</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.checkmk.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.checkmk.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1153,"lastBuilt":"2025-09-16T03:18:07.646Z","metadataVersion":"2.0"},{"name":"chronograf","displayName":"chronograf Installation Guide","slug":"chronograf","description":"chronograf is a free and open-source InfluxDB interface. Chronograf provides visualization interface for InfluxDB","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8888],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/chronograf","documentationUrl":"https://howtomgr.github.io/miscellaneous/chronograf","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/chronograf","updatedAt":"2025-09-16T03:01:54Z","createdAt":"2025-09-16T02:25:43Z","readmeRaw":"# chronograf Installation Guide\n\nchronograf is a free and open-source InfluxDB interface. Chronograf provides visualization interface for InfluxDB\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8888 (default chronograf port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install chronograf\nsudo dnf install -y chronograf\n\n# Enable and start service\nsudo systemctl enable --now chronograf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8888/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nchronograf --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install chronograf\nsudo apt install -y chronograf\n\n# Enable and start service\nsudo systemctl enable --now chronograf\n\n# Configure firewall\nsudo ufw allow 8888\n\n# Verify installation\nchronograf --version\n```\n\n### Arch Linux\n\n```bash\n# Install chronograf\nsudo pacman -S chronograf\n\n# Enable and start service\nsudo systemctl enable --now chronograf\n\n# Verify installation\nchronograf --version\n```\n\n### Alpine Linux\n\n```bash\n# Install chronograf\napk add --no-cache chronograf\n\n# Enable and start service\nrc-update add chronograf default\nrc-service chronograf start\n\n# Verify installation\nchronograf --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install chronograf\nsudo zypper install -y chronograf\n\n# Enable and start service\nsudo systemctl enable --now chronograf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8888/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nchronograf --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install chronograf\n\n# Start service\nbrew services start chronograf\n\n# Verify installation\nchronograf --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install chronograf\n\n# Enable in rc.conf\necho 'chronograf_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice chronograf start\n\n# Verify installation\nchronograf --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install chronograf\n\n# Or using Scoop\nscoop install chronograf\n\n# Verify installation\nchronograf --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/chronograf\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nchronograf --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable chronograf\n\n# Start service\nsudo systemctl start chronograf\n\n# Stop service\nsudo systemctl stop chronograf\n\n# Restart service\nsudo systemctl restart chronograf\n\n# Check status\nsudo systemctl status chronograf\n\n# View logs\nsudo journalctl -u chronograf -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add chronograf default\n\n# Start service\nrc-service chronograf start\n\n# Stop service\nrc-service chronograf stop\n\n# Restart service\nrc-service chronograf restart\n\n# Check status\nrc-service chronograf status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'chronograf_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice chronograf start\n\n# Stop service\nservice chronograf stop\n\n# Restart service\nservice chronograf restart\n\n# Check status\nservice chronograf status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start chronograf\nbrew services stop chronograf\nbrew services restart chronograf\n\n# Check status\nbrew services list | grep chronograf\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start chronograf\n\n# Stop service\nnet stop chronograf\n\n# Using PowerShell\nStart-Service chronograf\nStop-Service chronograf\nRestart-Service chronograf\n\n# Check status\nGet-Service chronograf\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream chronograf_backend {\n    server 127.0.0.1:8888;\n}\n\nserver {\n    listen 80;\n    server_name chronograf.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name chronograf.example.com;\n\n    ssl_certificate /etc/ssl/certs/chronograf.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/chronograf.example.com.key;\n\n    location / {\n        proxy_pass http://chronograf_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName chronograf.example.com\n    Redirect permanent / https://chronograf.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName chronograf.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/chronograf.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/chronograf.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8888/\n    ProxyPassReverse / http://127.0.0.1:8888/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend chronograf_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chronograf.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend chronograf_backend\n\nbackend chronograf_backend\n    balance roundrobin\n    server chronograf1 127.0.0.1:8888 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R chronograf:chronograf /etc/chronograf\nsudo chmod 750 /etc/chronograf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8888/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status chronograf\n\n# View logs\nsudo journalctl -u chronograf -f\n\n# Monitor resource usage\ntop -p $(pgrep chronograf)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/chronograf\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/chronograf-backup-$DATE.tar.gz\" /etc/chronograf /var/lib/chronograf\n\necho \"Backup completed: $BACKUP_DIR/chronograf-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop chronograf\n\n# Restore from backup\ntar -xzf /backup/chronograf/chronograf-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start chronograf\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u chronograf -n 100\nsudo tail -f /var/log/chronograf/chronograf.log\n\n# Check configuration\nchronograf --version\n\n# Check permissions\nls -la /etc/chronograf\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8888\n\n# Test connectivity\ntelnet localhost 8888\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep chronograf)\n\n# Check disk I/O\niotop -p $(pgrep chronograf)\n\n# Check connections\nss -an | grep 8888\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  chronograf:\n    image: chronograf:latest\n    ports:\n      - \"8888:8888\"\n    volumes:\n      - ./config:/etc/chronograf\n      - ./data:/var/lib/chronograf\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update chronograf\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade chronograf\n\n# Arch Linux\nsudo pacman -Syu chronograf\n\n# Alpine Linux\napk update && apk upgrade chronograf\n\n# openSUSE\nsudo zypper update chronograf\n\n# FreeBSD\npkg update && pkg upgrade chronograf\n\n# Always backup before updates\ntar -czf /backup/chronograf-pre-update-$(date +%Y%m%d).tar.gz /etc/chronograf\n\n# Restart after updates\nsudo systemctl restart chronograf\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/chronograf\n\n# Clean old logs\nfind /var/log/chronograf -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/chronograf\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.chronograf.org/\n- GitHub Repository: https://github.com/chronograf/chronograf\n- Community Forum: https://forum.chronograf.org/\n- Best Practices Guide: https://docs.chronograf.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"chronograf-installation-guide\" class=\"mobile-header\">chronograf Installation Guide</h1>\n<p class=\"mobile-paragraph\">chronograf is a free and open-source InfluxDB interface. Chronograf provides visualization interface for InfluxDB</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8888 (default chronograf port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install chronograf\nsudo dnf install -y chronograf\n\n# Enable and start service\nsudo systemctl enable --now chronograf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8888/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install chronograf\nsudo apt install -y chronograf\n\n# Enable and start service\nsudo systemctl enable --now chronograf\n\n# Configure firewall\nsudo ufw allow 8888\n\n# Verify installation\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install chronograf\nsudo pacman -S chronograf\n\n# Enable and start service\nsudo systemctl enable --now chronograf\n\n# Verify installation\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install chronograf\napk add --no-cache chronograf\n\n# Enable and start service\nrc-update add chronograf default\nrc-service chronograf start\n\n# Verify installation\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install chronograf\nsudo zypper install -y chronograf\n\n# Enable and start service\nsudo systemctl enable --now chronograf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8888/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install chronograf\n\n# Start service\nbrew services start chronograf\n\n# Verify installation\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install chronograf\n\n# Enable in rc.conf\necho &#039;chronograf_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice chronograf start\n\n# Verify installation\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install chronograf\n\n# Or using Scoop\nscoop install chronograf\n\n# Verify installation\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/chronograf\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nchronograf --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable chronograf\n\n# Start service\nsudo systemctl start chronograf\n\n# Stop service\nsudo systemctl stop chronograf\n\n# Restart service\nsudo systemctl restart chronograf\n\n# Check status\nsudo systemctl status chronograf\n\n# View logs\nsudo journalctl -u chronograf -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add chronograf default\n\n# Start service\nrc-service chronograf start\n\n# Stop service\nrc-service chronograf stop\n\n# Restart service\nrc-service chronograf restart\n\n# Check status\nrc-service chronograf status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;chronograf_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice chronograf start\n\n# Stop service\nservice chronograf stop\n\n# Restart service\nservice chronograf restart\n\n# Check status\nservice chronograf status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start chronograf\nbrew services stop chronograf\nbrew services restart chronograf\n\n# Check status\nbrew services list | grep chronograf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start chronograf\n\n# Stop service\nnet stop chronograf\n\n# Using PowerShell\nStart-Service chronograf\nStop-Service chronograf\nRestart-Service chronograf\n\n# Check status\nGet-Service chronograf</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream chronograf_backend {\n    server 127.0.0.1:8888;\n}\n\nserver {\n    listen 80;\n    server_name chronograf.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name chronograf.example.com;\n\n    ssl_certificate /etc/ssl/certs/chronograf.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/chronograf.example.com.key;\n\n    location / {\n        proxy_pass http://chronograf_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName chronograf.example.com\n    Redirect permanent / https://chronograf.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName chronograf.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/chronograf.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/chronograf.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8888/\n    ProxyPassReverse / http://127.0.0.1:8888/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend chronograf_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chronograf.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend chronograf_backend\n\nbackend chronograf_backend\n    balance roundrobin\n    server chronograf1 127.0.0.1:8888 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R chronograf:chronograf /etc/chronograf\nsudo chmod 750 /etc/chronograf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8888/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status chronograf\n\n# View logs\nsudo journalctl -u chronograf -f\n\n# Monitor resource usage\ntop -p $(pgrep chronograf)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/chronograf&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/chronograf-backup-$DATE.tar.gz&quot; /etc/chronograf /var/lib/chronograf\n\necho &quot;Backup completed: $BACKUP_DIR/chronograf-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop chronograf\n\n# Restore from backup\ntar -xzf /backup/chronograf/chronograf-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start chronograf</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u chronograf -n 100\nsudo tail -f /var/log/chronograf/chronograf.log\n\n# Check configuration\nchronograf --version\n\n# Check permissions\nls -la /etc/chronograf</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8888\n\n# Test connectivity\ntelnet localhost 8888\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep chronograf)\n\n# Check disk I/O\niotop -p $(pgrep chronograf)\n\n# Check connections\nss -an | grep 8888</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  chronograf:\n    image: chronograf:latest\n    ports:\n      - &quot;8888:8888&quot;\n    volumes:\n      - ./config:/etc/chronograf\n      - ./data:/var/lib/chronograf\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update chronograf\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade chronograf\n\n# Arch Linux\nsudo pacman -Syu chronograf\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade chronograf\n\n# openSUSE\nsudo zypper update chronograf\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade chronograf\n\n# Always backup before updates\ntar -czf /backup/chronograf-pre-update-$(date +%Y%m%d).tar.gz /etc/chronograf\n\n# Restart after updates\nsudo systemctl restart chronograf</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/chronograf\n\n# Clean old logs\nfind /var/log/chronograf -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/chronograf</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.chronograf.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/chronograf/chronograf</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.chronograf.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.chronograf.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1152,"lastBuilt":"2025-09-16T03:18:06.596Z","metadataVersion":"2.0"},{"name":"clickhouse-server","displayName":"clickhouse Installation Guide","slug":"clickhouse-server","description":"clickhouse is a free and open-source column-oriented database for real-time analytics. ClickHouse provides blazing fast analytics on large datasets with SQL interface, serving as an open-source alternative to Amazon Redshift or Google BigQuery","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8123,9000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/clickhouse-server","documentationUrl":"https://howtomgr.github.io/miscellaneous/clickhouse-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/clickhouse-server","updatedAt":"2025-09-16T03:02:22Z","createdAt":"2025-09-16T02:26:14Z","readmeRaw":"# clickhouse Installation Guide\n\nclickhouse is a free and open-source column-oriented database for real-time analytics. ClickHouse provides blazing fast analytics on large datasets with SQL interface, serving as an open-source alternative to Amazon Redshift or Google BigQuery\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores recommended\n  - RAM: 4GB minimum (16GB+ recommended)\n  - Storage: 10GB+ for data\n  - Network: HTTP and native protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8123 (default clickhouse port)\n  - Port 9000 for native protocol\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install clickhouse\nsudo dnf install -y clickhouse-server\n\n# Enable and start service\nsudo systemctl enable --now clickhouse-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8123/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nclickhouse-server --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install clickhouse\nsudo apt install -y clickhouse-server\n\n# Enable and start service\nsudo systemctl enable --now clickhouse-server\n\n# Configure firewall\nsudo ufw allow 8123\n\n# Verify installation\nclickhouse-server --version\n```\n\n### Arch Linux\n\n```bash\n# Install clickhouse\nsudo pacman -S clickhouse-server\n\n# Enable and start service\nsudo systemctl enable --now clickhouse-server\n\n# Verify installation\nclickhouse-server --version\n```\n\n### Alpine Linux\n\n```bash\n# Install clickhouse\napk add --no-cache clickhouse-server\n\n# Enable and start service\nrc-update add clickhouse-server default\nrc-service clickhouse-server start\n\n# Verify installation\nclickhouse-server --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install clickhouse\nsudo zypper install -y clickhouse-server\n\n# Enable and start service\nsudo systemctl enable --now clickhouse-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8123/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nclickhouse-server --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install clickhouse-server\n\n# Start service\nbrew services start clickhouse-server\n\n# Verify installation\nclickhouse-server --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install clickhouse-server\n\n# Enable in rc.conf\necho 'clickhouse-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice clickhouse-server start\n\n# Verify installation\nclickhouse-server --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install clickhouse-server\n\n# Or using Scoop\nscoop install clickhouse-server\n\n# Verify installation\nclickhouse-server --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/clickhouse-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nclickhouse-server --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable clickhouse-server\n\n# Start service\nsudo systemctl start clickhouse-server\n\n# Stop service\nsudo systemctl stop clickhouse-server\n\n# Restart service\nsudo systemctl restart clickhouse-server\n\n# Check status\nsudo systemctl status clickhouse-server\n\n# View logs\nsudo journalctl -u clickhouse-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add clickhouse-server default\n\n# Start service\nrc-service clickhouse-server start\n\n# Stop service\nrc-service clickhouse-server stop\n\n# Restart service\nrc-service clickhouse-server restart\n\n# Check status\nrc-service clickhouse-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'clickhouse-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice clickhouse-server start\n\n# Stop service\nservice clickhouse-server stop\n\n# Restart service\nservice clickhouse-server restart\n\n# Check status\nservice clickhouse-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start clickhouse-server\nbrew services stop clickhouse-server\nbrew services restart clickhouse-server\n\n# Check status\nbrew services list | grep clickhouse-server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start clickhouse-server\n\n# Stop service\nnet stop clickhouse-server\n\n# Using PowerShell\nStart-Service clickhouse-server\nStop-Service clickhouse-server\nRestart-Service clickhouse-server\n\n# Check status\nGet-Service clickhouse-server\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream clickhouse-server_backend {\n    server 127.0.0.1:8123;\n}\n\nserver {\n    listen 80;\n    server_name clickhouse-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name clickhouse-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/clickhouse-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/clickhouse-server.example.com.key;\n\n    location / {\n        proxy_pass http://clickhouse-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName clickhouse-server.example.com\n    Redirect permanent / https://clickhouse-server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName clickhouse-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/clickhouse-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/clickhouse-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8123/\n    ProxyPassReverse / http://127.0.0.1:8123/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend clickhouse-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/clickhouse-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend clickhouse-server_backend\n\nbackend clickhouse-server_backend\n    balance roundrobin\n    server clickhouse-server1 127.0.0.1:8123 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R clickhouse-server:clickhouse-server /etc/clickhouse-server\nsudo chmod 750 /etc/clickhouse-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8123/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status clickhouse-server\n\n# View logs\nsudo journalctl -u clickhouse-server -f\n\n# Monitor resource usage\ntop -p $(pgrep clickhouse-server)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/clickhouse-server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/clickhouse-server-backup-$DATE.tar.gz\" /etc/clickhouse-server /var/lib/clickhouse-server\n\necho \"Backup completed: $BACKUP_DIR/clickhouse-server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop clickhouse-server\n\n# Restore from backup\ntar -xzf /backup/clickhouse-server/clickhouse-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start clickhouse-server\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u clickhouse-server -n 100\nsudo tail -f /var/log/clickhouse-server/clickhouse-server.log\n\n# Check configuration\nclickhouse-server --version\n\n# Check permissions\nls -la /etc/clickhouse-server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8123\n\n# Test connectivity\ntelnet localhost 8123\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep clickhouse-server)\n\n# Check disk I/O\niotop -p $(pgrep clickhouse-server)\n\n# Check connections\nss -an | grep 8123\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  clickhouse-server:\n    image: clickhouse-server:latest\n    ports:\n      - \"8123:8123\"\n    volumes:\n      - ./config:/etc/clickhouse-server\n      - ./data:/var/lib/clickhouse-server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update clickhouse-server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade clickhouse-server\n\n# Arch Linux\nsudo pacman -Syu clickhouse-server\n\n# Alpine Linux\napk update && apk upgrade clickhouse-server\n\n# openSUSE\nsudo zypper update clickhouse-server\n\n# FreeBSD\npkg update && pkg upgrade clickhouse-server\n\n# Always backup before updates\ntar -czf /backup/clickhouse-server-pre-update-$(date +%Y%m%d).tar.gz /etc/clickhouse-server\n\n# Restart after updates\nsudo systemctl restart clickhouse-server\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/clickhouse-server\n\n# Clean old logs\nfind /var/log/clickhouse-server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/clickhouse-server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.clickhouse-server.org/\n- GitHub Repository: https://github.com/clickhouse-server/clickhouse-server\n- Community Forum: https://forum.clickhouse-server.org/\n- Best Practices Guide: https://docs.clickhouse-server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"clickhouse-installation-guide\" class=\"mobile-header\">clickhouse Installation Guide</h1>\n<p class=\"mobile-paragraph\">clickhouse is a free and open-source column-oriented database for real-time analytics. ClickHouse provides blazing fast analytics on large datasets with SQL interface, serving as an open-source alternative to Amazon Redshift or Google BigQuery</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum (16GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for data</li>\n<li class=\"mobile-list-item\">Network: HTTP and native protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8123 (default clickhouse port)</li>\n<li class=\"mobile-list-item\">Port 9000 for native protocol</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install clickhouse\nsudo dnf install -y clickhouse-server\n\n# Enable and start service\nsudo systemctl enable --now clickhouse-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8123/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install clickhouse\nsudo apt install -y clickhouse-server\n\n# Enable and start service\nsudo systemctl enable --now clickhouse-server\n\n# Configure firewall\nsudo ufw allow 8123\n\n# Verify installation\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install clickhouse\nsudo pacman -S clickhouse-server\n\n# Enable and start service\nsudo systemctl enable --now clickhouse-server\n\n# Verify installation\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install clickhouse\napk add --no-cache clickhouse-server\n\n# Enable and start service\nrc-update add clickhouse-server default\nrc-service clickhouse-server start\n\n# Verify installation\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install clickhouse\nsudo zypper install -y clickhouse-server\n\n# Enable and start service\nsudo systemctl enable --now clickhouse-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8123/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install clickhouse-server\n\n# Start service\nbrew services start clickhouse-server\n\n# Verify installation\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install clickhouse-server\n\n# Enable in rc.conf\necho &#039;clickhouse-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice clickhouse-server start\n\n# Verify installation\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install clickhouse-server\n\n# Or using Scoop\nscoop install clickhouse-server\n\n# Verify installation\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/clickhouse-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nclickhouse-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable clickhouse-server\n\n# Start service\nsudo systemctl start clickhouse-server\n\n# Stop service\nsudo systemctl stop clickhouse-server\n\n# Restart service\nsudo systemctl restart clickhouse-server\n\n# Check status\nsudo systemctl status clickhouse-server\n\n# View logs\nsudo journalctl -u clickhouse-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add clickhouse-server default\n\n# Start service\nrc-service clickhouse-server start\n\n# Stop service\nrc-service clickhouse-server stop\n\n# Restart service\nrc-service clickhouse-server restart\n\n# Check status\nrc-service clickhouse-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;clickhouse-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice clickhouse-server start\n\n# Stop service\nservice clickhouse-server stop\n\n# Restart service\nservice clickhouse-server restart\n\n# Check status\nservice clickhouse-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start clickhouse-server\nbrew services stop clickhouse-server\nbrew services restart clickhouse-server\n\n# Check status\nbrew services list | grep clickhouse-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start clickhouse-server\n\n# Stop service\nnet stop clickhouse-server\n\n# Using PowerShell\nStart-Service clickhouse-server\nStop-Service clickhouse-server\nRestart-Service clickhouse-server\n\n# Check status\nGet-Service clickhouse-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream clickhouse-server_backend {\n    server 127.0.0.1:8123;\n}\n\nserver {\n    listen 80;\n    server_name clickhouse-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name clickhouse-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/clickhouse-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/clickhouse-server.example.com.key;\n\n    location / {\n        proxy_pass http://clickhouse-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName clickhouse-server.example.com\n    Redirect permanent / https://clickhouse-server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName clickhouse-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/clickhouse-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/clickhouse-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8123/\n    ProxyPassReverse / http://127.0.0.1:8123/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend clickhouse-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/clickhouse-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend clickhouse-server_backend\n\nbackend clickhouse-server_backend\n    balance roundrobin\n    server clickhouse-server1 127.0.0.1:8123 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R clickhouse-server:clickhouse-server /etc/clickhouse-server\nsudo chmod 750 /etc/clickhouse-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8123/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status clickhouse-server\n\n# View logs\nsudo journalctl -u clickhouse-server -f\n\n# Monitor resource usage\ntop -p $(pgrep clickhouse-server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/clickhouse-server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/clickhouse-server-backup-$DATE.tar.gz&quot; /etc/clickhouse-server /var/lib/clickhouse-server\n\necho &quot;Backup completed: $BACKUP_DIR/clickhouse-server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop clickhouse-server\n\n# Restore from backup\ntar -xzf /backup/clickhouse-server/clickhouse-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start clickhouse-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u clickhouse-server -n 100\nsudo tail -f /var/log/clickhouse-server/clickhouse-server.log\n\n# Check configuration\nclickhouse-server --version\n\n# Check permissions\nls -la /etc/clickhouse-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8123\n\n# Test connectivity\ntelnet localhost 8123\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep clickhouse-server)\n\n# Check disk I/O\niotop -p $(pgrep clickhouse-server)\n\n# Check connections\nss -an | grep 8123</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  clickhouse-server:\n    image: clickhouse-server:latest\n    ports:\n      - &quot;8123:8123&quot;\n    volumes:\n      - ./config:/etc/clickhouse-server\n      - ./data:/var/lib/clickhouse-server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update clickhouse-server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade clickhouse-server\n\n# Arch Linux\nsudo pacman -Syu clickhouse-server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade clickhouse-server\n\n# openSUSE\nsudo zypper update clickhouse-server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade clickhouse-server\n\n# Always backup before updates\ntar -czf /backup/clickhouse-server-pre-update-$(date +%Y%m%d).tar.gz /etc/clickhouse-server\n\n# Restart after updates\nsudo systemctl restart clickhouse-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/clickhouse-server\n\n# Clean old logs\nfind /var/log/clickhouse-server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/clickhouse-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.clickhouse-server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/clickhouse-server/clickhouse-server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.clickhouse-server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.clickhouse-server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1179,"lastBuilt":"2025-09-16T03:18:05.277Z","metadataVersion":"2.0"},{"name":"cloudflare-tunnel","displayName":"Cloudflare Tunnel Installation Guide","slug":"cloudflare-tunnel","description":"Secure way to connect your applications to Cloudflare without opening inbound ports. Essential tool for exposing self-hosted services securely through Cloudflare's global network.","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux"],"defaultPorts":[80,404,3000,8096,8123],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","security","communication","networking"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/cloudflare-tunnel","documentationUrl":"https://howtomgr.github.io/miscellaneous/cloudflare-tunnel","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cloudflare-tunnel","updatedAt":"2025-09-16T03:02:37Z","createdAt":"2025-09-16T02:26:32Z","readmeRaw":"# Cloudflare Tunnel Installation Guide\n\nSecure way to connect your applications to Cloudflare without opening inbound ports. Essential tool for exposing self-hosted services securely through Cloudflare's global network.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- Cloudflare account with domain configured\n- Applications running locally that need external access\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Download cloudflared\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\nsudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared\nsudo chmod +x /usr/local/bin/cloudflared\n\n# Verify installation\ncloudflared --version\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Download and install cloudflared\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\nsudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared\nsudo chmod +x /usr/local/bin/cloudflared\n\n# Verify installation\ncloudflared --version\n```\n\n### Docker Installation\n```bash\n# Run cloudflared in Docker\nmkdir -p ~/.cloudflared\n\ndocker run -d \\\n  --name cloudflared \\\n  --restart unless-stopped \\\n  -v ~/.cloudflared:/etc/cloudflared \\\n  cloudflare/cloudflared:latest \\\n  tunnel run\n```\n\n## Configuration\n\n### Tunnel Setup\n```bash\n# Authenticate with Cloudflare\ncloudflared tunnel login\n\n# Create tunnel\ncloudflared tunnel create myserver-tunnel\n\n# List tunnels\ncloudflared tunnel list\n\n# Create configuration file\nsudo mkdir -p /etc/cloudflared\nsudo tee /etc/cloudflared/config.yml > /dev/null <<EOF\n# Cloudflare Tunnel Configuration\n\ntunnel: your-tunnel-id-here\ncredentials-file: /etc/cloudflared/your-tunnel-id.json\n\n# Ingress rules\ningress:\n  # Home Assistant\n  - hostname: homeassistant.example.com\n    service: http://localhost:8123\n    \n  # Nextcloud\n  - hostname: nextcloud.example.com\n    service: http://localhost:80\n    \n  # Grafana\n  - hostname: grafana.example.com\n    service: http://localhost:3000\n    \n  # Jellyfin media server\n  - hostname: jellyfin.example.com\n    service: http://localhost:8096\n    \n  # Default catch-all (required)\n  - service: http_status:404\n\n# Global configuration\nwarp-routing:\n  enabled: true\nEOF\n\n# Copy tunnel credentials\nsudo cp ~/.cloudflared/your-tunnel-id.json /etc/cloudflared/\nsudo chown cloudflared:cloudflared /etc/cloudflared/*\nsudo chmod 600 /etc/cloudflared/*.json\n```\n\n### DNS Configuration\n```bash\n# Create DNS records for tunnel\ncloudflared tunnel route dns myserver-tunnel homeassistant.example.com\ncloudflared tunnel route dns myserver-tunnel nextcloud.example.com\ncloudflared tunnel route dns myserver-tunnel grafana.example.com\ncloudflared tunnel route dns myserver-tunnel jellyfin.example.com\n\n# Verify DNS records\ndig homeassistant.example.com\n```\n\n### SystemD Service\n```bash\n# Install as system service\nsudo cloudflared service install\n\n# Create custom service with security\nsudo tee /etc/systemd/system/cloudflared.service > /dev/null <<EOF\n[Unit]\nDescription=Cloudflare Tunnel\nAfter=network.target\n\n[Service]\nType=simple\nUser=cloudflared\nGroup=cloudflared\nExecStart=/usr/local/bin/cloudflared tunnel run\nRestart=always\nRestartSec=5s\nStandardOutput=journal\nStandardError=journal\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/log/cloudflared\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create cloudflared user\nsudo useradd --system --shell /bin/false cloudflared\nsudo chown -R cloudflared:cloudflared /etc/cloudflared\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now cloudflared\n```\n\n## Security Configuration\n\n### Access Control with Cloudflare Access\n```bash\n# Configure Cloudflare Access policies via API or Dashboard\n# Example: Restrict access to specific applications\n\n# Create access policy for sensitive services\ncat > access-policy.json <<EOF\n{\n  \"name\": \"Admin Access Only\",\n  \"decision\": \"allow\",\n  \"include\": [\n    {\n      \"email\": [\"admin@example.com\"]\n    }\n  ],\n  \"require\": [\n    {\n      \"any_valid_service_token\": {}\n    }\n  ],\n  \"exclude\": []\n}\nEOF\n\n# Apply to applications via Cloudflare dashboard:\n# Security > Cloudflare Access > Applications\n```\n\n### Network Security\n```bash\n# Configure local firewall (services now accessible only via Cloudflare)\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\n# Don't open ports 80/443/8096 etc. - only accessible via tunnel\n\n# Monitor tunnel connections\nsudo tee /usr/local/bin/tunnel-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/tunnel-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check tunnel status\nif systemctl is-active cloudflared >/dev/null; then\n    log_message \"âœ“ Cloudflare tunnel running\"\nelse\n    log_message \"âœ— Cloudflare tunnel not running\"\nfi\n\n# Check tunnel connectivity\nif cloudflared tunnel info myserver-tunnel >/dev/null 2>&1; then\n    log_message \"âœ“ Tunnel connectivity OK\"\nelse\n    log_message \"âš  Tunnel connectivity issues\"\nfi\n\nlog_message \"Tunnel monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/tunnel-monitor.sh\necho \"*/10 * * * * root /usr/local/bin/tunnel-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Cloudflare Tunnel Documentation](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/)\n- [Cloudflare Zero Trust](https://developers.cloudflare.com/cloudflare-one/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"cloudflare-tunnel-installation-guide\" class=\"mobile-header\">Cloudflare Tunnel Installation Guide</h1>\n<p class=\"mobile-paragraph\">Secure way to connect your applications to Cloudflare without opening inbound ports. Essential tool for exposing self-hosted services securely through Cloudflare's global network.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">Cloudflare account with domain configured</li>\n<li class=\"mobile-list-item\">Applications running locally that need external access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download cloudflared\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\nsudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared\nsudo chmod +x /usr/local/bin/cloudflared\n\n# Verify installation\ncloudflared --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and install cloudflared\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\nsudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared\nsudo chmod +x /usr/local/bin/cloudflared\n\n# Verify installation\ncloudflared --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run cloudflared in Docker\nmkdir -p ~/.cloudflared\n\ndocker run -d \\\n  --name cloudflared \\\n  --restart unless-stopped \\\n  -v ~/.cloudflared:/etc/cloudflared \\\n  cloudflare/cloudflared:latest \\\n  tunnel run</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"tunnel-setup\" class=\"mobile-header\">Tunnel Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Authenticate with Cloudflare\ncloudflared tunnel login\n\n# Create tunnel\ncloudflared tunnel create myserver-tunnel\n\n# List tunnels\ncloudflared tunnel list\n\n# Create configuration file\nsudo mkdir -p /etc/cloudflared\nsudo tee /etc/cloudflared/config.yml &gt; /dev/null &lt;&lt;EOF\n# Cloudflare Tunnel Configuration\n\ntunnel: your-tunnel-id-here\ncredentials-file: /etc/cloudflared/your-tunnel-id.json\n\n# Ingress rules\ningress:\n  # Home Assistant\n  - hostname: homeassistant.example.com\n    service: http://localhost:8123\n    \n  # Nextcloud\n  - hostname: nextcloud.example.com\n    service: http://localhost:80\n    \n  # Grafana\n  - hostname: grafana.example.com\n    service: http://localhost:3000\n    \n  # Jellyfin media server\n  - hostname: jellyfin.example.com\n    service: http://localhost:8096\n    \n  # Default catch-all (required)\n  - service: http_status:404\n\n# Global configuration\nwarp-routing:\n  enabled: true\nEOF\n\n# Copy tunnel credentials\nsudo cp ~/.cloudflared/your-tunnel-id.json /etc/cloudflared/\nsudo chown cloudflared:cloudflared /etc/cloudflared/*\nsudo chmod 600 /etc/cloudflared/*.json</code></pre>\n      </div>\n    </div>\n<h3 id=\"dns-configuration\" class=\"mobile-header\">DNS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create DNS records for tunnel\ncloudflared tunnel route dns myserver-tunnel homeassistant.example.com\ncloudflared tunnel route dns myserver-tunnel nextcloud.example.com\ncloudflared tunnel route dns myserver-tunnel grafana.example.com\ncloudflared tunnel route dns myserver-tunnel jellyfin.example.com\n\n# Verify DNS records\ndig homeassistant.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install as system service\nsudo cloudflared service install\n\n# Create custom service with security\nsudo tee /etc/systemd/system/cloudflared.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Cloudflare Tunnel\nAfter=network.target\n\n[Service]\nType=simple\nUser=cloudflared\nGroup=cloudflared\nExecStart=/usr/local/bin/cloudflared tunnel run\nRestart=always\nRestartSec=5s\nStandardOutput=journal\nStandardError=journal\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/log/cloudflared\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create cloudflared user\nsudo useradd --system --shell /bin/false cloudflared\nsudo chown -R cloudflared:cloudflared /etc/cloudflared\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now cloudflared</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"access-control-with-cloudflare-access\" class=\"mobile-header\">Access Control with Cloudflare Access</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Cloudflare Access policies via API or Dashboard\n# Example: Restrict access to specific applications\n\n# Create access policy for sensitive services\ncat &gt; access-policy.json &lt;&lt;EOF\n{\n  &quot;name&quot;: &quot;Admin Access Only&quot;,\n  &quot;decision&quot;: &quot;allow&quot;,\n  &quot;include&quot;: [\n    {\n      &quot;email&quot;: [&quot;admin@example.com&quot;]\n    }\n  ],\n  &quot;require&quot;: [\n    {\n      &quot;any_valid_service_token&quot;: {}\n    }\n  ],\n  &quot;exclude&quot;: []\n}\nEOF\n\n# Apply to applications via Cloudflare dashboard:\n# Security &gt; Cloudflare Access &gt; Applications</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-security\" class=\"mobile-header\">Network Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure local firewall (services now accessible only via Cloudflare)\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\n# Don&#039;t open ports 80/443/8096 etc. - only accessible via tunnel\n\n# Monitor tunnel connections\nsudo tee /usr/local/bin/tunnel-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/tunnel-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check tunnel status\nif systemctl is-active cloudflared &gt;/dev/null; then\n    log_message &quot;âœ“ Cloudflare tunnel running&quot;\nelse\n    log_message &quot;âœ— Cloudflare tunnel not running&quot;\nfi\n\n# Check tunnel connectivity\nif cloudflared tunnel info myserver-tunnel &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Tunnel connectivity OK&quot;\nelse\n    log_message &quot;âš  Tunnel connectivity issues&quot;\nfi\n\nlog_message &quot;Tunnel monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/tunnel-monitor.sh\necho &quot;*/10 * * * * root /usr/local/bin/tunnel-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Cloudflare Tunnel Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developers.cloudflare.com/cloudflare-one/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Cloudflare Zero Trust</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":596,"lastBuilt":"2025-09-16T03:18:04.562Z","metadataVersion":"2.0"},{"name":"cloudstack","displayName":"cloudstack Installation Guide","slug":"cloudstack","description":"cloudstack is a free and open-source cloud orchestration. Apache CloudStack provides cloud orchestration for building IaaS platforms","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/cloudstack","documentationUrl":"https://howtomgr.github.io/miscellaneous/cloudstack","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cloudstack","updatedAt":"2025-09-16T03:02:43Z","createdAt":"2025-09-16T02:26:42Z","readmeRaw":"# cloudstack Installation Guide\n\ncloudstack is a free and open-source cloud orchestration. Apache CloudStack provides cloud orchestration for building IaaS platforms\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 16GB minimum\n  - Storage: 40GB for management\n  - Network: Cloud networking\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default cloudstack port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cloudstack\nsudo dnf install -y cloudstack\n\n# Enable and start service\nsudo systemctl enable --now cloudstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncloudstack --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cloudstack\nsudo apt install -y cloudstack\n\n# Enable and start service\nsudo systemctl enable --now cloudstack\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ncloudstack --version\n```\n\n### Arch Linux\n\n```bash\n# Install cloudstack\nsudo pacman -S cloudstack\n\n# Enable and start service\nsudo systemctl enable --now cloudstack\n\n# Verify installation\ncloudstack --version\n```\n\n### Alpine Linux\n\n```bash\n# Install cloudstack\napk add --no-cache cloudstack\n\n# Enable and start service\nrc-update add cloudstack default\nrc-service cloudstack start\n\n# Verify installation\ncloudstack --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cloudstack\nsudo zypper install -y cloudstack\n\n# Enable and start service\nsudo systemctl enable --now cloudstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncloudstack --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cloudstack\n\n# Start service\nbrew services start cloudstack\n\n# Verify installation\ncloudstack --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cloudstack\n\n# Enable in rc.conf\necho 'cloudstack_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cloudstack start\n\n# Verify installation\ncloudstack --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cloudstack\n\n# Or using Scoop\nscoop install cloudstack\n\n# Verify installation\ncloudstack --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cloudstack\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncloudstack --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cloudstack\n\n# Start service\nsudo systemctl start cloudstack\n\n# Stop service\nsudo systemctl stop cloudstack\n\n# Restart service\nsudo systemctl restart cloudstack\n\n# Check status\nsudo systemctl status cloudstack\n\n# View logs\nsudo journalctl -u cloudstack -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cloudstack default\n\n# Start service\nrc-service cloudstack start\n\n# Stop service\nrc-service cloudstack stop\n\n# Restart service\nrc-service cloudstack restart\n\n# Check status\nrc-service cloudstack status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cloudstack_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cloudstack start\n\n# Stop service\nservice cloudstack stop\n\n# Restart service\nservice cloudstack restart\n\n# Check status\nservice cloudstack status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cloudstack\nbrew services stop cloudstack\nbrew services restart cloudstack\n\n# Check status\nbrew services list | grep cloudstack\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cloudstack\n\n# Stop service\nnet stop cloudstack\n\n# Using PowerShell\nStart-Service cloudstack\nStop-Service cloudstack\nRestart-Service cloudstack\n\n# Check status\nGet-Service cloudstack\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cloudstack_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name cloudstack.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cloudstack.example.com;\n\n    ssl_certificate /etc/ssl/certs/cloudstack.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cloudstack.example.com.key;\n\n    location / {\n        proxy_pass http://cloudstack_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cloudstack.example.com\n    Redirect permanent / https://cloudstack.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cloudstack.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cloudstack.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cloudstack.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cloudstack_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cloudstack.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cloudstack_backend\n\nbackend cloudstack_backend\n    balance roundrobin\n    server cloudstack1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cloudstack:cloudstack /etc/cloudstack\nsudo chmod 750 /etc/cloudstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status cloudstack\n\n# View logs\nsudo journalctl -u cloudstack -f\n\n# Monitor resource usage\ntop -p $(pgrep cloudstack)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cloudstack\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cloudstack-backup-$DATE.tar.gz\" /etc/cloudstack /var/lib/cloudstack\n\necho \"Backup completed: $BACKUP_DIR/cloudstack-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cloudstack\n\n# Restore from backup\ntar -xzf /backup/cloudstack/cloudstack-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cloudstack\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cloudstack -n 100\nsudo tail -f /var/log/cloudstack/cloudstack.log\n\n# Check configuration\ncloudstack --version\n\n# Check permissions\nls -la /etc/cloudstack\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cloudstack)\n\n# Check disk I/O\niotop -p $(pgrep cloudstack)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cloudstack:\n    image: cloudstack:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/cloudstack\n      - ./data:/var/lib/cloudstack\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cloudstack\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cloudstack\n\n# Arch Linux\nsudo pacman -Syu cloudstack\n\n# Alpine Linux\napk update && apk upgrade cloudstack\n\n# openSUSE\nsudo zypper update cloudstack\n\n# FreeBSD\npkg update && pkg upgrade cloudstack\n\n# Always backup before updates\ntar -czf /backup/cloudstack-pre-update-$(date +%Y%m%d).tar.gz /etc/cloudstack\n\n# Restart after updates\nsudo systemctl restart cloudstack\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cloudstack\n\n# Clean old logs\nfind /var/log/cloudstack -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cloudstack\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cloudstack.org/\n- GitHub Repository: https://github.com/cloudstack/cloudstack\n- Community Forum: https://forum.cloudstack.org/\n- Best Practices Guide: https://docs.cloudstack.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"cloudstack-installation-guide\" class=\"mobile-header\">cloudstack Installation Guide</h1>\n<p class=\"mobile-paragraph\">cloudstack is a free and open-source cloud orchestration. Apache CloudStack provides cloud orchestration for building IaaS platforms</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 16GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 40GB for management</li>\n<li class=\"mobile-list-item\">Network: Cloud networking</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default cloudstack port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cloudstack\nsudo dnf install -y cloudstack\n\n# Enable and start service\nsudo systemctl enable --now cloudstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cloudstack\nsudo apt install -y cloudstack\n\n# Enable and start service\nsudo systemctl enable --now cloudstack\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cloudstack\nsudo pacman -S cloudstack\n\n# Enable and start service\nsudo systemctl enable --now cloudstack\n\n# Verify installation\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cloudstack\napk add --no-cache cloudstack\n\n# Enable and start service\nrc-update add cloudstack default\nrc-service cloudstack start\n\n# Verify installation\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cloudstack\nsudo zypper install -y cloudstack\n\n# Enable and start service\nsudo systemctl enable --now cloudstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cloudstack\n\n# Start service\nbrew services start cloudstack\n\n# Verify installation\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cloudstack\n\n# Enable in rc.conf\necho &#039;cloudstack_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cloudstack start\n\n# Verify installation\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cloudstack\n\n# Or using Scoop\nscoop install cloudstack\n\n# Verify installation\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cloudstack\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncloudstack --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cloudstack\n\n# Start service\nsudo systemctl start cloudstack\n\n# Stop service\nsudo systemctl stop cloudstack\n\n# Restart service\nsudo systemctl restart cloudstack\n\n# Check status\nsudo systemctl status cloudstack\n\n# View logs\nsudo journalctl -u cloudstack -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cloudstack default\n\n# Start service\nrc-service cloudstack start\n\n# Stop service\nrc-service cloudstack stop\n\n# Restart service\nrc-service cloudstack restart\n\n# Check status\nrc-service cloudstack status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cloudstack_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cloudstack start\n\n# Stop service\nservice cloudstack stop\n\n# Restart service\nservice cloudstack restart\n\n# Check status\nservice cloudstack status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cloudstack\nbrew services stop cloudstack\nbrew services restart cloudstack\n\n# Check status\nbrew services list | grep cloudstack</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cloudstack\n\n# Stop service\nnet stop cloudstack\n\n# Using PowerShell\nStart-Service cloudstack\nStop-Service cloudstack\nRestart-Service cloudstack\n\n# Check status\nGet-Service cloudstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cloudstack_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name cloudstack.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cloudstack.example.com;\n\n    ssl_certificate /etc/ssl/certs/cloudstack.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cloudstack.example.com.key;\n\n    location / {\n        proxy_pass http://cloudstack_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cloudstack.example.com\n    Redirect permanent / https://cloudstack.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cloudstack.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cloudstack.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cloudstack.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cloudstack_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cloudstack.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cloudstack_backend\n\nbackend cloudstack_backend\n    balance roundrobin\n    server cloudstack1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cloudstack:cloudstack /etc/cloudstack\nsudo chmod 750 /etc/cloudstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status cloudstack\n\n# View logs\nsudo journalctl -u cloudstack -f\n\n# Monitor resource usage\ntop -p $(pgrep cloudstack)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cloudstack&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cloudstack-backup-$DATE.tar.gz&quot; /etc/cloudstack /var/lib/cloudstack\n\necho &quot;Backup completed: $BACKUP_DIR/cloudstack-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cloudstack\n\n# Restore from backup\ntar -xzf /backup/cloudstack/cloudstack-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cloudstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cloudstack -n 100\nsudo tail -f /var/log/cloudstack/cloudstack.log\n\n# Check configuration\ncloudstack --version\n\n# Check permissions\nls -la /etc/cloudstack</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cloudstack)\n\n# Check disk I/O\niotop -p $(pgrep cloudstack)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cloudstack:\n    image: cloudstack:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/cloudstack\n      - ./data:/var/lib/cloudstack\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cloudstack\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cloudstack\n\n# Arch Linux\nsudo pacman -Syu cloudstack\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cloudstack\n\n# openSUSE\nsudo zypper update cloudstack\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cloudstack\n\n# Always backup before updates\ntar -czf /backup/cloudstack-pre-update-$(date +%Y%m%d).tar.gz /etc/cloudstack\n\n# Restart after updates\nsudo systemctl restart cloudstack</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cloudstack\n\n# Clean old logs\nfind /var/log/cloudstack -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cloudstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cloudstack.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cloudstack/cloudstack</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cloudstack.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cloudstack.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1156,"lastBuilt":"2025-09-16T03:18:04.205Z","metadataVersion":"2.0"},{"name":"cockpit","displayName":"cockpit Installation Guide","slug":"cockpit","description":"cockpit is a free and open-source web-based server management interface. Developed by Red Hat, Cockpit provides a modern web interface for Linux server administration, serving as an alternative to Webmin or proprietary control panels","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9090],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/cockpit","documentationUrl":"https://howtomgr.github.io/miscellaneous/cockpit","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cockpit","updatedAt":"2025-09-16T03:02:58Z","createdAt":"2025-09-16T02:27:01Z","readmeRaw":"# cockpit Installation Guide\n\ncockpit is a free and open-source web-based server management interface. Developed by Red Hat, Cockpit provides a modern web interface for Linux server administration, serving as an alternative to Webmin or proprietary control panels\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 100MB for installation\n  - Network: HTTPS for web interface\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9090 (default cockpit port)\n  - WebSocket support required\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cockpit\nsudo dnf install -y cockpit\n\n# Enable and start service\nsudo systemctl enable --now cockpit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockpit-bridge --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cockpit\nsudo apt install -y cockpit\n\n# Enable and start service\nsudo systemctl enable --now cockpit\n\n# Configure firewall\nsudo ufw allow 9090\n\n# Verify installation\ncockpit-bridge --version\n```\n\n### Arch Linux\n\n```bash\n# Install cockpit\nsudo pacman -S cockpit\n\n# Enable and start service\nsudo systemctl enable --now cockpit\n\n# Verify installation\ncockpit-bridge --version\n```\n\n### Alpine Linux\n\n```bash\n# Install cockpit\napk add --no-cache cockpit\n\n# Enable and start service\nrc-update add cockpit default\nrc-service cockpit start\n\n# Verify installation\ncockpit-bridge --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cockpit\nsudo zypper install -y cockpit\n\n# Enable and start service\nsudo systemctl enable --now cockpit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockpit-bridge --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cockpit\n\n# Start service\nbrew services start cockpit\n\n# Verify installation\ncockpit-bridge --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cockpit\n\n# Enable in rc.conf\necho 'cockpit_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cockpit start\n\n# Verify installation\ncockpit-bridge --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cockpit\n\n# Or using Scoop\nscoop install cockpit\n\n# Verify installation\ncockpit-bridge --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cockpit\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncockpit-bridge --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cockpit\n\n# Start service\nsudo systemctl start cockpit\n\n# Stop service\nsudo systemctl stop cockpit\n\n# Restart service\nsudo systemctl restart cockpit\n\n# Check status\nsudo systemctl status cockpit\n\n# View logs\nsudo journalctl -u cockpit -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cockpit default\n\n# Start service\nrc-service cockpit start\n\n# Stop service\nrc-service cockpit stop\n\n# Restart service\nrc-service cockpit restart\n\n# Check status\nrc-service cockpit status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cockpit_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cockpit start\n\n# Stop service\nservice cockpit stop\n\n# Restart service\nservice cockpit restart\n\n# Check status\nservice cockpit status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cockpit\nbrew services stop cockpit\nbrew services restart cockpit\n\n# Check status\nbrew services list | grep cockpit\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cockpit\n\n# Stop service\nnet stop cockpit\n\n# Using PowerShell\nStart-Service cockpit\nStop-Service cockpit\nRestart-Service cockpit\n\n# Check status\nGet-Service cockpit\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cockpit_backend {\n    server 127.0.0.1:9090;\n}\n\nserver {\n    listen 80;\n    server_name cockpit.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cockpit.example.com;\n\n    ssl_certificate /etc/ssl/certs/cockpit.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cockpit.example.com.key;\n\n    location / {\n        proxy_pass http://cockpit_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cockpit.example.com\n    Redirect permanent / https://cockpit.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cockpit.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cockpit.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cockpit.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9090/\n    ProxyPassReverse / http://127.0.0.1:9090/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cockpit_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cockpit.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cockpit_backend\n\nbackend cockpit_backend\n    balance roundrobin\n    server cockpit1 127.0.0.1:9090 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cockpit:cockpit /etc/cockpit\nsudo chmod 750 /etc/cockpit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status cockpit\n\n# View logs\nsudo journalctl -u cockpit -f\n\n# Monitor resource usage\ntop -p $(pgrep cockpit)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cockpit\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cockpit-backup-$DATE.tar.gz\" /etc/cockpit /var/lib/cockpit\n\necho \"Backup completed: $BACKUP_DIR/cockpit-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cockpit\n\n# Restore from backup\ntar -xzf /backup/cockpit/cockpit-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cockpit\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cockpit -n 100\nsudo tail -f /var/log/cockpit/cockpit.log\n\n# Check configuration\ncockpit-bridge --version\n\n# Check permissions\nls -la /etc/cockpit\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9090\n\n# Test connectivity\ntelnet localhost 9090\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cockpit)\n\n# Check disk I/O\niotop -p $(pgrep cockpit)\n\n# Check connections\nss -an | grep 9090\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cockpit:\n    image: cockpit:latest\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./config:/etc/cockpit\n      - ./data:/var/lib/cockpit\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cockpit\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cockpit\n\n# Arch Linux\nsudo pacman -Syu cockpit\n\n# Alpine Linux\napk update && apk upgrade cockpit\n\n# openSUSE\nsudo zypper update cockpit\n\n# FreeBSD\npkg update && pkg upgrade cockpit\n\n# Always backup before updates\ntar -czf /backup/cockpit-pre-update-$(date +%Y%m%d).tar.gz /etc/cockpit\n\n# Restart after updates\nsudo systemctl restart cockpit\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cockpit\n\n# Clean old logs\nfind /var/log/cockpit -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cockpit\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cockpit.org/\n- GitHub Repository: https://github.com/cockpit/cockpit\n- Community Forum: https://forum.cockpit.org/\n- Best Practices Guide: https://docs.cockpit.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"cockpit-installation-guide\" class=\"mobile-header\">cockpit Installation Guide</h1>\n<p class=\"mobile-paragraph\">cockpit is a free and open-source web-based server management interface. Developed by Red Hat, Cockpit provides a modern web interface for Linux server administration, serving as an alternative to Webmin or proprietary control panels</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: HTTPS for web interface</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9090 (default cockpit port)</li>\n<li class=\"mobile-list-item\">WebSocket support required</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cockpit\nsudo dnf install -y cockpit\n\n# Enable and start service\nsudo systemctl enable --now cockpit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cockpit\nsudo apt install -y cockpit\n\n# Enable and start service\nsudo systemctl enable --now cockpit\n\n# Configure firewall\nsudo ufw allow 9090\n\n# Verify installation\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockpit\nsudo pacman -S cockpit\n\n# Enable and start service\nsudo systemctl enable --now cockpit\n\n# Verify installation\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockpit\napk add --no-cache cockpit\n\n# Enable and start service\nrc-update add cockpit default\nrc-service cockpit start\n\n# Verify installation\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockpit\nsudo zypper install -y cockpit\n\n# Enable and start service\nsudo systemctl enable --now cockpit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cockpit\n\n# Start service\nbrew services start cockpit\n\n# Verify installation\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cockpit\n\n# Enable in rc.conf\necho &#039;cockpit_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cockpit start\n\n# Verify installation\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cockpit\n\n# Or using Scoop\nscoop install cockpit\n\n# Verify installation\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cockpit\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncockpit-bridge --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cockpit\n\n# Start service\nsudo systemctl start cockpit\n\n# Stop service\nsudo systemctl stop cockpit\n\n# Restart service\nsudo systemctl restart cockpit\n\n# Check status\nsudo systemctl status cockpit\n\n# View logs\nsudo journalctl -u cockpit -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cockpit default\n\n# Start service\nrc-service cockpit start\n\n# Stop service\nrc-service cockpit stop\n\n# Restart service\nrc-service cockpit restart\n\n# Check status\nrc-service cockpit status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cockpit_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cockpit start\n\n# Stop service\nservice cockpit stop\n\n# Restart service\nservice cockpit restart\n\n# Check status\nservice cockpit status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cockpit\nbrew services stop cockpit\nbrew services restart cockpit\n\n# Check status\nbrew services list | grep cockpit</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cockpit\n\n# Stop service\nnet stop cockpit\n\n# Using PowerShell\nStart-Service cockpit\nStop-Service cockpit\nRestart-Service cockpit\n\n# Check status\nGet-Service cockpit</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cockpit_backend {\n    server 127.0.0.1:9090;\n}\n\nserver {\n    listen 80;\n    server_name cockpit.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cockpit.example.com;\n\n    ssl_certificate /etc/ssl/certs/cockpit.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cockpit.example.com.key;\n\n    location / {\n        proxy_pass http://cockpit_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cockpit.example.com\n    Redirect permanent / https://cockpit.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cockpit.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cockpit.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cockpit.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9090/\n    ProxyPassReverse / http://127.0.0.1:9090/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cockpit_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cockpit.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cockpit_backend\n\nbackend cockpit_backend\n    balance roundrobin\n    server cockpit1 127.0.0.1:9090 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cockpit:cockpit /etc/cockpit\nsudo chmod 750 /etc/cockpit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status cockpit\n\n# View logs\nsudo journalctl -u cockpit -f\n\n# Monitor resource usage\ntop -p $(pgrep cockpit)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cockpit&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cockpit-backup-$DATE.tar.gz&quot; /etc/cockpit /var/lib/cockpit\n\necho &quot;Backup completed: $BACKUP_DIR/cockpit-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cockpit\n\n# Restore from backup\ntar -xzf /backup/cockpit/cockpit-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cockpit</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cockpit -n 100\nsudo tail -f /var/log/cockpit/cockpit.log\n\n# Check configuration\ncockpit-bridge --version\n\n# Check permissions\nls -la /etc/cockpit</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9090\n\n# Test connectivity\ntelnet localhost 9090\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cockpit)\n\n# Check disk I/O\niotop -p $(pgrep cockpit)\n\n# Check connections\nss -an | grep 9090</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cockpit:\n    image: cockpit:latest\n    ports:\n      - &quot;9090:9090&quot;\n    volumes:\n      - ./config:/etc/cockpit\n      - ./data:/var/lib/cockpit\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cockpit\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cockpit\n\n# Arch Linux\nsudo pacman -Syu cockpit\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cockpit\n\n# openSUSE\nsudo zypper update cockpit\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cockpit\n\n# Always backup before updates\ntar -czf /backup/cockpit-pre-update-$(date +%Y%m%d).tar.gz /etc/cockpit\n\n# Restart after updates\nsudo systemctl restart cockpit</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cockpit\n\n# Clean old logs\nfind /var/log/cockpit -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cockpit</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cockpit.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cockpit/cockpit</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cockpit.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cockpit.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1176,"lastBuilt":"2025-09-16T03:18:03.512Z","metadataVersion":"2.0"},{"name":"cockpit-cms","displayName":"cockpit-cms Installation Guide","slug":"cockpit-cms","description":"cockpit-cms is a free and open-source API-first CMS. Cockpit provides simple content platform for developers","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/cockpit-cms","documentationUrl":"https://howtomgr.github.io/miscellaneous/cockpit-cms","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cockpit-cms","updatedAt":"2025-09-16T03:03:05Z","createdAt":"2025-09-16T02:27:11Z","readmeRaw":"# cockpit-cms Installation Guide\n\ncockpit-cms is a free and open-source API-first CMS. Cockpit provides simple content platform for developers\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/API access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default cockpit-cms port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cockpit-cms\nsudo dnf install -y cockpit-cms\n\n# Enable and start service\nsudo systemctl enable --now cockpit-cms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockpit-cms --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cockpit-cms\nsudo apt install -y cockpit-cms\n\n# Enable and start service\nsudo systemctl enable --now cockpit-cms\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ncockpit-cms --version\n```\n\n### Arch Linux\n\n```bash\n# Install cockpit-cms\nsudo pacman -S cockpit-cms\n\n# Enable and start service\nsudo systemctl enable --now cockpit-cms\n\n# Verify installation\ncockpit-cms --version\n```\n\n### Alpine Linux\n\n```bash\n# Install cockpit-cms\napk add --no-cache cockpit-cms\n\n# Enable and start service\nrc-update add cockpit-cms default\nrc-service cockpit-cms start\n\n# Verify installation\ncockpit-cms --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cockpit-cms\nsudo zypper install -y cockpit-cms\n\n# Enable and start service\nsudo systemctl enable --now cockpit-cms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockpit-cms --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cockpit-cms\n\n# Start service\nbrew services start cockpit-cms\n\n# Verify installation\ncockpit-cms --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cockpit-cms\n\n# Enable in rc.conf\necho 'cockpit-cms_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cockpit-cms start\n\n# Verify installation\ncockpit-cms --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cockpit-cms\n\n# Or using Scoop\nscoop install cockpit-cms\n\n# Verify installation\ncockpit-cms --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cockpit-cms\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncockpit-cms --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cockpit-cms\n\n# Start service\nsudo systemctl start cockpit-cms\n\n# Stop service\nsudo systemctl stop cockpit-cms\n\n# Restart service\nsudo systemctl restart cockpit-cms\n\n# Check status\nsudo systemctl status cockpit-cms\n\n# View logs\nsudo journalctl -u cockpit-cms -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cockpit-cms default\n\n# Start service\nrc-service cockpit-cms start\n\n# Stop service\nrc-service cockpit-cms stop\n\n# Restart service\nrc-service cockpit-cms restart\n\n# Check status\nrc-service cockpit-cms status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cockpit-cms_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cockpit-cms start\n\n# Stop service\nservice cockpit-cms stop\n\n# Restart service\nservice cockpit-cms restart\n\n# Check status\nservice cockpit-cms status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cockpit-cms\nbrew services stop cockpit-cms\nbrew services restart cockpit-cms\n\n# Check status\nbrew services list | grep cockpit-cms\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cockpit-cms\n\n# Stop service\nnet stop cockpit-cms\n\n# Using PowerShell\nStart-Service cockpit-cms\nStop-Service cockpit-cms\nRestart-Service cockpit-cms\n\n# Check status\nGet-Service cockpit-cms\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cockpit-cms_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name cockpit-cms.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cockpit-cms.example.com;\n\n    ssl_certificate /etc/ssl/certs/cockpit-cms.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cockpit-cms.example.com.key;\n\n    location / {\n        proxy_pass http://cockpit-cms_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cockpit-cms.example.com\n    Redirect permanent / https://cockpit-cms.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cockpit-cms.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cockpit-cms.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cockpit-cms.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cockpit-cms_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cockpit-cms.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cockpit-cms_backend\n\nbackend cockpit-cms_backend\n    balance roundrobin\n    server cockpit-cms1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cockpit-cms:cockpit-cms /etc/cockpit-cms\nsudo chmod 750 /etc/cockpit-cms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status cockpit-cms\n\n# View logs\nsudo journalctl -u cockpit-cms -f\n\n# Monitor resource usage\ntop -p $(pgrep cockpit-cms)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cockpit-cms\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cockpit-cms-backup-$DATE.tar.gz\" /etc/cockpit-cms /var/lib/cockpit-cms\n\necho \"Backup completed: $BACKUP_DIR/cockpit-cms-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cockpit-cms\n\n# Restore from backup\ntar -xzf /backup/cockpit-cms/cockpit-cms-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cockpit-cms\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cockpit-cms -n 100\nsudo tail -f /var/log/cockpit-cms/cockpit-cms.log\n\n# Check configuration\ncockpit-cms --version\n\n# Check permissions\nls -la /etc/cockpit-cms\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cockpit-cms)\n\n# Check disk I/O\niotop -p $(pgrep cockpit-cms)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cockpit-cms:\n    image: cockpit-cms:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/cockpit-cms\n      - ./data:/var/lib/cockpit-cms\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cockpit-cms\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cockpit-cms\n\n# Arch Linux\nsudo pacman -Syu cockpit-cms\n\n# Alpine Linux\napk update && apk upgrade cockpit-cms\n\n# openSUSE\nsudo zypper update cockpit-cms\n\n# FreeBSD\npkg update && pkg upgrade cockpit-cms\n\n# Always backup before updates\ntar -czf /backup/cockpit-cms-pre-update-$(date +%Y%m%d).tar.gz /etc/cockpit-cms\n\n# Restart after updates\nsudo systemctl restart cockpit-cms\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cockpit-cms\n\n# Clean old logs\nfind /var/log/cockpit-cms -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cockpit-cms\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cockpit-cms.org/\n- GitHub Repository: https://github.com/cockpit-cms/cockpit-cms\n- Community Forum: https://forum.cockpit-cms.org/\n- Best Practices Guide: https://docs.cockpit-cms.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"cockpit-cms-installation-guide\" class=\"mobile-header\">cockpit-cms Installation Guide</h1>\n<p class=\"mobile-paragraph\">cockpit-cms is a free and open-source API-first CMS. Cockpit provides simple content platform for developers</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/API access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default cockpit-cms port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cockpit-cms\nsudo dnf install -y cockpit-cms\n\n# Enable and start service\nsudo systemctl enable --now cockpit-cms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cockpit-cms\nsudo apt install -y cockpit-cms\n\n# Enable and start service\nsudo systemctl enable --now cockpit-cms\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockpit-cms\nsudo pacman -S cockpit-cms\n\n# Enable and start service\nsudo systemctl enable --now cockpit-cms\n\n# Verify installation\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockpit-cms\napk add --no-cache cockpit-cms\n\n# Enable and start service\nrc-update add cockpit-cms default\nrc-service cockpit-cms start\n\n# Verify installation\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockpit-cms\nsudo zypper install -y cockpit-cms\n\n# Enable and start service\nsudo systemctl enable --now cockpit-cms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cockpit-cms\n\n# Start service\nbrew services start cockpit-cms\n\n# Verify installation\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cockpit-cms\n\n# Enable in rc.conf\necho &#039;cockpit-cms_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cockpit-cms start\n\n# Verify installation\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cockpit-cms\n\n# Or using Scoop\nscoop install cockpit-cms\n\n# Verify installation\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cockpit-cms\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncockpit-cms --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cockpit-cms\n\n# Start service\nsudo systemctl start cockpit-cms\n\n# Stop service\nsudo systemctl stop cockpit-cms\n\n# Restart service\nsudo systemctl restart cockpit-cms\n\n# Check status\nsudo systemctl status cockpit-cms\n\n# View logs\nsudo journalctl -u cockpit-cms -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cockpit-cms default\n\n# Start service\nrc-service cockpit-cms start\n\n# Stop service\nrc-service cockpit-cms stop\n\n# Restart service\nrc-service cockpit-cms restart\n\n# Check status\nrc-service cockpit-cms status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cockpit-cms_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cockpit-cms start\n\n# Stop service\nservice cockpit-cms stop\n\n# Restart service\nservice cockpit-cms restart\n\n# Check status\nservice cockpit-cms status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cockpit-cms\nbrew services stop cockpit-cms\nbrew services restart cockpit-cms\n\n# Check status\nbrew services list | grep cockpit-cms</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cockpit-cms\n\n# Stop service\nnet stop cockpit-cms\n\n# Using PowerShell\nStart-Service cockpit-cms\nStop-Service cockpit-cms\nRestart-Service cockpit-cms\n\n# Check status\nGet-Service cockpit-cms</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cockpit-cms_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name cockpit-cms.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cockpit-cms.example.com;\n\n    ssl_certificate /etc/ssl/certs/cockpit-cms.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cockpit-cms.example.com.key;\n\n    location / {\n        proxy_pass http://cockpit-cms_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cockpit-cms.example.com\n    Redirect permanent / https://cockpit-cms.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cockpit-cms.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cockpit-cms.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cockpit-cms.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cockpit-cms_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cockpit-cms.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cockpit-cms_backend\n\nbackend cockpit-cms_backend\n    balance roundrobin\n    server cockpit-cms1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cockpit-cms:cockpit-cms /etc/cockpit-cms\nsudo chmod 750 /etc/cockpit-cms\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status cockpit-cms\n\n# View logs\nsudo journalctl -u cockpit-cms -f\n\n# Monitor resource usage\ntop -p $(pgrep cockpit-cms)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cockpit-cms&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cockpit-cms-backup-$DATE.tar.gz&quot; /etc/cockpit-cms /var/lib/cockpit-cms\n\necho &quot;Backup completed: $BACKUP_DIR/cockpit-cms-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cockpit-cms\n\n# Restore from backup\ntar -xzf /backup/cockpit-cms/cockpit-cms-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cockpit-cms</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cockpit-cms -n 100\nsudo tail -f /var/log/cockpit-cms/cockpit-cms.log\n\n# Check configuration\ncockpit-cms --version\n\n# Check permissions\nls -la /etc/cockpit-cms</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cockpit-cms)\n\n# Check disk I/O\niotop -p $(pgrep cockpit-cms)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cockpit-cms:\n    image: cockpit-cms:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/cockpit-cms\n      - ./data:/var/lib/cockpit-cms\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cockpit-cms\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cockpit-cms\n\n# Arch Linux\nsudo pacman -Syu cockpit-cms\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cockpit-cms\n\n# openSUSE\nsudo zypper update cockpit-cms\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cockpit-cms\n\n# Always backup before updates\ntar -czf /backup/cockpit-cms-pre-update-$(date +%Y%m%d).tar.gz /etc/cockpit-cms\n\n# Restart after updates\nsudo systemctl restart cockpit-cms</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cockpit-cms\n\n# Clean old logs\nfind /var/log/cockpit-cms -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cockpit-cms</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cockpit-cms.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cockpit-cms/cockpit-cms</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cockpit-cms.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cockpit-cms.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1153,"lastBuilt":"2025-09-16T03:18:03.203Z","metadataVersion":"2.0"},{"name":"code_server","displayName":"code-server Installation Guide","slug":"code_server","description":"code-server is a free and open-source VS Code in browser. code-server provides VS Code running on remote server","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/code_server","documentationUrl":"https://howtomgr.github.io/miscellaneous/code_server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/code_server","updatedAt":"2025-09-16T03:03:19Z","createdAt":"2025-09-16T02:27:33Z","readmeRaw":"# code-server Installation Guide\n\ncode-server is a free and open-source VS Code in browser. code-server provides VS Code running on remote server\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 10GB for workspace\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default code-server port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install code-server\nsudo dnf install -y code_server\n\n# Enable and start service\nsudo systemctl enable --now code-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncode-server --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install code-server\nsudo apt install -y code_server\n\n# Enable and start service\nsudo systemctl enable --now code-server\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ncode-server --version\n```\n\n### Arch Linux\n\n```bash\n# Install code-server\nsudo pacman -S code_server\n\n# Enable and start service\nsudo systemctl enable --now code-server\n\n# Verify installation\ncode-server --version\n```\n\n### Alpine Linux\n\n```bash\n# Install code-server\napk add --no-cache code_server\n\n# Enable and start service\nrc-update add code-server default\nrc-service code-server start\n\n# Verify installation\ncode-server --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install code-server\nsudo zypper install -y code_server\n\n# Enable and start service\nsudo systemctl enable --now code-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncode-server --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install code_server\n\n# Start service\nbrew services start code_server\n\n# Verify installation\ncode-server --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install code_server\n\n# Enable in rc.conf\necho 'code-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice code-server start\n\n# Verify installation\ncode-server --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install code_server\n\n# Or using Scoop\nscoop install code_server\n\n# Verify installation\ncode-server --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/code_server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncode-server --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable code-server\n\n# Start service\nsudo systemctl start code-server\n\n# Stop service\nsudo systemctl stop code-server\n\n# Restart service\nsudo systemctl restart code-server\n\n# Check status\nsudo systemctl status code-server\n\n# View logs\nsudo journalctl -u code-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add code-server default\n\n# Start service\nrc-service code-server start\n\n# Stop service\nrc-service code-server stop\n\n# Restart service\nrc-service code-server restart\n\n# Check status\nrc-service code-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'code-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice code-server start\n\n# Stop service\nservice code-server stop\n\n# Restart service\nservice code-server restart\n\n# Check status\nservice code-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start code_server\nbrew services stop code_server\nbrew services restart code_server\n\n# Check status\nbrew services list | grep code_server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start code-server\n\n# Stop service\nnet stop code-server\n\n# Using PowerShell\nStart-Service code-server\nStop-Service code-server\nRestart-Service code-server\n\n# Check status\nGet-Service code-server\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream code_server_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name code_server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name code_server.example.com;\n\n    ssl_certificate /etc/ssl/certs/code_server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/code_server.example.com.key;\n\n    location / {\n        proxy_pass http://code_server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName code_server.example.com\n    Redirect permanent / https://code_server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName code_server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/code_server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/code_server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend code_server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/code_server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend code_server_backend\n\nbackend code_server_backend\n    balance roundrobin\n    server code_server1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R code_server:code_server /etc/code_server\nsudo chmod 750 /etc/code_server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status code-server\n\n# View logs\nsudo journalctl -u code-server -f\n\n# Monitor resource usage\ntop -p $(pgrep code_server)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/code_server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/code_server-backup-$DATE.tar.gz\" /etc/code_server /var/lib/code_server\n\necho \"Backup completed: $BACKUP_DIR/code_server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop code-server\n\n# Restore from backup\ntar -xzf /backup/code_server/code_server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start code-server\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u code-server -n 100\nsudo tail -f /var/log/code_server/code_server.log\n\n# Check configuration\ncode-server --version\n\n# Check permissions\nls -la /etc/code_server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep code_server)\n\n# Check disk I/O\niotop -p $(pgrep code_server)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  code_server:\n    image: code_server:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/code_server\n      - ./data:/var/lib/code_server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update code_server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade code_server\n\n# Arch Linux\nsudo pacman -Syu code_server\n\n# Alpine Linux\napk update && apk upgrade code_server\n\n# openSUSE\nsudo zypper update code_server\n\n# FreeBSD\npkg update && pkg upgrade code_server\n\n# Always backup before updates\ntar -czf /backup/code_server-pre-update-$(date +%Y%m%d).tar.gz /etc/code_server\n\n# Restart after updates\nsudo systemctl restart code-server\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/code_server\n\n# Clean old logs\nfind /var/log/code_server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/code_server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.code_server.org/\n- GitHub Repository: https://github.com/code_server/code_server\n- Community Forum: https://forum.code_server.org/\n- Best Practices Guide: https://docs.code_server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"code-server-installation-guide\" class=\"mobile-header\">code-server Installation Guide</h1>\n<p class=\"mobile-paragraph\">code-server is a free and open-source VS Code in browser. code-server provides VS Code running on remote server</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for workspace</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default code-server port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install code-server\nsudo dnf install -y code_server\n\n# Enable and start service\nsudo systemctl enable --now code-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install code-server\nsudo apt install -y code_server\n\n# Enable and start service\nsudo systemctl enable --now code-server\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install code-server\nsudo pacman -S code_server\n\n# Enable and start service\nsudo systemctl enable --now code-server\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install code-server\napk add --no-cache code_server\n\n# Enable and start service\nrc-update add code-server default\nrc-service code-server start\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install code-server\nsudo zypper install -y code_server\n\n# Enable and start service\nsudo systemctl enable --now code-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install code_server\n\n# Start service\nbrew services start code_server\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install code_server\n\n# Enable in rc.conf\necho &#039;code-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice code-server start\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install code_server\n\n# Or using Scoop\nscoop install code_server\n\n# Verify installation\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/code_server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncode-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable code-server\n\n# Start service\nsudo systemctl start code-server\n\n# Stop service\nsudo systemctl stop code-server\n\n# Restart service\nsudo systemctl restart code-server\n\n# Check status\nsudo systemctl status code-server\n\n# View logs\nsudo journalctl -u code-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add code-server default\n\n# Start service\nrc-service code-server start\n\n# Stop service\nrc-service code-server stop\n\n# Restart service\nrc-service code-server restart\n\n# Check status\nrc-service code-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;code-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice code-server start\n\n# Stop service\nservice code-server stop\n\n# Restart service\nservice code-server restart\n\n# Check status\nservice code-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start code_server\nbrew services stop code_server\nbrew services restart code_server\n\n# Check status\nbrew services list | grep code_server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start code-server\n\n# Stop service\nnet stop code-server\n\n# Using PowerShell\nStart-Service code-server\nStop-Service code-server\nRestart-Service code-server\n\n# Check status\nGet-Service code-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream code_server_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name code_server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name code_server.example.com;\n\n    ssl_certificate /etc/ssl/certs/code_server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/code_server.example.com.key;\n\n    location / {\n        proxy_pass http://code_server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName code_server.example.com\n    Redirect permanent / https://code_server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName code_server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/code_server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/code_server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend code_server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/code_server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend code_server_backend\n\nbackend code_server_backend\n    balance roundrobin\n    server code_server1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R code_server:code_server /etc/code_server\nsudo chmod 750 /etc/code_server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status code-server\n\n# View logs\nsudo journalctl -u code-server -f\n\n# Monitor resource usage\ntop -p $(pgrep code_server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/code_server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/code_server-backup-$DATE.tar.gz&quot; /etc/code_server /var/lib/code_server\n\necho &quot;Backup completed: $BACKUP_DIR/code_server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop code-server\n\n# Restore from backup\ntar -xzf /backup/code_server/code_server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start code-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u code-server -n 100\nsudo tail -f /var/log/code_server/code_server.log\n\n# Check configuration\ncode-server --version\n\n# Check permissions\nls -la /etc/code_server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep code_server)\n\n# Check disk I/O\niotop -p $(pgrep code_server)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  code_server:\n    image: code_server:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/code_server\n      - ./data:/var/lib/code_server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update code_server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade code_server\n\n# Arch Linux\nsudo pacman -Syu code_server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade code_server\n\n# openSUSE\nsudo zypper update code_server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade code_server\n\n# Always backup before updates\ntar -czf /backup/code_server-pre-update-$(date +%Y%m%d).tar.gz /etc/code_server\n\n# Restart after updates\nsudo systemctl restart code-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/code_server\n\n# Clean old logs\nfind /var/log/code_server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/code_server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.code_server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/code_server/code_server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.code_server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.code_server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1154,"lastBuilt":"2025-09-16T03:18:02.470Z","metadataVersion":"2.0"},{"name":"concourse","displayName":"concourse Installation Guide","slug":"concourse","description":"concourse is a free and open-source continuous thing-doer. Concourse provides container-based CI/CD with pipelines defined as code, emphasizing reproducibility and clarity","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2222,8080],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/concourse","documentationUrl":"https://howtomgr.github.io/miscellaneous/concourse","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/concourse","updatedAt":"2025-09-16T03:03:38Z","createdAt":"2025-09-16T02:27:52Z","readmeRaw":"# concourse Installation Guide\n\nconcourse is a free and open-source continuous thing-doer. Concourse provides container-based CI/CD with pipelines defined as code, emphasizing reproducibility and clarity\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 10GB for workers\n  - Network: Worker registration\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default concourse port)\n  - Port 2222 for workers\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install concourse\nsudo dnf install -y concourse\n\n# Enable and start service\nsudo systemctl enable --now concourse-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nconcourse --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install concourse\nsudo apt install -y concourse\n\n# Enable and start service\nsudo systemctl enable --now concourse-web\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nconcourse --version\n```\n\n### Arch Linux\n\n```bash\n# Install concourse\nsudo pacman -S concourse\n\n# Enable and start service\nsudo systemctl enable --now concourse-web\n\n# Verify installation\nconcourse --version\n```\n\n### Alpine Linux\n\n```bash\n# Install concourse\napk add --no-cache concourse\n\n# Enable and start service\nrc-update add concourse-web default\nrc-service concourse-web start\n\n# Verify installation\nconcourse --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install concourse\nsudo zypper install -y concourse\n\n# Enable and start service\nsudo systemctl enable --now concourse-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nconcourse --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install concourse\n\n# Start service\nbrew services start concourse\n\n# Verify installation\nconcourse --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install concourse\n\n# Enable in rc.conf\necho 'concourse-web_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice concourse-web start\n\n# Verify installation\nconcourse --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install concourse\n\n# Or using Scoop\nscoop install concourse\n\n# Verify installation\nconcourse --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/concourse\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nconcourse --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable concourse-web\n\n# Start service\nsudo systemctl start concourse-web\n\n# Stop service\nsudo systemctl stop concourse-web\n\n# Restart service\nsudo systemctl restart concourse-web\n\n# Check status\nsudo systemctl status concourse-web\n\n# View logs\nsudo journalctl -u concourse-web -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add concourse-web default\n\n# Start service\nrc-service concourse-web start\n\n# Stop service\nrc-service concourse-web stop\n\n# Restart service\nrc-service concourse-web restart\n\n# Check status\nrc-service concourse-web status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'concourse-web_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice concourse-web start\n\n# Stop service\nservice concourse-web stop\n\n# Restart service\nservice concourse-web restart\n\n# Check status\nservice concourse-web status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start concourse\nbrew services stop concourse\nbrew services restart concourse\n\n# Check status\nbrew services list | grep concourse\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start concourse-web\n\n# Stop service\nnet stop concourse-web\n\n# Using PowerShell\nStart-Service concourse-web\nStop-Service concourse-web\nRestart-Service concourse-web\n\n# Check status\nGet-Service concourse-web\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream concourse_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name concourse.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name concourse.example.com;\n\n    ssl_certificate /etc/ssl/certs/concourse.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/concourse.example.com.key;\n\n    location / {\n        proxy_pass http://concourse_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName concourse.example.com\n    Redirect permanent / https://concourse.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName concourse.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/concourse.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/concourse.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend concourse_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/concourse.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend concourse_backend\n\nbackend concourse_backend\n    balance roundrobin\n    server concourse1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R concourse:concourse /etc/concourse\nsudo chmod 750 /etc/concourse\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status concourse-web\n\n# View logs\nsudo journalctl -u concourse-web -f\n\n# Monitor resource usage\ntop -p $(pgrep concourse)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/concourse\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/concourse-backup-$DATE.tar.gz\" /etc/concourse /var/lib/concourse\n\necho \"Backup completed: $BACKUP_DIR/concourse-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop concourse-web\n\n# Restore from backup\ntar -xzf /backup/concourse/concourse-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start concourse-web\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u concourse-web -n 100\nsudo tail -f /var/log/concourse/concourse.log\n\n# Check configuration\nconcourse --version\n\n# Check permissions\nls -la /etc/concourse\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep concourse)\n\n# Check disk I/O\niotop -p $(pgrep concourse)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  concourse:\n    image: concourse:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/concourse\n      - ./data:/var/lib/concourse\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update concourse\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade concourse\n\n# Arch Linux\nsudo pacman -Syu concourse\n\n# Alpine Linux\napk update && apk upgrade concourse\n\n# openSUSE\nsudo zypper update concourse\n\n# FreeBSD\npkg update && pkg upgrade concourse\n\n# Always backup before updates\ntar -czf /backup/concourse-pre-update-$(date +%Y%m%d).tar.gz /etc/concourse\n\n# Restart after updates\nsudo systemctl restart concourse-web\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/concourse\n\n# Clean old logs\nfind /var/log/concourse -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/concourse\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.concourse.org/\n- GitHub Repository: https://github.com/concourse/concourse\n- Community Forum: https://forum.concourse.org/\n- Best Practices Guide: https://docs.concourse.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"concourse-installation-guide\" class=\"mobile-header\">concourse Installation Guide</h1>\n<p class=\"mobile-paragraph\">concourse is a free and open-source continuous thing-doer. Concourse provides container-based CI/CD with pipelines defined as code, emphasizing reproducibility and clarity</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB for workers</li>\n<li class=\"mobile-list-item\">Network: Worker registration</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default concourse port)</li>\n<li class=\"mobile-list-item\">Port 2222 for workers</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install concourse\nsudo dnf install -y concourse\n\n# Enable and start service\nsudo systemctl enable --now concourse-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install concourse\nsudo apt install -y concourse\n\n# Enable and start service\nsudo systemctl enable --now concourse-web\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install concourse\nsudo pacman -S concourse\n\n# Enable and start service\nsudo systemctl enable --now concourse-web\n\n# Verify installation\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install concourse\napk add --no-cache concourse\n\n# Enable and start service\nrc-update add concourse-web default\nrc-service concourse-web start\n\n# Verify installation\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install concourse\nsudo zypper install -y concourse\n\n# Enable and start service\nsudo systemctl enable --now concourse-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install concourse\n\n# Start service\nbrew services start concourse\n\n# Verify installation\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install concourse\n\n# Enable in rc.conf\necho &#039;concourse-web_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice concourse-web start\n\n# Verify installation\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install concourse\n\n# Or using Scoop\nscoop install concourse\n\n# Verify installation\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/concourse\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nconcourse --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable concourse-web\n\n# Start service\nsudo systemctl start concourse-web\n\n# Stop service\nsudo systemctl stop concourse-web\n\n# Restart service\nsudo systemctl restart concourse-web\n\n# Check status\nsudo systemctl status concourse-web\n\n# View logs\nsudo journalctl -u concourse-web -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add concourse-web default\n\n# Start service\nrc-service concourse-web start\n\n# Stop service\nrc-service concourse-web stop\n\n# Restart service\nrc-service concourse-web restart\n\n# Check status\nrc-service concourse-web status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;concourse-web_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice concourse-web start\n\n# Stop service\nservice concourse-web stop\n\n# Restart service\nservice concourse-web restart\n\n# Check status\nservice concourse-web status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start concourse\nbrew services stop concourse\nbrew services restart concourse\n\n# Check status\nbrew services list | grep concourse</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start concourse-web\n\n# Stop service\nnet stop concourse-web\n\n# Using PowerShell\nStart-Service concourse-web\nStop-Service concourse-web\nRestart-Service concourse-web\n\n# Check status\nGet-Service concourse-web</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream concourse_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name concourse.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name concourse.example.com;\n\n    ssl_certificate /etc/ssl/certs/concourse.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/concourse.example.com.key;\n\n    location / {\n        proxy_pass http://concourse_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName concourse.example.com\n    Redirect permanent / https://concourse.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName concourse.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/concourse.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/concourse.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend concourse_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/concourse.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend concourse_backend\n\nbackend concourse_backend\n    balance roundrobin\n    server concourse1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R concourse:concourse /etc/concourse\nsudo chmod 750 /etc/concourse\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status concourse-web\n\n# View logs\nsudo journalctl -u concourse-web -f\n\n# Monitor resource usage\ntop -p $(pgrep concourse)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/concourse&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/concourse-backup-$DATE.tar.gz&quot; /etc/concourse /var/lib/concourse\n\necho &quot;Backup completed: $BACKUP_DIR/concourse-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop concourse-web\n\n# Restore from backup\ntar -xzf /backup/concourse/concourse-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start concourse-web</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u concourse-web -n 100\nsudo tail -f /var/log/concourse/concourse.log\n\n# Check configuration\nconcourse --version\n\n# Check permissions\nls -la /etc/concourse</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep concourse)\n\n# Check disk I/O\niotop -p $(pgrep concourse)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  concourse:\n    image: concourse:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/concourse\n      - ./data:/var/lib/concourse\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update concourse\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade concourse\n\n# Arch Linux\nsudo pacman -Syu concourse\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade concourse\n\n# openSUSE\nsudo zypper update concourse\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade concourse\n\n# Always backup before updates\ntar -czf /backup/concourse-pre-update-$(date +%Y%m%d).tar.gz /etc/concourse\n\n# Restart after updates\nsudo systemctl restart concourse-web</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/concourse\n\n# Clean old logs\nfind /var/log/concourse -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/concourse</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.concourse.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/concourse/concourse</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.concourse.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.concourse.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1164,"lastBuilt":"2025-09-16T03:18:01.758Z","metadataVersion":"2.0"},{"name":"consul_connect","displayName":"consul-connect Installation Guide","slug":"consul_connect","description":"consul-connect is a free and open-source service mesh. HashiCorp Consul Connect provides service mesh with service discovery","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8500],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/consul_connect","documentationUrl":"https://howtomgr.github.io/miscellaneous/consul_connect","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/consul_connect","updatedAt":"2025-09-16T03:03:52Z","createdAt":"2025-09-16T02:28:12Z","readmeRaw":"# consul-connect Installation Guide\n\nconsul-connect is a free and open-source service mesh. HashiCorp Consul Connect provides service mesh with service discovery\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 5GB for data\n  - Network: Various protocols\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8500 (default consul-connect port)\n  - Mesh on various\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install consul-connect\nsudo dnf install -y consul_connect\n\n# Enable and start service\nsudo systemctl enable --now consul-connect\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8500/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nconsul-connect --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install consul-connect\nsudo apt install -y consul_connect\n\n# Enable and start service\nsudo systemctl enable --now consul-connect\n\n# Configure firewall\nsudo ufw allow 8500\n\n# Verify installation\nconsul-connect --version\n```\n\n### Arch Linux\n\n```bash\n# Install consul-connect\nsudo pacman -S consul_connect\n\n# Enable and start service\nsudo systemctl enable --now consul-connect\n\n# Verify installation\nconsul-connect --version\n```\n\n### Alpine Linux\n\n```bash\n# Install consul-connect\napk add --no-cache consul_connect\n\n# Enable and start service\nrc-update add consul-connect default\nrc-service consul-connect start\n\n# Verify installation\nconsul-connect --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install consul-connect\nsudo zypper install -y consul_connect\n\n# Enable and start service\nsudo systemctl enable --now consul-connect\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8500/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nconsul-connect --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install consul_connect\n\n# Start service\nbrew services start consul_connect\n\n# Verify installation\nconsul-connect --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install consul_connect\n\n# Enable in rc.conf\necho 'consul-connect_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice consul-connect start\n\n# Verify installation\nconsul-connect --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install consul_connect\n\n# Or using Scoop\nscoop install consul_connect\n\n# Verify installation\nconsul-connect --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/consul_connect\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nconsul-connect --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable consul-connect\n\n# Start service\nsudo systemctl start consul-connect\n\n# Stop service\nsudo systemctl stop consul-connect\n\n# Restart service\nsudo systemctl restart consul-connect\n\n# Check status\nsudo systemctl status consul-connect\n\n# View logs\nsudo journalctl -u consul-connect -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add consul-connect default\n\n# Start service\nrc-service consul-connect start\n\n# Stop service\nrc-service consul-connect stop\n\n# Restart service\nrc-service consul-connect restart\n\n# Check status\nrc-service consul-connect status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'consul-connect_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice consul-connect start\n\n# Stop service\nservice consul-connect stop\n\n# Restart service\nservice consul-connect restart\n\n# Check status\nservice consul-connect status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start consul_connect\nbrew services stop consul_connect\nbrew services restart consul_connect\n\n# Check status\nbrew services list | grep consul_connect\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start consul-connect\n\n# Stop service\nnet stop consul-connect\n\n# Using PowerShell\nStart-Service consul-connect\nStop-Service consul-connect\nRestart-Service consul-connect\n\n# Check status\nGet-Service consul-connect\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream consul_connect_backend {\n    server 127.0.0.1:8500;\n}\n\nserver {\n    listen 80;\n    server_name consul_connect.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name consul_connect.example.com;\n\n    ssl_certificate /etc/ssl/certs/consul_connect.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/consul_connect.example.com.key;\n\n    location / {\n        proxy_pass http://consul_connect_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName consul_connect.example.com\n    Redirect permanent / https://consul_connect.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName consul_connect.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/consul_connect.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/consul_connect.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8500/\n    ProxyPassReverse / http://127.0.0.1:8500/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend consul_connect_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/consul_connect.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend consul_connect_backend\n\nbackend consul_connect_backend\n    balance roundrobin\n    server consul_connect1 127.0.0.1:8500 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R consul_connect:consul_connect /etc/consul_connect\nsudo chmod 750 /etc/consul_connect\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8500/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status consul-connect\n\n# View logs\nsudo journalctl -u consul-connect -f\n\n# Monitor resource usage\ntop -p $(pgrep consul_connect)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/consul_connect\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/consul_connect-backup-$DATE.tar.gz\" /etc/consul_connect /var/lib/consul_connect\n\necho \"Backup completed: $BACKUP_DIR/consul_connect-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop consul-connect\n\n# Restore from backup\ntar -xzf /backup/consul_connect/consul_connect-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start consul-connect\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u consul-connect -n 100\nsudo tail -f /var/log/consul_connect/consul_connect.log\n\n# Check configuration\nconsul-connect --version\n\n# Check permissions\nls -la /etc/consul_connect\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8500\n\n# Test connectivity\ntelnet localhost 8500\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep consul_connect)\n\n# Check disk I/O\niotop -p $(pgrep consul_connect)\n\n# Check connections\nss -an | grep 8500\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  consul_connect:\n    image: consul_connect:latest\n    ports:\n      - \"8500:8500\"\n    volumes:\n      - ./config:/etc/consul_connect\n      - ./data:/var/lib/consul_connect\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update consul_connect\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade consul_connect\n\n# Arch Linux\nsudo pacman -Syu consul_connect\n\n# Alpine Linux\napk update && apk upgrade consul_connect\n\n# openSUSE\nsudo zypper update consul_connect\n\n# FreeBSD\npkg update && pkg upgrade consul_connect\n\n# Always backup before updates\ntar -czf /backup/consul_connect-pre-update-$(date +%Y%m%d).tar.gz /etc/consul_connect\n\n# Restart after updates\nsudo systemctl restart consul-connect\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/consul_connect\n\n# Clean old logs\nfind /var/log/consul_connect -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/consul_connect\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.consul_connect.org/\n- GitHub Repository: https://github.com/consul_connect/consul_connect\n- Community Forum: https://forum.consul_connect.org/\n- Best Practices Guide: https://docs.consul_connect.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"consul-connect-installation-guide\" class=\"mobile-header\">consul-connect Installation Guide</h1>\n<p class=\"mobile-paragraph\">consul-connect is a free and open-source service mesh. HashiCorp Consul Connect provides service mesh with service discovery</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for data</li>\n<li class=\"mobile-list-item\">Network: Various protocols</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8500 (default consul-connect port)</li>\n<li class=\"mobile-list-item\">Mesh on various</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install consul-connect\nsudo dnf install -y consul_connect\n\n# Enable and start service\nsudo systemctl enable --now consul-connect\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8500/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install consul-connect\nsudo apt install -y consul_connect\n\n# Enable and start service\nsudo systemctl enable --now consul-connect\n\n# Configure firewall\nsudo ufw allow 8500\n\n# Verify installation\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install consul-connect\nsudo pacman -S consul_connect\n\n# Enable and start service\nsudo systemctl enable --now consul-connect\n\n# Verify installation\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install consul-connect\napk add --no-cache consul_connect\n\n# Enable and start service\nrc-update add consul-connect default\nrc-service consul-connect start\n\n# Verify installation\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install consul-connect\nsudo zypper install -y consul_connect\n\n# Enable and start service\nsudo systemctl enable --now consul-connect\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8500/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install consul_connect\n\n# Start service\nbrew services start consul_connect\n\n# Verify installation\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install consul_connect\n\n# Enable in rc.conf\necho &#039;consul-connect_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice consul-connect start\n\n# Verify installation\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install consul_connect\n\n# Or using Scoop\nscoop install consul_connect\n\n# Verify installation\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/consul_connect\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nconsul-connect --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable consul-connect\n\n# Start service\nsudo systemctl start consul-connect\n\n# Stop service\nsudo systemctl stop consul-connect\n\n# Restart service\nsudo systemctl restart consul-connect\n\n# Check status\nsudo systemctl status consul-connect\n\n# View logs\nsudo journalctl -u consul-connect -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add consul-connect default\n\n# Start service\nrc-service consul-connect start\n\n# Stop service\nrc-service consul-connect stop\n\n# Restart service\nrc-service consul-connect restart\n\n# Check status\nrc-service consul-connect status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;consul-connect_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice consul-connect start\n\n# Stop service\nservice consul-connect stop\n\n# Restart service\nservice consul-connect restart\n\n# Check status\nservice consul-connect status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start consul_connect\nbrew services stop consul_connect\nbrew services restart consul_connect\n\n# Check status\nbrew services list | grep consul_connect</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start consul-connect\n\n# Stop service\nnet stop consul-connect\n\n# Using PowerShell\nStart-Service consul-connect\nStop-Service consul-connect\nRestart-Service consul-connect\n\n# Check status\nGet-Service consul-connect</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream consul_connect_backend {\n    server 127.0.0.1:8500;\n}\n\nserver {\n    listen 80;\n    server_name consul_connect.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name consul_connect.example.com;\n\n    ssl_certificate /etc/ssl/certs/consul_connect.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/consul_connect.example.com.key;\n\n    location / {\n        proxy_pass http://consul_connect_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName consul_connect.example.com\n    Redirect permanent / https://consul_connect.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName consul_connect.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/consul_connect.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/consul_connect.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8500/\n    ProxyPassReverse / http://127.0.0.1:8500/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend consul_connect_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/consul_connect.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend consul_connect_backend\n\nbackend consul_connect_backend\n    balance roundrobin\n    server consul_connect1 127.0.0.1:8500 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R consul_connect:consul_connect /etc/consul_connect\nsudo chmod 750 /etc/consul_connect\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8500/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status consul-connect\n\n# View logs\nsudo journalctl -u consul-connect -f\n\n# Monitor resource usage\ntop -p $(pgrep consul_connect)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/consul_connect&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/consul_connect-backup-$DATE.tar.gz&quot; /etc/consul_connect /var/lib/consul_connect\n\necho &quot;Backup completed: $BACKUP_DIR/consul_connect-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop consul-connect\n\n# Restore from backup\ntar -xzf /backup/consul_connect/consul_connect-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start consul-connect</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u consul-connect -n 100\nsudo tail -f /var/log/consul_connect/consul_connect.log\n\n# Check configuration\nconsul-connect --version\n\n# Check permissions\nls -la /etc/consul_connect</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8500\n\n# Test connectivity\ntelnet localhost 8500\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep consul_connect)\n\n# Check disk I/O\niotop -p $(pgrep consul_connect)\n\n# Check connections\nss -an | grep 8500</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  consul_connect:\n    image: consul_connect:latest\n    ports:\n      - &quot;8500:8500&quot;\n    volumes:\n      - ./config:/etc/consul_connect\n      - ./data:/var/lib/consul_connect\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update consul_connect\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade consul_connect\n\n# Arch Linux\nsudo pacman -Syu consul_connect\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade consul_connect\n\n# openSUSE\nsudo zypper update consul_connect\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade consul_connect\n\n# Always backup before updates\ntar -czf /backup/consul_connect-pre-update-$(date +%Y%m%d).tar.gz /etc/consul_connect\n\n# Restart after updates\nsudo systemctl restart consul-connect</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/consul_connect\n\n# Clean old logs\nfind /var/log/consul_connect -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/consul_connect</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.consul_connect.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/consul_connect/consul_connect</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.consul_connect.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.consul_connect.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1156,"lastBuilt":"2025-09-16T03:18:01.004Z","metadataVersion":"2.0"},{"name":"countly","displayName":"countly Installation Guide","slug":"countly","description":"countly is a free and open-source product analytics. Countly provides product analytics for web, mobile, and desktop","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,6001],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/countly","documentationUrl":"https://howtomgr.github.io/miscellaneous/countly","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/countly","updatedAt":"2025-09-16T03:04:28Z","createdAt":"2025-09-16T02:29:00Z","readmeRaw":"# countly Installation Guide\n\ncountly is a free and open-source product analytics. Countly provides product analytics for web, mobile, and desktop\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 4GB minimum\n  - Storage: 20GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 6001 (default countly port)\n  - API on 3001\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install countly\nsudo dnf install -y countly\n\n# Enable and start service\nsudo systemctl enable --now countly\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6001/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncountly --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install countly\nsudo apt install -y countly\n\n# Enable and start service\nsudo systemctl enable --now countly\n\n# Configure firewall\nsudo ufw allow 6001\n\n# Verify installation\ncountly --version\n```\n\n### Arch Linux\n\n```bash\n# Install countly\nsudo pacman -S countly\n\n# Enable and start service\nsudo systemctl enable --now countly\n\n# Verify installation\ncountly --version\n```\n\n### Alpine Linux\n\n```bash\n# Install countly\napk add --no-cache countly\n\n# Enable and start service\nrc-update add countly default\nrc-service countly start\n\n# Verify installation\ncountly --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install countly\nsudo zypper install -y countly\n\n# Enable and start service\nsudo systemctl enable --now countly\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6001/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncountly --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install countly\n\n# Start service\nbrew services start countly\n\n# Verify installation\ncountly --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install countly\n\n# Enable in rc.conf\necho 'countly_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice countly start\n\n# Verify installation\ncountly --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install countly\n\n# Or using Scoop\nscoop install countly\n\n# Verify installation\ncountly --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/countly\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncountly --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable countly\n\n# Start service\nsudo systemctl start countly\n\n# Stop service\nsudo systemctl stop countly\n\n# Restart service\nsudo systemctl restart countly\n\n# Check status\nsudo systemctl status countly\n\n# View logs\nsudo journalctl -u countly -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add countly default\n\n# Start service\nrc-service countly start\n\n# Stop service\nrc-service countly stop\n\n# Restart service\nrc-service countly restart\n\n# Check status\nrc-service countly status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'countly_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice countly start\n\n# Stop service\nservice countly stop\n\n# Restart service\nservice countly restart\n\n# Check status\nservice countly status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start countly\nbrew services stop countly\nbrew services restart countly\n\n# Check status\nbrew services list | grep countly\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start countly\n\n# Stop service\nnet stop countly\n\n# Using PowerShell\nStart-Service countly\nStop-Service countly\nRestart-Service countly\n\n# Check status\nGet-Service countly\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream countly_backend {\n    server 127.0.0.1:6001;\n}\n\nserver {\n    listen 80;\n    server_name countly.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name countly.example.com;\n\n    ssl_certificate /etc/ssl/certs/countly.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/countly.example.com.key;\n\n    location / {\n        proxy_pass http://countly_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName countly.example.com\n    Redirect permanent / https://countly.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName countly.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/countly.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/countly.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6001/\n    ProxyPassReverse / http://127.0.0.1:6001/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend countly_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/countly.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend countly_backend\n\nbackend countly_backend\n    balance roundrobin\n    server countly1 127.0.0.1:6001 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R countly:countly /etc/countly\nsudo chmod 750 /etc/countly\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6001/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status countly\n\n# View logs\nsudo journalctl -u countly -f\n\n# Monitor resource usage\ntop -p $(pgrep countly)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/countly\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/countly-backup-$DATE.tar.gz\" /etc/countly /var/lib/countly\n\necho \"Backup completed: $BACKUP_DIR/countly-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop countly\n\n# Restore from backup\ntar -xzf /backup/countly/countly-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start countly\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u countly -n 100\nsudo tail -f /var/log/countly/countly.log\n\n# Check configuration\ncountly --version\n\n# Check permissions\nls -la /etc/countly\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 6001\n\n# Test connectivity\ntelnet localhost 6001\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep countly)\n\n# Check disk I/O\niotop -p $(pgrep countly)\n\n# Check connections\nss -an | grep 6001\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  countly:\n    image: countly:latest\n    ports:\n      - \"6001:6001\"\n    volumes:\n      - ./config:/etc/countly\n      - ./data:/var/lib/countly\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update countly\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade countly\n\n# Arch Linux\nsudo pacman -Syu countly\n\n# Alpine Linux\napk update && apk upgrade countly\n\n# openSUSE\nsudo zypper update countly\n\n# FreeBSD\npkg update && pkg upgrade countly\n\n# Always backup before updates\ntar -czf /backup/countly-pre-update-$(date +%Y%m%d).tar.gz /etc/countly\n\n# Restart after updates\nsudo systemctl restart countly\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/countly\n\n# Clean old logs\nfind /var/log/countly -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/countly\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.countly.org/\n- GitHub Repository: https://github.com/countly/countly\n- Community Forum: https://forum.countly.org/\n- Best Practices Guide: https://docs.countly.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"countly-installation-guide\" class=\"mobile-header\">countly Installation Guide</h1>\n<p class=\"mobile-paragraph\">countly is a free and open-source product analytics. Countly provides product analytics for web, mobile, and desktop</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 20GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 6001 (default countly port)</li>\n<li class=\"mobile-list-item\">API on 3001</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install countly\nsudo dnf install -y countly\n\n# Enable and start service\nsudo systemctl enable --now countly\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6001/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncountly --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install countly\nsudo apt install -y countly\n\n# Enable and start service\nsudo systemctl enable --now countly\n\n# Configure firewall\nsudo ufw allow 6001\n\n# Verify installation\ncountly --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install countly\nsudo pacman -S countly\n\n# Enable and start service\nsudo systemctl enable --now countly\n\n# Verify installation\ncountly --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install countly\napk add --no-cache countly\n\n# Enable and start service\nrc-update add countly default\nrc-service countly start\n\n# Verify installation\ncountly --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install countly\nsudo zypper install -y countly\n\n# Enable and start service\nsudo systemctl enable --now countly\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6001/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncountly --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install countly\n\n# Start service\nbrew services start countly\n\n# Verify installation\ncountly --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install countly\n\n# Enable in rc.conf\necho &#039;countly_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice countly start\n\n# Verify installation\ncountly --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install countly\n\n# Or using Scoop\nscoop install countly\n\n# Verify installation\ncountly --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/countly\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncountly --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable countly\n\n# Start service\nsudo systemctl start countly\n\n# Stop service\nsudo systemctl stop countly\n\n# Restart service\nsudo systemctl restart countly\n\n# Check status\nsudo systemctl status countly\n\n# View logs\nsudo journalctl -u countly -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add countly default\n\n# Start service\nrc-service countly start\n\n# Stop service\nrc-service countly stop\n\n# Restart service\nrc-service countly restart\n\n# Check status\nrc-service countly status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;countly_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice countly start\n\n# Stop service\nservice countly stop\n\n# Restart service\nservice countly restart\n\n# Check status\nservice countly status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start countly\nbrew services stop countly\nbrew services restart countly\n\n# Check status\nbrew services list | grep countly</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start countly\n\n# Stop service\nnet stop countly\n\n# Using PowerShell\nStart-Service countly\nStop-Service countly\nRestart-Service countly\n\n# Check status\nGet-Service countly</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream countly_backend {\n    server 127.0.0.1:6001;\n}\n\nserver {\n    listen 80;\n    server_name countly.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name countly.example.com;\n\n    ssl_certificate /etc/ssl/certs/countly.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/countly.example.com.key;\n\n    location / {\n        proxy_pass http://countly_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName countly.example.com\n    Redirect permanent / https://countly.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName countly.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/countly.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/countly.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6001/\n    ProxyPassReverse / http://127.0.0.1:6001/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend countly_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/countly.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend countly_backend\n\nbackend countly_backend\n    balance roundrobin\n    server countly1 127.0.0.1:6001 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R countly:countly /etc/countly\nsudo chmod 750 /etc/countly\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6001/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status countly\n\n# View logs\nsudo journalctl -u countly -f\n\n# Monitor resource usage\ntop -p $(pgrep countly)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/countly&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/countly-backup-$DATE.tar.gz&quot; /etc/countly /var/lib/countly\n\necho &quot;Backup completed: $BACKUP_DIR/countly-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop countly\n\n# Restore from backup\ntar -xzf /backup/countly/countly-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start countly</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u countly -n 100\nsudo tail -f /var/log/countly/countly.log\n\n# Check configuration\ncountly --version\n\n# Check permissions\nls -la /etc/countly</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 6001\n\n# Test connectivity\ntelnet localhost 6001\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep countly)\n\n# Check disk I/O\niotop -p $(pgrep countly)\n\n# Check connections\nss -an | grep 6001</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  countly:\n    image: countly:latest\n    ports:\n      - &quot;6001:6001&quot;\n    volumes:\n      - ./config:/etc/countly\n      - ./data:/var/lib/countly\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update countly\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade countly\n\n# Arch Linux\nsudo pacman -Syu countly\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade countly\n\n# openSUSE\nsudo zypper update countly\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade countly\n\n# Always backup before updates\ntar -czf /backup/countly-pre-update-$(date +%Y%m%d).tar.gz /etc/countly\n\n# Restart after updates\nsudo systemctl restart countly</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/countly\n\n# Clean old logs\nfind /var/log/countly -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/countly</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.countly.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/countly/countly</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.countly.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.countly.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1156,"lastBuilt":"2025-09-16T03:17:58.990Z","metadataVersion":"2.0"},{"name":"cri-o","displayName":"cri-o Installation Guide","slug":"cri-o","description":"cri-o is a free and open-source lightweight container runtime for Kubernetes. CRI-O provides a minimal runtime specifically for Kubernetes, serving as an alternative to Docker or containerd","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,10010],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/cri-o","documentationUrl":"https://howtomgr.github.io/miscellaneous/cri-o","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cri-o","updatedAt":"2025-09-16T03:04:41Z","createdAt":"2025-09-16T02:29:20Z","readmeRaw":"# cri-o Installation Guide\n\ncri-o is a free and open-source lightweight container runtime for Kubernetes. CRI-O provides a minimal runtime specifically for Kubernetes, serving as an alternative to Docker or containerd\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for installation\n  - Network: Container networking\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 10010 (default cri-o port)\n  - Unix socket based\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cri-o\nsudo dnf install -y cri-o\n\n# Enable and start service\nsudo systemctl enable --now crio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10010/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncrio --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cri-o\nsudo apt install -y cri-o\n\n# Enable and start service\nsudo systemctl enable --now crio\n\n# Configure firewall\nsudo ufw allow 10010\n\n# Verify installation\ncrio --version\n```\n\n### Arch Linux\n\n```bash\n# Install cri-o\nsudo pacman -S cri-o\n\n# Enable and start service\nsudo systemctl enable --now crio\n\n# Verify installation\ncrio --version\n```\n\n### Alpine Linux\n\n```bash\n# Install cri-o\napk add --no-cache cri-o\n\n# Enable and start service\nrc-update add crio default\nrc-service crio start\n\n# Verify installation\ncrio --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cri-o\nsudo zypper install -y cri-o\n\n# Enable and start service\nsudo systemctl enable --now crio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10010/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncrio --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cri-o\n\n# Start service\nbrew services start cri-o\n\n# Verify installation\ncrio --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cri-o\n\n# Enable in rc.conf\necho 'crio_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice crio start\n\n# Verify installation\ncrio --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cri-o\n\n# Or using Scoop\nscoop install cri-o\n\n# Verify installation\ncrio --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cri-o\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncrio --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable crio\n\n# Start service\nsudo systemctl start crio\n\n# Stop service\nsudo systemctl stop crio\n\n# Restart service\nsudo systemctl restart crio\n\n# Check status\nsudo systemctl status crio\n\n# View logs\nsudo journalctl -u crio -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add crio default\n\n# Start service\nrc-service crio start\n\n# Stop service\nrc-service crio stop\n\n# Restart service\nrc-service crio restart\n\n# Check status\nrc-service crio status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'crio_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice crio start\n\n# Stop service\nservice crio stop\n\n# Restart service\nservice crio restart\n\n# Check status\nservice crio status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cri-o\nbrew services stop cri-o\nbrew services restart cri-o\n\n# Check status\nbrew services list | grep cri-o\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start crio\n\n# Stop service\nnet stop crio\n\n# Using PowerShell\nStart-Service crio\nStop-Service crio\nRestart-Service crio\n\n# Check status\nGet-Service crio\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cri-o_backend {\n    server 127.0.0.1:10010;\n}\n\nserver {\n    listen 80;\n    server_name cri-o.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cri-o.example.com;\n\n    ssl_certificate /etc/ssl/certs/cri-o.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cri-o.example.com.key;\n\n    location / {\n        proxy_pass http://cri-o_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cri-o.example.com\n    Redirect permanent / https://cri-o.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cri-o.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cri-o.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cri-o.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:10010/\n    ProxyPassReverse / http://127.0.0.1:10010/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cri-o_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cri-o.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cri-o_backend\n\nbackend cri-o_backend\n    balance roundrobin\n    server cri-o1 127.0.0.1:10010 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cri-o:cri-o /etc/cri-o\nsudo chmod 750 /etc/cri-o\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10010/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status crio\n\n# View logs\nsudo journalctl -u crio -f\n\n# Monitor resource usage\ntop -p $(pgrep cri-o)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cri-o\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cri-o-backup-$DATE.tar.gz\" /etc/cri-o /var/lib/cri-o\n\necho \"Backup completed: $BACKUP_DIR/cri-o-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop crio\n\n# Restore from backup\ntar -xzf /backup/cri-o/cri-o-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start crio\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u crio -n 100\nsudo tail -f /var/log/cri-o/cri-o.log\n\n# Check configuration\ncrio --version\n\n# Check permissions\nls -la /etc/cri-o\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 10010\n\n# Test connectivity\ntelnet localhost 10010\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cri-o)\n\n# Check disk I/O\niotop -p $(pgrep cri-o)\n\n# Check connections\nss -an | grep 10010\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cri-o:\n    image: cri-o:latest\n    ports:\n      - \"10010:10010\"\n    volumes:\n      - ./config:/etc/cri-o\n      - ./data:/var/lib/cri-o\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cri-o\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cri-o\n\n# Arch Linux\nsudo pacman -Syu cri-o\n\n# Alpine Linux\napk update && apk upgrade cri-o\n\n# openSUSE\nsudo zypper update cri-o\n\n# FreeBSD\npkg update && pkg upgrade cri-o\n\n# Always backup before updates\ntar -czf /backup/cri-o-pre-update-$(date +%Y%m%d).tar.gz /etc/cri-o\n\n# Restart after updates\nsudo systemctl restart crio\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cri-o\n\n# Clean old logs\nfind /var/log/cri-o -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cri-o\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cri-o.org/\n- GitHub Repository: https://github.com/cri-o/cri-o\n- Community Forum: https://forum.cri-o.org/\n- Best Practices Guide: https://docs.cri-o.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"cri-o-installation-guide\" class=\"mobile-header\">cri-o Installation Guide</h1>\n<p class=\"mobile-paragraph\">cri-o is a free and open-source lightweight container runtime for Kubernetes. CRI-O provides a minimal runtime specifically for Kubernetes, serving as an alternative to Docker or containerd</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: Container networking</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 10010 (default cri-o port)</li>\n<li class=\"mobile-list-item\">Unix socket based</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cri-o\nsudo dnf install -y cri-o\n\n# Enable and start service\nsudo systemctl enable --now crio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10010/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncrio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cri-o\nsudo apt install -y cri-o\n\n# Enable and start service\nsudo systemctl enable --now crio\n\n# Configure firewall\nsudo ufw allow 10010\n\n# Verify installation\ncrio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cri-o\nsudo pacman -S cri-o\n\n# Enable and start service\nsudo systemctl enable --now crio\n\n# Verify installation\ncrio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cri-o\napk add --no-cache cri-o\n\n# Enable and start service\nrc-update add crio default\nrc-service crio start\n\n# Verify installation\ncrio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cri-o\nsudo zypper install -y cri-o\n\n# Enable and start service\nsudo systemctl enable --now crio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10010/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncrio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cri-o\n\n# Start service\nbrew services start cri-o\n\n# Verify installation\ncrio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cri-o\n\n# Enable in rc.conf\necho &#039;crio_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice crio start\n\n# Verify installation\ncrio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cri-o\n\n# Or using Scoop\nscoop install cri-o\n\n# Verify installation\ncrio --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cri-o\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncrio --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable crio\n\n# Start service\nsudo systemctl start crio\n\n# Stop service\nsudo systemctl stop crio\n\n# Restart service\nsudo systemctl restart crio\n\n# Check status\nsudo systemctl status crio\n\n# View logs\nsudo journalctl -u crio -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add crio default\n\n# Start service\nrc-service crio start\n\n# Stop service\nrc-service crio stop\n\n# Restart service\nrc-service crio restart\n\n# Check status\nrc-service crio status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;crio_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice crio start\n\n# Stop service\nservice crio stop\n\n# Restart service\nservice crio restart\n\n# Check status\nservice crio status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cri-o\nbrew services stop cri-o\nbrew services restart cri-o\n\n# Check status\nbrew services list | grep cri-o</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start crio\n\n# Stop service\nnet stop crio\n\n# Using PowerShell\nStart-Service crio\nStop-Service crio\nRestart-Service crio\n\n# Check status\nGet-Service crio</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cri-o_backend {\n    server 127.0.0.1:10010;\n}\n\nserver {\n    listen 80;\n    server_name cri-o.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cri-o.example.com;\n\n    ssl_certificate /etc/ssl/certs/cri-o.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cri-o.example.com.key;\n\n    location / {\n        proxy_pass http://cri-o_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cri-o.example.com\n    Redirect permanent / https://cri-o.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cri-o.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cri-o.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cri-o.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:10010/\n    ProxyPassReverse / http://127.0.0.1:10010/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cri-o_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cri-o.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cri-o_backend\n\nbackend cri-o_backend\n    balance roundrobin\n    server cri-o1 127.0.0.1:10010 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cri-o:cri-o /etc/cri-o\nsudo chmod 750 /etc/cri-o\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10010/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status crio\n\n# View logs\nsudo journalctl -u crio -f\n\n# Monitor resource usage\ntop -p $(pgrep cri-o)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cri-o&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cri-o-backup-$DATE.tar.gz&quot; /etc/cri-o /var/lib/cri-o\n\necho &quot;Backup completed: $BACKUP_DIR/cri-o-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop crio\n\n# Restore from backup\ntar -xzf /backup/cri-o/cri-o-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start crio</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u crio -n 100\nsudo tail -f /var/log/cri-o/cri-o.log\n\n# Check configuration\ncrio --version\n\n# Check permissions\nls -la /etc/cri-o</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 10010\n\n# Test connectivity\ntelnet localhost 10010\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cri-o)\n\n# Check disk I/O\niotop -p $(pgrep cri-o)\n\n# Check connections\nss -an | grep 10010</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cri-o:\n    image: cri-o:latest\n    ports:\n      - &quot;10010:10010&quot;\n    volumes:\n      - ./config:/etc/cri-o\n      - ./data:/var/lib/cri-o\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cri-o\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cri-o\n\n# Arch Linux\nsudo pacman -Syu cri-o\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cri-o\n\n# openSUSE\nsudo zypper update cri-o\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cri-o\n\n# Always backup before updates\ntar -czf /backup/cri-o-pre-update-$(date +%Y%m%d).tar.gz /etc/cri-o\n\n# Restart after updates\nsudo systemctl restart crio</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cri-o\n\n# Clean old logs\nfind /var/log/cri-o -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cri-o</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cri-o.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cri-o/cri-o</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cri-o.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cri-o.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1167,"lastBuilt":"2025-09-16T03:17:58.239Z","metadataVersion":"2.0"},{"name":"crucible","displayName":"crucible Installation Guide","slug":"crucible","description":"crucible is a free and open-source code review tool. Crucible provides code review tool integrated with various VCS","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8060],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/crucible","documentationUrl":"https://howtomgr.github.io/miscellaneous/crucible","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/crucible","updatedAt":"2025-09-16T03:04:48Z","createdAt":"2025-09-16T02:29:29Z","readmeRaw":"# crucible Installation Guide\n\ncrucible is a free and open-source code review tool. Crucible provides code review tool integrated with various VCS\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 4GB minimum\n  - Storage: 10GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8060 (default crucible port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install crucible\nsudo dnf install -y crucible\n\n# Enable and start service\nsudo systemctl enable --now crucible\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8060/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncrucible --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install crucible\nsudo apt install -y crucible\n\n# Enable and start service\nsudo systemctl enable --now crucible\n\n# Configure firewall\nsudo ufw allow 8060\n\n# Verify installation\ncrucible --version\n```\n\n### Arch Linux\n\n```bash\n# Install crucible\nsudo pacman -S crucible\n\n# Enable and start service\nsudo systemctl enable --now crucible\n\n# Verify installation\ncrucible --version\n```\n\n### Alpine Linux\n\n```bash\n# Install crucible\napk add --no-cache crucible\n\n# Enable and start service\nrc-update add crucible default\nrc-service crucible start\n\n# Verify installation\ncrucible --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install crucible\nsudo zypper install -y crucible\n\n# Enable and start service\nsudo systemctl enable --now crucible\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8060/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncrucible --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install crucible\n\n# Start service\nbrew services start crucible\n\n# Verify installation\ncrucible --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install crucible\n\n# Enable in rc.conf\necho 'crucible_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice crucible start\n\n# Verify installation\ncrucible --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install crucible\n\n# Or using Scoop\nscoop install crucible\n\n# Verify installation\ncrucible --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/crucible\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncrucible --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable crucible\n\n# Start service\nsudo systemctl start crucible\n\n# Stop service\nsudo systemctl stop crucible\n\n# Restart service\nsudo systemctl restart crucible\n\n# Check status\nsudo systemctl status crucible\n\n# View logs\nsudo journalctl -u crucible -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add crucible default\n\n# Start service\nrc-service crucible start\n\n# Stop service\nrc-service crucible stop\n\n# Restart service\nrc-service crucible restart\n\n# Check status\nrc-service crucible status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'crucible_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice crucible start\n\n# Stop service\nservice crucible stop\n\n# Restart service\nservice crucible restart\n\n# Check status\nservice crucible status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start crucible\nbrew services stop crucible\nbrew services restart crucible\n\n# Check status\nbrew services list | grep crucible\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start crucible\n\n# Stop service\nnet stop crucible\n\n# Using PowerShell\nStart-Service crucible\nStop-Service crucible\nRestart-Service crucible\n\n# Check status\nGet-Service crucible\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream crucible_backend {\n    server 127.0.0.1:8060;\n}\n\nserver {\n    listen 80;\n    server_name crucible.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name crucible.example.com;\n\n    ssl_certificate /etc/ssl/certs/crucible.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/crucible.example.com.key;\n\n    location / {\n        proxy_pass http://crucible_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName crucible.example.com\n    Redirect permanent / https://crucible.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName crucible.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/crucible.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/crucible.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8060/\n    ProxyPassReverse / http://127.0.0.1:8060/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend crucible_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/crucible.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend crucible_backend\n\nbackend crucible_backend\n    balance roundrobin\n    server crucible1 127.0.0.1:8060 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R crucible:crucible /etc/crucible\nsudo chmod 750 /etc/crucible\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8060/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status crucible\n\n# View logs\nsudo journalctl -u crucible -f\n\n# Monitor resource usage\ntop -p $(pgrep crucible)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/crucible\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/crucible-backup-$DATE.tar.gz\" /etc/crucible /var/lib/crucible\n\necho \"Backup completed: $BACKUP_DIR/crucible-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop crucible\n\n# Restore from backup\ntar -xzf /backup/crucible/crucible-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start crucible\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u crucible -n 100\nsudo tail -f /var/log/crucible/crucible.log\n\n# Check configuration\ncrucible --version\n\n# Check permissions\nls -la /etc/crucible\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8060\n\n# Test connectivity\ntelnet localhost 8060\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep crucible)\n\n# Check disk I/O\niotop -p $(pgrep crucible)\n\n# Check connections\nss -an | grep 8060\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  crucible:\n    image: crucible:latest\n    ports:\n      - \"8060:8060\"\n    volumes:\n      - ./config:/etc/crucible\n      - ./data:/var/lib/crucible\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update crucible\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade crucible\n\n# Arch Linux\nsudo pacman -Syu crucible\n\n# Alpine Linux\napk update && apk upgrade crucible\n\n# openSUSE\nsudo zypper update crucible\n\n# FreeBSD\npkg update && pkg upgrade crucible\n\n# Always backup before updates\ntar -czf /backup/crucible-pre-update-$(date +%Y%m%d).tar.gz /etc/crucible\n\n# Restart after updates\nsudo systemctl restart crucible\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/crucible\n\n# Clean old logs\nfind /var/log/crucible -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/crucible\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.crucible.org/\n- GitHub Repository: https://github.com/crucible/crucible\n- Community Forum: https://forum.crucible.org/\n- Best Practices Guide: https://docs.crucible.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"crucible-installation-guide\" class=\"mobile-header\">crucible Installation Guide</h1>\n<p class=\"mobile-paragraph\">crucible is a free and open-source code review tool. Crucible provides code review tool integrated with various VCS</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8060 (default crucible port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install crucible\nsudo dnf install -y crucible\n\n# Enable and start service\nsudo systemctl enable --now crucible\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8060/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install crucible\nsudo apt install -y crucible\n\n# Enable and start service\nsudo systemctl enable --now crucible\n\n# Configure firewall\nsudo ufw allow 8060\n\n# Verify installation\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install crucible\nsudo pacman -S crucible\n\n# Enable and start service\nsudo systemctl enable --now crucible\n\n# Verify installation\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install crucible\napk add --no-cache crucible\n\n# Enable and start service\nrc-update add crucible default\nrc-service crucible start\n\n# Verify installation\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install crucible\nsudo zypper install -y crucible\n\n# Enable and start service\nsudo systemctl enable --now crucible\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8060/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install crucible\n\n# Start service\nbrew services start crucible\n\n# Verify installation\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install crucible\n\n# Enable in rc.conf\necho &#039;crucible_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice crucible start\n\n# Verify installation\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install crucible\n\n# Or using Scoop\nscoop install crucible\n\n# Verify installation\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/crucible\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncrucible --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable crucible\n\n# Start service\nsudo systemctl start crucible\n\n# Stop service\nsudo systemctl stop crucible\n\n# Restart service\nsudo systemctl restart crucible\n\n# Check status\nsudo systemctl status crucible\n\n# View logs\nsudo journalctl -u crucible -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add crucible default\n\n# Start service\nrc-service crucible start\n\n# Stop service\nrc-service crucible stop\n\n# Restart service\nrc-service crucible restart\n\n# Check status\nrc-service crucible status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;crucible_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice crucible start\n\n# Stop service\nservice crucible stop\n\n# Restart service\nservice crucible restart\n\n# Check status\nservice crucible status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start crucible\nbrew services stop crucible\nbrew services restart crucible\n\n# Check status\nbrew services list | grep crucible</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start crucible\n\n# Stop service\nnet stop crucible\n\n# Using PowerShell\nStart-Service crucible\nStop-Service crucible\nRestart-Service crucible\n\n# Check status\nGet-Service crucible</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream crucible_backend {\n    server 127.0.0.1:8060;\n}\n\nserver {\n    listen 80;\n    server_name crucible.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name crucible.example.com;\n\n    ssl_certificate /etc/ssl/certs/crucible.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/crucible.example.com.key;\n\n    location / {\n        proxy_pass http://crucible_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName crucible.example.com\n    Redirect permanent / https://crucible.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName crucible.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/crucible.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/crucible.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8060/\n    ProxyPassReverse / http://127.0.0.1:8060/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend crucible_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/crucible.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend crucible_backend\n\nbackend crucible_backend\n    balance roundrobin\n    server crucible1 127.0.0.1:8060 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R crucible:crucible /etc/crucible\nsudo chmod 750 /etc/crucible\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8060/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status crucible\n\n# View logs\nsudo journalctl -u crucible -f\n\n# Monitor resource usage\ntop -p $(pgrep crucible)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/crucible&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/crucible-backup-$DATE.tar.gz&quot; /etc/crucible /var/lib/crucible\n\necho &quot;Backup completed: $BACKUP_DIR/crucible-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop crucible\n\n# Restore from backup\ntar -xzf /backup/crucible/crucible-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start crucible</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u crucible -n 100\nsudo tail -f /var/log/crucible/crucible.log\n\n# Check configuration\ncrucible --version\n\n# Check permissions\nls -la /etc/crucible</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8060\n\n# Test connectivity\ntelnet localhost 8060\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep crucible)\n\n# Check disk I/O\niotop -p $(pgrep crucible)\n\n# Check connections\nss -an | grep 8060</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  crucible:\n    image: crucible:latest\n    ports:\n      - &quot;8060:8060&quot;\n    volumes:\n      - ./config:/etc/crucible\n      - ./data:/var/lib/crucible\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update crucible\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade crucible\n\n# Arch Linux\nsudo pacman -Syu crucible\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade crucible\n\n# openSUSE\nsudo zypper update crucible\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade crucible\n\n# Always backup before updates\ntar -czf /backup/crucible-pre-update-$(date +%Y%m%d).tar.gz /etc/crucible\n\n# Restart after updates\nsudo systemctl restart crucible</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/crucible\n\n# Clean old logs\nfind /var/log/crucible -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/crucible</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.crucible.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/crucible/crucible</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.crucible.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.crucible.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1155,"lastBuilt":"2025-09-16T03:17:57.904Z","metadataVersion":"2.0"},{"name":"csgo","displayName":"csgo Installation Guide","slug":"csgo","description":"csgo is a free and open-source Counter-Strike server. Counter-Strike: Global Offensive dedicated server","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,27015],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/csgo","documentationUrl":"https://howtomgr.github.io/miscellaneous/csgo","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/csgo","updatedAt":"2025-09-16T03:04:55Z","createdAt":"2025-09-16T02:29:40Z","readmeRaw":"# csgo Installation Guide\n\ncsgo is a free and open-source Counter-Strike server. Counter-Strike: Global Offensive dedicated server\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 30GB for game\n  - Network: Source protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 27015 (default csgo port)\n  - RCON available\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install csgo\nsudo dnf install -y csgo\n\n# Enable and start service\nsudo systemctl enable --now csgo\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncsgo --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install csgo\nsudo apt install -y csgo\n\n# Enable and start service\nsudo systemctl enable --now csgo\n\n# Configure firewall\nsudo ufw allow 27015\n\n# Verify installation\ncsgo --version\n```\n\n### Arch Linux\n\n```bash\n# Install csgo\nsudo pacman -S csgo\n\n# Enable and start service\nsudo systemctl enable --now csgo\n\n# Verify installation\ncsgo --version\n```\n\n### Alpine Linux\n\n```bash\n# Install csgo\napk add --no-cache csgo\n\n# Enable and start service\nrc-update add csgo default\nrc-service csgo start\n\n# Verify installation\ncsgo --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install csgo\nsudo zypper install -y csgo\n\n# Enable and start service\nsudo systemctl enable --now csgo\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncsgo --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install csgo\n\n# Start service\nbrew services start csgo\n\n# Verify installation\ncsgo --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install csgo\n\n# Enable in rc.conf\necho 'csgo_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice csgo start\n\n# Verify installation\ncsgo --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install csgo\n\n# Or using Scoop\nscoop install csgo\n\n# Verify installation\ncsgo --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/csgo\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncsgo --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable csgo\n\n# Start service\nsudo systemctl start csgo\n\n# Stop service\nsudo systemctl stop csgo\n\n# Restart service\nsudo systemctl restart csgo\n\n# Check status\nsudo systemctl status csgo\n\n# View logs\nsudo journalctl -u csgo -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add csgo default\n\n# Start service\nrc-service csgo start\n\n# Stop service\nrc-service csgo stop\n\n# Restart service\nrc-service csgo restart\n\n# Check status\nrc-service csgo status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'csgo_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice csgo start\n\n# Stop service\nservice csgo stop\n\n# Restart service\nservice csgo restart\n\n# Check status\nservice csgo status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start csgo\nbrew services stop csgo\nbrew services restart csgo\n\n# Check status\nbrew services list | grep csgo\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start csgo\n\n# Stop service\nnet stop csgo\n\n# Using PowerShell\nStart-Service csgo\nStop-Service csgo\nRestart-Service csgo\n\n# Check status\nGet-Service csgo\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream csgo_backend {\n    server 127.0.0.1:27015;\n}\n\nserver {\n    listen 80;\n    server_name csgo.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name csgo.example.com;\n\n    ssl_certificate /etc/ssl/certs/csgo.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/csgo.example.com.key;\n\n    location / {\n        proxy_pass http://csgo_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName csgo.example.com\n    Redirect permanent / https://csgo.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName csgo.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/csgo.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/csgo.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:27015/\n    ProxyPassReverse / http://127.0.0.1:27015/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend csgo_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/csgo.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend csgo_backend\n\nbackend csgo_backend\n    balance roundrobin\n    server csgo1 127.0.0.1:27015 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R csgo:csgo /etc/csgo\nsudo chmod 750 /etc/csgo\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status csgo\n\n# View logs\nsudo journalctl -u csgo -f\n\n# Monitor resource usage\ntop -p $(pgrep csgo)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/csgo\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/csgo-backup-$DATE.tar.gz\" /etc/csgo /var/lib/csgo\n\necho \"Backup completed: $BACKUP_DIR/csgo-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop csgo\n\n# Restore from backup\ntar -xzf /backup/csgo/csgo-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start csgo\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u csgo -n 100\nsudo tail -f /var/log/csgo/csgo.log\n\n# Check configuration\ncsgo --version\n\n# Check permissions\nls -la /etc/csgo\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 27015\n\n# Test connectivity\ntelnet localhost 27015\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep csgo)\n\n# Check disk I/O\niotop -p $(pgrep csgo)\n\n# Check connections\nss -an | grep 27015\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  csgo:\n    image: csgo:latest\n    ports:\n      - \"27015:27015\"\n    volumes:\n      - ./config:/etc/csgo\n      - ./data:/var/lib/csgo\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update csgo\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade csgo\n\n# Arch Linux\nsudo pacman -Syu csgo\n\n# Alpine Linux\napk update && apk upgrade csgo\n\n# openSUSE\nsudo zypper update csgo\n\n# FreeBSD\npkg update && pkg upgrade csgo\n\n# Always backup before updates\ntar -czf /backup/csgo-pre-update-$(date +%Y%m%d).tar.gz /etc/csgo\n\n# Restart after updates\nsudo systemctl restart csgo\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/csgo\n\n# Clean old logs\nfind /var/log/csgo -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/csgo\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.csgo.org/\n- GitHub Repository: https://github.com/csgo/csgo\n- Community Forum: https://forum.csgo.org/\n- Best Practices Guide: https://docs.csgo.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"csgo-installation-guide\" class=\"mobile-header\">csgo Installation Guide</h1>\n<p class=\"mobile-paragraph\">csgo is a free and open-source Counter-Strike server. Counter-Strike: Global Offensive dedicated server</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 30GB for game</li>\n<li class=\"mobile-list-item\">Network: Source protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 27015 (default csgo port)</li>\n<li class=\"mobile-list-item\">RCON available</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install csgo\nsudo dnf install -y csgo\n\n# Enable and start service\nsudo systemctl enable --now csgo\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install csgo\nsudo apt install -y csgo\n\n# Enable and start service\nsudo systemctl enable --now csgo\n\n# Configure firewall\nsudo ufw allow 27015\n\n# Verify installation\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install csgo\nsudo pacman -S csgo\n\n# Enable and start service\nsudo systemctl enable --now csgo\n\n# Verify installation\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install csgo\napk add --no-cache csgo\n\n# Enable and start service\nrc-update add csgo default\nrc-service csgo start\n\n# Verify installation\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install csgo\nsudo zypper install -y csgo\n\n# Enable and start service\nsudo systemctl enable --now csgo\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install csgo\n\n# Start service\nbrew services start csgo\n\n# Verify installation\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install csgo\n\n# Enable in rc.conf\necho &#039;csgo_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice csgo start\n\n# Verify installation\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install csgo\n\n# Or using Scoop\nscoop install csgo\n\n# Verify installation\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/csgo\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncsgo --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable csgo\n\n# Start service\nsudo systemctl start csgo\n\n# Stop service\nsudo systemctl stop csgo\n\n# Restart service\nsudo systemctl restart csgo\n\n# Check status\nsudo systemctl status csgo\n\n# View logs\nsudo journalctl -u csgo -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add csgo default\n\n# Start service\nrc-service csgo start\n\n# Stop service\nrc-service csgo stop\n\n# Restart service\nrc-service csgo restart\n\n# Check status\nrc-service csgo status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;csgo_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice csgo start\n\n# Stop service\nservice csgo stop\n\n# Restart service\nservice csgo restart\n\n# Check status\nservice csgo status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start csgo\nbrew services stop csgo\nbrew services restart csgo\n\n# Check status\nbrew services list | grep csgo</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start csgo\n\n# Stop service\nnet stop csgo\n\n# Using PowerShell\nStart-Service csgo\nStop-Service csgo\nRestart-Service csgo\n\n# Check status\nGet-Service csgo</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream csgo_backend {\n    server 127.0.0.1:27015;\n}\n\nserver {\n    listen 80;\n    server_name csgo.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name csgo.example.com;\n\n    ssl_certificate /etc/ssl/certs/csgo.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/csgo.example.com.key;\n\n    location / {\n        proxy_pass http://csgo_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName csgo.example.com\n    Redirect permanent / https://csgo.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName csgo.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/csgo.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/csgo.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:27015/\n    ProxyPassReverse / http://127.0.0.1:27015/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend csgo_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/csgo.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend csgo_backend\n\nbackend csgo_backend\n    balance roundrobin\n    server csgo1 127.0.0.1:27015 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R csgo:csgo /etc/csgo\nsudo chmod 750 /etc/csgo\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27015/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status csgo\n\n# View logs\nsudo journalctl -u csgo -f\n\n# Monitor resource usage\ntop -p $(pgrep csgo)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/csgo&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/csgo-backup-$DATE.tar.gz&quot; /etc/csgo /var/lib/csgo\n\necho &quot;Backup completed: $BACKUP_DIR/csgo-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop csgo\n\n# Restore from backup\ntar -xzf /backup/csgo/csgo-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start csgo</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u csgo -n 100\nsudo tail -f /var/log/csgo/csgo.log\n\n# Check configuration\ncsgo --version\n\n# Check permissions\nls -la /etc/csgo</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 27015\n\n# Test connectivity\ntelnet localhost 27015\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep csgo)\n\n# Check disk I/O\niotop -p $(pgrep csgo)\n\n# Check connections\nss -an | grep 27015</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  csgo:\n    image: csgo:latest\n    ports:\n      - &quot;27015:27015&quot;\n    volumes:\n      - ./config:/etc/csgo\n      - ./data:/var/lib/csgo\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update csgo\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade csgo\n\n# Arch Linux\nsudo pacman -Syu csgo\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade csgo\n\n# openSUSE\nsudo zypper update csgo\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade csgo\n\n# Always backup before updates\ntar -czf /backup/csgo-pre-update-$(date +%Y%m%d).tar.gz /etc/csgo\n\n# Restart after updates\nsudo systemctl restart csgo</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/csgo\n\n# Clean old logs\nfind /var/log/csgo -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/csgo</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.csgo.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/csgo/csgo</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.csgo.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.csgo.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1151,"lastBuilt":"2025-09-16T03:17:57.569Z","metadataVersion":"2.0"},{"name":"cyrus_imap","displayName":"Cyrus IMAP Installation Guide","slug":"cyrus_imap","description":"Cyrus IMAP is a free and open-source Mail Server. A highly scalable enterprise mail system","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,143,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/cyrus_imap","documentationUrl":"https://howtomgr.github.io/miscellaneous/cyrus_imap","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cyrus_imap","updatedAt":"2025-09-16T03:05:02Z","createdAt":"2025-09-16T02:29:50Z","readmeRaw":"# Cyrus IMAP Installation Guide\n\nCyrus IMAP is a free and open-source Mail Server. A highly scalable enterprise mail system\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 143/993 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 143/993 (default cyrus-imap port)\n- **Dependencies**:\n  - cyrus-sasl, cyrus-admin\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cyrus-imap\nsudo dnf install -y cyrus-imap cyrus-sasl, cyrus-admin\n\n# Enable and start service\nsudo systemctl enable --now cyrus-imapd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=cyrus-imap\nsudo firewall-cmd --reload\n\n# Verify installation\ncyrus-imap --version || systemctl status cyrus-imapd\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cyrus-imap\nsudo apt install -y cyrus-imap cyrus-sasl, cyrus-admin\n\n# Enable and start service\nsudo systemctl enable --now cyrus-imapd\n\n# Configure firewall\nsudo ufw allow 143/993\n\n# Verify installation\ncyrus-imap --version || systemctl status cyrus-imapd\n```\n\n### Arch Linux\n\n```bash\n# Install cyrus-imap\nsudo pacman -S cyrus-imap\n\n# Enable and start service\nsudo systemctl enable --now cyrus-imapd\n\n# Verify installation\ncyrus-imap --version || systemctl status cyrus-imapd\n```\n\n### Alpine Linux\n\n```bash\n# Install cyrus-imap\napk add --no-cache cyrus-imap\n\n# Enable and start service\nrc-update add cyrus-imapd default\nrc-service cyrus-imapd start\n\n# Verify installation\ncyrus-imap --version || rc-service cyrus-imapd status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cyrus-imap\nsudo zypper install -y cyrus-imap cyrus-sasl, cyrus-admin\n\n# Enable and start service\nsudo systemctl enable --now cyrus-imapd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=cyrus-imap\nsudo firewall-cmd --reload\n\n# Verify installation\ncyrus-imap --version || systemctl status cyrus-imapd\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cyrus-imap\n\n# Start service\nbrew services start cyrus-imap\n\n# Verify installation\ncyrus-imap --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cyrus-imap\n\n# Enable in rc.conf\necho 'cyrus-imapd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cyrus-imapd start\n\n# Verify installation\ncyrus-imap --version || service cyrus-imapd status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install cyrus-imap\n\n# Or using Scoop\nscoop install cyrus-imap\n\n# Verify installation\ncyrus-imap --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/cyrus-imapd\n\n# Set up basic configuration\nsudo tee /etc/cyrus-imapd/cyrus-imap.conf << 'EOF'\n# Cyrus IMAP Configuration\nmaxchild: 100, maxconnections: 1000\nEOF\n\n# Test configuration\nsudo cyrus-imap -t || sudo cyrus-imapd configtest\n\n# Reload service\nsudo systemctl reload cyrus-imapd\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R cyrus-imap:cyrus-imap /etc/cyrus-imapd\nsudo chmod 750 /etc/cyrus-imapd\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cyrus-imapd\n\n# Start service\nsudo systemctl start cyrus-imapd\n\n# Stop service\nsudo systemctl stop cyrus-imapd\n\n# Restart service\nsudo systemctl restart cyrus-imapd\n\n# Reload configuration\nsudo systemctl reload cyrus-imapd\n\n# Check status\nsudo systemctl status cyrus-imapd\n\n# View logs\nsudo journalctl -u cyrus-imapd -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cyrus-imapd default\n\n# Start service\nrc-service cyrus-imapd start\n\n# Stop service\nrc-service cyrus-imapd stop\n\n# Restart service\nrc-service cyrus-imapd restart\n\n# Check status\nrc-service cyrus-imapd status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cyrus-imapd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cyrus-imapd start\n\n# Stop service\nservice cyrus-imapd stop\n\n# Restart service\nservice cyrus-imapd restart\n\n# Check status\nservice cyrus-imapd status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cyrus-imap\nbrew services stop cyrus-imap\nbrew services restart cyrus-imap\n\n# Check status\nbrew services list | grep cyrus-imap\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cyrus-imapd\n\n# Stop service\nnet stop cyrus-imapd\n\n# Using PowerShell\nStart-Service cyrus-imapd\nStop-Service cyrus-imapd\nRestart-Service cyrus-imapd\n\n# Check status\nGet-Service cyrus-imapd\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/cyrus-imapd/cyrus-imap.conf << 'EOF'\nmaxchild: 100, maxconnections: 1000\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart cyrus-imapd\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cyrus-imap_backend {\n    server 127.0.0.1:143/993;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name cyrus-imap.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cyrus-imap.example.com;\n\n    ssl_certificate /etc/ssl/certs/cyrus-imap.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cyrus-imap.example.com.key;\n\n    location / {\n        proxy_pass http://cyrus-imap_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cyrus-imap.example.com\n    Redirect permanent / https://cyrus-imap.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cyrus-imap.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cyrus-imap.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cyrus-imap.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:143/993/\n    ProxyPassReverse / http://127.0.0.1:143/993/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:143/993/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cyrus-imap_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cyrus-imap.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cyrus-imap_backend\n\nbackend cyrus-imap_backend\n    balance roundrobin\n    option httpchk GET /health\n    server cyrus-imap1 127.0.0.1:143/993 check\n    server cyrus-imap2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cyrus-imap:cyrus-imap /etc/cyrus-imapd\nsudo chmod 750 /etc/cyrus-imapd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=cyrus-imap\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/cyrus-imap.conf << 'EOF'\n[cyrus-imap]\nenabled = true\nport = 143/993\nfilter = cyrus-imap\nlogpath = /var/log/cyrus/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/cyrus-imap.key \\\n    -out /etc/ssl/certs/cyrus-imap.crt\n\n# Configure SSL in cyrus-imap\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE cyrus-imap_db;\nCREATE USER cyrus-imap_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE cyrus-imap_db TO cyrus-imap_user;\nEOF\n\n# Configure cyrus-imap to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE cyrus-imap_db;\nCREATE USER 'cyrus-imap_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON cyrus-imap_db.* TO 'cyrus-imap_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Cyrus IMAP specific tuning\nmaxchild: 100, maxconnections: 1000\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\ncyrus-imap soft nofile 65535\ncyrus-imap hard nofile 65535\ncyrus-imap soft nproc 32768\ncyrus-imap hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'cyrus-imap'\n    static_configs:\n      - targets: ['localhost:143/993']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet cyrus-imapd; then\n    echo \"Cyrus IMAP is running\"\n    exit 0\nelse\n    echo \"Cyrus IMAP is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/cyrus-imap << 'EOF'\n/var/log/cyrus/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 cyrus-imap cyrus-imap\n    postrotate\n        systemctl reload cyrus-imapd > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Cyrus IMAP backup script\nBACKUP_DIR=\"/backup/cyrus-imap\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop cyrus-imapd\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/cyrus-imap-config-$DATE.tar.gz\" /etc/cyrus-imapd\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/cyrus-imap-data-$DATE.tar.gz\" /var/lib/cyrus-imap\n\n# Start service\nsystemctl start cyrus-imapd\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cyrus-imapd\n\n# Restore configuration\nsudo tar -xzf /backup/cyrus-imap/cyrus-imap-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/cyrus-imap/cyrus-imap-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R cyrus-imap:cyrus-imap /etc/cyrus-imapd\nsudo chown -R cyrus-imap:cyrus-imap /var/lib/cyrus-imap\n\n# Start service\nsudo systemctl start cyrus-imapd\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cyrus-imapd -n 100\nsudo tail -f /var/log/cyrus/*.log\n\n# Check configuration\nsudo cyrus-imap -t || sudo cyrus-imapd configtest\n\n# Check permissions\nls -la /etc/cyrus-imapd\nls -la /var/lib/cyrus-imap\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 143/993\nsudo netstat -tlnp | grep 143/993\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 143/993\nnc -zv localhost 143/993\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep imapd)\nhtop -p $(pgrep imapd)\n\n# Check connections\nss -ant | grep :143/993 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep imapd)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo cyrus-imap -d\n# or\nsudo cyrus-imapd debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  cyrus-imap:\n    image: cyrus-imap:latest\n    container_name: cyrus-imap\n    ports:\n      - \"143/993:143/993\"\n    volumes:\n      - ./config:/etc/cyrus-imapd\n      - ./data:/var/lib/cyrus-imap\n    environment:\n      - cyrus-imap_CONFIG=/etc/cyrus-imapd/cyrus-imap.conf\n    restart: unless-stopped\n    networks:\n      - cyrus-imap_net\n\nnetworks:\n  cyrus-imap_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cyrus-imap\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: cyrus-imap\n  template:\n    metadata:\n      labels:\n        app: cyrus-imap\n    spec:\n      containers:\n      - name: cyrus-imap\n        image: cyrus-imap:latest\n        ports:\n        - containerPort: 143/993\n        volumeMounts:\n        - name: config\n          mountPath: /etc/cyrus-imapd\n      volumes:\n      - name: config\n        configMap:\n          name: cyrus-imap-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: cyrus-imap\nspec:\n  selector:\n    app: cyrus-imap\n  ports:\n  - port: 143/993\n    targetPort: 143/993\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Cyrus IMAP\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install cyrus-imap\n      package:\n        name: cyrus-imap\n        state: present\n    \n    - name: Configure cyrus-imap\n      template:\n        src: cyrus-imap.conf.j2\n        dest: /etc/cyrus-imapd/cyrus-imap.conf\n        owner: cyrus-imap\n        group: cyrus-imap\n        mode: '0640'\n      notify: restart cyrus-imap\n    \n    - name: Start and enable cyrus-imap\n      systemd:\n        name: cyrus-imapd\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart cyrus-imap\n      systemd:\n        name: cyrus-imapd\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cyrus-imap\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cyrus-imap\n\n# Arch Linux\nsudo pacman -Syu cyrus-imap\n\n# Alpine Linux\napk update && apk upgrade cyrus-imap\n\n# openSUSE\nsudo zypper update cyrus-imap\n\n# FreeBSD\npkg update && pkg upgrade cyrus-imap\n\n# Always backup before updates\ntar -czf /backup/cyrus-imap-pre-update-$(date +%Y%m%d).tar.gz /etc/cyrus-imapd\n\n# Restart after updates\nsudo systemctl restart cyrus-imapd\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/cyrus -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo cyrus-imap --verify || sudo cyrus-imapd check\n\n# Update databases (if applicable)\nsudo cyrus-imap-update-db\n\n# Optimize performance\nsudo cyrus-imap-optimize\n\n# Check for security updates\nsudo cyrus-imap --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cyrus-imap.org/\n- GitHub Repository: https://github.com/cyrus-imap/cyrus-imap\n- Community Forum: https://forum.cyrus-imap.org/\n- Wiki: https://wiki.cyrus-imap.org/\n- Comparison vs Dovecot, Courier, Zimbra, Exchange: https://docs.cyrus-imap.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"cyrus-imap-installation-guide\" class=\"mobile-header\">Cyrus IMAP Installation Guide</h1>\n<p class=\"mobile-paragraph\">Cyrus IMAP is a free and open-source Mail Server. A highly scalable enterprise mail system</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 143/993 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 143/993 (default cyrus-imap port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">cyrus-sasl, cyrus-admin</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cyrus-imap\nsudo dnf install -y cyrus-imap cyrus-sasl, cyrus-admin\n\n# Enable and start service\nsudo systemctl enable --now cyrus-imapd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=cyrus-imap\nsudo firewall-cmd --reload\n\n# Verify installation\ncyrus-imap --version || systemctl status cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cyrus-imap\nsudo apt install -y cyrus-imap cyrus-sasl, cyrus-admin\n\n# Enable and start service\nsudo systemctl enable --now cyrus-imapd\n\n# Configure firewall\nsudo ufw allow 143/993\n\n# Verify installation\ncyrus-imap --version || systemctl status cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cyrus-imap\nsudo pacman -S cyrus-imap\n\n# Enable and start service\nsudo systemctl enable --now cyrus-imapd\n\n# Verify installation\ncyrus-imap --version || systemctl status cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cyrus-imap\napk add --no-cache cyrus-imap\n\n# Enable and start service\nrc-update add cyrus-imapd default\nrc-service cyrus-imapd start\n\n# Verify installation\ncyrus-imap --version || rc-service cyrus-imapd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cyrus-imap\nsudo zypper install -y cyrus-imap cyrus-sasl, cyrus-admin\n\n# Enable and start service\nsudo systemctl enable --now cyrus-imapd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=cyrus-imap\nsudo firewall-cmd --reload\n\n# Verify installation\ncyrus-imap --version || systemctl status cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cyrus-imap\n\n# Start service\nbrew services start cyrus-imap\n\n# Verify installation\ncyrus-imap --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cyrus-imap\n\n# Enable in rc.conf\necho &#039;cyrus-imapd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cyrus-imapd start\n\n# Verify installation\ncyrus-imap --version || service cyrus-imapd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install cyrus-imap\n\n# Or using Scoop\nscoop install cyrus-imap\n\n# Verify installation\ncyrus-imap --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/cyrus-imapd\n\n# Set up basic configuration\nsudo tee /etc/cyrus-imapd/cyrus-imap.conf &lt;&lt; &#039;EOF&#039;\n# Cyrus IMAP Configuration\nmaxchild: 100, maxconnections: 1000\nEOF\n\n# Test configuration\nsudo cyrus-imap -t || sudo cyrus-imapd configtest\n\n# Reload service\nsudo systemctl reload cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cyrus-imap:cyrus-imap /etc/cyrus-imapd\nsudo chmod 750 /etc/cyrus-imapd\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cyrus-imapd\n\n# Start service\nsudo systemctl start cyrus-imapd\n\n# Stop service\nsudo systemctl stop cyrus-imapd\n\n# Restart service\nsudo systemctl restart cyrus-imapd\n\n# Reload configuration\nsudo systemctl reload cyrus-imapd\n\n# Check status\nsudo systemctl status cyrus-imapd\n\n# View logs\nsudo journalctl -u cyrus-imapd -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cyrus-imapd default\n\n# Start service\nrc-service cyrus-imapd start\n\n# Stop service\nrc-service cyrus-imapd stop\n\n# Restart service\nrc-service cyrus-imapd restart\n\n# Check status\nrc-service cyrus-imapd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cyrus-imapd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cyrus-imapd start\n\n# Stop service\nservice cyrus-imapd stop\n\n# Restart service\nservice cyrus-imapd restart\n\n# Check status\nservice cyrus-imapd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cyrus-imap\nbrew services stop cyrus-imap\nbrew services restart cyrus-imap\n\n# Check status\nbrew services list | grep cyrus-imap</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cyrus-imapd\n\n# Stop service\nnet stop cyrus-imapd\n\n# Using PowerShell\nStart-Service cyrus-imapd\nStop-Service cyrus-imapd\nRestart-Service cyrus-imapd\n\n# Check status\nGet-Service cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/cyrus-imapd/cyrus-imap.conf &lt;&lt; &#039;EOF&#039;\nmaxchild: 100, maxconnections: 1000\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cyrus-imap_backend {\n    server 127.0.0.1:143/993;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name cyrus-imap.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cyrus-imap.example.com;\n\n    ssl_certificate /etc/ssl/certs/cyrus-imap.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cyrus-imap.example.com.key;\n\n    location / {\n        proxy_pass http://cyrus-imap_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cyrus-imap.example.com\n    Redirect permanent / https://cyrus-imap.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cyrus-imap.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cyrus-imap.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cyrus-imap.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:143/993/\n    ProxyPassReverse / http://127.0.0.1:143/993/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:143/993/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cyrus-imap_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cyrus-imap.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cyrus-imap_backend\n\nbackend cyrus-imap_backend\n    balance roundrobin\n    option httpchk GET /health\n    server cyrus-imap1 127.0.0.1:143/993 check\n    server cyrus-imap2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cyrus-imap:cyrus-imap /etc/cyrus-imapd\nsudo chmod 750 /etc/cyrus-imapd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=cyrus-imap\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/cyrus-imap.conf &lt;&lt; &#039;EOF&#039;\n[cyrus-imap]\nenabled = true\nport = 143/993\nfilter = cyrus-imap\nlogpath = /var/log/cyrus/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/cyrus-imap.key \\\n    -out /etc/ssl/certs/cyrus-imap.crt\n\n# Configure SSL in cyrus-imap\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE cyrus-imap_db;\nCREATE USER cyrus-imap_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE cyrus-imap_db TO cyrus-imap_user;\nEOF\n\n# Configure cyrus-imap to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE cyrus-imap_db;\nCREATE USER &#039;cyrus-imap_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON cyrus-imap_db.* TO &#039;cyrus-imap_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Cyrus IMAP specific tuning\nmaxchild: 100, maxconnections: 1000</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\ncyrus-imap soft nofile 65535\ncyrus-imap hard nofile 65535\ncyrus-imap soft nproc 32768\ncyrus-imap hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;cyrus-imap&#039;\n    static_configs:\n      - targets: [&#039;localhost:143/993&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet cyrus-imapd; then\n    echo &quot;Cyrus IMAP is running&quot;\n    exit 0\nelse\n    echo &quot;Cyrus IMAP is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/cyrus-imap &lt;&lt; &#039;EOF&#039;\n/var/log/cyrus/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 cyrus-imap cyrus-imap\n    postrotate\n        systemctl reload cyrus-imapd &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Cyrus IMAP backup script\nBACKUP_DIR=&quot;/backup/cyrus-imap&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop cyrus-imapd\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/cyrus-imap-config-$DATE.tar.gz&quot; /etc/cyrus-imapd\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/cyrus-imap-data-$DATE.tar.gz&quot; /var/lib/cyrus-imap\n\n# Start service\nsystemctl start cyrus-imapd\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cyrus-imapd\n\n# Restore configuration\nsudo tar -xzf /backup/cyrus-imap/cyrus-imap-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/cyrus-imap/cyrus-imap-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R cyrus-imap:cyrus-imap /etc/cyrus-imapd\nsudo chown -R cyrus-imap:cyrus-imap /var/lib/cyrus-imap\n\n# Start service\nsudo systemctl start cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cyrus-imapd -n 100\nsudo tail -f /var/log/cyrus/*.log\n\n# Check configuration\nsudo cyrus-imap -t || sudo cyrus-imapd configtest\n\n# Check permissions\nls -la /etc/cyrus-imapd\nls -la /var/lib/cyrus-imap</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 143/993\nsudo netstat -tlnp | grep 143/993\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 143/993\nnc -zv localhost 143/993</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep imapd)\nhtop -p $(pgrep imapd)\n\n# Check connections\nss -ant | grep :143/993 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep imapd)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo cyrus-imap -d\n# or\nsudo cyrus-imapd debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cyrus-imap:\n    image: cyrus-imap:latest\n    container_name: cyrus-imap\n    ports:\n      - &quot;143/993:143/993&quot;\n    volumes:\n      - ./config:/etc/cyrus-imapd\n      - ./data:/var/lib/cyrus-imap\n    environment:\n      - cyrus-imap_CONFIG=/etc/cyrus-imapd/cyrus-imap.conf\n    restart: unless-stopped\n    networks:\n      - cyrus-imap_net\n\nnetworks:\n  cyrus-imap_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cyrus-imap\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: cyrus-imap\n  template:\n    metadata:\n      labels:\n        app: cyrus-imap\n    spec:\n      containers:\n      - name: cyrus-imap\n        image: cyrus-imap:latest\n        ports:\n        - containerPort: 143/993\n        volumeMounts:\n        - name: config\n          mountPath: /etc/cyrus-imapd\n      volumes:\n      - name: config\n        configMap:\n          name: cyrus-imap-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: cyrus-imap\nspec:\n  selector:\n    app: cyrus-imap\n  ports:\n  - port: 143/993\n    targetPort: 143/993\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Cyrus IMAP\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install cyrus-imap\n      package:\n        name: cyrus-imap\n        state: present\n    \n    - name: Configure cyrus-imap\n      template:\n        src: cyrus-imap.conf.j2\n        dest: /etc/cyrus-imapd/cyrus-imap.conf\n        owner: cyrus-imap\n        group: cyrus-imap\n        mode: &#039;0640&#039;\n      notify: restart cyrus-imap\n    \n    - name: Start and enable cyrus-imap\n      systemd:\n        name: cyrus-imapd\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart cyrus-imap\n      systemd:\n        name: cyrus-imapd\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cyrus-imap\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cyrus-imap\n\n# Arch Linux\nsudo pacman -Syu cyrus-imap\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cyrus-imap\n\n# openSUSE\nsudo zypper update cyrus-imap\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cyrus-imap\n\n# Always backup before updates\ntar -czf /backup/cyrus-imap-pre-update-$(date +%Y%m%d).tar.gz /etc/cyrus-imapd\n\n# Restart after updates\nsudo systemctl restart cyrus-imapd</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/cyrus -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo cyrus-imap --verify || sudo cyrus-imapd check\n\n# Update databases (if applicable)\nsudo cyrus-imap-update-db\n\n# Optimize performance\nsudo cyrus-imap-optimize\n\n# Check for security updates\nsudo cyrus-imap --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cyrus-imap.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cyrus-imap/cyrus-imap</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cyrus-imap.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.cyrus-imap.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Dovecot, Courier, Zimbra, Exchange: https://docs.cyrus-imap.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1885,"lastBuilt":"2025-09-16T03:17:57.203Z","metadataVersion":"2.0"},{"name":"dada_mail","displayName":"Dada Mail Installation Guide","slug":"dada_mail","description":"Dada Mail is a free and open-source Mailing List. Web-based list management system","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/dada_mail","documentationUrl":"https://howtomgr.github.io/miscellaneous/dada_mail","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/dada_mail","updatedAt":"2025-09-16T03:05:09Z","createdAt":"2025-09-16T02:30:00Z","readmeRaw":"# Dada Mail Installation Guide\n\nDada Mail is a free and open-source Mailing List. Web-based list management system\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 80/443 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80/443 (default dada-mail port)\n- **Dependencies**:\n  - perl, perl-CGI\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dada-mail\nsudo dnf install -y dada-mail perl, perl-CGI\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dada-mail\nsudo firewall-cmd --reload\n\n# Verify installation\ndada-mail --version || systemctl status httpd\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install dada-mail\nsudo apt install -y dada-mail perl, perl-CGI\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\ndada-mail --version || systemctl status httpd\n```\n\n### Arch Linux\n\n```bash\n# Install dada-mail\nsudo pacman -S dada-mail\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\ndada-mail --version || systemctl status httpd\n```\n\n### Alpine Linux\n\n```bash\n# Install dada-mail\napk add --no-cache dada-mail\n\n# Enable and start service\nrc-update add httpd default\nrc-service httpd start\n\n# Verify installation\ndada-mail --version || rc-service httpd status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dada-mail\nsudo zypper install -y dada-mail perl, perl-CGI\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dada-mail\nsudo firewall-cmd --reload\n\n# Verify installation\ndada-mail --version || systemctl status httpd\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install dada-mail\n\n# Start service\nbrew services start dada-mail\n\n# Verify installation\ndada-mail --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install dada-mail\n\n# Enable in rc.conf\necho 'httpd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice httpd start\n\n# Verify installation\ndada-mail --version || service httpd status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install dada-mail\n\n# Or using Scoop\nscoop install dada-mail\n\n# Verify installation\ndada-mail --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /var/www/dada\n\n# Set up basic configuration\nsudo tee /var/www/dada/dada-mail.conf << 'EOF'\n# Dada Mail Configuration\nbatch_sending_amount = 300\nEOF\n\n# Test configuration\nsudo dada-mail -t || sudo httpd configtest\n\n# Reload service\nsudo systemctl reload httpd\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R dada-mail:dada-mail /var/www/dada\nsudo chmod 750 /var/www/dada\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable httpd\n\n# Start service\nsudo systemctl start httpd\n\n# Stop service\nsudo systemctl stop httpd\n\n# Restart service\nsudo systemctl restart httpd\n\n# Reload configuration\nsudo systemctl reload httpd\n\n# Check status\nsudo systemctl status httpd\n\n# View logs\nsudo journalctl -u httpd -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add httpd default\n\n# Start service\nrc-service httpd start\n\n# Stop service\nrc-service httpd stop\n\n# Restart service\nrc-service httpd restart\n\n# Check status\nrc-service httpd status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'httpd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice httpd start\n\n# Stop service\nservice httpd stop\n\n# Restart service\nservice httpd restart\n\n# Check status\nservice httpd status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start dada-mail\nbrew services stop dada-mail\nbrew services restart dada-mail\n\n# Check status\nbrew services list | grep dada-mail\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start httpd\n\n# Stop service\nnet stop httpd\n\n# Using PowerShell\nStart-Service httpd\nStop-Service httpd\nRestart-Service httpd\n\n# Check status\nGet-Service httpd\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /var/www/dada/dada-mail.conf << 'EOF'\nbatch_sending_amount = 300\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart httpd\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream dada-mail_backend {\n    server 127.0.0.1:80/443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name dada-mail.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dada-mail.example.com;\n\n    ssl_certificate /etc/ssl/certs/dada-mail.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dada-mail.example.com.key;\n\n    location / {\n        proxy_pass http://dada-mail_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName dada-mail.example.com\n    Redirect permanent / https://dada-mail.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName dada-mail.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dada-mail.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dada-mail.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:80/443/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend dada-mail_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dada-mail.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dada-mail_backend\n\nbackend dada-mail_backend\n    balance roundrobin\n    option httpchk GET /health\n    server dada-mail1 127.0.0.1:80/443 check\n    server dada-mail2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R dada-mail:dada-mail /var/www/dada\nsudo chmod 750 /var/www/dada\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dada-mail\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/dada-mail.conf << 'EOF'\n[dada-mail]\nenabled = true\nport = 80/443\nfilter = dada-mail\nlogpath = /var/log/dada/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/dada-mail.key \\\n    -out /etc/ssl/certs/dada-mail.crt\n\n# Configure SSL in dada-mail\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE dada-mail_db;\nCREATE USER dada-mail_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE dada-mail_db TO dada-mail_user;\nEOF\n\n# Configure dada-mail to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE dada-mail_db;\nCREATE USER 'dada-mail_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON dada-mail_db.* TO 'dada-mail_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Dada Mail specific tuning\nbatch_sending_amount = 300\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\ndada-mail soft nofile 65535\ndada-mail hard nofile 65535\ndada-mail soft nproc 32768\ndada-mail hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'dada-mail'\n    static_configs:\n      - targets: ['localhost:80/443']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet httpd; then\n    echo \"Dada Mail is running\"\n    exit 0\nelse\n    echo \"Dada Mail is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/dada-mail << 'EOF'\n/var/log/dada/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 dada-mail dada-mail\n    postrotate\n        systemctl reload httpd > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Dada Mail backup script\nBACKUP_DIR=\"/backup/dada-mail\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop httpd\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/dada-mail-config-$DATE.tar.gz\" /var/www/dada\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/dada-mail-data-$DATE.tar.gz\" /var/lib/dada-mail\n\n# Start service\nsystemctl start httpd\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop httpd\n\n# Restore configuration\nsudo tar -xzf /backup/dada-mail/dada-mail-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/dada-mail/dada-mail-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R dada-mail:dada-mail /var/www/dada\nsudo chown -R dada-mail:dada-mail /var/lib/dada-mail\n\n# Start service\nsudo systemctl start httpd\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u httpd -n 100\nsudo tail -f /var/log/dada/*.log\n\n# Check configuration\nsudo dada-mail -t || sudo httpd configtest\n\n# Check permissions\nls -la /var/www/dada\nls -la /var/lib/dada-mail\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80/443\nsudo netstat -tlnp | grep 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 80/443\nnc -zv localhost 80/443\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep httpd)\nhtop -p $(pgrep httpd)\n\n# Check connections\nss -ant | grep :80/443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep httpd)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo dada-mail -d\n# or\nsudo httpd debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  dada-mail:\n    image: dada-mail:latest\n    container_name: dada-mail\n    ports:\n      - \"80/443:80/443\"\n    volumes:\n      - ./config:/var/www/dada\n      - ./data:/var/lib/dada-mail\n    environment:\n      - dada-mail_CONFIG=/var/www/dada/dada-mail.conf\n    restart: unless-stopped\n    networks:\n      - dada-mail_net\n\nnetworks:\n  dada-mail_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dada-mail\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dada-mail\n  template:\n    metadata:\n      labels:\n        app: dada-mail\n    spec:\n      containers:\n      - name: dada-mail\n        image: dada-mail:latest\n        ports:\n        - containerPort: 80/443\n        volumeMounts:\n        - name: config\n          mountPath: /var/www/dada\n      volumes:\n      - name: config\n        configMap:\n          name: dada-mail-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dada-mail\nspec:\n  selector:\n    app: dada-mail\n  ports:\n  - port: 80/443\n    targetPort: 80/443\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Dada Mail\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install dada-mail\n      package:\n        name: dada-mail\n        state: present\n    \n    - name: Configure dada-mail\n      template:\n        src: dada-mail.conf.j2\n        dest: /var/www/dada/dada-mail.conf\n        owner: dada-mail\n        group: dada-mail\n        mode: '0640'\n      notify: restart dada-mail\n    \n    - name: Start and enable dada-mail\n      systemd:\n        name: httpd\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart dada-mail\n      systemd:\n        name: httpd\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dada-mail\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade dada-mail\n\n# Arch Linux\nsudo pacman -Syu dada-mail\n\n# Alpine Linux\napk update && apk upgrade dada-mail\n\n# openSUSE\nsudo zypper update dada-mail\n\n# FreeBSD\npkg update && pkg upgrade dada-mail\n\n# Always backup before updates\ntar -czf /backup/dada-mail-pre-update-$(date +%Y%m%d).tar.gz /var/www/dada\n\n# Restart after updates\nsudo systemctl restart httpd\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/dada -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo dada-mail --verify || sudo httpd check\n\n# Update databases (if applicable)\nsudo dada-mail-update-db\n\n# Optimize performance\nsudo dada-mail-optimize\n\n# Check for security updates\nsudo dada-mail --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.dada-mail.org/\n- GitHub Repository: https://github.com/dada-mail/dada-mail\n- Community Forum: https://forum.dada-mail.org/\n- Wiki: https://wiki.dada-mail.org/\n- Comparison vs Mailman, phpList, Listmonk, Majordomo: https://docs.dada-mail.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"dada-mail-installation-guide\" class=\"mobile-header\">Dada Mail Installation Guide</h1>\n<p class=\"mobile-paragraph\">Dada Mail is a free and open-source Mailing List. Web-based list management system</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 80/443 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80/443 (default dada-mail port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">perl, perl-CGI</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dada-mail\nsudo dnf install -y dada-mail perl, perl-CGI\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dada-mail\nsudo firewall-cmd --reload\n\n# Verify installation\ndada-mail --version || systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install dada-mail\nsudo apt install -y dada-mail perl, perl-CGI\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\ndada-mail --version || systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dada-mail\nsudo pacman -S dada-mail\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\ndada-mail --version || systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dada-mail\napk add --no-cache dada-mail\n\n# Enable and start service\nrc-update add httpd default\nrc-service httpd start\n\n# Verify installation\ndada-mail --version || rc-service httpd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dada-mail\nsudo zypper install -y dada-mail perl, perl-CGI\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dada-mail\nsudo firewall-cmd --reload\n\n# Verify installation\ndada-mail --version || systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install dada-mail\n\n# Start service\nbrew services start dada-mail\n\n# Verify installation\ndada-mail --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install dada-mail\n\n# Enable in rc.conf\necho &#039;httpd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice httpd start\n\n# Verify installation\ndada-mail --version || service httpd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install dada-mail\n\n# Or using Scoop\nscoop install dada-mail\n\n# Verify installation\ndada-mail --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /var/www/dada\n\n# Set up basic configuration\nsudo tee /var/www/dada/dada-mail.conf &lt;&lt; &#039;EOF&#039;\n# Dada Mail Configuration\nbatch_sending_amount = 300\nEOF\n\n# Test configuration\nsudo dada-mail -t || sudo httpd configtest\n\n# Reload service\nsudo systemctl reload httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dada-mail:dada-mail /var/www/dada\nsudo chmod 750 /var/www/dada\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable httpd\n\n# Start service\nsudo systemctl start httpd\n\n# Stop service\nsudo systemctl stop httpd\n\n# Restart service\nsudo systemctl restart httpd\n\n# Reload configuration\nsudo systemctl reload httpd\n\n# Check status\nsudo systemctl status httpd\n\n# View logs\nsudo journalctl -u httpd -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add httpd default\n\n# Start service\nrc-service httpd start\n\n# Stop service\nrc-service httpd stop\n\n# Restart service\nrc-service httpd restart\n\n# Check status\nrc-service httpd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;httpd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice httpd start\n\n# Stop service\nservice httpd stop\n\n# Restart service\nservice httpd restart\n\n# Check status\nservice httpd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start dada-mail\nbrew services stop dada-mail\nbrew services restart dada-mail\n\n# Check status\nbrew services list | grep dada-mail</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start httpd\n\n# Stop service\nnet stop httpd\n\n# Using PowerShell\nStart-Service httpd\nStop-Service httpd\nRestart-Service httpd\n\n# Check status\nGet-Service httpd</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /var/www/dada/dada-mail.conf &lt;&lt; &#039;EOF&#039;\nbatch_sending_amount = 300\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream dada-mail_backend {\n    server 127.0.0.1:80/443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name dada-mail.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dada-mail.example.com;\n\n    ssl_certificate /etc/ssl/certs/dada-mail.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dada-mail.example.com.key;\n\n    location / {\n        proxy_pass http://dada-mail_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName dada-mail.example.com\n    Redirect permanent / https://dada-mail.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName dada-mail.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dada-mail.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dada-mail.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:80/443/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend dada-mail_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dada-mail.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dada-mail_backend\n\nbackend dada-mail_backend\n    balance roundrobin\n    option httpchk GET /health\n    server dada-mail1 127.0.0.1:80/443 check\n    server dada-mail2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dada-mail:dada-mail /var/www/dada\nsudo chmod 750 /var/www/dada\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dada-mail\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/dada-mail.conf &lt;&lt; &#039;EOF&#039;\n[dada-mail]\nenabled = true\nport = 80/443\nfilter = dada-mail\nlogpath = /var/log/dada/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/dada-mail.key \\\n    -out /etc/ssl/certs/dada-mail.crt\n\n# Configure SSL in dada-mail\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE dada-mail_db;\nCREATE USER dada-mail_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE dada-mail_db TO dada-mail_user;\nEOF\n\n# Configure dada-mail to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE dada-mail_db;\nCREATE USER &#039;dada-mail_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON dada-mail_db.* TO &#039;dada-mail_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Dada Mail specific tuning\nbatch_sending_amount = 300</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\ndada-mail soft nofile 65535\ndada-mail hard nofile 65535\ndada-mail soft nproc 32768\ndada-mail hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;dada-mail&#039;\n    static_configs:\n      - targets: [&#039;localhost:80/443&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet httpd; then\n    echo &quot;Dada Mail is running&quot;\n    exit 0\nelse\n    echo &quot;Dada Mail is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/dada-mail &lt;&lt; &#039;EOF&#039;\n/var/log/dada/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 dada-mail dada-mail\n    postrotate\n        systemctl reload httpd &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Dada Mail backup script\nBACKUP_DIR=&quot;/backup/dada-mail&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop httpd\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/dada-mail-config-$DATE.tar.gz&quot; /var/www/dada\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/dada-mail-data-$DATE.tar.gz&quot; /var/lib/dada-mail\n\n# Start service\nsystemctl start httpd\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop httpd\n\n# Restore configuration\nsudo tar -xzf /backup/dada-mail/dada-mail-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/dada-mail/dada-mail-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R dada-mail:dada-mail /var/www/dada\nsudo chown -R dada-mail:dada-mail /var/lib/dada-mail\n\n# Start service\nsudo systemctl start httpd</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u httpd -n 100\nsudo tail -f /var/log/dada/*.log\n\n# Check configuration\nsudo dada-mail -t || sudo httpd configtest\n\n# Check permissions\nls -la /var/www/dada\nls -la /var/lib/dada-mail</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80/443\nsudo netstat -tlnp | grep 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 80/443\nnc -zv localhost 80/443</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep httpd)\nhtop -p $(pgrep httpd)\n\n# Check connections\nss -ant | grep :80/443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep httpd)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo dada-mail -d\n# or\nsudo httpd debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  dada-mail:\n    image: dada-mail:latest\n    container_name: dada-mail\n    ports:\n      - &quot;80/443:80/443&quot;\n    volumes:\n      - ./config:/var/www/dada\n      - ./data:/var/lib/dada-mail\n    environment:\n      - dada-mail_CONFIG=/var/www/dada/dada-mail.conf\n    restart: unless-stopped\n    networks:\n      - dada-mail_net\n\nnetworks:\n  dada-mail_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dada-mail\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dada-mail\n  template:\n    metadata:\n      labels:\n        app: dada-mail\n    spec:\n      containers:\n      - name: dada-mail\n        image: dada-mail:latest\n        ports:\n        - containerPort: 80/443\n        volumeMounts:\n        - name: config\n          mountPath: /var/www/dada\n      volumes:\n      - name: config\n        configMap:\n          name: dada-mail-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dada-mail\nspec:\n  selector:\n    app: dada-mail\n  ports:\n  - port: 80/443\n    targetPort: 80/443\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Dada Mail\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install dada-mail\n      package:\n        name: dada-mail\n        state: present\n    \n    - name: Configure dada-mail\n      template:\n        src: dada-mail.conf.j2\n        dest: /var/www/dada/dada-mail.conf\n        owner: dada-mail\n        group: dada-mail\n        mode: &#039;0640&#039;\n      notify: restart dada-mail\n    \n    - name: Start and enable dada-mail\n      systemd:\n        name: httpd\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart dada-mail\n      systemd:\n        name: httpd\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dada-mail\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade dada-mail\n\n# Arch Linux\nsudo pacman -Syu dada-mail\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade dada-mail\n\n# openSUSE\nsudo zypper update dada-mail\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade dada-mail\n\n# Always backup before updates\ntar -czf /backup/dada-mail-pre-update-$(date +%Y%m%d).tar.gz /var/www/dada\n\n# Restart after updates\nsudo systemctl restart httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/dada -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo dada-mail --verify || sudo httpd check\n\n# Update databases (if applicable)\nsudo dada-mail-update-db\n\n# Optimize performance\nsudo dada-mail-optimize\n\n# Check for security updates\nsudo dada-mail --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.dada-mail.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/dada-mail/dada-mail</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.dada-mail.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.dada-mail.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Mailman, phpList, Listmonk, Majordomo: https://docs.dada-mail.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1880,"lastBuilt":"2025-09-16T03:17:56.824Z","metadataVersion":"2.0"},{"name":"databases","displayName":"Database Installation Guide","slug":"databases","description":"Comprehensive installation and configuration guide for popular database management systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more. Complete with security hardening and performance optimization for production environments.","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","arch"],"defaultPorts":[0,1,4096,6379,6380,26379,27017,27019],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","observability","data-storage","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/databases","documentationUrl":"https://howtomgr.github.io/miscellaneous/databases","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/databases","updatedAt":"2025-09-16T03:05:31Z","createdAt":"2023-08-28T03:47:28Z","readmeRaw":"# Database Installation Guide\n\nComprehensive installation and configuration guide for popular database management systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more. Complete with security hardening and performance optimization for production environments.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for production\n- SSD storage recommended for database files\n- Network connectivity for replication setups (if applicable)\n\n## MySQL/MariaDB Installation\n\n### Ubuntu/Debian\n```bash\n# Update system\nsudo apt update\n\n# Install MariaDB (recommended over MySQL)\nsudo apt install -y mariadb-server mariadb-client\n\n# Or install MySQL\nsudo apt install -y mysql-server mysql-client\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Enable and start service\nsudo systemctl enable --now mariadb  # or mysql\n\n# Verify installation\nmysql --version\nsudo systemctl status mariadb\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install MariaDB from official repository\nsudo tee /etc/yum.repos.d/MariaDB.repo > /dev/null <<EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.its.dal.ca/mariadb/yum/10.11/rhel\\$releasever-\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.its.dal.ca/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nEOF\n\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### MariaDB Production Configuration\n```bash\n# Create optimized configuration\nsudo tee /etc/mysql/mariadb.conf.d/50-server.cnf > /dev/null <<EOF\n[mysqld]\n# Connection and thread handling\nmax_connections = 500\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 4G  # 70-80% of RAM\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_io_capacity = 2000\ninnodb_io_capacity_max = 4000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\ninnodb_open_files = 8192\n\n# Query cache (for read-heavy workloads)\nquery_cache_type = 1\nquery_cache_size = 256M\nquery_cache_limit = 2M\n\n# Temporary tables\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nsync_binlog = 1\nexpire_logs_days = 7\nbinlog_cache_size = 1M\n\n# Slow query log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\nlog_queries_not_using_indexes = 1\n\n# Security\nbind-address = 127.0.0.1  # Change for network access\nskip_name_resolve = 1\nlocal_infile = 0\n\n# SSL configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\nEOF\n\nsudo systemctl restart mariadb\n```\n\n### MySQL/MariaDB Security Hardening\n```bash\n# Create dedicated database user with limited privileges\nmysql -u root -p <<EOF\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create application user\nCREATE USER 'appuser'@'localhost' IDENTIFIED BY 'secure_app_password_2024';\nCREATE USER 'appuser'@'192.168.1.%' IDENTIFIED BY 'secure_app_password_2024';\n\n-- Grant minimal privileges\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'localhost';\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'192.168.1.%';\n\n-- Create read-only user for backups\nCREATE USER 'backup'@'localhost' IDENTIFIED BY 'backup_password_2024';\nGRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, TRIGGER ON *.* TO 'backup'@'localhost';\n\n-- Create replication user\nCREATE USER 'replication'@'%' IDENTIFIED BY 'replication_password_2024';\nGRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';\n\n-- Remove default users and databases\nDROP DATABASE IF EXISTS test;\nDELETE FROM mysql.user WHERE User='';\nDELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\n\n-- Secure privileges\nFLUSH PRIVILEGES;\nEOF\n\n# Generate SSL certificates for MySQL\nsudo mkdir -p /etc/mysql/ssl\ncd /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out ca-key.pem 4096\nsudo openssl req -new -x509 -nodes -days 3650 -key ca-key.pem -out ca-cert.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MySQL-CA\"\n\n# Create server certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout server-key.pem -out server-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mysql.example.com\"\nsudo openssl x509 -req -days 365 -set_serial 01 -in server-req.pem -out server-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout client-key.pem -out client-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mysql-client\"\nsudo openssl x509 -req -days 365 -set_serial 02 -in client-req.pem -out client-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Set permissions\nsudo chown mysql:mysql /etc/mysql/ssl/*\nsudo chmod 600 /etc/mysql/ssl/*key.pem\nsudo chmod 644 /etc/mysql/ssl/*.pem\n\nsudo systemctl restart mariadb\n```\n\n## PostgreSQL Installation\n\n### Ubuntu/Debian PostgreSQL Setup\n```bash\n# Install PostgreSQL official repository\nsudo apt install -y wget ca-certificates\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" | sudo tee /etc/apt/sources.list.d/pgdg.list\n\n# Update and install PostgreSQL 16\nsudo apt update\nsudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16\n\n# Enable and start service\nsudo systemctl enable --now postgresql\n\n# Configure PostgreSQL\nsudo -u postgres psql <<EOF\n-- Create application database\nCREATE DATABASE myapp WITH ENCODING='UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0;\n\n-- Create application user\nCREATE USER appuser WITH ENCRYPTED PASSWORD 'secure_app_password_2024';\nGRANT ALL PRIVILEGES ON DATABASE myapp TO appuser;\n\n-- Create read-only user\nCREATE USER readonly WITH ENCRYPTED PASSWORD 'readonly_password_2024';\nGRANT CONNECT ON DATABASE myapp TO readonly;\n\\c myapp\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\n-- Security settings\nALTER SYSTEM SET password_encryption = 'scram-sha-256';\nSELECT pg_reload_conf();\nEOF\n```\n\n### RHEL/CentOS/Rocky Linux PostgreSQL\n```bash\n# Install PostgreSQL repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL 16\nsudo yum install -y postgresql16-server postgresql16 postgresql16-contrib postgresql16-devel\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable --now postgresql-16\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5432/tcp\nsudo firewall-cmd --reload\n```\n\n### PostgreSQL Production Configuration\n```bash\n# Configure PostgreSQL for production\nsudo tee /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n# PostgreSQL 16 Production Configuration\n\n# Connection settings\nlisten_addresses = 'localhost'  # Change to '*' for network access\nport = 5432\nmax_connections = 200\nshared_buffers = 2GB  # 25% of RAM\neffective_cache_size = 8GB  # 75% of RAM\n\n# Memory settings\nwork_mem = 16MB\nmaintenance_work_mem = 512MB\ndynamic_shared_memory_type = posix\n\n# WAL settings\nwal_level = replica\nwal_buffers = 64MB\ncheckpoint_completion_target = 0.9\nmax_wal_size = 4GB\nmin_wal_size = 1GB\ncheckpoint_timeout = 15min\n\n# Query planner\nrandom_page_cost = 1.1  # For SSD\neffective_io_concurrency = 200\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\nmax_parallel_maintenance_workers = 4\n\n# Logging\nlog_destination = 'stderr'\nlogging_collector = on\nlog_directory = 'log'\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\nlog_min_duration_statement = 1000  # Log slow queries\nlog_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '\nlog_statement = 'ddl'  # Log DDL statements\nlog_lock_waits = on\n\n# SSL configuration\nssl = on\nssl_cert_file = '/var/lib/pgsql/16/data/ssl/server.crt'\nssl_key_file = '/var/lib/pgsql/16/data/ssl/server.key'\nssl_ca_file = '/var/lib/pgsql/16/data/ssl/ca.crt'\nssl_min_protocol_version = 'TLSv1.2'\nssl_prefer_server_ciphers = on\n\n# Security\npassword_encryption = scram-sha-256\nkrb_server_keyfile = ''\ndb_user_namespace = off\nrow_security = on\n\n# Autovacuum\nautovacuum = on\nautovacuum_max_workers = 4\nautovacuum_naptime = 1min\nautovacuum_vacuum_threshold = 50\nautovacuum_analyze_threshold = 50\nautovacuum_vacuum_scale_factor = 0.1\nautovacuum_analyze_scale_factor = 0.05\n\n# Background writer\nbgwriter_delay = 200ms\nbgwriter_lru_maxpages = 100\nbgwriter_lru_multiplier = 2.0\nbgwriter_flush_after = 512kB\n\n# Checkpointer\ncheckpoint_flush_after = 256kB\n\n# Statistics\ntrack_activities = on\ntrack_counts = on\ntrack_io_timing = on\ntrack_functions = all\nstats_temp_directory = 'pg_stat_tmp'\nEOF\n\n# Configure client authentication\nsudo tee /var/lib/pgsql/16/data/pg_hba.conf > /dev/null <<EOF\n# PostgreSQL Client Authentication Configuration\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# Local connections\nlocal   all             postgres                                peer\nlocal   all             all                                     scram-sha-256\n\n# IPv4 local connections\nhost    all             all             127.0.0.1/32            scram-sha-256\n\n# IPv6 local connections  \nhost    all             all             ::1/128                 scram-sha-256\n\n# Network connections (if needed)\nhostssl myapp           appuser         192.168.1.0/24          scram-sha-256\nhostssl myapp           readonly        192.168.1.0/24          scram-sha-256\n\n# Replication connections\nhostssl replication     replication     192.168.1.0/24          scram-sha-256\n\n# Deny all other connections\nhost    all             all             0.0.0.0/0               reject\nEOF\n\n# Generate SSL certificates\nsudo mkdir -p /var/lib/pgsql/16/data/ssl\ncd /var/lib/pgsql/16/data/ssl\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj \"/C=US/ST=State/L=City/O=Organization/CN=PostgreSQL-CA\"\n\nsudo openssl genrsa -out server.key 4096\nsudo openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=postgres.example.com\"\nsudo openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\nsudo chown postgres:postgres /var/lib/pgsql/16/data/ssl/*\nsudo chmod 600 /var/lib/pgsql/16/data/ssl/*.key\nsudo chmod 644 /var/lib/pgsql/16/data/ssl/*.crt\n\nsudo systemctl restart postgresql-16\n```\n\n### PostgreSQL Security Hardening\n```bash\n# Advanced security configuration\nsudo -u postgres psql <<EOF\n-- Enable row-level security\nALTER SYSTEM SET row_security = on;\n\n-- Configure logging for security\nALTER SYSTEM SET log_statement = 'all';\nALTER SYSTEM SET log_connections = on;\nALTER SYSTEM SET log_disconnections = on;\nALTER SYSTEM SET log_lock_waits = on;\nALTER SYSTEM SET log_temp_files = 0;\n\n-- Password policies\nALTER SYSTEM SET password_encryption = 'scram-sha-256';\n\n-- Create roles with specific privileges\nCREATE ROLE app_read;\nGRANT CONNECT ON DATABASE myapp TO app_read;\nGRANT USAGE ON SCHEMA public TO app_read;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;\n\nCREATE ROLE app_write;\nGRANT app_read TO app_write;\nGRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_write;\n\n-- Create application-specific user\nCREATE USER myapp_user WITH PASSWORD 'secure_password_2024';\nGRANT app_write TO myapp_user;\n\n-- Security functions\nCREATE OR REPLACE FUNCTION audit_trigger_function()\nRETURNS TRIGGER AS \\$\\$\nBEGIN\n    INSERT INTO audit_log (table_name, operation, old_values, new_values, user_name, timestamp)\n    VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW), current_user, now());\n    RETURN COALESCE(NEW, OLD);\nEND;\n\\$\\$ LANGUAGE plpgsql;\n\n-- Reload configuration\nSELECT pg_reload_conf();\nEOF\n\n# Configure connection limits\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n\n# Connection limiting per user/database\n# ALTER USER myapp_user CONNECTION LIMIT 50;\n# ALTER DATABASE myapp CONNECTION LIMIT 100;\nEOF\n```\n\n## MongoDB Installation\n\n### Ubuntu/Debian MongoDB Setup\n```bash\n# Import MongoDB public GPG key\nwget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -\n\n# Add MongoDB repository\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update and install MongoDB\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Verify installation\nmongosh --eval 'db.runCommand(\"connectionStatus\")'\n```\n\n### RHEL/CentOS/Rocky Linux MongoDB\n```bash\n# Add MongoDB repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo > /dev/null <<EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload\n```\n\n### MongoDB Production Configuration\n```bash\n# Create secure MongoDB configuration\nsudo tee /etc/mongod.conf > /dev/null <<EOF\n# MongoDB Production Configuration\n\nstorage:\n  dbPath: /var/lib/mongo\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 4  # 50% of RAM\n      journalCompressor: snappy\n      directoryForIndexes: false\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n  quiet: false\n  logRotate: reopen\n  component:\n    accessControl:\n      verbosity: 1\n    command:\n      verbosity: 1\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Change for network access\n  maxIncomingConnections: 1000\n  compression:\n    compressors: snappy,zstd\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb/mongodb.pem\n    CAFile: /etc/ssl/mongodb/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nsecurity:\n  authorization: enabled\n  keyFile: /etc/mongodb/mongodb-keyfile\n  clusterAuthMode: x509\n  javascriptEnabled: false\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 0.02\n\nreplication:\n  replSetName: rs0\n  enableMajorityReadConcern: true\n\nsharding:\n  clusterRole: shardsvr  # or configsvr for config servers\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n  timeZoneInfo: /usr/share/zoneinfo\n\nsetParameter:\n  authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256\n  scramIterationCount: 15000\n  failIndexKeyTooLong: false\n  notablescan: 1  # Disable table scans in production\nEOF\n\n# Create MongoDB keyfile for replica set authentication\nsudo openssl rand -base64 756 | sudo tee /etc/mongodb/mongodb-keyfile\nsudo chmod 600 /etc/mongodb/mongodb-keyfile\nsudo chown mongod:mongod /etc/mongodb/mongodb-keyfile\n\n# Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/ssl/mongodb\ncd /etc/ssl/mongodb\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA\"\n\nsudo openssl genrsa -out mongodb.key 4096\nsudo openssl req -new -key mongodb.key -out mongodb.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com\"\nsudo openssl x509 -req -days 365 -in mongodb.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out mongodb.crt\n\n# Combine certificate and key for MongoDB\nsudo cat mongodb.crt mongodb.key | sudo tee mongodb.pem\nsudo chmod 600 /etc/ssl/mongodb/*.key /etc/ssl/mongodb/*.pem\nsudo chown mongod:mongod /etc/ssl/mongodb/*\n\nsudo systemctl restart mongod\n```\n\n### MongoDB Security Setup\n```bash\n# Initialize MongoDB security\nmongosh --ssl --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem --sslCAFile /etc/ssl/mongodb/ca.pem <<EOF\n// Create admin user\nuse admin\ndb.createUser({\n  user: \"admin\",\n  pwd: \"secure_admin_password_2024\",\n  roles: [\n    { role: \"userAdminAnyDatabase\", db: \"admin\" },\n    { role: \"readWriteAnyDatabase\", db: \"admin\" },\n    { role: \"dbAdminAnyDatabase\", db: \"admin\" },\n    { role: \"clusterAdmin\", db: \"admin\" }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: \"appuser\",\n  pwd: \"secure_app_password_2024\",\n  roles: [\n    { role: \"readWrite\", db: \"myapp\" }\n  ]\n})\n\n// Create read-only user\ndb.createUser({\n  user: \"readonly\",\n  pwd: \"readonly_password_2024\",\n  roles: [\n    { role: \"read\", db: \"myapp\" }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: \"backup\",\n  pwd: \"backup_password_2024\",\n  roles: [\n    { role: \"backup\", db: \"admin\" },\n    { role: \"restore\", db: \"admin\" }\n  ]\n})\n\n// Initialize replica set (if using replication)\nrs.initiate({\n  _id: \"rs0\",\n  members: [\n    { _id: 0, host: \"mongodb1.example.com:27017\", priority: 2 },\n    { _id: 1, host: \"mongodb2.example.com:27017\", priority: 1 },\n    { _id: 2, host: \"mongodb3.example.com:27017\", priority: 1, arbiterOnly: true }\n  ]\n})\nEOF\n```\n\n## Redis Installation and Configuration\n\n### Redis Setup (All Distributions)\n```bash\n# Ubuntu/Debian\nsudo apt install -y redis-server redis-tools\n\n# RHEL/CentOS\nsudo yum install -y redis\n\n# Fedora\nsudo dnf install -y redis\n\n# Arch Linux\nsudo pacman -S redis\n\n# Configure Redis for production\nsudo tee /etc/redis/redis.conf > /dev/null <<EOF\n# Redis Production Configuration\n\n# Network\nbind 127.0.0.1 ::1  # Change for network access\nport 6379\ntcp-backlog 511\ntimeout 300\ntcp-keepalive 300\n\n# Security\nrequirepass redis_secure_password_2024\nrename-command FLUSHDB \"FLUSHDB_9a8b7c6d5e4f3g2h1\"\nrename-command FLUSHALL \"FLUSHALL_h1g2f3e4d5c6b7a8\"\nrename-command DEBUG \"DEBUG_8a7b6c5d4e3f2g1h\"\nrename-command CONFIG \"CONFIG_1h2g3f4e5d6c7b8a\"\n\n# SSL/TLS (Redis 6.0+)\ntls-port 6380\nport 0  # Disable non-TLS port\ntls-cert-file /etc/redis/tls/redis.crt\ntls-key-file /etc/redis/tls/redis.key\ntls-ca-cert-file /etc/redis/tls/ca.crt\ntls-protocols \"TLSv1.2 TLSv1.3\"\ntls-prefer-server-ciphers yes\n\n# Memory management\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 5\n\n# Persistence\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\nrdbchecksum yes\ndbfilename redis.rdb\ndir /var/lib/redis/\n\n# AOF (Append Only File)\nappendonly yes\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\nsyslog-enabled yes\nsyslog-ident redis\n\n# Slow log\nslowlog-log-slower-than 10000\nslowlog-max-len 128\n\n# Latency monitoring\nlatency-monitor-threshold 100\n\n# Client output buffer limits\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Advanced configuration\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\n\n# Lua scripting\nlua-time-limit 5000\nEOF\n\n# Generate Redis TLS certificates\nsudo mkdir -p /etc/redis/tls\ncd /etc/redis/tls\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj \"/C=US/ST=State/L=City/O=Organization/CN=Redis-CA\"\n\nsudo openssl genrsa -out redis.key 4096\nsudo openssl req -new -key redis.key -out redis.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=redis.example.com\"\nsudo openssl x509 -req -days 365 -in redis.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out redis.crt\n\nsudo chown redis:redis /etc/redis/tls/*\nsudo chmod 600 /etc/redis/tls/*.key\nsudo chmod 644 /etc/redis/tls/*.crt\n\nsudo systemctl restart redis-server\n```\n\n## Database Monitoring and Maintenance\n\n### Comprehensive Database Monitoring\n```bash\nsudo tee /usr/local/bin/database-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/database-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# MySQL/MariaDB monitoring\nif command -v mysql >/dev/null 2>&1 && systemctl is-active mariadb >/dev/null 2>&1; then\n    log_message \"=== MySQL/MariaDB Monitoring ===\"\n    \n    # Connection count\n    MYSQL_CONNECTIONS=$(mysql -e \"SHOW STATUS LIKE 'Threads_connected';\" | tail -1 | awk '{print $2}')\n    MYSQL_MAX_CONNECTIONS=$(mysql -e \"SHOW VARIABLES LIKE 'max_connections';\" | tail -1 | awk '{print $2}')\n    log_message \"MySQL connections: ${MYSQL_CONNECTIONS}/${MYSQL_MAX_CONNECTIONS}\"\n    \n    # Query performance\n    SLOW_QUERIES=$(mysql -e \"SHOW STATUS LIKE 'Slow_queries';\" | tail -1 | awk '{print $2}')\n    log_message \"MySQL slow queries: ${SLOW_QUERIES}\"\n    \n    # Buffer pool hit ratio\n    BUFFER_HIT_RATIO=$(mysql -e \"\n      SELECT ROUND((1 - (Innodb_buffer_pool_reads / Innodb_buffer_pool_read_requests)) * 100, 2) as hit_ratio\n      FROM INFORMATION_SCHEMA.GLOBAL_STATUS \n      WHERE VARIABLE_NAME IN ('Innodb_buffer_pool_reads', 'Innodb_buffer_pool_read_requests');\" | tail -1)\n    log_message \"InnoDB buffer pool hit ratio: ${BUFFER_HIT_RATIO}%\"\nfi\n\n# PostgreSQL monitoring\nif command -v psql >/dev/null 2>&1 && systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    log_message \"=== PostgreSQL Monitoring ===\"\n    \n    # Connection count\n    PG_CONNECTIONS=$(sudo -u postgres psql -t -c \"SELECT count(*) FROM pg_stat_activity;\")\n    PG_MAX_CONNECTIONS=$(sudo -u postgres psql -t -c \"SHOW max_connections;\")\n    log_message \"PostgreSQL connections: ${PG_CONNECTIONS}/${PG_MAX_CONNECTIONS}\"\n    \n    # Database size\n    PG_DB_SIZE=$(sudo -u postgres psql -t -c \"SELECT pg_size_pretty(pg_database_size('myapp'));\")\n    log_message \"PostgreSQL database size: ${PG_DB_SIZE}\"\n    \n    # Cache hit ratio\n    PG_CACHE_HIT=$(sudo -u postgres psql -t -c \"\n      SELECT round(sum(blks_hit)*100.0/sum(blks_hit+blks_read), 2) \n      FROM pg_stat_database WHERE datname='myapp';\")\n    log_message \"PostgreSQL cache hit ratio: ${PG_CACHE_HIT}%\"\n    \n    # Long running queries\n    LONG_QUERIES=$(sudo -u postgres psql -t -c \"\n      SELECT count(*) FROM pg_stat_activity \n      WHERE state = 'active' AND now() - query_start > interval '5 minutes';\")\n    log_message \"PostgreSQL long-running queries: ${LONG_QUERIES}\"\nfi\n\n# MongoDB monitoring\nif command -v mongosh >/dev/null 2>&1 && systemctl is-active mongod >/dev/null 2>&1; then\n    log_message \"=== MongoDB Monitoring ===\"\n    \n    # Connection count\n    MONGO_CONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.current\")\n    MONGO_MAX_CONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.available\")\n    log_message \"MongoDB connections: ${MONGO_CONNECTIONS}/${MONGO_MAX_CONNECTIONS}\"\n    \n    # Database statistics\n    MONGO_DB_SIZE=$(mongosh myapp --quiet --eval \"Math.round(db.stats().dataSize / 1024 / 1024) + ' MB'\")\n    log_message \"MongoDB database size: ${MONGO_DB_SIZE}\"\n    \n    # OpLog status (for replica sets)\n    if mongosh admin --quiet --eval \"rs.status().ok\" 2>/dev/null | grep -q \"1\"; then\n        OPLOG_SIZE=$(mongosh local --quiet --eval \"Math.round(db.oplog.rs.stats().maxSize / 1024 / 1024) + ' MB'\")\n        log_message \"MongoDB OpLog size: ${OPLOG_SIZE}\"\n    fi\nfi\n\n# Redis monitoring\nif command -v redis-cli >/dev/null 2>&1 && systemctl is-active redis >/dev/null 2>&1; then\n    log_message \"=== Redis Monitoring ===\"\n    \n    # Memory usage\n    REDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\n    REDIS_MAX_MEMORY=$(redis-cli config get maxmemory | tail -1)\n    log_message \"Redis memory usage: ${REDIS_MEMORY} / ${REDIS_MAX_MEMORY}\"\n    \n    # Connected clients\n    REDIS_CLIENTS=$(redis-cli info clients | grep connected_clients: | cut -d: -f2)\n    log_message \"Redis connected clients: ${REDIS_CLIENTS}\"\n    \n    # Hit ratio\n    REDIS_HITS=$(redis-cli info stats | grep keyspace_hits: | cut -d: -f2)\n    REDIS_MISSES=$(redis-cli info stats | grep keyspace_misses: | cut -d: -f2)\n    if [ ${REDIS_MISSES} -gt 0 ]; then\n        REDIS_HIT_RATIO=$(echo \"scale=2; ${REDIS_HITS} / (${REDIS_HITS} + ${REDIS_MISSES}) * 100\" | bc)\n        log_message \"Redis hit ratio: ${REDIS_HIT_RATIO}%\"\n    fi\nfi\n\nlog_message \"Database monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/database-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n### Database Backup Automation\n```bash\nsudo tee /usr/local/bin/database-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/databases\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{mysql,postgresql,mongodb,redis}\n\n# MySQL/MariaDB backup\nif command -v mysql >/dev/null 2>&1 && systemctl is-active mariadb >/dev/null 2>&1; then\n    echo \"Backing up MySQL/MariaDB...\"\n    \n    # Full backup with all databases\n    mysqldump --all-databases --single-transaction --routines --triggers --events \\\n      --master-data=2 --flush-logs --delete-master-logs \\\n      > ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Compress backup\n    gzip ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Individual database backup\n    mysqldump --single-transaction --routines --triggers myapp \\\n      > ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\n    gzip ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\nfi\n\n# PostgreSQL backup\nif command -v pg_dump >/dev/null 2>&1 && systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    echo \"Backing up PostgreSQL...\"\n    \n    # Full cluster backup\n    sudo -u postgres pg_dumpall > ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\n    \n    # Individual database backup\n    sudo -u postgres pg_dump -Fc myapp > ${BACKUP_DIR}/postgresql/myapp-backup-${DATE}.dump\n    \n    # Compress SQL backup\n    gzip ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\nfi\n\n# MongoDB backup\nif command -v mongodump >/dev/null 2>&1 && systemctl is-active mongod >/dev/null 2>&1; then\n    echo \"Backing up MongoDB...\"\n    \n    # Full backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --out ${BACKUP_DIR}/mongodb/full-backup-${DATE}\n    \n    # Individual database backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --db myapp --out ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\n    \n    # Compress backups\n    tar -czf ${BACKUP_DIR}/mongodb/full-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb full-backup-${DATE}\n    tar -czf ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb myapp-backup-${DATE}\n    \n    # Remove uncompressed directories\n    rm -rf ${BACKUP_DIR}/mongodb/full-backup-${DATE} ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\nfi\n\n# Redis backup\nif command -v redis-cli >/dev/null 2>&1 && systemctl is-active redis >/dev/null 2>&1; then\n    echo \"Backing up Redis...\"\n    \n    # Trigger background save\n    redis-cli BGSAVE\n    \n    # Wait for save to complete\n    while [ \"$(redis-cli LASTSAVE)\" = \"$(redis-cli LASTSAVE)\" ]; do\n        sleep 1\n    done\n    \n    # Copy RDB file\n    cp /var/lib/redis/dump.rdb ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\n    gzip ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\nfi\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://database-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination database-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://database-backups/\n\n# Keep only last 14 days of backups\nfind ${BACKUP_DIR} -name \"*backup*\" -type f -mtime +14 -delete\n\n# Verify backup integrity\necho \"Verifying backup integrity...\"\nfor backup in ${BACKUP_DIR}/*/*.gz; do\n    if gzip -t \"$backup\" 2>/dev/null; then\n        echo \"âœ“ $(basename $backup) - OK\"\n    else\n        echo \"âœ— $(basename $backup) - CORRUPTED\"\n    fi\ndone\n\necho \"Database backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-backup.sh\n\n# Schedule daily backups\necho \"0 1 * * * root /usr/local/bin/database-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## High Availability and Replication\n\n### MySQL/MariaDB Master-Slave Replication\n```bash\n# Configure master server\nsudo tee -a /etc/mysql/mariadb.conf.d/replication.cnf > /dev/null <<EOF\n[mysqld]\n# Replication settings\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = myapp\nsync_binlog = 1\nrelay-log = mysql-relay-bin\nrelay-log-recovery = 1\n\n# GTID replication (recommended)\ngtid_mode = ON\nenforce_gtid_consistency = ON\nlog_slave_updates = ON\nEOF\n\nmysql -u root -p <<EOF\n-- Create replication user\nCREATE USER 'replication'@'%' IDENTIFIED BY 'replication_password_2024';\nGRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';\nFLUSH PRIVILEGES;\n\n-- Get master status\nSHOW MASTER STATUS;\nEOF\n\n# Configure slave server (server-id = 2)\n# On slave server:\nmysql -u root -p <<EOF\nCHANGE MASTER TO\n  MASTER_HOST='mysql-master.example.com',\n  MASTER_USER='replication',\n  MASTER_PASSWORD='replication_password_2024',\n  MASTER_AUTO_POSITION=1;\n\nSTART SLAVE;\nSHOW SLAVE STATUS\\G\nEOF\n```\n\n### PostgreSQL Streaming Replication\n```bash\n# Configure master server\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n# Replication settings\nwal_level = replica\nmax_wal_senders = 10\nmax_replication_slots = 10\nwal_keep_size = 1GB\nhot_standby = on\narchive_mode = on\narchive_command = 'cp %p /var/lib/pgsql/16/archive/%f'\nEOF\n\n# Configure replication access\nsudo tee -a /var/lib/pgsql/16/data/pg_hba.conf > /dev/null <<EOF\n# Replication connections\nhostssl replication replication 192.168.1.0/24 scram-sha-256\nEOF\n\n# Create replication user\nsudo -u postgres psql <<EOF\nCREATE USER replication WITH REPLICATION ENCRYPTED PASSWORD 'replication_password_2024';\nEOF\n\n# Create archive directory\nsudo mkdir -p /var/lib/pgsql/16/archive\nsudo chown postgres:postgres /var/lib/pgsql/16/archive\n\nsudo systemctl restart postgresql-16\n\n# Setup slave server\n# On slave server, create base backup:\nsudo -u postgres pg_basebackup -h master.example.com -D /var/lib/pgsql/16/data -U replication -W -v -P -R\n```\n\n### MongoDB Replica Set Configuration\n```bash\n# Initialize replica set (run on primary node)\nmongosh admin <<EOF\nrs.initiate({\n  _id: \"rs0\",\n  version: 1,\n  protocolVersion: 1,\n  members: [\n    { \n      _id: 0, \n      host: \"mongodb1.example.com:27017\",\n      priority: 2,\n      votes: 1\n    },\n    { \n      _id: 1, \n      host: \"mongodb2.example.com:27017\",\n      priority: 1,\n      votes: 1\n    },\n    { \n      _id: 2, \n      host: \"mongodb3.example.com:27017\",\n      priority: 1,\n      votes: 1,\n      arbiterOnly: true\n    }\n  ],\n  settings: {\n    chainingAllowed: false,\n    heartbeatIntervalMillis: 2000,\n    heartbeatTimeoutSecs: 10,\n    electionTimeoutMillis: 10000,\n    catchUpTimeoutMillis: -1,\n    getLastErrorModes: {\n      majority: { \n        tags: { \n          dc: 1 \n        } \n      }\n    }\n  }\n})\n\n// Check replica set status\nrs.status()\n\n// Configure read preferences\nrs.conf()\nEOF\n\n# Configure MongoDB sharding (for large deployments)\n# Config server initialization:\nmongosh admin <<EOF\nrs.initiate({\n  _id: \"configReplSet\",\n  configsvr: true,\n  members: [\n    { _id: 0, host: \"config1.example.com:27019\" },\n    { _id: 1, host: \"config2.example.com:27019\" },\n    { _id: 2, host: \"config3.example.com:27019\" }\n  ]\n})\nEOF\n```\n\n### Redis Sentinel High Availability\n```bash\n# Configure Redis Sentinel for HA\nsudo tee /etc/redis/sentinel.conf > /dev/null <<EOF\n# Redis Sentinel Configuration\nport 26379\nsentinel deny-scripts-reconfig yes\n\n# Monitor Redis master\nsentinel monitor mymaster redis-master.example.com 6379 2\nsentinel auth-pass mymaster redis_secure_password_2024\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n\n# Notification scripts\nsentinel notification-script mymaster /etc/redis/notify.sh\nsentinel client-reconfig-script mymaster /etc/redis/reconfig.sh\n\n# Security\nrequirepass sentinel_password_2024\nEOF\n\n# Create notification script\nsudo tee /etc/redis/notify.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Redis failover event: $*\" >> /var/log/redis/sentinel.log\n# Add alerting logic here (email, Slack, etc.)\nEOF\n\n# Create reconfiguration script\nsudo tee /etc/redis/reconfig.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Redis master changed to: $6:$7\" >> /var/log/redis/sentinel.log\n# Update application configuration, restart services, etc.\nEOF\n\nsudo chmod +x /etc/redis/{notify,reconfig}.sh\nsudo systemctl enable --now redis-sentinel\n```\n\n## Performance Optimization\n\n### Database Performance Tuning\n```bash\nsudo tee /usr/local/bin/database-performance-tune.sh > /dev/null <<'EOF'\n#!/bin/bash\n\ntune_mysql() {\n    echo \"Tuning MySQL/MariaDB performance...\"\n    \n    # Calculate optimal buffer pool size (70% of RAM)\n    TOTAL_RAM=$(free -b | awk 'NR==2{print $2}')\n    BUFFER_POOL_SIZE=$((TOTAL_RAM * 70 / 100))\n    \n    mysql -u root -p <<EOF\n-- Performance tuning\nSET GLOBAL innodb_buffer_pool_size = ${BUFFER_POOL_SIZE};\nSET GLOBAL query_cache_size = $((TOTAL_RAM * 5 / 100));\nSET GLOBAL thread_cache_size = 100;\nSET GLOBAL table_open_cache = 4096;\nSET GLOBAL innodb_io_capacity = 2000;\n\n-- Show current configuration\nSHOW VARIABLES LIKE 'innodb_buffer_pool_size';\nSHOW VARIABLES LIKE 'query_cache_size';\nEOF\n}\n\ntune_postgresql() {\n    echo \"Tuning PostgreSQL performance...\"\n    \n    # Use pg_tune recommendations\n    TOTAL_RAM_MB=$(($(free -m | awk 'NR==2{print $2}')))\n    SHARED_BUFFERS=$((TOTAL_RAM_MB / 4))\n    EFFECTIVE_CACHE=$((TOTAL_RAM_MB * 3 / 4))\n    \n    sudo -u postgres psql <<EOF\n-- Performance tuning\nALTER SYSTEM SET shared_buffers = '${SHARED_BUFFERS}MB';\nALTER SYSTEM SET effective_cache_size = '${EFFECTIVE_CACHE}MB';\nALTER SYSTEM SET work_mem = '16MB';\nALTER SYSTEM SET maintenance_work_mem = '256MB';\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\n\n-- Reload configuration\nSELECT pg_reload_conf();\n\n-- Show current settings\nSHOW shared_buffers;\nSHOW effective_cache_size;\nEOF\n}\n\ntune_mongodb() {\n    echo \"Tuning MongoDB performance...\"\n    \n    # Calculate WiredTiger cache size (50% of RAM)\n    TOTAL_RAM_GB=$(($(free -g | awk 'NR==2{print $2}')))\n    CACHE_SIZE_GB=$((TOTAL_RAM_GB / 2))\n    \n    mongosh admin <<EOF\n// Performance tuning\ndb.adminCommand({\n  \"setParameter\": 1,\n  \"wiredTigerEngineRuntimeConfig\": \"cache_size=${CACHE_SIZE_GB}GB\"\n})\n\n// Show current cache usage\ndb.serverStatus().wiredTiger.cache\nEOF\n}\n\ntune_redis() {\n    echo \"Tuning Redis performance...\"\n    \n    # Calculate maxmemory (50% of RAM for dedicated Redis server)\n    TOTAL_RAM_BYTES=$(free -b | awk 'NR==2{print $2}')\n    MAX_MEMORY_BYTES=$((TOTAL_RAM_BYTES / 2))\n    \n    redis-cli CONFIG SET maxmemory ${MAX_MEMORY_BYTES}\n    redis-cli CONFIG SET maxmemory-policy allkeys-lru\n    redis-cli CONFIG REWRITE\n    \n    echo \"Redis maxmemory set to $(redis-cli CONFIG GET maxmemory | tail -1) bytes\"\n}\n\n# Check which databases are running and tune them\nif systemctl is-active mariadb >/dev/null 2>&1; then\n    tune_mysql\nfi\n\nif systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    tune_postgresql\nfi\n\nif systemctl is-active mongod >/dev/null 2>&1; then\n    tune_mongodb\nfi\n\nif systemctl is-active redis >/dev/null 2>&1; then\n    tune_redis\nfi\n\necho \"Database performance tuning completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-performance-tune.sh\n```\n\n## Verification and Testing\n\n### Database Health Checks\n```bash\nsudo tee /usr/local/bin/database-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/database-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# MySQL/MariaDB health check\nif command -v mysql >/dev/null 2>&1; then\n    if systemctl is-active mariadb >/dev/null 2>&1; then\n        log_message \"âœ“ MariaDB service is running\"\n        \n        # Test connectivity\n        if mysql -e \"SELECT 1;\" >/dev/null 2>&1; then\n            log_message \"âœ“ MariaDB connectivity test passed\"\n        else\n            log_message \"âœ— MariaDB connectivity test failed\"\n        fi\n        \n        # Check for errors in log\n        ERROR_COUNT=$(tail -100 /var/log/mysql/error.log | grep -i error | wc -l)\n        log_message \"â„¹ MariaDB errors in last 100 log lines: ${ERROR_COUNT}\"\n    else\n        log_message \"âœ— MariaDB service is not running\"\n    fi\nfi\n\n# PostgreSQL health check\nif command -v psql >/dev/null 2>&1; then\n    if systemctl is-active postgresql-16 >/dev/null 2>&1; then\n        log_message \"âœ“ PostgreSQL service is running\"\n        \n        # Test connectivity\n        if sudo -u postgres psql -c \"SELECT version();\" >/dev/null 2>&1; then\n            log_message \"âœ“ PostgreSQL connectivity test passed\"\n        else\n            log_message \"âœ— PostgreSQL connectivity test failed\"\n        fi\n        \n        # Check replication lag (if slave)\n        if sudo -u postgres psql -t -c \"SELECT pg_is_in_recovery();\" | grep -q \"t\"; then\n            LAG=$(sudo -u postgres psql -t -c \"SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::int;\")\n            log_message \"â„¹ PostgreSQL replication lag: ${LAG} seconds\"\n        fi\n    else\n        log_message \"âœ— PostgreSQL service is not running\"\n    fi\nfi\n\n# MongoDB health check\nif command -v mongosh >/dev/null 2>&1; then\n    if systemctl is-active mongod >/dev/null 2>&1; then\n        log_message \"âœ“ MongoDB service is running\"\n        \n        # Test connectivity\n        if mongosh --quiet --eval \"db.adminCommand('ping').ok\" 2>/dev/null | grep -q \"1\"; then\n            log_message \"âœ“ MongoDB connectivity test passed\"\n        else\n            log_message \"âœ— MongoDB connectivity test failed\"\n        fi\n        \n        # Check replica set status\n        if mongosh admin --quiet --eval \"rs.status().ok\" 2>/dev/null | grep -q \"1\"; then\n            PRIMARY_COUNT=$(mongosh admin --quiet --eval \"rs.status().members.filter(m => m.stateStr === 'PRIMARY').length\")\n            log_message \"â„¹ MongoDB replica set has ${PRIMARY_COUNT} primary node(s)\"\n        fi\n    else\n        log_message \"âœ— MongoDB service is not running\"\n    fi\nfi\n\n# Redis health check\nif command -v redis-cli >/dev/null 2>&1; then\n    if systemctl is-active redis >/dev/null 2>&1; then\n        log_message \"âœ“ Redis service is running\"\n        \n        # Test connectivity\n        if redis-cli ping | grep -q \"PONG\"; then\n            log_message \"âœ“ Redis connectivity test passed\"\n        else\n            log_message \"âœ— Redis connectivity test failed\"\n        fi\n        \n        # Check memory usage\n        REDIS_MEMORY_PERCENT=$(redis-cli info memory | grep used_memory_rss_human: | cut -d: -f2)\n        log_message \"â„¹ Redis memory usage: ${REDIS_MEMORY_PERCENT}\"\n    else\n        log_message \"âœ— Redis service is not running\"\n    fi\nfi\n\nlog_message \"Database health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-health-check.sh\n\n# Schedule health checks every 10 minutes\necho \"*/10 * * * * root /usr/local/bin/database-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Database Issues\n```bash\n# MySQL/MariaDB troubleshooting\n# Check service status\nsudo systemctl status mariadb\n\n# Check error logs\nsudo tail -f /var/log/mysql/error.log\n\n# Test connectivity\nmysql -u root -p -e \"SELECT version();\"\n\n# Check process list\nmysql -u root -p -e \"SHOW FULL PROCESSLIST;\"\n\n# Check locks\nmysql -u root -p -e \"SHOW ENGINE INNODB STATUS\\G\" | grep -A 20 \"LATEST DETECTED DEADLOCK\"\n\n# Repair tables\nmysqlcheck --all-databases --repair -u root -p\n\n# PostgreSQL troubleshooting\n# Check service status\nsudo systemctl status postgresql-16\n\n# Check logs\nsudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log\n\n# Test connectivity\nsudo -u postgres psql -c \"SELECT version();\"\n\n# Check active connections\nsudo -u postgres psql -c \"SELECT count(*) FROM pg_stat_activity WHERE state = 'active';\"\n\n# Check locks\nsudo -u postgres psql -c \"SELECT * FROM pg_locks WHERE NOT granted;\"\n\n# Vacuum and analyze\nsudo -u postgres vacuumdb --all --analyze --verbose\n\n# MongoDB troubleshooting\n# Check service status\nsudo systemctl status mongod\n\n# Check logs\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Test connectivity\nmongosh --eval \"db.adminCommand('ping')\"\n\n# Check replica set status\nmongosh admin --eval \"rs.status()\"\n\n# Check database profiler\nmongosh myapp --eval \"db.getProfilingStatus()\"\n\n# Repair database\nmongosh myapp --eval \"db.repairDatabase()\"\n\n# Redis troubleshooting\n# Check service status\nsudo systemctl status redis\n\n# Check logs\nsudo tail -f /var/log/redis/redis-server.log\n\n# Test connectivity\nredis-cli ping\n\n# Check memory stats\nredis-cli info memory\n\n# Check slow log\nredis-cli slowlog get 10\n\n# Monitor commands\nredis-cli monitor\n```\n\n### Advanced Database Debugging\n```bash\n# MySQL/MariaDB debugging\n# Enable general log\nmysql -u root -p -e \"SET GLOBAL general_log = 'ON';\"\nmysql -u root -p -e \"SET GLOBAL log_output = 'FILE';\"\n\n# Performance schema\nmysql -u root -p -e \"SELECT * FROM performance_schema.file_summary_by_event_name WHERE event_name LIKE 'wait/io/file%' ORDER BY sum_timer_wait DESC LIMIT 10;\"\n\n# PostgreSQL debugging\n# Enable query logging\nsudo -u postgres psql -c \"ALTER SYSTEM SET log_statement = 'all';\"\nsudo -u postgres psql -c \"SELECT pg_reload_conf();\"\n\n# Check query performance\nsudo -u postgres psql -c \"SELECT query, calls, total_time, mean_time FROM pg_stat_statements ORDER BY total_time DESC LIMIT 10;\"\n\n# MongoDB debugging\n# Enable profiler\nmongosh myapp --eval \"db.setProfilingLevel(2, { slowms: 100 })\"\n\n# Check slow operations\nmongosh myapp --eval \"db.system.profile.find().sort({ts:-1}).limit(5).pretty()\"\n\n# Redis debugging\n# Enable slow log\nredis-cli CONFIG SET slowlog-log-slower-than 10000\n\n# Check slow operations\nredis-cli SLOWLOG GET 10\n\n# Monitor memory usage\nredis-cli --latency-history -i 1\n```\n\n## Additional Resources\n\n- [MySQL Documentation](https://dev.mysql.com/doc/)\n- [MariaDB Documentation](https://mariadb.com/docs/)\n- [PostgreSQL Documentation](https://www.postgresql.org/docs/)\n- [MongoDB Documentation](https://docs.mongodb.com/)\n- [Redis Documentation](https://redis.io/documentation)\n- [Database Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"database-installation-guide\" class=\"mobile-header\">Database Installation Guide</h1>\n<p class=\"mobile-paragraph\">Comprehensive installation and configuration guide for popular database management systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more. Complete with security hardening and performance optimization for production environments.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">SSD storage recommended for database files</li>\n<li class=\"mobile-list-item\">Network connectivity for replication setups (if applicable)</li>\n<h2 id=\"mysqlmariadb-installation\" class=\"mobile-header\">MySQL/MariaDB Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system\nsudo apt update\n\n# Install MariaDB (recommended over MySQL)\nsudo apt install -y mariadb-server mariadb-client\n\n# Or install MySQL\nsudo apt install -y mysql-server mysql-client\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Enable and start service\nsudo systemctl enable --now mariadb  # or mysql\n\n# Verify installation\nmysql --version\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB from official repository\nsudo tee /etc/yum.repos.d/MariaDB.repo &gt; /dev/null &lt;&lt;EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.its.dal.ca/mariadb/yum/10.11/rhel\\$releasever-\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.its.dal.ca/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nEOF\n\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"mariadb-production-configuration\" class=\"mobile-header\">MariaDB Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create optimized configuration\nsudo tee /etc/mysql/mariadb.conf.d/50-server.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\n# Connection and thread handling\nmax_connections = 500\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 4G  # 70-80% of RAM\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_io_capacity = 2000\ninnodb_io_capacity_max = 4000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\ninnodb_open_files = 8192\n\n# Query cache (for read-heavy workloads)\nquery_cache_type = 1\nquery_cache_size = 256M\nquery_cache_limit = 2M\n\n# Temporary tables\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nsync_binlog = 1\nexpire_logs_days = 7\nbinlog_cache_size = 1M\n\n# Slow query log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\nlog_queries_not_using_indexes = 1\n\n# Security\nbind-address = 127.0.0.1  # Change for network access\nskip_name_resolve = 1\nlocal_infile = 0\n\n# SSL configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\nEOF\n\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-security-hardening\" class=\"mobile-header\">MySQL/MariaDB Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated database user with limited privileges\nmysql -u root -p &lt;&lt;EOF\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create application user\nCREATE USER &#039;appuser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_app_password_2024&#039;;\nCREATE USER &#039;appuser&#039;@&#039;192.168.1.%&#039; IDENTIFIED BY &#039;secure_app_password_2024&#039;;\n\n-- Grant minimal privileges\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;localhost&#039;;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;192.168.1.%&#039;;\n\n-- Create read-only user for backups\nCREATE USER &#039;backup&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;backup_password_2024&#039;;\nGRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, TRIGGER ON *.* TO &#039;backup&#039;@&#039;localhost&#039;;\n\n-- Create replication user\nCREATE USER &#039;replication&#039;@&#039;%&#039; IDENTIFIED BY &#039;replication_password_2024&#039;;\nGRANT REPLICATION SLAVE ON *.* TO &#039;replication&#039;@&#039;%&#039;;\n\n-- Remove default users and databases\nDROP DATABASE IF EXISTS test;\nDELETE FROM mysql.user WHERE User=&#039;&#039;;\nDELETE FROM mysql.user WHERE User=&#039;root&#039; AND Host NOT IN (&#039;localhost&#039;, &#039;127.0.0.1&#039;, &#039;::1&#039;);\n\n-- Secure privileges\nFLUSH PRIVILEGES;\nEOF\n\n# Generate SSL certificates for MySQL\nsudo mkdir -p /etc/mysql/ssl\ncd /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out ca-key.pem 4096\nsudo openssl req -new -x509 -nodes -days 3650 -key ca-key.pem -out ca-cert.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MySQL-CA&quot;\n\n# Create server certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout server-key.pem -out server-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mysql.example.com&quot;\nsudo openssl x509 -req -days 365 -set_serial 01 -in server-req.pem -out server-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout client-key.pem -out client-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mysql-client&quot;\nsudo openssl x509 -req -days 365 -set_serial 02 -in client-req.pem -out client-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Set permissions\nsudo chown mysql:mysql /etc/mysql/ssl/*\nsudo chmod 600 /etc/mysql/ssl/*key.pem\nsudo chmod 644 /etc/mysql/ssl/*.pem\n\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h2 id=\"postgresql-installation\" class=\"mobile-header\">PostgreSQL Installation</h2>\n<h3 id=\"ubuntudebian-postgresql-setup\" class=\"mobile-header\">Ubuntu/Debian PostgreSQL Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL official repository\nsudo apt install -y wget ca-certificates\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\necho &quot;deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main&quot; | sudo tee /etc/apt/sources.list.d/pgdg.list\n\n# Update and install PostgreSQL 16\nsudo apt update\nsudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16\n\n# Enable and start service\nsudo systemctl enable --now postgresql\n\n# Configure PostgreSQL\nsudo -u postgres psql &lt;&lt;EOF\n-- Create application database\nCREATE DATABASE myapp WITH ENCODING=&#039;UTF8&#039; LC_COLLATE=&#039;en_US.UTF-8&#039; LC_CTYPE=&#039;en_US.UTF-8&#039; TEMPLATE=template0;\n\n-- Create application user\nCREATE USER appuser WITH ENCRYPTED PASSWORD &#039;secure_app_password_2024&#039;;\nGRANT ALL PRIVILEGES ON DATABASE myapp TO appuser;\n\n-- Create read-only user\nCREATE USER readonly WITH ENCRYPTED PASSWORD &#039;readonly_password_2024&#039;;\nGRANT CONNECT ON DATABASE myapp TO readonly;\n\\c myapp\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\n-- Security settings\nALTER SYSTEM SET password_encryption = &#039;scram-sha-256&#039;;\nSELECT pg_reload_conf();\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linux-postgresql\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux PostgreSQL</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL 16\nsudo yum install -y postgresql16-server postgresql16 postgresql16-contrib postgresql16-devel\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable --now postgresql-16\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5432/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-production-configuration\" class=\"mobile-header\">PostgreSQL Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure PostgreSQL for production\nsudo tee /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n# PostgreSQL 16 Production Configuration\n\n# Connection settings\nlisten_addresses = &#039;localhost&#039;  # Change to &#039;*&#039; for network access\nport = 5432\nmax_connections = 200\nshared_buffers = 2GB  # 25% of RAM\neffective_cache_size = 8GB  # 75% of RAM\n\n# Memory settings\nwork_mem = 16MB\nmaintenance_work_mem = 512MB\ndynamic_shared_memory_type = posix\n\n# WAL settings\nwal_level = replica\nwal_buffers = 64MB\ncheckpoint_completion_target = 0.9\nmax_wal_size = 4GB\nmin_wal_size = 1GB\ncheckpoint_timeout = 15min\n\n# Query planner\nrandom_page_cost = 1.1  # For SSD\neffective_io_concurrency = 200\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\nmax_parallel_maintenance_workers = 4\n\n# Logging\nlog_destination = &#039;stderr&#039;\nlogging_collector = on\nlog_directory = &#039;log&#039;\nlog_filename = &#039;postgresql-%Y-%m-%d_%H%M%S.log&#039;\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\nlog_min_duration_statement = 1000  # Log slow queries\nlog_line_prefix = &#039;%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h &#039;\nlog_statement = &#039;ddl&#039;  # Log DDL statements\nlog_lock_waits = on\n\n# SSL configuration\nssl = on\nssl_cert_file = &#039;/var/lib/pgsql/16/data/ssl/server.crt&#039;\nssl_key_file = &#039;/var/lib/pgsql/16/data/ssl/server.key&#039;\nssl_ca_file = &#039;/var/lib/pgsql/16/data/ssl/ca.crt&#039;\nssl_min_protocol_version = &#039;TLSv1.2&#039;\nssl_prefer_server_ciphers = on\n\n# Security\npassword_encryption = scram-sha-256\nkrb_server_keyfile = &#039;&#039;\ndb_user_namespace = off\nrow_security = on\n\n# Autovacuum\nautovacuum = on\nautovacuum_max_workers = 4\nautovacuum_naptime = 1min\nautovacuum_vacuum_threshold = 50\nautovacuum_analyze_threshold = 50\nautovacuum_vacuum_scale_factor = 0.1\nautovacuum_analyze_scale_factor = 0.05\n\n# Background writer\nbgwriter_delay = 200ms\nbgwriter_lru_maxpages = 100\nbgwriter_lru_multiplier = 2.0\nbgwriter_flush_after = 512kB\n\n# Checkpointer\ncheckpoint_flush_after = 256kB\n\n# Statistics\ntrack_activities = on\ntrack_counts = on\ntrack_io_timing = on\ntrack_functions = all\nstats_temp_directory = &#039;pg_stat_tmp&#039;\nEOF\n\n# Configure client authentication\nsudo tee /var/lib/pgsql/16/data/pg_hba.conf &gt; /dev/null &lt;&lt;EOF\n# PostgreSQL Client Authentication Configuration\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# Local connections\nlocal   all             postgres                                peer\nlocal   all             all                                     scram-sha-256\n\n# IPv4 local connections\nhost    all             all             127.0.0.1/32            scram-sha-256\n\n# IPv6 local connections  \nhost    all             all             ::1/128                 scram-sha-256\n\n# Network connections (if needed)\nhostssl myapp           appuser         192.168.1.0/24          scram-sha-256\nhostssl myapp           readonly        192.168.1.0/24          scram-sha-256\n\n# Replication connections\nhostssl replication     replication     192.168.1.0/24          scram-sha-256\n\n# Deny all other connections\nhost    all             all             0.0.0.0/0               reject\nEOF\n\n# Generate SSL certificates\nsudo mkdir -p /var/lib/pgsql/16/data/ssl\ncd /var/lib/pgsql/16/data/ssl\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=PostgreSQL-CA&quot;\n\nsudo openssl genrsa -out server.key 4096\nsudo openssl req -new -key server.key -out server.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=postgres.example.com&quot;\nsudo openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\nsudo chown postgres:postgres /var/lib/pgsql/16/data/ssl/*\nsudo chmod 600 /var/lib/pgsql/16/data/ssl/*.key\nsudo chmod 644 /var/lib/pgsql/16/data/ssl/*.crt\n\nsudo systemctl restart postgresql-16</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-security-hardening\" class=\"mobile-header\">PostgreSQL Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Advanced security configuration\nsudo -u postgres psql &lt;&lt;EOF\n-- Enable row-level security\nALTER SYSTEM SET row_security = on;\n\n-- Configure logging for security\nALTER SYSTEM SET log_statement = &#039;all&#039;;\nALTER SYSTEM SET log_connections = on;\nALTER SYSTEM SET log_disconnections = on;\nALTER SYSTEM SET log_lock_waits = on;\nALTER SYSTEM SET log_temp_files = 0;\n\n-- Password policies\nALTER SYSTEM SET password_encryption = &#039;scram-sha-256&#039;;\n\n-- Create roles with specific privileges\nCREATE ROLE app_read;\nGRANT CONNECT ON DATABASE myapp TO app_read;\nGRANT USAGE ON SCHEMA public TO app_read;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;\n\nCREATE ROLE app_write;\nGRANT app_read TO app_write;\nGRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_write;\n\n-- Create application-specific user\nCREATE USER myapp_user WITH PASSWORD &#039;secure_password_2024&#039;;\nGRANT app_write TO myapp_user;\n\n-- Security functions\nCREATE OR REPLACE FUNCTION audit_trigger_function()\nRETURNS TRIGGER AS \\$\\$\nBEGIN\n    INSERT INTO audit_log (table_name, operation, old_values, new_values, user_name, timestamp)\n    VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW), current_user, now());\n    RETURN COALESCE(NEW, OLD);\nEND;\n\\$\\$ LANGUAGE plpgsql;\n\n-- Reload configuration\nSELECT pg_reload_conf();\nEOF\n\n# Configure connection limits\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n\n# Connection limiting per user/database\n# ALTER USER myapp_user CONNECTION LIMIT 50;\n# ALTER DATABASE myapp CONNECTION LIMIT 100;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"mongodb-installation\" class=\"mobile-header\">MongoDB Installation</h2>\n<h3 id=\"ubuntudebian-mongodb-setup\" class=\"mobile-header\">Ubuntu/Debian MongoDB Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Import MongoDB public GPG key\nwget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -\n\n# Add MongoDB repository\necho &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update and install MongoDB\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Verify installation\nmongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linux-mongodb\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux MongoDB</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add MongoDB repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo &gt; /dev/null &lt;&lt;EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-production-configuration\" class=\"mobile-header\">MongoDB Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure MongoDB configuration\nsudo tee /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n# MongoDB Production Configuration\n\nstorage:\n  dbPath: /var/lib/mongo\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 4  # 50% of RAM\n      journalCompressor: snappy\n      directoryForIndexes: false\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n  quiet: false\n  logRotate: reopen\n  component:\n    accessControl:\n      verbosity: 1\n    command:\n      verbosity: 1\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Change for network access\n  maxIncomingConnections: 1000\n  compression:\n    compressors: snappy,zstd\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb/mongodb.pem\n    CAFile: /etc/ssl/mongodb/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nsecurity:\n  authorization: enabled\n  keyFile: /etc/mongodb/mongodb-keyfile\n  clusterAuthMode: x509\n  javascriptEnabled: false\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 0.02\n\nreplication:\n  replSetName: rs0\n  enableMajorityReadConcern: true\n\nsharding:\n  clusterRole: shardsvr  # or configsvr for config servers\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n  timeZoneInfo: /usr/share/zoneinfo\n\nsetParameter:\n  authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256\n  scramIterationCount: 15000\n  failIndexKeyTooLong: false\n  notablescan: 1  # Disable table scans in production\nEOF\n\n# Create MongoDB keyfile for replica set authentication\nsudo openssl rand -base64 756 | sudo tee /etc/mongodb/mongodb-keyfile\nsudo chmod 600 /etc/mongodb/mongodb-keyfile\nsudo chown mongod:mongod /etc/mongodb/mongodb-keyfile\n\n# Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/ssl/mongodb\ncd /etc/ssl/mongodb\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA&quot;\n\nsudo openssl genrsa -out mongodb.key 4096\nsudo openssl req -new -key mongodb.key -out mongodb.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com&quot;\nsudo openssl x509 -req -days 365 -in mongodb.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out mongodb.crt\n\n# Combine certificate and key for MongoDB\nsudo cat mongodb.crt mongodb.key | sudo tee mongodb.pem\nsudo chmod 600 /etc/ssl/mongodb/*.key /etc/ssl/mongodb/*.pem\nsudo chown mongod:mongod /etc/ssl/mongodb/*\n\nsudo systemctl restart mongod</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-security-setup\" class=\"mobile-header\">MongoDB Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize MongoDB security\nmongosh --ssl --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem --sslCAFile /etc/ssl/mongodb/ca.pem &lt;&lt;EOF\n// Create admin user\nuse admin\ndb.createUser({\n  user: &quot;admin&quot;,\n  pwd: &quot;secure_admin_password_2024&quot;,\n  roles: [\n    { role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;dbAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: &quot;appuser&quot;,\n  pwd: &quot;secure_app_password_2024&quot;,\n  roles: [\n    { role: &quot;readWrite&quot;, db: &quot;myapp&quot; }\n  ]\n})\n\n// Create read-only user\ndb.createUser({\n  user: &quot;readonly&quot;,\n  pwd: &quot;readonly_password_2024&quot;,\n  roles: [\n    { role: &quot;read&quot;, db: &quot;myapp&quot; }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: &quot;backup&quot;,\n  pwd: &quot;backup_password_2024&quot;,\n  roles: [\n    { role: &quot;backup&quot;, db: &quot;admin&quot; },\n    { role: &quot;restore&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Initialize replica set (if using replication)\nrs.initiate({\n  _id: &quot;rs0&quot;,\n  members: [\n    { _id: 0, host: &quot;mongodb1.example.com:27017&quot;, priority: 2 },\n    { _id: 1, host: &quot;mongodb2.example.com:27017&quot;, priority: 1 },\n    { _id: 2, host: &quot;mongodb3.example.com:27017&quot;, priority: 1, arbiterOnly: true }\n  ]\n})\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"redis-installation-and-configuration\" class=\"mobile-header\">Redis Installation and Configuration</h2>\n<h3 id=\"redis-setup-all-distributions\" class=\"mobile-header\">Redis Setup (All Distributions)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt install -y redis-server redis-tools\n\n# RHEL/CentOS\nsudo yum install -y redis\n\n# Fedora\nsudo dnf install -y redis\n\n# Arch Linux\nsudo pacman -S redis\n\n# Configure Redis for production\nsudo tee /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\n# Redis Production Configuration\n\n# Network\nbind 127.0.0.1 ::1  # Change for network access\nport 6379\ntcp-backlog 511\ntimeout 300\ntcp-keepalive 300\n\n# Security\nrequirepass redis_secure_password_2024\nrename-command FLUSHDB &quot;FLUSHDB_9a8b7c6d5e4f3g2h1&quot;\nrename-command FLUSHALL &quot;FLUSHALL_h1g2f3e4d5c6b7a8&quot;\nrename-command DEBUG &quot;DEBUG_8a7b6c5d4e3f2g1h&quot;\nrename-command CONFIG &quot;CONFIG_1h2g3f4e5d6c7b8a&quot;\n\n# SSL/TLS (Redis 6.0+)\ntls-port 6380\nport 0  # Disable non-TLS port\ntls-cert-file /etc/redis/tls/redis.crt\ntls-key-file /etc/redis/tls/redis.key\ntls-ca-cert-file /etc/redis/tls/ca.crt\ntls-protocols &quot;TLSv1.2 TLSv1.3&quot;\ntls-prefer-server-ciphers yes\n\n# Memory management\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 5\n\n# Persistence\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\nrdbchecksum yes\ndbfilename redis.rdb\ndir /var/lib/redis/\n\n# AOF (Append Only File)\nappendonly yes\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\nsyslog-enabled yes\nsyslog-ident redis\n\n# Slow log\nslowlog-log-slower-than 10000\nslowlog-max-len 128\n\n# Latency monitoring\nlatency-monitor-threshold 100\n\n# Client output buffer limits\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Advanced configuration\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\n\n# Lua scripting\nlua-time-limit 5000\nEOF\n\n# Generate Redis TLS certificates\nsudo mkdir -p /etc/redis/tls\ncd /etc/redis/tls\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=Redis-CA&quot;\n\nsudo openssl genrsa -out redis.key 4096\nsudo openssl req -new -key redis.key -out redis.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=redis.example.com&quot;\nsudo openssl x509 -req -days 365 -in redis.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out redis.crt\n\nsudo chown redis:redis /etc/redis/tls/*\nsudo chmod 600 /etc/redis/tls/*.key\nsudo chmod 644 /etc/redis/tls/*.crt\n\nsudo systemctl restart redis-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-monitoring-and-maintenance\" class=\"mobile-header\">Database Monitoring and Maintenance</h2>\n<h3 id=\"comprehensive-database-monitoring\" class=\"mobile-header\">Comprehensive Database Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/database-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# MySQL/MariaDB monitoring\nif command -v mysql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== MySQL/MariaDB Monitoring ===&quot;\n    \n    # Connection count\n    MYSQL_CONNECTIONS=$(mysql -e &quot;SHOW STATUS LIKE &#039;Threads_connected&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    MYSQL_MAX_CONNECTIONS=$(mysql -e &quot;SHOW VARIABLES LIKE &#039;max_connections&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    log_message &quot;MySQL connections: ${MYSQL_CONNECTIONS}/${MYSQL_MAX_CONNECTIONS}&quot;\n    \n    # Query performance\n    SLOW_QUERIES=$(mysql -e &quot;SHOW STATUS LIKE &#039;Slow_queries&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    log_message &quot;MySQL slow queries: ${SLOW_QUERIES}&quot;\n    \n    # Buffer pool hit ratio\n    BUFFER_HIT_RATIO=$(mysql -e &quot;\n      SELECT ROUND((1 - (Innodb_buffer_pool_reads / Innodb_buffer_pool_read_requests)) * 100, 2) as hit_ratio\n      FROM INFORMATION_SCHEMA.GLOBAL_STATUS \n      WHERE VARIABLE_NAME IN (&#039;Innodb_buffer_pool_reads&#039;, &#039;Innodb_buffer_pool_read_requests&#039;);&quot; | tail -1)\n    log_message &quot;InnoDB buffer pool hit ratio: ${BUFFER_HIT_RATIO}%&quot;\nfi\n\n# PostgreSQL monitoring\nif command -v psql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== PostgreSQL Monitoring ===&quot;\n    \n    # Connection count\n    PG_CONNECTIONS=$(sudo -u postgres psql -t -c &quot;SELECT count(*) FROM pg_stat_activity;&quot;)\n    PG_MAX_CONNECTIONS=$(sudo -u postgres psql -t -c &quot;SHOW max_connections;&quot;)\n    log_message &quot;PostgreSQL connections: ${PG_CONNECTIONS}/${PG_MAX_CONNECTIONS}&quot;\n    \n    # Database size\n    PG_DB_SIZE=$(sudo -u postgres psql -t -c &quot;SELECT pg_size_pretty(pg_database_size(&#039;myapp&#039;));&quot;)\n    log_message &quot;PostgreSQL database size: ${PG_DB_SIZE}&quot;\n    \n    # Cache hit ratio\n    PG_CACHE_HIT=$(sudo -u postgres psql -t -c &quot;\n      SELECT round(sum(blks_hit)*100.0/sum(blks_hit+blks_read), 2) \n      FROM pg_stat_database WHERE datname=&#039;myapp&#039;;&quot;)\n    log_message &quot;PostgreSQL cache hit ratio: ${PG_CACHE_HIT}%&quot;\n    \n    # Long running queries\n    LONG_QUERIES=$(sudo -u postgres psql -t -c &quot;\n      SELECT count(*) FROM pg_stat_activity \n      WHERE state = &#039;active&#039; AND now() - query_start &gt; interval &#039;5 minutes&#039;;&quot;)\n    log_message &quot;PostgreSQL long-running queries: ${LONG_QUERIES}&quot;\nfi\n\n# MongoDB monitoring\nif command -v mongosh &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== MongoDB Monitoring ===&quot;\n    \n    # Connection count\n    MONGO_CONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.current&quot;)\n    MONGO_MAX_CONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.available&quot;)\n    log_message &quot;MongoDB connections: ${MONGO_CONNECTIONS}/${MONGO_MAX_CONNECTIONS}&quot;\n    \n    # Database statistics\n    MONGO_DB_SIZE=$(mongosh myapp --quiet --eval &quot;Math.round(db.stats().dataSize / 1024 / 1024) + &#039; MB&#039;&quot;)\n    log_message &quot;MongoDB database size: ${MONGO_DB_SIZE}&quot;\n    \n    # OpLog status (for replica sets)\n    if mongosh admin --quiet --eval &quot;rs.status().ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n        OPLOG_SIZE=$(mongosh local --quiet --eval &quot;Math.round(db.oplog.rs.stats().maxSize / 1024 / 1024) + &#039; MB&#039;&quot;)\n        log_message &quot;MongoDB OpLog size: ${OPLOG_SIZE}&quot;\n    fi\nfi\n\n# Redis monitoring\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== Redis Monitoring ===&quot;\n    \n    # Memory usage\n    REDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\n    REDIS_MAX_MEMORY=$(redis-cli config get maxmemory | tail -1)\n    log_message &quot;Redis memory usage: ${REDIS_MEMORY} / ${REDIS_MAX_MEMORY}&quot;\n    \n    # Connected clients\n    REDIS_CLIENTS=$(redis-cli info clients | grep connected_clients: | cut -d: -f2)\n    log_message &quot;Redis connected clients: ${REDIS_CLIENTS}&quot;\n    \n    # Hit ratio\n    REDIS_HITS=$(redis-cli info stats | grep keyspace_hits: | cut -d: -f2)\n    REDIS_MISSES=$(redis-cli info stats | grep keyspace_misses: | cut -d: -f2)\n    if [ ${REDIS_MISSES} -gt 0 ]; then\n        REDIS_HIT_RATIO=$(echo &quot;scale=2; ${REDIS_HITS} / (${REDIS_HITS} + ${REDIS_MISSES}) * 100&quot; | bc)\n        log_message &quot;Redis hit ratio: ${REDIS_HIT_RATIO}%&quot;\n    fi\nfi\n\nlog_message &quot;Database monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/database-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-backup-automation\" class=\"mobile-header\">Database Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/databases&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{mysql,postgresql,mongodb,redis}\n\n# MySQL/MariaDB backup\nif command -v mysql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up MySQL/MariaDB...&quot;\n    \n    # Full backup with all databases\n    mysqldump --all-databases --single-transaction --routines --triggers --events \\\n      --master-data=2 --flush-logs --delete-master-logs \\\n      &gt; ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Compress backup\n    gzip ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Individual database backup\n    mysqldump --single-transaction --routines --triggers myapp \\\n      &gt; ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\n    gzip ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\nfi\n\n# PostgreSQL backup\nif command -v pg_dump &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up PostgreSQL...&quot;\n    \n    # Full cluster backup\n    sudo -u postgres pg_dumpall &gt; ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\n    \n    # Individual database backup\n    sudo -u postgres pg_dump -Fc myapp &gt; ${BACKUP_DIR}/postgresql/myapp-backup-${DATE}.dump\n    \n    # Compress SQL backup\n    gzip ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\nfi\n\n# MongoDB backup\nif command -v mongodump &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up MongoDB...&quot;\n    \n    # Full backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --out ${BACKUP_DIR}/mongodb/full-backup-${DATE}\n    \n    # Individual database backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --db myapp --out ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\n    \n    # Compress backups\n    tar -czf ${BACKUP_DIR}/mongodb/full-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb full-backup-${DATE}\n    tar -czf ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb myapp-backup-${DATE}\n    \n    # Remove uncompressed directories\n    rm -rf ${BACKUP_DIR}/mongodb/full-backup-${DATE} ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\nfi\n\n# Redis backup\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up Redis...&quot;\n    \n    # Trigger background save\n    redis-cli BGSAVE\n    \n    # Wait for save to complete\n    while [ &quot;$(redis-cli LASTSAVE)&quot; = &quot;$(redis-cli LASTSAVE)&quot; ]; do\n        sleep 1\n    done\n    \n    # Copy RDB file\n    cp /var/lib/redis/dump.rdb ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\n    gzip ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\nfi\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://database-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination database-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://database-backups/\n\n# Keep only last 14 days of backups\nfind ${BACKUP_DIR} -name &quot;*backup*&quot; -type f -mtime +14 -delete\n\n# Verify backup integrity\necho &quot;Verifying backup integrity...&quot;\nfor backup in ${BACKUP_DIR}/*/*.gz; do\n    if gzip -t &quot;$backup&quot; 2&gt;/dev/null; then\n        echo &quot;âœ“ $(basename $backup) - OK&quot;\n    else\n        echo &quot;âœ— $(basename $backup) - CORRUPTED&quot;\n    fi\ndone\n\necho &quot;Database backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-backup.sh\n\n# Schedule daily backups\necho &quot;0 1 * * * root /usr/local/bin/database-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-and-replication\" class=\"mobile-header\">High Availability and Replication</h2>\n<h3 id=\"mysqlmariadb-master-slave-replication\" class=\"mobile-header\">MySQL/MariaDB Master-Slave Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure master server\nsudo tee -a /etc/mysql/mariadb.conf.d/replication.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\n# Replication settings\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = myapp\nsync_binlog = 1\nrelay-log = mysql-relay-bin\nrelay-log-recovery = 1\n\n# GTID replication (recommended)\ngtid_mode = ON\nenforce_gtid_consistency = ON\nlog_slave_updates = ON\nEOF\n\nmysql -u root -p &lt;&lt;EOF\n-- Create replication user\nCREATE USER &#039;replication&#039;@&#039;%&#039; IDENTIFIED BY &#039;replication_password_2024&#039;;\nGRANT REPLICATION SLAVE ON *.* TO &#039;replication&#039;@&#039;%&#039;;\nFLUSH PRIVILEGES;\n\n-- Get master status\nSHOW MASTER STATUS;\nEOF\n\n# Configure slave server (server-id = 2)\n# On slave server:\nmysql -u root -p &lt;&lt;EOF\nCHANGE MASTER TO\n  MASTER_HOST=&#039;mysql-master.example.com&#039;,\n  MASTER_USER=&#039;replication&#039;,\n  MASTER_PASSWORD=&#039;replication_password_2024&#039;,\n  MASTER_AUTO_POSITION=1;\n\nSTART SLAVE;\nSHOW SLAVE STATUS\\G\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-streaming-replication\" class=\"mobile-header\">PostgreSQL Streaming Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure master server\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n# Replication settings\nwal_level = replica\nmax_wal_senders = 10\nmax_replication_slots = 10\nwal_keep_size = 1GB\nhot_standby = on\narchive_mode = on\narchive_command = &#039;cp %p /var/lib/pgsql/16/archive/%f&#039;\nEOF\n\n# Configure replication access\nsudo tee -a /var/lib/pgsql/16/data/pg_hba.conf &gt; /dev/null &lt;&lt;EOF\n# Replication connections\nhostssl replication replication 192.168.1.0/24 scram-sha-256\nEOF\n\n# Create replication user\nsudo -u postgres psql &lt;&lt;EOF\nCREATE USER replication WITH REPLICATION ENCRYPTED PASSWORD &#039;replication_password_2024&#039;;\nEOF\n\n# Create archive directory\nsudo mkdir -p /var/lib/pgsql/16/archive\nsudo chown postgres:postgres /var/lib/pgsql/16/archive\n\nsudo systemctl restart postgresql-16\n\n# Setup slave server\n# On slave server, create base backup:\nsudo -u postgres pg_basebackup -h master.example.com -D /var/lib/pgsql/16/data -U replication -W -v -P -R</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-replica-set-configuration\" class=\"mobile-header\">MongoDB Replica Set Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize replica set (run on primary node)\nmongosh admin &lt;&lt;EOF\nrs.initiate({\n  _id: &quot;rs0&quot;,\n  version: 1,\n  protocolVersion: 1,\n  members: [\n    { \n      _id: 0, \n      host: &quot;mongodb1.example.com:27017&quot;,\n      priority: 2,\n      votes: 1\n    },\n    { \n      _id: 1, \n      host: &quot;mongodb2.example.com:27017&quot;,\n      priority: 1,\n      votes: 1\n    },\n    { \n      _id: 2, \n      host: &quot;mongodb3.example.com:27017&quot;,\n      priority: 1,\n      votes: 1,\n      arbiterOnly: true\n    }\n  ],\n  settings: {\n    chainingAllowed: false,\n    heartbeatIntervalMillis: 2000,\n    heartbeatTimeoutSecs: 10,\n    electionTimeoutMillis: 10000,\n    catchUpTimeoutMillis: -1,\n    getLastErrorModes: {\n      majority: { \n        tags: { \n          dc: 1 \n        } \n      }\n    }\n  }\n})\n\n// Check replica set status\nrs.status()\n\n// Configure read preferences\nrs.conf()\nEOF\n\n# Configure MongoDB sharding (for large deployments)\n# Config server initialization:\nmongosh admin &lt;&lt;EOF\nrs.initiate({\n  _id: &quot;configReplSet&quot;,\n  configsvr: true,\n  members: [\n    { _id: 0, host: &quot;config1.example.com:27019&quot; },\n    { _id: 1, host: &quot;config2.example.com:27019&quot; },\n    { _id: 2, host: &quot;config3.example.com:27019&quot; }\n  ]\n})\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-sentinel-high-availability\" class=\"mobile-header\">Redis Sentinel High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Redis Sentinel for HA\nsudo tee /etc/redis/sentinel.conf &gt; /dev/null &lt;&lt;EOF\n# Redis Sentinel Configuration\nport 26379\nsentinel deny-scripts-reconfig yes\n\n# Monitor Redis master\nsentinel monitor mymaster redis-master.example.com 6379 2\nsentinel auth-pass mymaster redis_secure_password_2024\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n\n# Notification scripts\nsentinel notification-script mymaster /etc/redis/notify.sh\nsentinel client-reconfig-script mymaster /etc/redis/reconfig.sh\n\n# Security\nrequirepass sentinel_password_2024\nEOF\n\n# Create notification script\nsudo tee /etc/redis/notify.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Redis failover event: $*&quot; &gt;&gt; /var/log/redis/sentinel.log\n# Add alerting logic here (email, Slack, etc.)\nEOF\n\n# Create reconfiguration script\nsudo tee /etc/redis/reconfig.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Redis master changed to: $6:$7&quot; &gt;&gt; /var/log/redis/sentinel.log\n# Update application configuration, restart services, etc.\nEOF\n\nsudo chmod +x /etc/redis/{notify,reconfig}.sh\nsudo systemctl enable --now redis-sentinel</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"database-performance-tuning\" class=\"mobile-header\">Database Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-performance-tune.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\ntune_mysql() {\n    echo &quot;Tuning MySQL/MariaDB performance...&quot;\n    \n    # Calculate optimal buffer pool size (70% of RAM)\n    TOTAL_RAM=$(free -b | awk &#039;NR==2{print $2}&#039;)\n    BUFFER_POOL_SIZE=$((TOTAL_RAM * 70 / 100))\n    \n    mysql -u root -p &lt;&lt;EOF\n-- Performance tuning\nSET GLOBAL innodb_buffer_pool_size = ${BUFFER_POOL_SIZE};\nSET GLOBAL query_cache_size = $((TOTAL_RAM * 5 / 100));\nSET GLOBAL thread_cache_size = 100;\nSET GLOBAL table_open_cache = 4096;\nSET GLOBAL innodb_io_capacity = 2000;\n\n-- Show current configuration\nSHOW VARIABLES LIKE &#039;innodb_buffer_pool_size&#039;;\nSHOW VARIABLES LIKE &#039;query_cache_size&#039;;\nEOF\n}\n\ntune_postgresql() {\n    echo &quot;Tuning PostgreSQL performance...&quot;\n    \n    # Use pg_tune recommendations\n    TOTAL_RAM_MB=$(($(free -m | awk &#039;NR==2{print $2}&#039;)))\n    SHARED_BUFFERS=$((TOTAL_RAM_MB / 4))\n    EFFECTIVE_CACHE=$((TOTAL_RAM_MB * 3 / 4))\n    \n    sudo -u postgres psql &lt;&lt;EOF\n-- Performance tuning\nALTER SYSTEM SET shared_buffers = &#039;${SHARED_BUFFERS}MB&#039;;\nALTER SYSTEM SET effective_cache_size = &#039;${EFFECTIVE_CACHE}MB&#039;;\nALTER SYSTEM SET work_mem = &#039;16MB&#039;;\nALTER SYSTEM SET maintenance_work_mem = &#039;256MB&#039;;\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\n\n-- Reload configuration\nSELECT pg_reload_conf();\n\n-- Show current settings\nSHOW shared_buffers;\nSHOW effective_cache_size;\nEOF\n}\n\ntune_mongodb() {\n    echo &quot;Tuning MongoDB performance...&quot;\n    \n    # Calculate WiredTiger cache size (50% of RAM)\n    TOTAL_RAM_GB=$(($(free -g | awk &#039;NR==2{print $2}&#039;)))\n    CACHE_SIZE_GB=$((TOTAL_RAM_GB / 2))\n    \n    mongosh admin &lt;&lt;EOF\n// Performance tuning\ndb.adminCommand({\n  &quot;setParameter&quot;: 1,\n  &quot;wiredTigerEngineRuntimeConfig&quot;: &quot;cache_size=${CACHE_SIZE_GB}GB&quot;\n})\n\n// Show current cache usage\ndb.serverStatus().wiredTiger.cache\nEOF\n}\n\ntune_redis() {\n    echo &quot;Tuning Redis performance...&quot;\n    \n    # Calculate maxmemory (50% of RAM for dedicated Redis server)\n    TOTAL_RAM_BYTES=$(free -b | awk &#039;NR==2{print $2}&#039;)\n    MAX_MEMORY_BYTES=$((TOTAL_RAM_BYTES / 2))\n    \n    redis-cli CONFIG SET maxmemory ${MAX_MEMORY_BYTES}\n    redis-cli CONFIG SET maxmemory-policy allkeys-lru\n    redis-cli CONFIG REWRITE\n    \n    echo &quot;Redis maxmemory set to $(redis-cli CONFIG GET maxmemory | tail -1) bytes&quot;\n}\n\n# Check which databases are running and tune them\nif systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    tune_mysql\nfi\n\nif systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    tune_postgresql\nfi\n\nif systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    tune_mongodb\nfi\n\nif systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    tune_redis\nfi\n\necho &quot;Database performance tuning completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-performance-tune.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-testing\" class=\"mobile-header\">Verification and Testing</h2>\n<h3 id=\"database-health-checks\" class=\"mobile-header\">Database Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/database-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# MySQL/MariaDB health check\nif command -v mysql &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;âœ“ MariaDB service is running&quot;\n        \n        # Test connectivity\n        if mysql -e &quot;SELECT 1;&quot; &gt;/dev/null 2&gt;&amp;1; then\n            log_message &quot;âœ“ MariaDB connectivity test passed&quot;\n        else\n            log_message &quot;âœ— MariaDB connectivity test failed&quot;\n        fi\n        \n        # Check for errors in log\n        ERROR_COUNT=$(tail -100 /var/log/mysql/error.log | grep -i error | wc -l)\n        log_message &quot;â„¹ MariaDB errors in last 100 log lines: ${ERROR_COUNT}&quot;\n    else\n        log_message &quot;âœ— MariaDB service is not running&quot;\n    fi\nfi\n\n# PostgreSQL health check\nif command -v psql &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;âœ“ PostgreSQL service is running&quot;\n        \n        # Test connectivity\n        if sudo -u postgres psql -c &quot;SELECT version();&quot; &gt;/dev/null 2&gt;&amp;1; then\n            log_message &quot;âœ“ PostgreSQL connectivity test passed&quot;\n        else\n            log_message &quot;âœ— PostgreSQL connectivity test failed&quot;\n        fi\n        \n        # Check replication lag (if slave)\n        if sudo -u postgres psql -t -c &quot;SELECT pg_is_in_recovery();&quot; | grep -q &quot;t&quot;; then\n            LAG=$(sudo -u postgres psql -t -c &quot;SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::int;&quot;)\n            log_message &quot;â„¹ PostgreSQL replication lag: ${LAG} seconds&quot;\n        fi\n    else\n        log_message &quot;âœ— PostgreSQL service is not running&quot;\n    fi\nfi\n\n# MongoDB health check\nif command -v mongosh &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;âœ“ MongoDB service is running&quot;\n        \n        # Test connectivity\n        if mongosh --quiet --eval &quot;db.adminCommand(&#039;ping&#039;).ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n            log_message &quot;âœ“ MongoDB connectivity test passed&quot;\n        else\n            log_message &quot;âœ— MongoDB connectivity test failed&quot;\n        fi\n        \n        # Check replica set status\n        if mongosh admin --quiet --eval &quot;rs.status().ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n            PRIMARY_COUNT=$(mongosh admin --quiet --eval &quot;rs.status().members.filter(m =&gt; m.stateStr === &#039;PRIMARY&#039;).length&quot;)\n            log_message &quot;â„¹ MongoDB replica set has ${PRIMARY_COUNT} primary node(s)&quot;\n        fi\n    else\n        log_message &quot;âœ— MongoDB service is not running&quot;\n    fi\nfi\n\n# Redis health check\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;âœ“ Redis service is running&quot;\n        \n        # Test connectivity\n        if redis-cli ping | grep -q &quot;PONG&quot;; then\n            log_message &quot;âœ“ Redis connectivity test passed&quot;\n        else\n            log_message &quot;âœ— Redis connectivity test failed&quot;\n        fi\n        \n        # Check memory usage\n        REDIS_MEMORY_PERCENT=$(redis-cli info memory | grep used_memory_rss_human: | cut -d: -f2)\n        log_message &quot;â„¹ Redis memory usage: ${REDIS_MEMORY_PERCENT}&quot;\n    else\n        log_message &quot;âœ— Redis service is not running&quot;\n    fi\nfi\n\nlog_message &quot;Database health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-health-check.sh\n\n# Schedule health checks every 10 minutes\necho &quot;*/10 * * * * root /usr/local/bin/database-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-database-issues\" class=\"mobile-header\">Common Database Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB troubleshooting\n# Check service status\nsudo systemctl status mariadb\n\n# Check error logs\nsudo tail -f /var/log/mysql/error.log\n\n# Test connectivity\nmysql -u root -p -e &quot;SELECT version();&quot;\n\n# Check process list\nmysql -u root -p -e &quot;SHOW FULL PROCESSLIST;&quot;\n\n# Check locks\nmysql -u root -p -e &quot;SHOW ENGINE INNODB STATUS\\G&quot; | grep -A 20 &quot;LATEST DETECTED DEADLOCK&quot;\n\n# Repair tables\nmysqlcheck --all-databases --repair -u root -p\n\n# PostgreSQL troubleshooting\n# Check service status\nsudo systemctl status postgresql-16\n\n# Check logs\nsudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log\n\n# Test connectivity\nsudo -u postgres psql -c &quot;SELECT version();&quot;\n\n# Check active connections\nsudo -u postgres psql -c &quot;SELECT count(*) FROM pg_stat_activity WHERE state = &#039;active&#039;;&quot;\n\n# Check locks\nsudo -u postgres psql -c &quot;SELECT * FROM pg_locks WHERE NOT granted;&quot;\n\n# Vacuum and analyze\nsudo -u postgres vacuumdb --all --analyze --verbose\n\n# MongoDB troubleshooting\n# Check service status\nsudo systemctl status mongod\n\n# Check logs\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Test connectivity\nmongosh --eval &quot;db.adminCommand(&#039;ping&#039;)&quot;\n\n# Check replica set status\nmongosh admin --eval &quot;rs.status()&quot;\n\n# Check database profiler\nmongosh myapp --eval &quot;db.getProfilingStatus()&quot;\n\n# Repair database\nmongosh myapp --eval &quot;db.repairDatabase()&quot;\n\n# Redis troubleshooting\n# Check service status\nsudo systemctl status redis\n\n# Check logs\nsudo tail -f /var/log/redis/redis-server.log\n\n# Test connectivity\nredis-cli ping\n\n# Check memory stats\nredis-cli info memory\n\n# Check slow log\nredis-cli slowlog get 10\n\n# Monitor commands\nredis-cli monitor</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-database-debugging\" class=\"mobile-header\">Advanced Database Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB debugging\n# Enable general log\nmysql -u root -p -e &quot;SET GLOBAL general_log = &#039;ON&#039;;&quot;\nmysql -u root -p -e &quot;SET GLOBAL log_output = &#039;FILE&#039;;&quot;\n\n# Performance schema\nmysql -u root -p -e &quot;SELECT * FROM performance_schema.file_summary_by_event_name WHERE event_name LIKE &#039;wait/io/file%&#039; ORDER BY sum_timer_wait DESC LIMIT 10;&quot;\n\n# PostgreSQL debugging\n# Enable query logging\nsudo -u postgres psql -c &quot;ALTER SYSTEM SET log_statement = &#039;all&#039;;&quot;\nsudo -u postgres psql -c &quot;SELECT pg_reload_conf();&quot;\n\n# Check query performance\nsudo -u postgres psql -c &quot;SELECT query, calls, total_time, mean_time FROM pg_stat_statements ORDER BY total_time DESC LIMIT 10;&quot;\n\n# MongoDB debugging\n# Enable profiler\nmongosh myapp --eval &quot;db.setProfilingLevel(2, { slowms: 100 })&quot;\n\n# Check slow operations\nmongosh myapp --eval &quot;db.system.profile.find().sort({ts:-1}).limit(5).pretty()&quot;\n\n# Redis debugging\n# Enable slow log\nredis-cli CONFIG SET slowlog-log-slower-than 10000\n\n# Check slow operations\nredis-cli SLOWLOG GET 10\n\n# Monitor memory usage\nredis-cli --latency-history -i 1</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://dev.mysql.com/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MySQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresql.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PostgreSQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/documentation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Database Security Cheat Sheet</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"25 min","wordCount":4871,"lastBuilt":"2025-09-16T03:17:55.828Z","metadataVersion":"2.0"},{"name":"davinci_resolve","displayName":"davinci-resolve Installation Guide","slug":"davinci_resolve","description":"davinci-resolve is a free and open-source video post-production. DaVinci Resolve provides professional video editing","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection","multimedia"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/davinci_resolve","documentationUrl":"https://howtomgr.github.io/miscellaneous/davinci_resolve","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/davinci_resolve","updatedAt":"2025-09-16T03:05:39Z","createdAt":"2025-09-16T02:30:36Z","readmeRaw":"# davinci-resolve Installation Guide\n\ndavinci-resolve is a free and open-source video post-production. DaVinci Resolve provides professional video editing\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 8+ cores\n  - RAM: 16GB minimum\n  - Storage: 100GB for cache\n  - Network: GUI application\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default davinci-resolve port)\n  - PostgreSQL DB\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install davinci-resolve\nsudo dnf install -y davinci_resolve\n\n# Enable and start service\nsudo systemctl enable --now davinci-resolve\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndavinci-resolve --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install davinci-resolve\nsudo apt install -y davinci_resolve\n\n# Enable and start service\nsudo systemctl enable --now davinci-resolve\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\ndavinci-resolve --version\n```\n\n### Arch Linux\n\n```bash\n# Install davinci-resolve\nsudo pacman -S davinci_resolve\n\n# Enable and start service\nsudo systemctl enable --now davinci-resolve\n\n# Verify installation\ndavinci-resolve --version\n```\n\n### Alpine Linux\n\n```bash\n# Install davinci-resolve\napk add --no-cache davinci_resolve\n\n# Enable and start service\nrc-update add davinci-resolve default\nrc-service davinci-resolve start\n\n# Verify installation\ndavinci-resolve --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install davinci-resolve\nsudo zypper install -y davinci_resolve\n\n# Enable and start service\nsudo systemctl enable --now davinci-resolve\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndavinci-resolve --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install davinci_resolve\n\n# Start service\nbrew services start davinci_resolve\n\n# Verify installation\ndavinci-resolve --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install davinci_resolve\n\n# Enable in rc.conf\necho 'davinci-resolve_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice davinci-resolve start\n\n# Verify installation\ndavinci-resolve --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install davinci_resolve\n\n# Or using Scoop\nscoop install davinci_resolve\n\n# Verify installation\ndavinci-resolve --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/davinci_resolve\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndavinci-resolve --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable davinci-resolve\n\n# Start service\nsudo systemctl start davinci-resolve\n\n# Stop service\nsudo systemctl stop davinci-resolve\n\n# Restart service\nsudo systemctl restart davinci-resolve\n\n# Check status\nsudo systemctl status davinci-resolve\n\n# View logs\nsudo journalctl -u davinci-resolve -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add davinci-resolve default\n\n# Start service\nrc-service davinci-resolve start\n\n# Stop service\nrc-service davinci-resolve stop\n\n# Restart service\nrc-service davinci-resolve restart\n\n# Check status\nrc-service davinci-resolve status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'davinci-resolve_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice davinci-resolve start\n\n# Stop service\nservice davinci-resolve stop\n\n# Restart service\nservice davinci-resolve restart\n\n# Check status\nservice davinci-resolve status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start davinci_resolve\nbrew services stop davinci_resolve\nbrew services restart davinci_resolve\n\n# Check status\nbrew services list | grep davinci_resolve\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start davinci-resolve\n\n# Stop service\nnet stop davinci-resolve\n\n# Using PowerShell\nStart-Service davinci-resolve\nStop-Service davinci-resolve\nRestart-Service davinci-resolve\n\n# Check status\nGet-Service davinci-resolve\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream davinci_resolve_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name davinci_resolve.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name davinci_resolve.example.com;\n\n    ssl_certificate /etc/ssl/certs/davinci_resolve.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/davinci_resolve.example.com.key;\n\n    location / {\n        proxy_pass http://davinci_resolve_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName davinci_resolve.example.com\n    Redirect permanent / https://davinci_resolve.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName davinci_resolve.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/davinci_resolve.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/davinci_resolve.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend davinci_resolve_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/davinci_resolve.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend davinci_resolve_backend\n\nbackend davinci_resolve_backend\n    balance roundrobin\n    server davinci_resolve1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R davinci_resolve:davinci_resolve /etc/davinci_resolve\nsudo chmod 750 /etc/davinci_resolve\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status davinci-resolve\n\n# View logs\nsudo journalctl -u davinci-resolve -f\n\n# Monitor resource usage\ntop -p $(pgrep davinci_resolve)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/davinci_resolve\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/davinci_resolve-backup-$DATE.tar.gz\" /etc/davinci_resolve /var/lib/davinci_resolve\n\necho \"Backup completed: $BACKUP_DIR/davinci_resolve-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop davinci-resolve\n\n# Restore from backup\ntar -xzf /backup/davinci_resolve/davinci_resolve-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start davinci-resolve\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u davinci-resolve -n 100\nsudo tail -f /var/log/davinci_resolve/davinci_resolve.log\n\n# Check configuration\ndavinci-resolve --version\n\n# Check permissions\nls -la /etc/davinci_resolve\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep davinci_resolve)\n\n# Check disk I/O\niotop -p $(pgrep davinci_resolve)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  davinci_resolve:\n    image: davinci_resolve:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/davinci_resolve\n      - ./data:/var/lib/davinci_resolve\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update davinci_resolve\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade davinci_resolve\n\n# Arch Linux\nsudo pacman -Syu davinci_resolve\n\n# Alpine Linux\napk update && apk upgrade davinci_resolve\n\n# openSUSE\nsudo zypper update davinci_resolve\n\n# FreeBSD\npkg update && pkg upgrade davinci_resolve\n\n# Always backup before updates\ntar -czf /backup/davinci_resolve-pre-update-$(date +%Y%m%d).tar.gz /etc/davinci_resolve\n\n# Restart after updates\nsudo systemctl restart davinci-resolve\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/davinci_resolve\n\n# Clean old logs\nfind /var/log/davinci_resolve -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/davinci_resolve\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.davinci_resolve.org/\n- GitHub Repository: https://github.com/davinci_resolve/davinci_resolve\n- Community Forum: https://forum.davinci_resolve.org/\n- Best Practices Guide: https://docs.davinci_resolve.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"davinci-resolve-installation-guide\" class=\"mobile-header\">davinci-resolve Installation Guide</h1>\n<p class=\"mobile-paragraph\">davinci-resolve is a free and open-source video post-production. DaVinci Resolve provides professional video editing</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 8+ cores</li>\n<li class=\"mobile-list-item\">RAM: 16GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100GB for cache</li>\n<li class=\"mobile-list-item\">Network: GUI application</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default davinci-resolve port)</li>\n<li class=\"mobile-list-item\">PostgreSQL DB</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install davinci-resolve\nsudo dnf install -y davinci_resolve\n\n# Enable and start service\nsudo systemctl enable --now davinci-resolve\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install davinci-resolve\nsudo apt install -y davinci_resolve\n\n# Enable and start service\nsudo systemctl enable --now davinci-resolve\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install davinci-resolve\nsudo pacman -S davinci_resolve\n\n# Enable and start service\nsudo systemctl enable --now davinci-resolve\n\n# Verify installation\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install davinci-resolve\napk add --no-cache davinci_resolve\n\n# Enable and start service\nrc-update add davinci-resolve default\nrc-service davinci-resolve start\n\n# Verify installation\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install davinci-resolve\nsudo zypper install -y davinci_resolve\n\n# Enable and start service\nsudo systemctl enable --now davinci-resolve\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install davinci_resolve\n\n# Start service\nbrew services start davinci_resolve\n\n# Verify installation\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install davinci_resolve\n\n# Enable in rc.conf\necho &#039;davinci-resolve_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice davinci-resolve start\n\n# Verify installation\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install davinci_resolve\n\n# Or using Scoop\nscoop install davinci_resolve\n\n# Verify installation\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/davinci_resolve\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndavinci-resolve --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable davinci-resolve\n\n# Start service\nsudo systemctl start davinci-resolve\n\n# Stop service\nsudo systemctl stop davinci-resolve\n\n# Restart service\nsudo systemctl restart davinci-resolve\n\n# Check status\nsudo systemctl status davinci-resolve\n\n# View logs\nsudo journalctl -u davinci-resolve -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add davinci-resolve default\n\n# Start service\nrc-service davinci-resolve start\n\n# Stop service\nrc-service davinci-resolve stop\n\n# Restart service\nrc-service davinci-resolve restart\n\n# Check status\nrc-service davinci-resolve status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;davinci-resolve_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice davinci-resolve start\n\n# Stop service\nservice davinci-resolve stop\n\n# Restart service\nservice davinci-resolve restart\n\n# Check status\nservice davinci-resolve status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start davinci_resolve\nbrew services stop davinci_resolve\nbrew services restart davinci_resolve\n\n# Check status\nbrew services list | grep davinci_resolve</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start davinci-resolve\n\n# Stop service\nnet stop davinci-resolve\n\n# Using PowerShell\nStart-Service davinci-resolve\nStop-Service davinci-resolve\nRestart-Service davinci-resolve\n\n# Check status\nGet-Service davinci-resolve</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream davinci_resolve_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name davinci_resolve.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name davinci_resolve.example.com;\n\n    ssl_certificate /etc/ssl/certs/davinci_resolve.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/davinci_resolve.example.com.key;\n\n    location / {\n        proxy_pass http://davinci_resolve_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName davinci_resolve.example.com\n    Redirect permanent / https://davinci_resolve.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName davinci_resolve.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/davinci_resolve.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/davinci_resolve.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend davinci_resolve_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/davinci_resolve.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend davinci_resolve_backend\n\nbackend davinci_resolve_backend\n    balance roundrobin\n    server davinci_resolve1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R davinci_resolve:davinci_resolve /etc/davinci_resolve\nsudo chmod 750 /etc/davinci_resolve\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status davinci-resolve\n\n# View logs\nsudo journalctl -u davinci-resolve -f\n\n# Monitor resource usage\ntop -p $(pgrep davinci_resolve)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/davinci_resolve&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/davinci_resolve-backup-$DATE.tar.gz&quot; /etc/davinci_resolve /var/lib/davinci_resolve\n\necho &quot;Backup completed: $BACKUP_DIR/davinci_resolve-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop davinci-resolve\n\n# Restore from backup\ntar -xzf /backup/davinci_resolve/davinci_resolve-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start davinci-resolve</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u davinci-resolve -n 100\nsudo tail -f /var/log/davinci_resolve/davinci_resolve.log\n\n# Check configuration\ndavinci-resolve --version\n\n# Check permissions\nls -la /etc/davinci_resolve</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep davinci_resolve)\n\n# Check disk I/O\niotop -p $(pgrep davinci_resolve)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  davinci_resolve:\n    image: davinci_resolve:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/davinci_resolve\n      - ./data:/var/lib/davinci_resolve\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update davinci_resolve\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade davinci_resolve\n\n# Arch Linux\nsudo pacman -Syu davinci_resolve\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade davinci_resolve\n\n# openSUSE\nsudo zypper update davinci_resolve\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade davinci_resolve\n\n# Always backup before updates\ntar -czf /backup/davinci_resolve-pre-update-$(date +%Y%m%d).tar.gz /etc/davinci_resolve\n\n# Restart after updates\nsudo systemctl restart davinci-resolve</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/davinci_resolve\n\n# Clean old logs\nfind /var/log/davinci_resolve -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/davinci_resolve</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.davinci_resolve.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/davinci_resolve/davinci_resolve</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.davinci_resolve.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.davinci_resolve.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1152,"lastBuilt":"2025-09-16T03:17:55.400Z","metadataVersion":"2.0"},{"name":"deluge","displayName":"deluge Installation Guide","slug":"deluge","description":"deluge is a free and open-source BitTorrent client. Deluge provides a lightweight, cross-platform BitTorrent client with plugin support","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8112],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/deluge","documentationUrl":"https://howtomgr.github.io/miscellaneous/deluge","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/deluge","updatedAt":"2025-09-16T03:05:46Z","createdAt":"2025-09-16T02:30:46Z","readmeRaw":"# deluge Installation Guide\n\ndeluge is a free and open-source BitTorrent client. Deluge provides a lightweight, cross-platform BitTorrent client with plugin support\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for downloads\n  - Network: BitTorrent protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8112 (default deluge port)\n  - Daemon on 58846\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install deluge\nsudo dnf install -y deluge\n\n# Enable and start service\nsudo systemctl enable --now deluge\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8112/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndeluge --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install deluge\nsudo apt install -y deluge\n\n# Enable and start service\nsudo systemctl enable --now deluge\n\n# Configure firewall\nsudo ufw allow 8112\n\n# Verify installation\ndeluge --version\n```\n\n### Arch Linux\n\n```bash\n# Install deluge\nsudo pacman -S deluge\n\n# Enable and start service\nsudo systemctl enable --now deluge\n\n# Verify installation\ndeluge --version\n```\n\n### Alpine Linux\n\n```bash\n# Install deluge\napk add --no-cache deluge\n\n# Enable and start service\nrc-update add deluge default\nrc-service deluge start\n\n# Verify installation\ndeluge --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install deluge\nsudo zypper install -y deluge\n\n# Enable and start service\nsudo systemctl enable --now deluge\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8112/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndeluge --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install deluge\n\n# Start service\nbrew services start deluge\n\n# Verify installation\ndeluge --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install deluge\n\n# Enable in rc.conf\necho 'deluge_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice deluge start\n\n# Verify installation\ndeluge --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install deluge\n\n# Or using Scoop\nscoop install deluge\n\n# Verify installation\ndeluge --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/deluge\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndeluge --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable deluge\n\n# Start service\nsudo systemctl start deluge\n\n# Stop service\nsudo systemctl stop deluge\n\n# Restart service\nsudo systemctl restart deluge\n\n# Check status\nsudo systemctl status deluge\n\n# View logs\nsudo journalctl -u deluge -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add deluge default\n\n# Start service\nrc-service deluge start\n\n# Stop service\nrc-service deluge stop\n\n# Restart service\nrc-service deluge restart\n\n# Check status\nrc-service deluge status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'deluge_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice deluge start\n\n# Stop service\nservice deluge stop\n\n# Restart service\nservice deluge restart\n\n# Check status\nservice deluge status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start deluge\nbrew services stop deluge\nbrew services restart deluge\n\n# Check status\nbrew services list | grep deluge\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start deluge\n\n# Stop service\nnet stop deluge\n\n# Using PowerShell\nStart-Service deluge\nStop-Service deluge\nRestart-Service deluge\n\n# Check status\nGet-Service deluge\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream deluge_backend {\n    server 127.0.0.1:8112;\n}\n\nserver {\n    listen 80;\n    server_name deluge.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name deluge.example.com;\n\n    ssl_certificate /etc/ssl/certs/deluge.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/deluge.example.com.key;\n\n    location / {\n        proxy_pass http://deluge_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName deluge.example.com\n    Redirect permanent / https://deluge.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName deluge.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/deluge.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/deluge.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8112/\n    ProxyPassReverse / http://127.0.0.1:8112/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend deluge_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/deluge.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend deluge_backend\n\nbackend deluge_backend\n    balance roundrobin\n    server deluge1 127.0.0.1:8112 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R deluge:deluge /etc/deluge\nsudo chmod 750 /etc/deluge\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8112/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status deluge\n\n# View logs\nsudo journalctl -u deluge -f\n\n# Monitor resource usage\ntop -p $(pgrep deluge)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/deluge\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/deluge-backup-$DATE.tar.gz\" /etc/deluge /var/lib/deluge\n\necho \"Backup completed: $BACKUP_DIR/deluge-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop deluge\n\n# Restore from backup\ntar -xzf /backup/deluge/deluge-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start deluge\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u deluge -n 100\nsudo tail -f /var/log/deluge/deluge.log\n\n# Check configuration\ndeluge --version\n\n# Check permissions\nls -la /etc/deluge\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8112\n\n# Test connectivity\ntelnet localhost 8112\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep deluge)\n\n# Check disk I/O\niotop -p $(pgrep deluge)\n\n# Check connections\nss -an | grep 8112\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  deluge:\n    image: deluge:latest\n    ports:\n      - \"8112:8112\"\n    volumes:\n      - ./config:/etc/deluge\n      - ./data:/var/lib/deluge\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update deluge\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade deluge\n\n# Arch Linux\nsudo pacman -Syu deluge\n\n# Alpine Linux\napk update && apk upgrade deluge\n\n# openSUSE\nsudo zypper update deluge\n\n# FreeBSD\npkg update && pkg upgrade deluge\n\n# Always backup before updates\ntar -czf /backup/deluge-pre-update-$(date +%Y%m%d).tar.gz /etc/deluge\n\n# Restart after updates\nsudo systemctl restart deluge\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/deluge\n\n# Clean old logs\nfind /var/log/deluge -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/deluge\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.deluge.org/\n- GitHub Repository: https://github.com/deluge/deluge\n- Community Forum: https://forum.deluge.org/\n- Best Practices Guide: https://docs.deluge.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"deluge-installation-guide\" class=\"mobile-header\">deluge Installation Guide</h1>\n<p class=\"mobile-paragraph\">deluge is a free and open-source BitTorrent client. Deluge provides a lightweight, cross-platform BitTorrent client with plugin support</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for downloads</li>\n<li class=\"mobile-list-item\">Network: BitTorrent protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8112 (default deluge port)</li>\n<li class=\"mobile-list-item\">Daemon on 58846</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install deluge\nsudo dnf install -y deluge\n\n# Enable and start service\nsudo systemctl enable --now deluge\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8112/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install deluge\nsudo apt install -y deluge\n\n# Enable and start service\nsudo systemctl enable --now deluge\n\n# Configure firewall\nsudo ufw allow 8112\n\n# Verify installation\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install deluge\nsudo pacman -S deluge\n\n# Enable and start service\nsudo systemctl enable --now deluge\n\n# Verify installation\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install deluge\napk add --no-cache deluge\n\n# Enable and start service\nrc-update add deluge default\nrc-service deluge start\n\n# Verify installation\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install deluge\nsudo zypper install -y deluge\n\n# Enable and start service\nsudo systemctl enable --now deluge\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8112/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install deluge\n\n# Start service\nbrew services start deluge\n\n# Verify installation\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install deluge\n\n# Enable in rc.conf\necho &#039;deluge_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice deluge start\n\n# Verify installation\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install deluge\n\n# Or using Scoop\nscoop install deluge\n\n# Verify installation\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/deluge\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndeluge --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable deluge\n\n# Start service\nsudo systemctl start deluge\n\n# Stop service\nsudo systemctl stop deluge\n\n# Restart service\nsudo systemctl restart deluge\n\n# Check status\nsudo systemctl status deluge\n\n# View logs\nsudo journalctl -u deluge -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add deluge default\n\n# Start service\nrc-service deluge start\n\n# Stop service\nrc-service deluge stop\n\n# Restart service\nrc-service deluge restart\n\n# Check status\nrc-service deluge status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;deluge_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice deluge start\n\n# Stop service\nservice deluge stop\n\n# Restart service\nservice deluge restart\n\n# Check status\nservice deluge status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start deluge\nbrew services stop deluge\nbrew services restart deluge\n\n# Check status\nbrew services list | grep deluge</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start deluge\n\n# Stop service\nnet stop deluge\n\n# Using PowerShell\nStart-Service deluge\nStop-Service deluge\nRestart-Service deluge\n\n# Check status\nGet-Service deluge</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream deluge_backend {\n    server 127.0.0.1:8112;\n}\n\nserver {\n    listen 80;\n    server_name deluge.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name deluge.example.com;\n\n    ssl_certificate /etc/ssl/certs/deluge.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/deluge.example.com.key;\n\n    location / {\n        proxy_pass http://deluge_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName deluge.example.com\n    Redirect permanent / https://deluge.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName deluge.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/deluge.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/deluge.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8112/\n    ProxyPassReverse / http://127.0.0.1:8112/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend deluge_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/deluge.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend deluge_backend\n\nbackend deluge_backend\n    balance roundrobin\n    server deluge1 127.0.0.1:8112 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R deluge:deluge /etc/deluge\nsudo chmod 750 /etc/deluge\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8112/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status deluge\n\n# View logs\nsudo journalctl -u deluge -f\n\n# Monitor resource usage\ntop -p $(pgrep deluge)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/deluge&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/deluge-backup-$DATE.tar.gz&quot; /etc/deluge /var/lib/deluge\n\necho &quot;Backup completed: $BACKUP_DIR/deluge-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop deluge\n\n# Restore from backup\ntar -xzf /backup/deluge/deluge-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start deluge</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u deluge -n 100\nsudo tail -f /var/log/deluge/deluge.log\n\n# Check configuration\ndeluge --version\n\n# Check permissions\nls -la /etc/deluge</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8112\n\n# Test connectivity\ntelnet localhost 8112\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep deluge)\n\n# Check disk I/O\niotop -p $(pgrep deluge)\n\n# Check connections\nss -an | grep 8112</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  deluge:\n    image: deluge:latest\n    ports:\n      - &quot;8112:8112&quot;\n    volumes:\n      - ./config:/etc/deluge\n      - ./data:/var/lib/deluge\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update deluge\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade deluge\n\n# Arch Linux\nsudo pacman -Syu deluge\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade deluge\n\n# openSUSE\nsudo zypper update deluge\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade deluge\n\n# Always backup before updates\ntar -czf /backup/deluge-pre-update-$(date +%Y%m%d).tar.gz /etc/deluge\n\n# Restart after updates\nsudo systemctl restart deluge</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/deluge\n\n# Clean old logs\nfind /var/log/deluge -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/deluge</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.deluge.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/deluge/deluge</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.deluge.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.deluge.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1158,"lastBuilt":"2025-09-16T03:17:55.085Z","metadataVersion":"2.0"},{"name":"dgraph","displayName":"dgraph Installation Guide","slug":"dgraph","description":"dgraph is a free and open-source distributed graph database. Dgraph provides a native GraphQL database with a graph backend, serving as an open-source alternative to Neo4j or Amazon Neptune","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080,9080],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/dgraph","documentationUrl":"https://howtomgr.github.io/miscellaneous/dgraph","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/dgraph","updatedAt":"2025-09-16T03:06:05Z","createdAt":"2025-09-16T02:31:06Z","readmeRaw":"# dgraph Installation Guide\n\ndgraph is a free and open-source distributed graph database. Dgraph provides a native GraphQL database with a graph backend, serving as an open-source alternative to Neo4j or Amazon Neptune\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores minimum (4+ recommended)\n  - RAM: 4GB minimum (8GB+ recommended)\n  - Storage: 10GB+ for data\n  - Network: HTTP and gRPC\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default dgraph port)\n  - Port 9080 for gRPC\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dgraph\nsudo dnf install -y dgraph\n\n# Enable and start service\nsudo systemctl enable --now dgraph\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndgraph version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install dgraph\nsudo apt install -y dgraph\n\n# Enable and start service\nsudo systemctl enable --now dgraph\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ndgraph version\n```\n\n### Arch Linux\n\n```bash\n# Install dgraph\nsudo pacman -S dgraph\n\n# Enable and start service\nsudo systemctl enable --now dgraph\n\n# Verify installation\ndgraph version\n```\n\n### Alpine Linux\n\n```bash\n# Install dgraph\napk add --no-cache dgraph\n\n# Enable and start service\nrc-update add dgraph default\nrc-service dgraph start\n\n# Verify installation\ndgraph version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dgraph\nsudo zypper install -y dgraph\n\n# Enable and start service\nsudo systemctl enable --now dgraph\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndgraph version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install dgraph\n\n# Start service\nbrew services start dgraph\n\n# Verify installation\ndgraph version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install dgraph\n\n# Enable in rc.conf\necho 'dgraph_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dgraph start\n\n# Verify installation\ndgraph version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install dgraph\n\n# Or using Scoop\nscoop install dgraph\n\n# Verify installation\ndgraph version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/dgraph\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndgraph version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable dgraph\n\n# Start service\nsudo systemctl start dgraph\n\n# Stop service\nsudo systemctl stop dgraph\n\n# Restart service\nsudo systemctl restart dgraph\n\n# Check status\nsudo systemctl status dgraph\n\n# View logs\nsudo journalctl -u dgraph -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add dgraph default\n\n# Start service\nrc-service dgraph start\n\n# Stop service\nrc-service dgraph stop\n\n# Restart service\nrc-service dgraph restart\n\n# Check status\nrc-service dgraph status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'dgraph_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dgraph start\n\n# Stop service\nservice dgraph stop\n\n# Restart service\nservice dgraph restart\n\n# Check status\nservice dgraph status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start dgraph\nbrew services stop dgraph\nbrew services restart dgraph\n\n# Check status\nbrew services list | grep dgraph\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start dgraph\n\n# Stop service\nnet stop dgraph\n\n# Using PowerShell\nStart-Service dgraph\nStop-Service dgraph\nRestart-Service dgraph\n\n# Check status\nGet-Service dgraph\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream dgraph_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name dgraph.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dgraph.example.com;\n\n    ssl_certificate /etc/ssl/certs/dgraph.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dgraph.example.com.key;\n\n    location / {\n        proxy_pass http://dgraph_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName dgraph.example.com\n    Redirect permanent / https://dgraph.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName dgraph.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dgraph.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dgraph.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend dgraph_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dgraph.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dgraph_backend\n\nbackend dgraph_backend\n    balance roundrobin\n    server dgraph1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R dgraph:dgraph /etc/dgraph\nsudo chmod 750 /etc/dgraph\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status dgraph\n\n# View logs\nsudo journalctl -u dgraph -f\n\n# Monitor resource usage\ntop -p $(pgrep dgraph)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/dgraph\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/dgraph-backup-$DATE.tar.gz\" /etc/dgraph /var/lib/dgraph\n\necho \"Backup completed: $BACKUP_DIR/dgraph-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop dgraph\n\n# Restore from backup\ntar -xzf /backup/dgraph/dgraph-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start dgraph\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u dgraph -n 100\nsudo tail -f /var/log/dgraph/dgraph.log\n\n# Check configuration\ndgraph version\n\n# Check permissions\nls -la /etc/dgraph\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep dgraph)\n\n# Check disk I/O\niotop -p $(pgrep dgraph)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  dgraph:\n    image: dgraph:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/dgraph\n      - ./data:/var/lib/dgraph\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dgraph\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade dgraph\n\n# Arch Linux\nsudo pacman -Syu dgraph\n\n# Alpine Linux\napk update && apk upgrade dgraph\n\n# openSUSE\nsudo zypper update dgraph\n\n# FreeBSD\npkg update && pkg upgrade dgraph\n\n# Always backup before updates\ntar -czf /backup/dgraph-pre-update-$(date +%Y%m%d).tar.gz /etc/dgraph\n\n# Restart after updates\nsudo systemctl restart dgraph\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/dgraph\n\n# Clean old logs\nfind /var/log/dgraph -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/dgraph\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.dgraph.org/\n- GitHub Repository: https://github.com/dgraph/dgraph\n- Community Forum: https://forum.dgraph.org/\n- Best Practices Guide: https://docs.dgraph.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"dgraph-installation-guide\" class=\"mobile-header\">dgraph Installation Guide</h1>\n<p class=\"mobile-paragraph\">dgraph is a free and open-source distributed graph database. Dgraph provides a native GraphQL database with a graph backend, serving as an open-source alternative to Neo4j or Amazon Neptune</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores minimum (4+ recommended)</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for data</li>\n<li class=\"mobile-list-item\">Network: HTTP and gRPC</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default dgraph port)</li>\n<li class=\"mobile-list-item\">Port 9080 for gRPC</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dgraph\nsudo dnf install -y dgraph\n\n# Enable and start service\nsudo systemctl enable --now dgraph\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndgraph version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install dgraph\nsudo apt install -y dgraph\n\n# Enable and start service\nsudo systemctl enable --now dgraph\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ndgraph version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dgraph\nsudo pacman -S dgraph\n\n# Enable and start service\nsudo systemctl enable --now dgraph\n\n# Verify installation\ndgraph version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dgraph\napk add --no-cache dgraph\n\n# Enable and start service\nrc-update add dgraph default\nrc-service dgraph start\n\n# Verify installation\ndgraph version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dgraph\nsudo zypper install -y dgraph\n\n# Enable and start service\nsudo systemctl enable --now dgraph\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndgraph version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install dgraph\n\n# Start service\nbrew services start dgraph\n\n# Verify installation\ndgraph version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install dgraph\n\n# Enable in rc.conf\necho &#039;dgraph_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dgraph start\n\n# Verify installation\ndgraph version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install dgraph\n\n# Or using Scoop\nscoop install dgraph\n\n# Verify installation\ndgraph version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/dgraph\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndgraph version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable dgraph\n\n# Start service\nsudo systemctl start dgraph\n\n# Stop service\nsudo systemctl stop dgraph\n\n# Restart service\nsudo systemctl restart dgraph\n\n# Check status\nsudo systemctl status dgraph\n\n# View logs\nsudo journalctl -u dgraph -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add dgraph default\n\n# Start service\nrc-service dgraph start\n\n# Stop service\nrc-service dgraph stop\n\n# Restart service\nrc-service dgraph restart\n\n# Check status\nrc-service dgraph status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;dgraph_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dgraph start\n\n# Stop service\nservice dgraph stop\n\n# Restart service\nservice dgraph restart\n\n# Check status\nservice dgraph status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start dgraph\nbrew services stop dgraph\nbrew services restart dgraph\n\n# Check status\nbrew services list | grep dgraph</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start dgraph\n\n# Stop service\nnet stop dgraph\n\n# Using PowerShell\nStart-Service dgraph\nStop-Service dgraph\nRestart-Service dgraph\n\n# Check status\nGet-Service dgraph</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream dgraph_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name dgraph.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dgraph.example.com;\n\n    ssl_certificate /etc/ssl/certs/dgraph.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dgraph.example.com.key;\n\n    location / {\n        proxy_pass http://dgraph_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName dgraph.example.com\n    Redirect permanent / https://dgraph.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName dgraph.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dgraph.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dgraph.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend dgraph_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dgraph.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dgraph_backend\n\nbackend dgraph_backend\n    balance roundrobin\n    server dgraph1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dgraph:dgraph /etc/dgraph\nsudo chmod 750 /etc/dgraph\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status dgraph\n\n# View logs\nsudo journalctl -u dgraph -f\n\n# Monitor resource usage\ntop -p $(pgrep dgraph)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/dgraph&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/dgraph-backup-$DATE.tar.gz&quot; /etc/dgraph /var/lib/dgraph\n\necho &quot;Backup completed: $BACKUP_DIR/dgraph-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop dgraph\n\n# Restore from backup\ntar -xzf /backup/dgraph/dgraph-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start dgraph</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u dgraph -n 100\nsudo tail -f /var/log/dgraph/dgraph.log\n\n# Check configuration\ndgraph version\n\n# Check permissions\nls -la /etc/dgraph</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep dgraph)\n\n# Check disk I/O\niotop -p $(pgrep dgraph)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  dgraph:\n    image: dgraph:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/dgraph\n      - ./data:/var/lib/dgraph\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dgraph\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade dgraph\n\n# Arch Linux\nsudo pacman -Syu dgraph\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade dgraph\n\n# openSUSE\nsudo zypper update dgraph\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade dgraph\n\n# Always backup before updates\ntar -czf /backup/dgraph-pre-update-$(date +%Y%m%d).tar.gz /etc/dgraph\n\n# Restart after updates\nsudo systemctl restart dgraph</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/dgraph\n\n# Clean old logs\nfind /var/log/dgraph -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/dgraph</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.dgraph.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/dgraph/dgraph</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.dgraph.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.dgraph.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1175,"lastBuilt":"2025-09-16T03:17:54.430Z","metadataVersion":"2.0"},{"name":"discourse","displayName":"discourse Installation Guide","slug":"discourse","description":"discourse is a free and open-source modern discussion platform. Discourse reimagines online discussion forums with modern features, serving as an alternative to vBulletin, phpBB, or commercial forum software","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,3000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/discourse","documentationUrl":"https://howtomgr.github.io/miscellaneous/discourse","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/discourse","updatedAt":"2025-09-16T03:06:27Z","createdAt":"2025-09-08T03:06:20Z","readmeRaw":"# discourse Installation Guide\n\ndiscourse is a free and open-source modern discussion platform. Discourse reimagines online discussion forums with modern features, serving as an alternative to vBulletin, phpBB, or commercial forum software\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores minimum\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 10GB for data\n  - Network: HTTPS for web access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80/443 (default discourse port)\n  - Port 3000 for development\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install discourse\nsudo dnf install -y discourse\n\n# Enable and start service\nsudo systemctl enable --now discourse\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndiscourse --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install discourse\nsudo apt install -y discourse\n\n# Enable and start service\nsudo systemctl enable --now discourse\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\ndiscourse --version\n```\n\n### Arch Linux\n\n```bash\n# Install discourse\nsudo pacman -S discourse\n\n# Enable and start service\nsudo systemctl enable --now discourse\n\n# Verify installation\ndiscourse --version\n```\n\n### Alpine Linux\n\n```bash\n# Install discourse\napk add --no-cache discourse\n\n# Enable and start service\nrc-update add discourse default\nrc-service discourse start\n\n# Verify installation\ndiscourse --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install discourse\nsudo zypper install -y discourse\n\n# Enable and start service\nsudo systemctl enable --now discourse\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndiscourse --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install discourse\n\n# Start service\nbrew services start discourse\n\n# Verify installation\ndiscourse --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install discourse\n\n# Enable in rc.conf\necho 'discourse_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice discourse start\n\n# Verify installation\ndiscourse --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install discourse\n\n# Or using Scoop\nscoop install discourse\n\n# Verify installation\ndiscourse --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/discourse\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndiscourse --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable discourse\n\n# Start service\nsudo systemctl start discourse\n\n# Stop service\nsudo systemctl stop discourse\n\n# Restart service\nsudo systemctl restart discourse\n\n# Check status\nsudo systemctl status discourse\n\n# View logs\nsudo journalctl -u discourse -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add discourse default\n\n# Start service\nrc-service discourse start\n\n# Stop service\nrc-service discourse stop\n\n# Restart service\nrc-service discourse restart\n\n# Check status\nrc-service discourse status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'discourse_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice discourse start\n\n# Stop service\nservice discourse stop\n\n# Restart service\nservice discourse restart\n\n# Check status\nservice discourse status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start discourse\nbrew services stop discourse\nbrew services restart discourse\n\n# Check status\nbrew services list | grep discourse\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start discourse\n\n# Stop service\nnet stop discourse\n\n# Using PowerShell\nStart-Service discourse\nStop-Service discourse\nRestart-Service discourse\n\n# Check status\nGet-Service discourse\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream discourse_backend {\n    server 127.0.0.1:80/443;\n}\n\nserver {\n    listen 80;\n    server_name discourse.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name discourse.example.com;\n\n    ssl_certificate /etc/ssl/certs/discourse.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/discourse.example.com.key;\n\n    location / {\n        proxy_pass http://discourse_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName discourse.example.com\n    Redirect permanent / https://discourse.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName discourse.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/discourse.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/discourse.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend discourse_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/discourse.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend discourse_backend\n\nbackend discourse_backend\n    balance roundrobin\n    server discourse1 127.0.0.1:80/443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R discourse:discourse /etc/discourse\nsudo chmod 750 /etc/discourse\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status discourse\n\n# View logs\nsudo journalctl -u discourse -f\n\n# Monitor resource usage\ntop -p $(pgrep discourse)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/discourse\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/discourse-backup-$DATE.tar.gz\" /etc/discourse /var/lib/discourse\n\necho \"Backup completed: $BACKUP_DIR/discourse-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop discourse\n\n# Restore from backup\ntar -xzf /backup/discourse/discourse-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start discourse\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u discourse -n 100\nsudo tail -f /var/log/discourse/discourse.log\n\n# Check configuration\ndiscourse --version\n\n# Check permissions\nls -la /etc/discourse\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80/443\n\n# Test connectivity\ntelnet localhost 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep discourse)\n\n# Check disk I/O\niotop -p $(pgrep discourse)\n\n# Check connections\nss -an | grep 80/443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  discourse:\n    image: discourse:latest\n    ports:\n      - \"80/443:80/443\"\n    volumes:\n      - ./config:/etc/discourse\n      - ./data:/var/lib/discourse\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update discourse\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade discourse\n\n# Arch Linux\nsudo pacman -Syu discourse\n\n# Alpine Linux\napk update && apk upgrade discourse\n\n# openSUSE\nsudo zypper update discourse\n\n# FreeBSD\npkg update && pkg upgrade discourse\n\n# Always backup before updates\ntar -czf /backup/discourse-pre-update-$(date +%Y%m%d).tar.gz /etc/discourse\n\n# Restart after updates\nsudo systemctl restart discourse\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/discourse\n\n# Clean old logs\nfind /var/log/discourse -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/discourse\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.discourse.org/\n- GitHub Repository: https://github.com/discourse/discourse\n- Community Forum: https://forum.discourse.org/\n- Best Practices Guide: https://docs.discourse.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"discourse-installation-guide\" class=\"mobile-header\">discourse Installation Guide</h1>\n<p class=\"mobile-paragraph\">discourse is a free and open-source modern discussion platform. Discourse reimagines online discussion forums with modern features, serving as an alternative to vBulletin, phpBB, or commercial forum software</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores minimum</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTPS for web access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80/443 (default discourse port)</li>\n<li class=\"mobile-list-item\">Port 3000 for development</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install discourse\nsudo dnf install -y discourse\n\n# Enable and start service\nsudo systemctl enable --now discourse\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install discourse\nsudo apt install -y discourse\n\n# Enable and start service\nsudo systemctl enable --now discourse\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install discourse\nsudo pacman -S discourse\n\n# Enable and start service\nsudo systemctl enable --now discourse\n\n# Verify installation\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install discourse\napk add --no-cache discourse\n\n# Enable and start service\nrc-update add discourse default\nrc-service discourse start\n\n# Verify installation\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install discourse\nsudo zypper install -y discourse\n\n# Enable and start service\nsudo systemctl enable --now discourse\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install discourse\n\n# Start service\nbrew services start discourse\n\n# Verify installation\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install discourse\n\n# Enable in rc.conf\necho &#039;discourse_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice discourse start\n\n# Verify installation\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install discourse\n\n# Or using Scoop\nscoop install discourse\n\n# Verify installation\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/discourse\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndiscourse --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable discourse\n\n# Start service\nsudo systemctl start discourse\n\n# Stop service\nsudo systemctl stop discourse\n\n# Restart service\nsudo systemctl restart discourse\n\n# Check status\nsudo systemctl status discourse\n\n# View logs\nsudo journalctl -u discourse -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add discourse default\n\n# Start service\nrc-service discourse start\n\n# Stop service\nrc-service discourse stop\n\n# Restart service\nrc-service discourse restart\n\n# Check status\nrc-service discourse status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;discourse_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice discourse start\n\n# Stop service\nservice discourse stop\n\n# Restart service\nservice discourse restart\n\n# Check status\nservice discourse status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start discourse\nbrew services stop discourse\nbrew services restart discourse\n\n# Check status\nbrew services list | grep discourse</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start discourse\n\n# Stop service\nnet stop discourse\n\n# Using PowerShell\nStart-Service discourse\nStop-Service discourse\nRestart-Service discourse\n\n# Check status\nGet-Service discourse</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream discourse_backend {\n    server 127.0.0.1:80/443;\n}\n\nserver {\n    listen 80;\n    server_name discourse.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name discourse.example.com;\n\n    ssl_certificate /etc/ssl/certs/discourse.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/discourse.example.com.key;\n\n    location / {\n        proxy_pass http://discourse_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName discourse.example.com\n    Redirect permanent / https://discourse.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName discourse.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/discourse.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/discourse.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend discourse_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/discourse.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend discourse_backend\n\nbackend discourse_backend\n    balance roundrobin\n    server discourse1 127.0.0.1:80/443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R discourse:discourse /etc/discourse\nsudo chmod 750 /etc/discourse\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status discourse\n\n# View logs\nsudo journalctl -u discourse -f\n\n# Monitor resource usage\ntop -p $(pgrep discourse)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/discourse&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/discourse-backup-$DATE.tar.gz&quot; /etc/discourse /var/lib/discourse\n\necho &quot;Backup completed: $BACKUP_DIR/discourse-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop discourse\n\n# Restore from backup\ntar -xzf /backup/discourse/discourse-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start discourse</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u discourse -n 100\nsudo tail -f /var/log/discourse/discourse.log\n\n# Check configuration\ndiscourse --version\n\n# Check permissions\nls -la /etc/discourse</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80/443\n\n# Test connectivity\ntelnet localhost 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep discourse)\n\n# Check disk I/O\niotop -p $(pgrep discourse)\n\n# Check connections\nss -an | grep 80/443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  discourse:\n    image: discourse:latest\n    ports:\n      - &quot;80/443:80/443&quot;\n    volumes:\n      - ./config:/etc/discourse\n      - ./data:/var/lib/discourse\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update discourse\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade discourse\n\n# Arch Linux\nsudo pacman -Syu discourse\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade discourse\n\n# openSUSE\nsudo zypper update discourse\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade discourse\n\n# Always backup before updates\ntar -czf /backup/discourse-pre-update-$(date +%Y%m%d).tar.gz /etc/discourse\n\n# Restart after updates\nsudo systemctl restart discourse</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/discourse\n\n# Clean old logs\nfind /var/log/discourse -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/discourse</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.discourse.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/discourse/discourse</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.discourse.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.discourse.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1173,"lastBuilt":"2025-09-16T03:17:53.478Z","metadataVersion":"2.0"},{"name":"docusaurus","displayName":"docusaurus Installation Guide","slug":"docusaurus","description":"docusaurus is a free and open-source documentation websites. Docusaurus helps build optimized documentation websites quickly","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,3000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/docusaurus","documentationUrl":"https://howtomgr.github.io/miscellaneous/docusaurus","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/docusaurus","updatedAt":"2025-09-16T03:06:56Z","createdAt":"2025-09-16T02:32:00Z","readmeRaw":"# docusaurus Installation Guide\n\ndocusaurus is a free and open-source documentation websites. Docusaurus helps build optimized documentation websites quickly\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 200MB for docs\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3000 (default docusaurus port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install docusaurus\nsudo dnf install -y docusaurus\n\n# Enable and start service\nsudo systemctl enable --now docusaurus\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndocusaurus --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install docusaurus\nsudo apt install -y docusaurus\n\n# Enable and start service\nsudo systemctl enable --now docusaurus\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\ndocusaurus --version\n```\n\n### Arch Linux\n\n```bash\n# Install docusaurus\nsudo pacman -S docusaurus\n\n# Enable and start service\nsudo systemctl enable --now docusaurus\n\n# Verify installation\ndocusaurus --version\n```\n\n### Alpine Linux\n\n```bash\n# Install docusaurus\napk add --no-cache docusaurus\n\n# Enable and start service\nrc-update add docusaurus default\nrc-service docusaurus start\n\n# Verify installation\ndocusaurus --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install docusaurus\nsudo zypper install -y docusaurus\n\n# Enable and start service\nsudo systemctl enable --now docusaurus\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndocusaurus --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install docusaurus\n\n# Start service\nbrew services start docusaurus\n\n# Verify installation\ndocusaurus --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install docusaurus\n\n# Enable in rc.conf\necho 'docusaurus_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice docusaurus start\n\n# Verify installation\ndocusaurus --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install docusaurus\n\n# Or using Scoop\nscoop install docusaurus\n\n# Verify installation\ndocusaurus --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/docusaurus\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndocusaurus --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable docusaurus\n\n# Start service\nsudo systemctl start docusaurus\n\n# Stop service\nsudo systemctl stop docusaurus\n\n# Restart service\nsudo systemctl restart docusaurus\n\n# Check status\nsudo systemctl status docusaurus\n\n# View logs\nsudo journalctl -u docusaurus -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add docusaurus default\n\n# Start service\nrc-service docusaurus start\n\n# Stop service\nrc-service docusaurus stop\n\n# Restart service\nrc-service docusaurus restart\n\n# Check status\nrc-service docusaurus status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'docusaurus_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice docusaurus start\n\n# Stop service\nservice docusaurus stop\n\n# Restart service\nservice docusaurus restart\n\n# Check status\nservice docusaurus status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start docusaurus\nbrew services stop docusaurus\nbrew services restart docusaurus\n\n# Check status\nbrew services list | grep docusaurus\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start docusaurus\n\n# Stop service\nnet stop docusaurus\n\n# Using PowerShell\nStart-Service docusaurus\nStop-Service docusaurus\nRestart-Service docusaurus\n\n# Check status\nGet-Service docusaurus\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream docusaurus_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name docusaurus.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name docusaurus.example.com;\n\n    ssl_certificate /etc/ssl/certs/docusaurus.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/docusaurus.example.com.key;\n\n    location / {\n        proxy_pass http://docusaurus_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName docusaurus.example.com\n    Redirect permanent / https://docusaurus.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName docusaurus.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/docusaurus.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/docusaurus.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend docusaurus_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/docusaurus.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend docusaurus_backend\n\nbackend docusaurus_backend\n    balance roundrobin\n    server docusaurus1 127.0.0.1:3000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R docusaurus:docusaurus /etc/docusaurus\nsudo chmod 750 /etc/docusaurus\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status docusaurus\n\n# View logs\nsudo journalctl -u docusaurus -f\n\n# Monitor resource usage\ntop -p $(pgrep docusaurus)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/docusaurus\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/docusaurus-backup-$DATE.tar.gz\" /etc/docusaurus /var/lib/docusaurus\n\necho \"Backup completed: $BACKUP_DIR/docusaurus-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop docusaurus\n\n# Restore from backup\ntar -xzf /backup/docusaurus/docusaurus-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start docusaurus\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u docusaurus -n 100\nsudo tail -f /var/log/docusaurus/docusaurus.log\n\n# Check configuration\ndocusaurus --version\n\n# Check permissions\nls -la /etc/docusaurus\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep docusaurus)\n\n# Check disk I/O\niotop -p $(pgrep docusaurus)\n\n# Check connections\nss -an | grep 3000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  docusaurus:\n    image: docusaurus:latest\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./config:/etc/docusaurus\n      - ./data:/var/lib/docusaurus\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update docusaurus\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade docusaurus\n\n# Arch Linux\nsudo pacman -Syu docusaurus\n\n# Alpine Linux\napk update && apk upgrade docusaurus\n\n# openSUSE\nsudo zypper update docusaurus\n\n# FreeBSD\npkg update && pkg upgrade docusaurus\n\n# Always backup before updates\ntar -czf /backup/docusaurus-pre-update-$(date +%Y%m%d).tar.gz /etc/docusaurus\n\n# Restart after updates\nsudo systemctl restart docusaurus\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/docusaurus\n\n# Clean old logs\nfind /var/log/docusaurus -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/docusaurus\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.docusaurus.org/\n- GitHub Repository: https://github.com/docusaurus/docusaurus\n- Community Forum: https://forum.docusaurus.org/\n- Best Practices Guide: https://docs.docusaurus.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"docusaurus-installation-guide\" class=\"mobile-header\">docusaurus Installation Guide</h1>\n<p class=\"mobile-paragraph\">docusaurus is a free and open-source documentation websites. Docusaurus helps build optimized documentation websites quickly</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 200MB for docs</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3000 (default docusaurus port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install docusaurus\nsudo dnf install -y docusaurus\n\n# Enable and start service\nsudo systemctl enable --now docusaurus\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install docusaurus\nsudo apt install -y docusaurus\n\n# Enable and start service\nsudo systemctl enable --now docusaurus\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install docusaurus\nsudo pacman -S docusaurus\n\n# Enable and start service\nsudo systemctl enable --now docusaurus\n\n# Verify installation\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install docusaurus\napk add --no-cache docusaurus\n\n# Enable and start service\nrc-update add docusaurus default\nrc-service docusaurus start\n\n# Verify installation\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install docusaurus\nsudo zypper install -y docusaurus\n\n# Enable and start service\nsudo systemctl enable --now docusaurus\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install docusaurus\n\n# Start service\nbrew services start docusaurus\n\n# Verify installation\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install docusaurus\n\n# Enable in rc.conf\necho &#039;docusaurus_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice docusaurus start\n\n# Verify installation\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install docusaurus\n\n# Or using Scoop\nscoop install docusaurus\n\n# Verify installation\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/docusaurus\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndocusaurus --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable docusaurus\n\n# Start service\nsudo systemctl start docusaurus\n\n# Stop service\nsudo systemctl stop docusaurus\n\n# Restart service\nsudo systemctl restart docusaurus\n\n# Check status\nsudo systemctl status docusaurus\n\n# View logs\nsudo journalctl -u docusaurus -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add docusaurus default\n\n# Start service\nrc-service docusaurus start\n\n# Stop service\nrc-service docusaurus stop\n\n# Restart service\nrc-service docusaurus restart\n\n# Check status\nrc-service docusaurus status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;docusaurus_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice docusaurus start\n\n# Stop service\nservice docusaurus stop\n\n# Restart service\nservice docusaurus restart\n\n# Check status\nservice docusaurus status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start docusaurus\nbrew services stop docusaurus\nbrew services restart docusaurus\n\n# Check status\nbrew services list | grep docusaurus</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start docusaurus\n\n# Stop service\nnet stop docusaurus\n\n# Using PowerShell\nStart-Service docusaurus\nStop-Service docusaurus\nRestart-Service docusaurus\n\n# Check status\nGet-Service docusaurus</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream docusaurus_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name docusaurus.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name docusaurus.example.com;\n\n    ssl_certificate /etc/ssl/certs/docusaurus.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/docusaurus.example.com.key;\n\n    location / {\n        proxy_pass http://docusaurus_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName docusaurus.example.com\n    Redirect permanent / https://docusaurus.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName docusaurus.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/docusaurus.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/docusaurus.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend docusaurus_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/docusaurus.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend docusaurus_backend\n\nbackend docusaurus_backend\n    balance roundrobin\n    server docusaurus1 127.0.0.1:3000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R docusaurus:docusaurus /etc/docusaurus\nsudo chmod 750 /etc/docusaurus\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status docusaurus\n\n# View logs\nsudo journalctl -u docusaurus -f\n\n# Monitor resource usage\ntop -p $(pgrep docusaurus)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/docusaurus&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/docusaurus-backup-$DATE.tar.gz&quot; /etc/docusaurus /var/lib/docusaurus\n\necho &quot;Backup completed: $BACKUP_DIR/docusaurus-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop docusaurus\n\n# Restore from backup\ntar -xzf /backup/docusaurus/docusaurus-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start docusaurus</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u docusaurus -n 100\nsudo tail -f /var/log/docusaurus/docusaurus.log\n\n# Check configuration\ndocusaurus --version\n\n# Check permissions\nls -la /etc/docusaurus</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep docusaurus)\n\n# Check disk I/O\niotop -p $(pgrep docusaurus)\n\n# Check connections\nss -an | grep 3000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  docusaurus:\n    image: docusaurus:latest\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./config:/etc/docusaurus\n      - ./data:/var/lib/docusaurus\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update docusaurus\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade docusaurus\n\n# Arch Linux\nsudo pacman -Syu docusaurus\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade docusaurus\n\n# openSUSE\nsudo zypper update docusaurus\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade docusaurus\n\n# Always backup before updates\ntar -czf /backup/docusaurus-pre-update-$(date +%Y%m%d).tar.gz /etc/docusaurus\n\n# Restart after updates\nsudo systemctl restart docusaurus</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/docusaurus\n\n# Clean old logs\nfind /var/log/docusaurus -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/docusaurus</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.docusaurus.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/docusaurus/docusaurus</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.docusaurus.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.docusaurus.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1153,"lastBuilt":"2025-09-16T03:17:51.999Z","metadataVersion":"2.0"},{"name":"domoticz","displayName":"domoticz Installation Guide","slug":"domoticz","description":"domoticz is a free and open-source home automation system. Domoticz provides lightweight home automation system","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/domoticz","documentationUrl":"https://howtomgr.github.io/miscellaneous/domoticz","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/domoticz","updatedAt":"2025-09-16T03:07:17Z","createdAt":"2025-09-16T02:32:30Z","readmeRaw":"# domoticz Installation Guide\n\ndomoticz is a free and open-source home automation system. Domoticz provides lightweight home automation system\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 2GB for data\n  - Network: IoT protocols\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default domoticz port)\n  - HTTPS on 443\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install domoticz\nsudo dnf install -y domoticz\n\n# Enable and start service\nsudo systemctl enable --now domoticz\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndomoticz --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install domoticz\nsudo apt install -y domoticz\n\n# Enable and start service\nsudo systemctl enable --now domoticz\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ndomoticz --version\n```\n\n### Arch Linux\n\n```bash\n# Install domoticz\nsudo pacman -S domoticz\n\n# Enable and start service\nsudo systemctl enable --now domoticz\n\n# Verify installation\ndomoticz --version\n```\n\n### Alpine Linux\n\n```bash\n# Install domoticz\napk add --no-cache domoticz\n\n# Enable and start service\nrc-update add domoticz default\nrc-service domoticz start\n\n# Verify installation\ndomoticz --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install domoticz\nsudo zypper install -y domoticz\n\n# Enable and start service\nsudo systemctl enable --now domoticz\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndomoticz --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install domoticz\n\n# Start service\nbrew services start domoticz\n\n# Verify installation\ndomoticz --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install domoticz\n\n# Enable in rc.conf\necho 'domoticz_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice domoticz start\n\n# Verify installation\ndomoticz --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install domoticz\n\n# Or using Scoop\nscoop install domoticz\n\n# Verify installation\ndomoticz --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/domoticz\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndomoticz --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable domoticz\n\n# Start service\nsudo systemctl start domoticz\n\n# Stop service\nsudo systemctl stop domoticz\n\n# Restart service\nsudo systemctl restart domoticz\n\n# Check status\nsudo systemctl status domoticz\n\n# View logs\nsudo journalctl -u domoticz -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add domoticz default\n\n# Start service\nrc-service domoticz start\n\n# Stop service\nrc-service domoticz stop\n\n# Restart service\nrc-service domoticz restart\n\n# Check status\nrc-service domoticz status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'domoticz_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice domoticz start\n\n# Stop service\nservice domoticz stop\n\n# Restart service\nservice domoticz restart\n\n# Check status\nservice domoticz status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start domoticz\nbrew services stop domoticz\nbrew services restart domoticz\n\n# Check status\nbrew services list | grep domoticz\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start domoticz\n\n# Stop service\nnet stop domoticz\n\n# Using PowerShell\nStart-Service domoticz\nStop-Service domoticz\nRestart-Service domoticz\n\n# Check status\nGet-Service domoticz\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream domoticz_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name domoticz.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name domoticz.example.com;\n\n    ssl_certificate /etc/ssl/certs/domoticz.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/domoticz.example.com.key;\n\n    location / {\n        proxy_pass http://domoticz_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName domoticz.example.com\n    Redirect permanent / https://domoticz.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName domoticz.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/domoticz.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/domoticz.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend domoticz_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/domoticz.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend domoticz_backend\n\nbackend domoticz_backend\n    balance roundrobin\n    server domoticz1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R domoticz:domoticz /etc/domoticz\nsudo chmod 750 /etc/domoticz\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status domoticz\n\n# View logs\nsudo journalctl -u domoticz -f\n\n# Monitor resource usage\ntop -p $(pgrep domoticz)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/domoticz\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/domoticz-backup-$DATE.tar.gz\" /etc/domoticz /var/lib/domoticz\n\necho \"Backup completed: $BACKUP_DIR/domoticz-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop domoticz\n\n# Restore from backup\ntar -xzf /backup/domoticz/domoticz-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start domoticz\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u domoticz -n 100\nsudo tail -f /var/log/domoticz/domoticz.log\n\n# Check configuration\ndomoticz --version\n\n# Check permissions\nls -la /etc/domoticz\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep domoticz)\n\n# Check disk I/O\niotop -p $(pgrep domoticz)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  domoticz:\n    image: domoticz:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/domoticz\n      - ./data:/var/lib/domoticz\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update domoticz\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade domoticz\n\n# Arch Linux\nsudo pacman -Syu domoticz\n\n# Alpine Linux\napk update && apk upgrade domoticz\n\n# openSUSE\nsudo zypper update domoticz\n\n# FreeBSD\npkg update && pkg upgrade domoticz\n\n# Always backup before updates\ntar -czf /backup/domoticz-pre-update-$(date +%Y%m%d).tar.gz /etc/domoticz\n\n# Restart after updates\nsudo systemctl restart domoticz\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/domoticz\n\n# Clean old logs\nfind /var/log/domoticz -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/domoticz\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.domoticz.org/\n- GitHub Repository: https://github.com/domoticz/domoticz\n- Community Forum: https://forum.domoticz.org/\n- Best Practices Guide: https://docs.domoticz.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"domoticz-installation-guide\" class=\"mobile-header\">domoticz Installation Guide</h1>\n<p class=\"mobile-paragraph\">domoticz is a free and open-source home automation system. Domoticz provides lightweight home automation system</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 2GB for data</li>\n<li class=\"mobile-list-item\">Network: IoT protocols</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default domoticz port)</li>\n<li class=\"mobile-list-item\">HTTPS on 443</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install domoticz\nsudo dnf install -y domoticz\n\n# Enable and start service\nsudo systemctl enable --now domoticz\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install domoticz\nsudo apt install -y domoticz\n\n# Enable and start service\nsudo systemctl enable --now domoticz\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install domoticz\nsudo pacman -S domoticz\n\n# Enable and start service\nsudo systemctl enable --now domoticz\n\n# Verify installation\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install domoticz\napk add --no-cache domoticz\n\n# Enable and start service\nrc-update add domoticz default\nrc-service domoticz start\n\n# Verify installation\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install domoticz\nsudo zypper install -y domoticz\n\n# Enable and start service\nsudo systemctl enable --now domoticz\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install domoticz\n\n# Start service\nbrew services start domoticz\n\n# Verify installation\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install domoticz\n\n# Enable in rc.conf\necho &#039;domoticz_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice domoticz start\n\n# Verify installation\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install domoticz\n\n# Or using Scoop\nscoop install domoticz\n\n# Verify installation\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/domoticz\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndomoticz --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable domoticz\n\n# Start service\nsudo systemctl start domoticz\n\n# Stop service\nsudo systemctl stop domoticz\n\n# Restart service\nsudo systemctl restart domoticz\n\n# Check status\nsudo systemctl status domoticz\n\n# View logs\nsudo journalctl -u domoticz -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add domoticz default\n\n# Start service\nrc-service domoticz start\n\n# Stop service\nrc-service domoticz stop\n\n# Restart service\nrc-service domoticz restart\n\n# Check status\nrc-service domoticz status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;domoticz_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice domoticz start\n\n# Stop service\nservice domoticz stop\n\n# Restart service\nservice domoticz restart\n\n# Check status\nservice domoticz status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start domoticz\nbrew services stop domoticz\nbrew services restart domoticz\n\n# Check status\nbrew services list | grep domoticz</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start domoticz\n\n# Stop service\nnet stop domoticz\n\n# Using PowerShell\nStart-Service domoticz\nStop-Service domoticz\nRestart-Service domoticz\n\n# Check status\nGet-Service domoticz</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream domoticz_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name domoticz.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name domoticz.example.com;\n\n    ssl_certificate /etc/ssl/certs/domoticz.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/domoticz.example.com.key;\n\n    location / {\n        proxy_pass http://domoticz_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName domoticz.example.com\n    Redirect permanent / https://domoticz.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName domoticz.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/domoticz.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/domoticz.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend domoticz_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/domoticz.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend domoticz_backend\n\nbackend domoticz_backend\n    balance roundrobin\n    server domoticz1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R domoticz:domoticz /etc/domoticz\nsudo chmod 750 /etc/domoticz\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status domoticz\n\n# View logs\nsudo journalctl -u domoticz -f\n\n# Monitor resource usage\ntop -p $(pgrep domoticz)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/domoticz&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/domoticz-backup-$DATE.tar.gz&quot; /etc/domoticz /var/lib/domoticz\n\necho &quot;Backup completed: $BACKUP_DIR/domoticz-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop domoticz\n\n# Restore from backup\ntar -xzf /backup/domoticz/domoticz-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start domoticz</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u domoticz -n 100\nsudo tail -f /var/log/domoticz/domoticz.log\n\n# Check configuration\ndomoticz --version\n\n# Check permissions\nls -la /etc/domoticz</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep domoticz)\n\n# Check disk I/O\niotop -p $(pgrep domoticz)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  domoticz:\n    image: domoticz:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/domoticz\n      - ./data:/var/lib/domoticz\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update domoticz\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade domoticz\n\n# Arch Linux\nsudo pacman -Syu domoticz\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade domoticz\n\n# openSUSE\nsudo zypper update domoticz\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade domoticz\n\n# Always backup before updates\ntar -czf /backup/domoticz-pre-update-$(date +%Y%m%d).tar.gz /etc/domoticz\n\n# Restart after updates\nsudo systemctl restart domoticz</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/domoticz\n\n# Clean old logs\nfind /var/log/domoticz -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/domoticz</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.domoticz.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/domoticz/domoticz</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.domoticz.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.domoticz.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1155,"lastBuilt":"2025-09-16T03:17:50.774Z","metadataVersion":"2.0"},{"name":"duplicacy","displayName":"duplicacy Installation Guide","slug":"duplicacy","description":"duplicacy is a free and open-source cloud backup tool. Duplicacy provides lock-free deduplication cloud backup tool","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/duplicacy","documentationUrl":"https://howtomgr.github.io/miscellaneous/duplicacy","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/duplicacy","updatedAt":"2025-09-16T03:07:47Z","createdAt":"2025-09-16T02:33:00Z","readmeRaw":"# duplicacy Installation Guide\n\nduplicacy is a free and open-source cloud backup tool. Duplicacy provides lock-free deduplication cloud backup tool\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 10GB for cache\n  - Network: Cloud storage APIs\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default duplicacy port)\n  - Web UI on 3875\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install duplicacy\nsudo dnf install -y duplicacy\n\n# Enable and start service\nsudo systemctl enable --now duplicacy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nduplicacy --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install duplicacy\nsudo apt install -y duplicacy\n\n# Enable and start service\nsudo systemctl enable --now duplicacy\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nduplicacy --version\n```\n\n### Arch Linux\n\n```bash\n# Install duplicacy\nsudo pacman -S duplicacy\n\n# Enable and start service\nsudo systemctl enable --now duplicacy\n\n# Verify installation\nduplicacy --version\n```\n\n### Alpine Linux\n\n```bash\n# Install duplicacy\napk add --no-cache duplicacy\n\n# Enable and start service\nrc-update add duplicacy default\nrc-service duplicacy start\n\n# Verify installation\nduplicacy --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install duplicacy\nsudo zypper install -y duplicacy\n\n# Enable and start service\nsudo systemctl enable --now duplicacy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nduplicacy --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install duplicacy\n\n# Start service\nbrew services start duplicacy\n\n# Verify installation\nduplicacy --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install duplicacy\n\n# Enable in rc.conf\necho 'duplicacy_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice duplicacy start\n\n# Verify installation\nduplicacy --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install duplicacy\n\n# Or using Scoop\nscoop install duplicacy\n\n# Verify installation\nduplicacy --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/duplicacy\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nduplicacy --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable duplicacy\n\n# Start service\nsudo systemctl start duplicacy\n\n# Stop service\nsudo systemctl stop duplicacy\n\n# Restart service\nsudo systemctl restart duplicacy\n\n# Check status\nsudo systemctl status duplicacy\n\n# View logs\nsudo journalctl -u duplicacy -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add duplicacy default\n\n# Start service\nrc-service duplicacy start\n\n# Stop service\nrc-service duplicacy stop\n\n# Restart service\nrc-service duplicacy restart\n\n# Check status\nrc-service duplicacy status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'duplicacy_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice duplicacy start\n\n# Stop service\nservice duplicacy stop\n\n# Restart service\nservice duplicacy restart\n\n# Check status\nservice duplicacy status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start duplicacy\nbrew services stop duplicacy\nbrew services restart duplicacy\n\n# Check status\nbrew services list | grep duplicacy\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start duplicacy\n\n# Stop service\nnet stop duplicacy\n\n# Using PowerShell\nStart-Service duplicacy\nStop-Service duplicacy\nRestart-Service duplicacy\n\n# Check status\nGet-Service duplicacy\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream duplicacy_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name duplicacy.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name duplicacy.example.com;\n\n    ssl_certificate /etc/ssl/certs/duplicacy.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/duplicacy.example.com.key;\n\n    location / {\n        proxy_pass http://duplicacy_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName duplicacy.example.com\n    Redirect permanent / https://duplicacy.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName duplicacy.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/duplicacy.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/duplicacy.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend duplicacy_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/duplicacy.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend duplicacy_backend\n\nbackend duplicacy_backend\n    balance roundrobin\n    server duplicacy1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R duplicacy:duplicacy /etc/duplicacy\nsudo chmod 750 /etc/duplicacy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status duplicacy\n\n# View logs\nsudo journalctl -u duplicacy -f\n\n# Monitor resource usage\ntop -p $(pgrep duplicacy)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/duplicacy\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/duplicacy-backup-$DATE.tar.gz\" /etc/duplicacy /var/lib/duplicacy\n\necho \"Backup completed: $BACKUP_DIR/duplicacy-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop duplicacy\n\n# Restore from backup\ntar -xzf /backup/duplicacy/duplicacy-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start duplicacy\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u duplicacy -n 100\nsudo tail -f /var/log/duplicacy/duplicacy.log\n\n# Check configuration\nduplicacy --version\n\n# Check permissions\nls -la /etc/duplicacy\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep duplicacy)\n\n# Check disk I/O\niotop -p $(pgrep duplicacy)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  duplicacy:\n    image: duplicacy:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/duplicacy\n      - ./data:/var/lib/duplicacy\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update duplicacy\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade duplicacy\n\n# Arch Linux\nsudo pacman -Syu duplicacy\n\n# Alpine Linux\napk update && apk upgrade duplicacy\n\n# openSUSE\nsudo zypper update duplicacy\n\n# FreeBSD\npkg update && pkg upgrade duplicacy\n\n# Always backup before updates\ntar -czf /backup/duplicacy-pre-update-$(date +%Y%m%d).tar.gz /etc/duplicacy\n\n# Restart after updates\nsudo systemctl restart duplicacy\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/duplicacy\n\n# Clean old logs\nfind /var/log/duplicacy -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/duplicacy\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.duplicacy.org/\n- GitHub Repository: https://github.com/duplicacy/duplicacy\n- Community Forum: https://forum.duplicacy.org/\n- Best Practices Guide: https://docs.duplicacy.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"duplicacy-installation-guide\" class=\"mobile-header\">duplicacy Installation Guide</h1>\n<p class=\"mobile-paragraph\">duplicacy is a free and open-source cloud backup tool. Duplicacy provides lock-free deduplication cloud backup tool</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for cache</li>\n<li class=\"mobile-list-item\">Network: Cloud storage APIs</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default duplicacy port)</li>\n<li class=\"mobile-list-item\">Web UI on 3875</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install duplicacy\nsudo dnf install -y duplicacy\n\n# Enable and start service\nsudo systemctl enable --now duplicacy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install duplicacy\nsudo apt install -y duplicacy\n\n# Enable and start service\nsudo systemctl enable --now duplicacy\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install duplicacy\nsudo pacman -S duplicacy\n\n# Enable and start service\nsudo systemctl enable --now duplicacy\n\n# Verify installation\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install duplicacy\napk add --no-cache duplicacy\n\n# Enable and start service\nrc-update add duplicacy default\nrc-service duplicacy start\n\n# Verify installation\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install duplicacy\nsudo zypper install -y duplicacy\n\n# Enable and start service\nsudo systemctl enable --now duplicacy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install duplicacy\n\n# Start service\nbrew services start duplicacy\n\n# Verify installation\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install duplicacy\n\n# Enable in rc.conf\necho &#039;duplicacy_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice duplicacy start\n\n# Verify installation\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install duplicacy\n\n# Or using Scoop\nscoop install duplicacy\n\n# Verify installation\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/duplicacy\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nduplicacy --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable duplicacy\n\n# Start service\nsudo systemctl start duplicacy\n\n# Stop service\nsudo systemctl stop duplicacy\n\n# Restart service\nsudo systemctl restart duplicacy\n\n# Check status\nsudo systemctl status duplicacy\n\n# View logs\nsudo journalctl -u duplicacy -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add duplicacy default\n\n# Start service\nrc-service duplicacy start\n\n# Stop service\nrc-service duplicacy stop\n\n# Restart service\nrc-service duplicacy restart\n\n# Check status\nrc-service duplicacy status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;duplicacy_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice duplicacy start\n\n# Stop service\nservice duplicacy stop\n\n# Restart service\nservice duplicacy restart\n\n# Check status\nservice duplicacy status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start duplicacy\nbrew services stop duplicacy\nbrew services restart duplicacy\n\n# Check status\nbrew services list | grep duplicacy</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start duplicacy\n\n# Stop service\nnet stop duplicacy\n\n# Using PowerShell\nStart-Service duplicacy\nStop-Service duplicacy\nRestart-Service duplicacy\n\n# Check status\nGet-Service duplicacy</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream duplicacy_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name duplicacy.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name duplicacy.example.com;\n\n    ssl_certificate /etc/ssl/certs/duplicacy.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/duplicacy.example.com.key;\n\n    location / {\n        proxy_pass http://duplicacy_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName duplicacy.example.com\n    Redirect permanent / https://duplicacy.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName duplicacy.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/duplicacy.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/duplicacy.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend duplicacy_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/duplicacy.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend duplicacy_backend\n\nbackend duplicacy_backend\n    balance roundrobin\n    server duplicacy1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R duplicacy:duplicacy /etc/duplicacy\nsudo chmod 750 /etc/duplicacy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status duplicacy\n\n# View logs\nsudo journalctl -u duplicacy -f\n\n# Monitor resource usage\ntop -p $(pgrep duplicacy)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/duplicacy&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/duplicacy-backup-$DATE.tar.gz&quot; /etc/duplicacy /var/lib/duplicacy\n\necho &quot;Backup completed: $BACKUP_DIR/duplicacy-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop duplicacy\n\n# Restore from backup\ntar -xzf /backup/duplicacy/duplicacy-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start duplicacy</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u duplicacy -n 100\nsudo tail -f /var/log/duplicacy/duplicacy.log\n\n# Check configuration\nduplicacy --version\n\n# Check permissions\nls -la /etc/duplicacy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep duplicacy)\n\n# Check disk I/O\niotop -p $(pgrep duplicacy)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  duplicacy:\n    image: duplicacy:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/duplicacy\n      - ./data:/var/lib/duplicacy\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update duplicacy\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade duplicacy\n\n# Arch Linux\nsudo pacman -Syu duplicacy\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade duplicacy\n\n# openSUSE\nsudo zypper update duplicacy\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade duplicacy\n\n# Always backup before updates\ntar -czf /backup/duplicacy-pre-update-$(date +%Y%m%d).tar.gz /etc/duplicacy\n\n# Restart after updates\nsudo systemctl restart duplicacy</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/duplicacy\n\n# Clean old logs\nfind /var/log/duplicacy -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/duplicacy</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.duplicacy.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/duplicacy/duplicacy</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.duplicacy.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.duplicacy.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1158,"lastBuilt":"2025-09-16T03:17:49.442Z","metadataVersion":"2.0"},{"name":"elasticsearch_oss","displayName":"elasticsearch-oss Installation Guide","slug":"elasticsearch_oss","description":"elasticsearch-oss is a free and open-source search and analytics engine. Elasticsearch provides distributed RESTful search and analytics","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9200],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/elasticsearch_oss","documentationUrl":"https://howtomgr.github.io/miscellaneous/elasticsearch_oss","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/elasticsearch_oss","updatedAt":"2025-09-16T03:08:22Z","createdAt":"2025-09-16T02:33:43Z","readmeRaw":"# elasticsearch-oss Installation Guide\n\nelasticsearch-oss is a free and open-source search and analytics engine. Elasticsearch provides distributed RESTful search and analytics\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 4GB minimum (8GB+ recommended)\n  - Storage: 50GB+ for indices\n  - Network: HTTP/REST API\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9200 (default elasticsearch-oss port)\n  - Transport on 9300\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install elasticsearch-oss\nsudo dnf install -y elasticsearch_oss\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch-oss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelasticsearch-oss --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install elasticsearch-oss\nsudo apt install -y elasticsearch_oss\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch-oss\n\n# Configure firewall\nsudo ufw allow 9200\n\n# Verify installation\nelasticsearch-oss --version\n```\n\n### Arch Linux\n\n```bash\n# Install elasticsearch-oss\nsudo pacman -S elasticsearch_oss\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch-oss\n\n# Verify installation\nelasticsearch-oss --version\n```\n\n### Alpine Linux\n\n```bash\n# Install elasticsearch-oss\napk add --no-cache elasticsearch_oss\n\n# Enable and start service\nrc-update add elasticsearch-oss default\nrc-service elasticsearch-oss start\n\n# Verify installation\nelasticsearch-oss --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install elasticsearch-oss\nsudo zypper install -y elasticsearch_oss\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch-oss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelasticsearch-oss --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install elasticsearch_oss\n\n# Start service\nbrew services start elasticsearch_oss\n\n# Verify installation\nelasticsearch-oss --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install elasticsearch_oss\n\n# Enable in rc.conf\necho 'elasticsearch-oss_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice elasticsearch-oss start\n\n# Verify installation\nelasticsearch-oss --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install elasticsearch_oss\n\n# Or using Scoop\nscoop install elasticsearch_oss\n\n# Verify installation\nelasticsearch-oss --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/elasticsearch_oss\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nelasticsearch-oss --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable elasticsearch-oss\n\n# Start service\nsudo systemctl start elasticsearch-oss\n\n# Stop service\nsudo systemctl stop elasticsearch-oss\n\n# Restart service\nsudo systemctl restart elasticsearch-oss\n\n# Check status\nsudo systemctl status elasticsearch-oss\n\n# View logs\nsudo journalctl -u elasticsearch-oss -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add elasticsearch-oss default\n\n# Start service\nrc-service elasticsearch-oss start\n\n# Stop service\nrc-service elasticsearch-oss stop\n\n# Restart service\nrc-service elasticsearch-oss restart\n\n# Check status\nrc-service elasticsearch-oss status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'elasticsearch-oss_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice elasticsearch-oss start\n\n# Stop service\nservice elasticsearch-oss stop\n\n# Restart service\nservice elasticsearch-oss restart\n\n# Check status\nservice elasticsearch-oss status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start elasticsearch_oss\nbrew services stop elasticsearch_oss\nbrew services restart elasticsearch_oss\n\n# Check status\nbrew services list | grep elasticsearch_oss\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start elasticsearch-oss\n\n# Stop service\nnet stop elasticsearch-oss\n\n# Using PowerShell\nStart-Service elasticsearch-oss\nStop-Service elasticsearch-oss\nRestart-Service elasticsearch-oss\n\n# Check status\nGet-Service elasticsearch-oss\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream elasticsearch_oss_backend {\n    server 127.0.0.1:9200;\n}\n\nserver {\n    listen 80;\n    server_name elasticsearch_oss.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name elasticsearch_oss.example.com;\n\n    ssl_certificate /etc/ssl/certs/elasticsearch_oss.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/elasticsearch_oss.example.com.key;\n\n    location / {\n        proxy_pass http://elasticsearch_oss_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName elasticsearch_oss.example.com\n    Redirect permanent / https://elasticsearch_oss.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName elasticsearch_oss.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/elasticsearch_oss.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/elasticsearch_oss.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9200/\n    ProxyPassReverse / http://127.0.0.1:9200/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend elasticsearch_oss_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/elasticsearch_oss.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend elasticsearch_oss_backend\n\nbackend elasticsearch_oss_backend\n    balance roundrobin\n    server elasticsearch_oss1 127.0.0.1:9200 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R elasticsearch_oss:elasticsearch_oss /etc/elasticsearch_oss\nsudo chmod 750 /etc/elasticsearch_oss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status elasticsearch-oss\n\n# View logs\nsudo journalctl -u elasticsearch-oss -f\n\n# Monitor resource usage\ntop -p $(pgrep elasticsearch_oss)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/elasticsearch_oss\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/elasticsearch_oss-backup-$DATE.tar.gz\" /etc/elasticsearch_oss /var/lib/elasticsearch_oss\n\necho \"Backup completed: $BACKUP_DIR/elasticsearch_oss-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop elasticsearch-oss\n\n# Restore from backup\ntar -xzf /backup/elasticsearch_oss/elasticsearch_oss-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start elasticsearch-oss\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u elasticsearch-oss -n 100\nsudo tail -f /var/log/elasticsearch_oss/elasticsearch_oss.log\n\n# Check configuration\nelasticsearch-oss --version\n\n# Check permissions\nls -la /etc/elasticsearch_oss\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9200\n\n# Test connectivity\ntelnet localhost 9200\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep elasticsearch_oss)\n\n# Check disk I/O\niotop -p $(pgrep elasticsearch_oss)\n\n# Check connections\nss -an | grep 9200\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  elasticsearch_oss:\n    image: elasticsearch_oss:latest\n    ports:\n      - \"9200:9200\"\n    volumes:\n      - ./config:/etc/elasticsearch_oss\n      - ./data:/var/lib/elasticsearch_oss\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update elasticsearch_oss\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade elasticsearch_oss\n\n# Arch Linux\nsudo pacman -Syu elasticsearch_oss\n\n# Alpine Linux\napk update && apk upgrade elasticsearch_oss\n\n# openSUSE\nsudo zypper update elasticsearch_oss\n\n# FreeBSD\npkg update && pkg upgrade elasticsearch_oss\n\n# Always backup before updates\ntar -czf /backup/elasticsearch_oss-pre-update-$(date +%Y%m%d).tar.gz /etc/elasticsearch_oss\n\n# Restart after updates\nsudo systemctl restart elasticsearch-oss\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/elasticsearch_oss\n\n# Clean old logs\nfind /var/log/elasticsearch_oss -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/elasticsearch_oss\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.elasticsearch_oss.org/\n- GitHub Repository: https://github.com/elasticsearch_oss/elasticsearch_oss\n- Community Forum: https://forum.elasticsearch_oss.org/\n- Best Practices Guide: https://docs.elasticsearch_oss.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"elasticsearch-oss-installation-guide\" class=\"mobile-header\">elasticsearch-oss Installation Guide</h1>\n<p class=\"mobile-paragraph\">elasticsearch-oss is a free and open-source search and analytics engine. Elasticsearch provides distributed RESTful search and analytics</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 50GB+ for indices</li>\n<li class=\"mobile-list-item\">Network: HTTP/REST API</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9200 (default elasticsearch-oss port)</li>\n<li class=\"mobile-list-item\">Transport on 9300</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install elasticsearch-oss\nsudo dnf install -y elasticsearch_oss\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch-oss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install elasticsearch-oss\nsudo apt install -y elasticsearch_oss\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch-oss\n\n# Configure firewall\nsudo ufw allow 9200\n\n# Verify installation\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install elasticsearch-oss\nsudo pacman -S elasticsearch_oss\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch-oss\n\n# Verify installation\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install elasticsearch-oss\napk add --no-cache elasticsearch_oss\n\n# Enable and start service\nrc-update add elasticsearch-oss default\nrc-service elasticsearch-oss start\n\n# Verify installation\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install elasticsearch-oss\nsudo zypper install -y elasticsearch_oss\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch-oss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install elasticsearch_oss\n\n# Start service\nbrew services start elasticsearch_oss\n\n# Verify installation\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install elasticsearch_oss\n\n# Enable in rc.conf\necho &#039;elasticsearch-oss_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice elasticsearch-oss start\n\n# Verify installation\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install elasticsearch_oss\n\n# Or using Scoop\nscoop install elasticsearch_oss\n\n# Verify installation\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/elasticsearch_oss\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nelasticsearch-oss --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable elasticsearch-oss\n\n# Start service\nsudo systemctl start elasticsearch-oss\n\n# Stop service\nsudo systemctl stop elasticsearch-oss\n\n# Restart service\nsudo systemctl restart elasticsearch-oss\n\n# Check status\nsudo systemctl status elasticsearch-oss\n\n# View logs\nsudo journalctl -u elasticsearch-oss -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add elasticsearch-oss default\n\n# Start service\nrc-service elasticsearch-oss start\n\n# Stop service\nrc-service elasticsearch-oss stop\n\n# Restart service\nrc-service elasticsearch-oss restart\n\n# Check status\nrc-service elasticsearch-oss status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;elasticsearch-oss_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice elasticsearch-oss start\n\n# Stop service\nservice elasticsearch-oss stop\n\n# Restart service\nservice elasticsearch-oss restart\n\n# Check status\nservice elasticsearch-oss status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start elasticsearch_oss\nbrew services stop elasticsearch_oss\nbrew services restart elasticsearch_oss\n\n# Check status\nbrew services list | grep elasticsearch_oss</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start elasticsearch-oss\n\n# Stop service\nnet stop elasticsearch-oss\n\n# Using PowerShell\nStart-Service elasticsearch-oss\nStop-Service elasticsearch-oss\nRestart-Service elasticsearch-oss\n\n# Check status\nGet-Service elasticsearch-oss</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream elasticsearch_oss_backend {\n    server 127.0.0.1:9200;\n}\n\nserver {\n    listen 80;\n    server_name elasticsearch_oss.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name elasticsearch_oss.example.com;\n\n    ssl_certificate /etc/ssl/certs/elasticsearch_oss.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/elasticsearch_oss.example.com.key;\n\n    location / {\n        proxy_pass http://elasticsearch_oss_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName elasticsearch_oss.example.com\n    Redirect permanent / https://elasticsearch_oss.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName elasticsearch_oss.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/elasticsearch_oss.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/elasticsearch_oss.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9200/\n    ProxyPassReverse / http://127.0.0.1:9200/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend elasticsearch_oss_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/elasticsearch_oss.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend elasticsearch_oss_backend\n\nbackend elasticsearch_oss_backend\n    balance roundrobin\n    server elasticsearch_oss1 127.0.0.1:9200 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R elasticsearch_oss:elasticsearch_oss /etc/elasticsearch_oss\nsudo chmod 750 /etc/elasticsearch_oss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status elasticsearch-oss\n\n# View logs\nsudo journalctl -u elasticsearch-oss -f\n\n# Monitor resource usage\ntop -p $(pgrep elasticsearch_oss)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/elasticsearch_oss&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/elasticsearch_oss-backup-$DATE.tar.gz&quot; /etc/elasticsearch_oss /var/lib/elasticsearch_oss\n\necho &quot;Backup completed: $BACKUP_DIR/elasticsearch_oss-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop elasticsearch-oss\n\n# Restore from backup\ntar -xzf /backup/elasticsearch_oss/elasticsearch_oss-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start elasticsearch-oss</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u elasticsearch-oss -n 100\nsudo tail -f /var/log/elasticsearch_oss/elasticsearch_oss.log\n\n# Check configuration\nelasticsearch-oss --version\n\n# Check permissions\nls -la /etc/elasticsearch_oss</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9200\n\n# Test connectivity\ntelnet localhost 9200\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep elasticsearch_oss)\n\n# Check disk I/O\niotop -p $(pgrep elasticsearch_oss)\n\n# Check connections\nss -an | grep 9200</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  elasticsearch_oss:\n    image: elasticsearch_oss:latest\n    ports:\n      - &quot;9200:9200&quot;\n    volumes:\n      - ./config:/etc/elasticsearch_oss\n      - ./data:/var/lib/elasticsearch_oss\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update elasticsearch_oss\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade elasticsearch_oss\n\n# Arch Linux\nsudo pacman -Syu elasticsearch_oss\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade elasticsearch_oss\n\n# openSUSE\nsudo zypper update elasticsearch_oss\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade elasticsearch_oss\n\n# Always backup before updates\ntar -czf /backup/elasticsearch_oss-pre-update-$(date +%Y%m%d).tar.gz /etc/elasticsearch_oss\n\n# Restart after updates\nsudo systemctl restart elasticsearch-oss</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/elasticsearch_oss\n\n# Clean old logs\nfind /var/log/elasticsearch_oss -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/elasticsearch_oss</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.elasticsearch_oss.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/elasticsearch_oss/elasticsearch_oss</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.elasticsearch_oss.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.elasticsearch_oss.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1158,"lastBuilt":"2025-09-16T03:17:47.666Z","metadataVersion":"2.0"},{"name":"element-web","displayName":"element-web Installation Guide","slug":"element-web","description":"element-web is a free and open-source Matrix web client. Element provides web-based Matrix client (formerly Riot)","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/element-web","documentationUrl":"https://howtomgr.github.io/miscellaneous/element-web","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/element-web","updatedAt":"2025-09-16T03:08:35Z","createdAt":"2025-09-16T02:33:55Z","readmeRaw":"# element-web Installation Guide\n\nelement-web is a free and open-source Matrix web client. Element provides web-based Matrix client (formerly Riot)\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for app\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default element-web port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install element-web\nsudo dnf install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelement-web --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install element-web\nsudo apt install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nelement-web --version\n```\n\n### Arch Linux\n\n```bash\n# Install element-web\nsudo pacman -S element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Verify installation\nelement-web --version\n```\n\n### Alpine Linux\n\n```bash\n# Install element-web\napk add --no-cache element-web\n\n# Enable and start service\nrc-update add nginx default\nrc-service nginx start\n\n# Verify installation\nelement-web --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install element-web\nsudo zypper install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelement-web --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install element-web\n\n# Start service\nbrew services start element-web\n\n# Verify installation\nelement-web --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install element-web\n\n# Enable in rc.conf\necho 'nginx_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Verify installation\nelement-web --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install element-web\n\n# Or using Scoop\nscoop install element-web\n\n# Verify installation\nelement-web --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/element-web\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nelement-web --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable nginx\n\n# Start service\nsudo systemctl start nginx\n\n# Stop service\nsudo systemctl stop nginx\n\n# Restart service\nsudo systemctl restart nginx\n\n# Check status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add nginx default\n\n# Start service\nrc-service nginx start\n\n# Stop service\nrc-service nginx stop\n\n# Restart service\nrc-service nginx restart\n\n# Check status\nrc-service nginx status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'nginx_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Stop service\nservice nginx stop\n\n# Restart service\nservice nginx restart\n\n# Check status\nservice nginx status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start element-web\nbrew services stop element-web\nbrew services restart element-web\n\n# Check status\nbrew services list | grep element-web\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start nginx\n\n# Stop service\nnet stop nginx\n\n# Using PowerShell\nStart-Service nginx\nStop-Service nginx\nRestart-Service nginx\n\n# Check status\nGet-Service nginx\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream element-web_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name element-web.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name element-web.example.com;\n\n    ssl_certificate /etc/ssl/certs/element-web.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/element-web.example.com.key;\n\n    location / {\n        proxy_pass http://element-web_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName element-web.example.com\n    Redirect permanent / https://element-web.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName element-web.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/element-web.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/element-web.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend element-web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/element-web.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend element-web_backend\n\nbackend element-web_backend\n    balance roundrobin\n    server element-web1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R element-web:element-web /etc/element-web\nsudo chmod 750 /etc/element-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f\n\n# Monitor resource usage\ntop -p $(pgrep element-web)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/element-web\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/element-web-backup-$DATE.tar.gz\" /etc/element-web /var/lib/element-web\n\necho \"Backup completed: $BACKUP_DIR/element-web-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop nginx\n\n# Restore from backup\ntar -xzf /backup/element-web/element-web-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start nginx\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u nginx -n 100\nsudo tail -f /var/log/element-web/element-web.log\n\n# Check configuration\nelement-web --version\n\n# Check permissions\nls -la /etc/element-web\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep element-web)\n\n# Check disk I/O\niotop -p $(pgrep element-web)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  element-web:\n    image: element-web:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/element-web\n      - ./data:/var/lib/element-web\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update element-web\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade element-web\n\n# Arch Linux\nsudo pacman -Syu element-web\n\n# Alpine Linux\napk update && apk upgrade element-web\n\n# openSUSE\nsudo zypper update element-web\n\n# FreeBSD\npkg update && pkg upgrade element-web\n\n# Always backup before updates\ntar -czf /backup/element-web-pre-update-$(date +%Y%m%d).tar.gz /etc/element-web\n\n# Restart after updates\nsudo systemctl restart nginx\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/element-web\n\n# Clean old logs\nfind /var/log/element-web -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/element-web\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.element-web.org/\n- GitHub Repository: https://github.com/element-web/element-web\n- Community Forum: https://forum.element-web.org/\n- Best Practices Guide: https://docs.element-web.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"element-web-installation-guide\" class=\"mobile-header\">element-web Installation Guide</h1>\n<p class=\"mobile-paragraph\">element-web is a free and open-source Matrix web client. Element provides web-based Matrix client (formerly Riot)</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for app</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default element-web port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install element-web\nsudo dnf install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install element-web\nsudo apt install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install element-web\nsudo pacman -S element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install element-web\napk add --no-cache element-web\n\n# Enable and start service\nrc-update add nginx default\nrc-service nginx start\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install element-web\nsudo zypper install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install element-web\n\n# Start service\nbrew services start element-web\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install element-web\n\n# Enable in rc.conf\necho &#039;nginx_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install element-web\n\n# Or using Scoop\nscoop install element-web\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/element-web\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable nginx\n\n# Start service\nsudo systemctl start nginx\n\n# Stop service\nsudo systemctl stop nginx\n\n# Restart service\nsudo systemctl restart nginx\n\n# Check status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add nginx default\n\n# Start service\nrc-service nginx start\n\n# Stop service\nrc-service nginx stop\n\n# Restart service\nrc-service nginx restart\n\n# Check status\nrc-service nginx status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;nginx_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Stop service\nservice nginx stop\n\n# Restart service\nservice nginx restart\n\n# Check status\nservice nginx status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start element-web\nbrew services stop element-web\nbrew services restart element-web\n\n# Check status\nbrew services list | grep element-web</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start nginx\n\n# Stop service\nnet stop nginx\n\n# Using PowerShell\nStart-Service nginx\nStop-Service nginx\nRestart-Service nginx\n\n# Check status\nGet-Service nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream element-web_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name element-web.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name element-web.example.com;\n\n    ssl_certificate /etc/ssl/certs/element-web.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/element-web.example.com.key;\n\n    location / {\n        proxy_pass http://element-web_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName element-web.example.com\n    Redirect permanent / https://element-web.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName element-web.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/element-web.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/element-web.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend element-web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/element-web.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend element-web_backend\n\nbackend element-web_backend\n    balance roundrobin\n    server element-web1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R element-web:element-web /etc/element-web\nsudo chmod 750 /etc/element-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f\n\n# Monitor resource usage\ntop -p $(pgrep element-web)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/element-web&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/element-web-backup-$DATE.tar.gz&quot; /etc/element-web /var/lib/element-web\n\necho &quot;Backup completed: $BACKUP_DIR/element-web-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop nginx\n\n# Restore from backup\ntar -xzf /backup/element-web/element-web-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u nginx -n 100\nsudo tail -f /var/log/element-web/element-web.log\n\n# Check configuration\nelement-web --version\n\n# Check permissions\nls -la /etc/element-web</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep element-web)\n\n# Check disk I/O\niotop -p $(pgrep element-web)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  element-web:\n    image: element-web:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/element-web\n      - ./data:/var/lib/element-web\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update element-web\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade element-web\n\n# Arch Linux\nsudo pacman -Syu element-web\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade element-web\n\n# openSUSE\nsudo zypper update element-web\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade element-web\n\n# Always backup before updates\ntar -czf /backup/element-web-pre-update-$(date +%Y%m%d).tar.gz /etc/element-web\n\n# Restart after updates\nsudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/element-web\n\n# Clean old logs\nfind /var/log/element-web -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/element-web</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.element-web.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/element-web/element-web</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.element-web.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.element-web.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1154,"lastBuilt":"2025-09-16T03:17:47.310Z","metadataVersion":"2.0"},{"name":"erpnext","displayName":"erpnext Installation Guide","slug":"erpnext","description":"erpnext is a free and open-source enterprise resource planning. ERPNext provides full-featured ERP system built on Frappe","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/erpnext","documentationUrl":"https://howtomgr.github.io/miscellaneous/erpnext","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/erpnext","updatedAt":"2025-09-16T03:09:10Z","createdAt":"2025-09-16T02:34:44Z","readmeRaw":"# erpnext Installation Guide\n\nerpnext is a free and open-source enterprise resource planning. ERPNext provides full-featured ERP system built on Frappe\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 4GB minimum\n  - Storage: 20GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default erpnext port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install erpnext\nsudo dnf install -y erpnext\n\n# Enable and start service\nsudo systemctl enable --now erpnext\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nerpnext --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install erpnext\nsudo apt install -y erpnext\n\n# Enable and start service\nsudo systemctl enable --now erpnext\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nerpnext --version\n```\n\n### Arch Linux\n\n```bash\n# Install erpnext\nsudo pacman -S erpnext\n\n# Enable and start service\nsudo systemctl enable --now erpnext\n\n# Verify installation\nerpnext --version\n```\n\n### Alpine Linux\n\n```bash\n# Install erpnext\napk add --no-cache erpnext\n\n# Enable and start service\nrc-update add erpnext default\nrc-service erpnext start\n\n# Verify installation\nerpnext --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install erpnext\nsudo zypper install -y erpnext\n\n# Enable and start service\nsudo systemctl enable --now erpnext\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nerpnext --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install erpnext\n\n# Start service\nbrew services start erpnext\n\n# Verify installation\nerpnext --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install erpnext\n\n# Enable in rc.conf\necho 'erpnext_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice erpnext start\n\n# Verify installation\nerpnext --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install erpnext\n\n# Or using Scoop\nscoop install erpnext\n\n# Verify installation\nerpnext --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/erpnext\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nerpnext --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable erpnext\n\n# Start service\nsudo systemctl start erpnext\n\n# Stop service\nsudo systemctl stop erpnext\n\n# Restart service\nsudo systemctl restart erpnext\n\n# Check status\nsudo systemctl status erpnext\n\n# View logs\nsudo journalctl -u erpnext -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add erpnext default\n\n# Start service\nrc-service erpnext start\n\n# Stop service\nrc-service erpnext stop\n\n# Restart service\nrc-service erpnext restart\n\n# Check status\nrc-service erpnext status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'erpnext_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice erpnext start\n\n# Stop service\nservice erpnext stop\n\n# Restart service\nservice erpnext restart\n\n# Check status\nservice erpnext status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start erpnext\nbrew services stop erpnext\nbrew services restart erpnext\n\n# Check status\nbrew services list | grep erpnext\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start erpnext\n\n# Stop service\nnet stop erpnext\n\n# Using PowerShell\nStart-Service erpnext\nStop-Service erpnext\nRestart-Service erpnext\n\n# Check status\nGet-Service erpnext\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream erpnext_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name erpnext.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name erpnext.example.com;\n\n    ssl_certificate /etc/ssl/certs/erpnext.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/erpnext.example.com.key;\n\n    location / {\n        proxy_pass http://erpnext_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName erpnext.example.com\n    Redirect permanent / https://erpnext.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName erpnext.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/erpnext.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/erpnext.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend erpnext_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/erpnext.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend erpnext_backend\n\nbackend erpnext_backend\n    balance roundrobin\n    server erpnext1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R erpnext:erpnext /etc/erpnext\nsudo chmod 750 /etc/erpnext\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status erpnext\n\n# View logs\nsudo journalctl -u erpnext -f\n\n# Monitor resource usage\ntop -p $(pgrep erpnext)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/erpnext\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/erpnext-backup-$DATE.tar.gz\" /etc/erpnext /var/lib/erpnext\n\necho \"Backup completed: $BACKUP_DIR/erpnext-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop erpnext\n\n# Restore from backup\ntar -xzf /backup/erpnext/erpnext-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start erpnext\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u erpnext -n 100\nsudo tail -f /var/log/erpnext/erpnext.log\n\n# Check configuration\nerpnext --version\n\n# Check permissions\nls -la /etc/erpnext\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep erpnext)\n\n# Check disk I/O\niotop -p $(pgrep erpnext)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  erpnext:\n    image: erpnext:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/erpnext\n      - ./data:/var/lib/erpnext\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update erpnext\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade erpnext\n\n# Arch Linux\nsudo pacman -Syu erpnext\n\n# Alpine Linux\napk update && apk upgrade erpnext\n\n# openSUSE\nsudo zypper update erpnext\n\n# FreeBSD\npkg update && pkg upgrade erpnext\n\n# Always backup before updates\ntar -czf /backup/erpnext-pre-update-$(date +%Y%m%d).tar.gz /etc/erpnext\n\n# Restart after updates\nsudo systemctl restart erpnext\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/erpnext\n\n# Clean old logs\nfind /var/log/erpnext -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/erpnext\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.erpnext.org/\n- GitHub Repository: https://github.com/erpnext/erpnext\n- Community Forum: https://forum.erpnext.org/\n- Best Practices Guide: https://docs.erpnext.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"erpnext-installation-guide\" class=\"mobile-header\">erpnext Installation Guide</h1>\n<p class=\"mobile-paragraph\">erpnext is a free and open-source enterprise resource planning. ERPNext provides full-featured ERP system built on Frappe</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 20GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default erpnext port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install erpnext\nsudo dnf install -y erpnext\n\n# Enable and start service\nsudo systemctl enable --now erpnext\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install erpnext\nsudo apt install -y erpnext\n\n# Enable and start service\nsudo systemctl enable --now erpnext\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install erpnext\nsudo pacman -S erpnext\n\n# Enable and start service\nsudo systemctl enable --now erpnext\n\n# Verify installation\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install erpnext\napk add --no-cache erpnext\n\n# Enable and start service\nrc-update add erpnext default\nrc-service erpnext start\n\n# Verify installation\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install erpnext\nsudo zypper install -y erpnext\n\n# Enable and start service\nsudo systemctl enable --now erpnext\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install erpnext\n\n# Start service\nbrew services start erpnext\n\n# Verify installation\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install erpnext\n\n# Enable in rc.conf\necho &#039;erpnext_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice erpnext start\n\n# Verify installation\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install erpnext\n\n# Or using Scoop\nscoop install erpnext\n\n# Verify installation\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/erpnext\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nerpnext --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable erpnext\n\n# Start service\nsudo systemctl start erpnext\n\n# Stop service\nsudo systemctl stop erpnext\n\n# Restart service\nsudo systemctl restart erpnext\n\n# Check status\nsudo systemctl status erpnext\n\n# View logs\nsudo journalctl -u erpnext -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add erpnext default\n\n# Start service\nrc-service erpnext start\n\n# Stop service\nrc-service erpnext stop\n\n# Restart service\nrc-service erpnext restart\n\n# Check status\nrc-service erpnext status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;erpnext_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice erpnext start\n\n# Stop service\nservice erpnext stop\n\n# Restart service\nservice erpnext restart\n\n# Check status\nservice erpnext status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start erpnext\nbrew services stop erpnext\nbrew services restart erpnext\n\n# Check status\nbrew services list | grep erpnext</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start erpnext\n\n# Stop service\nnet stop erpnext\n\n# Using PowerShell\nStart-Service erpnext\nStop-Service erpnext\nRestart-Service erpnext\n\n# Check status\nGet-Service erpnext</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream erpnext_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name erpnext.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name erpnext.example.com;\n\n    ssl_certificate /etc/ssl/certs/erpnext.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/erpnext.example.com.key;\n\n    location / {\n        proxy_pass http://erpnext_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName erpnext.example.com\n    Redirect permanent / https://erpnext.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName erpnext.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/erpnext.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/erpnext.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend erpnext_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/erpnext.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend erpnext_backend\n\nbackend erpnext_backend\n    balance roundrobin\n    server erpnext1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R erpnext:erpnext /etc/erpnext\nsudo chmod 750 /etc/erpnext\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status erpnext\n\n# View logs\nsudo journalctl -u erpnext -f\n\n# Monitor resource usage\ntop -p $(pgrep erpnext)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/erpnext&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/erpnext-backup-$DATE.tar.gz&quot; /etc/erpnext /var/lib/erpnext\n\necho &quot;Backup completed: $BACKUP_DIR/erpnext-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop erpnext\n\n# Restore from backup\ntar -xzf /backup/erpnext/erpnext-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start erpnext</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u erpnext -n 100\nsudo tail -f /var/log/erpnext/erpnext.log\n\n# Check configuration\nerpnext --version\n\n# Check permissions\nls -la /etc/erpnext</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep erpnext)\n\n# Check disk I/O\niotop -p $(pgrep erpnext)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  erpnext:\n    image: erpnext:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/erpnext\n      - ./data:/var/lib/erpnext\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update erpnext\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade erpnext\n\n# Arch Linux\nsudo pacman -Syu erpnext\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade erpnext\n\n# openSUSE\nsudo zypper update erpnext\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade erpnext\n\n# Always backup before updates\ntar -czf /backup/erpnext-pre-update-$(date +%Y%m%d).tar.gz /etc/erpnext\n\n# Restart after updates\nsudo systemctl restart erpnext</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/erpnext\n\n# Clean old logs\nfind /var/log/erpnext -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/erpnext</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.erpnext.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/erpnext/erpnext</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.erpnext.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.erpnext.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1156,"lastBuilt":"2025-09-16T03:17:45.468Z","metadataVersion":"2.0"},{"name":"esphome","displayName":"esphome Installation Guide","slug":"esphome","description":"esphome is a free and open-source ESP device system. ESPHome provides system to control ESP8266/ESP32","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,6052],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/esphome","documentationUrl":"https://howtomgr.github.io/miscellaneous/esphome","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/esphome","updatedAt":"2025-09-16T03:09:17Z","createdAt":"2025-09-16T02:34:53Z","readmeRaw":"# esphome Installation Guide\n\nesphome is a free and open-source ESP device system. ESPHome provides system to control ESP8266/ESP32\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for configs\n  - Network: HTTP/OTA\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 6052 (default esphome port)\n  - Dashboard on 6052\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install esphome\nsudo dnf install -y esphome\n\n# Enable and start service\nsudo systemctl enable --now esphome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6052/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nesphome --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install esphome\nsudo apt install -y esphome\n\n# Enable and start service\nsudo systemctl enable --now esphome\n\n# Configure firewall\nsudo ufw allow 6052\n\n# Verify installation\nesphome --version\n```\n\n### Arch Linux\n\n```bash\n# Install esphome\nsudo pacman -S esphome\n\n# Enable and start service\nsudo systemctl enable --now esphome\n\n# Verify installation\nesphome --version\n```\n\n### Alpine Linux\n\n```bash\n# Install esphome\napk add --no-cache esphome\n\n# Enable and start service\nrc-update add esphome default\nrc-service esphome start\n\n# Verify installation\nesphome --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install esphome\nsudo zypper install -y esphome\n\n# Enable and start service\nsudo systemctl enable --now esphome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6052/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nesphome --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install esphome\n\n# Start service\nbrew services start esphome\n\n# Verify installation\nesphome --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install esphome\n\n# Enable in rc.conf\necho 'esphome_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice esphome start\n\n# Verify installation\nesphome --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install esphome\n\n# Or using Scoop\nscoop install esphome\n\n# Verify installation\nesphome --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/esphome\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nesphome --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable esphome\n\n# Start service\nsudo systemctl start esphome\n\n# Stop service\nsudo systemctl stop esphome\n\n# Restart service\nsudo systemctl restart esphome\n\n# Check status\nsudo systemctl status esphome\n\n# View logs\nsudo journalctl -u esphome -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add esphome default\n\n# Start service\nrc-service esphome start\n\n# Stop service\nrc-service esphome stop\n\n# Restart service\nrc-service esphome restart\n\n# Check status\nrc-service esphome status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'esphome_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice esphome start\n\n# Stop service\nservice esphome stop\n\n# Restart service\nservice esphome restart\n\n# Check status\nservice esphome status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start esphome\nbrew services stop esphome\nbrew services restart esphome\n\n# Check status\nbrew services list | grep esphome\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start esphome\n\n# Stop service\nnet stop esphome\n\n# Using PowerShell\nStart-Service esphome\nStop-Service esphome\nRestart-Service esphome\n\n# Check status\nGet-Service esphome\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream esphome_backend {\n    server 127.0.0.1:6052;\n}\n\nserver {\n    listen 80;\n    server_name esphome.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name esphome.example.com;\n\n    ssl_certificate /etc/ssl/certs/esphome.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/esphome.example.com.key;\n\n    location / {\n        proxy_pass http://esphome_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName esphome.example.com\n    Redirect permanent / https://esphome.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName esphome.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/esphome.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/esphome.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6052/\n    ProxyPassReverse / http://127.0.0.1:6052/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend esphome_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/esphome.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend esphome_backend\n\nbackend esphome_backend\n    balance roundrobin\n    server esphome1 127.0.0.1:6052 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R esphome:esphome /etc/esphome\nsudo chmod 750 /etc/esphome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6052/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status esphome\n\n# View logs\nsudo journalctl -u esphome -f\n\n# Monitor resource usage\ntop -p $(pgrep esphome)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/esphome\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/esphome-backup-$DATE.tar.gz\" /etc/esphome /var/lib/esphome\n\necho \"Backup completed: $BACKUP_DIR/esphome-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop esphome\n\n# Restore from backup\ntar -xzf /backup/esphome/esphome-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start esphome\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u esphome -n 100\nsudo tail -f /var/log/esphome/esphome.log\n\n# Check configuration\nesphome --version\n\n# Check permissions\nls -la /etc/esphome\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 6052\n\n# Test connectivity\ntelnet localhost 6052\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep esphome)\n\n# Check disk I/O\niotop -p $(pgrep esphome)\n\n# Check connections\nss -an | grep 6052\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  esphome:\n    image: esphome:latest\n    ports:\n      - \"6052:6052\"\n    volumes:\n      - ./config:/etc/esphome\n      - ./data:/var/lib/esphome\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update esphome\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade esphome\n\n# Arch Linux\nsudo pacman -Syu esphome\n\n# Alpine Linux\napk update && apk upgrade esphome\n\n# openSUSE\nsudo zypper update esphome\n\n# FreeBSD\npkg update && pkg upgrade esphome\n\n# Always backup before updates\ntar -czf /backup/esphome-pre-update-$(date +%Y%m%d).tar.gz /etc/esphome\n\n# Restart after updates\nsudo systemctl restart esphome\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/esphome\n\n# Clean old logs\nfind /var/log/esphome -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/esphome\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.esphome.org/\n- GitHub Repository: https://github.com/esphome/esphome\n- Community Forum: https://forum.esphome.org/\n- Best Practices Guide: https://docs.esphome.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"esphome-installation-guide\" class=\"mobile-header\">esphome Installation Guide</h1>\n<p class=\"mobile-paragraph\">esphome is a free and open-source ESP device system. ESPHome provides system to control ESP8266/ESP32</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for configs</li>\n<li class=\"mobile-list-item\">Network: HTTP/OTA</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 6052 (default esphome port)</li>\n<li class=\"mobile-list-item\">Dashboard on 6052</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install esphome\nsudo dnf install -y esphome\n\n# Enable and start service\nsudo systemctl enable --now esphome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6052/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nesphome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install esphome\nsudo apt install -y esphome\n\n# Enable and start service\nsudo systemctl enable --now esphome\n\n# Configure firewall\nsudo ufw allow 6052\n\n# Verify installation\nesphome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install esphome\nsudo pacman -S esphome\n\n# Enable and start service\nsudo systemctl enable --now esphome\n\n# Verify installation\nesphome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install esphome\napk add --no-cache esphome\n\n# Enable and start service\nrc-update add esphome default\nrc-service esphome start\n\n# Verify installation\nesphome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install esphome\nsudo zypper install -y esphome\n\n# Enable and start service\nsudo systemctl enable --now esphome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6052/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nesphome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install esphome\n\n# Start service\nbrew services start esphome\n\n# Verify installation\nesphome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install esphome\n\n# Enable in rc.conf\necho &#039;esphome_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice esphome start\n\n# Verify installation\nesphome --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install esphome\n\n# Or using Scoop\nscoop install esphome\n\n# Verify installation\nesphome --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/esphome\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nesphome --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable esphome\n\n# Start service\nsudo systemctl start esphome\n\n# Stop service\nsudo systemctl stop esphome\n\n# Restart service\nsudo systemctl restart esphome\n\n# Check status\nsudo systemctl status esphome\n\n# View logs\nsudo journalctl -u esphome -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add esphome default\n\n# Start service\nrc-service esphome start\n\n# Stop service\nrc-service esphome stop\n\n# Restart service\nrc-service esphome restart\n\n# Check status\nrc-service esphome status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;esphome_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice esphome start\n\n# Stop service\nservice esphome stop\n\n# Restart service\nservice esphome restart\n\n# Check status\nservice esphome status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start esphome\nbrew services stop esphome\nbrew services restart esphome\n\n# Check status\nbrew services list | grep esphome</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start esphome\n\n# Stop service\nnet stop esphome\n\n# Using PowerShell\nStart-Service esphome\nStop-Service esphome\nRestart-Service esphome\n\n# Check status\nGet-Service esphome</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream esphome_backend {\n    server 127.0.0.1:6052;\n}\n\nserver {\n    listen 80;\n    server_name esphome.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name esphome.example.com;\n\n    ssl_certificate /etc/ssl/certs/esphome.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/esphome.example.com.key;\n\n    location / {\n        proxy_pass http://esphome_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName esphome.example.com\n    Redirect permanent / https://esphome.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName esphome.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/esphome.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/esphome.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6052/\n    ProxyPassReverse / http://127.0.0.1:6052/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend esphome_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/esphome.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend esphome_backend\n\nbackend esphome_backend\n    balance roundrobin\n    server esphome1 127.0.0.1:6052 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R esphome:esphome /etc/esphome\nsudo chmod 750 /etc/esphome\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6052/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status esphome\n\n# View logs\nsudo journalctl -u esphome -f\n\n# Monitor resource usage\ntop -p $(pgrep esphome)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/esphome&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/esphome-backup-$DATE.tar.gz&quot; /etc/esphome /var/lib/esphome\n\necho &quot;Backup completed: $BACKUP_DIR/esphome-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop esphome\n\n# Restore from backup\ntar -xzf /backup/esphome/esphome-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start esphome</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u esphome -n 100\nsudo tail -f /var/log/esphome/esphome.log\n\n# Check configuration\nesphome --version\n\n# Check permissions\nls -la /etc/esphome</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 6052\n\n# Test connectivity\ntelnet localhost 6052\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep esphome)\n\n# Check disk I/O\niotop -p $(pgrep esphome)\n\n# Check connections\nss -an | grep 6052</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  esphome:\n    image: esphome:latest\n    ports:\n      - &quot;6052:6052&quot;\n    volumes:\n      - ./config:/etc/esphome\n      - ./data:/var/lib/esphome\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update esphome\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade esphome\n\n# Arch Linux\nsudo pacman -Syu esphome\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade esphome\n\n# openSUSE\nsudo zypper update esphome\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade esphome\n\n# Always backup before updates\ntar -czf /backup/esphome-pre-update-$(date +%Y%m%d).tar.gz /etc/esphome\n\n# Restart after updates\nsudo systemctl restart esphome</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/esphome\n\n# Clean old logs\nfind /var/log/esphome -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/esphome</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.esphome.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/esphome/esphome</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.esphome.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.esphome.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1154,"lastBuilt":"2025-09-16T03:17:45.150Z","metadataVersion":"2.0"},{"name":"espocrm","displayName":"espocrm Installation Guide","slug":"espocrm","description":"espocrm is a free and open-source customer relationship management. EspoCRM provides flexible CRM with clean interface","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/espocrm","documentationUrl":"https://howtomgr.github.io/miscellaneous/espocrm","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/espocrm","updatedAt":"2025-09-16T03:09:25Z","createdAt":"2025-09-16T02:35:03Z","readmeRaw":"# espocrm Installation Guide\n\nespocrm is a free and open-source customer relationship management. EspoCRM provides flexible CRM with clean interface\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 2GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default espocrm port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install espocrm\nsudo dnf install -y espocrm\n\n# Enable and start service\nsudo systemctl enable --now espocrm\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nespocrm --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install espocrm\nsudo apt install -y espocrm\n\n# Enable and start service\nsudo systemctl enable --now espocrm\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nespocrm --version\n```\n\n### Arch Linux\n\n```bash\n# Install espocrm\nsudo pacman -S espocrm\n\n# Enable and start service\nsudo systemctl enable --now espocrm\n\n# Verify installation\nespocrm --version\n```\n\n### Alpine Linux\n\n```bash\n# Install espocrm\napk add --no-cache espocrm\n\n# Enable and start service\nrc-update add espocrm default\nrc-service espocrm start\n\n# Verify installation\nespocrm --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install espocrm\nsudo zypper install -y espocrm\n\n# Enable and start service\nsudo systemctl enable --now espocrm\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nespocrm --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install espocrm\n\n# Start service\nbrew services start espocrm\n\n# Verify installation\nespocrm --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install espocrm\n\n# Enable in rc.conf\necho 'espocrm_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice espocrm start\n\n# Verify installation\nespocrm --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install espocrm\n\n# Or using Scoop\nscoop install espocrm\n\n# Verify installation\nespocrm --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/espocrm\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nespocrm --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable espocrm\n\n# Start service\nsudo systemctl start espocrm\n\n# Stop service\nsudo systemctl stop espocrm\n\n# Restart service\nsudo systemctl restart espocrm\n\n# Check status\nsudo systemctl status espocrm\n\n# View logs\nsudo journalctl -u espocrm -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add espocrm default\n\n# Start service\nrc-service espocrm start\n\n# Stop service\nrc-service espocrm stop\n\n# Restart service\nrc-service espocrm restart\n\n# Check status\nrc-service espocrm status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'espocrm_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice espocrm start\n\n# Stop service\nservice espocrm stop\n\n# Restart service\nservice espocrm restart\n\n# Check status\nservice espocrm status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start espocrm\nbrew services stop espocrm\nbrew services restart espocrm\n\n# Check status\nbrew services list | grep espocrm\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start espocrm\n\n# Stop service\nnet stop espocrm\n\n# Using PowerShell\nStart-Service espocrm\nStop-Service espocrm\nRestart-Service espocrm\n\n# Check status\nGet-Service espocrm\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream espocrm_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name espocrm.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name espocrm.example.com;\n\n    ssl_certificate /etc/ssl/certs/espocrm.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/espocrm.example.com.key;\n\n    location / {\n        proxy_pass http://espocrm_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName espocrm.example.com\n    Redirect permanent / https://espocrm.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName espocrm.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/espocrm.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/espocrm.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend espocrm_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/espocrm.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend espocrm_backend\n\nbackend espocrm_backend\n    balance roundrobin\n    server espocrm1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R espocrm:espocrm /etc/espocrm\nsudo chmod 750 /etc/espocrm\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status espocrm\n\n# View logs\nsudo journalctl -u espocrm -f\n\n# Monitor resource usage\ntop -p $(pgrep espocrm)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/espocrm\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/espocrm-backup-$DATE.tar.gz\" /etc/espocrm /var/lib/espocrm\n\necho \"Backup completed: $BACKUP_DIR/espocrm-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop espocrm\n\n# Restore from backup\ntar -xzf /backup/espocrm/espocrm-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start espocrm\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u espocrm -n 100\nsudo tail -f /var/log/espocrm/espocrm.log\n\n# Check configuration\nespocrm --version\n\n# Check permissions\nls -la /etc/espocrm\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep espocrm)\n\n# Check disk I/O\niotop -p $(pgrep espocrm)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  espocrm:\n    image: espocrm:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/espocrm\n      - ./data:/var/lib/espocrm\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update espocrm\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade espocrm\n\n# Arch Linux\nsudo pacman -Syu espocrm\n\n# Alpine Linux\napk update && apk upgrade espocrm\n\n# openSUSE\nsudo zypper update espocrm\n\n# FreeBSD\npkg update && pkg upgrade espocrm\n\n# Always backup before updates\ntar -czf /backup/espocrm-pre-update-$(date +%Y%m%d).tar.gz /etc/espocrm\n\n# Restart after updates\nsudo systemctl restart espocrm\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/espocrm\n\n# Clean old logs\nfind /var/log/espocrm -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/espocrm\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.espocrm.org/\n- GitHub Repository: https://github.com/espocrm/espocrm\n- Community Forum: https://forum.espocrm.org/\n- Best Practices Guide: https://docs.espocrm.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"espocrm-installation-guide\" class=\"mobile-header\">espocrm Installation Guide</h1>\n<p class=\"mobile-paragraph\">espocrm is a free and open-source customer relationship management. EspoCRM provides flexible CRM with clean interface</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 2GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default espocrm port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install espocrm\nsudo dnf install -y espocrm\n\n# Enable and start service\nsudo systemctl enable --now espocrm\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install espocrm\nsudo apt install -y espocrm\n\n# Enable and start service\nsudo systemctl enable --now espocrm\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install espocrm\nsudo pacman -S espocrm\n\n# Enable and start service\nsudo systemctl enable --now espocrm\n\n# Verify installation\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install espocrm\napk add --no-cache espocrm\n\n# Enable and start service\nrc-update add espocrm default\nrc-service espocrm start\n\n# Verify installation\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install espocrm\nsudo zypper install -y espocrm\n\n# Enable and start service\nsudo systemctl enable --now espocrm\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install espocrm\n\n# Start service\nbrew services start espocrm\n\n# Verify installation\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install espocrm\n\n# Enable in rc.conf\necho &#039;espocrm_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice espocrm start\n\n# Verify installation\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install espocrm\n\n# Or using Scoop\nscoop install espocrm\n\n# Verify installation\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/espocrm\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nespocrm --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable espocrm\n\n# Start service\nsudo systemctl start espocrm\n\n# Stop service\nsudo systemctl stop espocrm\n\n# Restart service\nsudo systemctl restart espocrm\n\n# Check status\nsudo systemctl status espocrm\n\n# View logs\nsudo journalctl -u espocrm -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add espocrm default\n\n# Start service\nrc-service espocrm start\n\n# Stop service\nrc-service espocrm stop\n\n# Restart service\nrc-service espocrm restart\n\n# Check status\nrc-service espocrm status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;espocrm_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice espocrm start\n\n# Stop service\nservice espocrm stop\n\n# Restart service\nservice espocrm restart\n\n# Check status\nservice espocrm status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start espocrm\nbrew services stop espocrm\nbrew services restart espocrm\n\n# Check status\nbrew services list | grep espocrm</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start espocrm\n\n# Stop service\nnet stop espocrm\n\n# Using PowerShell\nStart-Service espocrm\nStop-Service espocrm\nRestart-Service espocrm\n\n# Check status\nGet-Service espocrm</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream espocrm_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name espocrm.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name espocrm.example.com;\n\n    ssl_certificate /etc/ssl/certs/espocrm.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/espocrm.example.com.key;\n\n    location / {\n        proxy_pass http://espocrm_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName espocrm.example.com\n    Redirect permanent / https://espocrm.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName espocrm.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/espocrm.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/espocrm.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend espocrm_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/espocrm.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend espocrm_backend\n\nbackend espocrm_backend\n    balance roundrobin\n    server espocrm1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R espocrm:espocrm /etc/espocrm\nsudo chmod 750 /etc/espocrm\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status espocrm\n\n# View logs\nsudo journalctl -u espocrm -f\n\n# Monitor resource usage\ntop -p $(pgrep espocrm)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/espocrm&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/espocrm-backup-$DATE.tar.gz&quot; /etc/espocrm /var/lib/espocrm\n\necho &quot;Backup completed: $BACKUP_DIR/espocrm-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop espocrm\n\n# Restore from backup\ntar -xzf /backup/espocrm/espocrm-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start espocrm</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u espocrm -n 100\nsudo tail -f /var/log/espocrm/espocrm.log\n\n# Check configuration\nespocrm --version\n\n# Check permissions\nls -la /etc/espocrm</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep espocrm)\n\n# Check disk I/O\niotop -p $(pgrep espocrm)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  espocrm:\n    image: espocrm:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/espocrm\n      - ./data:/var/lib/espocrm\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update espocrm\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade espocrm\n\n# Arch Linux\nsudo pacman -Syu espocrm\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade espocrm\n\n# openSUSE\nsudo zypper update espocrm\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade espocrm\n\n# Always backup before updates\ntar -czf /backup/espocrm-pre-update-$(date +%Y%m%d).tar.gz /etc/espocrm\n\n# Restart after updates\nsudo systemctl restart espocrm</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/espocrm\n\n# Clean old logs\nfind /var/log/espocrm -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/espocrm</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.espocrm.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/espocrm/espocrm</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.espocrm.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.espocrm.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1154,"lastBuilt":"2025-09-16T03:17:44.829Z","metadataVersion":"2.0"},{"name":"ethereum_geth","displayName":"ethereum-geth Installation Guide","slug":"ethereum_geth","description":"ethereum-geth is a free and open-source Ethereum node. Geth provides official Go implementation of Ethereum protocol","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,30303],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/ethereum_geth","documentationUrl":"https://howtomgr.github.io/miscellaneous/ethereum_geth","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ethereum_geth","updatedAt":"2025-09-16T03:09:38Z","createdAt":"2025-09-16T02:35:23Z","readmeRaw":"# ethereum-geth Installation Guide\n\nethereum-geth is a free and open-source Ethereum node. Geth provides official Go implementation of Ethereum protocol\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 16GB minimum\n  - Storage: 1TB+ for chain\n  - Network: P2P/JSON-RPC\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 30303 (default ethereum-geth port)\n  - RPC on 8545\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ethereum-geth\nsudo dnf install -y ethereum_geth\n\n# Enable and start service\nsudo systemctl enable --now ethereum-geth\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=30303/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nethereum-geth --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install ethereum-geth\nsudo apt install -y ethereum_geth\n\n# Enable and start service\nsudo systemctl enable --now ethereum-geth\n\n# Configure firewall\nsudo ufw allow 30303\n\n# Verify installation\nethereum-geth --version\n```\n\n### Arch Linux\n\n```bash\n# Install ethereum-geth\nsudo pacman -S ethereum_geth\n\n# Enable and start service\nsudo systemctl enable --now ethereum-geth\n\n# Verify installation\nethereum-geth --version\n```\n\n### Alpine Linux\n\n```bash\n# Install ethereum-geth\napk add --no-cache ethereum_geth\n\n# Enable and start service\nrc-update add ethereum-geth default\nrc-service ethereum-geth start\n\n# Verify installation\nethereum-geth --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install ethereum-geth\nsudo zypper install -y ethereum_geth\n\n# Enable and start service\nsudo systemctl enable --now ethereum-geth\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=30303/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nethereum-geth --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install ethereum_geth\n\n# Start service\nbrew services start ethereum_geth\n\n# Verify installation\nethereum-geth --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install ethereum_geth\n\n# Enable in rc.conf\necho 'ethereum-geth_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ethereum-geth start\n\n# Verify installation\nethereum-geth --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install ethereum_geth\n\n# Or using Scoop\nscoop install ethereum_geth\n\n# Verify installation\nethereum-geth --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/ethereum_geth\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nethereum-geth --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable ethereum-geth\n\n# Start service\nsudo systemctl start ethereum-geth\n\n# Stop service\nsudo systemctl stop ethereum-geth\n\n# Restart service\nsudo systemctl restart ethereum-geth\n\n# Check status\nsudo systemctl status ethereum-geth\n\n# View logs\nsudo journalctl -u ethereum-geth -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add ethereum-geth default\n\n# Start service\nrc-service ethereum-geth start\n\n# Stop service\nrc-service ethereum-geth stop\n\n# Restart service\nrc-service ethereum-geth restart\n\n# Check status\nrc-service ethereum-geth status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'ethereum-geth_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ethereum-geth start\n\n# Stop service\nservice ethereum-geth stop\n\n# Restart service\nservice ethereum-geth restart\n\n# Check status\nservice ethereum-geth status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start ethereum_geth\nbrew services stop ethereum_geth\nbrew services restart ethereum_geth\n\n# Check status\nbrew services list | grep ethereum_geth\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start ethereum-geth\n\n# Stop service\nnet stop ethereum-geth\n\n# Using PowerShell\nStart-Service ethereum-geth\nStop-Service ethereum-geth\nRestart-Service ethereum-geth\n\n# Check status\nGet-Service ethereum-geth\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream ethereum_geth_backend {\n    server 127.0.0.1:30303;\n}\n\nserver {\n    listen 80;\n    server_name ethereum_geth.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ethereum_geth.example.com;\n\n    ssl_certificate /etc/ssl/certs/ethereum_geth.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ethereum_geth.example.com.key;\n\n    location / {\n        proxy_pass http://ethereum_geth_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName ethereum_geth.example.com\n    Redirect permanent / https://ethereum_geth.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName ethereum_geth.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ethereum_geth.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ethereum_geth.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:30303/\n    ProxyPassReverse / http://127.0.0.1:30303/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend ethereum_geth_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ethereum_geth.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ethereum_geth_backend\n\nbackend ethereum_geth_backend\n    balance roundrobin\n    server ethereum_geth1 127.0.0.1:30303 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R ethereum_geth:ethereum_geth /etc/ethereum_geth\nsudo chmod 750 /etc/ethereum_geth\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=30303/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status ethereum-geth\n\n# View logs\nsudo journalctl -u ethereum-geth -f\n\n# Monitor resource usage\ntop -p $(pgrep ethereum_geth)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/ethereum_geth\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/ethereum_geth-backup-$DATE.tar.gz\" /etc/ethereum_geth /var/lib/ethereum_geth\n\necho \"Backup completed: $BACKUP_DIR/ethereum_geth-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop ethereum-geth\n\n# Restore from backup\ntar -xzf /backup/ethereum_geth/ethereum_geth-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ethereum-geth\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u ethereum-geth -n 100\nsudo tail -f /var/log/ethereum_geth/ethereum_geth.log\n\n# Check configuration\nethereum-geth --version\n\n# Check permissions\nls -la /etc/ethereum_geth\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 30303\n\n# Test connectivity\ntelnet localhost 30303\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep ethereum_geth)\n\n# Check disk I/O\niotop -p $(pgrep ethereum_geth)\n\n# Check connections\nss -an | grep 30303\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  ethereum_geth:\n    image: ethereum_geth:latest\n    ports:\n      - \"30303:30303\"\n    volumes:\n      - ./config:/etc/ethereum_geth\n      - ./data:/var/lib/ethereum_geth\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ethereum_geth\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade ethereum_geth\n\n# Arch Linux\nsudo pacman -Syu ethereum_geth\n\n# Alpine Linux\napk update && apk upgrade ethereum_geth\n\n# openSUSE\nsudo zypper update ethereum_geth\n\n# FreeBSD\npkg update && pkg upgrade ethereum_geth\n\n# Always backup before updates\ntar -czf /backup/ethereum_geth-pre-update-$(date +%Y%m%d).tar.gz /etc/ethereum_geth\n\n# Restart after updates\nsudo systemctl restart ethereum-geth\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/ethereum_geth\n\n# Clean old logs\nfind /var/log/ethereum_geth -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ethereum_geth\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.ethereum_geth.org/\n- GitHub Repository: https://github.com/ethereum_geth/ethereum_geth\n- Community Forum: https://forum.ethereum_geth.org/\n- Best Practices Guide: https://docs.ethereum_geth.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"ethereum-geth-installation-guide\" class=\"mobile-header\">ethereum-geth Installation Guide</h1>\n<p class=\"mobile-paragraph\">ethereum-geth is a free and open-source Ethereum node. Geth provides official Go implementation of Ethereum protocol</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 16GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1TB+ for chain</li>\n<li class=\"mobile-list-item\">Network: P2P/JSON-RPC</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 30303 (default ethereum-geth port)</li>\n<li class=\"mobile-list-item\">RPC on 8545</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ethereum-geth\nsudo dnf install -y ethereum_geth\n\n# Enable and start service\nsudo systemctl enable --now ethereum-geth\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=30303/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install ethereum-geth\nsudo apt install -y ethereum_geth\n\n# Enable and start service\nsudo systemctl enable --now ethereum-geth\n\n# Configure firewall\nsudo ufw allow 30303\n\n# Verify installation\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ethereum-geth\nsudo pacman -S ethereum_geth\n\n# Enable and start service\nsudo systemctl enable --now ethereum-geth\n\n# Verify installation\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ethereum-geth\napk add --no-cache ethereum_geth\n\n# Enable and start service\nrc-update add ethereum-geth default\nrc-service ethereum-geth start\n\n# Verify installation\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ethereum-geth\nsudo zypper install -y ethereum_geth\n\n# Enable and start service\nsudo systemctl enable --now ethereum-geth\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=30303/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install ethereum_geth\n\n# Start service\nbrew services start ethereum_geth\n\n# Verify installation\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install ethereum_geth\n\n# Enable in rc.conf\necho &#039;ethereum-geth_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ethereum-geth start\n\n# Verify installation\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install ethereum_geth\n\n# Or using Scoop\nscoop install ethereum_geth\n\n# Verify installation\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/ethereum_geth\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nethereum-geth --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable ethereum-geth\n\n# Start service\nsudo systemctl start ethereum-geth\n\n# Stop service\nsudo systemctl stop ethereum-geth\n\n# Restart service\nsudo systemctl restart ethereum-geth\n\n# Check status\nsudo systemctl status ethereum-geth\n\n# View logs\nsudo journalctl -u ethereum-geth -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add ethereum-geth default\n\n# Start service\nrc-service ethereum-geth start\n\n# Stop service\nrc-service ethereum-geth stop\n\n# Restart service\nrc-service ethereum-geth restart\n\n# Check status\nrc-service ethereum-geth status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;ethereum-geth_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ethereum-geth start\n\n# Stop service\nservice ethereum-geth stop\n\n# Restart service\nservice ethereum-geth restart\n\n# Check status\nservice ethereum-geth status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start ethereum_geth\nbrew services stop ethereum_geth\nbrew services restart ethereum_geth\n\n# Check status\nbrew services list | grep ethereum_geth</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start ethereum-geth\n\n# Stop service\nnet stop ethereum-geth\n\n# Using PowerShell\nStart-Service ethereum-geth\nStop-Service ethereum-geth\nRestart-Service ethereum-geth\n\n# Check status\nGet-Service ethereum-geth</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream ethereum_geth_backend {\n    server 127.0.0.1:30303;\n}\n\nserver {\n    listen 80;\n    server_name ethereum_geth.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ethereum_geth.example.com;\n\n    ssl_certificate /etc/ssl/certs/ethereum_geth.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ethereum_geth.example.com.key;\n\n    location / {\n        proxy_pass http://ethereum_geth_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName ethereum_geth.example.com\n    Redirect permanent / https://ethereum_geth.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName ethereum_geth.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ethereum_geth.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ethereum_geth.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:30303/\n    ProxyPassReverse / http://127.0.0.1:30303/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend ethereum_geth_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ethereum_geth.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ethereum_geth_backend\n\nbackend ethereum_geth_backend\n    balance roundrobin\n    server ethereum_geth1 127.0.0.1:30303 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R ethereum_geth:ethereum_geth /etc/ethereum_geth\nsudo chmod 750 /etc/ethereum_geth\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=30303/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status ethereum-geth\n\n# View logs\nsudo journalctl -u ethereum-geth -f\n\n# Monitor resource usage\ntop -p $(pgrep ethereum_geth)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/ethereum_geth&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/ethereum_geth-backup-$DATE.tar.gz&quot; /etc/ethereum_geth /var/lib/ethereum_geth\n\necho &quot;Backup completed: $BACKUP_DIR/ethereum_geth-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop ethereum-geth\n\n# Restore from backup\ntar -xzf /backup/ethereum_geth/ethereum_geth-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ethereum-geth</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u ethereum-geth -n 100\nsudo tail -f /var/log/ethereum_geth/ethereum_geth.log\n\n# Check configuration\nethereum-geth --version\n\n# Check permissions\nls -la /etc/ethereum_geth</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 30303\n\n# Test connectivity\ntelnet localhost 30303\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep ethereum_geth)\n\n# Check disk I/O\niotop -p $(pgrep ethereum_geth)\n\n# Check connections\nss -an | grep 30303</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  ethereum_geth:\n    image: ethereum_geth:latest\n    ports:\n      - &quot;30303:30303&quot;\n    volumes:\n      - ./config:/etc/ethereum_geth\n      - ./data:/var/lib/ethereum_geth\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ethereum_geth\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade ethereum_geth\n\n# Arch Linux\nsudo pacman -Syu ethereum_geth\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade ethereum_geth\n\n# openSUSE\nsudo zypper update ethereum_geth\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade ethereum_geth\n\n# Always backup before updates\ntar -czf /backup/ethereum_geth-pre-update-$(date +%Y%m%d).tar.gz /etc/ethereum_geth\n\n# Restart after updates\nsudo systemctl restart ethereum-geth</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/ethereum_geth\n\n# Clean old logs\nfind /var/log/ethereum_geth -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ethereum_geth</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.ethereum_geth.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/ethereum_geth/ethereum_geth</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.ethereum_geth.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.ethereum_geth.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1154,"lastBuilt":"2025-09-16T03:17:44.008Z","metadataVersion":"2.0"},{"name":"eventstore","displayName":"eventstore Installation Guide","slug":"eventstore","description":"eventstore is a free and open-source event sourcing database. EventStore is designed for event sourcing with built-in projections and subscriptions, serving as a specialized database for event-driven architectures","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,1113,2113],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/eventstore","documentationUrl":"https://howtomgr.github.io/miscellaneous/eventstore","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/eventstore","updatedAt":"2025-09-16T03:09:45Z","createdAt":"2025-09-16T02:35:32Z","readmeRaw":"# eventstore Installation Guide\n\neventstore is a free and open-source event sourcing database. EventStore is designed for event sourcing with built-in projections and subscriptions, serving as a specialized database for event-driven architectures\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 4GB minimum (8GB+ recommended)\n  - Storage: 10GB+ for events\n  - Network: HTTP and TCP\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 2113 (default eventstore port)\n  - Port 1113 for TCP\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install eventstore\nsudo dnf install -y eventstore\n\n# Enable and start service\nsudo systemctl enable --now eventstore\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=2113/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\neventstore --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install eventstore\nsudo apt install -y eventstore\n\n# Enable and start service\nsudo systemctl enable --now eventstore\n\n# Configure firewall\nsudo ufw allow 2113\n\n# Verify installation\neventstore --version\n```\n\n### Arch Linux\n\n```bash\n# Install eventstore\nsudo pacman -S eventstore\n\n# Enable and start service\nsudo systemctl enable --now eventstore\n\n# Verify installation\neventstore --version\n```\n\n### Alpine Linux\n\n```bash\n# Install eventstore\napk add --no-cache eventstore\n\n# Enable and start service\nrc-update add eventstore default\nrc-service eventstore start\n\n# Verify installation\neventstore --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install eventstore\nsudo zypper install -y eventstore\n\n# Enable and start service\nsudo systemctl enable --now eventstore\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=2113/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\neventstore --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install eventstore\n\n# Start service\nbrew services start eventstore\n\n# Verify installation\neventstore --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install eventstore\n\n# Enable in rc.conf\necho 'eventstore_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice eventstore start\n\n# Verify installation\neventstore --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install eventstore\n\n# Or using Scoop\nscoop install eventstore\n\n# Verify installation\neventstore --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/eventstore\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\neventstore --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable eventstore\n\n# Start service\nsudo systemctl start eventstore\n\n# Stop service\nsudo systemctl stop eventstore\n\n# Restart service\nsudo systemctl restart eventstore\n\n# Check status\nsudo systemctl status eventstore\n\n# View logs\nsudo journalctl -u eventstore -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add eventstore default\n\n# Start service\nrc-service eventstore start\n\n# Stop service\nrc-service eventstore stop\n\n# Restart service\nrc-service eventstore restart\n\n# Check status\nrc-service eventstore status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'eventstore_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice eventstore start\n\n# Stop service\nservice eventstore stop\n\n# Restart service\nservice eventstore restart\n\n# Check status\nservice eventstore status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start eventstore\nbrew services stop eventstore\nbrew services restart eventstore\n\n# Check status\nbrew services list | grep eventstore\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start eventstore\n\n# Stop service\nnet stop eventstore\n\n# Using PowerShell\nStart-Service eventstore\nStop-Service eventstore\nRestart-Service eventstore\n\n# Check status\nGet-Service eventstore\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream eventstore_backend {\n    server 127.0.0.1:2113;\n}\n\nserver {\n    listen 80;\n    server_name eventstore.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name eventstore.example.com;\n\n    ssl_certificate /etc/ssl/certs/eventstore.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/eventstore.example.com.key;\n\n    location / {\n        proxy_pass http://eventstore_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName eventstore.example.com\n    Redirect permanent / https://eventstore.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName eventstore.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/eventstore.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/eventstore.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:2113/\n    ProxyPassReverse / http://127.0.0.1:2113/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend eventstore_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/eventstore.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend eventstore_backend\n\nbackend eventstore_backend\n    balance roundrobin\n    server eventstore1 127.0.0.1:2113 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R eventstore:eventstore /etc/eventstore\nsudo chmod 750 /etc/eventstore\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=2113/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status eventstore\n\n# View logs\nsudo journalctl -u eventstore -f\n\n# Monitor resource usage\ntop -p $(pgrep eventstore)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/eventstore\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/eventstore-backup-$DATE.tar.gz\" /etc/eventstore /var/lib/eventstore\n\necho \"Backup completed: $BACKUP_DIR/eventstore-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop eventstore\n\n# Restore from backup\ntar -xzf /backup/eventstore/eventstore-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start eventstore\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u eventstore -n 100\nsudo tail -f /var/log/eventstore/eventstore.log\n\n# Check configuration\neventstore --version\n\n# Check permissions\nls -la /etc/eventstore\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 2113\n\n# Test connectivity\ntelnet localhost 2113\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep eventstore)\n\n# Check disk I/O\niotop -p $(pgrep eventstore)\n\n# Check connections\nss -an | grep 2113\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  eventstore:\n    image: eventstore:latest\n    ports:\n      - \"2113:2113\"\n    volumes:\n      - ./config:/etc/eventstore\n      - ./data:/var/lib/eventstore\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update eventstore\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade eventstore\n\n# Arch Linux\nsudo pacman -Syu eventstore\n\n# Alpine Linux\napk update && apk upgrade eventstore\n\n# openSUSE\nsudo zypper update eventstore\n\n# FreeBSD\npkg update && pkg upgrade eventstore\n\n# Always backup before updates\ntar -czf /backup/eventstore-pre-update-$(date +%Y%m%d).tar.gz /etc/eventstore\n\n# Restart after updates\nsudo systemctl restart eventstore\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/eventstore\n\n# Clean old logs\nfind /var/log/eventstore -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/eventstore\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.eventstore.org/\n- GitHub Repository: https://github.com/eventstore/eventstore\n- Community Forum: https://forum.eventstore.org/\n- Best Practices Guide: https://docs.eventstore.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"eventstore-installation-guide\" class=\"mobile-header\">eventstore Installation Guide</h1>\n<p class=\"mobile-paragraph\">eventstore is a free and open-source event sourcing database. EventStore is designed for event sourcing with built-in projections and subscriptions, serving as a specialized database for event-driven architectures</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for events</li>\n<li class=\"mobile-list-item\">Network: HTTP and TCP</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 2113 (default eventstore port)</li>\n<li class=\"mobile-list-item\">Port 1113 for TCP</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install eventstore\nsudo dnf install -y eventstore\n\n# Enable and start service\nsudo systemctl enable --now eventstore\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=2113/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\neventstore --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install eventstore\nsudo apt install -y eventstore\n\n# Enable and start service\nsudo systemctl enable --now eventstore\n\n# Configure firewall\nsudo ufw allow 2113\n\n# Verify installation\neventstore --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install eventstore\nsudo pacman -S eventstore\n\n# Enable and start service\nsudo systemctl enable --now eventstore\n\n# Verify installation\neventstore --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install eventstore\napk add --no-cache eventstore\n\n# Enable and start service\nrc-update add eventstore default\nrc-service eventstore start\n\n# Verify installation\neventstore --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install eventstore\nsudo zypper install -y eventstore\n\n# Enable and start service\nsudo systemctl enable --now eventstore\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=2113/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\neventstore --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install eventstore\n\n# Start service\nbrew services start eventstore\n\n# Verify installation\neventstore --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install eventstore\n\n# Enable in rc.conf\necho &#039;eventstore_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice eventstore start\n\n# Verify installation\neventstore --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install eventstore\n\n# Or using Scoop\nscoop install eventstore\n\n# Verify installation\neventstore --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/eventstore\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\neventstore --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable eventstore\n\n# Start service\nsudo systemctl start eventstore\n\n# Stop service\nsudo systemctl stop eventstore\n\n# Restart service\nsudo systemctl restart eventstore\n\n# Check status\nsudo systemctl status eventstore\n\n# View logs\nsudo journalctl -u eventstore -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add eventstore default\n\n# Start service\nrc-service eventstore start\n\n# Stop service\nrc-service eventstore stop\n\n# Restart service\nrc-service eventstore restart\n\n# Check status\nrc-service eventstore status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;eventstore_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice eventstore start\n\n# Stop service\nservice eventstore stop\n\n# Restart service\nservice eventstore restart\n\n# Check status\nservice eventstore status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start eventstore\nbrew services stop eventstore\nbrew services restart eventstore\n\n# Check status\nbrew services list | grep eventstore</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start eventstore\n\n# Stop service\nnet stop eventstore\n\n# Using PowerShell\nStart-Service eventstore\nStop-Service eventstore\nRestart-Service eventstore\n\n# Check status\nGet-Service eventstore</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream eventstore_backend {\n    server 127.0.0.1:2113;\n}\n\nserver {\n    listen 80;\n    server_name eventstore.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name eventstore.example.com;\n\n    ssl_certificate /etc/ssl/certs/eventstore.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/eventstore.example.com.key;\n\n    location / {\n        proxy_pass http://eventstore_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName eventstore.example.com\n    Redirect permanent / https://eventstore.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName eventstore.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/eventstore.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/eventstore.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:2113/\n    ProxyPassReverse / http://127.0.0.1:2113/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend eventstore_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/eventstore.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend eventstore_backend\n\nbackend eventstore_backend\n    balance roundrobin\n    server eventstore1 127.0.0.1:2113 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R eventstore:eventstore /etc/eventstore\nsudo chmod 750 /etc/eventstore\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=2113/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status eventstore\n\n# View logs\nsudo journalctl -u eventstore -f\n\n# Monitor resource usage\ntop -p $(pgrep eventstore)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/eventstore&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/eventstore-backup-$DATE.tar.gz&quot; /etc/eventstore /var/lib/eventstore\n\necho &quot;Backup completed: $BACKUP_DIR/eventstore-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop eventstore\n\n# Restore from backup\ntar -xzf /backup/eventstore/eventstore-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start eventstore</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u eventstore -n 100\nsudo tail -f /var/log/eventstore/eventstore.log\n\n# Check configuration\neventstore --version\n\n# Check permissions\nls -la /etc/eventstore</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 2113\n\n# Test connectivity\ntelnet localhost 2113\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep eventstore)\n\n# Check disk I/O\niotop -p $(pgrep eventstore)\n\n# Check connections\nss -an | grep 2113</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  eventstore:\n    image: eventstore:latest\n    ports:\n      - &quot;2113:2113&quot;\n    volumes:\n      - ./config:/etc/eventstore\n      - ./data:/var/lib/eventstore\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update eventstore\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade eventstore\n\n# Arch Linux\nsudo pacman -Syu eventstore\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade eventstore\n\n# openSUSE\nsudo zypper update eventstore\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade eventstore\n\n# Always backup before updates\ntar -czf /backup/eventstore-pre-update-$(date +%Y%m%d).tar.gz /etc/eventstore\n\n# Restart after updates\nsudo systemctl restart eventstore</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/eventstore\n\n# Clean old logs\nfind /var/log/eventstore -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/eventstore</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.eventstore.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/eventstore/eventstore</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.eventstore.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.eventstore.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1172,"lastBuilt":"2025-09-16T03:17:43.622Z","metadataVersion":"2.0"},{"name":"exchange","displayName":"Exchange 2016 on Server 2016","slug":"exchange","description":"```text","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["windows"],"defaultPorts":[],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","networking"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/exchange","documentationUrl":"https://howtomgr.github.io/miscellaneous/exchange","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/exchange","updatedAt":"2025-09-16T03:09:53Z","createdAt":"2023-08-28T03:47:46Z","readmeRaw":"# Exchange 2016 on Server 2016\n\n```text\n\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n\n```\n","readmeHtml":"<h1 id=\"exchange-2016-on-server-2016\" class=\"mobile-header\">Exchange 2016 on Server 2016</h1>\n<div class=\"mobile-code-block\" data-language=\"text\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">text</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-text\">\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-16T03:17:43.261Z","metadataVersion":"2.0"},{"name":"express_gateway","displayName":"express-gateway Installation Guide","slug":"express_gateway","description":"express-gateway is a free and open-source API gateway. Express Gateway provides microservices API gateway built on Express.js","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/express_gateway","documentationUrl":"https://howtomgr.github.io/miscellaneous/express_gateway","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/express_gateway","updatedAt":"2025-09-16T03:10:08Z","createdAt":"2025-09-16T02:35:55Z","readmeRaw":"# express-gateway Installation Guide\n\nexpress-gateway is a free and open-source API gateway. Express Gateway provides microservices API gateway built on Express.js\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 1GB for config\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default express-gateway port)\n  - Admin on 9876\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install express-gateway\nsudo dnf install -y express_gateway\n\n# Enable and start service\nsudo systemctl enable --now express-gateway\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nexpress-gateway --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install express-gateway\nsudo apt install -y express_gateway\n\n# Enable and start service\nsudo systemctl enable --now express-gateway\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nexpress-gateway --version\n```\n\n### Arch Linux\n\n```bash\n# Install express-gateway\nsudo pacman -S express_gateway\n\n# Enable and start service\nsudo systemctl enable --now express-gateway\n\n# Verify installation\nexpress-gateway --version\n```\n\n### Alpine Linux\n\n```bash\n# Install express-gateway\napk add --no-cache express_gateway\n\n# Enable and start service\nrc-update add express-gateway default\nrc-service express-gateway start\n\n# Verify installation\nexpress-gateway --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install express-gateway\nsudo zypper install -y express_gateway\n\n# Enable and start service\nsudo systemctl enable --now express-gateway\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nexpress-gateway --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install express_gateway\n\n# Start service\nbrew services start express_gateway\n\n# Verify installation\nexpress-gateway --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install express_gateway\n\n# Enable in rc.conf\necho 'express-gateway_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice express-gateway start\n\n# Verify installation\nexpress-gateway --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install express_gateway\n\n# Or using Scoop\nscoop install express_gateway\n\n# Verify installation\nexpress-gateway --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/express_gateway\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nexpress-gateway --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable express-gateway\n\n# Start service\nsudo systemctl start express-gateway\n\n# Stop service\nsudo systemctl stop express-gateway\n\n# Restart service\nsudo systemctl restart express-gateway\n\n# Check status\nsudo systemctl status express-gateway\n\n# View logs\nsudo journalctl -u express-gateway -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add express-gateway default\n\n# Start service\nrc-service express-gateway start\n\n# Stop service\nrc-service express-gateway stop\n\n# Restart service\nrc-service express-gateway restart\n\n# Check status\nrc-service express-gateway status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'express-gateway_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice express-gateway start\n\n# Stop service\nservice express-gateway stop\n\n# Restart service\nservice express-gateway restart\n\n# Check status\nservice express-gateway status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start express_gateway\nbrew services stop express_gateway\nbrew services restart express_gateway\n\n# Check status\nbrew services list | grep express_gateway\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start express-gateway\n\n# Stop service\nnet stop express-gateway\n\n# Using PowerShell\nStart-Service express-gateway\nStop-Service express-gateway\nRestart-Service express-gateway\n\n# Check status\nGet-Service express-gateway\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream express_gateway_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name express_gateway.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name express_gateway.example.com;\n\n    ssl_certificate /etc/ssl/certs/express_gateway.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/express_gateway.example.com.key;\n\n    location / {\n        proxy_pass http://express_gateway_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName express_gateway.example.com\n    Redirect permanent / https://express_gateway.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName express_gateway.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/express_gateway.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/express_gateway.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend express_gateway_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/express_gateway.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend express_gateway_backend\n\nbackend express_gateway_backend\n    balance roundrobin\n    server express_gateway1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R express_gateway:express_gateway /etc/express_gateway\nsudo chmod 750 /etc/express_gateway\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status express-gateway\n\n# View logs\nsudo journalctl -u express-gateway -f\n\n# Monitor resource usage\ntop -p $(pgrep express_gateway)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/express_gateway\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/express_gateway-backup-$DATE.tar.gz\" /etc/express_gateway /var/lib/express_gateway\n\necho \"Backup completed: $BACKUP_DIR/express_gateway-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop express-gateway\n\n# Restore from backup\ntar -xzf /backup/express_gateway/express_gateway-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start express-gateway\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u express-gateway -n 100\nsudo tail -f /var/log/express_gateway/express_gateway.log\n\n# Check configuration\nexpress-gateway --version\n\n# Check permissions\nls -la /etc/express_gateway\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep express_gateway)\n\n# Check disk I/O\niotop -p $(pgrep express_gateway)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  express_gateway:\n    image: express_gateway:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/express_gateway\n      - ./data:/var/lib/express_gateway\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update express_gateway\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade express_gateway\n\n# Arch Linux\nsudo pacman -Syu express_gateway\n\n# Alpine Linux\napk update && apk upgrade express_gateway\n\n# openSUSE\nsudo zypper update express_gateway\n\n# FreeBSD\npkg update && pkg upgrade express_gateway\n\n# Always backup before updates\ntar -czf /backup/express_gateway-pre-update-$(date +%Y%m%d).tar.gz /etc/express_gateway\n\n# Restart after updates\nsudo systemctl restart express-gateway\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/express_gateway\n\n# Clean old logs\nfind /var/log/express_gateway -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/express_gateway\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.express_gateway.org/\n- GitHub Repository: https://github.com/express_gateway/express_gateway\n- Community Forum: https://forum.express_gateway.org/\n- Best Practices Guide: https://docs.express_gateway.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"express-gateway-installation-guide\" class=\"mobile-header\">express-gateway Installation Guide</h1>\n<p class=\"mobile-paragraph\">express-gateway is a free and open-source API gateway. Express Gateway provides microservices API gateway built on Express.js</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for config</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default express-gateway port)</li>\n<li class=\"mobile-list-item\">Admin on 9876</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install express-gateway\nsudo dnf install -y express_gateway\n\n# Enable and start service\nsudo systemctl enable --now express-gateway\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install express-gateway\nsudo apt install -y express_gateway\n\n# Enable and start service\nsudo systemctl enable --now express-gateway\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install express-gateway\nsudo pacman -S express_gateway\n\n# Enable and start service\nsudo systemctl enable --now express-gateway\n\n# Verify installation\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install express-gateway\napk add --no-cache express_gateway\n\n# Enable and start service\nrc-update add express-gateway default\nrc-service express-gateway start\n\n# Verify installation\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install express-gateway\nsudo zypper install -y express_gateway\n\n# Enable and start service\nsudo systemctl enable --now express-gateway\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install express_gateway\n\n# Start service\nbrew services start express_gateway\n\n# Verify installation\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install express_gateway\n\n# Enable in rc.conf\necho &#039;express-gateway_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice express-gateway start\n\n# Verify installation\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install express_gateway\n\n# Or using Scoop\nscoop install express_gateway\n\n# Verify installation\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/express_gateway\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nexpress-gateway --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable express-gateway\n\n# Start service\nsudo systemctl start express-gateway\n\n# Stop service\nsudo systemctl stop express-gateway\n\n# Restart service\nsudo systemctl restart express-gateway\n\n# Check status\nsudo systemctl status express-gateway\n\n# View logs\nsudo journalctl -u express-gateway -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add express-gateway default\n\n# Start service\nrc-service express-gateway start\n\n# Stop service\nrc-service express-gateway stop\n\n# Restart service\nrc-service express-gateway restart\n\n# Check status\nrc-service express-gateway status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;express-gateway_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice express-gateway start\n\n# Stop service\nservice express-gateway stop\n\n# Restart service\nservice express-gateway restart\n\n# Check status\nservice express-gateway status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start express_gateway\nbrew services stop express_gateway\nbrew services restart express_gateway\n\n# Check status\nbrew services list | grep express_gateway</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start express-gateway\n\n# Stop service\nnet stop express-gateway\n\n# Using PowerShell\nStart-Service express-gateway\nStop-Service express-gateway\nRestart-Service express-gateway\n\n# Check status\nGet-Service express-gateway</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream express_gateway_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name express_gateway.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name express_gateway.example.com;\n\n    ssl_certificate /etc/ssl/certs/express_gateway.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/express_gateway.example.com.key;\n\n    location / {\n        proxy_pass http://express_gateway_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName express_gateway.example.com\n    Redirect permanent / https://express_gateway.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName express_gateway.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/express_gateway.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/express_gateway.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend express_gateway_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/express_gateway.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend express_gateway_backend\n\nbackend express_gateway_backend\n    balance roundrobin\n    server express_gateway1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R express_gateway:express_gateway /etc/express_gateway\nsudo chmod 750 /etc/express_gateway\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status express-gateway\n\n# View logs\nsudo journalctl -u express-gateway -f\n\n# Monitor resource usage\ntop -p $(pgrep express_gateway)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/express_gateway&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/express_gateway-backup-$DATE.tar.gz&quot; /etc/express_gateway /var/lib/express_gateway\n\necho &quot;Backup completed: $BACKUP_DIR/express_gateway-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop express-gateway\n\n# Restore from backup\ntar -xzf /backup/express_gateway/express_gateway-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start express-gateway</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u express-gateway -n 100\nsudo tail -f /var/log/express_gateway/express_gateway.log\n\n# Check configuration\nexpress-gateway --version\n\n# Check permissions\nls -la /etc/express_gateway</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep express_gateway)\n\n# Check disk I/O\niotop -p $(pgrep express_gateway)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  express_gateway:\n    image: express_gateway:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/express_gateway\n      - ./data:/var/lib/express_gateway\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update express_gateway\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade express_gateway\n\n# Arch Linux\nsudo pacman -Syu express_gateway\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade express_gateway\n\n# openSUSE\nsudo zypper update express_gateway\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade express_gateway\n\n# Always backup before updates\ntar -czf /backup/express_gateway-pre-update-$(date +%Y%m%d).tar.gz /etc/express_gateway\n\n# Restart after updates\nsudo systemctl restart express-gateway</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/express_gateway\n\n# Clean old logs\nfind /var/log/express_gateway -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/express_gateway</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.express_gateway.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/express_gateway/express_gateway</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.express_gateway.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.express_gateway.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1156,"lastBuilt":"2025-09-16T03:17:42.553Z","metadataVersion":"2.0"},{"name":"factorio","displayName":"factorio Installation Guide","slug":"factorio","description":"factorio is a free and open-source Factorio dedicated server. Dedicated server for Factorio factory building game","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,34197],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/factorio","documentationUrl":"https://howtomgr.github.io/miscellaneous/factorio","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/factorio","updatedAt":"2025-09-16T03:10:22Z","createdAt":"2025-09-16T02:36:14Z","readmeRaw":"# factorio Installation Guide\n\nfactorio is a free and open-source Factorio dedicated server. Dedicated server for Factorio factory building game\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 1GB minimum\n  - Storage: 5GB for saves\n  - Network: Game protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 34197 (default factorio port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install factorio\nsudo dnf install -y factorio\n\n# Enable and start service\nsudo systemctl enable --now factorio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=34197/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfactorio --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install factorio\nsudo apt install -y factorio\n\n# Enable and start service\nsudo systemctl enable --now factorio\n\n# Configure firewall\nsudo ufw allow 34197\n\n# Verify installation\nfactorio --version\n```\n\n### Arch Linux\n\n```bash\n# Install factorio\nsudo pacman -S factorio\n\n# Enable and start service\nsudo systemctl enable --now factorio\n\n# Verify installation\nfactorio --version\n```\n\n### Alpine Linux\n\n```bash\n# Install factorio\napk add --no-cache factorio\n\n# Enable and start service\nrc-update add factorio default\nrc-service factorio start\n\n# Verify installation\nfactorio --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install factorio\nsudo zypper install -y factorio\n\n# Enable and start service\nsudo systemctl enable --now factorio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=34197/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfactorio --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install factorio\n\n# Start service\nbrew services start factorio\n\n# Verify installation\nfactorio --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install factorio\n\n# Enable in rc.conf\necho 'factorio_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice factorio start\n\n# Verify installation\nfactorio --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install factorio\n\n# Or using Scoop\nscoop install factorio\n\n# Verify installation\nfactorio --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/factorio\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfactorio --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable factorio\n\n# Start service\nsudo systemctl start factorio\n\n# Stop service\nsudo systemctl stop factorio\n\n# Restart service\nsudo systemctl restart factorio\n\n# Check status\nsudo systemctl status factorio\n\n# View logs\nsudo journalctl -u factorio -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add factorio default\n\n# Start service\nrc-service factorio start\n\n# Stop service\nrc-service factorio stop\n\n# Restart service\nrc-service factorio restart\n\n# Check status\nrc-service factorio status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'factorio_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice factorio start\n\n# Stop service\nservice factorio stop\n\n# Restart service\nservice factorio restart\n\n# Check status\nservice factorio status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start factorio\nbrew services stop factorio\nbrew services restart factorio\n\n# Check status\nbrew services list | grep factorio\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start factorio\n\n# Stop service\nnet stop factorio\n\n# Using PowerShell\nStart-Service factorio\nStop-Service factorio\nRestart-Service factorio\n\n# Check status\nGet-Service factorio\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream factorio_backend {\n    server 127.0.0.1:34197;\n}\n\nserver {\n    listen 80;\n    server_name factorio.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name factorio.example.com;\n\n    ssl_certificate /etc/ssl/certs/factorio.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/factorio.example.com.key;\n\n    location / {\n        proxy_pass http://factorio_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName factorio.example.com\n    Redirect permanent / https://factorio.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName factorio.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/factorio.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/factorio.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:34197/\n    ProxyPassReverse / http://127.0.0.1:34197/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend factorio_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/factorio.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend factorio_backend\n\nbackend factorio_backend\n    balance roundrobin\n    server factorio1 127.0.0.1:34197 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R factorio:factorio /etc/factorio\nsudo chmod 750 /etc/factorio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=34197/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status factorio\n\n# View logs\nsudo journalctl -u factorio -f\n\n# Monitor resource usage\ntop -p $(pgrep factorio)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/factorio\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/factorio-backup-$DATE.tar.gz\" /etc/factorio /var/lib/factorio\n\necho \"Backup completed: $BACKUP_DIR/factorio-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop factorio\n\n# Restore from backup\ntar -xzf /backup/factorio/factorio-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start factorio\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u factorio -n 100\nsudo tail -f /var/log/factorio/factorio.log\n\n# Check configuration\nfactorio --version\n\n# Check permissions\nls -la /etc/factorio\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 34197\n\n# Test connectivity\ntelnet localhost 34197\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep factorio)\n\n# Check disk I/O\niotop -p $(pgrep factorio)\n\n# Check connections\nss -an | grep 34197\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  factorio:\n    image: factorio:latest\n    ports:\n      - \"34197:34197\"\n    volumes:\n      - ./config:/etc/factorio\n      - ./data:/var/lib/factorio\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update factorio\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade factorio\n\n# Arch Linux\nsudo pacman -Syu factorio\n\n# Alpine Linux\napk update && apk upgrade factorio\n\n# openSUSE\nsudo zypper update factorio\n\n# FreeBSD\npkg update && pkg upgrade factorio\n\n# Always backup before updates\ntar -czf /backup/factorio-pre-update-$(date +%Y%m%d).tar.gz /etc/factorio\n\n# Restart after updates\nsudo systemctl restart factorio\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/factorio\n\n# Clean old logs\nfind /var/log/factorio -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/factorio\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.factorio.org/\n- GitHub Repository: https://github.com/factorio/factorio\n- Community Forum: https://forum.factorio.org/\n- Best Practices Guide: https://docs.factorio.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"factorio-installation-guide\" class=\"mobile-header\">factorio Installation Guide</h1>\n<p class=\"mobile-paragraph\">factorio is a free and open-source Factorio dedicated server. Dedicated server for Factorio factory building game</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for saves</li>\n<li class=\"mobile-list-item\">Network: Game protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 34197 (default factorio port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install factorio\nsudo dnf install -y factorio\n\n# Enable and start service\nsudo systemctl enable --now factorio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=34197/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install factorio\nsudo apt install -y factorio\n\n# Enable and start service\nsudo systemctl enable --now factorio\n\n# Configure firewall\nsudo ufw allow 34197\n\n# Verify installation\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install factorio\nsudo pacman -S factorio\n\n# Enable and start service\nsudo systemctl enable --now factorio\n\n# Verify installation\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install factorio\napk add --no-cache factorio\n\n# Enable and start service\nrc-update add factorio default\nrc-service factorio start\n\n# Verify installation\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install factorio\nsudo zypper install -y factorio\n\n# Enable and start service\nsudo systemctl enable --now factorio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=34197/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install factorio\n\n# Start service\nbrew services start factorio\n\n# Verify installation\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install factorio\n\n# Enable in rc.conf\necho &#039;factorio_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice factorio start\n\n# Verify installation\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install factorio\n\n# Or using Scoop\nscoop install factorio\n\n# Verify installation\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/factorio\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfactorio --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable factorio\n\n# Start service\nsudo systemctl start factorio\n\n# Stop service\nsudo systemctl stop factorio\n\n# Restart service\nsudo systemctl restart factorio\n\n# Check status\nsudo systemctl status factorio\n\n# View logs\nsudo journalctl -u factorio -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add factorio default\n\n# Start service\nrc-service factorio start\n\n# Stop service\nrc-service factorio stop\n\n# Restart service\nrc-service factorio restart\n\n# Check status\nrc-service factorio status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;factorio_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice factorio start\n\n# Stop service\nservice factorio stop\n\n# Restart service\nservice factorio restart\n\n# Check status\nservice factorio status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start factorio\nbrew services stop factorio\nbrew services restart factorio\n\n# Check status\nbrew services list | grep factorio</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start factorio\n\n# Stop service\nnet stop factorio\n\n# Using PowerShell\nStart-Service factorio\nStop-Service factorio\nRestart-Service factorio\n\n# Check status\nGet-Service factorio</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream factorio_backend {\n    server 127.0.0.1:34197;\n}\n\nserver {\n    listen 80;\n    server_name factorio.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name factorio.example.com;\n\n    ssl_certificate /etc/ssl/certs/factorio.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/factorio.example.com.key;\n\n    location / {\n        proxy_pass http://factorio_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName factorio.example.com\n    Redirect permanent / https://factorio.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName factorio.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/factorio.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/factorio.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:34197/\n    ProxyPassReverse / http://127.0.0.1:34197/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend factorio_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/factorio.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend factorio_backend\n\nbackend factorio_backend\n    balance roundrobin\n    server factorio1 127.0.0.1:34197 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R factorio:factorio /etc/factorio\nsudo chmod 750 /etc/factorio\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=34197/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status factorio\n\n# View logs\nsudo journalctl -u factorio -f\n\n# Monitor resource usage\ntop -p $(pgrep factorio)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/factorio&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/factorio-backup-$DATE.tar.gz&quot; /etc/factorio /var/lib/factorio\n\necho &quot;Backup completed: $BACKUP_DIR/factorio-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop factorio\n\n# Restore from backup\ntar -xzf /backup/factorio/factorio-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start factorio</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u factorio -n 100\nsudo tail -f /var/log/factorio/factorio.log\n\n# Check configuration\nfactorio --version\n\n# Check permissions\nls -la /etc/factorio</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 34197\n\n# Test connectivity\ntelnet localhost 34197\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep factorio)\n\n# Check disk I/O\niotop -p $(pgrep factorio)\n\n# Check connections\nss -an | grep 34197</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  factorio:\n    image: factorio:latest\n    ports:\n      - &quot;34197:34197&quot;\n    volumes:\n      - ./config:/etc/factorio\n      - ./data:/var/lib/factorio\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update factorio\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade factorio\n\n# Arch Linux\nsudo pacman -Syu factorio\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade factorio\n\n# openSUSE\nsudo zypper update factorio\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade factorio\n\n# Always backup before updates\ntar -czf /backup/factorio-pre-update-$(date +%Y%m%d).tar.gz /etc/factorio\n\n# Restart after updates\nsudo systemctl restart factorio</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/factorio\n\n# Clean old logs\nfind /var/log/factorio -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/factorio</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.factorio.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/factorio/factorio</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.factorio.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.factorio.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1153,"lastBuilt":"2025-09-16T03:17:41.834Z","metadataVersion":"2.0"},{"name":"filebeat","displayName":"filebeat Installation Guide","slug":"filebeat","description":"filebeat is a free and open-source log shipper. Filebeat provides lightweight shipper for forwarding logs","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,5066],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/filebeat","documentationUrl":"https://howtomgr.github.io/miscellaneous/filebeat","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/filebeat","updatedAt":"2025-09-16T03:10:59Z","createdAt":"2025-09-16T02:36:56Z","readmeRaw":"# filebeat Installation Guide\n\nfilebeat is a free and open-source log shipper. Filebeat provides lightweight shipper for forwarding logs\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 1GB for data\n  - Network: Various outputs\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5066 (default filebeat port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install filebeat\nsudo dnf install -y filebeat\n\n# Enable and start service\nsudo systemctl enable --now filebeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfilebeat --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install filebeat\nsudo apt install -y filebeat\n\n# Enable and start service\nsudo systemctl enable --now filebeat\n\n# Configure firewall\nsudo ufw allow 5066\n\n# Verify installation\nfilebeat --version\n```\n\n### Arch Linux\n\n```bash\n# Install filebeat\nsudo pacman -S filebeat\n\n# Enable and start service\nsudo systemctl enable --now filebeat\n\n# Verify installation\nfilebeat --version\n```\n\n### Alpine Linux\n\n```bash\n# Install filebeat\napk add --no-cache filebeat\n\n# Enable and start service\nrc-update add filebeat default\nrc-service filebeat start\n\n# Verify installation\nfilebeat --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install filebeat\nsudo zypper install -y filebeat\n\n# Enable and start service\nsudo systemctl enable --now filebeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfilebeat --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install filebeat\n\n# Start service\nbrew services start filebeat\n\n# Verify installation\nfilebeat --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install filebeat\n\n# Enable in rc.conf\necho 'filebeat_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice filebeat start\n\n# Verify installation\nfilebeat --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install filebeat\n\n# Or using Scoop\nscoop install filebeat\n\n# Verify installation\nfilebeat --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/filebeat\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfilebeat --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable filebeat\n\n# Start service\nsudo systemctl start filebeat\n\n# Stop service\nsudo systemctl stop filebeat\n\n# Restart service\nsudo systemctl restart filebeat\n\n# Check status\nsudo systemctl status filebeat\n\n# View logs\nsudo journalctl -u filebeat -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add filebeat default\n\n# Start service\nrc-service filebeat start\n\n# Stop service\nrc-service filebeat stop\n\n# Restart service\nrc-service filebeat restart\n\n# Check status\nrc-service filebeat status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'filebeat_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice filebeat start\n\n# Stop service\nservice filebeat stop\n\n# Restart service\nservice filebeat restart\n\n# Check status\nservice filebeat status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start filebeat\nbrew services stop filebeat\nbrew services restart filebeat\n\n# Check status\nbrew services list | grep filebeat\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start filebeat\n\n# Stop service\nnet stop filebeat\n\n# Using PowerShell\nStart-Service filebeat\nStop-Service filebeat\nRestart-Service filebeat\n\n# Check status\nGet-Service filebeat\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream filebeat_backend {\n    server 127.0.0.1:5066;\n}\n\nserver {\n    listen 80;\n    server_name filebeat.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name filebeat.example.com;\n\n    ssl_certificate /etc/ssl/certs/filebeat.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/filebeat.example.com.key;\n\n    location / {\n        proxy_pass http://filebeat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName filebeat.example.com\n    Redirect permanent / https://filebeat.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName filebeat.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/filebeat.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/filebeat.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5066/\n    ProxyPassReverse / http://127.0.0.1:5066/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend filebeat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/filebeat.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend filebeat_backend\n\nbackend filebeat_backend\n    balance roundrobin\n    server filebeat1 127.0.0.1:5066 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R filebeat:filebeat /etc/filebeat\nsudo chmod 750 /etc/filebeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status filebeat\n\n# View logs\nsudo journalctl -u filebeat -f\n\n# Monitor resource usage\ntop -p $(pgrep filebeat)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/filebeat\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/filebeat-backup-$DATE.tar.gz\" /etc/filebeat /var/lib/filebeat\n\necho \"Backup completed: $BACKUP_DIR/filebeat-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop filebeat\n\n# Restore from backup\ntar -xzf /backup/filebeat/filebeat-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start filebeat\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u filebeat -n 100\nsudo tail -f /var/log/filebeat/filebeat.log\n\n# Check configuration\nfilebeat --version\n\n# Check permissions\nls -la /etc/filebeat\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5066\n\n# Test connectivity\ntelnet localhost 5066\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep filebeat)\n\n# Check disk I/O\niotop -p $(pgrep filebeat)\n\n# Check connections\nss -an | grep 5066\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  filebeat:\n    image: filebeat:latest\n    ports:\n      - \"5066:5066\"\n    volumes:\n      - ./config:/etc/filebeat\n      - ./data:/var/lib/filebeat\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update filebeat\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade filebeat\n\n# Arch Linux\nsudo pacman -Syu filebeat\n\n# Alpine Linux\napk update && apk upgrade filebeat\n\n# openSUSE\nsudo zypper update filebeat\n\n# FreeBSD\npkg update && pkg upgrade filebeat\n\n# Always backup before updates\ntar -czf /backup/filebeat-pre-update-$(date +%Y%m%d).tar.gz /etc/filebeat\n\n# Restart after updates\nsudo systemctl restart filebeat\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/filebeat\n\n# Clean old logs\nfind /var/log/filebeat -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/filebeat\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.filebeat.org/\n- GitHub Repository: https://github.com/filebeat/filebeat\n- Community Forum: https://forum.filebeat.org/\n- Best Practices Guide: https://docs.filebeat.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"filebeat-installation-guide\" class=\"mobile-header\">filebeat Installation Guide</h1>\n<p class=\"mobile-paragraph\">filebeat is a free and open-source log shipper. Filebeat provides lightweight shipper for forwarding logs</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: Various outputs</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5066 (default filebeat port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install filebeat\nsudo dnf install -y filebeat\n\n# Enable and start service\nsudo systemctl enable --now filebeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install filebeat\nsudo apt install -y filebeat\n\n# Enable and start service\nsudo systemctl enable --now filebeat\n\n# Configure firewall\nsudo ufw allow 5066\n\n# Verify installation\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install filebeat\nsudo pacman -S filebeat\n\n# Enable and start service\nsudo systemctl enable --now filebeat\n\n# Verify installation\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install filebeat\napk add --no-cache filebeat\n\n# Enable and start service\nrc-update add filebeat default\nrc-service filebeat start\n\n# Verify installation\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install filebeat\nsudo zypper install -y filebeat\n\n# Enable and start service\nsudo systemctl enable --now filebeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install filebeat\n\n# Start service\nbrew services start filebeat\n\n# Verify installation\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install filebeat\n\n# Enable in rc.conf\necho &#039;filebeat_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice filebeat start\n\n# Verify installation\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install filebeat\n\n# Or using Scoop\nscoop install filebeat\n\n# Verify installation\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/filebeat\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfilebeat --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable filebeat\n\n# Start service\nsudo systemctl start filebeat\n\n# Stop service\nsudo systemctl stop filebeat\n\n# Restart service\nsudo systemctl restart filebeat\n\n# Check status\nsudo systemctl status filebeat\n\n# View logs\nsudo journalctl -u filebeat -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add filebeat default\n\n# Start service\nrc-service filebeat start\n\n# Stop service\nrc-service filebeat stop\n\n# Restart service\nrc-service filebeat restart\n\n# Check status\nrc-service filebeat status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;filebeat_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice filebeat start\n\n# Stop service\nservice filebeat stop\n\n# Restart service\nservice filebeat restart\n\n# Check status\nservice filebeat status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start filebeat\nbrew services stop filebeat\nbrew services restart filebeat\n\n# Check status\nbrew services list | grep filebeat</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start filebeat\n\n# Stop service\nnet stop filebeat\n\n# Using PowerShell\nStart-Service filebeat\nStop-Service filebeat\nRestart-Service filebeat\n\n# Check status\nGet-Service filebeat</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream filebeat_backend {\n    server 127.0.0.1:5066;\n}\n\nserver {\n    listen 80;\n    server_name filebeat.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name filebeat.example.com;\n\n    ssl_certificate /etc/ssl/certs/filebeat.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/filebeat.example.com.key;\n\n    location / {\n        proxy_pass http://filebeat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName filebeat.example.com\n    Redirect permanent / https://filebeat.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName filebeat.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/filebeat.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/filebeat.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5066/\n    ProxyPassReverse / http://127.0.0.1:5066/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend filebeat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/filebeat.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend filebeat_backend\n\nbackend filebeat_backend\n    balance roundrobin\n    server filebeat1 127.0.0.1:5066 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R filebeat:filebeat /etc/filebeat\nsudo chmod 750 /etc/filebeat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5066/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status filebeat\n\n# View logs\nsudo journalctl -u filebeat -f\n\n# Monitor resource usage\ntop -p $(pgrep filebeat)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/filebeat&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/filebeat-backup-$DATE.tar.gz&quot; /etc/filebeat /var/lib/filebeat\n\necho &quot;Backup completed: $BACKUP_DIR/filebeat-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop filebeat\n\n# Restore from backup\ntar -xzf /backup/filebeat/filebeat-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start filebeat</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u filebeat -n 100\nsudo tail -f /var/log/filebeat/filebeat.log\n\n# Check configuration\nfilebeat --version\n\n# Check permissions\nls -la /etc/filebeat</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5066\n\n# Test connectivity\ntelnet localhost 5066\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep filebeat)\n\n# Check disk I/O\niotop -p $(pgrep filebeat)\n\n# Check connections\nss -an | grep 5066</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  filebeat:\n    image: filebeat:latest\n    ports:\n      - &quot;5066:5066&quot;\n    volumes:\n      - ./config:/etc/filebeat\n      - ./data:/var/lib/filebeat\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update filebeat\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade filebeat\n\n# Arch Linux\nsudo pacman -Syu filebeat\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade filebeat\n\n# openSUSE\nsudo zypper update filebeat\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade filebeat\n\n# Always backup before updates\ntar -czf /backup/filebeat-pre-update-$(date +%Y%m%d).tar.gz /etc/filebeat\n\n# Restart after updates\nsudo systemctl restart filebeat</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/filebeat\n\n# Clean old logs\nfind /var/log/filebeat -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/filebeat</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.filebeat.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/filebeat/filebeat</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.filebeat.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.filebeat.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1153,"lastBuilt":"2025-09-16T03:17:39.917Z","metadataVersion":"2.0"},{"name":"filebrowser","displayName":"filebrowser Installation Guide","slug":"filebrowser","description":"filebrowser is a free and open-source web file manager. File Browser provides a web interface for managing files with sharing capabilities","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/filebrowser","documentationUrl":"https://howtomgr.github.io/miscellaneous/filebrowser","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/filebrowser","updatedAt":"2025-09-16T03:11:07Z","createdAt":"2025-09-16T02:37:07Z","readmeRaw":"# filebrowser Installation Guide\n\nfilebrowser is a free and open-source web file manager. File Browser provides a web interface for managing files with sharing capabilities\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 50MB for app\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default filebrowser port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install filebrowser\nsudo dnf install -y filebrowser\n\n# Enable and start service\nsudo systemctl enable --now filebrowser\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfilebrowser --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install filebrowser\nsudo apt install -y filebrowser\n\n# Enable and start service\nsudo systemctl enable --now filebrowser\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nfilebrowser --version\n```\n\n### Arch Linux\n\n```bash\n# Install filebrowser\nsudo pacman -S filebrowser\n\n# Enable and start service\nsudo systemctl enable --now filebrowser\n\n# Verify installation\nfilebrowser --version\n```\n\n### Alpine Linux\n\n```bash\n# Install filebrowser\napk add --no-cache filebrowser\n\n# Enable and start service\nrc-update add filebrowser default\nrc-service filebrowser start\n\n# Verify installation\nfilebrowser --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install filebrowser\nsudo zypper install -y filebrowser\n\n# Enable and start service\nsudo systemctl enable --now filebrowser\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfilebrowser --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install filebrowser\n\n# Start service\nbrew services start filebrowser\n\n# Verify installation\nfilebrowser --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install filebrowser\n\n# Enable in rc.conf\necho 'filebrowser_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice filebrowser start\n\n# Verify installation\nfilebrowser --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install filebrowser\n\n# Or using Scoop\nscoop install filebrowser\n\n# Verify installation\nfilebrowser --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/filebrowser\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfilebrowser --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable filebrowser\n\n# Start service\nsudo systemctl start filebrowser\n\n# Stop service\nsudo systemctl stop filebrowser\n\n# Restart service\nsudo systemctl restart filebrowser\n\n# Check status\nsudo systemctl status filebrowser\n\n# View logs\nsudo journalctl -u filebrowser -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add filebrowser default\n\n# Start service\nrc-service filebrowser start\n\n# Stop service\nrc-service filebrowser stop\n\n# Restart service\nrc-service filebrowser restart\n\n# Check status\nrc-service filebrowser status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'filebrowser_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice filebrowser start\n\n# Stop service\nservice filebrowser stop\n\n# Restart service\nservice filebrowser restart\n\n# Check status\nservice filebrowser status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start filebrowser\nbrew services stop filebrowser\nbrew services restart filebrowser\n\n# Check status\nbrew services list | grep filebrowser\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start filebrowser\n\n# Stop service\nnet stop filebrowser\n\n# Using PowerShell\nStart-Service filebrowser\nStop-Service filebrowser\nRestart-Service filebrowser\n\n# Check status\nGet-Service filebrowser\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream filebrowser_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name filebrowser.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name filebrowser.example.com;\n\n    ssl_certificate /etc/ssl/certs/filebrowser.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/filebrowser.example.com.key;\n\n    location / {\n        proxy_pass http://filebrowser_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName filebrowser.example.com\n    Redirect permanent / https://filebrowser.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName filebrowser.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/filebrowser.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/filebrowser.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend filebrowser_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/filebrowser.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend filebrowser_backend\n\nbackend filebrowser_backend\n    balance roundrobin\n    server filebrowser1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R filebrowser:filebrowser /etc/filebrowser\nsudo chmod 750 /etc/filebrowser\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status filebrowser\n\n# View logs\nsudo journalctl -u filebrowser -f\n\n# Monitor resource usage\ntop -p $(pgrep filebrowser)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/filebrowser\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/filebrowser-backup-$DATE.tar.gz\" /etc/filebrowser /var/lib/filebrowser\n\necho \"Backup completed: $BACKUP_DIR/filebrowser-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop filebrowser\n\n# Restore from backup\ntar -xzf /backup/filebrowser/filebrowser-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start filebrowser\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u filebrowser -n 100\nsudo tail -f /var/log/filebrowser/filebrowser.log\n\n# Check configuration\nfilebrowser --version\n\n# Check permissions\nls -la /etc/filebrowser\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep filebrowser)\n\n# Check disk I/O\niotop -p $(pgrep filebrowser)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  filebrowser:\n    image: filebrowser:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/filebrowser\n      - ./data:/var/lib/filebrowser\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update filebrowser\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade filebrowser\n\n# Arch Linux\nsudo pacman -Syu filebrowser\n\n# Alpine Linux\napk update && apk upgrade filebrowser\n\n# openSUSE\nsudo zypper update filebrowser\n\n# FreeBSD\npkg update && pkg upgrade filebrowser\n\n# Always backup before updates\ntar -czf /backup/filebrowser-pre-update-$(date +%Y%m%d).tar.gz /etc/filebrowser\n\n# Restart after updates\nsudo systemctl restart filebrowser\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/filebrowser\n\n# Clean old logs\nfind /var/log/filebrowser -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/filebrowser\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.filebrowser.org/\n- GitHub Repository: https://github.com/filebrowser/filebrowser\n- Community Forum: https://forum.filebrowser.org/\n- Best Practices Guide: https://docs.filebrowser.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"filebrowser-installation-guide\" class=\"mobile-header\">filebrowser Installation Guide</h1>\n<p class=\"mobile-paragraph\">filebrowser is a free and open-source web file manager. File Browser provides a web interface for managing files with sharing capabilities</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50MB for app</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default filebrowser port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install filebrowser\nsudo dnf install -y filebrowser\n\n# Enable and start service\nsudo systemctl enable --now filebrowser\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install filebrowser\nsudo apt install -y filebrowser\n\n# Enable and start service\nsudo systemctl enable --now filebrowser\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install filebrowser\nsudo pacman -S filebrowser\n\n# Enable and start service\nsudo systemctl enable --now filebrowser\n\n# Verify installation\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install filebrowser\napk add --no-cache filebrowser\n\n# Enable and start service\nrc-update add filebrowser default\nrc-service filebrowser start\n\n# Verify installation\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install filebrowser\nsudo zypper install -y filebrowser\n\n# Enable and start service\nsudo systemctl enable --now filebrowser\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install filebrowser\n\n# Start service\nbrew services start filebrowser\n\n# Verify installation\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install filebrowser\n\n# Enable in rc.conf\necho &#039;filebrowser_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice filebrowser start\n\n# Verify installation\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install filebrowser\n\n# Or using Scoop\nscoop install filebrowser\n\n# Verify installation\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/filebrowser\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfilebrowser --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable filebrowser\n\n# Start service\nsudo systemctl start filebrowser\n\n# Stop service\nsudo systemctl stop filebrowser\n\n# Restart service\nsudo systemctl restart filebrowser\n\n# Check status\nsudo systemctl status filebrowser\n\n# View logs\nsudo journalctl -u filebrowser -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add filebrowser default\n\n# Start service\nrc-service filebrowser start\n\n# Stop service\nrc-service filebrowser stop\n\n# Restart service\nrc-service filebrowser restart\n\n# Check status\nrc-service filebrowser status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;filebrowser_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice filebrowser start\n\n# Stop service\nservice filebrowser stop\n\n# Restart service\nservice filebrowser restart\n\n# Check status\nservice filebrowser status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start filebrowser\nbrew services stop filebrowser\nbrew services restart filebrowser\n\n# Check status\nbrew services list | grep filebrowser</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start filebrowser\n\n# Stop service\nnet stop filebrowser\n\n# Using PowerShell\nStart-Service filebrowser\nStop-Service filebrowser\nRestart-Service filebrowser\n\n# Check status\nGet-Service filebrowser</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream filebrowser_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name filebrowser.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name filebrowser.example.com;\n\n    ssl_certificate /etc/ssl/certs/filebrowser.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/filebrowser.example.com.key;\n\n    location / {\n        proxy_pass http://filebrowser_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName filebrowser.example.com\n    Redirect permanent / https://filebrowser.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName filebrowser.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/filebrowser.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/filebrowser.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend filebrowser_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/filebrowser.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend filebrowser_backend\n\nbackend filebrowser_backend\n    balance roundrobin\n    server filebrowser1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R filebrowser:filebrowser /etc/filebrowser\nsudo chmod 750 /etc/filebrowser\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status filebrowser\n\n# View logs\nsudo journalctl -u filebrowser -f\n\n# Monitor resource usage\ntop -p $(pgrep filebrowser)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/filebrowser&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/filebrowser-backup-$DATE.tar.gz&quot; /etc/filebrowser /var/lib/filebrowser\n\necho &quot;Backup completed: $BACKUP_DIR/filebrowser-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop filebrowser\n\n# Restore from backup\ntar -xzf /backup/filebrowser/filebrowser-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start filebrowser</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u filebrowser -n 100\nsudo tail -f /var/log/filebrowser/filebrowser.log\n\n# Check configuration\nfilebrowser --version\n\n# Check permissions\nls -la /etc/filebrowser</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep filebrowser)\n\n# Check disk I/O\niotop -p $(pgrep filebrowser)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  filebrowser:\n    image: filebrowser:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/filebrowser\n      - ./data:/var/lib/filebrowser\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update filebrowser\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade filebrowser\n\n# Arch Linux\nsudo pacman -Syu filebrowser\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade filebrowser\n\n# openSUSE\nsudo zypper update filebrowser\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade filebrowser\n\n# Always backup before updates\ntar -czf /backup/filebrowser-pre-update-$(date +%Y%m%d).tar.gz /etc/filebrowser\n\n# Restart after updates\nsudo systemctl restart filebrowser</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/filebrowser\n\n# Clean old logs\nfind /var/log/filebrowser -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/filebrowser</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.filebrowser.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/filebrowser/filebrowser</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.filebrowser.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.filebrowser.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1159,"lastBuilt":"2025-09-16T03:17:39.605Z","metadataVersion":"2.0"},{"name":"firefly-iii","displayName":"firefly-iii Installation Guide","slug":"firefly-iii","description":"firefly-iii is a free and open-source personal finance manager. Firefly III helps track expenses and manage personal finances","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/firefly-iii","documentationUrl":"https://howtomgr.github.io/miscellaneous/firefly-iii","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/firefly-iii","updatedAt":"2025-09-16T03:11:14Z","createdAt":"2025-09-16T02:37:17Z","readmeRaw":"# firefly-iii Installation Guide\n\nfirefly-iii is a free and open-source personal finance manager. Firefly III helps track expenses and manage personal finances\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default firefly-iii port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install firefly-iii\nsudo dnf install -y firefly-iii\n\n# Enable and start service\nsudo systemctl enable --now firefly-iii\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfirefly-iii --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install firefly-iii\nsudo apt install -y firefly-iii\n\n# Enable and start service\nsudo systemctl enable --now firefly-iii\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nfirefly-iii --version\n```\n\n### Arch Linux\n\n```bash\n# Install firefly-iii\nsudo pacman -S firefly-iii\n\n# Enable and start service\nsudo systemctl enable --now firefly-iii\n\n# Verify installation\nfirefly-iii --version\n```\n\n### Alpine Linux\n\n```bash\n# Install firefly-iii\napk add --no-cache firefly-iii\n\n# Enable and start service\nrc-update add firefly-iii default\nrc-service firefly-iii start\n\n# Verify installation\nfirefly-iii --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install firefly-iii\nsudo zypper install -y firefly-iii\n\n# Enable and start service\nsudo systemctl enable --now firefly-iii\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfirefly-iii --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install firefly-iii\n\n# Start service\nbrew services start firefly-iii\n\n# Verify installation\nfirefly-iii --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install firefly-iii\n\n# Enable in rc.conf\necho 'firefly-iii_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice firefly-iii start\n\n# Verify installation\nfirefly-iii --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install firefly-iii\n\n# Or using Scoop\nscoop install firefly-iii\n\n# Verify installation\nfirefly-iii --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/firefly-iii\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfirefly-iii --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable firefly-iii\n\n# Start service\nsudo systemctl start firefly-iii\n\n# Stop service\nsudo systemctl stop firefly-iii\n\n# Restart service\nsudo systemctl restart firefly-iii\n\n# Check status\nsudo systemctl status firefly-iii\n\n# View logs\nsudo journalctl -u firefly-iii -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add firefly-iii default\n\n# Start service\nrc-service firefly-iii start\n\n# Stop service\nrc-service firefly-iii stop\n\n# Restart service\nrc-service firefly-iii restart\n\n# Check status\nrc-service firefly-iii status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'firefly-iii_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice firefly-iii start\n\n# Stop service\nservice firefly-iii stop\n\n# Restart service\nservice firefly-iii restart\n\n# Check status\nservice firefly-iii status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start firefly-iii\nbrew services stop firefly-iii\nbrew services restart firefly-iii\n\n# Check status\nbrew services list | grep firefly-iii\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start firefly-iii\n\n# Stop service\nnet stop firefly-iii\n\n# Using PowerShell\nStart-Service firefly-iii\nStop-Service firefly-iii\nRestart-Service firefly-iii\n\n# Check status\nGet-Service firefly-iii\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream firefly-iii_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name firefly-iii.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name firefly-iii.example.com;\n\n    ssl_certificate /etc/ssl/certs/firefly-iii.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/firefly-iii.example.com.key;\n\n    location / {\n        proxy_pass http://firefly-iii_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName firefly-iii.example.com\n    Redirect permanent / https://firefly-iii.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName firefly-iii.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/firefly-iii.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/firefly-iii.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend firefly-iii_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/firefly-iii.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend firefly-iii_backend\n\nbackend firefly-iii_backend\n    balance roundrobin\n    server firefly-iii1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R firefly-iii:firefly-iii /etc/firefly-iii\nsudo chmod 750 /etc/firefly-iii\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status firefly-iii\n\n# View logs\nsudo journalctl -u firefly-iii -f\n\n# Monitor resource usage\ntop -p $(pgrep firefly-iii)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/firefly-iii\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/firefly-iii-backup-$DATE.tar.gz\" /etc/firefly-iii /var/lib/firefly-iii\n\necho \"Backup completed: $BACKUP_DIR/firefly-iii-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop firefly-iii\n\n# Restore from backup\ntar -xzf /backup/firefly-iii/firefly-iii-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start firefly-iii\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u firefly-iii -n 100\nsudo tail -f /var/log/firefly-iii/firefly-iii.log\n\n# Check configuration\nfirefly-iii --version\n\n# Check permissions\nls -la /etc/firefly-iii\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep firefly-iii)\n\n# Check disk I/O\niotop -p $(pgrep firefly-iii)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  firefly-iii:\n    image: firefly-iii:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/firefly-iii\n      - ./data:/var/lib/firefly-iii\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update firefly-iii\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade firefly-iii\n\n# Arch Linux\nsudo pacman -Syu firefly-iii\n\n# Alpine Linux\napk update && apk upgrade firefly-iii\n\n# openSUSE\nsudo zypper update firefly-iii\n\n# FreeBSD\npkg update && pkg upgrade firefly-iii\n\n# Always backup before updates\ntar -czf /backup/firefly-iii-pre-update-$(date +%Y%m%d).tar.gz /etc/firefly-iii\n\n# Restart after updates\nsudo systemctl restart firefly-iii\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/firefly-iii\n\n# Clean old logs\nfind /var/log/firefly-iii -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/firefly-iii\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.firefly-iii.org/\n- GitHub Repository: https://github.com/firefly-iii/firefly-iii\n- Community Forum: https://forum.firefly-iii.org/\n- Best Practices Guide: https://docs.firefly-iii.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"firefly-iii-installation-guide\" class=\"mobile-header\">firefly-iii Installation Guide</h1>\n<p class=\"mobile-paragraph\">firefly-iii is a free and open-source personal finance manager. Firefly III helps track expenses and manage personal finances</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default firefly-iii port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install firefly-iii\nsudo dnf install -y firefly-iii\n\n# Enable and start service\nsudo systemctl enable --now firefly-iii\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install firefly-iii\nsudo apt install -y firefly-iii\n\n# Enable and start service\nsudo systemctl enable --now firefly-iii\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install firefly-iii\nsudo pacman -S firefly-iii\n\n# Enable and start service\nsudo systemctl enable --now firefly-iii\n\n# Verify installation\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install firefly-iii\napk add --no-cache firefly-iii\n\n# Enable and start service\nrc-update add firefly-iii default\nrc-service firefly-iii start\n\n# Verify installation\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install firefly-iii\nsudo zypper install -y firefly-iii\n\n# Enable and start service\nsudo systemctl enable --now firefly-iii\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install firefly-iii\n\n# Start service\nbrew services start firefly-iii\n\n# Verify installation\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install firefly-iii\n\n# Enable in rc.conf\necho &#039;firefly-iii_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice firefly-iii start\n\n# Verify installation\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install firefly-iii\n\n# Or using Scoop\nscoop install firefly-iii\n\n# Verify installation\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/firefly-iii\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfirefly-iii --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable firefly-iii\n\n# Start service\nsudo systemctl start firefly-iii\n\n# Stop service\nsudo systemctl stop firefly-iii\n\n# Restart service\nsudo systemctl restart firefly-iii\n\n# Check status\nsudo systemctl status firefly-iii\n\n# View logs\nsudo journalctl -u firefly-iii -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add firefly-iii default\n\n# Start service\nrc-service firefly-iii start\n\n# Stop service\nrc-service firefly-iii stop\n\n# Restart service\nrc-service firefly-iii restart\n\n# Check status\nrc-service firefly-iii status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;firefly-iii_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice firefly-iii start\n\n# Stop service\nservice firefly-iii stop\n\n# Restart service\nservice firefly-iii restart\n\n# Check status\nservice firefly-iii status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start firefly-iii\nbrew services stop firefly-iii\nbrew services restart firefly-iii\n\n# Check status\nbrew services list | grep firefly-iii</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start firefly-iii\n\n# Stop service\nnet stop firefly-iii\n\n# Using PowerShell\nStart-Service firefly-iii\nStop-Service firefly-iii\nRestart-Service firefly-iii\n\n# Check status\nGet-Service firefly-iii</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream firefly-iii_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name firefly-iii.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name firefly-iii.example.com;\n\n    ssl_certificate /etc/ssl/certs/firefly-iii.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/firefly-iii.example.com.key;\n\n    location / {\n        proxy_pass http://firefly-iii_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName firefly-iii.example.com\n    Redirect permanent / https://firefly-iii.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName firefly-iii.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/firefly-iii.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/firefly-iii.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend firefly-iii_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/firefly-iii.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend firefly-iii_backend\n\nbackend firefly-iii_backend\n    balance roundrobin\n    server firefly-iii1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R firefly-iii:firefly-iii /etc/firefly-iii\nsudo chmod 750 /etc/firefly-iii\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status firefly-iii\n\n# View logs\nsudo journalctl -u firefly-iii -f\n\n# Monitor resource usage\ntop -p $(pgrep firefly-iii)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/firefly-iii&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/firefly-iii-backup-$DATE.tar.gz&quot; /etc/firefly-iii /var/lib/firefly-iii\n\necho &quot;Backup completed: $BACKUP_DIR/firefly-iii-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop firefly-iii\n\n# Restore from backup\ntar -xzf /backup/firefly-iii/firefly-iii-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start firefly-iii</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u firefly-iii -n 100\nsudo tail -f /var/log/firefly-iii/firefly-iii.log\n\n# Check configuration\nfirefly-iii --version\n\n# Check permissions\nls -la /etc/firefly-iii</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep firefly-iii)\n\n# Check disk I/O\niotop -p $(pgrep firefly-iii)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  firefly-iii:\n    image: firefly-iii:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/firefly-iii\n      - ./data:/var/lib/firefly-iii\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update firefly-iii\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade firefly-iii\n\n# Arch Linux\nsudo pacman -Syu firefly-iii\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade firefly-iii\n\n# openSUSE\nsudo zypper update firefly-iii\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade firefly-iii\n\n# Always backup before updates\ntar -czf /backup/firefly-iii-pre-update-$(date +%Y%m%d).tar.gz /etc/firefly-iii\n\n# Restart after updates\nsudo systemctl restart firefly-iii</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/firefly-iii\n\n# Clean old logs\nfind /var/log/firefly-iii -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/firefly-iii</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.firefly-iii.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/firefly-iii/firefly-iii</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.firefly-iii.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.firefly-iii.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1156,"lastBuilt":"2025-09-16T03:17:39.224Z","metadataVersion":"2.0"},{"name":"flame","displayName":"flame Installation Guide","slug":"flame","description":"flame is a free and open-source self-hosted startpage for your server. Flame provides a beautiful, customizable dashboard for self-hosted services, serving as an alternative to Heimdall or Homer","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,5005],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/flame","documentationUrl":"https://howtomgr.github.io/miscellaneous/flame","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/flame","updatedAt":"2025-09-16T03:11:21Z","createdAt":"2025-09-16T02:37:27Z","readmeRaw":"# flame Installation Guide\n\nflame is a free and open-source self-hosted startpage for your server. Flame provides a beautiful, customizable dashboard for self-hosted services, serving as an alternative to Heimdall or Homer\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 100MB for application\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5005 (default flame port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install flame\nsudo dnf install -y flame\n\n# Enable and start service\nsudo systemctl enable --now flame\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5005/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflame --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install flame\nsudo apt install -y flame\n\n# Enable and start service\nsudo systemctl enable --now flame\n\n# Configure firewall\nsudo ufw allow 5005\n\n# Verify installation\nflame --version\n```\n\n### Arch Linux\n\n```bash\n# Install flame\nsudo pacman -S flame\n\n# Enable and start service\nsudo systemctl enable --now flame\n\n# Verify installation\nflame --version\n```\n\n### Alpine Linux\n\n```bash\n# Install flame\napk add --no-cache flame\n\n# Enable and start service\nrc-update add flame default\nrc-service flame start\n\n# Verify installation\nflame --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install flame\nsudo zypper install -y flame\n\n# Enable and start service\nsudo systemctl enable --now flame\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5005/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflame --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install flame\n\n# Start service\nbrew services start flame\n\n# Verify installation\nflame --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install flame\n\n# Enable in rc.conf\necho 'flame_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice flame start\n\n# Verify installation\nflame --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install flame\n\n# Or using Scoop\nscoop install flame\n\n# Verify installation\nflame --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/flame\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nflame --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable flame\n\n# Start service\nsudo systemctl start flame\n\n# Stop service\nsudo systemctl stop flame\n\n# Restart service\nsudo systemctl restart flame\n\n# Check status\nsudo systemctl status flame\n\n# View logs\nsudo journalctl -u flame -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add flame default\n\n# Start service\nrc-service flame start\n\n# Stop service\nrc-service flame stop\n\n# Restart service\nrc-service flame restart\n\n# Check status\nrc-service flame status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'flame_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice flame start\n\n# Stop service\nservice flame stop\n\n# Restart service\nservice flame restart\n\n# Check status\nservice flame status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start flame\nbrew services stop flame\nbrew services restart flame\n\n# Check status\nbrew services list | grep flame\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start flame\n\n# Stop service\nnet stop flame\n\n# Using PowerShell\nStart-Service flame\nStop-Service flame\nRestart-Service flame\n\n# Check status\nGet-Service flame\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream flame_backend {\n    server 127.0.0.1:5005;\n}\n\nserver {\n    listen 80;\n    server_name flame.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name flame.example.com;\n\n    ssl_certificate /etc/ssl/certs/flame.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/flame.example.com.key;\n\n    location / {\n        proxy_pass http://flame_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName flame.example.com\n    Redirect permanent / https://flame.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName flame.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/flame.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/flame.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5005/\n    ProxyPassReverse / http://127.0.0.1:5005/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend flame_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/flame.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend flame_backend\n\nbackend flame_backend\n    balance roundrobin\n    server flame1 127.0.0.1:5005 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R flame:flame /etc/flame\nsudo chmod 750 /etc/flame\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5005/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status flame\n\n# View logs\nsudo journalctl -u flame -f\n\n# Monitor resource usage\ntop -p $(pgrep flame)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/flame\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/flame-backup-$DATE.tar.gz\" /etc/flame /var/lib/flame\n\necho \"Backup completed: $BACKUP_DIR/flame-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop flame\n\n# Restore from backup\ntar -xzf /backup/flame/flame-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start flame\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u flame -n 100\nsudo tail -f /var/log/flame/flame.log\n\n# Check configuration\nflame --version\n\n# Check permissions\nls -la /etc/flame\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5005\n\n# Test connectivity\ntelnet localhost 5005\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep flame)\n\n# Check disk I/O\niotop -p $(pgrep flame)\n\n# Check connections\nss -an | grep 5005\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  flame:\n    image: flame:latest\n    ports:\n      - \"5005:5005\"\n    volumes:\n      - ./config:/etc/flame\n      - ./data:/var/lib/flame\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update flame\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade flame\n\n# Arch Linux\nsudo pacman -Syu flame\n\n# Alpine Linux\napk update && apk upgrade flame\n\n# openSUSE\nsudo zypper update flame\n\n# FreeBSD\npkg update && pkg upgrade flame\n\n# Always backup before updates\ntar -czf /backup/flame-pre-update-$(date +%Y%m%d).tar.gz /etc/flame\n\n# Restart after updates\nsudo systemctl restart flame\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/flame\n\n# Clean old logs\nfind /var/log/flame -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/flame\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.flame.org/\n- GitHub Repository: https://github.com/flame/flame\n- Community Forum: https://forum.flame.org/\n- Best Practices Guide: https://docs.flame.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"flame-installation-guide\" class=\"mobile-header\">flame Installation Guide</h1>\n<p class=\"mobile-paragraph\">flame is a free and open-source self-hosted startpage for your server. Flame provides a beautiful, customizable dashboard for self-hosted services, serving as an alternative to Heimdall or Homer</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for application</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5005 (default flame port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install flame\nsudo dnf install -y flame\n\n# Enable and start service\nsudo systemctl enable --now flame\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5005/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflame --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install flame\nsudo apt install -y flame\n\n# Enable and start service\nsudo systemctl enable --now flame\n\n# Configure firewall\nsudo ufw allow 5005\n\n# Verify installation\nflame --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flame\nsudo pacman -S flame\n\n# Enable and start service\nsudo systemctl enable --now flame\n\n# Verify installation\nflame --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flame\napk add --no-cache flame\n\n# Enable and start service\nrc-update add flame default\nrc-service flame start\n\n# Verify installation\nflame --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flame\nsudo zypper install -y flame\n\n# Enable and start service\nsudo systemctl enable --now flame\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5005/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflame --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install flame\n\n# Start service\nbrew services start flame\n\n# Verify installation\nflame --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install flame\n\n# Enable in rc.conf\necho &#039;flame_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice flame start\n\n# Verify installation\nflame --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install flame\n\n# Or using Scoop\nscoop install flame\n\n# Verify installation\nflame --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/flame\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nflame --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable flame\n\n# Start service\nsudo systemctl start flame\n\n# Stop service\nsudo systemctl stop flame\n\n# Restart service\nsudo systemctl restart flame\n\n# Check status\nsudo systemctl status flame\n\n# View logs\nsudo journalctl -u flame -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add flame default\n\n# Start service\nrc-service flame start\n\n# Stop service\nrc-service flame stop\n\n# Restart service\nrc-service flame restart\n\n# Check status\nrc-service flame status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;flame_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice flame start\n\n# Stop service\nservice flame stop\n\n# Restart service\nservice flame restart\n\n# Check status\nservice flame status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start flame\nbrew services stop flame\nbrew services restart flame\n\n# Check status\nbrew services list | grep flame</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start flame\n\n# Stop service\nnet stop flame\n\n# Using PowerShell\nStart-Service flame\nStop-Service flame\nRestart-Service flame\n\n# Check status\nGet-Service flame</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream flame_backend {\n    server 127.0.0.1:5005;\n}\n\nserver {\n    listen 80;\n    server_name flame.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name flame.example.com;\n\n    ssl_certificate /etc/ssl/certs/flame.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/flame.example.com.key;\n\n    location / {\n        proxy_pass http://flame_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName flame.example.com\n    Redirect permanent / https://flame.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName flame.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/flame.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/flame.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5005/\n    ProxyPassReverse / http://127.0.0.1:5005/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend flame_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/flame.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend flame_backend\n\nbackend flame_backend\n    balance roundrobin\n    server flame1 127.0.0.1:5005 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R flame:flame /etc/flame\nsudo chmod 750 /etc/flame\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5005/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status flame\n\n# View logs\nsudo journalctl -u flame -f\n\n# Monitor resource usage\ntop -p $(pgrep flame)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/flame&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/flame-backup-$DATE.tar.gz&quot; /etc/flame /var/lib/flame\n\necho &quot;Backup completed: $BACKUP_DIR/flame-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop flame\n\n# Restore from backup\ntar -xzf /backup/flame/flame-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start flame</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u flame -n 100\nsudo tail -f /var/log/flame/flame.log\n\n# Check configuration\nflame --version\n\n# Check permissions\nls -la /etc/flame</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5005\n\n# Test connectivity\ntelnet localhost 5005\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep flame)\n\n# Check disk I/O\niotop -p $(pgrep flame)\n\n# Check connections\nss -an | grep 5005</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  flame:\n    image: flame:latest\n    ports:\n      - &quot;5005:5005&quot;\n    volumes:\n      - ./config:/etc/flame\n      - ./data:/var/lib/flame\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update flame\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade flame\n\n# Arch Linux\nsudo pacman -Syu flame\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade flame\n\n# openSUSE\nsudo zypper update flame\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade flame\n\n# Always backup before updates\ntar -czf /backup/flame-pre-update-$(date +%Y%m%d).tar.gz /etc/flame\n\n# Restart after updates\nsudo systemctl restart flame</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/flame\n\n# Clean old logs\nfind /var/log/flame -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/flame</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.flame.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/flame/flame</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.flame.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.flame.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1166,"lastBuilt":"2025-09-16T03:17:38.819Z","metadataVersion":"2.0"},{"name":"flarum","displayName":"flarum Installation Guide","slug":"flarum","description":"flarum is a free and open-source modern forum software. Flarum provides next-generation forum software that makes online discussion fun","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/flarum","documentationUrl":"https://howtomgr.github.io/miscellaneous/flarum","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/flarum","updatedAt":"2025-09-16T03:11:29Z","createdAt":"2025-09-16T02:37:38Z","readmeRaw":"# flarum Installation Guide\n\nflarum is a free and open-source modern forum software. Flarum provides next-generation forum software that makes online discussion fun\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 500MB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default flarum port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install flarum\nsudo dnf install -y flarum\n\n# Enable and start service\nsudo systemctl enable --now flarum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflarum --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install flarum\nsudo apt install -y flarum\n\n# Enable and start service\nsudo systemctl enable --now flarum\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nflarum --version\n```\n\n### Arch Linux\n\n```bash\n# Install flarum\nsudo pacman -S flarum\n\n# Enable and start service\nsudo systemctl enable --now flarum\n\n# Verify installation\nflarum --version\n```\n\n### Alpine Linux\n\n```bash\n# Install flarum\napk add --no-cache flarum\n\n# Enable and start service\nrc-update add flarum default\nrc-service flarum start\n\n# Verify installation\nflarum --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install flarum\nsudo zypper install -y flarum\n\n# Enable and start service\nsudo systemctl enable --now flarum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflarum --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install flarum\n\n# Start service\nbrew services start flarum\n\n# Verify installation\nflarum --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install flarum\n\n# Enable in rc.conf\necho 'flarum_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice flarum start\n\n# Verify installation\nflarum --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install flarum\n\n# Or using Scoop\nscoop install flarum\n\n# Verify installation\nflarum --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/flarum\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nflarum --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable flarum\n\n# Start service\nsudo systemctl start flarum\n\n# Stop service\nsudo systemctl stop flarum\n\n# Restart service\nsudo systemctl restart flarum\n\n# Check status\nsudo systemctl status flarum\n\n# View logs\nsudo journalctl -u flarum -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add flarum default\n\n# Start service\nrc-service flarum start\n\n# Stop service\nrc-service flarum stop\n\n# Restart service\nrc-service flarum restart\n\n# Check status\nrc-service flarum status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'flarum_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice flarum start\n\n# Stop service\nservice flarum stop\n\n# Restart service\nservice flarum restart\n\n# Check status\nservice flarum status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start flarum\nbrew services stop flarum\nbrew services restart flarum\n\n# Check status\nbrew services list | grep flarum\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start flarum\n\n# Stop service\nnet stop flarum\n\n# Using PowerShell\nStart-Service flarum\nStop-Service flarum\nRestart-Service flarum\n\n# Check status\nGet-Service flarum\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream flarum_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name flarum.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name flarum.example.com;\n\n    ssl_certificate /etc/ssl/certs/flarum.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/flarum.example.com.key;\n\n    location / {\n        proxy_pass http://flarum_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName flarum.example.com\n    Redirect permanent / https://flarum.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName flarum.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/flarum.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/flarum.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend flarum_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/flarum.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend flarum_backend\n\nbackend flarum_backend\n    balance roundrobin\n    server flarum1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R flarum:flarum /etc/flarum\nsudo chmod 750 /etc/flarum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status flarum\n\n# View logs\nsudo journalctl -u flarum -f\n\n# Monitor resource usage\ntop -p $(pgrep flarum)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/flarum\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/flarum-backup-$DATE.tar.gz\" /etc/flarum /var/lib/flarum\n\necho \"Backup completed: $BACKUP_DIR/flarum-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop flarum\n\n# Restore from backup\ntar -xzf /backup/flarum/flarum-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start flarum\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u flarum -n 100\nsudo tail -f /var/log/flarum/flarum.log\n\n# Check configuration\nflarum --version\n\n# Check permissions\nls -la /etc/flarum\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep flarum)\n\n# Check disk I/O\niotop -p $(pgrep flarum)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  flarum:\n    image: flarum:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/flarum\n      - ./data:/var/lib/flarum\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update flarum\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade flarum\n\n# Arch Linux\nsudo pacman -Syu flarum\n\n# Alpine Linux\napk update && apk upgrade flarum\n\n# openSUSE\nsudo zypper update flarum\n\n# FreeBSD\npkg update && pkg upgrade flarum\n\n# Always backup before updates\ntar -czf /backup/flarum-pre-update-$(date +%Y%m%d).tar.gz /etc/flarum\n\n# Restart after updates\nsudo systemctl restart flarum\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/flarum\n\n# Clean old logs\nfind /var/log/flarum -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/flarum\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.flarum.org/\n- GitHub Repository: https://github.com/flarum/flarum\n- Community Forum: https://forum.flarum.org/\n- Best Practices Guide: https://docs.flarum.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"flarum-installation-guide\" class=\"mobile-header\">flarum Installation Guide</h1>\n<p class=\"mobile-paragraph\">flarum is a free and open-source modern forum software. Flarum provides next-generation forum software that makes online discussion fun</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default flarum port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install flarum\nsudo dnf install -y flarum\n\n# Enable and start service\nsudo systemctl enable --now flarum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflarum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install flarum\nsudo apt install -y flarum\n\n# Enable and start service\nsudo systemctl enable --now flarum\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nflarum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flarum\nsudo pacman -S flarum\n\n# Enable and start service\nsudo systemctl enable --now flarum\n\n# Verify installation\nflarum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flarum\napk add --no-cache flarum\n\n# Enable and start service\nrc-update add flarum default\nrc-service flarum start\n\n# Verify installation\nflarum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flarum\nsudo zypper install -y flarum\n\n# Enable and start service\nsudo systemctl enable --now flarum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflarum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install flarum\n\n# Start service\nbrew services start flarum\n\n# Verify installation\nflarum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install flarum\n\n# Enable in rc.conf\necho &#039;flarum_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice flarum start\n\n# Verify installation\nflarum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install flarum\n\n# Or using Scoop\nscoop install flarum\n\n# Verify installation\nflarum --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/flarum\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nflarum --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable flarum\n\n# Start service\nsudo systemctl start flarum\n\n# Stop service\nsudo systemctl stop flarum\n\n# Restart service\nsudo systemctl restart flarum\n\n# Check status\nsudo systemctl status flarum\n\n# View logs\nsudo journalctl -u flarum -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add flarum default\n\n# Start service\nrc-service flarum start\n\n# Stop service\nrc-service flarum stop\n\n# Restart service\nrc-service flarum restart\n\n# Check status\nrc-service flarum status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;flarum_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice flarum start\n\n# Stop service\nservice flarum stop\n\n# Restart service\nservice flarum restart\n\n# Check status\nservice flarum status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start flarum\nbrew services stop flarum\nbrew services restart flarum\n\n# Check status\nbrew services list | grep flarum</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start flarum\n\n# Stop service\nnet stop flarum\n\n# Using PowerShell\nStart-Service flarum\nStop-Service flarum\nRestart-Service flarum\n\n# Check status\nGet-Service flarum</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream flarum_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name flarum.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name flarum.example.com;\n\n    ssl_certificate /etc/ssl/certs/flarum.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/flarum.example.com.key;\n\n    location / {\n        proxy_pass http://flarum_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName flarum.example.com\n    Redirect permanent / https://flarum.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName flarum.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/flarum.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/flarum.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend flarum_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/flarum.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend flarum_backend\n\nbackend flarum_backend\n    balance roundrobin\n    server flarum1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R flarum:flarum /etc/flarum\nsudo chmod 750 /etc/flarum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status flarum\n\n# View logs\nsudo journalctl -u flarum -f\n\n# Monitor resource usage\ntop -p $(pgrep flarum)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/flarum&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/flarum-backup-$DATE.tar.gz&quot; /etc/flarum /var/lib/flarum\n\necho &quot;Backup completed: $BACKUP_DIR/flarum-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop flarum\n\n# Restore from backup\ntar -xzf /backup/flarum/flarum-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start flarum</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u flarum -n 100\nsudo tail -f /var/log/flarum/flarum.log\n\n# Check configuration\nflarum --version\n\n# Check permissions\nls -la /etc/flarum</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep flarum)\n\n# Check disk I/O\niotop -p $(pgrep flarum)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  flarum:\n    image: flarum:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/flarum\n      - ./data:/var/lib/flarum\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update flarum\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade flarum\n\n# Arch Linux\nsudo pacman -Syu flarum\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade flarum\n\n# openSUSE\nsudo zypper update flarum\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade flarum\n\n# Always backup before updates\ntar -czf /backup/flarum-pre-update-$(date +%Y%m%d).tar.gz /etc/flarum\n\n# Restart after updates\nsudo systemctl restart flarum</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/flarum\n\n# Clean old logs\nfind /var/log/flarum -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/flarum</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.flarum.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/flarum/flarum</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.flarum.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.flarum.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1157,"lastBuilt":"2025-09-16T03:17:38.473Z","metadataVersion":"2.0"},{"name":"flood","displayName":"flood Installation Guide","slug":"flood","description":"flood is a free and open-source modern torrent interface. Flood provides a modern web UI for various torrent clients","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,3000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/flood","documentationUrl":"https://howtomgr.github.io/miscellaneous/flood","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/flood","updatedAt":"2025-09-16T03:11:42Z","createdAt":"2025-09-16T02:37:58Z","readmeRaw":"# flood Installation Guide\n\nflood is a free and open-source modern torrent interface. Flood provides a modern web UI for various torrent clients\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for app\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3000 (default flood port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install flood\nsudo dnf install -y flood\n\n# Enable and start service\nsudo systemctl enable --now flood\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflood --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install flood\nsudo apt install -y flood\n\n# Enable and start service\nsudo systemctl enable --now flood\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\nflood --version\n```\n\n### Arch Linux\n\n```bash\n# Install flood\nsudo pacman -S flood\n\n# Enable and start service\nsudo systemctl enable --now flood\n\n# Verify installation\nflood --version\n```\n\n### Alpine Linux\n\n```bash\n# Install flood\napk add --no-cache flood\n\n# Enable and start service\nrc-update add flood default\nrc-service flood start\n\n# Verify installation\nflood --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install flood\nsudo zypper install -y flood\n\n# Enable and start service\nsudo systemctl enable --now flood\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflood --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install flood\n\n# Start service\nbrew services start flood\n\n# Verify installation\nflood --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install flood\n\n# Enable in rc.conf\necho 'flood_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice flood start\n\n# Verify installation\nflood --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install flood\n\n# Or using Scoop\nscoop install flood\n\n# Verify installation\nflood --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/flood\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nflood --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable flood\n\n# Start service\nsudo systemctl start flood\n\n# Stop service\nsudo systemctl stop flood\n\n# Restart service\nsudo systemctl restart flood\n\n# Check status\nsudo systemctl status flood\n\n# View logs\nsudo journalctl -u flood -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add flood default\n\n# Start service\nrc-service flood start\n\n# Stop service\nrc-service flood stop\n\n# Restart service\nrc-service flood restart\n\n# Check status\nrc-service flood status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'flood_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice flood start\n\n# Stop service\nservice flood stop\n\n# Restart service\nservice flood restart\n\n# Check status\nservice flood status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start flood\nbrew services stop flood\nbrew services restart flood\n\n# Check status\nbrew services list | grep flood\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start flood\n\n# Stop service\nnet stop flood\n\n# Using PowerShell\nStart-Service flood\nStop-Service flood\nRestart-Service flood\n\n# Check status\nGet-Service flood\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream flood_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name flood.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name flood.example.com;\n\n    ssl_certificate /etc/ssl/certs/flood.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/flood.example.com.key;\n\n    location / {\n        proxy_pass http://flood_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName flood.example.com\n    Redirect permanent / https://flood.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName flood.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/flood.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/flood.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend flood_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/flood.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend flood_backend\n\nbackend flood_backend\n    balance roundrobin\n    server flood1 127.0.0.1:3000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R flood:flood /etc/flood\nsudo chmod 750 /etc/flood\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status flood\n\n# View logs\nsudo journalctl -u flood -f\n\n# Monitor resource usage\ntop -p $(pgrep flood)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/flood\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/flood-backup-$DATE.tar.gz\" /etc/flood /var/lib/flood\n\necho \"Backup completed: $BACKUP_DIR/flood-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop flood\n\n# Restore from backup\ntar -xzf /backup/flood/flood-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start flood\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u flood -n 100\nsudo tail -f /var/log/flood/flood.log\n\n# Check configuration\nflood --version\n\n# Check permissions\nls -la /etc/flood\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep flood)\n\n# Check disk I/O\niotop -p $(pgrep flood)\n\n# Check connections\nss -an | grep 3000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  flood:\n    image: flood:latest\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./config:/etc/flood\n      - ./data:/var/lib/flood\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update flood\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade flood\n\n# Arch Linux\nsudo pacman -Syu flood\n\n# Alpine Linux\napk update && apk upgrade flood\n\n# openSUSE\nsudo zypper update flood\n\n# FreeBSD\npkg update && pkg upgrade flood\n\n# Always backup before updates\ntar -czf /backup/flood-pre-update-$(date +%Y%m%d).tar.gz /etc/flood\n\n# Restart after updates\nsudo systemctl restart flood\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/flood\n\n# Clean old logs\nfind /var/log/flood -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/flood\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.flood.org/\n- GitHub Repository: https://github.com/flood/flood\n- Community Forum: https://forum.flood.org/\n- Best Practices Guide: https://docs.flood.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"flood-installation-guide\" class=\"mobile-header\">flood Installation Guide</h1>\n<p class=\"mobile-paragraph\">flood is a free and open-source modern torrent interface. Flood provides a modern web UI for various torrent clients</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for app</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3000 (default flood port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install flood\nsudo dnf install -y flood\n\n# Enable and start service\nsudo systemctl enable --now flood\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflood --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install flood\nsudo apt install -y flood\n\n# Enable and start service\nsudo systemctl enable --now flood\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\nflood --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flood\nsudo pacman -S flood\n\n# Enable and start service\nsudo systemctl enable --now flood\n\n# Verify installation\nflood --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flood\napk add --no-cache flood\n\n# Enable and start service\nrc-update add flood default\nrc-service flood start\n\n# Verify installation\nflood --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flood\nsudo zypper install -y flood\n\n# Enable and start service\nsudo systemctl enable --now flood\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflood --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install flood\n\n# Start service\nbrew services start flood\n\n# Verify installation\nflood --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install flood\n\n# Enable in rc.conf\necho &#039;flood_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice flood start\n\n# Verify installation\nflood --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install flood\n\n# Or using Scoop\nscoop install flood\n\n# Verify installation\nflood --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/flood\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nflood --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable flood\n\n# Start service\nsudo systemctl start flood\n\n# Stop service\nsudo systemctl stop flood\n\n# Restart service\nsudo systemctl restart flood\n\n# Check status\nsudo systemctl status flood\n\n# View logs\nsudo journalctl -u flood -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add flood default\n\n# Start service\nrc-service flood start\n\n# Stop service\nrc-service flood stop\n\n# Restart service\nrc-service flood restart\n\n# Check status\nrc-service flood status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;flood_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice flood start\n\n# Stop service\nservice flood stop\n\n# Restart service\nservice flood restart\n\n# Check status\nservice flood status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start flood\nbrew services stop flood\nbrew services restart flood\n\n# Check status\nbrew services list | grep flood</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start flood\n\n# Stop service\nnet stop flood\n\n# Using PowerShell\nStart-Service flood\nStop-Service flood\nRestart-Service flood\n\n# Check status\nGet-Service flood</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream flood_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name flood.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name flood.example.com;\n\n    ssl_certificate /etc/ssl/certs/flood.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/flood.example.com.key;\n\n    location / {\n        proxy_pass http://flood_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName flood.example.com\n    Redirect permanent / https://flood.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName flood.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/flood.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/flood.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend flood_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/flood.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend flood_backend\n\nbackend flood_backend\n    balance roundrobin\n    server flood1 127.0.0.1:3000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R flood:flood /etc/flood\nsudo chmod 750 /etc/flood\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status flood\n\n# View logs\nsudo journalctl -u flood -f\n\n# Monitor resource usage\ntop -p $(pgrep flood)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/flood&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/flood-backup-$DATE.tar.gz&quot; /etc/flood /var/lib/flood\n\necho &quot;Backup completed: $BACKUP_DIR/flood-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop flood\n\n# Restore from backup\ntar -xzf /backup/flood/flood-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start flood</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u flood -n 100\nsudo tail -f /var/log/flood/flood.log\n\n# Check configuration\nflood --version\n\n# Check permissions\nls -la /etc/flood</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep flood)\n\n# Check disk I/O\niotop -p $(pgrep flood)\n\n# Check connections\nss -an | grep 3000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  flood:\n    image: flood:latest\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./config:/etc/flood\n      - ./data:/var/lib/flood\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update flood\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade flood\n\n# Arch Linux\nsudo pacman -Syu flood\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade flood\n\n# openSUSE\nsudo zypper update flood\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade flood\n\n# Always backup before updates\ntar -czf /backup/flood-pre-update-$(date +%Y%m%d).tar.gz /etc/flood\n\n# Restart after updates\nsudo systemctl restart flood</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/flood\n\n# Clean old logs\nfind /var/log/flood -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/flood</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.flood.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/flood/flood</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.flood.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.flood.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1157,"lastBuilt":"2025-09-16T03:17:37.728Z","metadataVersion":"2.0"},{"name":"fluent_bit","displayName":"fluent-bit Installation Guide","slug":"fluent_bit","description":"fluent-bit is a free and open-source log processor. Fluent Bit provides fast and lightweight log processor and forwarder","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,24224],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/fluent_bit","documentationUrl":"https://howtomgr.github.io/miscellaneous/fluent_bit","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fluent_bit","updatedAt":"2025-09-16T03:11:50Z","createdAt":"2025-09-16T02:38:07Z","readmeRaw":"# fluent-bit Installation Guide\n\nfluent-bit is a free and open-source log processor. Fluent Bit provides fast and lightweight log processor and forwarder\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 1GB for buffers\n  - Network: Various inputs\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 24224 (default fluent-bit port)\n  - HTTP on 2020\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install fluent-bit\nsudo dnf install -y fluent_bit\n\n# Enable and start service\nsudo systemctl enable --now fluent-bit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfluent-bit --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install fluent-bit\nsudo apt install -y fluent_bit\n\n# Enable and start service\nsudo systemctl enable --now fluent-bit\n\n# Configure firewall\nsudo ufw allow 24224\n\n# Verify installation\nfluent-bit --version\n```\n\n### Arch Linux\n\n```bash\n# Install fluent-bit\nsudo pacman -S fluent_bit\n\n# Enable and start service\nsudo systemctl enable --now fluent-bit\n\n# Verify installation\nfluent-bit --version\n```\n\n### Alpine Linux\n\n```bash\n# Install fluent-bit\napk add --no-cache fluent_bit\n\n# Enable and start service\nrc-update add fluent-bit default\nrc-service fluent-bit start\n\n# Verify installation\nfluent-bit --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install fluent-bit\nsudo zypper install -y fluent_bit\n\n# Enable and start service\nsudo systemctl enable --now fluent-bit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfluent-bit --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install fluent_bit\n\n# Start service\nbrew services start fluent_bit\n\n# Verify installation\nfluent-bit --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install fluent_bit\n\n# Enable in rc.conf\necho 'fluent-bit_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice fluent-bit start\n\n# Verify installation\nfluent-bit --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install fluent_bit\n\n# Or using Scoop\nscoop install fluent_bit\n\n# Verify installation\nfluent-bit --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/fluent_bit\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfluent-bit --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable fluent-bit\n\n# Start service\nsudo systemctl start fluent-bit\n\n# Stop service\nsudo systemctl stop fluent-bit\n\n# Restart service\nsudo systemctl restart fluent-bit\n\n# Check status\nsudo systemctl status fluent-bit\n\n# View logs\nsudo journalctl -u fluent-bit -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add fluent-bit default\n\n# Start service\nrc-service fluent-bit start\n\n# Stop service\nrc-service fluent-bit stop\n\n# Restart service\nrc-service fluent-bit restart\n\n# Check status\nrc-service fluent-bit status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'fluent-bit_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice fluent-bit start\n\n# Stop service\nservice fluent-bit stop\n\n# Restart service\nservice fluent-bit restart\n\n# Check status\nservice fluent-bit status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start fluent_bit\nbrew services stop fluent_bit\nbrew services restart fluent_bit\n\n# Check status\nbrew services list | grep fluent_bit\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start fluent-bit\n\n# Stop service\nnet stop fluent-bit\n\n# Using PowerShell\nStart-Service fluent-bit\nStop-Service fluent-bit\nRestart-Service fluent-bit\n\n# Check status\nGet-Service fluent-bit\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream fluent_bit_backend {\n    server 127.0.0.1:24224;\n}\n\nserver {\n    listen 80;\n    server_name fluent_bit.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name fluent_bit.example.com;\n\n    ssl_certificate /etc/ssl/certs/fluent_bit.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/fluent_bit.example.com.key;\n\n    location / {\n        proxy_pass http://fluent_bit_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName fluent_bit.example.com\n    Redirect permanent / https://fluent_bit.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName fluent_bit.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/fluent_bit.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/fluent_bit.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:24224/\n    ProxyPassReverse / http://127.0.0.1:24224/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend fluent_bit_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/fluent_bit.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend fluent_bit_backend\n\nbackend fluent_bit_backend\n    balance roundrobin\n    server fluent_bit1 127.0.0.1:24224 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R fluent_bit:fluent_bit /etc/fluent_bit\nsudo chmod 750 /etc/fluent_bit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status fluent-bit\n\n# View logs\nsudo journalctl -u fluent-bit -f\n\n# Monitor resource usage\ntop -p $(pgrep fluent_bit)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/fluent_bit\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/fluent_bit-backup-$DATE.tar.gz\" /etc/fluent_bit /var/lib/fluent_bit\n\necho \"Backup completed: $BACKUP_DIR/fluent_bit-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop fluent-bit\n\n# Restore from backup\ntar -xzf /backup/fluent_bit/fluent_bit-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start fluent-bit\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u fluent-bit -n 100\nsudo tail -f /var/log/fluent_bit/fluent_bit.log\n\n# Check configuration\nfluent-bit --version\n\n# Check permissions\nls -la /etc/fluent_bit\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 24224\n\n# Test connectivity\ntelnet localhost 24224\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep fluent_bit)\n\n# Check disk I/O\niotop -p $(pgrep fluent_bit)\n\n# Check connections\nss -an | grep 24224\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  fluent_bit:\n    image: fluent_bit:latest\n    ports:\n      - \"24224:24224\"\n    volumes:\n      - ./config:/etc/fluent_bit\n      - ./data:/var/lib/fluent_bit\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update fluent_bit\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade fluent_bit\n\n# Arch Linux\nsudo pacman -Syu fluent_bit\n\n# Alpine Linux\napk update && apk upgrade fluent_bit\n\n# openSUSE\nsudo zypper update fluent_bit\n\n# FreeBSD\npkg update && pkg upgrade fluent_bit\n\n# Always backup before updates\ntar -czf /backup/fluent_bit-pre-update-$(date +%Y%m%d).tar.gz /etc/fluent_bit\n\n# Restart after updates\nsudo systemctl restart fluent-bit\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/fluent_bit\n\n# Clean old logs\nfind /var/log/fluent_bit -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/fluent_bit\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.fluent_bit.org/\n- GitHub Repository: https://github.com/fluent_bit/fluent_bit\n- Community Forum: https://forum.fluent_bit.org/\n- Best Practices Guide: https://docs.fluent_bit.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"fluent-bit-installation-guide\" class=\"mobile-header\">fluent-bit Installation Guide</h1>\n<p class=\"mobile-paragraph\">fluent-bit is a free and open-source log processor. Fluent Bit provides fast and lightweight log processor and forwarder</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for buffers</li>\n<li class=\"mobile-list-item\">Network: Various inputs</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 24224 (default fluent-bit port)</li>\n<li class=\"mobile-list-item\">HTTP on 2020</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install fluent-bit\nsudo dnf install -y fluent_bit\n\n# Enable and start service\nsudo systemctl enable --now fluent-bit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install fluent-bit\nsudo apt install -y fluent_bit\n\n# Enable and start service\nsudo systemctl enable --now fluent-bit\n\n# Configure firewall\nsudo ufw allow 24224\n\n# Verify installation\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fluent-bit\nsudo pacman -S fluent_bit\n\n# Enable and start service\nsudo systemctl enable --now fluent-bit\n\n# Verify installation\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fluent-bit\napk add --no-cache fluent_bit\n\n# Enable and start service\nrc-update add fluent-bit default\nrc-service fluent-bit start\n\n# Verify installation\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fluent-bit\nsudo zypper install -y fluent_bit\n\n# Enable and start service\nsudo systemctl enable --now fluent-bit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install fluent_bit\n\n# Start service\nbrew services start fluent_bit\n\n# Verify installation\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install fluent_bit\n\n# Enable in rc.conf\necho &#039;fluent-bit_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice fluent-bit start\n\n# Verify installation\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install fluent_bit\n\n# Or using Scoop\nscoop install fluent_bit\n\n# Verify installation\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/fluent_bit\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfluent-bit --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable fluent-bit\n\n# Start service\nsudo systemctl start fluent-bit\n\n# Stop service\nsudo systemctl stop fluent-bit\n\n# Restart service\nsudo systemctl restart fluent-bit\n\n# Check status\nsudo systemctl status fluent-bit\n\n# View logs\nsudo journalctl -u fluent-bit -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add fluent-bit default\n\n# Start service\nrc-service fluent-bit start\n\n# Stop service\nrc-service fluent-bit stop\n\n# Restart service\nrc-service fluent-bit restart\n\n# Check status\nrc-service fluent-bit status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;fluent-bit_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice fluent-bit start\n\n# Stop service\nservice fluent-bit stop\n\n# Restart service\nservice fluent-bit restart\n\n# Check status\nservice fluent-bit status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start fluent_bit\nbrew services stop fluent_bit\nbrew services restart fluent_bit\n\n# Check status\nbrew services list | grep fluent_bit</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start fluent-bit\n\n# Stop service\nnet stop fluent-bit\n\n# Using PowerShell\nStart-Service fluent-bit\nStop-Service fluent-bit\nRestart-Service fluent-bit\n\n# Check status\nGet-Service fluent-bit</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream fluent_bit_backend {\n    server 127.0.0.1:24224;\n}\n\nserver {\n    listen 80;\n    server_name fluent_bit.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name fluent_bit.example.com;\n\n    ssl_certificate /etc/ssl/certs/fluent_bit.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/fluent_bit.example.com.key;\n\n    location / {\n        proxy_pass http://fluent_bit_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName fluent_bit.example.com\n    Redirect permanent / https://fluent_bit.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName fluent_bit.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/fluent_bit.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/fluent_bit.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:24224/\n    ProxyPassReverse / http://127.0.0.1:24224/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend fluent_bit_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/fluent_bit.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend fluent_bit_backend\n\nbackend fluent_bit_backend\n    balance roundrobin\n    server fluent_bit1 127.0.0.1:24224 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R fluent_bit:fluent_bit /etc/fluent_bit\nsudo chmod 750 /etc/fluent_bit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status fluent-bit\n\n# View logs\nsudo journalctl -u fluent-bit -f\n\n# Monitor resource usage\ntop -p $(pgrep fluent_bit)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/fluent_bit&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/fluent_bit-backup-$DATE.tar.gz&quot; /etc/fluent_bit /var/lib/fluent_bit\n\necho &quot;Backup completed: $BACKUP_DIR/fluent_bit-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop fluent-bit\n\n# Restore from backup\ntar -xzf /backup/fluent_bit/fluent_bit-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start fluent-bit</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u fluent-bit -n 100\nsudo tail -f /var/log/fluent_bit/fluent_bit.log\n\n# Check configuration\nfluent-bit --version\n\n# Check permissions\nls -la /etc/fluent_bit</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 24224\n\n# Test connectivity\ntelnet localhost 24224\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep fluent_bit)\n\n# Check disk I/O\niotop -p $(pgrep fluent_bit)\n\n# Check connections\nss -an | grep 24224</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  fluent_bit:\n    image: fluent_bit:latest\n    ports:\n      - &quot;24224:24224&quot;\n    volumes:\n      - ./config:/etc/fluent_bit\n      - ./data:/var/lib/fluent_bit\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update fluent_bit\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade fluent_bit\n\n# Arch Linux\nsudo pacman -Syu fluent_bit\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade fluent_bit\n\n# openSUSE\nsudo zypper update fluent_bit\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade fluent_bit\n\n# Always backup before updates\ntar -czf /backup/fluent_bit-pre-update-$(date +%Y%m%d).tar.gz /etc/fluent_bit\n\n# Restart after updates\nsudo systemctl restart fluent-bit</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/fluent_bit\n\n# Clean old logs\nfind /var/log/fluent_bit -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/fluent_bit</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.fluent_bit.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/fluent_bit/fluent_bit</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.fluent_bit.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.fluent_bit.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1158,"lastBuilt":"2025-09-16T03:17:37.372Z","metadataVersion":"2.0"},{"name":"fluentd","displayName":"fluentd Installation Guide","slug":"fluentd","description":"fluentd is a free and open-source data collector. Fluentd provides unified logging layer for collecting and consuming data","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,24224],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/fluentd","documentationUrl":"https://howtomgr.github.io/miscellaneous/fluentd","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fluentd","updatedAt":"2025-09-16T03:11:57Z","createdAt":"2025-09-16T02:38:17Z","readmeRaw":"# fluentd Installation Guide\n\nfluentd is a free and open-source data collector. Fluentd provides unified logging layer for collecting and consuming data\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 10GB for buffers\n  - Network: Various inputs\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 24224 (default fluentd port)\n  - HTTP on 9880\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install fluentd\nsudo dnf install -y fluentd\n\n# Enable and start service\nsudo systemctl enable --now fluentd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfluentd --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install fluentd\nsudo apt install -y fluentd\n\n# Enable and start service\nsudo systemctl enable --now fluentd\n\n# Configure firewall\nsudo ufw allow 24224\n\n# Verify installation\nfluentd --version\n```\n\n### Arch Linux\n\n```bash\n# Install fluentd\nsudo pacman -S fluentd\n\n# Enable and start service\nsudo systemctl enable --now fluentd\n\n# Verify installation\nfluentd --version\n```\n\n### Alpine Linux\n\n```bash\n# Install fluentd\napk add --no-cache fluentd\n\n# Enable and start service\nrc-update add fluentd default\nrc-service fluentd start\n\n# Verify installation\nfluentd --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install fluentd\nsudo zypper install -y fluentd\n\n# Enable and start service\nsudo systemctl enable --now fluentd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfluentd --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install fluentd\n\n# Start service\nbrew services start fluentd\n\n# Verify installation\nfluentd --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install fluentd\n\n# Enable in rc.conf\necho 'fluentd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice fluentd start\n\n# Verify installation\nfluentd --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install fluentd\n\n# Or using Scoop\nscoop install fluentd\n\n# Verify installation\nfluentd --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/fluentd\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfluentd --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable fluentd\n\n# Start service\nsudo systemctl start fluentd\n\n# Stop service\nsudo systemctl stop fluentd\n\n# Restart service\nsudo systemctl restart fluentd\n\n# Check status\nsudo systemctl status fluentd\n\n# View logs\nsudo journalctl -u fluentd -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add fluentd default\n\n# Start service\nrc-service fluentd start\n\n# Stop service\nrc-service fluentd stop\n\n# Restart service\nrc-service fluentd restart\n\n# Check status\nrc-service fluentd status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'fluentd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice fluentd start\n\n# Stop service\nservice fluentd stop\n\n# Restart service\nservice fluentd restart\n\n# Check status\nservice fluentd status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start fluentd\nbrew services stop fluentd\nbrew services restart fluentd\n\n# Check status\nbrew services list | grep fluentd\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start fluentd\n\n# Stop service\nnet stop fluentd\n\n# Using PowerShell\nStart-Service fluentd\nStop-Service fluentd\nRestart-Service fluentd\n\n# Check status\nGet-Service fluentd\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream fluentd_backend {\n    server 127.0.0.1:24224;\n}\n\nserver {\n    listen 80;\n    server_name fluentd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name fluentd.example.com;\n\n    ssl_certificate /etc/ssl/certs/fluentd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/fluentd.example.com.key;\n\n    location / {\n        proxy_pass http://fluentd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName fluentd.example.com\n    Redirect permanent / https://fluentd.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName fluentd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/fluentd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/fluentd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:24224/\n    ProxyPassReverse / http://127.0.0.1:24224/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend fluentd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/fluentd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend fluentd_backend\n\nbackend fluentd_backend\n    balance roundrobin\n    server fluentd1 127.0.0.1:24224 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R fluentd:fluentd /etc/fluentd\nsudo chmod 750 /etc/fluentd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status fluentd\n\n# View logs\nsudo journalctl -u fluentd -f\n\n# Monitor resource usage\ntop -p $(pgrep fluentd)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/fluentd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/fluentd-backup-$DATE.tar.gz\" /etc/fluentd /var/lib/fluentd\n\necho \"Backup completed: $BACKUP_DIR/fluentd-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop fluentd\n\n# Restore from backup\ntar -xzf /backup/fluentd/fluentd-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start fluentd\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u fluentd -n 100\nsudo tail -f /var/log/fluentd/fluentd.log\n\n# Check configuration\nfluentd --version\n\n# Check permissions\nls -la /etc/fluentd\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 24224\n\n# Test connectivity\ntelnet localhost 24224\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep fluentd)\n\n# Check disk I/O\niotop -p $(pgrep fluentd)\n\n# Check connections\nss -an | grep 24224\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  fluentd:\n    image: fluentd:latest\n    ports:\n      - \"24224:24224\"\n    volumes:\n      - ./config:/etc/fluentd\n      - ./data:/var/lib/fluentd\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update fluentd\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade fluentd\n\n# Arch Linux\nsudo pacman -Syu fluentd\n\n# Alpine Linux\napk update && apk upgrade fluentd\n\n# openSUSE\nsudo zypper update fluentd\n\n# FreeBSD\npkg update && pkg upgrade fluentd\n\n# Always backup before updates\ntar -czf /backup/fluentd-pre-update-$(date +%Y%m%d).tar.gz /etc/fluentd\n\n# Restart after updates\nsudo systemctl restart fluentd\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/fluentd\n\n# Clean old logs\nfind /var/log/fluentd -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/fluentd\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.fluentd.org/\n- GitHub Repository: https://github.com/fluentd/fluentd\n- Community Forum: https://forum.fluentd.org/\n- Best Practices Guide: https://docs.fluentd.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"fluentd-installation-guide\" class=\"mobile-header\">fluentd Installation Guide</h1>\n<p class=\"mobile-paragraph\">fluentd is a free and open-source data collector. Fluentd provides unified logging layer for collecting and consuming data</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for buffers</li>\n<li class=\"mobile-list-item\">Network: Various inputs</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 24224 (default fluentd port)</li>\n<li class=\"mobile-list-item\">HTTP on 9880</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install fluentd\nsudo dnf install -y fluentd\n\n# Enable and start service\nsudo systemctl enable --now fluentd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install fluentd\nsudo apt install -y fluentd\n\n# Enable and start service\nsudo systemctl enable --now fluentd\n\n# Configure firewall\nsudo ufw allow 24224\n\n# Verify installation\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fluentd\nsudo pacman -S fluentd\n\n# Enable and start service\nsudo systemctl enable --now fluentd\n\n# Verify installation\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fluentd\napk add --no-cache fluentd\n\n# Enable and start service\nrc-update add fluentd default\nrc-service fluentd start\n\n# Verify installation\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fluentd\nsudo zypper install -y fluentd\n\n# Enable and start service\nsudo systemctl enable --now fluentd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install fluentd\n\n# Start service\nbrew services start fluentd\n\n# Verify installation\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install fluentd\n\n# Enable in rc.conf\necho &#039;fluentd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice fluentd start\n\n# Verify installation\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install fluentd\n\n# Or using Scoop\nscoop install fluentd\n\n# Verify installation\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/fluentd\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfluentd --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable fluentd\n\n# Start service\nsudo systemctl start fluentd\n\n# Stop service\nsudo systemctl stop fluentd\n\n# Restart service\nsudo systemctl restart fluentd\n\n# Check status\nsudo systemctl status fluentd\n\n# View logs\nsudo journalctl -u fluentd -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add fluentd default\n\n# Start service\nrc-service fluentd start\n\n# Stop service\nrc-service fluentd stop\n\n# Restart service\nrc-service fluentd restart\n\n# Check status\nrc-service fluentd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;fluentd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice fluentd start\n\n# Stop service\nservice fluentd stop\n\n# Restart service\nservice fluentd restart\n\n# Check status\nservice fluentd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start fluentd\nbrew services stop fluentd\nbrew services restart fluentd\n\n# Check status\nbrew services list | grep fluentd</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start fluentd\n\n# Stop service\nnet stop fluentd\n\n# Using PowerShell\nStart-Service fluentd\nStop-Service fluentd\nRestart-Service fluentd\n\n# Check status\nGet-Service fluentd</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream fluentd_backend {\n    server 127.0.0.1:24224;\n}\n\nserver {\n    listen 80;\n    server_name fluentd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name fluentd.example.com;\n\n    ssl_certificate /etc/ssl/certs/fluentd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/fluentd.example.com.key;\n\n    location / {\n        proxy_pass http://fluentd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName fluentd.example.com\n    Redirect permanent / https://fluentd.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName fluentd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/fluentd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/fluentd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:24224/\n    ProxyPassReverse / http://127.0.0.1:24224/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend fluentd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/fluentd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend fluentd_backend\n\nbackend fluentd_backend\n    balance roundrobin\n    server fluentd1 127.0.0.1:24224 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R fluentd:fluentd /etc/fluentd\nsudo chmod 750 /etc/fluentd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=24224/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status fluentd\n\n# View logs\nsudo journalctl -u fluentd -f\n\n# Monitor resource usage\ntop -p $(pgrep fluentd)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/fluentd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/fluentd-backup-$DATE.tar.gz&quot; /etc/fluentd /var/lib/fluentd\n\necho &quot;Backup completed: $BACKUP_DIR/fluentd-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop fluentd\n\n# Restore from backup\ntar -xzf /backup/fluentd/fluentd-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start fluentd</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u fluentd -n 100\nsudo tail -f /var/log/fluentd/fluentd.log\n\n# Check configuration\nfluentd --version\n\n# Check permissions\nls -la /etc/fluentd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 24224\n\n# Test connectivity\ntelnet localhost 24224\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep fluentd)\n\n# Check disk I/O\niotop -p $(pgrep fluentd)\n\n# Check connections\nss -an | grep 24224</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  fluentd:\n    image: fluentd:latest\n    ports:\n      - &quot;24224:24224&quot;\n    volumes:\n      - ./config:/etc/fluentd\n      - ./data:/var/lib/fluentd\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update fluentd\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade fluentd\n\n# Arch Linux\nsudo pacman -Syu fluentd\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade fluentd\n\n# openSUSE\nsudo zypper update fluentd\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade fluentd\n\n# Always backup before updates\ntar -czf /backup/fluentd-pre-update-$(date +%Y%m%d).tar.gz /etc/fluentd\n\n# Restart after updates\nsudo systemctl restart fluentd</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/fluentd\n\n# Clean old logs\nfind /var/log/fluentd -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/fluentd</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.fluentd.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/fluentd/fluentd</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.fluentd.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.fluentd.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1158,"lastBuilt":"2025-09-16T03:17:37.065Z","metadataVersion":"2.0"},{"name":"flux","displayName":"flux Installation Guide","slug":"flux","description":"flux is a free and open-source GitOps toolkit for Kubernetes. Flux enables continuous delivery of applications to Kubernetes through GitOps, serving as an alternative to Argo CD","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/flux","documentationUrl":"https://howtomgr.github.io/miscellaneous/flux","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/flux","updatedAt":"2025-09-16T03:12:04Z","createdAt":"2025-09-16T02:38:27Z","readmeRaw":"# flux Installation Guide\n\nflux is a free and open-source GitOps toolkit for Kubernetes. Flux enables continuous delivery of applications to Kubernetes through GitOps, serving as an alternative to Argo CD\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 100MB for installation\n  - Network: Git repository access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default flux port)\n  - Webhook receiver on 9292\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install flux\nsudo dnf install -y flux\n\n# Enable and start service\nsudo systemctl enable --now flux\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflux --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install flux\nsudo apt install -y flux\n\n# Enable and start service\nsudo systemctl enable --now flux\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nflux --version\n```\n\n### Arch Linux\n\n```bash\n# Install flux\nsudo pacman -S flux\n\n# Enable and start service\nsudo systemctl enable --now flux\n\n# Verify installation\nflux --version\n```\n\n### Alpine Linux\n\n```bash\n# Install flux\napk add --no-cache flux\n\n# Enable and start service\nrc-update add flux default\nrc-service flux start\n\n# Verify installation\nflux --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install flux\nsudo zypper install -y flux\n\n# Enable and start service\nsudo systemctl enable --now flux\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflux --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install flux\n\n# Start service\nbrew services start flux\n\n# Verify installation\nflux --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install flux\n\n# Enable in rc.conf\necho 'flux_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice flux start\n\n# Verify installation\nflux --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install flux\n\n# Or using Scoop\nscoop install flux\n\n# Verify installation\nflux --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/flux\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nflux --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable flux\n\n# Start service\nsudo systemctl start flux\n\n# Stop service\nsudo systemctl stop flux\n\n# Restart service\nsudo systemctl restart flux\n\n# Check status\nsudo systemctl status flux\n\n# View logs\nsudo journalctl -u flux -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add flux default\n\n# Start service\nrc-service flux start\n\n# Stop service\nrc-service flux stop\n\n# Restart service\nrc-service flux restart\n\n# Check status\nrc-service flux status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'flux_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice flux start\n\n# Stop service\nservice flux stop\n\n# Restart service\nservice flux restart\n\n# Check status\nservice flux status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start flux\nbrew services stop flux\nbrew services restart flux\n\n# Check status\nbrew services list | grep flux\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start flux\n\n# Stop service\nnet stop flux\n\n# Using PowerShell\nStart-Service flux\nStop-Service flux\nRestart-Service flux\n\n# Check status\nGet-Service flux\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream flux_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name flux.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name flux.example.com;\n\n    ssl_certificate /etc/ssl/certs/flux.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/flux.example.com.key;\n\n    location / {\n        proxy_pass http://flux_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName flux.example.com\n    Redirect permanent / https://flux.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName flux.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/flux.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/flux.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend flux_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/flux.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend flux_backend\n\nbackend flux_backend\n    balance roundrobin\n    server flux1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R flux:flux /etc/flux\nsudo chmod 750 /etc/flux\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status flux\n\n# View logs\nsudo journalctl -u flux -f\n\n# Monitor resource usage\ntop -p $(pgrep flux)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/flux\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/flux-backup-$DATE.tar.gz\" /etc/flux /var/lib/flux\n\necho \"Backup completed: $BACKUP_DIR/flux-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop flux\n\n# Restore from backup\ntar -xzf /backup/flux/flux-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start flux\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u flux -n 100\nsudo tail -f /var/log/flux/flux.log\n\n# Check configuration\nflux --version\n\n# Check permissions\nls -la /etc/flux\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep flux)\n\n# Check disk I/O\niotop -p $(pgrep flux)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  flux:\n    image: flux:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/flux\n      - ./data:/var/lib/flux\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update flux\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade flux\n\n# Arch Linux\nsudo pacman -Syu flux\n\n# Alpine Linux\napk update && apk upgrade flux\n\n# openSUSE\nsudo zypper update flux\n\n# FreeBSD\npkg update && pkg upgrade flux\n\n# Always backup before updates\ntar -czf /backup/flux-pre-update-$(date +%Y%m%d).tar.gz /etc/flux\n\n# Restart after updates\nsudo systemctl restart flux\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/flux\n\n# Clean old logs\nfind /var/log/flux -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/flux\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.flux.org/\n- GitHub Repository: https://github.com/flux/flux\n- Community Forum: https://forum.flux.org/\n- Best Practices Guide: https://docs.flux.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"flux-installation-guide\" class=\"mobile-header\">flux Installation Guide</h1>\n<p class=\"mobile-paragraph\">flux is a free and open-source GitOps toolkit for Kubernetes. Flux enables continuous delivery of applications to Kubernetes through GitOps, serving as an alternative to Argo CD</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: Git repository access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default flux port)</li>\n<li class=\"mobile-list-item\">Webhook receiver on 9292</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install flux\nsudo dnf install -y flux\n\n# Enable and start service\nsudo systemctl enable --now flux\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflux --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install flux\nsudo apt install -y flux\n\n# Enable and start service\nsudo systemctl enable --now flux\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nflux --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flux\nsudo pacman -S flux\n\n# Enable and start service\nsudo systemctl enable --now flux\n\n# Verify installation\nflux --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flux\napk add --no-cache flux\n\n# Enable and start service\nrc-update add flux default\nrc-service flux start\n\n# Verify installation\nflux --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install flux\nsudo zypper install -y flux\n\n# Enable and start service\nsudo systemctl enable --now flux\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nflux --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install flux\n\n# Start service\nbrew services start flux\n\n# Verify installation\nflux --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install flux\n\n# Enable in rc.conf\necho &#039;flux_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice flux start\n\n# Verify installation\nflux --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install flux\n\n# Or using Scoop\nscoop install flux\n\n# Verify installation\nflux --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/flux\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nflux --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable flux\n\n# Start service\nsudo systemctl start flux\n\n# Stop service\nsudo systemctl stop flux\n\n# Restart service\nsudo systemctl restart flux\n\n# Check status\nsudo systemctl status flux\n\n# View logs\nsudo journalctl -u flux -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add flux default\n\n# Start service\nrc-service flux start\n\n# Stop service\nrc-service flux stop\n\n# Restart service\nrc-service flux restart\n\n# Check status\nrc-service flux status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;flux_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice flux start\n\n# Stop service\nservice flux stop\n\n# Restart service\nservice flux restart\n\n# Check status\nservice flux status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start flux\nbrew services stop flux\nbrew services restart flux\n\n# Check status\nbrew services list | grep flux</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start flux\n\n# Stop service\nnet stop flux\n\n# Using PowerShell\nStart-Service flux\nStop-Service flux\nRestart-Service flux\n\n# Check status\nGet-Service flux</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream flux_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name flux.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name flux.example.com;\n\n    ssl_certificate /etc/ssl/certs/flux.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/flux.example.com.key;\n\n    location / {\n        proxy_pass http://flux_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName flux.example.com\n    Redirect permanent / https://flux.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName flux.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/flux.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/flux.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend flux_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/flux.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend flux_backend\n\nbackend flux_backend\n    balance roundrobin\n    server flux1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R flux:flux /etc/flux\nsudo chmod 750 /etc/flux\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status flux\n\n# View logs\nsudo journalctl -u flux -f\n\n# Monitor resource usage\ntop -p $(pgrep flux)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/flux&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/flux-backup-$DATE.tar.gz&quot; /etc/flux /var/lib/flux\n\necho &quot;Backup completed: $BACKUP_DIR/flux-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop flux\n\n# Restore from backup\ntar -xzf /backup/flux/flux-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start flux</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u flux -n 100\nsudo tail -f /var/log/flux/flux.log\n\n# Check configuration\nflux --version\n\n# Check permissions\nls -la /etc/flux</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep flux)\n\n# Check disk I/O\niotop -p $(pgrep flux)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  flux:\n    image: flux:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/flux\n      - ./data:/var/lib/flux\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update flux\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade flux\n\n# Arch Linux\nsudo pacman -Syu flux\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade flux\n\n# openSUSE\nsudo zypper update flux\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade flux\n\n# Always backup before updates\ntar -czf /backup/flux-pre-update-$(date +%Y%m%d).tar.gz /etc/flux\n\n# Restart after updates\nsudo systemctl restart flux</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/flux\n\n# Clean old logs\nfind /var/log/flux -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/flux</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.flux.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/flux/flux</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.flux.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.flux.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1169,"lastBuilt":"2025-09-16T03:17:36.663Z","metadataVersion":"2.0"},{"name":"freeipa-server","displayName":"freeipa Installation Guide","slug":"freeipa-server","description":"freeipa is a free and open-source integrated identity and authentication solution. FreeIPA provides centralized authentication, authorization, and account information, serving as an open-source alternative to Microsoft Active Directory","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,389,443,636],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/freeipa-server","documentationUrl":"https://howtomgr.github.io/miscellaneous/freeipa-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/freeipa-server","updatedAt":"2025-09-16T03:12:18Z","createdAt":"2025-09-16T02:38:46Z","readmeRaw":"# freeipa Installation Guide\n\nfreeipa is a free and open-source integrated identity and authentication solution. FreeIPA provides centralized authentication, authorization, and account information, serving as an open-source alternative to Microsoft Active Directory\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 10GB for installation\n  - Network: LDAP, Kerberos, DNS, HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 389 (default freeipa port)\n  - Ports 636, 88, 464, 80, 443\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install freeipa\nsudo dnf install -y freeipa-server\n\n# Enable and start service\nsudo systemctl enable --now ipa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nipa --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install freeipa\nsudo apt install -y freeipa-server\n\n# Enable and start service\nsudo systemctl enable --now ipa\n\n# Configure firewall\nsudo ufw allow 389\n\n# Verify installation\nipa --version\n```\n\n### Arch Linux\n\n```bash\n# Install freeipa\nsudo pacman -S freeipa-server\n\n# Enable and start service\nsudo systemctl enable --now ipa\n\n# Verify installation\nipa --version\n```\n\n### Alpine Linux\n\n```bash\n# Install freeipa\napk add --no-cache freeipa-server\n\n# Enable and start service\nrc-update add ipa default\nrc-service ipa start\n\n# Verify installation\nipa --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install freeipa\nsudo zypper install -y freeipa-server\n\n# Enable and start service\nsudo systemctl enable --now ipa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nipa --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install freeipa-server\n\n# Start service\nbrew services start freeipa-server\n\n# Verify installation\nipa --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install freeipa-server\n\n# Enable in rc.conf\necho 'ipa_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ipa start\n\n# Verify installation\nipa --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install freeipa-server\n\n# Or using Scoop\nscoop install freeipa-server\n\n# Verify installation\nipa --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/freeipa-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nipa --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable ipa\n\n# Start service\nsudo systemctl start ipa\n\n# Stop service\nsudo systemctl stop ipa\n\n# Restart service\nsudo systemctl restart ipa\n\n# Check status\nsudo systemctl status ipa\n\n# View logs\nsudo journalctl -u ipa -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add ipa default\n\n# Start service\nrc-service ipa start\n\n# Stop service\nrc-service ipa stop\n\n# Restart service\nrc-service ipa restart\n\n# Check status\nrc-service ipa status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'ipa_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ipa start\n\n# Stop service\nservice ipa stop\n\n# Restart service\nservice ipa restart\n\n# Check status\nservice ipa status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start freeipa-server\nbrew services stop freeipa-server\nbrew services restart freeipa-server\n\n# Check status\nbrew services list | grep freeipa-server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start ipa\n\n# Stop service\nnet stop ipa\n\n# Using PowerShell\nStart-Service ipa\nStop-Service ipa\nRestart-Service ipa\n\n# Check status\nGet-Service ipa\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream freeipa-server_backend {\n    server 127.0.0.1:389;\n}\n\nserver {\n    listen 80;\n    server_name freeipa-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name freeipa-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/freeipa-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/freeipa-server.example.com.key;\n\n    location / {\n        proxy_pass http://freeipa-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName freeipa-server.example.com\n    Redirect permanent / https://freeipa-server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName freeipa-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/freeipa-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/freeipa-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:389/\n    ProxyPassReverse / http://127.0.0.1:389/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend freeipa-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/freeipa-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend freeipa-server_backend\n\nbackend freeipa-server_backend\n    balance roundrobin\n    server freeipa-server1 127.0.0.1:389 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R freeipa-server:freeipa-server /etc/freeipa-server\nsudo chmod 750 /etc/freeipa-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=389/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status ipa\n\n# View logs\nsudo journalctl -u ipa -f\n\n# Monitor resource usage\ntop -p $(pgrep freeipa-server)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/freeipa-server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/freeipa-server-backup-$DATE.tar.gz\" /etc/freeipa-server /var/lib/freeipa-server\n\necho \"Backup completed: $BACKUP_DIR/freeipa-server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop ipa\n\n# Restore from backup\ntar -xzf /backup/freeipa-server/freeipa-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ipa\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u ipa -n 100\nsudo tail -f /var/log/freeipa-server/freeipa-server.log\n\n# Check configuration\nipa --version\n\n# Check permissions\nls -la /etc/freeipa-server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 389\n\n# Test connectivity\ntelnet localhost 389\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep freeipa-server)\n\n# Check disk I/O\niotop -p $(pgrep freeipa-server)\n\n# Check connections\nss -an | grep 389\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  freeipa-server:\n    image: freeipa-server:latest\n    ports:\n      - \"389:389\"\n    volumes:\n      - ./config:/etc/freeipa-server\n      - ./data:/var/lib/freeipa-server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update freeipa-server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade freeipa-server\n\n# Arch Linux\nsudo pacman -Syu freeipa-server\n\n# Alpine Linux\napk update && apk upgrade freeipa-server\n\n# openSUSE\nsudo zypper update freeipa-server\n\n# FreeBSD\npkg update && pkg upgrade freeipa-server\n\n# Always backup before updates\ntar -czf /backup/freeipa-server-pre-update-$(date +%Y%m%d).tar.gz /etc/freeipa-server\n\n# Restart after updates\nsudo systemctl restart ipa\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/freeipa-server\n\n# Clean old logs\nfind /var/log/freeipa-server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/freeipa-server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.freeipa-server.org/\n- GitHub Repository: https://github.com/freeipa-server/freeipa-server\n- Community Forum: https://forum.freeipa-server.org/\n- Best Practices Guide: https://docs.freeipa-server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"freeipa-installation-guide\" class=\"mobile-header\">freeipa Installation Guide</h1>\n<p class=\"mobile-paragraph\">freeipa is a free and open-source integrated identity and authentication solution. FreeIPA provides centralized authentication, authorization, and account information, serving as an open-source alternative to Microsoft Active Directory</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB for installation</li>\n<li class=\"mobile-list-item\">Network: LDAP, Kerberos, DNS, HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 389 (default freeipa port)</li>\n<li class=\"mobile-list-item\">Ports 636, 88, 464, 80, 443</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install freeipa\nsudo dnf install -y freeipa-server\n\n# Enable and start service\nsudo systemctl enable --now ipa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nipa --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install freeipa\nsudo apt install -y freeipa-server\n\n# Enable and start service\nsudo systemctl enable --now ipa\n\n# Configure firewall\nsudo ufw allow 389\n\n# Verify installation\nipa --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install freeipa\nsudo pacman -S freeipa-server\n\n# Enable and start service\nsudo systemctl enable --now ipa\n\n# Verify installation\nipa --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install freeipa\napk add --no-cache freeipa-server\n\n# Enable and start service\nrc-update add ipa default\nrc-service ipa start\n\n# Verify installation\nipa --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install freeipa\nsudo zypper install -y freeipa-server\n\n# Enable and start service\nsudo systemctl enable --now ipa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nipa --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install freeipa-server\n\n# Start service\nbrew services start freeipa-server\n\n# Verify installation\nipa --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install freeipa-server\n\n# Enable in rc.conf\necho &#039;ipa_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ipa start\n\n# Verify installation\nipa --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install freeipa-server\n\n# Or using Scoop\nscoop install freeipa-server\n\n# Verify installation\nipa --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/freeipa-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nipa --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable ipa\n\n# Start service\nsudo systemctl start ipa\n\n# Stop service\nsudo systemctl stop ipa\n\n# Restart service\nsudo systemctl restart ipa\n\n# Check status\nsudo systemctl status ipa\n\n# View logs\nsudo journalctl -u ipa -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add ipa default\n\n# Start service\nrc-service ipa start\n\n# Stop service\nrc-service ipa stop\n\n# Restart service\nrc-service ipa restart\n\n# Check status\nrc-service ipa status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;ipa_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ipa start\n\n# Stop service\nservice ipa stop\n\n# Restart service\nservice ipa restart\n\n# Check status\nservice ipa status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start freeipa-server\nbrew services stop freeipa-server\nbrew services restart freeipa-server\n\n# Check status\nbrew services list | grep freeipa-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start ipa\n\n# Stop service\nnet stop ipa\n\n# Using PowerShell\nStart-Service ipa\nStop-Service ipa\nRestart-Service ipa\n\n# Check status\nGet-Service ipa</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream freeipa-server_backend {\n    server 127.0.0.1:389;\n}\n\nserver {\n    listen 80;\n    server_name freeipa-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name freeipa-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/freeipa-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/freeipa-server.example.com.key;\n\n    location / {\n        proxy_pass http://freeipa-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName freeipa-server.example.com\n    Redirect permanent / https://freeipa-server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName freeipa-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/freeipa-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/freeipa-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:389/\n    ProxyPassReverse / http://127.0.0.1:389/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend freeipa-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/freeipa-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend freeipa-server_backend\n\nbackend freeipa-server_backend\n    balance roundrobin\n    server freeipa-server1 127.0.0.1:389 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R freeipa-server:freeipa-server /etc/freeipa-server\nsudo chmod 750 /etc/freeipa-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=389/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status ipa\n\n# View logs\nsudo journalctl -u ipa -f\n\n# Monitor resource usage\ntop -p $(pgrep freeipa-server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/freeipa-server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/freeipa-server-backup-$DATE.tar.gz&quot; /etc/freeipa-server /var/lib/freeipa-server\n\necho &quot;Backup completed: $BACKUP_DIR/freeipa-server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop ipa\n\n# Restore from backup\ntar -xzf /backup/freeipa-server/freeipa-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ipa</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u ipa -n 100\nsudo tail -f /var/log/freeipa-server/freeipa-server.log\n\n# Check configuration\nipa --version\n\n# Check permissions\nls -la /etc/freeipa-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 389\n\n# Test connectivity\ntelnet localhost 389\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep freeipa-server)\n\n# Check disk I/O\niotop -p $(pgrep freeipa-server)\n\n# Check connections\nss -an | grep 389</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  freeipa-server:\n    image: freeipa-server:latest\n    ports:\n      - &quot;389:389&quot;\n    volumes:\n      - ./config:/etc/freeipa-server\n      - ./data:/var/lib/freeipa-server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update freeipa-server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade freeipa-server\n\n# Arch Linux\nsudo pacman -Syu freeipa-server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade freeipa-server\n\n# openSUSE\nsudo zypper update freeipa-server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade freeipa-server\n\n# Always backup before updates\ntar -czf /backup/freeipa-server-pre-update-$(date +%Y%m%d).tar.gz /etc/freeipa-server\n\n# Restart after updates\nsudo systemctl restart ipa</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/freeipa-server\n\n# Clean old logs\nfind /var/log/freeipa-server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/freeipa-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.freeipa-server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/freeipa-server/freeipa-server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.freeipa-server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.freeipa-server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1175,"lastBuilt":"2025-09-16T03:17:36.036Z","metadataVersion":"2.0"},{"name":"freshrss","displayName":"freshrss Installation Guide","slug":"freshrss","description":"freshrss is a free and open-source self-hosted RSS feed aggregator. FreshRSS is a free, self-hostable feeds aggregator with a responsive design, serving as an alternative to Feedly or Google Reader","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/freshrss","documentationUrl":"https://howtomgr.github.io/miscellaneous/freshrss","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/freshrss","updatedAt":"2025-09-16T03:12:33Z","createdAt":"2025-09-16T02:39:05Z","readmeRaw":"# freshrss Installation Guide\n\nfreshrss is a free and open-source self-hosted RSS feed aggregator. FreshRSS is a free, self-hostable feeds aggregator with a responsive design, serving as an alternative to Feedly or Google Reader\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB + feed data\n  - Network: HTTP/HTTPS for feeds\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80/443 (default freshrss port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install freshrss\nsudo dnf install -y freshrss\n\n# Enable and start service\nsudo systemctl enable --now freshrss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfreshrss --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install freshrss\nsudo apt install -y freshrss\n\n# Enable and start service\nsudo systemctl enable --now freshrss\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\nfreshrss --version\n```\n\n### Arch Linux\n\n```bash\n# Install freshrss\nsudo pacman -S freshrss\n\n# Enable and start service\nsudo systemctl enable --now freshrss\n\n# Verify installation\nfreshrss --version\n```\n\n### Alpine Linux\n\n```bash\n# Install freshrss\napk add --no-cache freshrss\n\n# Enable and start service\nrc-update add freshrss default\nrc-service freshrss start\n\n# Verify installation\nfreshrss --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install freshrss\nsudo zypper install -y freshrss\n\n# Enable and start service\nsudo systemctl enable --now freshrss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfreshrss --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install freshrss\n\n# Start service\nbrew services start freshrss\n\n# Verify installation\nfreshrss --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install freshrss\n\n# Enable in rc.conf\necho 'freshrss_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice freshrss start\n\n# Verify installation\nfreshrss --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install freshrss\n\n# Or using Scoop\nscoop install freshrss\n\n# Verify installation\nfreshrss --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/freshrss\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfreshrss --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable freshrss\n\n# Start service\nsudo systemctl start freshrss\n\n# Stop service\nsudo systemctl stop freshrss\n\n# Restart service\nsudo systemctl restart freshrss\n\n# Check status\nsudo systemctl status freshrss\n\n# View logs\nsudo journalctl -u freshrss -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add freshrss default\n\n# Start service\nrc-service freshrss start\n\n# Stop service\nrc-service freshrss stop\n\n# Restart service\nrc-service freshrss restart\n\n# Check status\nrc-service freshrss status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'freshrss_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice freshrss start\n\n# Stop service\nservice freshrss stop\n\n# Restart service\nservice freshrss restart\n\n# Check status\nservice freshrss status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start freshrss\nbrew services stop freshrss\nbrew services restart freshrss\n\n# Check status\nbrew services list | grep freshrss\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start freshrss\n\n# Stop service\nnet stop freshrss\n\n# Using PowerShell\nStart-Service freshrss\nStop-Service freshrss\nRestart-Service freshrss\n\n# Check status\nGet-Service freshrss\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream freshrss_backend {\n    server 127.0.0.1:80/443;\n}\n\nserver {\n    listen 80;\n    server_name freshrss.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name freshrss.example.com;\n\n    ssl_certificate /etc/ssl/certs/freshrss.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/freshrss.example.com.key;\n\n    location / {\n        proxy_pass http://freshrss_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName freshrss.example.com\n    Redirect permanent / https://freshrss.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName freshrss.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/freshrss.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/freshrss.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend freshrss_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/freshrss.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend freshrss_backend\n\nbackend freshrss_backend\n    balance roundrobin\n    server freshrss1 127.0.0.1:80/443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R freshrss:freshrss /etc/freshrss\nsudo chmod 750 /etc/freshrss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status freshrss\n\n# View logs\nsudo journalctl -u freshrss -f\n\n# Monitor resource usage\ntop -p $(pgrep freshrss)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/freshrss\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/freshrss-backup-$DATE.tar.gz\" /etc/freshrss /var/lib/freshrss\n\necho \"Backup completed: $BACKUP_DIR/freshrss-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop freshrss\n\n# Restore from backup\ntar -xzf /backup/freshrss/freshrss-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start freshrss\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u freshrss -n 100\nsudo tail -f /var/log/freshrss/freshrss.log\n\n# Check configuration\nfreshrss --version\n\n# Check permissions\nls -la /etc/freshrss\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80/443\n\n# Test connectivity\ntelnet localhost 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep freshrss)\n\n# Check disk I/O\niotop -p $(pgrep freshrss)\n\n# Check connections\nss -an | grep 80/443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  freshrss:\n    image: freshrss:latest\n    ports:\n      - \"80/443:80/443\"\n    volumes:\n      - ./config:/etc/freshrss\n      - ./data:/var/lib/freshrss\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update freshrss\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade freshrss\n\n# Arch Linux\nsudo pacman -Syu freshrss\n\n# Alpine Linux\napk update && apk upgrade freshrss\n\n# openSUSE\nsudo zypper update freshrss\n\n# FreeBSD\npkg update && pkg upgrade freshrss\n\n# Always backup before updates\ntar -czf /backup/freshrss-pre-update-$(date +%Y%m%d).tar.gz /etc/freshrss\n\n# Restart after updates\nsudo systemctl restart freshrss\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/freshrss\n\n# Clean old logs\nfind /var/log/freshrss -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/freshrss\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.freshrss.org/\n- GitHub Repository: https://github.com/freshrss/freshrss\n- Community Forum: https://forum.freshrss.org/\n- Best Practices Guide: https://docs.freshrss.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"freshrss-installation-guide\" class=\"mobile-header\">freshrss Installation Guide</h1>\n<p class=\"mobile-paragraph\">freshrss is a free and open-source self-hosted RSS feed aggregator. FreshRSS is a free, self-hostable feeds aggregator with a responsive design, serving as an alternative to Feedly or Google Reader</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB + feed data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS for feeds</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80/443 (default freshrss port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install freshrss\nsudo dnf install -y freshrss\n\n# Enable and start service\nsudo systemctl enable --now freshrss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install freshrss\nsudo apt install -y freshrss\n\n# Enable and start service\nsudo systemctl enable --now freshrss\n\n# Configure firewall\nsudo ufw allow 80/443\n\n# Verify installation\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install freshrss\nsudo pacman -S freshrss\n\n# Enable and start service\nsudo systemctl enable --now freshrss\n\n# Verify installation\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install freshrss\napk add --no-cache freshrss\n\n# Enable and start service\nrc-update add freshrss default\nrc-service freshrss start\n\n# Verify installation\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install freshrss\nsudo zypper install -y freshrss\n\n# Enable and start service\nsudo systemctl enable --now freshrss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install freshrss\n\n# Start service\nbrew services start freshrss\n\n# Verify installation\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install freshrss\n\n# Enable in rc.conf\necho &#039;freshrss_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice freshrss start\n\n# Verify installation\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install freshrss\n\n# Or using Scoop\nscoop install freshrss\n\n# Verify installation\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/freshrss\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nfreshrss --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable freshrss\n\n# Start service\nsudo systemctl start freshrss\n\n# Stop service\nsudo systemctl stop freshrss\n\n# Restart service\nsudo systemctl restart freshrss\n\n# Check status\nsudo systemctl status freshrss\n\n# View logs\nsudo journalctl -u freshrss -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add freshrss default\n\n# Start service\nrc-service freshrss start\n\n# Stop service\nrc-service freshrss stop\n\n# Restart service\nrc-service freshrss restart\n\n# Check status\nrc-service freshrss status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;freshrss_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice freshrss start\n\n# Stop service\nservice freshrss stop\n\n# Restart service\nservice freshrss restart\n\n# Check status\nservice freshrss status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start freshrss\nbrew services stop freshrss\nbrew services restart freshrss\n\n# Check status\nbrew services list | grep freshrss</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start freshrss\n\n# Stop service\nnet stop freshrss\n\n# Using PowerShell\nStart-Service freshrss\nStop-Service freshrss\nRestart-Service freshrss\n\n# Check status\nGet-Service freshrss</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream freshrss_backend {\n    server 127.0.0.1:80/443;\n}\n\nserver {\n    listen 80;\n    server_name freshrss.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name freshrss.example.com;\n\n    ssl_certificate /etc/ssl/certs/freshrss.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/freshrss.example.com.key;\n\n    location / {\n        proxy_pass http://freshrss_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName freshrss.example.com\n    Redirect permanent / https://freshrss.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName freshrss.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/freshrss.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/freshrss.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/443/\n    ProxyPassReverse / http://127.0.0.1:80/443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend freshrss_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/freshrss.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend freshrss_backend\n\nbackend freshrss_backend\n    balance roundrobin\n    server freshrss1 127.0.0.1:80/443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R freshrss:freshrss /etc/freshrss\nsudo chmod 750 /etc/freshrss\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status freshrss\n\n# View logs\nsudo journalctl -u freshrss -f\n\n# Monitor resource usage\ntop -p $(pgrep freshrss)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/freshrss&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/freshrss-backup-$DATE.tar.gz&quot; /etc/freshrss /var/lib/freshrss\n\necho &quot;Backup completed: $BACKUP_DIR/freshrss-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop freshrss\n\n# Restore from backup\ntar -xzf /backup/freshrss/freshrss-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start freshrss</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u freshrss -n 100\nsudo tail -f /var/log/freshrss/freshrss.log\n\n# Check configuration\nfreshrss --version\n\n# Check permissions\nls -la /etc/freshrss</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80/443\n\n# Test connectivity\ntelnet localhost 80/443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep freshrss)\n\n# Check disk I/O\niotop -p $(pgrep freshrss)\n\n# Check connections\nss -an | grep 80/443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  freshrss:\n    image: freshrss:latest\n    ports:\n      - &quot;80/443:80/443&quot;\n    volumes:\n      - ./config:/etc/freshrss\n      - ./data:/var/lib/freshrss\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update freshrss\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade freshrss\n\n# Arch Linux\nsudo pacman -Syu freshrss\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade freshrss\n\n# openSUSE\nsudo zypper update freshrss\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade freshrss\n\n# Always backup before updates\ntar -czf /backup/freshrss-pre-update-$(date +%Y%m%d).tar.gz /etc/freshrss\n\n# Restart after updates\nsudo systemctl restart freshrss</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/freshrss\n\n# Clean old logs\nfind /var/log/freshrss -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/freshrss</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.freshrss.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/freshrss/freshrss</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.freshrss.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.freshrss.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1170,"lastBuilt":"2025-09-16T03:17:35.297Z","metadataVersion":"2.0"},{"name":"ganeti","displayName":"ganeti Installation Guide","slug":"ganeti","description":"ganeti is a free and open-source cluster virtual server management. Ganeti manages clusters of virtual machines built on Xen or KVM","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,1811],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/ganeti","documentationUrl":"https://howtomgr.github.io/miscellaneous/ganeti","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ganeti","updatedAt":"2025-09-16T03:13:02Z","createdAt":"2025-09-16T02:39:43Z","readmeRaw":"# ganeti Installation Guide\n\nganeti is a free and open-source cluster virtual server management. Ganeti manages clusters of virtual machines built on Xen or KVM\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 4GB minimum\n  - Storage: 20GB for system\n  - Network: Cluster network\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 1811 (default ganeti port)\n  - DRBD ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ganeti\nsudo dnf install -y ganeti\n\n# Enable and start service\nsudo systemctl enable --now ganeti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1811/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nganeti --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install ganeti\nsudo apt install -y ganeti\n\n# Enable and start service\nsudo systemctl enable --now ganeti\n\n# Configure firewall\nsudo ufw allow 1811\n\n# Verify installation\nganeti --version\n```\n\n### Arch Linux\n\n```bash\n# Install ganeti\nsudo pacman -S ganeti\n\n# Enable and start service\nsudo systemctl enable --now ganeti\n\n# Verify installation\nganeti --version\n```\n\n### Alpine Linux\n\n```bash\n# Install ganeti\napk add --no-cache ganeti\n\n# Enable and start service\nrc-update add ganeti default\nrc-service ganeti start\n\n# Verify installation\nganeti --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install ganeti\nsudo zypper install -y ganeti\n\n# Enable and start service\nsudo systemctl enable --now ganeti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1811/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nganeti --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install ganeti\n\n# Start service\nbrew services start ganeti\n\n# Verify installation\nganeti --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install ganeti\n\n# Enable in rc.conf\necho 'ganeti_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ganeti start\n\n# Verify installation\nganeti --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install ganeti\n\n# Or using Scoop\nscoop install ganeti\n\n# Verify installation\nganeti --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/ganeti\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nganeti --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable ganeti\n\n# Start service\nsudo systemctl start ganeti\n\n# Stop service\nsudo systemctl stop ganeti\n\n# Restart service\nsudo systemctl restart ganeti\n\n# Check status\nsudo systemctl status ganeti\n\n# View logs\nsudo journalctl -u ganeti -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add ganeti default\n\n# Start service\nrc-service ganeti start\n\n# Stop service\nrc-service ganeti stop\n\n# Restart service\nrc-service ganeti restart\n\n# Check status\nrc-service ganeti status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'ganeti_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice ganeti start\n\n# Stop service\nservice ganeti stop\n\n# Restart service\nservice ganeti restart\n\n# Check status\nservice ganeti status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start ganeti\nbrew services stop ganeti\nbrew services restart ganeti\n\n# Check status\nbrew services list | grep ganeti\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start ganeti\n\n# Stop service\nnet stop ganeti\n\n# Using PowerShell\nStart-Service ganeti\nStop-Service ganeti\nRestart-Service ganeti\n\n# Check status\nGet-Service ganeti\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream ganeti_backend {\n    server 127.0.0.1:1811;\n}\n\nserver {\n    listen 80;\n    server_name ganeti.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ganeti.example.com;\n\n    ssl_certificate /etc/ssl/certs/ganeti.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ganeti.example.com.key;\n\n    location / {\n        proxy_pass http://ganeti_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName ganeti.example.com\n    Redirect permanent / https://ganeti.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName ganeti.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ganeti.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ganeti.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:1811/\n    ProxyPassReverse / http://127.0.0.1:1811/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend ganeti_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ganeti.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ganeti_backend\n\nbackend ganeti_backend\n    balance roundrobin\n    server ganeti1 127.0.0.1:1811 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R ganeti:ganeti /etc/ganeti\nsudo chmod 750 /etc/ganeti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1811/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status ganeti\n\n# View logs\nsudo journalctl -u ganeti -f\n\n# Monitor resource usage\ntop -p $(pgrep ganeti)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/ganeti\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/ganeti-backup-$DATE.tar.gz\" /etc/ganeti /var/lib/ganeti\n\necho \"Backup completed: $BACKUP_DIR/ganeti-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop ganeti\n\n# Restore from backup\ntar -xzf /backup/ganeti/ganeti-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ganeti\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u ganeti -n 100\nsudo tail -f /var/log/ganeti/ganeti.log\n\n# Check configuration\nganeti --version\n\n# Check permissions\nls -la /etc/ganeti\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 1811\n\n# Test connectivity\ntelnet localhost 1811\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep ganeti)\n\n# Check disk I/O\niotop -p $(pgrep ganeti)\n\n# Check connections\nss -an | grep 1811\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  ganeti:\n    image: ganeti:latest\n    ports:\n      - \"1811:1811\"\n    volumes:\n      - ./config:/etc/ganeti\n      - ./data:/var/lib/ganeti\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ganeti\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade ganeti\n\n# Arch Linux\nsudo pacman -Syu ganeti\n\n# Alpine Linux\napk update && apk upgrade ganeti\n\n# openSUSE\nsudo zypper update ganeti\n\n# FreeBSD\npkg update && pkg upgrade ganeti\n\n# Always backup before updates\ntar -czf /backup/ganeti-pre-update-$(date +%Y%m%d).tar.gz /etc/ganeti\n\n# Restart after updates\nsudo systemctl restart ganeti\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/ganeti\n\n# Clean old logs\nfind /var/log/ganeti -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ganeti\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.ganeti.org/\n- GitHub Repository: https://github.com/ganeti/ganeti\n- Community Forum: https://forum.ganeti.org/\n- Best Practices Guide: https://docs.ganeti.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"ganeti-installation-guide\" class=\"mobile-header\">ganeti Installation Guide</h1>\n<p class=\"mobile-paragraph\">ganeti is a free and open-source cluster virtual server management. Ganeti manages clusters of virtual machines built on Xen or KVM</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 20GB for system</li>\n<li class=\"mobile-list-item\">Network: Cluster network</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 1811 (default ganeti port)</li>\n<li class=\"mobile-list-item\">DRBD ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install ganeti\nsudo dnf install -y ganeti\n\n# Enable and start service\nsudo systemctl enable --now ganeti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1811/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nganeti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install ganeti\nsudo apt install -y ganeti\n\n# Enable and start service\nsudo systemctl enable --now ganeti\n\n# Configure firewall\nsudo ufw allow 1811\n\n# Verify installation\nganeti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ganeti\nsudo pacman -S ganeti\n\n# Enable and start service\nsudo systemctl enable --now ganeti\n\n# Verify installation\nganeti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ganeti\napk add --no-cache ganeti\n\n# Enable and start service\nrc-update add ganeti default\nrc-service ganeti start\n\n# Verify installation\nganeti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ganeti\nsudo zypper install -y ganeti\n\n# Enable and start service\nsudo systemctl enable --now ganeti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1811/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nganeti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install ganeti\n\n# Start service\nbrew services start ganeti\n\n# Verify installation\nganeti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install ganeti\n\n# Enable in rc.conf\necho &#039;ganeti_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ganeti start\n\n# Verify installation\nganeti --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install ganeti\n\n# Or using Scoop\nscoop install ganeti\n\n# Verify installation\nganeti --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/ganeti\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nganeti --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable ganeti\n\n# Start service\nsudo systemctl start ganeti\n\n# Stop service\nsudo systemctl stop ganeti\n\n# Restart service\nsudo systemctl restart ganeti\n\n# Check status\nsudo systemctl status ganeti\n\n# View logs\nsudo journalctl -u ganeti -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add ganeti default\n\n# Start service\nrc-service ganeti start\n\n# Stop service\nrc-service ganeti stop\n\n# Restart service\nrc-service ganeti restart\n\n# Check status\nrc-service ganeti status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;ganeti_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice ganeti start\n\n# Stop service\nservice ganeti stop\n\n# Restart service\nservice ganeti restart\n\n# Check status\nservice ganeti status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start ganeti\nbrew services stop ganeti\nbrew services restart ganeti\n\n# Check status\nbrew services list | grep ganeti</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start ganeti\n\n# Stop service\nnet stop ganeti\n\n# Using PowerShell\nStart-Service ganeti\nStop-Service ganeti\nRestart-Service ganeti\n\n# Check status\nGet-Service ganeti</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream ganeti_backend {\n    server 127.0.0.1:1811;\n}\n\nserver {\n    listen 80;\n    server_name ganeti.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ganeti.example.com;\n\n    ssl_certificate /etc/ssl/certs/ganeti.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ganeti.example.com.key;\n\n    location / {\n        proxy_pass http://ganeti_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName ganeti.example.com\n    Redirect permanent / https://ganeti.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName ganeti.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ganeti.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ganeti.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:1811/\n    ProxyPassReverse / http://127.0.0.1:1811/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend ganeti_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ganeti.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ganeti_backend\n\nbackend ganeti_backend\n    balance roundrobin\n    server ganeti1 127.0.0.1:1811 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R ganeti:ganeti /etc/ganeti\nsudo chmod 750 /etc/ganeti\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1811/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status ganeti\n\n# View logs\nsudo journalctl -u ganeti -f\n\n# Monitor resource usage\ntop -p $(pgrep ganeti)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/ganeti&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/ganeti-backup-$DATE.tar.gz&quot; /etc/ganeti /var/lib/ganeti\n\necho &quot;Backup completed: $BACKUP_DIR/ganeti-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop ganeti\n\n# Restore from backup\ntar -xzf /backup/ganeti/ganeti-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start ganeti</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u ganeti -n 100\nsudo tail -f /var/log/ganeti/ganeti.log\n\n# Check configuration\nganeti --version\n\n# Check permissions\nls -la /etc/ganeti</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 1811\n\n# Test connectivity\ntelnet localhost 1811\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep ganeti)\n\n# Check disk I/O\niotop -p $(pgrep ganeti)\n\n# Check connections\nss -an | grep 1811</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  ganeti:\n    image: ganeti:latest\n    ports:\n      - &quot;1811:1811&quot;\n    volumes:\n      - ./config:/etc/ganeti\n      - ./data:/var/lib/ganeti\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update ganeti\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade ganeti\n\n# Arch Linux\nsudo pacman -Syu ganeti\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade ganeti\n\n# openSUSE\nsudo zypper update ganeti\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade ganeti\n\n# Always backup before updates\ntar -czf /backup/ganeti-pre-update-$(date +%Y%m%d).tar.gz /etc/ganeti\n\n# Restart after updates\nsudo systemctl restart ganeti</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/ganeti\n\n# Clean old logs\nfind /var/log/ganeti -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/ganeti</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.ganeti.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/ganeti/ganeti</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.ganeti.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.ganeti.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1159,"lastBuilt":"2025-09-16T03:17:33.946Z","metadataVersion":"2.0"},{"name":"gem_server","displayName":"gem-server Installation Guide","slug":"gem_server","description":"gem-server is a free and open-source Ruby gem repository. Gem Server provides private Ruby gem hosting","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9292],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/gem_server","documentationUrl":"https://howtomgr.github.io/miscellaneous/gem_server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gem_server","updatedAt":"2025-09-16T03:13:31Z","createdAt":"2025-09-16T02:40:25Z","readmeRaw":"# gem-server Installation Guide\n\ngem-server is a free and open-source Ruby gem repository. Gem Server provides private Ruby gem hosting\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 10GB for gems\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9292 (default gem-server port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gem-server\nsudo dnf install -y gem_server\n\n# Enable and start service\nsudo systemctl enable --now gem-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9292/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngem-server --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gem-server\nsudo apt install -y gem_server\n\n# Enable and start service\nsudo systemctl enable --now gem-server\n\n# Configure firewall\nsudo ufw allow 9292\n\n# Verify installation\ngem-server --version\n```\n\n### Arch Linux\n\n```bash\n# Install gem-server\nsudo pacman -S gem_server\n\n# Enable and start service\nsudo systemctl enable --now gem-server\n\n# Verify installation\ngem-server --version\n```\n\n### Alpine Linux\n\n```bash\n# Install gem-server\napk add --no-cache gem_server\n\n# Enable and start service\nrc-update add gem-server default\nrc-service gem-server start\n\n# Verify installation\ngem-server --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gem-server\nsudo zypper install -y gem_server\n\n# Enable and start service\nsudo systemctl enable --now gem-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9292/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngem-server --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gem_server\n\n# Start service\nbrew services start gem_server\n\n# Verify installation\ngem-server --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gem_server\n\n# Enable in rc.conf\necho 'gem-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gem-server start\n\n# Verify installation\ngem-server --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gem_server\n\n# Or using Scoop\nscoop install gem_server\n\n# Verify installation\ngem-server --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gem_server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngem-server --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gem-server\n\n# Start service\nsudo systemctl start gem-server\n\n# Stop service\nsudo systemctl stop gem-server\n\n# Restart service\nsudo systemctl restart gem-server\n\n# Check status\nsudo systemctl status gem-server\n\n# View logs\nsudo journalctl -u gem-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gem-server default\n\n# Start service\nrc-service gem-server start\n\n# Stop service\nrc-service gem-server stop\n\n# Restart service\nrc-service gem-server restart\n\n# Check status\nrc-service gem-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gem-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gem-server start\n\n# Stop service\nservice gem-server stop\n\n# Restart service\nservice gem-server restart\n\n# Check status\nservice gem-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gem_server\nbrew services stop gem_server\nbrew services restart gem_server\n\n# Check status\nbrew services list | grep gem_server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gem-server\n\n# Stop service\nnet stop gem-server\n\n# Using PowerShell\nStart-Service gem-server\nStop-Service gem-server\nRestart-Service gem-server\n\n# Check status\nGet-Service gem-server\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gem_server_backend {\n    server 127.0.0.1:9292;\n}\n\nserver {\n    listen 80;\n    server_name gem_server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gem_server.example.com;\n\n    ssl_certificate /etc/ssl/certs/gem_server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gem_server.example.com.key;\n\n    location / {\n        proxy_pass http://gem_server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gem_server.example.com\n    Redirect permanent / https://gem_server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gem_server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gem_server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gem_server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9292/\n    ProxyPassReverse / http://127.0.0.1:9292/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gem_server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gem_server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gem_server_backend\n\nbackend gem_server_backend\n    balance roundrobin\n    server gem_server1 127.0.0.1:9292 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gem_server:gem_server /etc/gem_server\nsudo chmod 750 /etc/gem_server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9292/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gem-server\n\n# View logs\nsudo journalctl -u gem-server -f\n\n# Monitor resource usage\ntop -p $(pgrep gem_server)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gem_server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gem_server-backup-$DATE.tar.gz\" /etc/gem_server /var/lib/gem_server\n\necho \"Backup completed: $BACKUP_DIR/gem_server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gem-server\n\n# Restore from backup\ntar -xzf /backup/gem_server/gem_server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gem-server\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gem-server -n 100\nsudo tail -f /var/log/gem_server/gem_server.log\n\n# Check configuration\ngem-server --version\n\n# Check permissions\nls -la /etc/gem_server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9292\n\n# Test connectivity\ntelnet localhost 9292\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gem_server)\n\n# Check disk I/O\niotop -p $(pgrep gem_server)\n\n# Check connections\nss -an | grep 9292\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gem_server:\n    image: gem_server:latest\n    ports:\n      - \"9292:9292\"\n    volumes:\n      - ./config:/etc/gem_server\n      - ./data:/var/lib/gem_server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gem_server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gem_server\n\n# Arch Linux\nsudo pacman -Syu gem_server\n\n# Alpine Linux\napk update && apk upgrade gem_server\n\n# openSUSE\nsudo zypper update gem_server\n\n# FreeBSD\npkg update && pkg upgrade gem_server\n\n# Always backup before updates\ntar -czf /backup/gem_server-pre-update-$(date +%Y%m%d).tar.gz /etc/gem_server\n\n# Restart after updates\nsudo systemctl restart gem-server\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gem_server\n\n# Clean old logs\nfind /var/log/gem_server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gem_server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gem_server.org/\n- GitHub Repository: https://github.com/gem_server/gem_server\n- Community Forum: https://forum.gem_server.org/\n- Best Practices Guide: https://docs.gem_server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"gem-server-installation-guide\" class=\"mobile-header\">gem-server Installation Guide</h1>\n<p class=\"mobile-paragraph\">gem-server is a free and open-source Ruby gem repository. Gem Server provides private Ruby gem hosting</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for gems</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9292 (default gem-server port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gem-server\nsudo dnf install -y gem_server\n\n# Enable and start service\nsudo systemctl enable --now gem-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9292/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gem-server\nsudo apt install -y gem_server\n\n# Enable and start service\nsudo systemctl enable --now gem-server\n\n# Configure firewall\nsudo ufw allow 9292\n\n# Verify installation\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gem-server\nsudo pacman -S gem_server\n\n# Enable and start service\nsudo systemctl enable --now gem-server\n\n# Verify installation\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gem-server\napk add --no-cache gem_server\n\n# Enable and start service\nrc-update add gem-server default\nrc-service gem-server start\n\n# Verify installation\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gem-server\nsudo zypper install -y gem_server\n\n# Enable and start service\nsudo systemctl enable --now gem-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9292/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gem_server\n\n# Start service\nbrew services start gem_server\n\n# Verify installation\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gem_server\n\n# Enable in rc.conf\necho &#039;gem-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gem-server start\n\n# Verify installation\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gem_server\n\n# Or using Scoop\nscoop install gem_server\n\n# Verify installation\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gem_server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngem-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gem-server\n\n# Start service\nsudo systemctl start gem-server\n\n# Stop service\nsudo systemctl stop gem-server\n\n# Restart service\nsudo systemctl restart gem-server\n\n# Check status\nsudo systemctl status gem-server\n\n# View logs\nsudo journalctl -u gem-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gem-server default\n\n# Start service\nrc-service gem-server start\n\n# Stop service\nrc-service gem-server stop\n\n# Restart service\nrc-service gem-server restart\n\n# Check status\nrc-service gem-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gem-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gem-server start\n\n# Stop service\nservice gem-server stop\n\n# Restart service\nservice gem-server restart\n\n# Check status\nservice gem-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gem_server\nbrew services stop gem_server\nbrew services restart gem_server\n\n# Check status\nbrew services list | grep gem_server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gem-server\n\n# Stop service\nnet stop gem-server\n\n# Using PowerShell\nStart-Service gem-server\nStop-Service gem-server\nRestart-Service gem-server\n\n# Check status\nGet-Service gem-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gem_server_backend {\n    server 127.0.0.1:9292;\n}\n\nserver {\n    listen 80;\n    server_name gem_server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gem_server.example.com;\n\n    ssl_certificate /etc/ssl/certs/gem_server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gem_server.example.com.key;\n\n    location / {\n        proxy_pass http://gem_server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gem_server.example.com\n    Redirect permanent / https://gem_server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gem_server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gem_server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gem_server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9292/\n    ProxyPassReverse / http://127.0.0.1:9292/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gem_server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gem_server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gem_server_backend\n\nbackend gem_server_backend\n    balance roundrobin\n    server gem_server1 127.0.0.1:9292 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gem_server:gem_server /etc/gem_server\nsudo chmod 750 /etc/gem_server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9292/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gem-server\n\n# View logs\nsudo journalctl -u gem-server -f\n\n# Monitor resource usage\ntop -p $(pgrep gem_server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gem_server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gem_server-backup-$DATE.tar.gz&quot; /etc/gem_server /var/lib/gem_server\n\necho &quot;Backup completed: $BACKUP_DIR/gem_server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gem-server\n\n# Restore from backup\ntar -xzf /backup/gem_server/gem_server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gem-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gem-server -n 100\nsudo tail -f /var/log/gem_server/gem_server.log\n\n# Check configuration\ngem-server --version\n\n# Check permissions\nls -la /etc/gem_server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9292\n\n# Test connectivity\ntelnet localhost 9292\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gem_server)\n\n# Check disk I/O\niotop -p $(pgrep gem_server)\n\n# Check connections\nss -an | grep 9292</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gem_server:\n    image: gem_server:latest\n    ports:\n      - &quot;9292:9292&quot;\n    volumes:\n      - ./config:/etc/gem_server\n      - ./data:/var/lib/gem_server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gem_server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gem_server\n\n# Arch Linux\nsudo pacman -Syu gem_server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gem_server\n\n# openSUSE\nsudo zypper update gem_server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gem_server\n\n# Always backup before updates\ntar -czf /backup/gem_server-pre-update-$(date +%Y%m%d).tar.gz /etc/gem_server\n\n# Restart after updates\nsudo systemctl restart gem-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gem_server\n\n# Clean old logs\nfind /var/log/gem_server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gem_server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gem_server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gem_server/gem_server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gem_server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gem_server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1154,"lastBuilt":"2025-09-16T03:17:32.304Z","metadataVersion":"2.0"},{"name":"gerrit","displayName":"gerrit Installation Guide","slug":"gerrit","description":"gerrit is a free and open-source code review system. Gerrit provides web-based code review for Git projects","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080,29418],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/gerrit","documentationUrl":"https://howtomgr.github.io/miscellaneous/gerrit","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gerrit","updatedAt":"2025-09-16T03:13:38Z","createdAt":"2025-09-16T02:40:35Z","readmeRaw":"# gerrit Installation Guide\n\ngerrit is a free and open-source code review system. Gerrit provides web-based code review for Git projects\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 5GB for repos\n  - Network: HTTP/SSH access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default gerrit port)\n  - SSH on port 29418\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gerrit\nsudo dnf install -y gerrit\n\n# Enable and start service\nsudo systemctl enable --now gerrit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngerrit --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gerrit\nsudo apt install -y gerrit\n\n# Enable and start service\nsudo systemctl enable --now gerrit\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ngerrit --version\n```\n\n### Arch Linux\n\n```bash\n# Install gerrit\nsudo pacman -S gerrit\n\n# Enable and start service\nsudo systemctl enable --now gerrit\n\n# Verify installation\ngerrit --version\n```\n\n### Alpine Linux\n\n```bash\n# Install gerrit\napk add --no-cache gerrit\n\n# Enable and start service\nrc-update add gerrit default\nrc-service gerrit start\n\n# Verify installation\ngerrit --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gerrit\nsudo zypper install -y gerrit\n\n# Enable and start service\nsudo systemctl enable --now gerrit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngerrit --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gerrit\n\n# Start service\nbrew services start gerrit\n\n# Verify installation\ngerrit --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gerrit\n\n# Enable in rc.conf\necho 'gerrit_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gerrit start\n\n# Verify installation\ngerrit --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gerrit\n\n# Or using Scoop\nscoop install gerrit\n\n# Verify installation\ngerrit --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gerrit\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngerrit --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gerrit\n\n# Start service\nsudo systemctl start gerrit\n\n# Stop service\nsudo systemctl stop gerrit\n\n# Restart service\nsudo systemctl restart gerrit\n\n# Check status\nsudo systemctl status gerrit\n\n# View logs\nsudo journalctl -u gerrit -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gerrit default\n\n# Start service\nrc-service gerrit start\n\n# Stop service\nrc-service gerrit stop\n\n# Restart service\nrc-service gerrit restart\n\n# Check status\nrc-service gerrit status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gerrit_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gerrit start\n\n# Stop service\nservice gerrit stop\n\n# Restart service\nservice gerrit restart\n\n# Check status\nservice gerrit status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gerrit\nbrew services stop gerrit\nbrew services restart gerrit\n\n# Check status\nbrew services list | grep gerrit\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gerrit\n\n# Stop service\nnet stop gerrit\n\n# Using PowerShell\nStart-Service gerrit\nStop-Service gerrit\nRestart-Service gerrit\n\n# Check status\nGet-Service gerrit\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gerrit_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name gerrit.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gerrit.example.com;\n\n    ssl_certificate /etc/ssl/certs/gerrit.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gerrit.example.com.key;\n\n    location / {\n        proxy_pass http://gerrit_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gerrit.example.com\n    Redirect permanent / https://gerrit.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gerrit.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gerrit.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gerrit.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gerrit_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gerrit.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gerrit_backend\n\nbackend gerrit_backend\n    balance roundrobin\n    server gerrit1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gerrit:gerrit /etc/gerrit\nsudo chmod 750 /etc/gerrit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gerrit\n\n# View logs\nsudo journalctl -u gerrit -f\n\n# Monitor resource usage\ntop -p $(pgrep gerrit)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gerrit\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gerrit-backup-$DATE.tar.gz\" /etc/gerrit /var/lib/gerrit\n\necho \"Backup completed: $BACKUP_DIR/gerrit-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gerrit\n\n# Restore from backup\ntar -xzf /backup/gerrit/gerrit-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gerrit\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gerrit -n 100\nsudo tail -f /var/log/gerrit/gerrit.log\n\n# Check configuration\ngerrit --version\n\n# Check permissions\nls -la /etc/gerrit\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gerrit)\n\n# Check disk I/O\niotop -p $(pgrep gerrit)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gerrit:\n    image: gerrit:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/gerrit\n      - ./data:/var/lib/gerrit\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gerrit\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gerrit\n\n# Arch Linux\nsudo pacman -Syu gerrit\n\n# Alpine Linux\napk update && apk upgrade gerrit\n\n# openSUSE\nsudo zypper update gerrit\n\n# FreeBSD\npkg update && pkg upgrade gerrit\n\n# Always backup before updates\ntar -czf /backup/gerrit-pre-update-$(date +%Y%m%d).tar.gz /etc/gerrit\n\n# Restart after updates\nsudo systemctl restart gerrit\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gerrit\n\n# Clean old logs\nfind /var/log/gerrit -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gerrit\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gerrit.org/\n- GitHub Repository: https://github.com/gerrit/gerrit\n- Community Forum: https://forum.gerrit.org/\n- Best Practices Guide: https://docs.gerrit.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"gerrit-installation-guide\" class=\"mobile-header\">gerrit Installation Guide</h1>\n<p class=\"mobile-paragraph\">gerrit is a free and open-source code review system. Gerrit provides web-based code review for Git projects</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for repos</li>\n<li class=\"mobile-list-item\">Network: HTTP/SSH access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default gerrit port)</li>\n<li class=\"mobile-list-item\">SSH on port 29418</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gerrit\nsudo dnf install -y gerrit\n\n# Enable and start service\nsudo systemctl enable --now gerrit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gerrit\nsudo apt install -y gerrit\n\n# Enable and start service\nsudo systemctl enable --now gerrit\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gerrit\nsudo pacman -S gerrit\n\n# Enable and start service\nsudo systemctl enable --now gerrit\n\n# Verify installation\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gerrit\napk add --no-cache gerrit\n\n# Enable and start service\nrc-update add gerrit default\nrc-service gerrit start\n\n# Verify installation\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gerrit\nsudo zypper install -y gerrit\n\n# Enable and start service\nsudo systemctl enable --now gerrit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gerrit\n\n# Start service\nbrew services start gerrit\n\n# Verify installation\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gerrit\n\n# Enable in rc.conf\necho &#039;gerrit_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gerrit start\n\n# Verify installation\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gerrit\n\n# Or using Scoop\nscoop install gerrit\n\n# Verify installation\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gerrit\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngerrit --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gerrit\n\n# Start service\nsudo systemctl start gerrit\n\n# Stop service\nsudo systemctl stop gerrit\n\n# Restart service\nsudo systemctl restart gerrit\n\n# Check status\nsudo systemctl status gerrit\n\n# View logs\nsudo journalctl -u gerrit -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gerrit default\n\n# Start service\nrc-service gerrit start\n\n# Stop service\nrc-service gerrit stop\n\n# Restart service\nrc-service gerrit restart\n\n# Check status\nrc-service gerrit status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gerrit_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gerrit start\n\n# Stop service\nservice gerrit stop\n\n# Restart service\nservice gerrit restart\n\n# Check status\nservice gerrit status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gerrit\nbrew services stop gerrit\nbrew services restart gerrit\n\n# Check status\nbrew services list | grep gerrit</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gerrit\n\n# Stop service\nnet stop gerrit\n\n# Using PowerShell\nStart-Service gerrit\nStop-Service gerrit\nRestart-Service gerrit\n\n# Check status\nGet-Service gerrit</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gerrit_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name gerrit.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gerrit.example.com;\n\n    ssl_certificate /etc/ssl/certs/gerrit.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gerrit.example.com.key;\n\n    location / {\n        proxy_pass http://gerrit_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gerrit.example.com\n    Redirect permanent / https://gerrit.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gerrit.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gerrit.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gerrit.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gerrit_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gerrit.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gerrit_backend\n\nbackend gerrit_backend\n    balance roundrobin\n    server gerrit1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gerrit:gerrit /etc/gerrit\nsudo chmod 750 /etc/gerrit\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gerrit\n\n# View logs\nsudo journalctl -u gerrit -f\n\n# Monitor resource usage\ntop -p $(pgrep gerrit)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gerrit&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gerrit-backup-$DATE.tar.gz&quot; /etc/gerrit /var/lib/gerrit\n\necho &quot;Backup completed: $BACKUP_DIR/gerrit-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gerrit\n\n# Restore from backup\ntar -xzf /backup/gerrit/gerrit-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gerrit</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gerrit -n 100\nsudo tail -f /var/log/gerrit/gerrit.log\n\n# Check configuration\ngerrit --version\n\n# Check permissions\nls -la /etc/gerrit</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gerrit)\n\n# Check disk I/O\niotop -p $(pgrep gerrit)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gerrit:\n    image: gerrit:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/gerrit\n      - ./data:/var/lib/gerrit\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gerrit\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gerrit\n\n# Arch Linux\nsudo pacman -Syu gerrit\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gerrit\n\n# openSUSE\nsudo zypper update gerrit\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gerrit\n\n# Always backup before updates\ntar -czf /backup/gerrit-pre-update-$(date +%Y%m%d).tar.gz /etc/gerrit\n\n# Restart after updates\nsudo systemctl restart gerrit</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gerrit\n\n# Clean old logs\nfind /var/log/gerrit -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gerrit</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gerrit.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gerrit/gerrit</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gerrit.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gerrit.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1157,"lastBuilt":"2025-09-16T03:17:31.974Z","metadataVersion":"2.0"},{"name":"gitbucket","displayName":"gitbucket Installation Guide","slug":"gitbucket","description":"gitbucket is a free and open-source Git platform powered by Scala. GitBucket provides a GitHub-like interface powered by Scala","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080,29418],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/gitbucket","documentationUrl":"https://howtomgr.github.io/miscellaneous/gitbucket","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitbucket","updatedAt":"2025-09-16T03:14:12Z","createdAt":"2025-09-16T03:14:03Z","readmeRaw":"# gitbucket Installation Guide\n\ngitbucket is a free and open-source Git platform powered by Scala. GitBucket provides a GitHub-like interface powered by Scala\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 5GB for repos\n  - Network: HTTP/SSH access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default gitbucket port)\n  - SSH on port 29418\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gitbucket\nsudo dnf install -y gitbucket\n\n# Enable and start service\nsudo systemctl enable --now gitbucket\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitbucket --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gitbucket\nsudo apt install -y gitbucket\n\n# Enable and start service\nsudo systemctl enable --now gitbucket\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ngitbucket --version\n```\n\n### Arch Linux\n\n```bash\n# Install gitbucket\nsudo pacman -S gitbucket\n\n# Enable and start service\nsudo systemctl enable --now gitbucket\n\n# Verify installation\ngitbucket --version\n```\n\n### Alpine Linux\n\n```bash\n# Install gitbucket\napk add --no-cache gitbucket\n\n# Enable and start service\nrc-update add gitbucket default\nrc-service gitbucket start\n\n# Verify installation\ngitbucket --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gitbucket\nsudo zypper install -y gitbucket\n\n# Enable and start service\nsudo systemctl enable --now gitbucket\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitbucket --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gitbucket\n\n# Start service\nbrew services start gitbucket\n\n# Verify installation\ngitbucket --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gitbucket\n\n# Enable in rc.conf\necho 'gitbucket_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gitbucket start\n\n# Verify installation\ngitbucket --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gitbucket\n\n# Or using Scoop\nscoop install gitbucket\n\n# Verify installation\ngitbucket --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gitbucket\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngitbucket --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gitbucket\n\n# Start service\nsudo systemctl start gitbucket\n\n# Stop service\nsudo systemctl stop gitbucket\n\n# Restart service\nsudo systemctl restart gitbucket\n\n# Check status\nsudo systemctl status gitbucket\n\n# View logs\nsudo journalctl -u gitbucket -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gitbucket default\n\n# Start service\nrc-service gitbucket start\n\n# Stop service\nrc-service gitbucket stop\n\n# Restart service\nrc-service gitbucket restart\n\n# Check status\nrc-service gitbucket status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gitbucket_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gitbucket start\n\n# Stop service\nservice gitbucket stop\n\n# Restart service\nservice gitbucket restart\n\n# Check status\nservice gitbucket status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gitbucket\nbrew services stop gitbucket\nbrew services restart gitbucket\n\n# Check status\nbrew services list | grep gitbucket\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gitbucket\n\n# Stop service\nnet stop gitbucket\n\n# Using PowerShell\nStart-Service gitbucket\nStop-Service gitbucket\nRestart-Service gitbucket\n\n# Check status\nGet-Service gitbucket\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gitbucket_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name gitbucket.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gitbucket.example.com;\n\n    ssl_certificate /etc/ssl/certs/gitbucket.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gitbucket.example.com.key;\n\n    location / {\n        proxy_pass http://gitbucket_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gitbucket.example.com\n    Redirect permanent / https://gitbucket.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gitbucket.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gitbucket.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gitbucket.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gitbucket_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gitbucket.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gitbucket_backend\n\nbackend gitbucket_backend\n    balance roundrobin\n    server gitbucket1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gitbucket:gitbucket /etc/gitbucket\nsudo chmod 750 /etc/gitbucket\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gitbucket\n\n# View logs\nsudo journalctl -u gitbucket -f\n\n# Monitor resource usage\ntop -p $(pgrep gitbucket)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gitbucket\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gitbucket-backup-$DATE.tar.gz\" /etc/gitbucket /var/lib/gitbucket\n\necho \"Backup completed: $BACKUP_DIR/gitbucket-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gitbucket\n\n# Restore from backup\ntar -xzf /backup/gitbucket/gitbucket-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gitbucket\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gitbucket -n 100\nsudo tail -f /var/log/gitbucket/gitbucket.log\n\n# Check configuration\ngitbucket --version\n\n# Check permissions\nls -la /etc/gitbucket\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gitbucket)\n\n# Check disk I/O\niotop -p $(pgrep gitbucket)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gitbucket:\n    image: gitbucket:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/gitbucket\n      - ./data:/var/lib/gitbucket\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gitbucket\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gitbucket\n\n# Arch Linux\nsudo pacman -Syu gitbucket\n\n# Alpine Linux\napk update && apk upgrade gitbucket\n\n# openSUSE\nsudo zypper update gitbucket\n\n# FreeBSD\npkg update && pkg upgrade gitbucket\n\n# Always backup before updates\ntar -czf /backup/gitbucket-pre-update-$(date +%Y%m%d).tar.gz /etc/gitbucket\n\n# Restart after updates\nsudo systemctl restart gitbucket\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gitbucket\n\n# Clean old logs\nfind /var/log/gitbucket -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gitbucket\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gitbucket.org/\n- GitHub Repository: https://github.com/gitbucket/gitbucket\n- Community Forum: https://forum.gitbucket.org/\n- Best Practices Guide: https://docs.gitbucket.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"gitbucket-installation-guide\" class=\"mobile-header\">gitbucket Installation Guide</h1>\n<p class=\"mobile-paragraph\">gitbucket is a free and open-source Git platform powered by Scala. GitBucket provides a GitHub-like interface powered by Scala</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for repos</li>\n<li class=\"mobile-list-item\">Network: HTTP/SSH access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default gitbucket port)</li>\n<li class=\"mobile-list-item\">SSH on port 29418</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gitbucket\nsudo dnf install -y gitbucket\n\n# Enable and start service\nsudo systemctl enable --now gitbucket\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gitbucket\nsudo apt install -y gitbucket\n\n# Enable and start service\nsudo systemctl enable --now gitbucket\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitbucket\nsudo pacman -S gitbucket\n\n# Enable and start service\nsudo systemctl enable --now gitbucket\n\n# Verify installation\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitbucket\napk add --no-cache gitbucket\n\n# Enable and start service\nrc-update add gitbucket default\nrc-service gitbucket start\n\n# Verify installation\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitbucket\nsudo zypper install -y gitbucket\n\n# Enable and start service\nsudo systemctl enable --now gitbucket\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gitbucket\n\n# Start service\nbrew services start gitbucket\n\n# Verify installation\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gitbucket\n\n# Enable in rc.conf\necho &#039;gitbucket_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gitbucket start\n\n# Verify installation\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gitbucket\n\n# Or using Scoop\nscoop install gitbucket\n\n# Verify installation\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gitbucket\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngitbucket --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gitbucket\n\n# Start service\nsudo systemctl start gitbucket\n\n# Stop service\nsudo systemctl stop gitbucket\n\n# Restart service\nsudo systemctl restart gitbucket\n\n# Check status\nsudo systemctl status gitbucket\n\n# View logs\nsudo journalctl -u gitbucket -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gitbucket default\n\n# Start service\nrc-service gitbucket start\n\n# Stop service\nrc-service gitbucket stop\n\n# Restart service\nrc-service gitbucket restart\n\n# Check status\nrc-service gitbucket status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gitbucket_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gitbucket start\n\n# Stop service\nservice gitbucket stop\n\n# Restart service\nservice gitbucket restart\n\n# Check status\nservice gitbucket status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gitbucket\nbrew services stop gitbucket\nbrew services restart gitbucket\n\n# Check status\nbrew services list | grep gitbucket</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gitbucket\n\n# Stop service\nnet stop gitbucket\n\n# Using PowerShell\nStart-Service gitbucket\nStop-Service gitbucket\nRestart-Service gitbucket\n\n# Check status\nGet-Service gitbucket</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gitbucket_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name gitbucket.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gitbucket.example.com;\n\n    ssl_certificate /etc/ssl/certs/gitbucket.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gitbucket.example.com.key;\n\n    location / {\n        proxy_pass http://gitbucket_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gitbucket.example.com\n    Redirect permanent / https://gitbucket.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gitbucket.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gitbucket.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gitbucket.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gitbucket_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gitbucket.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gitbucket_backend\n\nbackend gitbucket_backend\n    balance roundrobin\n    server gitbucket1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gitbucket:gitbucket /etc/gitbucket\nsudo chmod 750 /etc/gitbucket\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gitbucket\n\n# View logs\nsudo journalctl -u gitbucket -f\n\n# Monitor resource usage\ntop -p $(pgrep gitbucket)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gitbucket&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gitbucket-backup-$DATE.tar.gz&quot; /etc/gitbucket /var/lib/gitbucket\n\necho &quot;Backup completed: $BACKUP_DIR/gitbucket-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gitbucket\n\n# Restore from backup\ntar -xzf /backup/gitbucket/gitbucket-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gitbucket</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gitbucket -n 100\nsudo tail -f /var/log/gitbucket/gitbucket.log\n\n# Check configuration\ngitbucket --version\n\n# Check permissions\nls -la /etc/gitbucket</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gitbucket)\n\n# Check disk I/O\niotop -p $(pgrep gitbucket)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gitbucket:\n    image: gitbucket:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/gitbucket\n      - ./data:/var/lib/gitbucket\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gitbucket\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gitbucket\n\n# Arch Linux\nsudo pacman -Syu gitbucket\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gitbucket\n\n# openSUSE\nsudo zypper update gitbucket\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gitbucket\n\n# Always backup before updates\ntar -czf /backup/gitbucket-pre-update-$(date +%Y%m%d).tar.gz /etc/gitbucket\n\n# Restart after updates\nsudo systemctl restart gitbucket</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gitbucket\n\n# Clean old logs\nfind /var/log/gitbucket -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gitbucket</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gitbucket.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gitbucket/gitbucket</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gitbucket.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gitbucket.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1159,"lastBuilt":"2025-09-16T03:17:30.878Z","metadataVersion":"2.0"},{"name":"gitlab-runner","displayName":"gitlab-runner Installation Guide","slug":"gitlab-runner","description":"gitlab-runner is a free and open-source multi-platform build agent for GitLab CI/CD. GitLab Runner executes CI/CD jobs defined in GitLab pipelines, providing a FOSS alternative to GitHub Actions runners or CircleCI executors","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9252],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/gitlab-runner","documentationUrl":"https://howtomgr.github.io/miscellaneous/gitlab-runner","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitlab-runner","updatedAt":"2025-09-16T03:14:46Z","createdAt":"2025-09-16T03:14:36Z","readmeRaw":"# gitlab-runner Installation Guide\n\ngitlab-runner is a free and open-source multi-platform build agent for GitLab CI/CD. GitLab Runner executes CI/CD jobs defined in GitLab pipelines, providing a FOSS alternative to GitHub Actions runners or CircleCI executors\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ for concurrent jobs)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 10GB for builds and caches\n  - Network: HTTPS access to GitLab instance\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default gitlab-runner port)\n  - Metrics on port 9252\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gitlab-runner\nsudo dnf install -y gitlab-runner\n\n# Enable and start service\nsudo systemctl enable --now gitlab-runner\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitlab-runner --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gitlab-runner\nsudo apt install -y gitlab-runner\n\n# Enable and start service\nsudo systemctl enable --now gitlab-runner\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\ngitlab-runner --version\n```\n\n### Arch Linux\n\n```bash\n# Install gitlab-runner\nsudo pacman -S gitlab-runner\n\n# Enable and start service\nsudo systemctl enable --now gitlab-runner\n\n# Verify installation\ngitlab-runner --version\n```\n\n### Alpine Linux\n\n```bash\n# Install gitlab-runner\napk add --no-cache gitlab-runner\n\n# Enable and start service\nrc-update add gitlab-runner default\nrc-service gitlab-runner start\n\n# Verify installation\ngitlab-runner --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gitlab-runner\nsudo zypper install -y gitlab-runner\n\n# Enable and start service\nsudo systemctl enable --now gitlab-runner\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitlab-runner --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gitlab-runner\n\n# Start service\nbrew services start gitlab-runner\n\n# Verify installation\ngitlab-runner --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gitlab-runner\n\n# Enable in rc.conf\necho 'gitlab-runner_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gitlab-runner start\n\n# Verify installation\ngitlab-runner --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gitlab-runner\n\n# Or using Scoop\nscoop install gitlab-runner\n\n# Verify installation\ngitlab-runner --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gitlab-runner\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngitlab-runner --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gitlab-runner\n\n# Start service\nsudo systemctl start gitlab-runner\n\n# Stop service\nsudo systemctl stop gitlab-runner\n\n# Restart service\nsudo systemctl restart gitlab-runner\n\n# Check status\nsudo systemctl status gitlab-runner\n\n# View logs\nsudo journalctl -u gitlab-runner -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gitlab-runner default\n\n# Start service\nrc-service gitlab-runner start\n\n# Stop service\nrc-service gitlab-runner stop\n\n# Restart service\nrc-service gitlab-runner restart\n\n# Check status\nrc-service gitlab-runner status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gitlab-runner_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gitlab-runner start\n\n# Stop service\nservice gitlab-runner stop\n\n# Restart service\nservice gitlab-runner restart\n\n# Check status\nservice gitlab-runner status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gitlab-runner\nbrew services stop gitlab-runner\nbrew services restart gitlab-runner\n\n# Check status\nbrew services list | grep gitlab-runner\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gitlab-runner\n\n# Stop service\nnet stop gitlab-runner\n\n# Using PowerShell\nStart-Service gitlab-runner\nStop-Service gitlab-runner\nRestart-Service gitlab-runner\n\n# Check status\nGet-Service gitlab-runner\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gitlab-runner_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name gitlab-runner.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gitlab-runner.example.com;\n\n    ssl_certificate /etc/ssl/certs/gitlab-runner.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gitlab-runner.example.com.key;\n\n    location / {\n        proxy_pass http://gitlab-runner_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gitlab-runner.example.com\n    Redirect permanent / https://gitlab-runner.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gitlab-runner.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gitlab-runner.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gitlab-runner.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gitlab-runner_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gitlab-runner.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gitlab-runner_backend\n\nbackend gitlab-runner_backend\n    balance roundrobin\n    server gitlab-runner1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gitlab-runner:gitlab-runner /etc/gitlab-runner\nsudo chmod 750 /etc/gitlab-runner\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gitlab-runner\n\n# View logs\nsudo journalctl -u gitlab-runner -f\n\n# Monitor resource usage\ntop -p $(pgrep gitlab-runner)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gitlab-runner\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gitlab-runner-backup-$DATE.tar.gz\" /etc/gitlab-runner /var/lib/gitlab-runner\n\necho \"Backup completed: $BACKUP_DIR/gitlab-runner-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gitlab-runner\n\n# Restore from backup\ntar -xzf /backup/gitlab-runner/gitlab-runner-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gitlab-runner\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gitlab-runner -n 100\nsudo tail -f /var/log/gitlab-runner/gitlab-runner.log\n\n# Check configuration\ngitlab-runner --version\n\n# Check permissions\nls -la /etc/gitlab-runner\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gitlab-runner)\n\n# Check disk I/O\niotop -p $(pgrep gitlab-runner)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gitlab-runner:\n    image: gitlab-runner:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/gitlab-runner\n      - ./data:/var/lib/gitlab-runner\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gitlab-runner\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gitlab-runner\n\n# Arch Linux\nsudo pacman -Syu gitlab-runner\n\n# Alpine Linux\napk update && apk upgrade gitlab-runner\n\n# openSUSE\nsudo zypper update gitlab-runner\n\n# FreeBSD\npkg update && pkg upgrade gitlab-runner\n\n# Always backup before updates\ntar -czf /backup/gitlab-runner-pre-update-$(date +%Y%m%d).tar.gz /etc/gitlab-runner\n\n# Restart after updates\nsudo systemctl restart gitlab-runner\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gitlab-runner\n\n# Clean old logs\nfind /var/log/gitlab-runner -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gitlab-runner\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gitlab-runner.org/\n- GitHub Repository: https://github.com/gitlab-runner/gitlab-runner\n- Community Forum: https://forum.gitlab-runner.org/\n- Best Practices Guide: https://docs.gitlab-runner.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"gitlab-runner-installation-guide\" class=\"mobile-header\">gitlab-runner Installation Guide</h1>\n<p class=\"mobile-paragraph\">gitlab-runner is a free and open-source multi-platform build agent for GitLab CI/CD. GitLab Runner executes CI/CD jobs defined in GitLab pipelines, providing a FOSS alternative to GitHub Actions runners or CircleCI executors</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ for concurrent jobs)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB for builds and caches</li>\n<li class=\"mobile-list-item\">Network: HTTPS access to GitLab instance</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default gitlab-runner port)</li>\n<li class=\"mobile-list-item\">Metrics on port 9252</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gitlab-runner\nsudo dnf install -y gitlab-runner\n\n# Enable and start service\nsudo systemctl enable --now gitlab-runner\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gitlab-runner\nsudo apt install -y gitlab-runner\n\n# Enable and start service\nsudo systemctl enable --now gitlab-runner\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitlab-runner\nsudo pacman -S gitlab-runner\n\n# Enable and start service\nsudo systemctl enable --now gitlab-runner\n\n# Verify installation\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitlab-runner\napk add --no-cache gitlab-runner\n\n# Enable and start service\nrc-update add gitlab-runner default\nrc-service gitlab-runner start\n\n# Verify installation\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitlab-runner\nsudo zypper install -y gitlab-runner\n\n# Enable and start service\nsudo systemctl enable --now gitlab-runner\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gitlab-runner\n\n# Start service\nbrew services start gitlab-runner\n\n# Verify installation\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gitlab-runner\n\n# Enable in rc.conf\necho &#039;gitlab-runner_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gitlab-runner start\n\n# Verify installation\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gitlab-runner\n\n# Or using Scoop\nscoop install gitlab-runner\n\n# Verify installation\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gitlab-runner\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngitlab-runner --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gitlab-runner\n\n# Start service\nsudo systemctl start gitlab-runner\n\n# Stop service\nsudo systemctl stop gitlab-runner\n\n# Restart service\nsudo systemctl restart gitlab-runner\n\n# Check status\nsudo systemctl status gitlab-runner\n\n# View logs\nsudo journalctl -u gitlab-runner -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gitlab-runner default\n\n# Start service\nrc-service gitlab-runner start\n\n# Stop service\nrc-service gitlab-runner stop\n\n# Restart service\nrc-service gitlab-runner restart\n\n# Check status\nrc-service gitlab-runner status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gitlab-runner_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gitlab-runner start\n\n# Stop service\nservice gitlab-runner stop\n\n# Restart service\nservice gitlab-runner restart\n\n# Check status\nservice gitlab-runner status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gitlab-runner\nbrew services stop gitlab-runner\nbrew services restart gitlab-runner\n\n# Check status\nbrew services list | grep gitlab-runner</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gitlab-runner\n\n# Stop service\nnet stop gitlab-runner\n\n# Using PowerShell\nStart-Service gitlab-runner\nStop-Service gitlab-runner\nRestart-Service gitlab-runner\n\n# Check status\nGet-Service gitlab-runner</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gitlab-runner_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name gitlab-runner.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gitlab-runner.example.com;\n\n    ssl_certificate /etc/ssl/certs/gitlab-runner.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gitlab-runner.example.com.key;\n\n    location / {\n        proxy_pass http://gitlab-runner_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gitlab-runner.example.com\n    Redirect permanent / https://gitlab-runner.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gitlab-runner.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gitlab-runner.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gitlab-runner.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gitlab-runner_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gitlab-runner.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gitlab-runner_backend\n\nbackend gitlab-runner_backend\n    balance roundrobin\n    server gitlab-runner1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gitlab-runner:gitlab-runner /etc/gitlab-runner\nsudo chmod 750 /etc/gitlab-runner\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gitlab-runner\n\n# View logs\nsudo journalctl -u gitlab-runner -f\n\n# Monitor resource usage\ntop -p $(pgrep gitlab-runner)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gitlab-runner&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gitlab-runner-backup-$DATE.tar.gz&quot; /etc/gitlab-runner /var/lib/gitlab-runner\n\necho &quot;Backup completed: $BACKUP_DIR/gitlab-runner-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gitlab-runner\n\n# Restore from backup\ntar -xzf /backup/gitlab-runner/gitlab-runner-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gitlab-runner</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gitlab-runner -n 100\nsudo tail -f /var/log/gitlab-runner/gitlab-runner.log\n\n# Check configuration\ngitlab-runner --version\n\n# Check permissions\nls -la /etc/gitlab-runner</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gitlab-runner)\n\n# Check disk I/O\niotop -p $(pgrep gitlab-runner)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gitlab-runner:\n    image: gitlab-runner:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/gitlab-runner\n      - ./data:/var/lib/gitlab-runner\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gitlab-runner\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gitlab-runner\n\n# Arch Linux\nsudo pacman -Syu gitlab-runner\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gitlab-runner\n\n# openSUSE\nsudo zypper update gitlab-runner\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gitlab-runner\n\n# Always backup before updates\ntar -czf /backup/gitlab-runner-pre-update-$(date +%Y%m%d).tar.gz /etc/gitlab-runner\n\n# Restart after updates\nsudo systemctl restart gitlab-runner</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gitlab-runner\n\n# Clean old logs\nfind /var/log/gitlab-runner -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gitlab-runner</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gitlab-runner.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gitlab-runner/gitlab-runner</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gitlab-runner.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gitlab-runner.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1184,"lastBuilt":"2025-09-16T03:17:29.747Z","metadataVersion":"2.0"},{"name":"gitolite","displayName":"gitolite Installation Guide","slug":"gitolite","description":"gitolite is a free and open-source Git repository hosting. Gitolite provides fine-grained access control for Git repositories","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[22,80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/gitolite","documentationUrl":"https://howtomgr.github.io/miscellaneous/gitolite","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitolite","updatedAt":"2025-09-16T03:14:59Z","createdAt":"2025-09-16T03:14:50Z","readmeRaw":"# gitolite Installation Guide\n\ngitolite is a free and open-source Git repository hosting. Gitolite provides fine-grained access control for Git repositories\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 1GB for repos\n  - Network: SSH access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 22 (default gitolite port)\n  - Git protocol 9418\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gitolite\nsudo dnf install -y gitolite\n\n# Enable and start service\nsudo systemctl enable --now gitolite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitolite --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gitolite\nsudo apt install -y gitolite\n\n# Enable and start service\nsudo systemctl enable --now gitolite\n\n# Configure firewall\nsudo ufw allow 22\n\n# Verify installation\ngitolite --version\n```\n\n### Arch Linux\n\n```bash\n# Install gitolite\nsudo pacman -S gitolite\n\n# Enable and start service\nsudo systemctl enable --now gitolite\n\n# Verify installation\ngitolite --version\n```\n\n### Alpine Linux\n\n```bash\n# Install gitolite\napk add --no-cache gitolite\n\n# Enable and start service\nrc-update add gitolite default\nrc-service gitolite start\n\n# Verify installation\ngitolite --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gitolite\nsudo zypper install -y gitolite\n\n# Enable and start service\nsudo systemctl enable --now gitolite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitolite --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gitolite\n\n# Start service\nbrew services start gitolite\n\n# Verify installation\ngitolite --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gitolite\n\n# Enable in rc.conf\necho 'gitolite_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gitolite start\n\n# Verify installation\ngitolite --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gitolite\n\n# Or using Scoop\nscoop install gitolite\n\n# Verify installation\ngitolite --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gitolite\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngitolite --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gitolite\n\n# Start service\nsudo systemctl start gitolite\n\n# Stop service\nsudo systemctl stop gitolite\n\n# Restart service\nsudo systemctl restart gitolite\n\n# Check status\nsudo systemctl status gitolite\n\n# View logs\nsudo journalctl -u gitolite -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gitolite default\n\n# Start service\nrc-service gitolite start\n\n# Stop service\nrc-service gitolite stop\n\n# Restart service\nrc-service gitolite restart\n\n# Check status\nrc-service gitolite status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gitolite_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gitolite start\n\n# Stop service\nservice gitolite stop\n\n# Restart service\nservice gitolite restart\n\n# Check status\nservice gitolite status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gitolite\nbrew services stop gitolite\nbrew services restart gitolite\n\n# Check status\nbrew services list | grep gitolite\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gitolite\n\n# Stop service\nnet stop gitolite\n\n# Using PowerShell\nStart-Service gitolite\nStop-Service gitolite\nRestart-Service gitolite\n\n# Check status\nGet-Service gitolite\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gitolite_backend {\n    server 127.0.0.1:22;\n}\n\nserver {\n    listen 80;\n    server_name gitolite.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gitolite.example.com;\n\n    ssl_certificate /etc/ssl/certs/gitolite.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gitolite.example.com.key;\n\n    location / {\n        proxy_pass http://gitolite_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gitolite.example.com\n    Redirect permanent / https://gitolite.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gitolite.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gitolite.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gitolite.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:22/\n    ProxyPassReverse / http://127.0.0.1:22/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gitolite_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gitolite.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gitolite_backend\n\nbackend gitolite_backend\n    balance roundrobin\n    server gitolite1 127.0.0.1:22 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gitolite:gitolite /etc/gitolite\nsudo chmod 750 /etc/gitolite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gitolite\n\n# View logs\nsudo journalctl -u gitolite -f\n\n# Monitor resource usage\ntop -p $(pgrep gitolite)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gitolite\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gitolite-backup-$DATE.tar.gz\" /etc/gitolite /var/lib/gitolite\n\necho \"Backup completed: $BACKUP_DIR/gitolite-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gitolite\n\n# Restore from backup\ntar -xzf /backup/gitolite/gitolite-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gitolite\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gitolite -n 100\nsudo tail -f /var/log/gitolite/gitolite.log\n\n# Check configuration\ngitolite --version\n\n# Check permissions\nls -la /etc/gitolite\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 22\n\n# Test connectivity\ntelnet localhost 22\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gitolite)\n\n# Check disk I/O\niotop -p $(pgrep gitolite)\n\n# Check connections\nss -an | grep 22\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gitolite:\n    image: gitolite:latest\n    ports:\n      - \"22:22\"\n    volumes:\n      - ./config:/etc/gitolite\n      - ./data:/var/lib/gitolite\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gitolite\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gitolite\n\n# Arch Linux\nsudo pacman -Syu gitolite\n\n# Alpine Linux\napk update && apk upgrade gitolite\n\n# openSUSE\nsudo zypper update gitolite\n\n# FreeBSD\npkg update && pkg upgrade gitolite\n\n# Always backup before updates\ntar -czf /backup/gitolite-pre-update-$(date +%Y%m%d).tar.gz /etc/gitolite\n\n# Restart after updates\nsudo systemctl restart gitolite\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gitolite\n\n# Clean old logs\nfind /var/log/gitolite -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gitolite\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gitolite.org/\n- GitHub Repository: https://github.com/gitolite/gitolite\n- Community Forum: https://forum.gitolite.org/\n- Best Practices Guide: https://docs.gitolite.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"gitolite-installation-guide\" class=\"mobile-header\">gitolite Installation Guide</h1>\n<p class=\"mobile-paragraph\">gitolite is a free and open-source Git repository hosting. Gitolite provides fine-grained access control for Git repositories</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for repos</li>\n<li class=\"mobile-list-item\">Network: SSH access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 22 (default gitolite port)</li>\n<li class=\"mobile-list-item\">Git protocol 9418</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gitolite\nsudo dnf install -y gitolite\n\n# Enable and start service\nsudo systemctl enable --now gitolite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gitolite\nsudo apt install -y gitolite\n\n# Enable and start service\nsudo systemctl enable --now gitolite\n\n# Configure firewall\nsudo ufw allow 22\n\n# Verify installation\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitolite\nsudo pacman -S gitolite\n\n# Enable and start service\nsudo systemctl enable --now gitolite\n\n# Verify installation\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitolite\napk add --no-cache gitolite\n\n# Enable and start service\nrc-update add gitolite default\nrc-service gitolite start\n\n# Verify installation\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gitolite\nsudo zypper install -y gitolite\n\n# Enable and start service\nsudo systemctl enable --now gitolite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gitolite\n\n# Start service\nbrew services start gitolite\n\n# Verify installation\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gitolite\n\n# Enable in rc.conf\necho &#039;gitolite_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gitolite start\n\n# Verify installation\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gitolite\n\n# Or using Scoop\nscoop install gitolite\n\n# Verify installation\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gitolite\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngitolite --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gitolite\n\n# Start service\nsudo systemctl start gitolite\n\n# Stop service\nsudo systemctl stop gitolite\n\n# Restart service\nsudo systemctl restart gitolite\n\n# Check status\nsudo systemctl status gitolite\n\n# View logs\nsudo journalctl -u gitolite -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gitolite default\n\n# Start service\nrc-service gitolite start\n\n# Stop service\nrc-service gitolite stop\n\n# Restart service\nrc-service gitolite restart\n\n# Check status\nrc-service gitolite status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gitolite_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gitolite start\n\n# Stop service\nservice gitolite stop\n\n# Restart service\nservice gitolite restart\n\n# Check status\nservice gitolite status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gitolite\nbrew services stop gitolite\nbrew services restart gitolite\n\n# Check status\nbrew services list | grep gitolite</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gitolite\n\n# Stop service\nnet stop gitolite\n\n# Using PowerShell\nStart-Service gitolite\nStop-Service gitolite\nRestart-Service gitolite\n\n# Check status\nGet-Service gitolite</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gitolite_backend {\n    server 127.0.0.1:22;\n}\n\nserver {\n    listen 80;\n    server_name gitolite.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gitolite.example.com;\n\n    ssl_certificate /etc/ssl/certs/gitolite.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gitolite.example.com.key;\n\n    location / {\n        proxy_pass http://gitolite_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gitolite.example.com\n    Redirect permanent / https://gitolite.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gitolite.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gitolite.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gitolite.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:22/\n    ProxyPassReverse / http://127.0.0.1:22/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gitolite_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gitolite.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gitolite_backend\n\nbackend gitolite_backend\n    balance roundrobin\n    server gitolite1 127.0.0.1:22 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gitolite:gitolite /etc/gitolite\nsudo chmod 750 /etc/gitolite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gitolite\n\n# View logs\nsudo journalctl -u gitolite -f\n\n# Monitor resource usage\ntop -p $(pgrep gitolite)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gitolite&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gitolite-backup-$DATE.tar.gz&quot; /etc/gitolite /var/lib/gitolite\n\necho &quot;Backup completed: $BACKUP_DIR/gitolite-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gitolite\n\n# Restore from backup\ntar -xzf /backup/gitolite/gitolite-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gitolite</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gitolite -n 100\nsudo tail -f /var/log/gitolite/gitolite.log\n\n# Check configuration\ngitolite --version\n\n# Check permissions\nls -la /etc/gitolite</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 22\n\n# Test connectivity\ntelnet localhost 22\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gitolite)\n\n# Check disk I/O\niotop -p $(pgrep gitolite)\n\n# Check connections\nss -an | grep 22</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gitolite:\n    image: gitolite:latest\n    ports:\n      - &quot;22:22&quot;\n    volumes:\n      - ./config:/etc/gitolite\n      - ./data:/var/lib/gitolite\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gitolite\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gitolite\n\n# Arch Linux\nsudo pacman -Syu gitolite\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gitolite\n\n# openSUSE\nsudo zypper update gitolite\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gitolite\n\n# Always backup before updates\ntar -czf /backup/gitolite-pre-update-$(date +%Y%m%d).tar.gz /etc/gitolite\n\n# Restart after updates\nsudo systemctl restart gitolite</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gitolite\n\n# Clean old logs\nfind /var/log/gitolite -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gitolite</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gitolite.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gitolite/gitolite</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gitolite.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gitolite.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1157,"lastBuilt":"2025-09-16T03:17:29.411Z","metadataVersion":"2.0"},{"name":"gogs","displayName":"gogs Installation Guide","slug":"gogs","description":"gogs is a free and open-source self-hosted Git service. Gogs provides a painless self-hosted Git service written in Go","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[22,80,443,3000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/gogs","documentationUrl":"https://howtomgr.github.io/miscellaneous/gogs","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gogs","updatedAt":"2025-09-16T03:16:08Z","createdAt":"2025-09-16T03:15:58Z","readmeRaw":"# gogs Installation Guide\n\ngogs is a free and open-source self-hosted Git service. Gogs provides a painless self-hosted Git service written in Go\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 1GB for repos\n  - Network: HTTP/SSH access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3000 (default gogs port)\n  - SSH on port 22\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gogs\nsudo dnf install -y gogs\n\n# Enable and start service\nsudo systemctl enable --now gogs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngogs --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gogs\nsudo apt install -y gogs\n\n# Enable and start service\nsudo systemctl enable --now gogs\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\ngogs --version\n```\n\n### Arch Linux\n\n```bash\n# Install gogs\nsudo pacman -S gogs\n\n# Enable and start service\nsudo systemctl enable --now gogs\n\n# Verify installation\ngogs --version\n```\n\n### Alpine Linux\n\n```bash\n# Install gogs\napk add --no-cache gogs\n\n# Enable and start service\nrc-update add gogs default\nrc-service gogs start\n\n# Verify installation\ngogs --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gogs\nsudo zypper install -y gogs\n\n# Enable and start service\nsudo systemctl enable --now gogs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngogs --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gogs\n\n# Start service\nbrew services start gogs\n\n# Verify installation\ngogs --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gogs\n\n# Enable in rc.conf\necho 'gogs_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gogs start\n\n# Verify installation\ngogs --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gogs\n\n# Or using Scoop\nscoop install gogs\n\n# Verify installation\ngogs --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gogs\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngogs --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gogs\n\n# Start service\nsudo systemctl start gogs\n\n# Stop service\nsudo systemctl stop gogs\n\n# Restart service\nsudo systemctl restart gogs\n\n# Check status\nsudo systemctl status gogs\n\n# View logs\nsudo journalctl -u gogs -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gogs default\n\n# Start service\nrc-service gogs start\n\n# Stop service\nrc-service gogs stop\n\n# Restart service\nrc-service gogs restart\n\n# Check status\nrc-service gogs status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gogs_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gogs start\n\n# Stop service\nservice gogs stop\n\n# Restart service\nservice gogs restart\n\n# Check status\nservice gogs status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gogs\nbrew services stop gogs\nbrew services restart gogs\n\n# Check status\nbrew services list | grep gogs\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gogs\n\n# Stop service\nnet stop gogs\n\n# Using PowerShell\nStart-Service gogs\nStop-Service gogs\nRestart-Service gogs\n\n# Check status\nGet-Service gogs\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gogs_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name gogs.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gogs.example.com;\n\n    ssl_certificate /etc/ssl/certs/gogs.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gogs.example.com.key;\n\n    location / {\n        proxy_pass http://gogs_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gogs.example.com\n    Redirect permanent / https://gogs.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gogs.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gogs.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gogs.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gogs_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gogs.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gogs_backend\n\nbackend gogs_backend\n    balance roundrobin\n    server gogs1 127.0.0.1:3000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gogs:gogs /etc/gogs\nsudo chmod 750 /etc/gogs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gogs\n\n# View logs\nsudo journalctl -u gogs -f\n\n# Monitor resource usage\ntop -p $(pgrep gogs)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gogs\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gogs-backup-$DATE.tar.gz\" /etc/gogs /var/lib/gogs\n\necho \"Backup completed: $BACKUP_DIR/gogs-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gogs\n\n# Restore from backup\ntar -xzf /backup/gogs/gogs-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gogs\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gogs -n 100\nsudo tail -f /var/log/gogs/gogs.log\n\n# Check configuration\ngogs --version\n\n# Check permissions\nls -la /etc/gogs\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gogs)\n\n# Check disk I/O\niotop -p $(pgrep gogs)\n\n# Check connections\nss -an | grep 3000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gogs:\n    image: gogs:latest\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./config:/etc/gogs\n      - ./data:/var/lib/gogs\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gogs\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gogs\n\n# Arch Linux\nsudo pacman -Syu gogs\n\n# Alpine Linux\napk update && apk upgrade gogs\n\n# openSUSE\nsudo zypper update gogs\n\n# FreeBSD\npkg update && pkg upgrade gogs\n\n# Always backup before updates\ntar -czf /backup/gogs-pre-update-$(date +%Y%m%d).tar.gz /etc/gogs\n\n# Restart after updates\nsudo systemctl restart gogs\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gogs\n\n# Clean old logs\nfind /var/log/gogs -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gogs\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gogs.org/\n- GitHub Repository: https://github.com/gogs/gogs\n- Community Forum: https://forum.gogs.org/\n- Best Practices Guide: https://docs.gogs.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"gogs-installation-guide\" class=\"mobile-header\">gogs Installation Guide</h1>\n<p class=\"mobile-paragraph\">gogs is a free and open-source self-hosted Git service. Gogs provides a painless self-hosted Git service written in Go</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for repos</li>\n<li class=\"mobile-list-item\">Network: HTTP/SSH access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3000 (default gogs port)</li>\n<li class=\"mobile-list-item\">SSH on port 22</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gogs\nsudo dnf install -y gogs\n\n# Enable and start service\nsudo systemctl enable --now gogs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngogs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gogs\nsudo apt install -y gogs\n\n# Enable and start service\nsudo systemctl enable --now gogs\n\n# Configure firewall\nsudo ufw allow 3000\n\n# Verify installation\ngogs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gogs\nsudo pacman -S gogs\n\n# Enable and start service\nsudo systemctl enable --now gogs\n\n# Verify installation\ngogs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gogs\napk add --no-cache gogs\n\n# Enable and start service\nrc-update add gogs default\nrc-service gogs start\n\n# Verify installation\ngogs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gogs\nsudo zypper install -y gogs\n\n# Enable and start service\nsudo systemctl enable --now gogs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngogs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gogs\n\n# Start service\nbrew services start gogs\n\n# Verify installation\ngogs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gogs\n\n# Enable in rc.conf\necho &#039;gogs_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gogs start\n\n# Verify installation\ngogs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gogs\n\n# Or using Scoop\nscoop install gogs\n\n# Verify installation\ngogs --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gogs\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngogs --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gogs\n\n# Start service\nsudo systemctl start gogs\n\n# Stop service\nsudo systemctl stop gogs\n\n# Restart service\nsudo systemctl restart gogs\n\n# Check status\nsudo systemctl status gogs\n\n# View logs\nsudo journalctl -u gogs -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gogs default\n\n# Start service\nrc-service gogs start\n\n# Stop service\nrc-service gogs stop\n\n# Restart service\nrc-service gogs restart\n\n# Check status\nrc-service gogs status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gogs_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gogs start\n\n# Stop service\nservice gogs stop\n\n# Restart service\nservice gogs restart\n\n# Check status\nservice gogs status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gogs\nbrew services stop gogs\nbrew services restart gogs\n\n# Check status\nbrew services list | grep gogs</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gogs\n\n# Stop service\nnet stop gogs\n\n# Using PowerShell\nStart-Service gogs\nStop-Service gogs\nRestart-Service gogs\n\n# Check status\nGet-Service gogs</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gogs_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name gogs.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gogs.example.com;\n\n    ssl_certificate /etc/ssl/certs/gogs.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gogs.example.com.key;\n\n    location / {\n        proxy_pass http://gogs_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gogs.example.com\n    Redirect permanent / https://gogs.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gogs.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gogs.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gogs.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3000/\n    ProxyPassReverse / http://127.0.0.1:3000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gogs_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gogs.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gogs_backend\n\nbackend gogs_backend\n    balance roundrobin\n    server gogs1 127.0.0.1:3000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gogs:gogs /etc/gogs\nsudo chmod 750 /etc/gogs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gogs\n\n# View logs\nsudo journalctl -u gogs -f\n\n# Monitor resource usage\ntop -p $(pgrep gogs)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gogs&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gogs-backup-$DATE.tar.gz&quot; /etc/gogs /var/lib/gogs\n\necho &quot;Backup completed: $BACKUP_DIR/gogs-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gogs\n\n# Restore from backup\ntar -xzf /backup/gogs/gogs-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gogs</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gogs -n 100\nsudo tail -f /var/log/gogs/gogs.log\n\n# Check configuration\ngogs --version\n\n# Check permissions\nls -la /etc/gogs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3000\n\n# Test connectivity\ntelnet localhost 3000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gogs)\n\n# Check disk I/O\niotop -p $(pgrep gogs)\n\n# Check connections\nss -an | grep 3000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gogs:\n    image: gogs:latest\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./config:/etc/gogs\n      - ./data:/var/lib/gogs\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gogs\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gogs\n\n# Arch Linux\nsudo pacman -Syu gogs\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gogs\n\n# openSUSE\nsudo zypper update gogs\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gogs\n\n# Always backup before updates\ntar -czf /backup/gogs-pre-update-$(date +%Y%m%d).tar.gz /etc/gogs\n\n# Restart after updates\nsudo systemctl restart gogs</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gogs\n\n# Clean old logs\nfind /var/log/gogs -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gogs</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gogs.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gogs/gogs</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gogs.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gogs.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1160,"lastBuilt":"2025-09-16T03:17:27.628Z","metadataVersion":"2.0"},{"name":"gollum","displayName":"gollum Installation Guide","slug":"gollum","description":"gollum is a free and open-source git-backed wiki. Gollum provides simple wiki system backed by Git repository","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,4567],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/gollum","documentationUrl":"https://howtomgr.github.io/miscellaneous/gollum","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gollum","updatedAt":"2025-09-16T03:16:22Z","createdAt":"2025-09-16T03:16:12Z","readmeRaw":"# gollum Installation Guide\n\ngollum is a free and open-source git-backed wiki. Gollum provides simple wiki system backed by Git repository\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 500MB for data\n  - Network: HTTP access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 4567 (default gollum port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gollum\nsudo dnf install -y gollum\n\n# Enable and start service\nsudo systemctl enable --now gollum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4567/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngollum --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gollum\nsudo apt install -y gollum\n\n# Enable and start service\nsudo systemctl enable --now gollum\n\n# Configure firewall\nsudo ufw allow 4567\n\n# Verify installation\ngollum --version\n```\n\n### Arch Linux\n\n```bash\n# Install gollum\nsudo pacman -S gollum\n\n# Enable and start service\nsudo systemctl enable --now gollum\n\n# Verify installation\ngollum --version\n```\n\n### Alpine Linux\n\n```bash\n# Install gollum\napk add --no-cache gollum\n\n# Enable and start service\nrc-update add gollum default\nrc-service gollum start\n\n# Verify installation\ngollum --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gollum\nsudo zypper install -y gollum\n\n# Enable and start service\nsudo systemctl enable --now gollum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4567/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngollum --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gollum\n\n# Start service\nbrew services start gollum\n\n# Verify installation\ngollum --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gollum\n\n# Enable in rc.conf\necho 'gollum_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gollum start\n\n# Verify installation\ngollum --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gollum\n\n# Or using Scoop\nscoop install gollum\n\n# Verify installation\ngollum --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gollum\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngollum --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gollum\n\n# Start service\nsudo systemctl start gollum\n\n# Stop service\nsudo systemctl stop gollum\n\n# Restart service\nsudo systemctl restart gollum\n\n# Check status\nsudo systemctl status gollum\n\n# View logs\nsudo journalctl -u gollum -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gollum default\n\n# Start service\nrc-service gollum start\n\n# Stop service\nrc-service gollum stop\n\n# Restart service\nrc-service gollum restart\n\n# Check status\nrc-service gollum status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gollum_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gollum start\n\n# Stop service\nservice gollum stop\n\n# Restart service\nservice gollum restart\n\n# Check status\nservice gollum status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gollum\nbrew services stop gollum\nbrew services restart gollum\n\n# Check status\nbrew services list | grep gollum\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gollum\n\n# Stop service\nnet stop gollum\n\n# Using PowerShell\nStart-Service gollum\nStop-Service gollum\nRestart-Service gollum\n\n# Check status\nGet-Service gollum\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gollum_backend {\n    server 127.0.0.1:4567;\n}\n\nserver {\n    listen 80;\n    server_name gollum.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gollum.example.com;\n\n    ssl_certificate /etc/ssl/certs/gollum.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gollum.example.com.key;\n\n    location / {\n        proxy_pass http://gollum_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gollum.example.com\n    Redirect permanent / https://gollum.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gollum.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gollum.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gollum.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:4567/\n    ProxyPassReverse / http://127.0.0.1:4567/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gollum_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gollum.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gollum_backend\n\nbackend gollum_backend\n    balance roundrobin\n    server gollum1 127.0.0.1:4567 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gollum:gollum /etc/gollum\nsudo chmod 750 /etc/gollum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4567/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gollum\n\n# View logs\nsudo journalctl -u gollum -f\n\n# Monitor resource usage\ntop -p $(pgrep gollum)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gollum\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gollum-backup-$DATE.tar.gz\" /etc/gollum /var/lib/gollum\n\necho \"Backup completed: $BACKUP_DIR/gollum-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gollum\n\n# Restore from backup\ntar -xzf /backup/gollum/gollum-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gollum\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gollum -n 100\nsudo tail -f /var/log/gollum/gollum.log\n\n# Check configuration\ngollum --version\n\n# Check permissions\nls -la /etc/gollum\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 4567\n\n# Test connectivity\ntelnet localhost 4567\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gollum)\n\n# Check disk I/O\niotop -p $(pgrep gollum)\n\n# Check connections\nss -an | grep 4567\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gollum:\n    image: gollum:latest\n    ports:\n      - \"4567:4567\"\n    volumes:\n      - ./config:/etc/gollum\n      - ./data:/var/lib/gollum\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gollum\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gollum\n\n# Arch Linux\nsudo pacman -Syu gollum\n\n# Alpine Linux\napk update && apk upgrade gollum\n\n# openSUSE\nsudo zypper update gollum\n\n# FreeBSD\npkg update && pkg upgrade gollum\n\n# Always backup before updates\ntar -czf /backup/gollum-pre-update-$(date +%Y%m%d).tar.gz /etc/gollum\n\n# Restart after updates\nsudo systemctl restart gollum\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gollum\n\n# Clean old logs\nfind /var/log/gollum -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gollum\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gollum.org/\n- GitHub Repository: https://github.com/gollum/gollum\n- Community Forum: https://forum.gollum.org/\n- Best Practices Guide: https://docs.gollum.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"gollum-installation-guide\" class=\"mobile-header\">gollum Installation Guide</h1>\n<p class=\"mobile-paragraph\">gollum is a free and open-source git-backed wiki. Gollum provides simple wiki system backed by Git repository</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 4567 (default gollum port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gollum\nsudo dnf install -y gollum\n\n# Enable and start service\nsudo systemctl enable --now gollum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4567/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngollum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gollum\nsudo apt install -y gollum\n\n# Enable and start service\nsudo systemctl enable --now gollum\n\n# Configure firewall\nsudo ufw allow 4567\n\n# Verify installation\ngollum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gollum\nsudo pacman -S gollum\n\n# Enable and start service\nsudo systemctl enable --now gollum\n\n# Verify installation\ngollum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gollum\napk add --no-cache gollum\n\n# Enable and start service\nrc-update add gollum default\nrc-service gollum start\n\n# Verify installation\ngollum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gollum\nsudo zypper install -y gollum\n\n# Enable and start service\nsudo systemctl enable --now gollum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4567/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngollum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gollum\n\n# Start service\nbrew services start gollum\n\n# Verify installation\ngollum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gollum\n\n# Enable in rc.conf\necho &#039;gollum_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gollum start\n\n# Verify installation\ngollum --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gollum\n\n# Or using Scoop\nscoop install gollum\n\n# Verify installation\ngollum --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gollum\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngollum --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gollum\n\n# Start service\nsudo systemctl start gollum\n\n# Stop service\nsudo systemctl stop gollum\n\n# Restart service\nsudo systemctl restart gollum\n\n# Check status\nsudo systemctl status gollum\n\n# View logs\nsudo journalctl -u gollum -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gollum default\n\n# Start service\nrc-service gollum start\n\n# Stop service\nrc-service gollum stop\n\n# Restart service\nrc-service gollum restart\n\n# Check status\nrc-service gollum status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gollum_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gollum start\n\n# Stop service\nservice gollum stop\n\n# Restart service\nservice gollum restart\n\n# Check status\nservice gollum status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gollum\nbrew services stop gollum\nbrew services restart gollum\n\n# Check status\nbrew services list | grep gollum</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gollum\n\n# Stop service\nnet stop gollum\n\n# Using PowerShell\nStart-Service gollum\nStop-Service gollum\nRestart-Service gollum\n\n# Check status\nGet-Service gollum</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gollum_backend {\n    server 127.0.0.1:4567;\n}\n\nserver {\n    listen 80;\n    server_name gollum.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gollum.example.com;\n\n    ssl_certificate /etc/ssl/certs/gollum.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gollum.example.com.key;\n\n    location / {\n        proxy_pass http://gollum_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gollum.example.com\n    Redirect permanent / https://gollum.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gollum.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gollum.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gollum.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:4567/\n    ProxyPassReverse / http://127.0.0.1:4567/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gollum_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gollum.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gollum_backend\n\nbackend gollum_backend\n    balance roundrobin\n    server gollum1 127.0.0.1:4567 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gollum:gollum /etc/gollum\nsudo chmod 750 /etc/gollum\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4567/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gollum\n\n# View logs\nsudo journalctl -u gollum -f\n\n# Monitor resource usage\ntop -p $(pgrep gollum)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gollum&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gollum-backup-$DATE.tar.gz&quot; /etc/gollum /var/lib/gollum\n\necho &quot;Backup completed: $BACKUP_DIR/gollum-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gollum\n\n# Restore from backup\ntar -xzf /backup/gollum/gollum-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gollum</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gollum -n 100\nsudo tail -f /var/log/gollum/gollum.log\n\n# Check configuration\ngollum --version\n\n# Check permissions\nls -la /etc/gollum</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 4567\n\n# Test connectivity\ntelnet localhost 4567\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gollum)\n\n# Check disk I/O\niotop -p $(pgrep gollum)\n\n# Check connections\nss -an | grep 4567</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gollum:\n    image: gollum:latest\n    ports:\n      - &quot;4567:4567&quot;\n    volumes:\n      - ./config:/etc/gollum\n      - ./data:/var/lib/gollum\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gollum\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gollum\n\n# Arch Linux\nsudo pacman -Syu gollum\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gollum\n\n# openSUSE\nsudo zypper update gollum\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gollum\n\n# Always backup before updates\ntar -czf /backup/gollum-pre-update-$(date +%Y%m%d).tar.gz /etc/gollum\n\n# Restart after updates\nsudo systemctl restart gollum</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gollum\n\n# Clean old logs\nfind /var/log/gollum -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gollum</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gollum.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gollum/gollum</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gollum.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gollum.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1155,"lastBuilt":"2025-09-16T03:17:27.209Z","metadataVersion":"2.0"},{"name":"gotify-server","displayName":"gotify Installation Guide","slug":"gotify-server","description":"gotify is a free and open-source simple server for sending and receiving messages. Gotify provides self-hosted push notifications with a simple API, serving as a privacy-focused alternative to Firebase Cloud Messaging or Pushover","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/gotify-server","documentationUrl":"https://howtomgr.github.io/miscellaneous/gotify-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gotify-server","updatedAt":"2025-09-16T03:16:35Z","createdAt":"2025-09-16T03:16:25Z","readmeRaw":"# gotify Installation Guide\n\ngotify is a free and open-source simple server for sending and receiving messages. Gotify provides self-hosted push notifications with a simple API, serving as a privacy-focused alternative to Firebase Cloud Messaging or Pushover\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 100MB for application\n  - Network: HTTP/HTTPS and WebSocket\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default gotify port)\n  - WebSocket support required\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gotify\nsudo dnf install -y gotify-server\n\n# Enable and start service\nsudo systemctl enable --now gotify\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngotify-server version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install gotify\nsudo apt install -y gotify-server\n\n# Enable and start service\nsudo systemctl enable --now gotify\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ngotify-server version\n```\n\n### Arch Linux\n\n```bash\n# Install gotify\nsudo pacman -S gotify-server\n\n# Enable and start service\nsudo systemctl enable --now gotify\n\n# Verify installation\ngotify-server version\n```\n\n### Alpine Linux\n\n```bash\n# Install gotify\napk add --no-cache gotify-server\n\n# Enable and start service\nrc-update add gotify default\nrc-service gotify start\n\n# Verify installation\ngotify-server version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install gotify\nsudo zypper install -y gotify-server\n\n# Enable and start service\nsudo systemctl enable --now gotify\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngotify-server version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install gotify-server\n\n# Start service\nbrew services start gotify-server\n\n# Verify installation\ngotify-server version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install gotify-server\n\n# Enable in rc.conf\necho 'gotify_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gotify start\n\n# Verify installation\ngotify-server version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install gotify-server\n\n# Or using Scoop\nscoop install gotify-server\n\n# Verify installation\ngotify-server version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/gotify-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngotify-server version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable gotify\n\n# Start service\nsudo systemctl start gotify\n\n# Stop service\nsudo systemctl stop gotify\n\n# Restart service\nsudo systemctl restart gotify\n\n# Check status\nsudo systemctl status gotify\n\n# View logs\nsudo journalctl -u gotify -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add gotify default\n\n# Start service\nrc-service gotify start\n\n# Stop service\nrc-service gotify stop\n\n# Restart service\nrc-service gotify restart\n\n# Check status\nrc-service gotify status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'gotify_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice gotify start\n\n# Stop service\nservice gotify stop\n\n# Restart service\nservice gotify restart\n\n# Check status\nservice gotify status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start gotify-server\nbrew services stop gotify-server\nbrew services restart gotify-server\n\n# Check status\nbrew services list | grep gotify-server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start gotify\n\n# Stop service\nnet stop gotify\n\n# Using PowerShell\nStart-Service gotify\nStop-Service gotify\nRestart-Service gotify\n\n# Check status\nGet-Service gotify\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream gotify-server_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name gotify-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gotify-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/gotify-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gotify-server.example.com.key;\n\n    location / {\n        proxy_pass http://gotify-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName gotify-server.example.com\n    Redirect permanent / https://gotify-server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName gotify-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gotify-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gotify-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend gotify-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gotify-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gotify-server_backend\n\nbackend gotify-server_backend\n    balance roundrobin\n    server gotify-server1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R gotify-server:gotify-server /etc/gotify-server\nsudo chmod 750 /etc/gotify-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status gotify\n\n# View logs\nsudo journalctl -u gotify -f\n\n# Monitor resource usage\ntop -p $(pgrep gotify-server)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/gotify-server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/gotify-server-backup-$DATE.tar.gz\" /etc/gotify-server /var/lib/gotify-server\n\necho \"Backup completed: $BACKUP_DIR/gotify-server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop gotify\n\n# Restore from backup\ntar -xzf /backup/gotify-server/gotify-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gotify\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u gotify -n 100\nsudo tail -f /var/log/gotify-server/gotify-server.log\n\n# Check configuration\ngotify-server version\n\n# Check permissions\nls -la /etc/gotify-server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep gotify-server)\n\n# Check disk I/O\niotop -p $(pgrep gotify-server)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  gotify-server:\n    image: gotify-server:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/gotify-server\n      - ./data:/var/lib/gotify-server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gotify-server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade gotify-server\n\n# Arch Linux\nsudo pacman -Syu gotify-server\n\n# Alpine Linux\napk update && apk upgrade gotify-server\n\n# openSUSE\nsudo zypper update gotify-server\n\n# FreeBSD\npkg update && pkg upgrade gotify-server\n\n# Always backup before updates\ntar -czf /backup/gotify-server-pre-update-$(date +%Y%m%d).tar.gz /etc/gotify-server\n\n# Restart after updates\nsudo systemctl restart gotify\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/gotify-server\n\n# Clean old logs\nfind /var/log/gotify-server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gotify-server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.gotify-server.org/\n- GitHub Repository: https://github.com/gotify-server/gotify-server\n- Community Forum: https://forum.gotify-server.org/\n- Best Practices Guide: https://docs.gotify-server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"gotify-installation-guide\" class=\"mobile-header\">gotify Installation Guide</h1>\n<p class=\"mobile-paragraph\">gotify is a free and open-source simple server for sending and receiving messages. Gotify provides self-hosted push notifications with a simple API, serving as a privacy-focused alternative to Firebase Cloud Messaging or Pushover</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for application</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS and WebSocket</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default gotify port)</li>\n<li class=\"mobile-list-item\">WebSocket support required</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install gotify\nsudo dnf install -y gotify-server\n\n# Enable and start service\nsudo systemctl enable --now gotify\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install gotify\nsudo apt install -y gotify-server\n\n# Enable and start service\nsudo systemctl enable --now gotify\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gotify\nsudo pacman -S gotify-server\n\n# Enable and start service\nsudo systemctl enable --now gotify\n\n# Verify installation\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gotify\napk add --no-cache gotify-server\n\n# Enable and start service\nrc-update add gotify default\nrc-service gotify start\n\n# Verify installation\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install gotify\nsudo zypper install -y gotify-server\n\n# Enable and start service\nsudo systemctl enable --now gotify\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install gotify-server\n\n# Start service\nbrew services start gotify-server\n\n# Verify installation\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install gotify-server\n\n# Enable in rc.conf\necho &#039;gotify_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gotify start\n\n# Verify installation\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install gotify-server\n\n# Or using Scoop\nscoop install gotify-server\n\n# Verify installation\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/gotify-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngotify-server version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable gotify\n\n# Start service\nsudo systemctl start gotify\n\n# Stop service\nsudo systemctl stop gotify\n\n# Restart service\nsudo systemctl restart gotify\n\n# Check status\nsudo systemctl status gotify\n\n# View logs\nsudo journalctl -u gotify -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add gotify default\n\n# Start service\nrc-service gotify start\n\n# Stop service\nrc-service gotify stop\n\n# Restart service\nrc-service gotify restart\n\n# Check status\nrc-service gotify status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;gotify_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice gotify start\n\n# Stop service\nservice gotify stop\n\n# Restart service\nservice gotify restart\n\n# Check status\nservice gotify status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start gotify-server\nbrew services stop gotify-server\nbrew services restart gotify-server\n\n# Check status\nbrew services list | grep gotify-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start gotify\n\n# Stop service\nnet stop gotify\n\n# Using PowerShell\nStart-Service gotify\nStop-Service gotify\nRestart-Service gotify\n\n# Check status\nGet-Service gotify</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gotify-server_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name gotify-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name gotify-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/gotify-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/gotify-server.example.com.key;\n\n    location / {\n        proxy_pass http://gotify-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName gotify-server.example.com\n    Redirect permanent / https://gotify-server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName gotify-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/gotify-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/gotify-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend gotify-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/gotify-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend gotify-server_backend\n\nbackend gotify-server_backend\n    balance roundrobin\n    server gotify-server1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R gotify-server:gotify-server /etc/gotify-server\nsudo chmod 750 /etc/gotify-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status gotify\n\n# View logs\nsudo journalctl -u gotify -f\n\n# Monitor resource usage\ntop -p $(pgrep gotify-server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/gotify-server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/gotify-server-backup-$DATE.tar.gz&quot; /etc/gotify-server /var/lib/gotify-server\n\necho &quot;Backup completed: $BACKUP_DIR/gotify-server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop gotify\n\n# Restore from backup\ntar -xzf /backup/gotify-server/gotify-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start gotify</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u gotify -n 100\nsudo tail -f /var/log/gotify-server/gotify-server.log\n\n# Check configuration\ngotify-server version\n\n# Check permissions\nls -la /etc/gotify-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep gotify-server)\n\n# Check disk I/O\niotop -p $(pgrep gotify-server)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  gotify-server:\n    image: gotify-server:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/gotify-server\n      - ./data:/var/lib/gotify-server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update gotify-server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade gotify-server\n\n# Arch Linux\nsudo pacman -Syu gotify-server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade gotify-server\n\n# openSUSE\nsudo zypper update gotify-server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade gotify-server\n\n# Always backup before updates\ntar -czf /backup/gotify-server-pre-update-$(date +%Y%m%d).tar.gz /etc/gotify-server\n\n# Restart after updates\nsudo systemctl restart gotify</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/gotify-server\n\n# Clean old logs\nfind /var/log/gotify-server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/gotify-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.gotify-server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/gotify-server/gotify-server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.gotify-server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.gotify-server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1174,"lastBuilt":"2025-09-16T03:17:26.810Z","metadataVersion":"2.0"},{"name":"graylog-server","displayName":"graylog Installation Guide","slug":"graylog-server","description":"graylog is a free and open-source centralized log management platform. Graylog provides log collection, processing, and analysis capabilities, serving as an open-source alternative to Splunk or Datadog","category":"miscellaneous","subcategory":"miscellaneous","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,514,9000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["miscellaneous","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/miscellaneous/graylog-server","documentationUrl":"https://howtomgr.github.io/miscellaneous/graylog-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/graylog-server","updatedAt":"2025-09-16T03:17:14Z","createdAt":"2025-09-16T03:17:14Z","readmeRaw":"# graylog Installation Guide\n\ngraylog is a free and open-source centralized log management platform. Graylog provides log collection, processing, and analysis capabilities, serving as an open-source alternative to Splunk or Datadog\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores recommended\n  - RAM: 4GB minimum (8GB+ recommended)\n  - Storage: 50GB+ for logs\n  - Network: Syslog and GELF inputs\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9000 (default graylog port)\n  - Ports 514, 12201 for log inputs\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install graylog\nsudo dnf install -y graylog-server\n\n# Enable and start service\nsudo systemctl enable --now graylog-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngraylogctl status\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install graylog\nsudo apt install -y graylog-server\n\n# Enable and start service\nsudo systemctl enable --now graylog-server\n\n# Configure firewall\nsudo ufw allow 9000\n\n# Verify installation\ngraylogctl status\n```\n\n### Arch Linux\n\n```bash\n# Install graylog\nsudo pacman -S graylog-server\n\n# Enable and start service\nsudo systemctl enable --now graylog-server\n\n# Verify installation\ngraylogctl status\n```\n\n### Alpine Linux\n\n```bash\n# Install graylog\napk add --no-cache graylog-server\n\n# Enable and start service\nrc-update add graylog-server default\nrc-service graylog-server start\n\n# Verify installation\ngraylogctl status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install graylog\nsudo zypper install -y graylog-server\n\n# Enable and start service\nsudo systemctl enable --now graylog-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngraylogctl status\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install graylog-server\n\n# Start service\nbrew services start graylog-server\n\n# Verify installation\ngraylogctl status\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install graylog-server\n\n# Enable in rc.conf\necho 'graylog-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice graylog-server start\n\n# Verify installation\ngraylogctl status\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install graylog-server\n\n# Or using Scoop\nscoop install graylog-server\n\n# Verify installation\ngraylogctl status\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/graylog-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngraylogctl status\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable graylog-server\n\n# Start service\nsudo systemctl start graylog-server\n\n# Stop service\nsudo systemctl stop graylog-server\n\n# Restart service\nsudo systemctl restart graylog-server\n\n# Check status\nsudo systemctl status graylog-server\n\n# View logs\nsudo journalctl -u graylog-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add graylog-server default\n\n# Start service\nrc-service graylog-server start\n\n# Stop service\nrc-service graylog-server stop\n\n# Restart service\nrc-service graylog-server restart\n\n# Check status\nrc-service graylog-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'graylog-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice graylog-server start\n\n# Stop service\nservice graylog-server stop\n\n# Restart service\nservice graylog-server restart\n\n# Check status\nservice graylog-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start graylog-server\nbrew services stop graylog-server\nbrew services restart graylog-server\n\n# Check status\nbrew services list | grep graylog-server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start graylog-server\n\n# Stop service\nnet stop graylog-server\n\n# Using PowerShell\nStart-Service graylog-server\nStop-Service graylog-server\nRestart-Service graylog-server\n\n# Check status\nGet-Service graylog-server\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream graylog-server_backend {\n    server 127.0.0.1:9000;\n}\n\nserver {\n    listen 80;\n    server_name graylog-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name graylog-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/graylog-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/graylog-server.example.com.key;\n\n    location / {\n        proxy_pass http://graylog-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName graylog-server.example.com\n    Redirect permanent / https://graylog-server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName graylog-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/graylog-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/graylog-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9000/\n    ProxyPassReverse / http://127.0.0.1:9000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend graylog-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/graylog-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend graylog-server_backend\n\nbackend graylog-server_backend\n    balance roundrobin\n    server graylog-server1 127.0.0.1:9000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R graylog-server:graylog-server /etc/graylog-server\nsudo chmod 750 /etc/graylog-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status graylog-server\n\n# View logs\nsudo journalctl -u graylog-server -f\n\n# Monitor resource usage\ntop -p $(pgrep graylog-server)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/graylog-server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/graylog-server-backup-$DATE.tar.gz\" /etc/graylog-server /var/lib/graylog-server\n\necho \"Backup completed: $BACKUP_DIR/graylog-server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop graylog-server\n\n# Restore from backup\ntar -xzf /backup/graylog-server/graylog-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start graylog-server\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u graylog-server -n 100\nsudo tail -f /var/log/graylog-server/graylog-server.log\n\n# Check configuration\ngraylogctl status\n\n# Check permissions\nls -la /etc/graylog-server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9000\n\n# Test connectivity\ntelnet localhost 9000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep graylog-server)\n\n# Check disk I/O\niotop -p $(pgrep graylog-server)\n\n# Check connections\nss -an | grep 9000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  graylog-server:\n    image: graylog-server:latest\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - ./config:/etc/graylog-server\n      - ./data:/var/lib/graylog-server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update graylog-server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade graylog-server\n\n# Arch Linux\nsudo pacman -Syu graylog-server\n\n# Alpine Linux\napk update && apk upgrade graylog-server\n\n# openSUSE\nsudo zypper update graylog-server\n\n# FreeBSD\npkg update && pkg upgrade graylog-server\n\n# Always backup before updates\ntar -czf /backup/graylog-server-pre-update-$(date +%Y%m%d).tar.gz /etc/graylog-server\n\n# Restart after updates\nsudo systemctl restart graylog-server\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/graylog-server\n\n# Clean old logs\nfind /var/log/graylog-server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/graylog-server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.graylog-server.org/\n- GitHub Repository: https://github.com/graylog-server/graylog-server\n- Community Forum: https://forum.graylog-server.org/\n- Best Practices Guide: https://docs.graylog-server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"graylog-installation-guide\" class=\"mobile-header\">graylog Installation Guide</h1>\n<p class=\"mobile-paragraph\">graylog is a free and open-source centralized log management platform. Graylog provides log collection, processing, and analysis capabilities, serving as an open-source alternative to Splunk or Datadog</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 50GB+ for logs</li>\n<li class=\"mobile-list-item\">Network: Syslog and GELF inputs</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9000 (default graylog port)</li>\n<li class=\"mobile-list-item\">Ports 514, 12201 for log inputs</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install graylog\nsudo dnf install -y graylog-server\n\n# Enable and start service\nsudo systemctl enable --now graylog-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install graylog\nsudo apt install -y graylog-server\n\n# Enable and start service\nsudo systemctl enable --now graylog-server\n\n# Configure firewall\nsudo ufw allow 9000\n\n# Verify installation\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install graylog\nsudo pacman -S graylog-server\n\n# Enable and start service\nsudo systemctl enable --now graylog-server\n\n# Verify installation\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install graylog\napk add --no-cache graylog-server\n\n# Enable and start service\nrc-update add graylog-server default\nrc-service graylog-server start\n\n# Verify installation\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install graylog\nsudo zypper install -y graylog-server\n\n# Enable and start service\nsudo systemctl enable --now graylog-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install graylog-server\n\n# Start service\nbrew services start graylog-server\n\n# Verify installation\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install graylog-server\n\n# Enable in rc.conf\necho &#039;graylog-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice graylog-server start\n\n# Verify installation\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install graylog-server\n\n# Or using Scoop\nscoop install graylog-server\n\n# Verify installation\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/graylog-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ngraylogctl status</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable graylog-server\n\n# Start service\nsudo systemctl start graylog-server\n\n# Stop service\nsudo systemctl stop graylog-server\n\n# Restart service\nsudo systemctl restart graylog-server\n\n# Check status\nsudo systemctl status graylog-server\n\n# View logs\nsudo journalctl -u graylog-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add graylog-server default\n\n# Start service\nrc-service graylog-server start\n\n# Stop service\nrc-service graylog-server stop\n\n# Restart service\nrc-service graylog-server restart\n\n# Check status\nrc-service graylog-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;graylog-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice graylog-server start\n\n# Stop service\nservice graylog-server stop\n\n# Restart service\nservice graylog-server restart\n\n# Check status\nservice graylog-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start graylog-server\nbrew services stop graylog-server\nbrew services restart graylog-server\n\n# Check status\nbrew services list | grep graylog-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start graylog-server\n\n# Stop service\nnet stop graylog-server\n\n# Using PowerShell\nStart-Service graylog-server\nStop-Service graylog-server\nRestart-Service graylog-server\n\n# Check status\nGet-Service graylog-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream graylog-server_backend {\n    server 127.0.0.1:9000;\n}\n\nserver {\n    listen 80;\n    server_name graylog-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name graylog-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/graylog-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/graylog-server.example.com.key;\n\n    location / {\n        proxy_pass http://graylog-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName graylog-server.example.com\n    Redirect permanent / https://graylog-server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName graylog-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/graylog-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/graylog-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9000/\n    ProxyPassReverse / http://127.0.0.1:9000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend graylog-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/graylog-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend graylog-server_backend\n\nbackend graylog-server_backend\n    balance roundrobin\n    server graylog-server1 127.0.0.1:9000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R graylog-server:graylog-server /etc/graylog-server\nsudo chmod 750 /etc/graylog-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status graylog-server\n\n# View logs\nsudo journalctl -u graylog-server -f\n\n# Monitor resource usage\ntop -p $(pgrep graylog-server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/graylog-server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/graylog-server-backup-$DATE.tar.gz&quot; /etc/graylog-server /var/lib/graylog-server\n\necho &quot;Backup completed: $BACKUP_DIR/graylog-server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop graylog-server\n\n# Restore from backup\ntar -xzf /backup/graylog-server/graylog-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start graylog-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u graylog-server -n 100\nsudo tail -f /var/log/graylog-server/graylog-server.log\n\n# Check configuration\ngraylogctl status\n\n# Check permissions\nls -la /etc/graylog-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9000\n\n# Test connectivity\ntelnet localhost 9000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep graylog-server)\n\n# Check disk I/O\niotop -p $(pgrep graylog-server)\n\n# Check connections\nss -an | grep 9000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  graylog-server:\n    image: graylog-server:latest\n    ports:\n      - &quot;9000:9000&quot;\n    volumes:\n      - ./config:/etc/graylog-server\n      - ./data:/var/lib/graylog-server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update graylog-server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade graylog-server\n\n# Arch Linux\nsudo pacman -Syu graylog-server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade graylog-server\n\n# openSUSE\nsudo zypper update graylog-server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade graylog-server\n\n# Always backup before updates\ntar -czf /backup/graylog-server-pre-update-$(date +%Y%m%d).tar.gz /etc/graylog-server\n\n# Restart after updates\nsudo systemctl restart graylog-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/graylog-server\n\n# Clean old logs\nfind /var/log/graylog-server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/graylog-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.graylog-server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/graylog-server/graylog-server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.graylog-server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.graylog-server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1174,"lastBuilt":"2025-09-16T03:17:25.153Z","metadataVersion":"2.0"}]},"__N_SSG":true}