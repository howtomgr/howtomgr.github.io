{"pageProps":{"category":{"key":"vpn","name":"Vpn","description":"Vpn tools and applications","icon":"ðŸ”§","color":"#6272a4"},"guides":[{"name":"openvpn","displayName":"openvpn Installation Guide","slug":"openvpn","description":"openvpn is a free and open-source full-featured SSL VPN solution. OpenVPN provides secure point-to-point or site-to-site connections, serving as an open-source alternative to commercial VPN solutions","category":"vpn","subcategory":"vpn","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,1194],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["vpn","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/vpn/openvpn","documentationUrl":"https://howtomgr.github.io/vpn/openvpn","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/openvpn","updatedAt":"2025-09-16T17:39:10Z","createdAt":"2025-09-08T03:12:57Z","readmeRaw":"# openvpn Installation Guide\n\nopenvpn is a free and open-source full-featured SSL VPN solution. OpenVPN provides secure point-to-point or site-to-site connections, serving as an open-source alternative to commercial VPN solutions\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for installation\n  - Network: UDP/TCP connectivity\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 1194 (default openvpn port)\n  - TCP 443 as fallback\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install openvpn\nsudo dnf install -y openvpn\n\n# Enable and start service\nsudo systemctl enable --now openvpn\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1194/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nopenvpn --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install openvpn\nsudo apt install -y openvpn\n\n# Enable and start service\nsudo systemctl enable --now openvpn\n\n# Configure firewall\nsudo ufw allow 1194\n\n# Verify installation\nopenvpn --version\n```\n\n### Arch Linux\n\n```bash\n# Install openvpn\nsudo pacman -S openvpn\n\n# Enable and start service\nsudo systemctl enable --now openvpn\n\n# Verify installation\nopenvpn --version\n```\n\n### Alpine Linux\n\n```bash\n# Install openvpn\napk add --no-cache openvpn\n\n# Enable and start service\nrc-update add openvpn default\nrc-service openvpn start\n\n# Verify installation\nopenvpn --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install openvpn\nsudo zypper install -y openvpn\n\n# Enable and start service\nsudo systemctl enable --now openvpn\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1194/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nopenvpn --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install openvpn\n\n# Start service\nbrew services start openvpn\n\n# Verify installation\nopenvpn --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install openvpn\n\n# Enable in rc.conf\necho 'openvpn_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice openvpn start\n\n# Verify installation\nopenvpn --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install openvpn\n\n# Or using Scoop\nscoop install openvpn\n\n# Verify installation\nopenvpn --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/openvpn\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nopenvpn --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable openvpn\n\n# Start service\nsudo systemctl start openvpn\n\n# Stop service\nsudo systemctl stop openvpn\n\n# Restart service\nsudo systemctl restart openvpn\n\n# Check status\nsudo systemctl status openvpn\n\n# View logs\nsudo journalctl -u openvpn -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add openvpn default\n\n# Start service\nrc-service openvpn start\n\n# Stop service\nrc-service openvpn stop\n\n# Restart service\nrc-service openvpn restart\n\n# Check status\nrc-service openvpn status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'openvpn_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice openvpn start\n\n# Stop service\nservice openvpn stop\n\n# Restart service\nservice openvpn restart\n\n# Check status\nservice openvpn status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start openvpn\nbrew services stop openvpn\nbrew services restart openvpn\n\n# Check status\nbrew services list | grep openvpn\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start openvpn\n\n# Stop service\nnet stop openvpn\n\n# Using PowerShell\nStart-Service openvpn\nStop-Service openvpn\nRestart-Service openvpn\n\n# Check status\nGet-Service openvpn\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream openvpn_backend {\n    server 127.0.0.1:1194;\n}\n\nserver {\n    listen 80;\n    server_name openvpn.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name openvpn.example.com;\n\n    ssl_certificate /etc/ssl/certs/openvpn.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/openvpn.example.com.key;\n\n    location / {\n        proxy_pass http://openvpn_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName openvpn.example.com\n    Redirect permanent / https://openvpn.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName openvpn.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/openvpn.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/openvpn.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:1194/\n    ProxyPassReverse / http://127.0.0.1:1194/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend openvpn_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/openvpn.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend openvpn_backend\n\nbackend openvpn_backend\n    balance roundrobin\n    server openvpn1 127.0.0.1:1194 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R openvpn:openvpn /etc/openvpn\nsudo chmod 750 /etc/openvpn\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1194/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status openvpn\n\n# View logs\nsudo journalctl -u openvpn -f\n\n# Monitor resource usage\ntop -p $(pgrep openvpn)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/openvpn\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/openvpn-backup-$DATE.tar.gz\" /etc/openvpn /var/lib/openvpn\n\necho \"Backup completed: $BACKUP_DIR/openvpn-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop openvpn\n\n# Restore from backup\ntar -xzf /backup/openvpn/openvpn-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start openvpn\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u openvpn -n 100\nsudo tail -f /var/log/openvpn/openvpn.log\n\n# Check configuration\nopenvpn --version\n\n# Check permissions\nls -la /etc/openvpn\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 1194\n\n# Test connectivity\ntelnet localhost 1194\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep openvpn)\n\n# Check disk I/O\niotop -p $(pgrep openvpn)\n\n# Check connections\nss -an | grep 1194\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  openvpn:\n    image: openvpn:latest\n    ports:\n      - \"1194:1194\"\n    volumes:\n      - ./config:/etc/openvpn\n      - ./data:/var/lib/openvpn\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update openvpn\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade openvpn\n\n# Arch Linux\nsudo pacman -Syu openvpn\n\n# Alpine Linux\napk update && apk upgrade openvpn\n\n# openSUSE\nsudo zypper update openvpn\n\n# FreeBSD\npkg update && pkg upgrade openvpn\n\n# Always backup before updates\ntar -czf /backup/openvpn-pre-update-$(date +%Y%m%d).tar.gz /etc/openvpn\n\n# Restart after updates\nsudo systemctl restart openvpn\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/openvpn\n\n# Clean old logs\nfind /var/log/openvpn -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/openvpn\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.openvpn.org/\n- GitHub Repository: https://github.com/openvpn/openvpn\n- Community Forum: https://forum.openvpn.org/\n- Best Practices Guide: https://docs.openvpn.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">openvpn is a free and open-source full-featured SSL VPN solution. OpenVPN provides secure point-to-point or site-to-site connections, serving as an open-source alternative to commercial VPN solutions</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: UDP/TCP connectivity</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 1194 (default openvpn port)</li>\n<li class=\"mobile-list-item\">TCP 443 as fallback</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install openvpn\nsudo dnf install -y openvpn\n\n# Enable and start service\nsudo systemctl enable --now openvpn\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1194/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install openvpn\nsudo apt install -y openvpn\n\n# Enable and start service\nsudo systemctl enable --now openvpn\n\n# Configure firewall\nsudo ufw allow 1194\n\n# Verify installation\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install openvpn\nsudo pacman -S openvpn\n\n# Enable and start service\nsudo systemctl enable --now openvpn\n\n# Verify installation\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install openvpn\napk add --no-cache openvpn\n\n# Enable and start service\nrc-update add openvpn default\nrc-service openvpn start\n\n# Verify installation\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install openvpn\nsudo zypper install -y openvpn\n\n# Enable and start service\nsudo systemctl enable --now openvpn\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1194/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install openvpn\n\n# Start service\nbrew services start openvpn\n\n# Verify installation\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install openvpn\n\n# Enable in rc.conf\necho &#039;openvpn_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice openvpn start\n\n# Verify installation\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install openvpn\n\n# Or using Scoop\nscoop install openvpn\n\n# Verify installation\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/openvpn\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nopenvpn --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable openvpn\n\n# Start service\nsudo systemctl start openvpn\n\n# Stop service\nsudo systemctl stop openvpn\n\n# Restart service\nsudo systemctl restart openvpn\n\n# Check status\nsudo systemctl status openvpn\n\n# View logs\nsudo journalctl -u openvpn -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add openvpn default\n\n# Start service\nrc-service openvpn start\n\n# Stop service\nrc-service openvpn stop\n\n# Restart service\nrc-service openvpn restart\n\n# Check status\nrc-service openvpn status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;openvpn_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice openvpn start\n\n# Stop service\nservice openvpn stop\n\n# Restart service\nservice openvpn restart\n\n# Check status\nservice openvpn status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start openvpn\nbrew services stop openvpn\nbrew services restart openvpn\n\n# Check status\nbrew services list | grep openvpn</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start openvpn\n\n# Stop service\nnet stop openvpn\n\n# Using PowerShell\nStart-Service openvpn\nStop-Service openvpn\nRestart-Service openvpn\n\n# Check status\nGet-Service openvpn</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream openvpn_backend {\n    server 127.0.0.1:1194;\n}\n\nserver {\n    listen 80;\n    server_name openvpn.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name openvpn.example.com;\n\n    ssl_certificate /etc/ssl/certs/openvpn.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/openvpn.example.com.key;\n\n    location / {\n        proxy_pass http://openvpn_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName openvpn.example.com\n    Redirect permanent / https://openvpn.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName openvpn.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/openvpn.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/openvpn.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:1194/\n    ProxyPassReverse / http://127.0.0.1:1194/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend openvpn_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/openvpn.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend openvpn_backend\n\nbackend openvpn_backend\n    balance roundrobin\n    server openvpn1 127.0.0.1:1194 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R openvpn:openvpn /etc/openvpn\nsudo chmod 750 /etc/openvpn\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=1194/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status openvpn\n\n# View logs\nsudo journalctl -u openvpn -f\n\n# Monitor resource usage\ntop -p $(pgrep openvpn)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/openvpn&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/openvpn-backup-$DATE.tar.gz&quot; /etc/openvpn /var/lib/openvpn\n\necho &quot;Backup completed: $BACKUP_DIR/openvpn-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop openvpn\n\n# Restore from backup\ntar -xzf /backup/openvpn/openvpn-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start openvpn</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u openvpn -n 100\nsudo tail -f /var/log/openvpn/openvpn.log\n\n# Check configuration\nopenvpn --version\n\n# Check permissions\nls -la /etc/openvpn</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 1194\n\n# Test connectivity\ntelnet localhost 1194\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep openvpn)\n\n# Check disk I/O\niotop -p $(pgrep openvpn)\n\n# Check connections\nss -an | grep 1194</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  openvpn:\n    image: openvpn:latest\n    ports:\n      - &quot;1194:1194&quot;\n    volumes:\n      - ./config:/etc/openvpn\n      - ./data:/var/lib/openvpn\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update openvpn\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade openvpn\n\n# Arch Linux\nsudo pacman -Syu openvpn\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade openvpn\n\n# openSUSE\nsudo zypper update openvpn\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade openvpn\n\n# Always backup before updates\ntar -czf /backup/openvpn-pre-update-$(date +%Y%m%d).tar.gz /etc/openvpn\n\n# Restart after updates\nsudo systemctl restart openvpn</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/openvpn\n\n# Clean old logs\nfind /var/log/openvpn -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/openvpn</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.openvpn.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/openvpn/openvpn</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.openvpn.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.openvpn.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1281,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-19T06:16:06.964Z","metadataVersion":"2.0"},{"name":"tailscale","displayName":"tailscale Installation Guide","slug":"tailscale","description":"tailscale is a free and open-source zero config VPN. Built on WireGuard, Tailscale provides mesh VPN that works like magic, serving as a user-friendly alternative to traditional VPNs","category":"vpn","subcategory":"vpn","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,41641],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["vpn","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/vpn/tailscale","documentationUrl":"https://howtomgr.github.io/vpn/tailscale","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/tailscale","updatedAt":"2025-09-16T17:55:51Z","createdAt":"2025-09-16T08:27:34Z","readmeRaw":"# tailscale Installation Guide\n\ntailscale is a free and open-source zero config VPN. Built on WireGuard, Tailscale provides mesh VPN that works like magic, serving as a user-friendly alternative to traditional VPNs\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for installation\n  - Network: DERP relay access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 41641 (default tailscale port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install tailscale\nsudo dnf install -y tailscale\n\n# Enable and start service\nsudo systemctl enable --now tailscaled\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=41641/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ntailscale version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install tailscale\nsudo apt install -y tailscale\n\n# Enable and start service\nsudo systemctl enable --now tailscaled\n\n# Configure firewall\nsudo ufw allow 41641\n\n# Verify installation\ntailscale version\n```\n\n### Arch Linux\n\n```bash\n# Install tailscale\nsudo pacman -S tailscale\n\n# Enable and start service\nsudo systemctl enable --now tailscaled\n\n# Verify installation\ntailscale version\n```\n\n### Alpine Linux\n\n```bash\n# Install tailscale\napk add --no-cache tailscale\n\n# Enable and start service\nrc-update add tailscaled default\nrc-service tailscaled start\n\n# Verify installation\ntailscale version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install tailscale\nsudo zypper install -y tailscale\n\n# Enable and start service\nsudo systemctl enable --now tailscaled\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=41641/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ntailscale version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install tailscale\n\n# Start service\nbrew services start tailscale\n\n# Verify installation\ntailscale version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install tailscale\n\n# Enable in rc.conf\necho 'tailscaled_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice tailscaled start\n\n# Verify installation\ntailscale version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install tailscale\n\n# Or using Scoop\nscoop install tailscale\n\n# Verify installation\ntailscale version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/tailscale\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ntailscale version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable tailscaled\n\n# Start service\nsudo systemctl start tailscaled\n\n# Stop service\nsudo systemctl stop tailscaled\n\n# Restart service\nsudo systemctl restart tailscaled\n\n# Check status\nsudo systemctl status tailscaled\n\n# View logs\nsudo journalctl -u tailscaled -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add tailscaled default\n\n# Start service\nrc-service tailscaled start\n\n# Stop service\nrc-service tailscaled stop\n\n# Restart service\nrc-service tailscaled restart\n\n# Check status\nrc-service tailscaled status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'tailscaled_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice tailscaled start\n\n# Stop service\nservice tailscaled stop\n\n# Restart service\nservice tailscaled restart\n\n# Check status\nservice tailscaled status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start tailscale\nbrew services stop tailscale\nbrew services restart tailscale\n\n# Check status\nbrew services list | grep tailscale\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start tailscaled\n\n# Stop service\nnet stop tailscaled\n\n# Using PowerShell\nStart-Service tailscaled\nStop-Service tailscaled\nRestart-Service tailscaled\n\n# Check status\nGet-Service tailscaled\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream tailscale_backend {\n    server 127.0.0.1:41641;\n}\n\nserver {\n    listen 80;\n    server_name tailscale.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name tailscale.example.com;\n\n    ssl_certificate /etc/ssl/certs/tailscale.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/tailscale.example.com.key;\n\n    location / {\n        proxy_pass http://tailscale_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName tailscale.example.com\n    Redirect permanent / https://tailscale.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName tailscale.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/tailscale.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/tailscale.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:41641/\n    ProxyPassReverse / http://127.0.0.1:41641/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend tailscale_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/tailscale.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend tailscale_backend\n\nbackend tailscale_backend\n    balance roundrobin\n    server tailscale1 127.0.0.1:41641 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R tailscale:tailscale /etc/tailscale\nsudo chmod 750 /etc/tailscale\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=41641/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status tailscaled\n\n# View logs\nsudo journalctl -u tailscaled -f\n\n# Monitor resource usage\ntop -p $(pgrep tailscale)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/tailscale\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/tailscale-backup-$DATE.tar.gz\" /etc/tailscale /var/lib/tailscale\n\necho \"Backup completed: $BACKUP_DIR/tailscale-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop tailscaled\n\n# Restore from backup\ntar -xzf /backup/tailscale/tailscale-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start tailscaled\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u tailscaled -n 100\nsudo tail -f /var/log/tailscale/tailscale.log\n\n# Check configuration\ntailscale version\n\n# Check permissions\nls -la /etc/tailscale\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 41641\n\n# Test connectivity\ntelnet localhost 41641\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep tailscale)\n\n# Check disk I/O\niotop -p $(pgrep tailscale)\n\n# Check connections\nss -an | grep 41641\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  tailscale:\n    image: tailscale:latest\n    ports:\n      - \"41641:41641\"\n    volumes:\n      - ./config:/etc/tailscale\n      - ./data:/var/lib/tailscale\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update tailscale\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade tailscale\n\n# Arch Linux\nsudo pacman -Syu tailscale\n\n# Alpine Linux\napk update && apk upgrade tailscale\n\n# openSUSE\nsudo zypper update tailscale\n\n# FreeBSD\npkg update && pkg upgrade tailscale\n\n# Always backup before updates\ntar -czf /backup/tailscale-pre-update-$(date +%Y%m%d).tar.gz /etc/tailscale\n\n# Restart after updates\nsudo systemctl restart tailscaled\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/tailscale\n\n# Clean old logs\nfind /var/log/tailscale -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/tailscale\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.tailscale.org/\n- GitHub Repository: https://github.com/tailscale/tailscale\n- Community Forum: https://forum.tailscale.org/\n- Best Practices Guide: https://docs.tailscale.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">tailscale is a free and open-source zero config VPN. Built on WireGuard, Tailscale provides mesh VPN that works like magic, serving as a user-friendly alternative to traditional VPNs</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: DERP relay access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 41641 (default tailscale port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install tailscale\nsudo dnf install -y tailscale\n\n# Enable and start service\nsudo systemctl enable --now tailscaled\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=41641/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ntailscale version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install tailscale\nsudo apt install -y tailscale\n\n# Enable and start service\nsudo systemctl enable --now tailscaled\n\n# Configure firewall\nsudo ufw allow 41641\n\n# Verify installation\ntailscale version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install tailscale\nsudo pacman -S tailscale\n\n# Enable and start service\nsudo systemctl enable --now tailscaled\n\n# Verify installation\ntailscale version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install tailscale\napk add --no-cache tailscale\n\n# Enable and start service\nrc-update add tailscaled default\nrc-service tailscaled start\n\n# Verify installation\ntailscale version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install tailscale\nsudo zypper install -y tailscale\n\n# Enable and start service\nsudo systemctl enable --now tailscaled\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=41641/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ntailscale version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install tailscale\n\n# Start service\nbrew services start tailscale\n\n# Verify installation\ntailscale version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install tailscale\n\n# Enable in rc.conf\necho &#039;tailscaled_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice tailscaled start\n\n# Verify installation\ntailscale version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install tailscale\n\n# Or using Scoop\nscoop install tailscale\n\n# Verify installation\ntailscale version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/tailscale\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ntailscale version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable tailscaled\n\n# Start service\nsudo systemctl start tailscaled\n\n# Stop service\nsudo systemctl stop tailscaled\n\n# Restart service\nsudo systemctl restart tailscaled\n\n# Check status\nsudo systemctl status tailscaled\n\n# View logs\nsudo journalctl -u tailscaled -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add tailscaled default\n\n# Start service\nrc-service tailscaled start\n\n# Stop service\nrc-service tailscaled stop\n\n# Restart service\nrc-service tailscaled restart\n\n# Check status\nrc-service tailscaled status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;tailscaled_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice tailscaled start\n\n# Stop service\nservice tailscaled stop\n\n# Restart service\nservice tailscaled restart\n\n# Check status\nservice tailscaled status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start tailscale\nbrew services stop tailscale\nbrew services restart tailscale\n\n# Check status\nbrew services list | grep tailscale</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start tailscaled\n\n# Stop service\nnet stop tailscaled\n\n# Using PowerShell\nStart-Service tailscaled\nStop-Service tailscaled\nRestart-Service tailscaled\n\n# Check status\nGet-Service tailscaled</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream tailscale_backend {\n    server 127.0.0.1:41641;\n}\n\nserver {\n    listen 80;\n    server_name tailscale.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name tailscale.example.com;\n\n    ssl_certificate /etc/ssl/certs/tailscale.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/tailscale.example.com.key;\n\n    location / {\n        proxy_pass http://tailscale_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName tailscale.example.com\n    Redirect permanent / https://tailscale.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName tailscale.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/tailscale.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/tailscale.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:41641/\n    ProxyPassReverse / http://127.0.0.1:41641/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend tailscale_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/tailscale.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend tailscale_backend\n\nbackend tailscale_backend\n    balance roundrobin\n    server tailscale1 127.0.0.1:41641 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R tailscale:tailscale /etc/tailscale\nsudo chmod 750 /etc/tailscale\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=41641/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status tailscaled\n\n# View logs\nsudo journalctl -u tailscaled -f\n\n# Monitor resource usage\ntop -p $(pgrep tailscale)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/tailscale&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/tailscale-backup-$DATE.tar.gz&quot; /etc/tailscale /var/lib/tailscale\n\necho &quot;Backup completed: $BACKUP_DIR/tailscale-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop tailscaled\n\n# Restore from backup\ntar -xzf /backup/tailscale/tailscale-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start tailscaled</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u tailscaled -n 100\nsudo tail -f /var/log/tailscale/tailscale.log\n\n# Check configuration\ntailscale version\n\n# Check permissions\nls -la /etc/tailscale</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 41641\n\n# Test connectivity\ntelnet localhost 41641\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep tailscale)\n\n# Check disk I/O\niotop -p $(pgrep tailscale)\n\n# Check connections\nss -an | grep 41641</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  tailscale:\n    image: tailscale:latest\n    ports:\n      - &quot;41641:41641&quot;\n    volumes:\n      - ./config:/etc/tailscale\n      - ./data:/var/lib/tailscale\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update tailscale\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade tailscale\n\n# Arch Linux\nsudo pacman -Syu tailscale\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade tailscale\n\n# openSUSE\nsudo zypper update tailscale\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade tailscale\n\n# Always backup before updates\ntar -czf /backup/tailscale-pre-update-$(date +%Y%m%d).tar.gz /etc/tailscale\n\n# Restart after updates\nsudo systemctl restart tailscaled</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/tailscale\n\n# Clean old logs\nfind /var/log/tailscale -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/tailscale</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.tailscale.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/tailscale/tailscale</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.tailscale.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.tailscale.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1281,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-19T06:15:01.748Z","metadataVersion":"2.0"},{"name":"wireguard","displayName":"WireGuard Installation Guide","slug":"wireguard","description":"WireGuard is a free and open-source VPN protocol and software implementation that aims to be simpler, faster, and more secure than existing VPN protocols. Originally developed by Jason A. Donenfeld, WireGuard provides state-of-the-art cryptography and minimal attack surface. It serves as a modern FOSS alternative to proprietary VPN solutions like Cisco AnyConnect, Palo Alto GlobalProtect, or commercial VPN services, offering enterprise-grade security with significantly better performance and a fraction of the codebase.","category":"vpn","subcategory":"vpn","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[0,1,2,443,51820,51821],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["vpn","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/vpn/wireguard","documentationUrl":"https://howtomgr.github.io/vpn/wireguard","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wireguard","updatedAt":"2025-09-16T18:03:02Z","createdAt":"2025-09-08T03:18:17Z","readmeRaw":"# WireGuard Installation Guide\n\nWireGuard is a free and open-source VPN protocol and software implementation that aims to be simpler, faster, and more secure than existing VPN protocols. Originally developed by Jason A. Donenfeld, WireGuard provides state-of-the-art cryptography and minimal attack surface. It serves as a modern FOSS alternative to proprietary VPN solutions like Cisco AnyConnect, Palo Alto GlobalProtect, or commercial VPN services, offering enterprise-grade security with significantly better performance and a fraction of the codebase.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for high throughput)\n  - RAM: 256MB minimum (512MB+ recommended)\n  - Storage: 100MB for installation\n  - Network: Stable internet connectivity\n- **Operating System**: \n  - Linux: Kernel 5.6+ (or with WireGuard module backported)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows 10 version 1809+ or Windows Server 2019+\n  - FreeBSD: 12.1+\n- **Network Requirements**:\n  - UDP port 51820 (default, configurable)\n  - Public IP address or DDNS for server\n  - NAT traversal capability\n- **Dependencies**:\n  - Linux kernel headers (for module compilation if needed)\n  - iproute2 or ifconfig\n  - iptables or nftables for NAT\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# For RHEL/CentOS 8+, Rocky Linux, AlmaLinux\nsudo dnf install -y epel-release elrepo-release\nsudo dnf install -y kmod-wireguard wireguard-tools\n\n# For CentOS 7\nsudo yum install -y epel-release\nsudo yum install -y yum-plugin-elrepo\nsudo yum install -y kmod-wireguard wireguard-tools\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Verify installation\nwg --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install WireGuard\nsudo apt install -y wireguard wireguard-tools\n\n# For older Ubuntu versions (< 20.04)\nsudo add-apt-repository ppa:wireguard/wireguard\nsudo apt update\nsudo apt install -y wireguard wireguard-tools\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Verify installation\nwg --version\n```\n\n### Arch Linux\n\n```bash\n# Install WireGuard\nsudo pacman -S wireguard-tools\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.d/30-ipforward.conf\necho 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.d/30-ipforward.conf\nsudo sysctl --system\n\n# Verify installation\nwg --version\n```\n\n### Alpine Linux\n\n```bash\n# Install WireGuard\napk add --no-cache wireguard-tools\n\n# Load kernel module\nmodprobe wireguard\n\n# Make module load persistent\necho \"wireguard\" >> /etc/modules\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf\necho 'net.ipv6.conf.all.forwarding = 1' >> /etc/sysctl.conf\nsysctl -p\n\n# Verify installation\nwg --version\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y wireguard-tools\n\n# SLES 15\nsudo SUSEConnect -p sle-module-basesystem/15.5/x86_64\nsudo zypper install -y wireguard-tools\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Verify installation\nwg --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install wireguard-tools\n\n# Or download the official macOS app from App Store\n# Search for \"WireGuard\" by WireGuard Development Team\n\n# For command-line usage\nbrew install wireguard-go\n\n# Verify installation\nwg --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install wireguard wireguard-tools\n\n# Load kernel module\nkldload if_wg\n\n# Make module load persistent\necho 'if_wg_load=\"YES\"' >> /etc/rc.conf\n\n# Enable IP forwarding\necho 'gateway_enable=\"YES\"' >> /etc/rc.conf\necho 'ipv6_gateway_enable=\"YES\"' >> /etc/rc.conf\n\n# Apply sysctl settings\nsysctl net.inet.ip.forwarding=1\nsysctl net.inet6.ip6.forwarding=1\n\n# Verify installation\nwg --version\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install wireguard\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install wireguard\n\n# Method 3: Download installer\n# Download from https://www.wireguard.com/install/\n# Run the MSI installer\n\n# Enable IP forwarding (PowerShell as Administrator)\nSet-NetIPInterface -Forwarding Enabled\n\n# Verify installation (in Command Prompt)\n\"C:\\Program Files\\WireGuard\\wg.exe\" --version\n```\n\n## Initial Configuration\n\n### Generate Keys\n\n```bash\n# Create directory for WireGuard configuration\nsudo mkdir -p /etc/wireguard\nsudo chmod 700 /etc/wireguard\ncd /etc/wireguard\n\n# Generate server private key\nwg genkey | sudo tee server_private.key | wg pubkey | sudo tee server_public.key\nsudo chmod 600 server_private.key\n\n# Generate client private key\nwg genkey | sudo tee client_private.key | wg pubkey | sudo tee client_public.key\nsudo chmod 600 client_private.key\n```\n\n### Server Configuration\n\n```bash\n# Create server configuration\nsudo tee /etc/wireguard/wg0.conf <<EOF\n[Interface]\nAddress = 10.0.0.1/24, fd00:0:0:1::1/64\nListenPort = 51820\nPrivateKey = $(cat server_private.key)\nPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -A FORWARD -o wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -D FORWARD -o wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Client peer\n[Peer]\nPublicKey = $(cat client_public.key)\nAllowedIPs = 10.0.0.2/32, fd00:0:0:1::2/128\nEOF\n\nsudo chmod 600 /etc/wireguard/wg0.conf\n```\n\n### Client Configuration\n\n```bash\n# Create client configuration\nsudo tee /etc/wireguard/client.conf <<EOF\n[Interface]\nAddress = 10.0.0.2/24, fd00:0:0:1::2/64\nPrivateKey = $(cat client_private.key)\nDNS = 1.1.1.1, 1.0.0.1\n\n[Peer]\nPublicKey = $(cat server_public.key)\nEndpoint = YOUR_SERVER_IP:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nEOF\n\nsudo chmod 600 /etc/wireguard/client.conf\n```\n\n### Start WireGuard\n\n```bash\n# Start WireGuard interface\nsudo wg-quick up wg0\n\n# Enable at boot\nsudo systemctl enable wg-quick@wg0\n\n# Check status\nsudo wg show\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable WireGuard service\nsudo systemctl enable wg-quick@wg0\n\n# Start WireGuard\nsudo systemctl start wg-quick@wg0\n\n# Stop WireGuard\nsudo systemctl stop wg-quick@wg0\n\n# Restart WireGuard\nsudo systemctl restart wg-quick@wg0\n\n# Check status\nsudo systemctl status wg-quick@wg0\n\n# View logs\nsudo journalctl -u wg-quick@wg0 -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Create OpenRC service\nsudo tee /etc/init.d/wireguard <<'EOF'\n#!/sbin/openrc-run\nname=\"WireGuard VPN\"\ndescription=\"WireGuard VPN tunnel\"\n\ndepend() {\n    need net\n    after firewall\n}\n\nstart() {\n    ebegin \"Starting WireGuard\"\n    wg-quick up wg0\n    eend $?\n}\n\nstop() {\n    ebegin \"Stopping WireGuard\"\n    wg-quick down wg0\n    eend $?\n}\nEOF\n\nsudo chmod +x /etc/init.d/wireguard\n\n# Enable and start\nrc-update add wireguard default\nrc-service wireguard start\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Create rc.d script\nsudo tee /usr/local/etc/rc.d/wireguard <<'EOF'\n#!/bin/sh\n\n# PROVIDE: wireguard\n# REQUIRE: NETWORKING\n# KEYWORD: shutdown\n\n. /etc/rc.subr\n\nname=\"wireguard\"\nrcvar=\"wireguard_enable\"\n\nstart_cmd=\"wireguard_start\"\nstop_cmd=\"wireguard_stop\"\n\nwireguard_start() {\n    /usr/local/bin/wg-quick up wg0\n}\n\nwireguard_stop() {\n    /usr/local/bin/wg-quick down wg0\n}\n\nload_rc_config $name\nrun_rc_command \"$1\"\nEOF\n\nsudo chmod +x /usr/local/etc/rc.d/wireguard\n\n# Enable in rc.conf\necho 'wireguard_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wireguard start\n```\n\n### Windows Service\n\n```powershell\n# Install WireGuard service\n& \"C:\\Program Files\\WireGuard\\wireguard.exe\" /installtunnelservice \"C:\\Path\\To\\wg0.conf\"\n\n# Start service\nStart-Service WireGuardTunnel$wg0\n\n# Stop service\nStop-Service WireGuardTunnel$wg0\n\n# Check status\nGet-Service WireGuardTunnel$wg0\n```\n\n## Advanced Configuration\n\n### Multi-Site VPN Setup\n\n```bash\n# Site A configuration (10.1.0.0/24)\ncat > /etc/wireguard/site-a.conf <<EOF\n[Interface]\nAddress = 10.100.0.1/24\nListenPort = 51820\nPrivateKey = SITE_A_PRIVATE_KEY\n\n# Site B\n[Peer]\nPublicKey = SITE_B_PUBLIC_KEY\nEndpoint = site-b.example.com:51820\nAllowedIPs = 10.2.0.0/24, 10.100.0.2/32\nPersistentKeepalive = 25\n\n# Site C\n[Peer]\nPublicKey = SITE_C_PUBLIC_KEY\nEndpoint = site-c.example.com:51820\nAllowedIPs = 10.3.0.0/24, 10.100.0.3/32\nPersistentKeepalive = 25\nEOF\n```\n\n### Road Warrior Configuration\n\n```bash\n# Server configuration for mobile clients\ncat > /etc/wireguard/mobile.conf <<EOF\n[Interface]\nAddress = 10.200.0.1/24\nListenPort = 51821\nPrivateKey = MOBILE_SERVER_PRIVATE_KEY\n\n# Mobile client 1\n[Peer]\nPublicKey = MOBILE_CLIENT_1_PUBLIC_KEY\nAllowedIPs = 10.200.0.10/32\nPresharedKey = PRESHARED_KEY_FOR_EXTRA_SECURITY\n\n# Mobile client 2\n[Peer]\nPublicKey = MOBILE_CLIENT_2_PUBLIC_KEY\nAllowedIPs = 10.200.0.11/32\nPresharedKey = ANOTHER_PRESHARED_KEY\nEOF\n```\n\n### Split Tunnel Configuration\n\n```bash\n# Client configuration for split tunneling\ncat > /etc/wireguard/split-tunnel.conf <<EOF\n[Interface]\nAddress = 10.0.0.100/24\nPrivateKey = CLIENT_PRIVATE_KEY\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = SERVER_PUBLIC_KEY\nEndpoint = vpn.example.com:51820\n# Only route specific subnets through VPN\nAllowedIPs = 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16\nPersistentKeepalive = 25\nEOF\n```\n\n## Reverse Proxy Setup\n\n### nginx TCP/UDP Proxy\n\n```nginx\n# /etc/nginx/nginx.conf\nstream {\n    upstream wireguard {\n        server 127.0.0.1:51820;\n    }\n    \n    server {\n        listen 443 udp;\n        proxy_pass wireguard;\n        proxy_timeout 1s;\n        proxy_responses 1;\n        proxy_bind $remote_addr transparent;\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n\ndefaults\n    mode tcp\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend wireguard_frontend\n    bind *:51820\n    mode udp\n    default_backend wireguard_backend\n\nbackend wireguard_backend\n    mode udp\n    server wireguard1 127.0.0.1:51821\n```\n\n### iptables Port Forwarding\n\n```bash\n# Forward external port to WireGuard\niptables -t nat -A PREROUTING -i eth0 -p udp --dport 443 -j REDIRECT --to-port 51820\n\n# Save rules\niptables-save > /etc/iptables/rules.v4\n```\n\n## Security Configuration\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 51820/udp\nsudo ufw allow from 10.0.0.0/24 to any\nsudo ufw reload\n\n# firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=51820/udp\nsudo firewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"10.0.0.0/24\" accept'\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p udp --dport 51820 -j ACCEPT\nsudo iptables -A INPUT -i wg0 -j ACCEPT\nsudo iptables -A FORWARD -i wg0 -o eth0 -j ACCEPT\nsudo iptables -A FORWARD -i eth0 -o wg0 -m state --state RELATED,ESTABLISHED -j ACCEPT\n```\n\n### Key Management\n\n```bash\n#!/bin/bash\n# key-rotation.sh - Rotate WireGuard keys\n\n# Generate new keys\nNEW_PRIVATE=$(wg genkey)\nNEW_PUBLIC=$(echo \"$NEW_PRIVATE\" | wg pubkey)\n\n# Backup old configuration\ncp /etc/wireguard/wg0.conf /etc/wireguard/wg0.conf.bak\n\n# Update configuration\nsed -i \"s|PrivateKey = .*|PrivateKey = $NEW_PRIVATE|\" /etc/wireguard/wg0.conf\n\n# Restart WireGuard\nsystemctl restart wg-quick@wg0\n\necho \"New public key: $NEW_PUBLIC\"\necho \"Update this key on all peers\"\n```\n\n### Security Hardening\n\n```bash\n# Limit connection rate\niptables -A INPUT -p udp --dport 51820 -m state --state NEW -m recent --set\niptables -A INPUT -p udp --dport 51820 -m state --state NEW -m recent --update --seconds 60 --hitcount 4 -j DROP\n\n# Enable strict RPF\necho 1 > /proc/sys/net/ipv4/conf/all/rp_filter\n\n# Disable ICMP redirects\necho 0 > /proc/sys/net/ipv4/conf/all/accept_redirects\necho 0 > /proc/sys/net/ipv6/conf/all/accept_redirects\n\n# Set up fail2ban for WireGuard\ncat > /etc/fail2ban/filter.d/wireguard.conf <<EOF\n[Definition]\nfailregex = <HOST>.*Handshake for peer [0-9]+ \\(.*\\) did not complete after\nignoreregex =\nEOF\n\ncat > /etc/fail2ban/jail.d/wireguard.conf <<EOF\n[wireguard]\nenabled = true\nfilter = wireguard\nlogpath = /var/log/messages\nmaxretry = 5\nbantime = 3600\nfindtime = 600\nEOF\n```\n\n## Database Setup\n\nNot applicable for WireGuard as it doesn't use a database. Configuration is stored in flat files.\n\n## Performance Optimization\n\n### Kernel Tuning\n\n```bash\n# /etc/sysctl.d/99-wireguard.conf\n# Network buffer sizes\nnet.core.rmem_max = 134217728\nnet.core.wmem_max = 134217728\nnet.core.rmem_default = 16777216\nnet.core.wmem_default = 16777216\nnet.core.optmem_max = 16777216\n\n# Increase netdev budget\nnet.core.netdev_budget = 600\nnet.core.netdev_max_backlog = 5000\n\n# UDP specific tuning\nnet.ipv4.udp_rmem_min = 8192\nnet.ipv4.udp_wmem_min = 8192\n\n# Connection tracking\nnet.netfilter.nf_conntrack_max = 1048576\nnet.netfilter.nf_conntrack_udp_timeout = 60\nnet.netfilter.nf_conntrack_udp_timeout_stream = 180\n\n# Apply settings\nsysctl -p /etc/sysctl.d/99-wireguard.conf\n```\n\n### MTU Optimization\n\n```bash\n# Find optimal MTU\nping -M do -s 1472 -c 1 remote_host\n\n# Set MTU in WireGuard config\n[Interface]\nMTU = 1420  # Default is 1420, adjust based on your network\n```\n\n### CPU Affinity\n\n```bash\n# Set CPU affinity for WireGuard\n# Find WireGuard process\nps aux | grep wireguard\n\n# Set affinity to specific CPU cores\ntaskset -cp 0,1 $(pgrep wireguard)\n\n# Make persistent with systemd\nmkdir -p /etc/systemd/system/wg-quick@wg0.service.d\ncat > /etc/systemd/system/wg-quick@wg0.service.d/override.conf <<EOF\n[Service]\nCPUAffinity=0 1\nEOF\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n#!/bin/bash\n# wireguard-monitor.sh\n\nwhile true; do\n    clear\n    echo \"WireGuard Status - $(date)\"\n    echo \"=========================\"\n    \n    # Show interface status\n    wg show\n    \n    # Show transfer statistics\n    echo -e \"\\nTransfer Statistics:\"\n    wg show wg0 transfer\n    \n    # Show connected peers\n    echo -e \"\\nConnected Peers:\"\n    wg show wg0 peers\n    \n    # Show system resources\n    echo -e \"\\nSystem Resources:\"\n    echo \"CPU: $(top -bn1 | grep \"Cpu(s)\" | awk '{print $2 + $4\"%\"}')\"\n    echo \"Memory: $(free -m | awk 'NR==2{printf \"%.2f%%\", $3*100/$2}')\"\n    echo \"Network: $(ip -s link show wg0 | grep -A1 \"RX:\" | tail -1 | awk '{print \"RX: \"$1\" bytes\"}'), $(ip -s link show wg0 | grep -A1 \"TX:\" | tail -1 | awk '{print \"TX: \"$1\" bytes\"}')\"\n    \n    sleep 5\ndone\n```\n\n### Prometheus Exporter\n\n```bash\n# Install WireGuard exporter\ngo get -u github.com/MindFlavor/prometheus_wireguard_exporter\n\n# Configure exporter\ncat > /etc/systemd/system/wireguard-exporter.service <<EOF\n[Unit]\nDescription=WireGuard Prometheus Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/prometheus_wireguard_exporter -n /etc/wireguard/wg0.conf\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl enable --now wireguard-exporter\n```\n\n### Logging\n\n```bash\n# Enable verbose logging\necho \"debug\" > /sys/module/wireguard/parameters/debug\n\n# Configure rsyslog for WireGuard\ncat > /etc/rsyslog.d/49-wireguard.conf <<EOF\n:msg, contains, \"wireguard\" /var/log/wireguard.log\n& stop\nEOF\n\nsystemctl restart rsyslog\n\n# Log rotation\ncat > /etc/logrotate.d/wireguard <<EOF\n/var/log/wireguard.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 root adm\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# wireguard-backup.sh\n\nBACKUP_DIR=\"/backup/wireguard\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/wireguard_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Create backup\ntar -czf \"$BACKUP_FILE\" \\\n    /etc/wireguard/ \\\n    /etc/systemd/system/wg-quick@*.service.d/ \\\n    /etc/sysctl.d/*wireguard* \\\n    2>/dev/null\n\n# Encrypt backup\ngpg --cipher-algo AES256 --symmetric \"$BACKUP_FILE\"\nrm \"$BACKUP_FILE\"\n\necho \"Backup created: $BACKUP_FILE.gpg\"\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"wireguard_backup_*.gpg\" -mtime +30 -delete\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# wireguard-restore.sh\n\nBACKUP_FILE=\"$1\"\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.gpg>\"\n    exit 1\nfi\n\n# Decrypt backup\ngpg --decrypt \"$BACKUP_FILE\" > /tmp/wireguard_restore.tar.gz\n\n# Stop WireGuard\nsystemctl stop wg-quick@wg0\n\n# Extract backup\ntar -xzf /tmp/wireguard_restore.tar.gz -C /\n\n# Set correct permissions\nchmod 600 /etc/wireguard/*.conf\nchmod 600 /etc/wireguard/*_private.key\n\n# Restart WireGuard\nsystemctl start wg-quick@wg0\n\n# Clean up\nrm /tmp/wireguard_restore.tar.gz\n\necho \"Restore completed\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Connection not establishing**:\n```bash\n# Check if WireGuard module is loaded\nlsmod | grep wireguard\n\n# Load module manually\nmodprobe wireguard\n\n# Check interface\nip link show wg0\n\n# Check routing\nip route show table all | grep wg0\n\n# Test connectivity\nping -c 4 10.0.0.1\n```\n\n2. **Performance issues**:\n```bash\n# Check for packet loss\nmtr -n 10.0.0.1\n\n# Check interface statistics\nip -s link show wg0\n\n# Monitor CPU usage\ntop -p $(pgrep wireguard)\n\n# Check for errors\ndmesg | grep wireguard\n```\n\n3. **Key exchange problems**:\n```bash\n# Verify keys match\nwg show wg0 public-key\nwg show wg0 peers\n\n# Check handshake status\nwg show wg0 latest-handshakes\n\n# Force re-handshake\nwg set wg0 peer PEER_PUBLIC_KEY endpoint ENDPOINT:PORT\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho module wireguard +p > /sys/kernel/debug/dynamic_debug/control\n\n# View debug logs\ndmesg -w | grep wireguard\n\n# Disable debug logging\necho module wireguard -p > /sys/kernel/debug/dynamic_debug/control\n```\n\n## Integration Examples\n\n### Python Integration\n\n```python\n#!/usr/bin/env python3\n# wireguard_manager.py\n\nimport subprocess\nimport json\nimport ipaddress\n\nclass WireGuardManager:\n    def __init__(self, interface='wg0'):\n        self.interface = interface\n    \n    def get_status(self):\n        \"\"\"Get WireGuard interface status\"\"\"\n        try:\n            result = subprocess.run(['wg', 'show', self.interface, 'dump'], \n                                  capture_output=True, text=True, check=True)\n            lines = result.stdout.strip().split('\\n')\n            \n            # Parse interface info\n            interface_data = lines[0].split('\\t')\n            status = {\n                'interface': self.interface,\n                'private_key': interface_data[0],\n                'public_key': interface_data[1],\n                'listen_port': interface_data[2],\n                'fwmark': interface_data[3],\n                'peers': []\n            }\n            \n            # Parse peer info\n            for line in lines[1:]:\n                peer_data = line.split('\\t')\n                peer = {\n                    'public_key': peer_data[0],\n                    'preshared_key': peer_data[1],\n                    'endpoint': peer_data[2],\n                    'allowed_ips': peer_data[3].split(','),\n                    'latest_handshake': peer_data[4],\n                    'rx_bytes': int(peer_data[5]),\n                    'tx_bytes': int(peer_data[6]),\n                    'persistent_keepalive': peer_data[7]\n                }\n                status['peers'].append(peer)\n            \n            return status\n        except subprocess.CalledProcessError as e:\n            return {'error': str(e)}\n    \n    def add_peer(self, public_key, allowed_ips, endpoint=None, preshared_key=None):\n        \"\"\"Add a new peer\"\"\"\n        cmd = ['wg', 'set', self.interface, 'peer', public_key]\n        \n        if allowed_ips:\n            cmd.extend(['allowed-ips', ','.join(allowed_ips)])\n        \n        if endpoint:\n            cmd.extend(['endpoint', endpoint])\n        \n        if preshared_key:\n            cmd.extend(['preshared-key', preshared_key])\n        \n        try:\n            subprocess.run(cmd, check=True)\n            return {'success': True}\n        except subprocess.CalledProcessError as e:\n            return {'error': str(e)}\n    \n    def remove_peer(self, public_key):\n        \"\"\"Remove a peer\"\"\"\n        try:\n            subprocess.run(['wg', 'set', self.interface, 'peer', public_key, 'remove'], \n                         check=True)\n            return {'success': True}\n        except subprocess.CalledProcessError as e:\n            return {'error': str(e)}\n    \n    def generate_config(self, address, private_key, peers):\n        \"\"\"Generate WireGuard configuration\"\"\"\n        config = f\"\"\"[Interface]\nAddress = {address}\nPrivateKey = {private_key}\nListenPort = 51820\n\n\"\"\"\n        for peer in peers:\n            config += f\"\"\"[Peer]\nPublicKey = {peer['public_key']}\nAllowedIPs = {','.join(peer['allowed_ips'])}\n\"\"\"\n            if peer.get('endpoint'):\n                config += f\"Endpoint = {peer['endpoint']}\\n\"\n            if peer.get('preshared_key'):\n                config += f\"PresharedKey = {peer['preshared_key']}\\n\"\n            if peer.get('persistent_keepalive'):\n                config += f\"PersistentKeepalive = {peer['persistent_keepalive']}\\n\"\n            config += \"\\n\"\n        \n        return config\n\n# Example usage\nif __name__ == '__main__':\n    wg = WireGuardManager()\n    \n    # Get status\n    status = wg.get_status()\n    print(json.dumps(status, indent=2))\n    \n    # Add a peer\n    result = wg.add_peer(\n        public_key='PEER_PUBLIC_KEY',\n        allowed_ips=['10.0.0.100/32'],\n        endpoint='peer.example.com:51820'\n    )\n    print(f\"Add peer result: {result}\")\n```\n\n### Bash Integration\n\n```bash\n#!/bin/bash\n# wireguard-cli.sh - WireGuard management CLI\n\nset -euo pipefail\n\nINTERFACE=\"${WG_INTERFACE:-wg0}\"\nCONFIG_DIR=\"/etc/wireguard\"\n\nshow_help() {\n    cat <<EOF\nWireGuard CLI Management Tool\n\nUsage: $0 [command] [options]\n\nCommands:\n    status          Show interface status\n    add-peer        Add a new peer\n    remove-peer     Remove a peer\n    list-peers      List all peers\n    generate-qr     Generate QR code for mobile config\n    backup          Backup configuration\n    restore         Restore configuration\n\nExamples:\n    $0 status\n    $0 add-peer --name mobile1 --ip 10.0.0.10\n    $0 generate-qr mobile1\nEOF\n}\n\nstatus() {\n    echo \"WireGuard Interface: $INTERFACE\"\n    echo \"=========================\"\n    wg show \"$INTERFACE\"\n}\n\nadd_peer() {\n    local name=\"$1\"\n    local ip=\"$2\"\n    \n    # Generate keys\n    private_key=$(wg genkey)\n    public_key=$(echo \"$private_key\" | wg pubkey)\n    preshared_key=$(wg genpsk)\n    \n    # Add to server config\n    cat >> \"$CONFIG_DIR/$INTERFACE.conf\" <<EOF\n\n[Peer]\n# $name\nPublicKey = $public_key\nPresharedKey = $preshared_key\nAllowedIPs = $ip/32\nEOF\n\n    # Generate client config\n    server_public_key=$(wg show \"$INTERFACE\" public-key)\n    server_endpoint=$(curl -s ifconfig.me)\n    \n    cat > \"$CONFIG_DIR/clients/$name.conf\" <<EOF\n[Interface]\nAddress = $ip/24\nPrivateKey = $private_key\nDNS = 1.1.1.1, 1.0.0.1\n\n[Peer]\nPublicKey = $server_public_key\nPresharedKey = $preshared_key\nEndpoint = $server_endpoint:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nEOF\n\n    # Reload configuration\n    wg syncconf \"$INTERFACE\" <(wg-quick strip \"$INTERFACE\")\n    \n    echo \"Peer $name added successfully\"\n    echo \"Client configuration saved to: $CONFIG_DIR/clients/$name.conf\"\n}\n\nremove_peer() {\n    local public_key=\"$1\"\n    wg set \"$INTERFACE\" peer \"$public_key\" remove\n    echo \"Peer removed\"\n}\n\nlist_peers() {\n    echo \"Configured Peers:\"\n    echo \"=================\"\n    wg show \"$INTERFACE\" peers | while read -r peer; do\n        echo \"Public Key: $peer\"\n        wg show \"$INTERFACE\" allowed-ips | grep \"$peer\" | awk '{print \"  Allowed IPs: \" $2}'\n        wg show \"$INTERFACE\" latest-handshakes | grep \"$peer\" | awk '{print \"  Last Handshake: \" strftime(\"%Y-%m-%d %H:%M:%S\", $2)}'\n        echo\n    done\n}\n\ngenerate_qr() {\n    local config_name=\"$1\"\n    local config_file=\"$CONFIG_DIR/clients/$config_name.conf\"\n    \n    if [ ! -f \"$config_file\" ]; then\n        echo \"Configuration file not found: $config_file\"\n        exit 1\n    fi\n    \n    qrencode -t ansiutf8 < \"$config_file\"\n}\n\n# Main logic\ncase \"${1:-help}\" in\n    status)\n        status\n        ;;\n    add-peer)\n        shift\n        add_peer \"$@\"\n        ;;\n    remove-peer)\n        shift\n        remove_peer \"$@\"\n        ;;\n    list-peers)\n        list_peers\n        ;;\n    generate-qr)\n        shift\n        generate_qr \"$@\"\n        ;;\n    help|--help|-h)\n        show_help\n        ;;\n    *)\n        echo \"Unknown command: $1\"\n        show_help\n        exit 1\n        ;;\nesac\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wireguard-tools kmod-wireguard\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade wireguard wireguard-tools\n\n# Arch Linux\nsudo pacman -Syu wireguard-tools\n\n# Alpine Linux\napk update && apk upgrade wireguard-tools\n\n# openSUSE\nsudo zypper update wireguard-tools\n\n# FreeBSD\npkg update && pkg upgrade wireguard wireguard-tools\n\n# Always backup before updates\n/usr/local/bin/wireguard-backup.sh\n\n# Restart after updates\nsudo systemctl restart wg-quick@wg0\n```\n\n### Regular Maintenance Tasks\n\n```bash\n#!/bin/bash\n# wireguard-maintenance.sh\n\nLOG_FILE=\"/var/log/wireguard-maintenance.log\"\nCONFIG_DIR=\"/etc/wireguard\"\n\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# Check and remove inactive peers\ncheck_inactive_peers() {\n    log \"Checking for inactive peers...\"\n    \n    wg show wg0 latest-handshakes | while read -r peer handshake; do\n        if [ \"$handshake\" -eq 0 ]; then\n            continue\n        fi\n        \n        current_time=$(date +%s)\n        time_diff=$((current_time - handshake))\n        \n        # Remove peers inactive for more than 30 days\n        if [ $time_diff -gt 2592000 ]; then\n            log \"Removing inactive peer: $peer\"\n            wg set wg0 peer \"$peer\" remove\n        fi\n    done\n}\n\n# Verify configuration integrity\nverify_config() {\n    log \"Verifying configuration...\"\n    \n    if wg-quick strip wg0 > /dev/null 2>&1; then\n        log \"Configuration is valid\"\n    else\n        log \"ERROR: Configuration validation failed\"\n        return 1\n    fi\n}\n\n# Update geo-blocked IPs (if applicable)\nupdate_geoblock() {\n    log \"Updating geo-block rules...\"\n    \n    # Example: Update allowed countries\n    # This would typically fetch from a geo-IP database\n    # and update firewall rules accordingly\n}\n\n# Generate usage report\ngenerate_report() {\n    log \"Generating usage report...\"\n    \n    report_file=\"/var/log/wireguard-report-$(date +%Y%m%d).txt\"\n    \n    {\n        echo \"WireGuard Usage Report - $(date)\"\n        echo \"================================\"\n        echo\n        echo \"Interface Statistics:\"\n        wg show wg0 transfer\n        echo\n        echo \"Peer Count: $(wg show wg0 peers | wc -l)\"\n        echo\n        echo \"Top 10 Peers by Traffic:\"\n        wg show wg0 transfer | sort -k3 -nr | head -10\n    } > \"$report_file\"\n    \n    log \"Report saved to: $report_file\"\n}\n\n# Main maintenance routine\nmain() {\n    log \"Starting WireGuard maintenance...\"\n    \n    check_inactive_peers\n    verify_config\n    update_geoblock\n    generate_report\n    \n    log \"Maintenance completed\"\n}\n\n# Run maintenance\nmain\n\n# Schedule this script in cron:\n# 0 2 * * 0 /usr/local/bin/wireguard-maintenance.sh\n```\n\n### Performance Monitoring\n\n```bash\n#!/bin/bash\n# wireguard-performance.sh\n\n# Monitor interface performance\nmonitor_performance() {\n    local interface=\"wg0\"\n    local duration=60\n    local interval=5\n    \n    echo \"Monitoring WireGuard performance for $duration seconds...\"\n    echo \"Time,RX_packets,TX_packets,RX_bytes,TX_bytes,RX_errors,TX_errors\"\n    \n    end_time=$(($(date +%s) + duration))\n    \n    while [ $(date +%s) -lt $end_time ]; do\n        stats=$(ip -s link show $interface | awk '/RX:/{getline; rx_p=$1; rx_b=$2; rx_e=$3} /TX:/{getline; tx_p=$1; tx_b=$2; tx_e=$3} END{print rx_p\",\"tx_p\",\"rx_b\",\"tx_b\",\"rx_e\",\"tx_e}')\n        echo \"$(date +%s),$stats\"\n        sleep $interval\n    done\n}\n\n# Check for configuration drift\ncheck_config_drift() {\n    local running_config=\"/tmp/wg0-running.conf\"\n    local saved_config=\"/etc/wireguard/wg0.conf\"\n    \n    wg showconf wg0 > \"$running_config\"\n    \n    if ! diff -q \"$running_config\" <(wg-quick strip \"$saved_config\") > /dev/null; then\n        echo \"WARNING: Running configuration differs from saved configuration\"\n        diff \"$running_config\" <(wg-quick strip \"$saved_config\")\n    else\n        echo \"Configuration is in sync\"\n    fi\n    \n    rm -f \"$running_config\"\n}\n\n# Run performance monitoring\nmonitor_performance | tee /var/log/wireguard-performance-$(date +%Y%m%d-%H%M%S).csv\n```\n\n## Additional Resources\n\n- [Official WireGuard Documentation](https://www.wireguard.com/)\n- [WireGuard Quick Start Guide](https://www.wireguard.com/quickstart/)\n- [WireGuard White Paper](https://www.wireguard.com/papers/wireguard.pdf)\n- [WireGuard GitHub Repository](https://github.com/WireGuard)\n- [WireGuard Mailing List](https://lists.zx2c4.com/mailman/listinfo/wireguard)\n- [Community Forums](https://www.reddit.com/r/WireGuard/)\n- [Performance Tuning Guide](https://www.wireguard.com/performance/)\n- [Security Considerations](https://www.wireguard.com/formal-verification/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">WireGuard is a free and open-source VPN protocol and software implementation that aims to be simpler, faster, and more secure than existing VPN protocols. Originally developed by Jason A. Donenfeld, WireGuard provides state-of-the-art cryptography and minimal attack surface. It serves as a modern FOSS alternative to proprietary VPN solutions like Cisco AnyConnect, Palo Alto GlobalProtect, or commercial VPN services, offering enterprise-grade security with significantly better performance and a fraction of the codebase.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for high throughput)</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum (512MB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: Stable internet connectivity</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Kernel 5.6+ (or with WireGuard module backported)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows 10 version 1809+ or Windows Server 2019+</li>\n<li class=\"mobile-list-item\">FreeBSD: 12.1+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">UDP port 51820 (default, configurable)</li>\n<li class=\"mobile-list-item\">Public IP address or DDNS for server</li>\n<li class=\"mobile-list-item\">NAT traversal capability</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Linux kernel headers (for module compilation if needed)</li>\n<li class=\"mobile-list-item\">iproute2 or ifconfig</li>\n<li class=\"mobile-list-item\">iptables or nftables for NAT</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># For RHEL/CentOS 8+, Rocky Linux, AlmaLinux\nsudo dnf install -y epel-release elrepo-release\nsudo dnf install -y kmod-wireguard wireguard-tools\n\n# For CentOS 7\nsudo yum install -y epel-release\nsudo yum install -y yum-plugin-elrepo\nsudo yum install -y kmod-wireguard wireguard-tools\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv6.conf.all.forwarding = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Verify installation\nwg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install WireGuard\nsudo apt install -y wireguard wireguard-tools\n\n# For older Ubuntu versions (&lt; 20.04)\nsudo add-apt-repository ppa:wireguard/wireguard\nsudo apt update\nsudo apt install -y wireguard wireguard-tools\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv6.conf.all.forwarding = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Verify installation\nwg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard\nsudo pacman -S wireguard-tools\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.d/30-ipforward.conf\necho &#039;net.ipv6.conf.all.forwarding = 1&#039; | sudo tee -a /etc/sysctl.d/30-ipforward.conf\nsudo sysctl --system\n\n# Verify installation\nwg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard\napk add --no-cache wireguard-tools\n\n# Load kernel module\nmodprobe wireguard\n\n# Make module load persistent\necho &quot;wireguard&quot; &gt;&gt; /etc/modules\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; &gt;&gt; /etc/sysctl.conf\necho &#039;net.ipv6.conf.all.forwarding = 1&#039; &gt;&gt; /etc/sysctl.conf\nsysctl -p\n\n# Verify installation\nwg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y wireguard-tools\n\n# SLES 15\nsudo SUSEConnect -p sle-module-basesystem/15.5/x86_64\nsudo zypper install -y wireguard-tools\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv6.conf.all.forwarding = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Verify installation\nwg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install wireguard-tools\n\n# Or download the official macOS app from App Store\n# Search for &quot;WireGuard&quot; by WireGuard Development Team\n\n# For command-line usage\nbrew install wireguard-go\n\n# Verify installation\nwg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install wireguard wireguard-tools\n\n# Load kernel module\nkldload if_wg\n\n# Make module load persistent\necho &#039;if_wg_load=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Enable IP forwarding\necho &#039;gateway_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\necho &#039;ipv6_gateway_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Apply sysctl settings\nsysctl net.inet.ip.forwarding=1\nsysctl net.inet6.ip6.forwarding=1\n\n# Verify installation\nwg --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install wireguard\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install wireguard\n\n# Method 3: Download installer\n# Download from https://www.wireguard.com/install/\n# Run the MSI installer\n\n# Enable IP forwarding (PowerShell as Administrator)\nSet-NetIPInterface -Forwarding Enabled\n\n# Verify installation (in Command Prompt)\n&quot;C:\\Program Files\\WireGuard\\wg.exe&quot; --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"generate-keys\" class=\"mobile-header\">Generate Keys</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directory for WireGuard configuration\nsudo mkdir -p /etc/wireguard\nsudo chmod 700 /etc/wireguard\ncd /etc/wireguard\n\n# Generate server private key\nwg genkey | sudo tee server_private.key | wg pubkey | sudo tee server_public.key\nsudo chmod 600 server_private.key\n\n# Generate client private key\nwg genkey | sudo tee client_private.key | wg pubkey | sudo tee client_public.key\nsudo chmod 600 client_private.key</code></pre>\n      </div>\n    </div>\n<h3 id=\"server-configuration\" class=\"mobile-header\">Server Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create server configuration\nsudo tee /etc/wireguard/wg0.conf &lt;&lt;EOF\n[Interface]\nAddress = 10.0.0.1/24, fd00:0:0:1::1/64\nListenPort = 51820\nPrivateKey = $(cat server_private.key)\nPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -A FORWARD -o wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -D FORWARD -o wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Client peer\n[Peer]\nPublicKey = $(cat client_public.key)\nAllowedIPs = 10.0.0.2/32, fd00:0:0:1::2/128\nEOF\n\nsudo chmod 600 /etc/wireguard/wg0.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"client-configuration\" class=\"mobile-header\">Client Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create client configuration\nsudo tee /etc/wireguard/client.conf &lt;&lt;EOF\n[Interface]\nAddress = 10.0.0.2/24, fd00:0:0:1::2/64\nPrivateKey = $(cat client_private.key)\nDNS = 1.1.1.1, 1.0.0.1\n\n[Peer]\nPublicKey = $(cat server_public.key)\nEndpoint = YOUR_SERVER_IP:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nEOF\n\nsudo chmod 600 /etc/wireguard/client.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"start-wireguard\" class=\"mobile-header\">Start WireGuard</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start WireGuard interface\nsudo wg-quick up wg0\n\n# Enable at boot\nsudo systemctl enable wg-quick@wg0\n\n# Check status\nsudo wg show</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable WireGuard service\nsudo systemctl enable wg-quick@wg0\n\n# Start WireGuard\nsudo systemctl start wg-quick@wg0\n\n# Stop WireGuard\nsudo systemctl stop wg-quick@wg0\n\n# Restart WireGuard\nsudo systemctl restart wg-quick@wg0\n\n# Check status\nsudo systemctl status wg-quick@wg0\n\n# View logs\nsudo journalctl -u wg-quick@wg0 -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create OpenRC service\nsudo tee /etc/init.d/wireguard &lt;&lt;&#039;EOF&#039;\n#!/sbin/openrc-run\nname=&quot;WireGuard VPN&quot;\ndescription=&quot;WireGuard VPN tunnel&quot;\n\ndepend() {\n    need net\n    after firewall\n}\n\nstart() {\n    ebegin &quot;Starting WireGuard&quot;\n    wg-quick up wg0\n    eend $?\n}\n\nstop() {\n    ebegin &quot;Stopping WireGuard&quot;\n    wg-quick down wg0\n    eend $?\n}\nEOF\n\nsudo chmod +x /etc/init.d/wireguard\n\n# Enable and start\nrc-update add wireguard default\nrc-service wireguard start</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create rc.d script\nsudo tee /usr/local/etc/rc.d/wireguard &lt;&lt;&#039;EOF&#039;\n#!/bin/sh\n\n# PROVIDE: wireguard\n# REQUIRE: NETWORKING\n# KEYWORD: shutdown\n\n. /etc/rc.subr\n\nname=&quot;wireguard&quot;\nrcvar=&quot;wireguard_enable&quot;\n\nstart_cmd=&quot;wireguard_start&quot;\nstop_cmd=&quot;wireguard_stop&quot;\n\nwireguard_start() {\n    /usr/local/bin/wg-quick up wg0\n}\n\nwireguard_stop() {\n    /usr/local/bin/wg-quick down wg0\n}\n\nload_rc_config $name\nrun_rc_command &quot;$1&quot;\nEOF\n\nsudo chmod +x /usr/local/etc/rc.d/wireguard\n\n# Enable in rc.conf\necho &#039;wireguard_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wireguard start</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service\" class=\"mobile-header\">Windows Service</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Install WireGuard service\n&amp; &quot;C:\\Program Files\\WireGuard\\wireguard.exe&quot; /installtunnelservice &quot;C:\\Path\\To\\wg0.conf&quot;\n\n# Start service\nStart-Service WireGuardTunnel$wg0\n\n# Stop service\nStop-Service WireGuardTunnel$wg0\n\n# Check status\nGet-Service WireGuardTunnel$wg0</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"multi-site-vpn-setup\" class=\"mobile-header\">Multi-Site VPN Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Site A configuration (10.1.0.0/24)\ncat &gt; /etc/wireguard/site-a.conf &lt;&lt;EOF\n[Interface]\nAddress = 10.100.0.1/24\nListenPort = 51820\nPrivateKey = SITE_A_PRIVATE_KEY\n\n# Site B\n[Peer]\nPublicKey = SITE_B_PUBLIC_KEY\nEndpoint = site-b.example.com:51820\nAllowedIPs = 10.2.0.0/24, 10.100.0.2/32\nPersistentKeepalive = 25\n\n# Site C\n[Peer]\nPublicKey = SITE_C_PUBLIC_KEY\nEndpoint = site-c.example.com:51820\nAllowedIPs = 10.3.0.0/24, 10.100.0.3/32\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"road-warrior-configuration\" class=\"mobile-header\">Road Warrior Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Server configuration for mobile clients\ncat &gt; /etc/wireguard/mobile.conf &lt;&lt;EOF\n[Interface]\nAddress = 10.200.0.1/24\nListenPort = 51821\nPrivateKey = MOBILE_SERVER_PRIVATE_KEY\n\n# Mobile client 1\n[Peer]\nPublicKey = MOBILE_CLIENT_1_PUBLIC_KEY\nAllowedIPs = 10.200.0.10/32\nPresharedKey = PRESHARED_KEY_FOR_EXTRA_SECURITY\n\n# Mobile client 2\n[Peer]\nPublicKey = MOBILE_CLIENT_2_PUBLIC_KEY\nAllowedIPs = 10.200.0.11/32\nPresharedKey = ANOTHER_PRESHARED_KEY\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"split-tunnel-configuration\" class=\"mobile-header\">Split Tunnel Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Client configuration for split tunneling\ncat &gt; /etc/wireguard/split-tunnel.conf &lt;&lt;EOF\n[Interface]\nAddress = 10.0.0.100/24\nPrivateKey = CLIENT_PRIVATE_KEY\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = SERVER_PUBLIC_KEY\nEndpoint = vpn.example.com:51820\n# Only route specific subnets through VPN\nAllowedIPs = 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-tcpudp-proxy\" class=\"mobile-header\">nginx TCP/UDP Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/nginx.conf\nstream {\n    upstream wireguard {\n        server 127.0.0.1:51820;\n    }\n    \n    server {\n        listen 443 udp;\n        proxy_pass wireguard;\n        proxy_timeout 1s;\n        proxy_responses 1;\n        proxy_bind $remote_addr transparent;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n\ndefaults\n    mode tcp\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend wireguard_frontend\n    bind *:51820\n    mode udp\n    default_backend wireguard_backend\n\nbackend wireguard_backend\n    mode udp\n    server wireguard1 127.0.0.1:51821</code></pre>\n      </div>\n    </div>\n<h3 id=\"iptables-port-forwarding\" class=\"mobile-header\">iptables Port Forwarding</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Forward external port to WireGuard\niptables -t nat -A PREROUTING -i eth0 -p udp --dport 443 -j REDIRECT --to-port 51820\n\n# Save rules\niptables-save &gt; /etc/iptables/rules.v4</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 51820/udp\nsudo ufw allow from 10.0.0.0/24 to any\nsudo ufw reload\n\n# firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=51820/udp\nsudo firewall-cmd --permanent --add-rich-rule=&#039;rule family=&quot;ipv4&quot; source address=&quot;10.0.0.0/24&quot; accept&#039;\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p udp --dport 51820 -j ACCEPT\nsudo iptables -A INPUT -i wg0 -j ACCEPT\nsudo iptables -A FORWARD -i wg0 -o eth0 -j ACCEPT\nsudo iptables -A FORWARD -i eth0 -o wg0 -m state --state RELATED,ESTABLISHED -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"key-management\" class=\"mobile-header\">Key Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# key-rotation.sh - Rotate WireGuard keys\n\n# Generate new keys\nNEW_PRIVATE=$(wg genkey)\nNEW_PUBLIC=$(echo &quot;$NEW_PRIVATE&quot; | wg pubkey)\n\n# Backup old configuration\ncp /etc/wireguard/wg0.conf /etc/wireguard/wg0.conf.bak\n\n# Update configuration\nsed -i &quot;s|PrivateKey = .*|PrivateKey = $NEW_PRIVATE|&quot; /etc/wireguard/wg0.conf\n\n# Restart WireGuard\nsystemctl restart wg-quick@wg0\n\necho &quot;New public key: $NEW_PUBLIC&quot;\necho &quot;Update this key on all peers&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Limit connection rate\niptables -A INPUT -p udp --dport 51820 -m state --state NEW -m recent --set\niptables -A INPUT -p udp --dport 51820 -m state --state NEW -m recent --update --seconds 60 --hitcount 4 -j DROP\n\n# Enable strict RPF\necho 1 &gt; /proc/sys/net/ipv4/conf/all/rp_filter\n\n# Disable ICMP redirects\necho 0 &gt; /proc/sys/net/ipv4/conf/all/accept_redirects\necho 0 &gt; /proc/sys/net/ipv6/conf/all/accept_redirects\n\n# Set up fail2ban for WireGuard\ncat &gt; /etc/fail2ban/filter.d/wireguard.conf &lt;&lt;EOF\n[Definition]\nfailregex = &lt;HOST&gt;.*Handshake for peer [0-9]+ \\(.*\\) did not complete after\nignoreregex =\nEOF\n\ncat &gt; /etc/fail2ban/jail.d/wireguard.conf &lt;&lt;EOF\n[wireguard]\nenabled = true\nfilter = wireguard\nlogpath = /var/log/messages\nmaxretry = 5\nbantime = 3600\nfindtime = 600\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Not applicable for WireGuard as it doesn't use a database. Configuration is stored in flat files.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"kernel-tuning\" class=\"mobile-header\">Kernel Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># /etc/sysctl.d/99-wireguard.conf\n# Network buffer sizes\nnet.core.rmem_max = 134217728\nnet.core.wmem_max = 134217728\nnet.core.rmem_default = 16777216\nnet.core.wmem_default = 16777216\nnet.core.optmem_max = 16777216\n\n# Increase netdev budget\nnet.core.netdev_budget = 600\nnet.core.netdev_max_backlog = 5000\n\n# UDP specific tuning\nnet.ipv4.udp_rmem_min = 8192\nnet.ipv4.udp_wmem_min = 8192\n\n# Connection tracking\nnet.netfilter.nf_conntrack_max = 1048576\nnet.netfilter.nf_conntrack_udp_timeout = 60\nnet.netfilter.nf_conntrack_udp_timeout_stream = 180\n\n# Apply settings\nsysctl -p /etc/sysctl.d/99-wireguard.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"mtu-optimization\" class=\"mobile-header\">MTU Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Find optimal MTU\nping -M do -s 1472 -c 1 remote_host\n\n# Set MTU in WireGuard config\n[Interface]\nMTU = 1420  # Default is 1420, adjust based on your network</code></pre>\n      </div>\n    </div>\n<h3 id=\"cpu-affinity\" class=\"mobile-header\">CPU Affinity</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set CPU affinity for WireGuard\n# Find WireGuard process\nps aux | grep wireguard\n\n# Set affinity to specific CPU cores\ntaskset -cp 0,1 $(pgrep wireguard)\n\n# Make persistent with systemd\nmkdir -p /etc/systemd/system/wg-quick@wg0.service.d\ncat &gt; /etc/systemd/system/wg-quick@wg0.service.d/override.conf &lt;&lt;EOF\n[Service]\nCPUAffinity=0 1\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# wireguard-monitor.sh\n\nwhile true; do\n    clear\n    echo &quot;WireGuard Status - $(date)&quot;\n    echo &quot;=========================&quot;\n    \n    # Show interface status\n    wg show\n    \n    # Show transfer statistics\n    echo -e &quot;\\nTransfer Statistics:&quot;\n    wg show wg0 transfer\n    \n    # Show connected peers\n    echo -e &quot;\\nConnected Peers:&quot;\n    wg show wg0 peers\n    \n    # Show system resources\n    echo -e &quot;\\nSystem Resources:&quot;\n    echo &quot;CPU: $(top -bn1 | grep &quot;Cpu(s)&quot; | awk &#039;{print $2 + $4&quot;%&quot;}&#039;)&quot;\n    echo &quot;Memory: $(free -m | awk &#039;NR==2{printf &quot;%.2f%%&quot;, $3*100/$2}&#039;)&quot;\n    echo &quot;Network: $(ip -s link show wg0 | grep -A1 &quot;RX:&quot; | tail -1 | awk &#039;{print &quot;RX: &quot;$1&quot; bytes&quot;}&#039;), $(ip -s link show wg0 | grep -A1 &quot;TX:&quot; | tail -1 | awk &#039;{print &quot;TX: &quot;$1&quot; bytes&quot;}&#039;)&quot;\n    \n    sleep 5\ndone</code></pre>\n      </div>\n    </div>\n<h3 id=\"prometheus-exporter\" class=\"mobile-header\">Prometheus Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard exporter\ngo get -u github.com/MindFlavor/prometheus_wireguard_exporter\n\n# Configure exporter\ncat &gt; /etc/systemd/system/wireguard-exporter.service &lt;&lt;EOF\n[Unit]\nDescription=WireGuard Prometheus Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/prometheus_wireguard_exporter -n /etc/wireguard/wg0.conf\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl enable --now wireguard-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"logging\" class=\"mobile-header\">Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable verbose logging\necho &quot;debug&quot; &gt; /sys/module/wireguard/parameters/debug\n\n# Configure rsyslog for WireGuard\ncat &gt; /etc/rsyslog.d/49-wireguard.conf &lt;&lt;EOF\n:msg, contains, &quot;wireguard&quot; /var/log/wireguard.log\n&amp; stop\nEOF\n\nsystemctl restart rsyslog\n\n# Log rotation\ncat &gt; /etc/logrotate.d/wireguard &lt;&lt;EOF\n/var/log/wireguard.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 root adm\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# wireguard-backup.sh\n\nBACKUP_DIR=&quot;/backup/wireguard&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/wireguard_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Create backup\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /etc/wireguard/ \\\n    /etc/systemd/system/wg-quick@*.service.d/ \\\n    /etc/sysctl.d/*wireguard* \\\n    2&gt;/dev/null\n\n# Encrypt backup\ngpg --cipher-algo AES256 --symmetric &quot;$BACKUP_FILE&quot;\nrm &quot;$BACKUP_FILE&quot;\n\necho &quot;Backup created: $BACKUP_FILE.gpg&quot;\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;wireguard_backup_*.gpg&quot; -mtime +30 -delete</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# wireguard-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.gpg&gt;&quot;\n    exit 1\nfi\n\n# Decrypt backup\ngpg --decrypt &quot;$BACKUP_FILE&quot; &gt; /tmp/wireguard_restore.tar.gz\n\n# Stop WireGuard\nsystemctl stop wg-quick@wg0\n\n# Extract backup\ntar -xzf /tmp/wireguard_restore.tar.gz -C /\n\n# Set correct permissions\nchmod 600 /etc/wireguard/*.conf\nchmod 600 /etc/wireguard/*_private.key\n\n# Restart WireGuard\nsystemctl start wg-quick@wg0\n\n# Clean up\nrm /tmp/wireguard_restore.tar.gz\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Connection not establishing</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if WireGuard module is loaded\nlsmod | grep wireguard\n\n# Load module manually\nmodprobe wireguard\n\n# Check interface\nip link show wg0\n\n# Check routing\nip route show table all | grep wg0\n\n# Test connectivity\nping -c 4 10.0.0.1</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check for packet loss\nmtr -n 10.0.0.1\n\n# Check interface statistics\nip -s link show wg0\n\n# Monitor CPU usage\ntop -p $(pgrep wireguard)\n\n# Check for errors\ndmesg | grep wireguard</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Key exchange problems</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Verify keys match\nwg show wg0 public-key\nwg show wg0 peers\n\n# Check handshake status\nwg show wg0 latest-handshakes\n\n# Force re-handshake\nwg set wg0 peer PEER_PUBLIC_KEY endpoint ENDPOINT:PORT</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho module wireguard +p &gt; /sys/kernel/debug/dynamic_debug/control\n\n# View debug logs\ndmesg -w | grep wireguard\n\n# Disable debug logging\necho module wireguard -p &gt; /sys/kernel/debug/dynamic_debug/control</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">#!/usr/bin/env python3\n# wireguard_manager.py\n\nimport subprocess\nimport json\nimport ipaddress\n\nclass WireGuardManager:\n    def __init__(self, interface=&#039;wg0&#039;):\n        self.interface = interface\n    \n    def get_status(self):\n        &quot;&quot;&quot;Get WireGuard interface status&quot;&quot;&quot;\n        try:\n            result = subprocess.run([&#039;wg&#039;, &#039;show&#039;, self.interface, &#039;dump&#039;], \n                                  capture_output=True, text=True, check=True)\n            lines = result.stdout.strip().split(&#039;\\n&#039;)\n            \n            # Parse interface info\n            interface_data = lines[0].split(&#039;\\t&#039;)\n            status = {\n                &#039;interface&#039;: self.interface,\n                &#039;private_key&#039;: interface_data[0],\n                &#039;public_key&#039;: interface_data[1],\n                &#039;listen_port&#039;: interface_data[2],\n                &#039;fwmark&#039;: interface_data[3],\n                &#039;peers&#039;: []\n            }\n            \n            # Parse peer info\n            for line in lines[1:]:\n                peer_data = line.split(&#039;\\t&#039;)\n                peer = {\n                    &#039;public_key&#039;: peer_data[0],\n                    &#039;preshared_key&#039;: peer_data[1],\n                    &#039;endpoint&#039;: peer_data[2],\n                    &#039;allowed_ips&#039;: peer_data[3].split(&#039;,&#039;),\n                    &#039;latest_handshake&#039;: peer_data[4],\n                    &#039;rx_bytes&#039;: int(peer_data[5]),\n                    &#039;tx_bytes&#039;: int(peer_data[6]),\n                    &#039;persistent_keepalive&#039;: peer_data[7]\n                }\n                status[&#039;peers&#039;].append(peer)\n            \n            return status\n        except subprocess.CalledProcessError as e:\n            return {&#039;error&#039;: str(e)}\n    \n    def add_peer(self, public_key, allowed_ips, endpoint=None, preshared_key=None):\n        &quot;&quot;&quot;Add a new peer&quot;&quot;&quot;\n        cmd = [&#039;wg&#039;, &#039;set&#039;, self.interface, &#039;peer&#039;, public_key]\n        \n        if allowed_ips:\n            cmd.extend([&#039;allowed-ips&#039;, &#039;,&#039;.join(allowed_ips)])\n        \n        if endpoint:\n            cmd.extend([&#039;endpoint&#039;, endpoint])\n        \n        if preshared_key:\n            cmd.extend([&#039;preshared-key&#039;, preshared_key])\n        \n        try:\n            subprocess.run(cmd, check=True)\n            return {&#039;success&#039;: True}\n        except subprocess.CalledProcessError as e:\n            return {&#039;error&#039;: str(e)}\n    \n    def remove_peer(self, public_key):\n        &quot;&quot;&quot;Remove a peer&quot;&quot;&quot;\n        try:\n            subprocess.run([&#039;wg&#039;, &#039;set&#039;, self.interface, &#039;peer&#039;, public_key, &#039;remove&#039;], \n                         check=True)\n            return {&#039;success&#039;: True}\n        except subprocess.CalledProcessError as e:\n            return {&#039;error&#039;: str(e)}\n    \n    def generate_config(self, address, private_key, peers):\n        &quot;&quot;&quot;Generate WireGuard configuration&quot;&quot;&quot;\n        config = f&quot;&quot;&quot;[Interface]\nAddress = {address}\nPrivateKey = {private_key}\nListenPort = 51820\n\n&quot;&quot;&quot;\n        for peer in peers:\n            config += f&quot;&quot;&quot;[Peer]\nPublicKey = {peer[&#039;public_key&#039;]}\nAllowedIPs = {&#039;,&#039;.join(peer[&#039;allowed_ips&#039;])}\n&quot;&quot;&quot;\n            if peer.get(&#039;endpoint&#039;):\n                config += f&quot;Endpoint = {peer[&#039;endpoint&#039;]}\\n&quot;\n            if peer.get(&#039;preshared_key&#039;):\n                config += f&quot;PresharedKey = {peer[&#039;preshared_key&#039;]}\\n&quot;\n            if peer.get(&#039;persistent_keepalive&#039;):\n                config += f&quot;PersistentKeepalive = {peer[&#039;persistent_keepalive&#039;]}\\n&quot;\n            config += &quot;\\n&quot;\n        \n        return config\n\n# Example usage\nif __name__ == &#039;__main__&#039;:\n    wg = WireGuardManager()\n    \n    # Get status\n    status = wg.get_status()\n    print(json.dumps(status, indent=2))\n    \n    # Add a peer\n    result = wg.add_peer(\n        public_key=&#039;PEER_PUBLIC_KEY&#039;,\n        allowed_ips=[&#039;10.0.0.100/32&#039;],\n        endpoint=&#039;peer.example.com:51820&#039;\n    )\n    print(f&quot;Add peer result: {result}&quot;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"bash-integration\" class=\"mobile-header\">Bash Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# wireguard-cli.sh - WireGuard management CLI\n\nset -euo pipefail\n\nINTERFACE=&quot;${WG_INTERFACE:-wg0}&quot;\nCONFIG_DIR=&quot;/etc/wireguard&quot;\n\nshow_help() {\n    cat &lt;&lt;EOF\nWireGuard CLI Management Tool\n\nUsage: $0 [command] [options]\n\nCommands:\n    status          Show interface status\n    add-peer        Add a new peer\n    remove-peer     Remove a peer\n    list-peers      List all peers\n    generate-qr     Generate QR code for mobile config\n    backup          Backup configuration\n    restore         Restore configuration\n\nExamples:\n    $0 status\n    $0 add-peer --name mobile1 --ip 10.0.0.10\n    $0 generate-qr mobile1\nEOF\n}\n\nstatus() {\n    echo &quot;WireGuard Interface: $INTERFACE&quot;\n    echo &quot;=========================&quot;\n    wg show &quot;$INTERFACE&quot;\n}\n\nadd_peer() {\n    local name=&quot;$1&quot;\n    local ip=&quot;$2&quot;\n    \n    # Generate keys\n    private_key=$(wg genkey)\n    public_key=$(echo &quot;$private_key&quot; | wg pubkey)\n    preshared_key=$(wg genpsk)\n    \n    # Add to server config\n    cat &gt;&gt; &quot;$CONFIG_DIR/$INTERFACE.conf&quot; &lt;&lt;EOF\n\n[Peer]\n# $name\nPublicKey = $public_key\nPresharedKey = $preshared_key\nAllowedIPs = $ip/32\nEOF\n\n    # Generate client config\n    server_public_key=$(wg show &quot;$INTERFACE&quot; public-key)\n    server_endpoint=$(curl -s ifconfig.me)\n    \n    cat &gt; &quot;$CONFIG_DIR/clients/$name.conf&quot; &lt;&lt;EOF\n[Interface]\nAddress = $ip/24\nPrivateKey = $private_key\nDNS = 1.1.1.1, 1.0.0.1\n\n[Peer]\nPublicKey = $server_public_key\nPresharedKey = $preshared_key\nEndpoint = $server_endpoint:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nEOF\n\n    # Reload configuration\n    wg syncconf &quot;$INTERFACE&quot; &lt;(wg-quick strip &quot;$INTERFACE&quot;)\n    \n    echo &quot;Peer $name added successfully&quot;\n    echo &quot;Client configuration saved to: $CONFIG_DIR/clients/$name.conf&quot;\n}\n\nremove_peer() {\n    local public_key=&quot;$1&quot;\n    wg set &quot;$INTERFACE&quot; peer &quot;$public_key&quot; remove\n    echo &quot;Peer removed&quot;\n}\n\nlist_peers() {\n    echo &quot;Configured Peers:&quot;\n    echo &quot;=================&quot;\n    wg show &quot;$INTERFACE&quot; peers | while read -r peer; do\n        echo &quot;Public Key: $peer&quot;\n        wg show &quot;$INTERFACE&quot; allowed-ips | grep &quot;$peer&quot; | awk &#039;{print &quot;  Allowed IPs: &quot; $2}&#039;\n        wg show &quot;$INTERFACE&quot; latest-handshakes | grep &quot;$peer&quot; | awk &#039;{print &quot;  Last Handshake: &quot; strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, $2)}&#039;\n        echo\n    done\n}\n\ngenerate_qr() {\n    local config_name=&quot;$1&quot;\n    local config_file=&quot;$CONFIG_DIR/clients/$config_name.conf&quot;\n    \n    if [ ! -f &quot;$config_file&quot; ]; then\n        echo &quot;Configuration file not found: $config_file&quot;\n        exit 1\n    fi\n    \n    qrencode -t ansiutf8 &lt; &quot;$config_file&quot;\n}\n\n# Main logic\ncase &quot;${1:-help}&quot; in\n    status)\n        status\n        ;;\n    add-peer)\n        shift\n        add_peer &quot;$@&quot;\n        ;;\n    remove-peer)\n        shift\n        remove_peer &quot;$@&quot;\n        ;;\n    list-peers)\n        list_peers\n        ;;\n    generate-qr)\n        shift\n        generate_qr &quot;$@&quot;\n        ;;\n    help|--help|-h)\n        show_help\n        ;;\n    *)\n        echo &quot;Unknown command: $1&quot;\n        show_help\n        exit 1\n        ;;\nesac</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wireguard-tools kmod-wireguard\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade wireguard wireguard-tools\n\n# Arch Linux\nsudo pacman -Syu wireguard-tools\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade wireguard-tools\n\n# openSUSE\nsudo zypper update wireguard-tools\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade wireguard wireguard-tools\n\n# Always backup before updates\n/usr/local/bin/wireguard-backup.sh\n\n# Restart after updates\nsudo systemctl restart wg-quick@wg0</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# wireguard-maintenance.sh\n\nLOG_FILE=&quot;/var/log/wireguard-maintenance.log&quot;\nCONFIG_DIR=&quot;/etc/wireguard&quot;\n\nlog() {\n    echo &quot;[$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)] $1&quot; | tee -a &quot;$LOG_FILE&quot;\n}\n\n# Check and remove inactive peers\ncheck_inactive_peers() {\n    log &quot;Checking for inactive peers...&quot;\n    \n    wg show wg0 latest-handshakes | while read -r peer handshake; do\n        if [ &quot;$handshake&quot; -eq 0 ]; then\n            continue\n        fi\n        \n        current_time=$(date +%s)\n        time_diff=$((current_time - handshake))\n        \n        # Remove peers inactive for more than 30 days\n        if [ $time_diff -gt 2592000 ]; then\n            log &quot;Removing inactive peer: $peer&quot;\n            wg set wg0 peer &quot;$peer&quot; remove\n        fi\n    done\n}\n\n# Verify configuration integrity\nverify_config() {\n    log &quot;Verifying configuration...&quot;\n    \n    if wg-quick strip wg0 &gt; /dev/null 2&gt;&amp;1; then\n        log &quot;Configuration is valid&quot;\n    else\n        log &quot;ERROR: Configuration validation failed&quot;\n        return 1\n    fi\n}\n\n# Update geo-blocked IPs (if applicable)\nupdate_geoblock() {\n    log &quot;Updating geo-block rules...&quot;\n    \n    # Example: Update allowed countries\n    # This would typically fetch from a geo-IP database\n    # and update firewall rules accordingly\n}\n\n# Generate usage report\ngenerate_report() {\n    log &quot;Generating usage report...&quot;\n    \n    report_file=&quot;/var/log/wireguard-report-$(date +%Y%m%d).txt&quot;\n    \n    {\n        echo &quot;WireGuard Usage Report - $(date)&quot;\n        echo &quot;================================&quot;\n        echo\n        echo &quot;Interface Statistics:&quot;\n        wg show wg0 transfer\n        echo\n        echo &quot;Peer Count: $(wg show wg0 peers | wc -l)&quot;\n        echo\n        echo &quot;Top 10 Peers by Traffic:&quot;\n        wg show wg0 transfer | sort -k3 -nr | head -10\n    } &gt; &quot;$report_file&quot;\n    \n    log &quot;Report saved to: $report_file&quot;\n}\n\n# Main maintenance routine\nmain() {\n    log &quot;Starting WireGuard maintenance...&quot;\n    \n    check_inactive_peers\n    verify_config\n    update_geoblock\n    generate_report\n    \n    log &quot;Maintenance completed&quot;\n}\n\n# Run maintenance\nmain\n\n# Schedule this script in cron:\n# 0 2 * * 0 /usr/local/bin/wireguard-maintenance.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring\" class=\"mobile-header\">Performance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# wireguard-performance.sh\n\n# Monitor interface performance\nmonitor_performance() {\n    local interface=&quot;wg0&quot;\n    local duration=60\n    local interval=5\n    \n    echo &quot;Monitoring WireGuard performance for $duration seconds...&quot;\n    echo &quot;Time,RX_packets,TX_packets,RX_bytes,TX_bytes,RX_errors,TX_errors&quot;\n    \n    end_time=$(($(date +%s) + duration))\n    \n    while [ $(date +%s) -lt $end_time ]; do\n        stats=$(ip -s link show $interface | awk &#039;/RX:/{getline; rx_p=$1; rx_b=$2; rx_e=$3} /TX:/{getline; tx_p=$1; tx_b=$2; tx_e=$3} END{print rx_p&quot;,&quot;tx_p&quot;,&quot;rx_b&quot;,&quot;tx_b&quot;,&quot;rx_e&quot;,&quot;tx_e}&#039;)\n        echo &quot;$(date +%s),$stats&quot;\n        sleep $interval\n    done\n}\n\n# Check for configuration drift\ncheck_config_drift() {\n    local running_config=&quot;/tmp/wg0-running.conf&quot;\n    local saved_config=&quot;/etc/wireguard/wg0.conf&quot;\n    \n    wg showconf wg0 &gt; &quot;$running_config&quot;\n    \n    if ! diff -q &quot;$running_config&quot; &lt;(wg-quick strip &quot;$saved_config&quot;) &gt; /dev/null; then\n        echo &quot;WARNING: Running configuration differs from saved configuration&quot;\n        diff &quot;$running_config&quot; &lt;(wg-quick strip &quot;$saved_config&quot;)\n    else\n        echo &quot;Configuration is in sync&quot;\n    fi\n    \n    rm -f &quot;$running_config&quot;\n}\n\n# Run performance monitoring\nmonitor_performance | tee /var/log/wireguard-performance-$(date +%Y%m%d-%H%M%S).csv</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official WireGuard Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/quickstart/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Quick Start Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/papers/wireguard.pdf\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard White Paper</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/WireGuard\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://lists.zx2c4.com/mailman/listinfo/wireguard\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Mailing List</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.reddit.com/r/WireGuard/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forums</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/performance/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/formal-verification/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"18 min","wordCount":3553,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Generate Keys","id":"generate-keys"},{"level":3,"text":"Server Configuration","id":"server-configuration"},{"level":3,"text":"Client Configuration","id":"client-configuration"},{"level":3,"text":"Start WireGuard","id":"start-wireguard"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"Windows Service","id":"windows-service"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Multi-Site VPN Setup","id":"multi-site-vpn-setup"},{"level":3,"text":"Road Warrior Configuration","id":"road-warrior-configuration"},{"level":3,"text":"Split Tunnel Configuration","id":"split-tunnel-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx TCP/UDP Proxy","id":"nginx-tcpudp-proxy"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":3,"text":"iptables Port Forwarding","id":"iptables-port-forwarding"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":3,"text":"Key Management","id":"key-management"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Kernel Tuning","id":"kernel-tuning"},{"level":3,"text":"MTU Optimization","id":"mtu-optimization"},{"level":3,"text":"CPU Affinity","id":"cpu-affinity"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":3,"text":"Prometheus Exporter","id":"prometheus-exporter"},{"level":3,"text":"Logging","id":"logging"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Script","id":"restore-script"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Python Integration","id":"python-integration"},{"level":3,"text":"Bash Integration","id":"bash-integration"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":3,"text":"Performance Monitoring","id":"performance-monitoring"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-19T06:14:34.295Z","metadataVersion":"2.0"}]},"__N_SSG":true}