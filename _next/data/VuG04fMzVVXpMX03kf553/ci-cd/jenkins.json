{"pageProps":{"guide":{"name":"jenkins","displayName":"Jenkins Installation Guide","slug":"jenkins","description":"Jenkins is a free and open-source automation server for building, testing, and deploying applications. Originally developed by Kohsuke Kawaguchi and now maintained by the Jenkins community, Jenkins is the industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade features. It serves as a FOSS alternative to commercial CI/CD solutions like TeamCity, GitLab CI Premium, or Azure DevOps Server, offering unlimited build minutes, unlimited private repositories, and advanced pipeline capabilities without licensing costs, with features like distributed builds, Pipeline as Code, and extensive plugin ecosystem.","category":"ci-cd","subcategory":"ci-cd","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,636,4096,8080,8081,9118,50000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["ci-cd","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/ci-cd/jenkins","documentationUrl":"https://howtomgr.github.io/ci-cd/jenkins","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jenkins","updatedAt":"2025-09-16T17:21:54Z","createdAt":"2023-08-28T03:48:15Z","readmeRaw":"# Jenkins Installation Guide\n\nJenkins is a free and open-source automation server for building, testing, and deploying applications. Originally developed by Kohsuke Kawaguchi and now maintained by the Jenkins community, Jenkins is the industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade features. It serves as a FOSS alternative to commercial CI/CD solutions like TeamCity, GitLab CI Premium, or Azure DevOps Server, offering unlimited build minutes, unlimited private repositories, and advanced pipeline capabilities without licensing costs, with features like distributed builds, Pipeline as Code, and extensive plugin ecosystem.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 2GB minimum (8GB+ recommended for production)\n  - Storage: 50GB minimum (SSD recommended for build performance)\n  - Network: Stable connectivity for agent communication and external integrations\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default Jenkins HTTP)\n  - Port 50000 (default Jenkins agent communication)\n  - Additional ports for external integrations (webhooks, etc.)\n- **Dependencies**:\n  - Java 11 or 17 LTS (OpenJDK recommended)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install Java 17 LTS\nsudo dnf install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\ncurl -fsSL https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key | sudo tee /etc/yum.repos.d/jenkins.io.key\n\nsudo tee /etc/yum.repos.d/jenkins.repo <<EOF\n[jenkins]\nname=Jenkins-stable\nbaseurl=http://pkg.jenkins.io/redhat-stable\ngpgcheck=1\ngpgkey=file:///etc/yum.repos.d/jenkins.io.key\nenabled=1\nEOF\n\n# Install Jenkins\nsudo dnf install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update system packages\nsudo apt update\n\n# Install Java 17 LTS\nsudo apt install -y openjdk-17-jdk openjdk-17-jre\n\n# Add Jenkins repository\nwget -O /tmp/jenkins-key.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\nsudo mv /tmp/jenkins-key.asc /etc/apt/trusted.gpg.d/jenkins.asc\n\necho \"deb https://pkg.jenkins.io/debian-stable binary/\" | sudo tee /etc/apt/sources.list.d/jenkins.list\n\n# Update package index\nsudo apt update\n\n# Install Jenkins\nsudo apt install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo ufw allow 8080/tcp\nsudo ufw allow 50000/tcp\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### Arch Linux\n\n```bash\n# Install Java 17 LTS\nsudo pacman -S jdk17-openjdk\n\n# Install Jenkins from AUR\nyay -S jenkins\n\n# Alternative: Install manually from AUR\ngit clone https://aur.archlinux.org/jenkins.git\ncd jenkins\nmakepkg -si\n\n# Create jenkins user if not created\nsudo useradd -r -d /var/lib/jenkins -s /sbin/nologin jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /etc/jenkins/\n```\n\n### Alpine Linux\n\n```bash\n# Jenkins is not officially packaged for Alpine Linux\n# Use Docker or manual installation\n\n# Method 1: Docker installation\napk add --no-cache docker docker-compose\nrc-update add docker default\nrc-service docker start\n\n# Create Jenkins data directory\nmkdir -p /var/lib/jenkins\n\n# Run Jenkins container\ndocker run -d \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v /var/lib/jenkins:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --group-add $(getent group docker | cut -d: -f3) \\\n  jenkins/jenkins:lts-jdk17\n\n# Get initial admin password\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n\n# Method 2: Manual installation with OpenJDK\napk add --no-cache openjdk17-jre-headless\nwget https://get.jenkins.io/war-stable/latest/jenkins.war -O /opt/jenkins.war\n\n# Create jenkins user and directories\nadduser -D -s /sbin/nologin jenkins\nmkdir -p /var/lib/jenkins /var/log/jenkins\nchown -R jenkins:jenkins /var/lib/jenkins /var/log/jenkins\n\n# Create init script\ntee /etc/init.d/jenkins <<'EOF'\n#!/sbin/openrc-run\nname=\"Jenkins\"\ncommand=\"java\"\ncommand_args=\"-jar /opt/jenkins.war --httpPort=8080 --ajp13Port=-1\"\ncommand_user=\"jenkins\"\npidfile=\"/run/jenkins.pid\"\ncommand_background=\"yes\"\ndepend() {\n    need net\n}\nEOF\n\nchmod +x /etc/init.d/jenkins\nrc-update add jenkins default\nrc-service jenkins start\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo zypper addrepo -G https://pkg.jenkins.io/opensuse-stable/ jenkins\nsudo zypper refresh\n\n# Install Jenkins\nsudo zypper install -y jenkins\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y java-17-openjdk jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install jenkins-lts\n\n# Start Jenkins service\nbrew services start jenkins-lts\n\n# Or run manually\njenkins-lts\n\n# Alternative: Install specific version\nbrew install jenkins-lts@2.414\n\n# Get initial admin password\ncat ~/.jenkins/secrets/initialAdminPassword\n\n# Configuration location: ~/.jenkins/\n# Alternative: /usr/local/var/jenkins_home/ (Intel Macs)\n# Alternative: /opt/homebrew/var/jenkins_home/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install jenkins openjdk17\n\n# Using ports\ncd /usr/ports/devel/jenkins\nmake install clean\n\n# Enable Jenkins\necho 'jenkins_enable=\"YES\"' >> /etc/rc.conf\necho 'jenkins_java_home=\"/usr/local/openjdk17\"' >> /etc/rc.conf\n\n# Create jenkins user and directories\npw useradd jenkins -d /usr/local/jenkins -s /sbin/nologin\nmkdir -p /usr/local/jenkins\nchown jenkins:jenkins /usr/local/jenkins\n\n# Start service\nservice jenkins start\n\n# Get initial admin password\ncat /usr/local/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /usr/local/jenkins/\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install jenkins\n\n# Method 2: Using Scoop\nscoop install jenkins\n\n# Method 3: Manual installation\n# Download from https://www.jenkins.io/download/\n# Run jenkins.msi installer\n\n# Method 4: Windows service installation\n# Download jenkins.war\n# Install as Windows service\njava -jar jenkins.war --httpPort=8080 --install\n\n# Start service\nnet start Jenkins\n\n# Get initial admin password\nGet-Content \"C:\\Program Files\\Jenkins\\secrets\\initialAdminPassword\"\n\n# Configuration location: C:\\Program Files\\Jenkins\\\n# Or: %JENKINS_HOME% (if custom location)\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Java Environment Setup**:\n```bash\n# Set JAVA_HOME (Linux/macOS)\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk\necho 'export JAVA_HOME=/usr/lib/jvm/java-17-openjdk' >> ~/.bashrc\n\n# Verify Java installation\njava -version\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/var/lib/jenkins/`, `/etc/sysconfig/jenkins`\n- Debian/Ubuntu: `/var/lib/jenkins/`, `/etc/default/jenkins`\n- Arch Linux: `/var/lib/jenkins/`, `/etc/jenkins/`\n- Alpine Linux: `/var/lib/jenkins/` (Docker) or `/var/lib/jenkins/` (manual)\n- openSUSE/SLES: `/var/lib/jenkins/`, `/etc/sysconfig/jenkins`\n- macOS: `~/.jenkins/` or `/usr/local/var/jenkins_home/`\n- FreeBSD: `/usr/local/jenkins/`\n- Windows: `C:\\Program Files\\Jenkins\\` or `%JENKINS_HOME%`\n\n3. **Essential initial configuration**:\n\n```bash\n# Initial web setup (after accessing http://your-server:8080)\n# 1. Enter admin password from: /var/lib/jenkins/secrets/initialAdminPassword\n# 2. Install suggested plugins or select specific plugins\n# 3. Create first admin user\n# 4. Configure Jenkins URL\n\n# Essential plugins to install:\n# - Pipeline plugins (Pipeline Suite)\n# - Git plugin\n# - Credentials Binding Plugin\n# - Build Timeout Plugin\n# - Timestamper Plugin\n# - Workspace Cleanup Plugin\n# - Blue Ocean (modern UI)\n# - Matrix Authorization Strategy Plugin\n```\n\n### Testing Initial Setup\n\n```bash\n# Check service status\nsudo systemctl status jenkins\n\n# Check web interface\ncurl -I http://localhost:8080\n\n# Test Java version\njava -version\n\n# Check Jenkins process\nps aux | grep jenkins\n\n# Verify Jenkins CLI\nwget http://localhost:8080/jnlpJars/jenkins-cli.jar\njava -jar jenkins-cli.jar -s http://localhost:8080 version\n\n# Check available plugins\njava -jar jenkins-cli.jar -s http://localhost:8080 list-plugins\n```\n\n**WARNING:** Change the default admin password immediately and configure proper authentication!\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Jenkins to start on boot\nsudo systemctl enable jenkins\n\n# Start Jenkins\nsudo systemctl start jenkins\n\n# Stop Jenkins\nsudo systemctl stop jenkins\n\n# Restart Jenkins\nsudo systemctl restart jenkins\n\n# Graceful restart (wait for running builds)\nsudo systemctl reload jenkins\n\n# Check status\nsudo systemctl status jenkins\n\n# View logs\nsudo journalctl -u jenkins -f\n\n# Edit service configuration\nsudo systemctl edit jenkins\n# Add custom environment variables or JVM options\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Docker-based installation\ndocker start jenkins\ndocker stop jenkins\ndocker restart jenkins\n\n# Check container status\ndocker ps | grep jenkins\n\n# View logs\ndocker logs -f jenkins\n\n# Manual installation\nrc-update add jenkins default\nrc-service jenkins start\nrc-service jenkins stop\nrc-service jenkins restart\nrc-service jenkins status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'jenkins_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Jenkins\nservice jenkins start\n\n# Stop Jenkins\nservice jenkins stop\n\n# Restart Jenkins\nservice jenkins restart\n\n# Check status\nservice jenkins status\n\n# View logs\ntail -f /var/log/jenkins/jenkins.log\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start jenkins-lts\nbrew services stop jenkins-lts\nbrew services restart jenkins-lts\n\n# Check status\nbrew services list | grep jenkins\n\n# Manual control\njenkins-lts --httpPort=8080\n\n# View logs\ntail -f /usr/local/var/log/jenkins/jenkins.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Jenkins service\nnet start Jenkins\n\n# Stop Jenkins service\nnet stop Jenkins\n\n# Using PowerShell\nStart-Service Jenkins\nStop-Service Jenkins\nRestart-Service Jenkins\n\n# Check status\nGet-Service Jenkins\n\n# View logs (Windows Event Log)\nGet-EventLog -LogName Application -Source Jenkins\n\n# Or check Jenkins logs\nGet-Content \"C:\\Program Files\\Jenkins\\logs\\jenkins.log\" -Tail 50 -Wait\n```\n\n## Advanced Configuration\n\n### High Availability Configuration\n\n```bash\n# Multi-master setup with shared storage\n# Method 1: Shared filesystem (NFS, GlusterFS)\nsudo mkdir -p /shared/jenkins\nsudo mount -t nfs nfs-server:/jenkins /shared/jenkins\n\n# Update Jenkins home\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JENKINS_HOME=/shared/jenkins\"\n\n# Method 2: Database-backed configuration\n# Install CloudBees Jenkins Enterprise plugins for HA\n# Configure external database (PostgreSQL recommended)\n\n# Agent configuration for load distribution\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml <<EOF\njenkins:\n  nodes:\n    - permanent:\n        name: \"linux-agent-1\"\n        remoteFS: \"/var/lib/jenkins\"\n        numExecutors: 4\n        launcher:\n          ssh:\n            host: \"agent1.example.com\"\n            credentialsId: \"ssh-agent-key\"\n    - permanent:\n        name: \"windows-agent-1\"\n        remoteFS: \"C:\\\\Jenkins\"\n        numExecutors: 2\n        launcher:\n          command:\n            command: \"java -jar agent.jar\"\nEOF\n```\n\n### Advanced Security Settings\n\n```bash\n# Configure Jenkins Configuration as Code (JCasC) for security\nsudo tee /var/lib/jenkins/casc_configs/security.yaml <<EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ldap.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          userSearchBase: \"OU=Users\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-password\"\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"admin\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"jenkins-admins\"\n          - name: \"developer\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Build\"\n              - \"Job/Read\"\n            assignments:\n              - \"developers\"\n\nsecurity:\n  globalJobDslSecurityConfiguration:\n    useScriptSecurity: true\n  scriptApproval:\n    approvedSignatures:\n      - \"method java.lang.String trim\"\n      - \"staticMethod java.lang.System getProperty java.lang.String\"\n\nunclassified:\n  location:\n    adminAddress: \"jenkins@example.com\"\n    url: \"https://jenkins.example.com/\"\n    \n  mailer:\n    smtpHost: \"smtp.example.com\"\n    smtpPort: 587\n    charset: \"UTF-8\"\n    authentication:\n      username: \"jenkins@example.com\"\n      password: \"{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}\"\n    useSsl: false\n    useTls: true\nEOF\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/jenkins\nupstream jenkins {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name jenkins.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jenkins.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jenkins.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.example.com/privkey.pem;\n    \n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    client_max_body_size 100M;\n    \n    location / {\n        proxy_pass http://jenkins;\n        proxy_redirect default;\n        proxy_http_version 1.1;\n        \n        # Required headers for Jenkins\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        \n        # WebSocket support for Jenkins\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeout settings\n        proxy_connect_timeout 90;\n        proxy_send_timeout 90;\n        proxy_read_timeout 90;\n        \n        proxy_buffering off;\n        proxy_request_buffering off;\n        proxy_max_temp_file_size 0;\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend jenkins_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jenkins.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend jenkins_servers\n\nbackend jenkins_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /login\n    http-check expect status 200\n    server jenkins1 127.0.0.1:8080 check inter 30s rise 2 fall 3\n    server jenkins2 127.0.0.1:8081 check inter 30s rise 2 fall 3 backup\n\n    # Headers for Jenkins\n    http-request set-header X-Forwarded-Proto https\n    http-request set-header X-Forwarded-Port %[dst_port]\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n```\n\n### Apache HTTP Server Configuration\n\n```apache\n# /etc/apache2/sites-available/jenkins.conf\n<VirtualHost *:80>\n    ServerName jenkins.example.com\n    Redirect permanent / https://jenkins.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName jenkins.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/jenkins.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/jenkins.example.com/privkey.pem\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyPreserveHost On\n    ProxyRequests Off\n    \n    ProxyPass / http://127.0.0.1:8080/ nocanon\n    ProxyPassReverse / http://127.0.0.1:8080/\n    ProxyPassReverse  /  http://jenkins.example.com/\n    \n    # WebSocket support\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8080/$1\" [P,L]\n    \n    AllowEncodedSlashes NoDecode\n</VirtualHost>\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate self-signed certificate (development only)\nsudo mkdir -p /etc/jenkins/ssl\nsudo openssl req -x509 -newkey rsa:4096 -keyout /etc/jenkins/ssl/jenkins.key -out /etc/jenkins/ssl/jenkins.crt -days 365 -nodes -subj \"/C=US/ST=State/L=City/O=Organization/CN=jenkins.example.com\"\n\n# Create Java keystore\nsudo keytool -genkey -alias jenkins -keyalg RSA -keystore /etc/jenkins/ssl/jenkins.jks -keysize 2048 -dname \"CN=jenkins.example.com,OU=IT,O=Organization,L=City,ST=State,C=US\" -storepass changeit -keypass changeit\n\n# Configure Jenkins to use HTTPS\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JENKINS_OPTS=--httpPort=-1 --httpsPort=8443 --httpsKeyStore=/etc/jenkins/ssl/jenkins.jks --httpsKeyStorePassword=changeit\"\n\nsudo systemctl restart jenkins\n\n# Or use Let's Encrypt with reverse proxy (recommended)\nsudo certbot --nginx -d jenkins.example.com\n```\n\n### Authentication and Authorization\n\n```bash\n# Configure LDAP authentication via JCasC\nsudo tee /var/lib/jenkins/casc_configs/auth.yaml <<EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ldap.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          inhibitInferRootDN: false\n          userSearchBase: \"OU=Users\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups\"\n          groupSearchFilter: \"(&(objectClass=group)(cn={0}))\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-password\"\n          displayNameAttributeName: \"displayName\"\n          mailAddressAttributeName: \"mail\"\n\n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"jenkins-admins\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"Domain Admins\"\n              - \"jenkins-admins\"\n          - name: \"developers\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Build\"\n              - \"Job/Cancel\"\n              - \"Job/Read\"\n              - \"Job/Workspace\"\n              - \"Run/Replay\"\n              - \"Run/Update\"\n            assignments:\n              - \"developers\"\n              - \"authenticated\"\n          - name: \"viewers\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Read\"\n            assignments:\n              - \"viewers\"\n              \ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"ldap-password\"\n              username: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n              password: \"{AQAAABAAAAAQSecureEncryptedPassword=}\"\n              description: \"LDAP Service Account\"\n          - basicSSHUserPrivateKey:\n              scope: GLOBAL\n              id: \"ssh-agent-key\"\n              username: \"jenkins\"\n              description: \"SSH key for Jenkins agents\"\n              privateKeySource:\n                directEntry:\n                  privateKey: |\n                    -----BEGIN OPENSSH PRIVATE KEY-----\n                    EncryptedPrivateKeyContentHere\n                    -----END OPENSSH PRIVATE KEY-----\nEOF\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 8080\nsudo ufw allow from 192.168.1.0/24 to any port 50000\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=jenkins\nsudo firewall-cmd --permanent --zone=jenkins --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=jenkins --add-port=8080/tcp\nsudo firewall-cmd --permanent --zone=jenkins --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 8080 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 50000 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {8080, 50000}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Jenkins HTTP\" -Direction Inbound -Protocol TCP -LocalPort 8080 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName \"Jenkins Agent\" -Direction Inbound -Protocol TCP -LocalPort 50000 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### External Database Configuration (PostgreSQL)\n\n```bash\n# Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Create Jenkins database\nsudo -u postgres createdb jenkinsdb\nsudo -u postgres createuser jenkinsuser\nsudo -u postgres psql -c \"ALTER USER jenkinsuser WITH PASSWORD 'SecureJenkinsPassword123!';\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;\"\n\n# Download PostgreSQL driver\nwget https://jdbc.postgresql.org/download/postgresql-42.6.0.jar -O /var/lib/jenkins/postgresql-connector.jar\n\n# Configure Jenkins to use PostgreSQL\nsudo tee -a /etc/default/jenkins <<EOF\n# PostgreSQL database configuration\nJENKINS_JAVA_OPTIONS=\"-Djenkins.install.runSetupWizard=false -Dhudson.model.DirectoryBrowserSupport.CSP=\\\"sandbox allow-scripts; default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';\\\"\"\nEOF\n\n# Create database configuration\nsudo tee /var/lib/jenkins/database-config.xml <<EOF\n<databaseConfiguration>\n  <database class=\"org.jenkinsci.plugins.database.postgresql.PostgreSQLDatabase\">\n    <hostname>localhost</hostname>\n    <port>5432</port>\n    <database>jenkinsdb</database>\n    <username>jenkinsuser</username>\n    <password>{AQAAABAAAAAQEncryptedPasswordHere=}</password>\n    <properties>sslmode=require</properties>\n  </database>\n</databaseConfiguration>\nEOF\n```\n\n### Backup Database Schema\n\n```bash\n# Create database schema backup\nsudo -u postgres pg_dump jenkinsdb > /backup/jenkins/jenkinsdb-schema-$(date +%Y%m%d).sql\n\n# Create Jenkins jobs and configuration backup\nsudo tee /usr/local/bin/jenkins-db-backup.sh <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/jenkins/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# PostgreSQL backup\nsudo -u postgres pg_dump jenkinsdb | gzip > \"$BACKUP_DIR/jenkinsdb.sql.gz\"\n\n# Jenkins configuration backup\ntar -czf \"$BACKUP_DIR/jenkins-config.tar.gz\" \\\n  --exclude=\"/var/lib/jenkins/workspace/*\" \\\n  --exclude=\"/var/lib/jenkins/builds/*/archive\" \\\n  --exclude=\"/var/lib/jenkins/logs/*\" \\\n  /var/lib/jenkins/\n\necho \"Database backup completed: $BACKUP_DIR\"\nEOF\n\nchmod +x /usr/local/bin/jenkins-db-backup.sh\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Jenkins-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# Jenkins optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\njenkins soft nofile 65535\njenkins hard nofile 65535\njenkins soft nproc 32768\njenkins hard nproc 32768\nEOF\n\n# Optimize Jenkins JVM settings\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+DisableExplicitGC -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\"\nEnvironment=\"JENKINS_OPTS=--sessionTimeout=1440 --sessionEviction=86400\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n```\n\n### Jenkins Performance Configuration\n\n```bash\n# Configure Jenkins for high performance\nsudo tee /var/lib/jenkins/casc_configs/performance.yaml <<EOF\njenkins:\n  systemMessage: \"High-Performance Jenkins Instance\"\n  numExecutors: 0  # Don't run builds on controller\n  mode: EXCLUSIVE\n  quietPeriod: 5\n  scmCheckoutRetryCount: 3\n  \n  # Global pipeline libraries for shared code\n  globalLibraries:\n    libraries:\n      - name: \"shared-pipeline-library\"\n        defaultVersion: \"main\"\n        implicit: true\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: \"https://github.com/example/jenkins-shared-library.git\"\n                credentialsId: \"github-token\"\n\n  # Configure build discarders globally\n  buildDiscarders:\n    configuredBuildDiscarders:\n      - \"logRotator\":\n          artifactDaysToKeepStr: \"30\"\n          artifactNumToKeepStr: \"10\"\n          daysToKeepStr: \"30\"\n          numToKeepStr: \"100\"\n\nunclassified:\n  # Configure global timeout\n  buildTimeout:\n    operations:\n      - timeoutMinutes: 60\n      - failBuild: true\n      - writingDescription: true\n      \n  # Workspace cleanup configuration  \n  wsCleanup:\n    deleteDirs: true\n    cleanupMatrixParent: true\n    skipWhenFailed: false\n    \ntool:\n  # Configure tools for performance\n  git:\n    installations:\n      - name: \"Default\"\n        home: \"/usr/bin/git\"\n        \n  maven:\n    installations:\n      - name: \"Maven 3.9\"\n        properties:\n          - installSource:\n              installers:\n                - maven:\n                    id: \"3.9.6\"\n                    \n  gradle:\n    installations:\n      - name: \"Gradle 8\"\n        properties:\n          - installSource:\n              installers:\n                - gradleInstaller:\n                    id: \"8.4\"\n\n  nodejs:\n    installations:\n      - name: \"NodeJS 18\"\n        properties:\n          - installSource:\n              installers:\n                - nodeJSInstaller:\n                    id: \"18.18.2\"\n                    \n  dockerTool:\n    installations:\n      - name: \"Docker\"\n        properties:\n          - installSource:\n              installers:\n                - dockerInstaller:\n                    version: \"latest\"\nEOF\n\n# Configure agent templates for auto-scaling\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml <<EOF\njenkins:\n  clouds:\n    - kubernetes:\n        name: \"kubernetes\"\n        serverUrl: \"https://kubernetes.default.svc.cluster.local\"\n        namespace: \"jenkins\"\n        credentialsId: \"kubernetes-token\"\n        jenkinsUrl: \"http://jenkins.jenkins.svc.cluster.local:8080\"\n        jenkinsTunnel: \"jenkins-agent.jenkins.svc.cluster.local:50000\"\n        connectTimeout: 300\n        readTimeout: 300\n        containerCapStr: 100\n        templates:\n          - name: \"jenkins-agent\"\n            namespace: \"jenkins\"\n            label: \"kubernetes docker\"\n            nodeUsageMode: EXCLUSIVE\n            containers:\n              - name: \"jnlp\"\n                image: \"jenkins/inbound-agent:latest\"\n                alwaysPullImage: true\n                workingDir: \"/home/jenkins/agent\"\n                command: \"\"\n                args: \"\"\n                resourceRequestCpu: \"500m\"\n                resourceRequestMemory: \"1Gi\"\n                resourceLimitCpu: \"2\"\n                resourceLimitMemory: \"4Gi\"\n            volumes:\n              - hostPathVolume:\n                  hostPath: \"/var/run/docker.sock\"\n                  mountPath: \"/var/run/docker.sock\"\nEOF\n```\n\n### Pipeline Optimization\n\n```groovy\n// Optimized Jenkins Pipeline Template\n// /var/lib/jenkins/pipeline-templates/optimized-pipeline.groovy\n@Library('shared-pipeline-library') _\n\npipeline {\n    agent {\n        label 'docker && linux'\n    }\n    \n    options {\n        buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '10'))\n        timeout(time: 120, unit: 'MINUTES')\n        timestamps()\n        skipDefaultCheckout(true)\n        disableConcurrentBuilds()\n        ansiColor('xterm')\n        parallelsAlwaysFailFast()\n        copyArtifactPermission('*')\n    }\n    \n    environment {\n        DOCKER_REGISTRY = credentials('docker-registry-url')\n        MAVEN_OPTS = '-Xmx2g -XX:+UseG1GC'\n        GRADLE_OPTS = '-Xmx2g -Dorg.gradle.daemon=false'\n        CI = 'true'\n    }\n    \n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n                script {\n                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(8)\n                    env.BUILD_VERSION = \"${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}\"\n                }\n            }\n        }\n        \n        stage('Parallel Analysis') {\n            parallel {\n                stage('Code Quality') {\n                    steps {\n                        script {\n                            // SonarQube analysis\n                            withSonarQubeEnv('SonarQube') {\n                                sh '''\n                                    mvn sonar:sonar \\\n                                        -Dsonar.projectKey=${JOB_NAME} \\\n                                        -Dsonar.projectVersion=${BUILD_VERSION} \\\n                                        -Dsonar.sources=src/main \\\n                                        -Dsonar.tests=src/test \\\n                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml\n                                '''\n                            }\n                            \n                            timeout(time: 10, unit: 'MINUTES') {\n                                waitForQualityGate abortPipeline: true\n                            }\n                        }\n                    }\n                }\n                \n                stage('Security Scan') {\n                    steps {\n                        // OWASP Dependency Check\n                        dependencyCheck additionalArguments: '''\n                            --enableRetired\n                            --enableExperimental  \n                            --scan ./\n                            --format JSON\n                            --format HTML\n                            --suppression dependency-check-suppressions.xml\n                        ''', odcInstallation: 'dependency-check-8.4.0'\n                        \n                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'\n                        \n                        // Secret scanning\n                        sh '''\n                            docker run --rm -v $(pwd):/repo \\\n                                trufflesecurity/trufflehog:latest \\\n                                git file:///repo \\\n                                --json \\\n                                --fail > trufflehog-results.json || true\n                        '''\n                    }\n                }\n                \n                stage('Test') {\n                    steps {\n                        sh '''\n                            # Parallel test execution\n                            mvn clean test \\\n                                -Dmaven.test.failure.ignore=true \\\n                                -Dspring.profiles.active=test \\\n                                -Djunit.jupiter.execution.parallel.enabled=true \\\n                                -Djunit.jupiter.execution.parallel.mode.default=concurrent\n                        '''\n                        \n                        publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'\n                        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], \n                                       sourceFileResolver: sourceFiles('STORE_LAST_BUILD')\n                    }\n                    post {\n                        always {\n                            archiveArtifacts artifacts: 'target/surefire-reports/**', allowEmptyArchive: true\n                        }\n                    }\n                }\n            }\n        }\n        \n        stage('Build & Package') {\n            steps {\n                sh '''\n                    # Optimized build with parallel processing\n                    mvn clean package \\\n                        -DskipTests \\\n                        -T 2C \\\n                        -Dspring.profiles.active=production \\\n                        -Dmaven.javadoc.skip=true\n                '''\n                \n                // Docker build with BuildKit\n                script {\n                    def image = docker.build(\"${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\", \n                                           \"--build-arg BUILD_VERSION=${env.BUILD_VERSION} .\")\n                    \n                    // Security scanning with Trivy\n                    sh \"\"\"\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --format table \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\n                    \"\"\"\n                    \n                    image.push()\n                    image.push(\"latest\")\n                }\n            }\n        }\n        \n        stage('Deploy') {\n            when {\n                anyOf {\n                    branch 'main'\n                    branch 'develop'\n                    branch 'release/*'\n                }\n            }\n            parallel {\n                stage('Staging') {\n                    when { branch 'develop' }\n                    steps {\n                        script {\n                            // Deploy to staging environment\n                            sh '''\n                                kubectl set image deployment/myapp-staging \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=staging\n                                \n                                kubectl rollout status deployment/myapp-staging \\\n                                    --namespace=staging --timeout=300s\n                            '''\n                            \n                            // Run smoke tests\n                            sh '''\n                                curl -f http://myapp-staging.example.com/health || exit 1\n                                npm run test:e2e -- --base-url http://myapp-staging.example.com\n                            '''\n                        }\n                    }\n                }\n                \n                stage('Production') {\n                    when { \n                        anyOf {\n                            branch 'main'\n                            branch 'release/*'\n                        }\n                    }\n                    steps {\n                        // Manual approval for production\n                        timeout(time: 60, unit: 'MINUTES') {\n                            input message: 'Deploy to production?', \n                                  ok: 'Deploy',\n                                  submitterParameter: 'APPROVER'\n                        }\n                        \n                        script {\n                            sh '''\n                                # Blue-green deployment\n                                kubectl set image deployment/myapp-production \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=production\n                                \n                                kubectl rollout status deployment/myapp-production \\\n                                    --namespace=production --timeout=600s\n                            '''\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            // Cleanup workspace\n            cleanWs()\n            \n            // Archive artifacts\n            archiveArtifacts artifacts: 'target/*.jar,docker-compose.yml', \n                           allowEmptyArchive: true, \n                           fingerprint: true\n                           \n            // Collect build metrics\n            script {\n                def buildDuration = currentBuild.duration / 1000\n                echo \"Build completed in ${buildDuration} seconds\"\n                \n                // Custom metrics collection\n                sh \"\"\"\n                    echo \"build_duration_seconds{job=\\\"${env.JOB_NAME}\\\",build=\\\"${env.BUILD_NUMBER}\\\"} ${buildDuration}\" > build-metrics.txt\n                \"\"\"\n                \n                archiveArtifacts artifacts: 'build-metrics.txt', allowEmptyArchive: true\n            }\n        }\n        \n        success {\n            // Success notifications\n            emailext(\n                subject: \"✅ Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"\"\"Build successful for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n                         \n                Build URL: ${env.BUILD_URL}\n                Git Commit: ${env.GIT_COMMIT}\n                Duration: ${currentBuild.durationString}\n                Approver: ${env.APPROVER ?: 'Automatic'}\"\"\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n            \n            slackSend(\n                channel: '#deployments',\n                color: 'good',\n                message: \"✅ Deployment Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER} by ${env.APPROVER ?: 'System'}\"\n            )\n        }\n        \n        failure {\n            emailext(\n                subject: \"❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build failed for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n            \n            slackSend(\n                channel: '#ci-cd-alerts',\n                color: 'danger',\n                message: \"❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|View Details>)\"\n            )\n        }\n        \n        unstable {\n            emailext(\n                subject: \"⚠️  Build Unstable: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build unstable for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n        }\n    }\n}\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Jenkins CLI monitoring commands\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password version\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-jobs\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-builds job-name\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password get-build job-name 1\n\n# System information\ncurl -u admin:password http://localhost:8080/systemInfo\n\n# Build queue status\ncurl -u admin:password http://localhost:8080/queue/api/json\n\n# Node status\ncurl -u admin:password http://localhost:8080/computer/api/json\n\n# Plugin information\ncurl -u admin:password http://localhost:8080/pluginManager/api/json?depth=1\n```\n\n### External Monitoring Setup\n\n```bash\n# Install Jenkins Prometheus Plugin and configure metrics\n# Via Jenkins UI: Manage Jenkins > Manage Plugins > Available > Prometheus metrics plugin\n\n# Configure Prometheus to scrape Jenkins metrics\nsudo tee /etc/prometheus/jenkins.yml <<EOF\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'jenkins'\n    static_configs:\n      - targets: ['localhost:8080']\n    metrics_path: /prometheus/\n    scrape_interval: 30s\n    scrape_timeout: 10s\nEOF\n\n# Install Jenkins Exporter (alternative)\nwget https://github.com/lovoo/jenkins_exporter/releases/download/v1.0.0/jenkins_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf jenkins_exporter-*.tar.gz\nsudo cp jenkins_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/jenkins_exporter.service <<EOF\n[Unit]\nDescription=Jenkins Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=jenkins\nExecStart=/usr/local/bin/jenkins_exporter \\\n    --jenkins.address=http://localhost:8080 \\\n    --jenkins.username=monitoring \\\n    --jenkins.password=MonitoringPassword123! \\\n    --web.listen-address=:9118\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now jenkins_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# jenkins-health-check.sh\n\nJENKINS_URL=\"http://localhost:8080\"\nHEALTH_LOG=\"/var/log/jenkins-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    log_message \"✅ Jenkins service is running\"\nelse\n    log_message \"❌ Jenkins service is not running\"\n    exit 2\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" ${JENKINS_URL}/login)\nif [ \"${HTTP_STATUS}\" = \"200\" ]; then\n    log_message \"✅ Jenkins web interface responding (HTTP ${HTTP_STATUS})\"\nelse\n    log_message \"❌ Jenkins web interface issues (HTTP ${HTTP_STATUS})\"\n    exit 2\nfi\n\n# Check disk space\nJENKINS_HOME_USAGE=$(df /var/lib/jenkins | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${JENKINS_HOME_USAGE} -gt 85 ]; then\n    log_message \"⚠️  High disk usage: ${JENKINS_HOME_USAGE}%\"\n    exit 1\nelse\n    log_message \"✅ Jenkins home disk usage: ${JENKINS_HOME_USAGE}%\"\nfi\n\n# Check memory usage\nJAVA_MEMORY=$(ps -o pid,vsz,rss,comm -C java | grep jenkins | awk '{rss+=$3} END {print rss/1024}')\nif (( $(echo \"${JAVA_MEMORY} > 6144\" | bc -l) )); then\n    log_message \"⚠️  High memory usage: ${JAVA_MEMORY}MB\"\n    exit 1\nelse\n    log_message \"✅ Jenkins memory usage: ${JAVA_MEMORY}MB\"\nfi\n\n# Check running builds (if Jenkins CLI is available)\nif [ -f /var/lib/jenkins/jenkins-cli.jar ]; then\n    RUNNING_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2>/dev/null | grep -c \"RUNNING\" || echo \"0\")\n    log_message \"ℹ️  Running builds: ${RUNNING_BUILDS}\"\n    \n    # Check for failed builds in last 24 hours\n    FAILED_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2>/dev/null | grep -c \"FAILURE\" || echo \"0\")\n    if [ ${FAILED_BUILDS} -gt 5 ]; then\n        log_message \"⚠️  High number of failed builds: ${FAILED_BUILDS}\"\n        exit 1\n    fi\nfi\n\n# Check plugin health\nPLUGIN_ERRORS=$(curl -s ${JENKINS_URL}/pluginManager/api/json?depth=1 | jq '.plugins[] | select(.hasUpdate==true or .enabled==false) | .shortName' | wc -l)\nif [ ${PLUGIN_ERRORS} -gt 0 ]; then\n    log_message \"⚠️  Plugins need attention: ${PLUGIN_ERRORS}\"\nfi\n\nlog_message \"✅ Jenkins health check completed\"\nexit 0\n```\n\n## 9. Backup and Restore\n\n### Comprehensive Backup Strategy\n\n```bash\n#!/bin/bash\n# jenkins-backup.sh\n\nBACKUP_DIR=\"/backup/jenkins\"\nDATE=$(date +%Y%m%d_%H%M%S)\nJENKINS_HOME=\"/var/lib/jenkins\"\nRETENTION_DAYS=14\n\nmkdir -p ${BACKUP_DIR}/{config,jobs,plugins,secrets,workspace}\n\necho \"Starting Jenkins comprehensive backup...\"\n\n# Function to gracefully shutdown Jenkins\ngraceful_shutdown() {\n    echo \"Putting Jenkins in quiet mode...\"\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! quiet-down\n    \n    # Wait for running builds to complete (max 20 minutes)\n    for i in {1..120}; do\n        RUNNING_BUILDS=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-builds | grep -c \"RUNNING\" || echo \"0\")\n        if [ \"$RUNNING_BUILDS\" -eq 0 ]; then\n            echo \"All builds completed, stopping Jenkins...\"\n            systemctl stop jenkins\n            break\n        fi\n        echo \"Waiting for $RUNNING_BUILDS running builds to complete... (${i}/120)\"\n        sleep 10\n    done\n    \n    if [ \"$RUNNING_BUILDS\" -gt 0 ]; then\n        echo \"Warning: Stopping Jenkins with $RUNNING_BUILDS builds still running\"\n        systemctl stop jenkins\n    fi\n}\n\n# Function to start Jenkins\nstart_jenkins() {\n    echo \"Starting Jenkins...\"\n    systemctl start jenkins\n    \n    # Wait for Jenkins to be ready\n    for i in {1..60}; do\n        if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n            echo \"Jenkins is ready, canceling quiet mode...\"\n            java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! cancel-quiet-down\n            break\n        fi\n        echo \"Waiting for Jenkins to start... (${i}/60)\"\n        sleep 10\n    done\n}\n\n# Gracefully shutdown Jenkins\ngraceful_shutdown\n\n# Full Jenkins home backup (excluding large/temporary directories)\necho \"Creating full Jenkins home backup...\"\ntar --exclude=\"${JENKINS_HOME}/workspace/*\" \\\n    --exclude=\"${JENKINS_HOME}/builds/*/archive\" \\\n    --exclude=\"${JENKINS_HOME}/logs/*\" \\\n    --exclude=\"${JENKINS_HOME}/.m2/repository\" \\\n    --exclude=\"${JENKINS_HOME}/caches\" \\\n    --exclude=\"${JENKINS_HOME}/war\" \\\n    -czf ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz \\\n    -C ${JENKINS_HOME} .\n\n# Job configurations backup\necho \"Backing up job configurations...\"\nmkdir -p ${BACKUP_DIR}/jobs\nfind ${JENKINS_HOME}/jobs -name \"config.xml\" -exec cp {} ${BACKUP_DIR}/jobs/ \\;\ntar -czf ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz -C ${BACKUP_DIR}/jobs .\nrm ${BACKUP_DIR}/jobs/config.xml 2>/dev/null\n\n# Plugins backup\necho \"Backing up installed plugins...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-plugins > ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt\ncp -r ${JENKINS_HOME}/plugins ${BACKUP_DIR}/plugins/plugins-${DATE}/ 2>/dev/null\n\n# Secrets and credentials backup\necho \"Backing up secrets and credentials...\"\nif [ -d \"${JENKINS_HOME}/secrets\" ]; then\n    tar -czf ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz -C ${JENKINS_HOME} secrets/\nfi\n\n# System configuration backup\necho \"Backing up system configuration...\"\ntar -czf ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz \\\n    /etc/default/jenkins \\\n    /etc/sysconfig/jenkins \\\n    /etc/systemd/system/jenkins.service.d/ 2>/dev/null\n\n# Database backup (if using external database)\nif [ -f \"${JENKINS_HOME}/database-config.xml\" ]; then\n    echo \"Backing up external database...\"\n    sudo -u postgres pg_dump jenkinsdb | gzip > ${BACKUP_DIR}/config/jenkinsdb-${DATE}.sql.gz\nfi\n\n# Start Jenkins\nstart_jenkins\n\n# Cloud backup (uncomment and configure as needed)\n# aws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/${DATE}/ --recursive --sse AES256\n# az storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups --destination-path ${DATE}\n# gsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/${DATE}/\n\n# Verify backup integrity\necho \"Verifying backup integrity...\"\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz | head -1)\nif tar -tzf \"$LATEST_BACKUP\" >/dev/null 2>&1; then\n    echo \"✅ Backup integrity verified\"\n    BACKUP_SIZE=$(du -h \"$LATEST_BACKUP\" | cut -f1)\n    echo \"Backup size: $BACKUP_SIZE\"\nelse\n    echo \"❌ Backup integrity check failed\"\n    exit 1\nfi\n\n# Cleanup old backups\necho \"Cleaning up old backups (keeping last $RETENTION_DAYS days)...\"\nfind ${BACKUP_DIR} -name \"jenkins-*\" -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name \"plugin-list-*\" -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name \"*-${DATE}*\" -type d -mtime +${RETENTION_DAYS} -exec rm -rf {} \\;\n\n# Generate backup report\necho \"Generating backup report...\"\ncat > ${BACKUP_DIR}/backup-report-${DATE}.txt <<EOF\nJenkins Backup Report - ${DATE}\n================================\n\nBackup Location: ${BACKUP_DIR}\nJenkins Home: ${JENKINS_HOME}\nBackup Date: $(date)\nServer: $(hostname)\n\nFiles backed up:\n- Jenkins Home: $(ls -lh ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz)\n- Job Configs: $(ls -lh ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz)\n- Plugins: $(ls -lh ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt)\n- Secrets: $(ls -lh ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz 2>/dev/null || echo \"No secrets backup\")\n- System Config: $(ls -lh ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz 2>/dev/null || echo \"No system config backup\")\n\nTotal Backup Size: $(du -h ${BACKUP_DIR} | tail -1 | cut -f1)\n\nVerification: ✅ Passed\nEOF\n\necho \"✅ Jenkins backup completed: ${DATE}\"\necho \"📊 Backup report: ${BACKUP_DIR}/backup-report-${DATE}.txt\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# jenkins-restore.sh\n\nBACKUP_FILE=\"${1}\"\nRESTORE_TYPE=\"${2:-full}\"  # full, config-only, jobs-only\n\nusage() {\n    echo \"Usage: $0 <backup_file> [restore_type]\"\n    echo \"Restore types: full (default), config-only, jobs-only\"\n    echo \"\"\n    echo \"Available backups:\"\n    ls -la /backup/jenkins/config/jenkins-home-*.tar.gz | head -10\n    exit 1\n}\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    usage\nfi\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"❌ Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\necho \"🔄 Starting Jenkins restore from: $BACKUP_FILE\"\necho \"Restore type: $RESTORE_TYPE\"\n\n# Pre-restore backup of current state\nif [ -d \"/var/lib/jenkins\" ]; then\n    echo \"📦 Creating backup of current installation...\"\n    CURRENT_BACKUP=\"/backup/jenkins/pre-restore-$(date +%s)\"\n    mkdir -p \"$CURRENT_BACKUP\"\n    mv /var/lib/jenkins \"$CURRENT_BACKUP/jenkins-$(date +%Y%m%d_%H%M%S)\"\n    echo \"Current installation backed up to: $CURRENT_BACKUP\"\nfi\n\n# Stop Jenkins\necho \"⏹️  Stopping Jenkins...\"\nsystemctl stop jenkins\n\ncase \"$RESTORE_TYPE\" in\n    \"full\")\n        echo \"🔄 Performing full restore...\"\n        \n        # Create new Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Restore from backup\n        echo \"📂 Extracting backup archive...\"\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins\n        \n        # Set proper ownership\n        chown -R jenkins:jenkins /var/lib/jenkins\n        chmod -R 755 /var/lib/jenkins\n        \n        # Special permissions for secrets\n        if [ -d \"/var/lib/jenkins/secrets\" ]; then\n            chmod 700 /var/lib/jenkins/secrets\n            chmod 600 /var/lib/jenkins/secrets/*\n        fi\n        ;;\n        \n    \"config-only\")\n        echo \"🔄 Performing configuration-only restore...\"\n        \n        # Create minimal Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Extract only configuration files\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins \\\n            --include=\"*/config.xml\" \\\n            --include=\"*/secrets/*\" \\\n            --include=\"*/users/*\" \\\n            --include=\"*/plugins/*\" \\\n            --exclude=\"*/workspace/*\" \\\n            --exclude=\"*/builds/*\"\n            \n        chown -R jenkins:jenkins /var/lib/jenkins\n        ;;\n        \n    \"jobs-only\")\n        echo \"🔄 Performing jobs-only restore...\"\n        \n        if [ ! -d \"/var/lib/jenkins\" ]; then\n            echo \"❌ Jenkins directory not found. Cannot restore jobs only.\"\n            exit 1\n        fi\n        \n        # Backup current jobs\n        if [ -d \"/var/lib/jenkins/jobs\" ]; then\n            mv /var/lib/jenkins/jobs \"/var/lib/jenkins/jobs.backup.$(date +%s)\"\n        fi\n        \n        # Extract only jobs\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins jobs/\n        chown -R jenkins:jenkins /var/lib/jenkins/jobs\n        ;;\n        \n    *)\n        echo \"❌ Unknown restore type: $RESTORE_TYPE\"\n        usage\n        ;;\nesac\n\n# Restore system configuration if available\nBACKUP_DIR=$(dirname \"$BACKUP_FILE\")\nBACKUP_DATE=$(basename \"$BACKUP_FILE\" .tar.gz | sed 's/jenkins-home-//')\nSYSTEM_CONFIG=\"${BACKUP_DIR}/../config/system-config-${BACKUP_DATE}.tar.gz\"\n\nif [ -f \"$SYSTEM_CONFIG\" ]; then\n    echo \"🔧 Restoring system configuration...\"\n    tar -xzf \"$SYSTEM_CONFIG\" -C / 2>/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=\"${BACKUP_DIR}/jenkinsdb-${BACKUP_DATE}.sql.gz\"\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"🗄️  Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql jenkinsdb\nfi\n\n# Start Jenkins\necho \"▶️  Starting Jenkins...\"\nsystemctl start jenkins\n\n# Wait for Jenkins to start and verify\necho \"⏳ Waiting for Jenkins to start...\"\nfor i in {1..120}; do\n    if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n        echo \"✅ Jenkins started successfully\"\n        break\n    fi\n    echo \"Waiting for Jenkins to start... (${i}/120)\"\n    sleep 10\ndone\n\n# Verify restoration\necho \"🔍 Verifying restoration...\"\nif curl -f http://localhost:8080/login >/dev/null 2>&1; then\n    echo \"✅ Jenkins is responding\"\n    \n    # Check if jobs were restored\n    if [ -d \"/var/lib/jenkins/jobs\" ]; then\n        JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs | wc -l)\n        echo \"📋 Jobs restored: $JOB_COUNT\"\n    fi\n    \n    # Check if plugins were restored\n    if [ -d \"/var/lib/jenkins/plugins\" ]; then\n        PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins | wc -l)\n        echo \"🔌 Plugins restored: $PLUGIN_COUNT\"\n    fi\n    \n    echo \"✅ Jenkins restoration completed successfully\"\n    echo \"\"\n    echo \"📝 Next steps:\"\n    echo \"1. Verify Jenkins configuration via web interface\"\n    echo \"2. Check plugin compatibility and update if needed\"\n    echo \"3. Verify job configurations and test builds\"\n    echo \"4. Update any environment-specific settings\"\n    \nelse\n    echo \"❌ Jenkins restoration failed - service not responding\"\n    echo \"Check logs: journalctl -u jenkins -n 50\"\n    exit 1\nfi\n```\n\n### Disaster Recovery\n\n```bash\n#!/bin/bash\n# jenkins-disaster-recovery.sh\n\necho \"🚨 Jenkins Disaster Recovery Procedure\"\necho \"======================================\"\n\n# Check if Jenkins is running\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    echo \"⚠️  Jenkins is running. This procedure should be run on a failed system.\"\n    read -p \"Continue anyway? (y/N): \" -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        exit 1\n    fi\nfi\n\n# Find latest backup\nBACKUP_DIR=\"/backup/jenkins\"\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz 2>/dev/null | head -1)\n\nif [ -z \"$LATEST_BACKUP\" ]; then\n    echo \"❌ No backups found in ${BACKUP_DIR}\"\n    echo \"Please restore from cloud backup or external storage\"\n    exit 1\nfi\n\necho \"📦 Latest backup found: $LATEST_BACKUP\"\necho \"📅 Backup date: $(basename \"$LATEST_BACKUP\" .tar.gz | sed 's/jenkins-home-//')\"\n\n# Verify backup integrity\necho \"🔍 Verifying backup integrity...\"\nif tar -tzf \"$LATEST_BACKUP\" >/dev/null 2>&1; then\n    echo \"✅ Backup integrity verified\"\nelse\n    echo \"❌ Backup is corrupted. Cannot proceed with recovery.\"\n    exit 1\nfi\n\n# Create disaster recovery log\nDR_LOG=\"/var/log/jenkins-disaster-recovery-$(date +%Y%m%d_%H%M%S).log\"\nexec > >(tee -a \"$DR_LOG\")\nexec 2>&1\n\necho \"📝 Disaster recovery log: $DR_LOG\"\n\n# System preparation\necho \"🔧 Preparing system for recovery...\"\n\n# Install Jenkins if not present\nif ! command -v jenkins >/dev/null 2>&1; then\n    echo \"📦 Installing Jenkins...\"\n    # Add Jenkins repository and install (distribution-specific commands)\n    if [ -f /etc/debian_version ]; then\n        wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n        echo \"deb https://pkg.jenkins.io/debian-stable binary/\" > /etc/apt/sources.list.d/jenkins.list\n        apt-get update\n        apt-get install -y openjdk-17-jdk jenkins\n    elif [ -f /etc/redhat-release ]; then\n        yum install -y java-17-openjdk jenkins\n    fi\nfi\n\n# Stop Jenkins service\nsystemctl stop jenkins\n\n# Clear existing Jenkins data\nif [ -d \"/var/lib/jenkins\" ]; then\n    echo \"🗑️  Removing existing Jenkins data...\"\n    rm -rf /var/lib/jenkins.disaster-backup-$(date +%s)\n    mv /var/lib/jenkins /var/lib/jenkins.disaster-backup-$(date +%s)\nfi\n\n# Create new Jenkins directory\nmkdir -p /var/lib/jenkins\n\n# Restore from backup\necho \"🔄 Restoring Jenkins from backup...\"\ntar -xzf \"$LATEST_BACKUP\" -C /var/lib/jenkins\n\n# Set proper permissions\nchown -R jenkins:jenkins /var/lib/jenkins\nchmod -R 755 /var/lib/jenkins\n\n# Special permissions for sensitive files\nif [ -d \"/var/lib/jenkins/secrets\" ]; then\n    chmod 700 /var/lib/jenkins/secrets\n    chmod 600 /var/lib/jenkins/secrets/*\nfi\n\nif [ -d \"/var/lib/jenkins/users\" ]; then\n    chmod 700 /var/lib/jenkins/users\nfi\n\n# Restore system configuration\nBACKUP_DATE=$(basename \"$LATEST_BACKUP\" .tar.gz | sed 's/jenkins-home-//')\nSYSTEM_CONFIG=\"${BACKUP_DIR}/config/system-config-${BACKUP_DATE}.tar.gz\"\n\nif [ -f \"$SYSTEM_CONFIG\" ]; then\n    echo \"🔧 Restoring system configuration...\"\n    tar -xzf \"$SYSTEM_CONFIG\" -C / 2>/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=\"${BACKUP_DIR}/config/jenkinsdb-${BACKUP_DATE}.sql.gz\"\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"🗄️  Restoring database...\"\n    # Ensure PostgreSQL is running\n    systemctl start postgresql\n    \n    # Drop and recreate database\n    sudo -u postgres psql -c \"DROP DATABASE IF EXISTS jenkinsdb;\"\n    sudo -u postgres psql -c \"CREATE DATABASE jenkinsdb;\"\n    sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;\"\n    \n    # Restore database\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql jenkinsdb\nfi\n\n# Configure firewall\necho \"🔥 Configuring firewall...\"\nif command -v ufw >/dev/null 2>&1; then\n    ufw allow 8080/tcp\n    ufw allow 50000/tcp\nelif command -v firewall-cmd >/dev/null 2>&1; then\n    firewall-cmd --permanent --add-port=8080/tcp\n    firewall-cmd --permanent --add-port=50000/tcp\n    firewall-cmd --reload\nfi\n\n# Start Jenkins\necho \"▶️  Starting Jenkins...\"\nsystemctl enable jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to start\necho \"⏳ Waiting for Jenkins to initialize...\"\nfor i in {1..300}; do\n    if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n        echo \"✅ Jenkins is responding\"\n        break\n    fi\n    echo \"Waiting for Jenkins... (${i}/300)\"\n    sleep 10\ndone\n\n# Verify recovery\necho \"🔍 Verifying disaster recovery...\"\n\n# Check Jenkins status\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    echo \"✅ Jenkins service is running\"\nelse\n    echo \"❌ Jenkins service failed to start\"\n    echo \"Check logs: journalctl -u jenkins -n 50\"\n    exit 1\nfi\n\n# Check web interface\nif curl -f http://localhost:8080/login >/dev/null 2>&1; then\n    echo \"✅ Jenkins web interface is accessible\"\nelse\n    echo \"❌ Jenkins web interface is not responding\"\n    exit 1\nfi\n\n# Check jobs restoration\nif [ -d \"/var/lib/jenkins/jobs\" ]; then\n    JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs 2>/dev/null | wc -l)\n    echo \"📋 Jobs recovered: $JOB_COUNT\"\nelse\n    echo \"⚠️  No jobs directory found\"\nfi\n\n# Check plugins restoration\nif [ -d \"/var/lib/jenkins/plugins\" ]; then\n    PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins 2>/dev/null | wc -l)\n    echo \"🔌 Plugins recovered: $PLUGIN_COUNT\"\nelse\n    echo \"⚠️  No plugins directory found\"\nfi\n\n# Generate recovery report\necho \"📊 Generating disaster recovery report...\"\ncat > \"/var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt\" <<EOF\nJenkins Disaster Recovery Report\n===============================\nRecovery Date: $(date)\nServer: $(hostname)\nBackup Used: $LATEST_BACKUP\nRecovery Log: $DR_LOG\n\nRecovery Summary:\n- Jenkins Service: $(systemctl is-active jenkins)\n- Web Interface: $(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080/login)\n- Jobs Recovered: $JOB_COUNT\n- Plugins Recovered: $PLUGIN_COUNT\n- Database Restored: $([ -f \"$DB_BACKUP\" ] && echo \"Yes\" || echo \"No\")\n\nNext Steps:\n1. Verify Jenkins configuration via web interface: http://$(hostname):8080\n2. Test critical job configurations\n3. Update any environment-specific settings\n4. Verify agent connections\n5. Test integrations (SCM, notifications, etc.)\n6. Update DNS/load balancer configurations if needed\n7. Notify team of recovery completion\n\nRecovery Status: ✅ COMPLETED\nEOF\n\necho \"\"\necho \"🎉 Jenkins disaster recovery completed successfully!\"\necho \"📝 Recovery report saved to: /var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt\"\necho \"\"\necho \"🔗 Access Jenkins: http://$(hostname):8080\"\necho \"\"\necho \"⚠️  Important post-recovery tasks:\"\necho \"1. Verify all job configurations\"\necho \"2. Test agent connections\"\necho \"3. Verify integrations (GitHub, LDAP, etc.)\"\necho \"4. Update any environment-specific configurations\"\necho \"5. Perform a backup of the recovered system\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Jenkins won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status jenkins\nsudo journalctl -u jenkins -f\n\n# Check Java version and JAVA_HOME\njava -version\necho $JAVA_HOME\n\n# Check disk space\ndf -h /var/lib/jenkins\n\n# Check permissions\nls -la /var/lib/jenkins\nsudo chown -R jenkins:jenkins /var/lib/jenkins\n\n# Check memory allocation\nfree -h\nps aux | grep jenkins\n\n# Clear Jenkins cache\nsudo systemctl stop jenkins\nsudo rm -rf /var/lib/jenkins/war\nsudo systemctl start jenkins\n```\n\n2. **Memory issues**:\n```bash\n# Increase JVM memory\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n\n# Monitor memory usage\ntop -p $(pgrep java)\njstat -gc $(pgrep java) 5s\n```\n\n3. **Plugin issues**:\n```bash\n# Safe start (disable all plugins)\nsudo systemctl stop jenkins\necho 'jenkins.install.runSetupWizard=false' > /var/lib/jenkins/jenkins.install.runSetupWizard\nsudo systemctl start jenkins\n\n# Clear plugin cache\nsudo rm -rf /var/lib/jenkins/plugins/*.bak\nsudo rm -rf /var/lib/jenkins/plugins/*.hpi.pinned\n\n# Update plugins via CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E \"\\)$\" | awk '{print $1}' | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Check plugin dependencies\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -v \"^$\"\n```\n\n4. **Build failures**:\n```bash\n# Check workspace permissions\nsudo chown -R jenkins:jenkins /var/lib/jenkins/workspace\n\n# Clear old builds\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password delete-builds job-name 1-100\n\n# Check agent connectivity\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-computers\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password connect-node agent-name\n\n# Monitor build resources\nhtop\niostat -x 1\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging for Jenkins\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx4g -Djava.util.logging.config.file=/var/lib/jenkins/logging.properties\"\n\n# Create detailed logging configuration\nsudo tee /var/lib/jenkins/logging.properties <<EOF\n.level = INFO\n\n# Root logger\nhandlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler\n\n# Console logging\njava.util.logging.ConsoleHandler.level = INFO\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n\n# File logging\njava.util.logging.FileHandler.pattern = /var/log/jenkins/jenkins-debug.log\njava.util.logging.FileHandler.limit = 50000000\njava.util.logging.FileHandler.count = 5\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\n\n# Component-specific logging\nhudson.level = FINE\njenkins.level = FINE\nhudson.security.level = FINE\nhudson.plugins.level = FINE\nhudson.model.level = FINE\n\n# Plugin debugging\nhudson.plugins.git.level = FINE\norg.jenkinsci.plugins.workflow.level = FINE\nEOF\n\nsudo systemctl restart jenkins\n\n# View debug logs\nsudo tail -f /var/log/jenkins/jenkins-debug.log\n\n# Enable specific plugin debugging via Jenkins CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password groovy = <<EOF\nimport java.util.logging.Logger\nimport java.util.logging.Level\n\n// Enable debug logging for specific components\nLogger.getLogger(\"hudson.security\").setLevel(Level.FINE)\nLogger.getLogger(\"hudson.plugins.git\").setLevel(Level.FINE)\nLogger.getLogger(\"org.jenkinsci.plugins.workflow\").setLevel(Level.FINE)\n\nprintln \"Debug logging enabled\"\nEOF\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update jenkins\nsudo dnf update jenkins\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade jenkins\n\n# Arch Linux\nyay -Syu jenkins\n\n# Alpine Linux (Docker)\ndocker pull jenkins/jenkins:lts-jdk17\ndocker stop jenkins\ndocker rm jenkins\n# Re-run docker run command with new image\n\n# openSUSE\nsudo zypper update jenkins\n\n# FreeBSD\npkg update\npkg upgrade jenkins\n\n# macOS\nbrew upgrade jenkins-lts\n\n# Always backup before updates\nsudo /usr/local/bin/jenkins-backup.sh\n\n# Update plugins after Jenkins update\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E \"\\)$\" | awk '{print $1}' | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Restart after updates\nsudo systemctl restart jenkins\n```\n\n### Maintenance Tasks\n\n```bash\n#!/bin/bash\n# jenkins-maintenance.sh\n\nJENKINS_HOME=\"/var/lib/jenkins\"\nJENKINS_URL=\"http://localhost:8080\"\nADMIN_CREDENTIALS=\"admin:SecureAdminPassword123!\"\n\necho \"🔧 Starting Jenkins maintenance tasks...\"\n\n# Clean up old builds\necho \"🗑️  Cleaning up old builds...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport jenkins.model.Jenkins\nimport hudson.model.*\n\nJenkins.instance.getAllItems(Job.class).each { job ->\n    if (job.getBuilds().size() > 50) {\n        def buildsToDelete = job.getBuilds().drop(50)\n        println \"Deleting \\${buildsToDelete.size()} old builds for job: \\${job.name}\"\n        buildsToDelete.each { build ->\n            build.delete()\n        }\n    }\n}\nEOF\n\n# Clean up workspace\necho \"🧹 Cleaning up workspaces...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport hudson.model.*\nimport hudson.FilePath\nimport jenkins.model.Jenkins\n\nJenkins.instance.getAllItems(AbstractProject.class).each { job ->\n    def workspace = job.getWorkspace()\n    if (workspace != null && workspace.exists()) {\n        def size = workspace.length()\n        if (size > 1024 * 1024 * 100) { // > 100MB\n            println \"Workspace for \\${job.name} is \\${size / (1024*1024)} MB\"\n            workspace.deleteRecursive()\n            println \"Cleaned workspace for job: \\${job.name}\"\n        }\n    }\n}\nEOF\n\n# Update plugins\necho \"🔌 Checking for plugin updates...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} list-plugins | grep -E \"\\)$\" > /tmp/outdated-plugins.txt\n\nif [ -s /tmp/outdated-plugins.txt ]; then\n    echo \"📦 Updating outdated plugins:\"\n    cat /tmp/outdated-plugins.txt\n    \n    # Update plugins\n    awk '{print $1}' /tmp/outdated-plugins.txt | xargs java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} install-plugin\n    \n    echo \"🔄 Restarting Jenkins to apply plugin updates...\"\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} safe-restart\nfi\n\n# Clean up logs\necho \"📋 Rotating and cleaning logs...\"\nfind ${JENKINS_HOME}/logs -name \"*.log\" -mtime +7 -delete\nfind /var/log/jenkins -name \"*.log.*\" -mtime +7 -delete\n\n# Disk usage check\necho \"💾 Checking disk usage...\"\nDISK_USAGE=$(df ${JENKINS_HOME} | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${DISK_USAGE} -gt 80 ]; then\n    echo \"⚠️  High disk usage: ${DISK_USAGE}%\"\n    \n    # Clean up large files\n    find ${JENKINS_HOME}/jobs -name \"*.log\" -size +100M -mtime +3 -delete\n    find ${JENKINS_HOME}/workspace -name \"*\" -size +500M -mtime +1 -delete\nfi\n\n# Backup verification\necho \"🔍 Verifying recent backups...\"\nLATEST_BACKUP=$(ls -t /backup/jenkins/config/jenkins-home-*.tar.gz 2>/dev/null | head -1)\nif [ -n \"$LATEST_BACKUP\" ]; then\n    BACKUP_AGE=$(($(date +%s) - $(stat -c %Y \"$LATEST_BACKUP\")))\n    if [ $BACKUP_AGE -gt 172800 ]; then  # 2 days\n        echo \"⚠️  Latest backup is older than 2 days: $LATEST_BACKUP\"\n        echo \"💾 Running backup now...\"\n        /usr/local/bin/jenkins-backup.sh\n    else\n        echo \"✅ Recent backup found: $LATEST_BACKUP\"\n    fi\nelse\n    echo \"❌ No backups found. Running backup...\"\n    /usr/local/bin/jenkins-backup.sh\nfi\n\n# Security check\necho \"🔒 Running security checks...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport jenkins.security.ApiTokenProperty\nimport hudson.security.SecurityRealm\nimport jenkins.model.Jenkins\n\ndef instance = Jenkins.getInstance()\n\n// Check for default passwords\ndef realm = instance.getSecurityRealm()\nif (realm instanceof hudson.security.HudsonPrivateSecurityRealm) {\n    def users = realm.getAllUsers()\n    users.each { user ->\n        if (user.getId() == \"admin\") {\n            println \"⚠️  Default admin user found. Consider renaming or removing.\"\n        }\n    }\n}\n\n// Check for anonymous access\ndef authStrategy = instance.getAuthorizationStrategy()\nif (authStrategy.hasPermission(org.acegisecurity.Authentication.ANONYMOUS_USER, Jenkins.READ)) {\n    println \"⚠️  Anonymous read access is enabled\"\n}\n\nprintln \"Security check completed\"\nEOF\n\n# Performance check\necho \"📊 Checking performance metrics...\"\nJAVA_PID=$(pgrep java)\nif [ -n \"$JAVA_PID\" ]; then\n    MEMORY_USAGE=$(ps -o pid,vsz,rss,comm -p $JAVA_PID | awk 'NR==2 {print $3/1024}')\n    CPU_USAGE=$(ps -o pid,pcpu,comm -p $JAVA_PID | awk 'NR==2 {print $2}')\n    \n    echo \"Memory usage: ${MEMORY_USAGE}MB\"\n    echo \"CPU usage: ${CPU_USAGE}%\"\n    \n    if (( $(echo \"${MEMORY_USAGE} > 6144\" | bc -l) )); then\n        echo \"⚠️  High memory usage detected\"\n    fi\nfi\n\necho \"✅ Jenkins maintenance completed\"\n\n# Generate maintenance report\ncat > /var/log/jenkins-maintenance-$(date +%Y%m%d).log <<EOF\nJenkins Maintenance Report - $(date)\n===================================\n\nTasks Completed:\n- Old builds cleanup: ✅\n- Workspace cleanup: ✅\n- Plugin updates: $([ -s /tmp/outdated-plugins.txt ] && echo \"✅ Updated\" || echo \"✅ Up to date\")\n- Log rotation: ✅\n- Disk usage check: ✅ (${DISK_USAGE}%)\n- Backup verification: ✅\n- Security check: ✅\n- Performance check: ✅\n\nSystem Status:\n- Memory usage: ${MEMORY_USAGE}MB\n- CPU usage: ${CPU_USAGE}%\n- Disk usage: ${DISK_USAGE}%\n\nNext maintenance: $(date -d \"next week\" +%Y-%m-%d)\nEOF\n\necho \"📊 Maintenance report: /var/log/jenkins-maintenance-$(date +%Y%m%d).log\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"0 2 * * * root /usr/local/bin/jenkins-maintenance.sh\" | sudo tee -a /etc/crontab\necho \"*/15 * * * * root /usr/local/bin/jenkins-health-check.sh\" | sudo tee -a /etc/crontab\n\n# Log rotation configuration\nsudo tee /etc/logrotate.d/jenkins <<EOF\n/var/log/jenkins/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins adm\n    postrotate\n        systemctl reload jenkins > /dev/null 2>&1 || true\n    endscript\n}\n\n/var/lib/jenkins/logs/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins jenkins\n}\nEOF\n```\n\n## Integration Examples\n\n### Git Integration with Webhooks\n\n```bash\n# Configure Git webhook for automatic builds\nsudo tee /var/lib/jenkins/casc_configs/git-integration.yaml <<EOF\nunclassified:\n  gitHubPluginConfig:\n    hookUrl: \"https://jenkins.example.com/github-webhook/\"\n    \n  gitLabConnectionConfig:\n    connections:\n      - name: \"GitLab\"\n        url: \"https://gitlab.example.com\"\n        apiTokenId: \"gitlab-api-token\"\n        clientBuilderId: \"autodetect\"\n        connectionTimeout: 10\n        readTimeout: 10\n\njobs:\n  - script: |\n      multibranchPipelineJob('example-app') {\n        branchSources {\n          git {\n            id('github-example')\n            remote('https://github.com/example/app.git')\n            credentialsId('github-credentials')\n            includes('main develop feature/* release/*')\n          }\n        }\n        \n        factory {\n          workflowBranchProjectFactory {\n            scriptPath('Jenkinsfile')\n          }\n        }\n        \n        triggers {\n          periodicFolderTrigger {\n            interval('1d')\n          }\n        }\n        \n        orphanedItemStrategy {\n          discardOldItems {\n            daysToKeep(7)\n            numToKeep(10)\n          }\n        }\n      }\nEOF\n```\n\n### Docker Integration\n\n```groovy\n// Docker pipeline example\npipeline {\n    agent any\n    \n    environment {\n        DOCKER_REGISTRY = credentials('docker-registry')\n        DOCKER_IMAGE = \"${env.JOB_NAME}:${env.BUILD_NUMBER}\"\n    }\n    \n    stages {\n        stage('Build Docker Image') {\n            steps {\n                script {\n                    def image = docker.build(\"${DOCKER_REGISTRY}/${DOCKER_IMAGE}\")\n                    \n                    // Security scan\n                    sh \"\"\"\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}\n                    \"\"\"\n                    \n                    // Push to registry\n                    docker.withRegistry(\"https://${DOCKER_REGISTRY}\", 'docker-registry-credentials') {\n                        image.push()\n                        image.push(\"latest\")\n                    }\n                }\n            }\n        }\n        \n        stage('Deploy') {\n            steps {\n                script {\n                    // Deploy to Kubernetes\n                    sh \"\"\"\n                        kubectl set image deployment/myapp \\\n                            myapp=${DOCKER_REGISTRY}/${DOCKER_IMAGE} \\\n                            --namespace=production\n                        \n                        kubectl rollout status deployment/myapp \\\n                            --namespace=production --timeout=300s\n                    \"\"\"\n                }\n            }\n        }\n    }\n}\n```\n\n### Kubernetes Integration\n\n```yaml\n# Jenkins agent in Kubernetes\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: jenkins\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: jenkins\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\",\"pods/exec\"]\n  verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: jenkins\n---\n# Jenkins Configuration as Code for Kubernetes\njenkins:\n  clouds:\n    - kubernetes:\n        name: \"kubernetes\"\n        serverUrl: \"https://kubernetes.default\"\n        namespace: \"jenkins\"\n        credentialsId: \"kubernetes-token\"\n        jenkinsUrl: \"http://jenkins.jenkins.svc.cluster.local:8080\"\n        containerCapStr: \"10\"\n        templates:\n          - name: \"jenkins-agent\"\n            namespace: \"jenkins\"\n            label: \"kubernetes\"\n            containers:\n              - name: \"jnlp\"\n                image: \"jenkins/inbound-agent:latest\"\n                workingDir: \"/home/jenkins/agent\"\n                resourceRequestCpu: \"100m\"\n                resourceRequestMemory: \"256Mi\"\n                resourceLimitCpu: \"500m\"\n                resourceLimitMemory: \"1Gi\"\n```\n\n### LDAP/Active Directory Integration\n\n```yaml\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ad.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          inhibitInferRootDN: false\n          userSearchBase: \"OU=Users,OU=Company\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups,OU=Company\"\n          groupSearchFilter: \"(&(objectClass=group)(cn={0}))\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-service-password\"\n          displayNameAttributeName: \"displayName\"\n          mailAddressAttributeName: \"mail\"\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"administrators\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"Domain Admins\"\n              - \"Jenkins Admins\"\n        items:\n          - name: \"developers\"\n            pattern: \".*\"\n            permissions:\n              - \"Job/Build\"\n              - \"Job/Cancel\"\n              - \"Job/Read\"\n            assignments:\n              - \"Development Team\"\n```\n\n## Additional Resources\n\n- [Official Jenkins Documentation](https://www.jenkins.io/doc/)\n- [Jenkins Configuration as Code](https://jenkins.io/projects/jcasc/)\n- [Jenkins Pipeline Documentation](https://www.jenkins.io/doc/book/pipeline/)\n- [Jenkins Security Guide](https://www.jenkins.io/doc/book/security/)\n- [Jenkins Plugin Index](https://plugins.jenkins.io/)\n- [Jenkins Community](https://www.jenkins.io/community/)\n- [Jenkins Best Practices](https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/)\n- [Jenkins GitHub Repository](https://github.com/jenkinsci/jenkins)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">Jenkins is a free and open-source automation server for building, testing, and deploying applications. Originally developed by Kohsuke Kawaguchi and now maintained by the Jenkins community, Jenkins is the industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade features. It serves as a FOSS alternative to commercial CI/CD solutions like TeamCity, GitLab CI Premium, or Azure DevOps Server, offering unlimited build minutes, unlimited private repositories, and advanced pipeline capabilities without licensing costs, with features like distributed builds, Pipeline as Code, and extensive plugin ecosystem.</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 50GB minimum (SSD recommended for build performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for agent communication and external integrations</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default Jenkins HTTP)</li>\n<li class=\"mobile-list-item\">Port 50000 (default Jenkins agent communication)</li>\n<li class=\"mobile-list-item\">Additional ports for external integrations (webhooks, etc.)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Java 11 or 17 LTS (OpenJDK recommended)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java 17 LTS\nsudo dnf install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\ncurl -fsSL https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key | sudo tee /etc/yum.repos.d/jenkins.io.key\n\nsudo tee /etc/yum.repos.d/jenkins.repo &lt;&lt;EOF\n[jenkins]\nname=Jenkins-stable\nbaseurl=http://pkg.jenkins.io/redhat-stable\ngpgcheck=1\ngpgkey=file:///etc/yum.repos.d/jenkins.io.key\nenabled=1\nEOF\n\n# Install Jenkins\nsudo dnf install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update\n\n# Install Java 17 LTS\nsudo apt install -y openjdk-17-jdk openjdk-17-jre\n\n# Add Jenkins repository\nwget -O /tmp/jenkins-key.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\nsudo mv /tmp/jenkins-key.asc /etc/apt/trusted.gpg.d/jenkins.asc\n\necho &quot;deb https://pkg.jenkins.io/debian-stable binary/&quot; | sudo tee /etc/apt/sources.list.d/jenkins.list\n\n# Update package index\nsudo apt update\n\n# Install Jenkins\nsudo apt install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo ufw allow 8080/tcp\nsudo ufw allow 50000/tcp\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java 17 LTS\nsudo pacman -S jdk17-openjdk\n\n# Install Jenkins from AUR\nyay -S jenkins\n\n# Alternative: Install manually from AUR\ngit clone https://aur.archlinux.org/jenkins.git\ncd jenkins\nmakepkg -si\n\n# Create jenkins user if not created\nsudo useradd -r -d /var/lib/jenkins -s /sbin/nologin jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /etc/jenkins/</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins is not officially packaged for Alpine Linux\n# Use Docker or manual installation\n\n# Method 1: Docker installation\napk add --no-cache docker docker-compose\nrc-update add docker default\nrc-service docker start\n\n# Create Jenkins data directory\nmkdir -p /var/lib/jenkins\n\n# Run Jenkins container\ndocker run -d \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v /var/lib/jenkins:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --group-add $(getent group docker | cut -d: -f3) \\\n  jenkins/jenkins:lts-jdk17\n\n# Get initial admin password\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n\n# Method 2: Manual installation with OpenJDK\napk add --no-cache openjdk17-jre-headless\nwget https://get.jenkins.io/war-stable/latest/jenkins.war -O /opt/jenkins.war\n\n# Create jenkins user and directories\nadduser -D -s /sbin/nologin jenkins\nmkdir -p /var/lib/jenkins /var/log/jenkins\nchown -R jenkins:jenkins /var/lib/jenkins /var/log/jenkins\n\n# Create init script\ntee /etc/init.d/jenkins &lt;&lt;&#039;EOF&#039;\n#!/sbin/openrc-run\nname=&quot;Jenkins&quot;\ncommand=&quot;java&quot;\ncommand_args=&quot;-jar /opt/jenkins.war --httpPort=8080 --ajp13Port=-1&quot;\ncommand_user=&quot;jenkins&quot;\npidfile=&quot;/run/jenkins.pid&quot;\ncommand_background=&quot;yes&quot;\ndepend() {\n    need net\n}\nEOF\n\nchmod +x /etc/init.d/jenkins\nrc-update add jenkins default\nrc-service jenkins start</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo zypper addrepo -G https://pkg.jenkins.io/opensuse-stable/ jenkins\nsudo zypper refresh\n\n# Install Jenkins\nsudo zypper install -y jenkins\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y java-17-openjdk jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install jenkins-lts\n\n# Start Jenkins service\nbrew services start jenkins-lts\n\n# Or run manually\njenkins-lts\n\n# Alternative: Install specific version\nbrew install jenkins-lts@2.414\n\n# Get initial admin password\ncat ~/.jenkins/secrets/initialAdminPassword\n\n# Configuration location: ~/.jenkins/\n# Alternative: /usr/local/var/jenkins_home/ (Intel Macs)\n# Alternative: /opt/homebrew/var/jenkins_home/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install jenkins openjdk17\n\n# Using ports\ncd /usr/ports/devel/jenkins\nmake install clean\n\n# Enable Jenkins\necho &#039;jenkins_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\necho &#039;jenkins_java_home=&quot;/usr/local/openjdk17&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Create jenkins user and directories\npw useradd jenkins -d /usr/local/jenkins -s /sbin/nologin\nmkdir -p /usr/local/jenkins\nchown jenkins:jenkins /usr/local/jenkins\n\n# Start service\nservice jenkins start\n\n# Get initial admin password\ncat /usr/local/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /usr/local/jenkins/</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install jenkins\n\n# Method 2: Using Scoop\nscoop install jenkins\n\n# Method 3: Manual installation\n# Download from https://www.jenkins.io/download/\n# Run jenkins.msi installer\n\n# Method 4: Windows service installation\n# Download jenkins.war\n# Install as Windows service\njava -jar jenkins.war --httpPort=8080 --install\n\n# Start service\nnet start Jenkins\n\n# Get initial admin password\nGet-Content &quot;C:\\Program Files\\Jenkins\\secrets\\initialAdminPassword&quot;\n\n# Configuration location: C:\\Program Files\\Jenkins\\\n# Or: %JENKINS_HOME% (if custom location)</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Java Environment Setup</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set JAVA_HOME (Linux/macOS)\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk\necho &#039;export JAVA_HOME=/usr/lib/jvm/java-17-openjdk&#039; &gt;&gt; ~/.bashrc\n\n# Verify Java installation\njava -version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/sysconfig/jenkins</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/default/jenkins</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/jenkins/</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code> (Docker) or <code class=\"mobile-inline-code\">/var/lib/jenkins/</code> (manual)</li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/sysconfig/jenkins</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">~/.jenkins/</code> or <code class=\"mobile-inline-code\">/usr/local/var/jenkins_home/</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/jenkins/</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Program Files\\Jenkins\\</code> or <code class=\"mobile-inline-code\">%JENKINS_HOME%</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential initial configuration</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initial web setup (after accessing http://your-server:8080)\n# 1. Enter admin password from: /var/lib/jenkins/secrets/initialAdminPassword\n# 2. Install suggested plugins or select specific plugins\n# 3. Create first admin user\n# 4. Configure Jenkins URL\n\n# Essential plugins to install:\n# - Pipeline plugins (Pipeline Suite)\n# - Git plugin\n# - Credentials Binding Plugin\n# - Build Timeout Plugin\n# - Timestamper Plugin\n# - Workspace Cleanup Plugin\n# - Blue Ocean (modern UI)\n# - Matrix Authorization Strategy Plugin</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status jenkins\n\n# Check web interface\ncurl -I http://localhost:8080\n\n# Test Java version\njava -version\n\n# Check Jenkins process\nps aux | grep jenkins\n\n# Verify Jenkins CLI\nwget http://localhost:8080/jnlpJars/jenkins-cli.jar\njava -jar jenkins-cli.jar -s http://localhost:8080 version\n\n# Check available plugins\njava -jar jenkins-cli.jar -s http://localhost:8080 list-plugins</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Change the default admin password immediately and configure proper authentication!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Jenkins to start on boot\nsudo systemctl enable jenkins\n\n# Start Jenkins\nsudo systemctl start jenkins\n\n# Stop Jenkins\nsudo systemctl stop jenkins\n\n# Restart Jenkins\nsudo systemctl restart jenkins\n\n# Graceful restart (wait for running builds)\nsudo systemctl reload jenkins\n\n# Check status\nsudo systemctl status jenkins\n\n# View logs\nsudo journalctl -u jenkins -f\n\n# Edit service configuration\nsudo systemctl edit jenkins\n# Add custom environment variables or JVM options</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Docker-based installation\ndocker start jenkins\ndocker stop jenkins\ndocker restart jenkins\n\n# Check container status\ndocker ps | grep jenkins\n\n# View logs\ndocker logs -f jenkins\n\n# Manual installation\nrc-update add jenkins default\nrc-service jenkins start\nrc-service jenkins stop\nrc-service jenkins restart\nrc-service jenkins status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;jenkins_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Jenkins\nservice jenkins start\n\n# Stop Jenkins\nservice jenkins stop\n\n# Restart Jenkins\nservice jenkins restart\n\n# Check status\nservice jenkins status\n\n# View logs\ntail -f /var/log/jenkins/jenkins.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start jenkins-lts\nbrew services stop jenkins-lts\nbrew services restart jenkins-lts\n\n# Check status\nbrew services list | grep jenkins\n\n# Manual control\njenkins-lts --httpPort=8080\n\n# View logs\ntail -f /usr/local/var/log/jenkins/jenkins.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Jenkins service\nnet start Jenkins\n\n# Stop Jenkins service\nnet stop Jenkins\n\n# Using PowerShell\nStart-Service Jenkins\nStop-Service Jenkins\nRestart-Service Jenkins\n\n# Check status\nGet-Service Jenkins\n\n# View logs (Windows Event Log)\nGet-EventLog -LogName Application -Source Jenkins\n\n# Or check Jenkins logs\nGet-Content &quot;C:\\Program Files\\Jenkins\\logs\\jenkins.log&quot; -Tail 50 -Wait</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-configuration\" class=\"mobile-header\">High Availability Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Multi-master setup with shared storage\n# Method 1: Shared filesystem (NFS, GlusterFS)\nsudo mkdir -p /shared/jenkins\nsudo mount -t nfs nfs-server:/jenkins /shared/jenkins\n\n# Update Jenkins home\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JENKINS_HOME=/shared/jenkins&quot;\n\n# Method 2: Database-backed configuration\n# Install CloudBees Jenkins Enterprise plugins for HA\n# Configure external database (PostgreSQL recommended)\n\n# Agent configuration for load distribution\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml &lt;&lt;EOF\njenkins:\n  nodes:\n    - permanent:\n        name: &quot;linux-agent-1&quot;\n        remoteFS: &quot;/var/lib/jenkins&quot;\n        numExecutors: 4\n        launcher:\n          ssh:\n            host: &quot;agent1.example.com&quot;\n            credentialsId: &quot;ssh-agent-key&quot;\n    - permanent:\n        name: &quot;windows-agent-1&quot;\n        remoteFS: &quot;C:\\\\Jenkins&quot;\n        numExecutors: 2\n        launcher:\n          command:\n            command: &quot;java -jar agent.jar&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Jenkins Configuration as Code (JCasC) for security\nsudo tee /var/lib/jenkins/casc_configs/security.yaml &lt;&lt;EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ldap.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          userSearchBase: &quot;OU=Users&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-password&quot;\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;admin&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;jenkins-admins&quot;\n          - name: &quot;developer&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Build&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;developers&quot;\n\nsecurity:\n  globalJobDslSecurityConfiguration:\n    useScriptSecurity: true\n  scriptApproval:\n    approvedSignatures:\n      - &quot;method java.lang.String trim&quot;\n      - &quot;staticMethod java.lang.System getProperty java.lang.String&quot;\n\nunclassified:\n  location:\n    adminAddress: &quot;jenkins@example.com&quot;\n    url: &quot;https://jenkins.example.com/&quot;\n    \n  mailer:\n    smtpHost: &quot;smtp.example.com&quot;\n    smtpPort: 587\n    charset: &quot;UTF-8&quot;\n    authentication:\n      username: &quot;jenkins@example.com&quot;\n      password: &quot;{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}&quot;\n    useSsl: false\n    useTls: true\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/jenkins\nupstream jenkins {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name jenkins.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jenkins.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jenkins.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.example.com/privkey.pem;\n    \n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n\n    client_max_body_size 100M;\n    \n    location / {\n        proxy_pass http://jenkins;\n        proxy_redirect default;\n        proxy_http_version 1.1;\n        \n        # Required headers for Jenkins\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        \n        # WebSocket support for Jenkins\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeout settings\n        proxy_connect_timeout 90;\n        proxy_send_timeout 90;\n        proxy_read_timeout 90;\n        \n        proxy_buffering off;\n        proxy_request_buffering off;\n        proxy_max_temp_file_size 0;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend jenkins_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jenkins.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend jenkins_servers\n\nbackend jenkins_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /login\n    http-check expect status 200\n    server jenkins1 127.0.0.1:8080 check inter 30s rise 2 fall 3\n    server jenkins2 127.0.0.1:8081 check inter 30s rise 2 fall 3 backup\n\n    # Headers for Jenkins\n    http-request set-header X-Forwarded-Proto https\n    http-request set-header X-Forwarded-Port %[dst_port]\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-http-server-configuration\" class=\"mobile-header\">Apache HTTP Server Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/jenkins.conf\n&lt;VirtualHost *:80&gt;\n    ServerName jenkins.example.com\n    Redirect permanent / https://jenkins.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName jenkins.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/jenkins.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/jenkins.example.com/privkey.pem\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyPreserveHost On\n    ProxyRequests Off\n    \n    ProxyPass / http://127.0.0.1:8080/ nocanon\n    ProxyPassReverse / http://127.0.0.1:8080/\n    ProxyPassReverse  /  http://jenkins.example.com/\n    \n    # WebSocket support\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8080/$1&quot; [P,L]\n    \n    AllowEncodedSlashes NoDecode\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (development only)\nsudo mkdir -p /etc/jenkins/ssl\nsudo openssl req -x509 -newkey rsa:4096 -keyout /etc/jenkins/ssl/jenkins.key -out /etc/jenkins/ssl/jenkins.crt -days 365 -nodes -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=jenkins.example.com&quot;\n\n# Create Java keystore\nsudo keytool -genkey -alias jenkins -keyalg RSA -keystore /etc/jenkins/ssl/jenkins.jks -keysize 2048 -dname &quot;CN=jenkins.example.com,OU=IT,O=Organization,L=City,ST=State,C=US&quot; -storepass changeit -keypass changeit\n\n# Configure Jenkins to use HTTPS\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JENKINS_OPTS=--httpPort=-1 --httpsPort=8443 --httpsKeyStore=/etc/jenkins/ssl/jenkins.jks --httpsKeyStorePassword=changeit&quot;\n\nsudo systemctl restart jenkins\n\n# Or use Let&#039;s Encrypt with reverse proxy (recommended)\nsudo certbot --nginx -d jenkins.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"authentication-and-authorization\" class=\"mobile-header\">Authentication and Authorization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure LDAP authentication via JCasC\nsudo tee /var/lib/jenkins/casc_configs/auth.yaml &lt;&lt;EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ldap.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          inhibitInferRootDN: false\n          userSearchBase: &quot;OU=Users&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups&quot;\n          groupSearchFilter: &quot;(&amp;(objectClass=group)(cn={0}))&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-password&quot;\n          displayNameAttributeName: &quot;displayName&quot;\n          mailAddressAttributeName: &quot;mail&quot;\n\n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;jenkins-admins&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;Domain Admins&quot;\n              - &quot;jenkins-admins&quot;\n          - name: &quot;developers&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Build&quot;\n              - &quot;Job/Cancel&quot;\n              - &quot;Job/Read&quot;\n              - &quot;Job/Workspace&quot;\n              - &quot;Run/Replay&quot;\n              - &quot;Run/Update&quot;\n            assignments:\n              - &quot;developers&quot;\n              - &quot;authenticated&quot;\n          - name: &quot;viewers&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;viewers&quot;\n              \ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: &quot;ldap-password&quot;\n              username: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n              password: &quot;{AQAAABAAAAAQSecureEncryptedPassword=}&quot;\n              description: &quot;LDAP Service Account&quot;\n          - basicSSHUserPrivateKey:\n              scope: GLOBAL\n              id: &quot;ssh-agent-key&quot;\n              username: &quot;jenkins&quot;\n              description: &quot;SSH key for Jenkins agents&quot;\n              privateKeySource:\n                directEntry:\n                  privateKey: |\n                    -----BEGIN OPENSSH PRIVATE KEY-----\n                    EncryptedPrivateKeyContentHere\n                    -----END OPENSSH PRIVATE KEY-----\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 8080\nsudo ufw allow from 192.168.1.0/24 to any port 50000\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=jenkins\nsudo firewall-cmd --permanent --zone=jenkins --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=jenkins --add-port=8080/tcp\nsudo firewall-cmd --permanent --zone=jenkins --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 8080 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 50000 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {8080, 50000}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Jenkins HTTP&quot; -Direction Inbound -Protocol TCP -LocalPort 8080 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;Jenkins Agent&quot; -Direction Inbound -Protocol TCP -LocalPort 50000 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"external-database-configuration-postgresql\" class=\"mobile-header\">External Database Configuration (PostgreSQL)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Create Jenkins database\nsudo -u postgres createdb jenkinsdb\nsudo -u postgres createuser jenkinsuser\nsudo -u postgres psql -c &quot;ALTER USER jenkinsuser WITH PASSWORD &#039;SecureJenkinsPassword123!&#039;;&quot;\nsudo -u postgres psql -c &quot;GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;&quot;\n\n# Download PostgreSQL driver\nwget https://jdbc.postgresql.org/download/postgresql-42.6.0.jar -O /var/lib/jenkins/postgresql-connector.jar\n\n# Configure Jenkins to use PostgreSQL\nsudo tee -a /etc/default/jenkins &lt;&lt;EOF\n# PostgreSQL database configuration\nJENKINS_JAVA_OPTIONS=&quot;-Djenkins.install.runSetupWizard=false -Dhudson.model.DirectoryBrowserSupport.CSP=\\&quot;sandbox allow-scripts; default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;;\\&quot;&quot;\nEOF\n\n# Create database configuration\nsudo tee /var/lib/jenkins/database-config.xml &lt;&lt;EOF\n&lt;databaseConfiguration&gt;\n  &lt;database class=&quot;org.jenkinsci.plugins.database.postgresql.PostgreSQLDatabase&quot;&gt;\n    &lt;hostname&gt;localhost&lt;/hostname&gt;\n    &lt;port&gt;5432&lt;/port&gt;\n    &lt;database&gt;jenkinsdb&lt;/database&gt;\n    &lt;username&gt;jenkinsuser&lt;/username&gt;\n    &lt;password&gt;{AQAAABAAAAAQEncryptedPasswordHere=}&lt;/password&gt;\n    &lt;properties&gt;sslmode=require&lt;/properties&gt;\n  &lt;/database&gt;\n&lt;/databaseConfiguration&gt;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-database-schema\" class=\"mobile-header\">Backup Database Schema</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database schema backup\nsudo -u postgres pg_dump jenkinsdb &gt; /backup/jenkins/jenkinsdb-schema-$(date +%Y%m%d).sql\n\n# Create Jenkins jobs and configuration backup\nsudo tee /usr/local/bin/jenkins-db-backup.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/jenkins/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# PostgreSQL backup\nsudo -u postgres pg_dump jenkinsdb | gzip &gt; &quot;$BACKUP_DIR/jenkinsdb.sql.gz&quot;\n\n# Jenkins configuration backup\ntar -czf &quot;$BACKUP_DIR/jenkins-config.tar.gz&quot; \\\n  --exclude=&quot;/var/lib/jenkins/workspace/*&quot; \\\n  --exclude=&quot;/var/lib/jenkins/builds/*/archive&quot; \\\n  --exclude=&quot;/var/lib/jenkins/logs/*&quot; \\\n  /var/lib/jenkins/\n\necho &quot;Database backup completed: $BACKUP_DIR&quot;\nEOF\n\nchmod +x /usr/local/bin/jenkins-db-backup.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Jenkins optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\njenkins soft nofile 65535\njenkins hard nofile 65535\njenkins soft nproc 32768\njenkins hard nproc 32768\nEOF\n\n# Optimize Jenkins JVM settings\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+DisableExplicitGC -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&quot;\nEnvironment=&quot;JENKINS_OPTS=--sessionTimeout=1440 --sessionEviction=86400&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"jenkins-performance-configuration\" class=\"mobile-header\">Jenkins Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Jenkins for high performance\nsudo tee /var/lib/jenkins/casc_configs/performance.yaml &lt;&lt;EOF\njenkins:\n  systemMessage: &quot;High-Performance Jenkins Instance&quot;\n  numExecutors: 0  # Don&#039;t run builds on controller\n  mode: EXCLUSIVE\n  quietPeriod: 5\n  scmCheckoutRetryCount: 3\n  \n  # Global pipeline libraries for shared code\n  globalLibraries:\n    libraries:\n      - name: &quot;shared-pipeline-library&quot;\n        defaultVersion: &quot;main&quot;\n        implicit: true\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: &quot;https://github.com/example/jenkins-shared-library.git&quot;\n                credentialsId: &quot;github-token&quot;\n\n  # Configure build discarders globally\n  buildDiscarders:\n    configuredBuildDiscarders:\n      - &quot;logRotator&quot;:\n          artifactDaysToKeepStr: &quot;30&quot;\n          artifactNumToKeepStr: &quot;10&quot;\n          daysToKeepStr: &quot;30&quot;\n          numToKeepStr: &quot;100&quot;\n\nunclassified:\n  # Configure global timeout\n  buildTimeout:\n    operations:\n      - timeoutMinutes: 60\n      - failBuild: true\n      - writingDescription: true\n      \n  # Workspace cleanup configuration  \n  wsCleanup:\n    deleteDirs: true\n    cleanupMatrixParent: true\n    skipWhenFailed: false\n    \ntool:\n  # Configure tools for performance\n  git:\n    installations:\n      - name: &quot;Default&quot;\n        home: &quot;/usr/bin/git&quot;\n        \n  maven:\n    installations:\n      - name: &quot;Maven 3.9&quot;\n        properties:\n          - installSource:\n              installers:\n                - maven:\n                    id: &quot;3.9.6&quot;\n                    \n  gradle:\n    installations:\n      - name: &quot;Gradle 8&quot;\n        properties:\n          - installSource:\n              installers:\n                - gradleInstaller:\n                    id: &quot;8.4&quot;\n\n  nodejs:\n    installations:\n      - name: &quot;NodeJS 18&quot;\n        properties:\n          - installSource:\n              installers:\n                - nodeJSInstaller:\n                    id: &quot;18.18.2&quot;\n                    \n  dockerTool:\n    installations:\n      - name: &quot;Docker&quot;\n        properties:\n          - installSource:\n              installers:\n                - dockerInstaller:\n                    version: &quot;latest&quot;\nEOF\n\n# Configure agent templates for auto-scaling\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml &lt;&lt;EOF\njenkins:\n  clouds:\n    - kubernetes:\n        name: &quot;kubernetes&quot;\n        serverUrl: &quot;https://kubernetes.default.svc.cluster.local&quot;\n        namespace: &quot;jenkins&quot;\n        credentialsId: &quot;kubernetes-token&quot;\n        jenkinsUrl: &quot;http://jenkins.jenkins.svc.cluster.local:8080&quot;\n        jenkinsTunnel: &quot;jenkins-agent.jenkins.svc.cluster.local:50000&quot;\n        connectTimeout: 300\n        readTimeout: 300\n        containerCapStr: 100\n        templates:\n          - name: &quot;jenkins-agent&quot;\n            namespace: &quot;jenkins&quot;\n            label: &quot;kubernetes docker&quot;\n            nodeUsageMode: EXCLUSIVE\n            containers:\n              - name: &quot;jnlp&quot;\n                image: &quot;jenkins/inbound-agent:latest&quot;\n                alwaysPullImage: true\n                workingDir: &quot;/home/jenkins/agent&quot;\n                command: &quot;&quot;\n                args: &quot;&quot;\n                resourceRequestCpu: &quot;500m&quot;\n                resourceRequestMemory: &quot;1Gi&quot;\n                resourceLimitCpu: &quot;2&quot;\n                resourceLimitMemory: &quot;4Gi&quot;\n            volumes:\n              - hostPathVolume:\n                  hostPath: &quot;/var/run/docker.sock&quot;\n                  mountPath: &quot;/var/run/docker.sock&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"pipeline-optimization\" class=\"mobile-header\">Pipeline Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"groovy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">groovy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-groovy\">// Optimized Jenkins Pipeline Template\n// /var/lib/jenkins/pipeline-templates/optimized-pipeline.groovy\n@Library(&#039;shared-pipeline-library&#039;) _\n\npipeline {\n    agent {\n        label &#039;docker &amp;&amp; linux&#039;\n    }\n    \n    options {\n        buildDiscarder(logRotator(numToKeepStr: &#039;50&#039;, artifactNumToKeepStr: &#039;10&#039;))\n        timeout(time: 120, unit: &#039;MINUTES&#039;)\n        timestamps()\n        skipDefaultCheckout(true)\n        disableConcurrentBuilds()\n        ansiColor(&#039;xterm&#039;)\n        parallelsAlwaysFailFast()\n        copyArtifactPermission(&#039;*&#039;)\n    }\n    \n    environment {\n        DOCKER_REGISTRY = credentials(&#039;docker-registry-url&#039;)\n        MAVEN_OPTS = &#039;-Xmx2g -XX:+UseG1GC&#039;\n        GRADLE_OPTS = &#039;-Xmx2g -Dorg.gradle.daemon=false&#039;\n        CI = &#039;true&#039;\n    }\n    \n    stages {\n        stage(&#039;Checkout&#039;) {\n            steps {\n                checkout scm\n                script {\n                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(8)\n                    env.BUILD_VERSION = &quot;${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}&quot;\n                }\n            }\n        }\n        \n        stage(&#039;Parallel Analysis&#039;) {\n            parallel {\n                stage(&#039;Code Quality&#039;) {\n                    steps {\n                        script {\n                            // SonarQube analysis\n                            withSonarQubeEnv(&#039;SonarQube&#039;) {\n                                sh &#039;&#039;&#039;\n                                    mvn sonar:sonar \\\n                                        -Dsonar.projectKey=${JOB_NAME} \\\n                                        -Dsonar.projectVersion=${BUILD_VERSION} \\\n                                        -Dsonar.sources=src/main \\\n                                        -Dsonar.tests=src/test \\\n                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml\n                                &#039;&#039;&#039;\n                            }\n                            \n                            timeout(time: 10, unit: &#039;MINUTES&#039;) {\n                                waitForQualityGate abortPipeline: true\n                            }\n                        }\n                    }\n                }\n                \n                stage(&#039;Security Scan&#039;) {\n                    steps {\n                        // OWASP Dependency Check\n                        dependencyCheck additionalArguments: &#039;&#039;&#039;\n                            --enableRetired\n                            --enableExperimental  \n                            --scan ./\n                            --format JSON\n                            --format HTML\n                            --suppression dependency-check-suppressions.xml\n                        &#039;&#039;&#039;, odcInstallation: &#039;dependency-check-8.4.0&#039;\n                        \n                        dependencyCheckPublisher pattern: &#039;**/dependency-check-report.xml&#039;\n                        \n                        // Secret scanning\n                        sh &#039;&#039;&#039;\n                            docker run --rm -v $(pwd):/repo \\\n                                trufflesecurity/trufflehog:latest \\\n                                git file:///repo \\\n                                --json \\\n                                --fail &gt; trufflehog-results.json || true\n                        &#039;&#039;&#039;\n                    }\n                }\n                \n                stage(&#039;Test&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            # Parallel test execution\n                            mvn clean test \\\n                                -Dmaven.test.failure.ignore=true \\\n                                -Dspring.profiles.active=test \\\n                                -Djunit.jupiter.execution.parallel.enabled=true \\\n                                -Djunit.jupiter.execution.parallel.mode.default=concurrent\n                        &#039;&#039;&#039;\n                        \n                        publishTestResults testResultsPattern: &#039;target/surefire-reports/*.xml&#039;\n                        publishCoverage adapters: [jacocoAdapter(&#039;target/site/jacoco/jacoco.xml&#039;)], \n                                       sourceFileResolver: sourceFiles(&#039;STORE_LAST_BUILD&#039;)\n                    }\n                    post {\n                        always {\n                            archiveArtifacts artifacts: &#039;target/surefire-reports/**&#039;, allowEmptyArchive: true\n                        }\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Build &amp; Package&#039;) {\n            steps {\n                sh &#039;&#039;&#039;\n                    # Optimized build with parallel processing\n                    mvn clean package \\\n                        -DskipTests \\\n                        -T 2C \\\n                        -Dspring.profiles.active=production \\\n                        -Dmaven.javadoc.skip=true\n                &#039;&#039;&#039;\n                \n                // Docker build with BuildKit\n                script {\n                    def image = docker.build(&quot;${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}&quot;, \n                                           &quot;--build-arg BUILD_VERSION=${env.BUILD_VERSION} .&quot;)\n                    \n                    // Security scanning with Trivy\n                    sh &quot;&quot;&quot;\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --format table \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\n                    &quot;&quot;&quot;\n                    \n                    image.push()\n                    image.push(&quot;latest&quot;)\n                }\n            }\n        }\n        \n        stage(&#039;Deploy&#039;) {\n            when {\n                anyOf {\n                    branch &#039;main&#039;\n                    branch &#039;develop&#039;\n                    branch &#039;release/*&#039;\n                }\n            }\n            parallel {\n                stage(&#039;Staging&#039;) {\n                    when { branch &#039;develop&#039; }\n                    steps {\n                        script {\n                            // Deploy to staging environment\n                            sh &#039;&#039;&#039;\n                                kubectl set image deployment/myapp-staging \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=staging\n                                \n                                kubectl rollout status deployment/myapp-staging \\\n                                    --namespace=staging --timeout=300s\n                            &#039;&#039;&#039;\n                            \n                            // Run smoke tests\n                            sh &#039;&#039;&#039;\n                                curl -f http://myapp-staging.example.com/health || exit 1\n                                npm run test:e2e -- --base-url http://myapp-staging.example.com\n                            &#039;&#039;&#039;\n                        }\n                    }\n                }\n                \n                stage(&#039;Production&#039;) {\n                    when { \n                        anyOf {\n                            branch &#039;main&#039;\n                            branch &#039;release/*&#039;\n                        }\n                    }\n                    steps {\n                        // Manual approval for production\n                        timeout(time: 60, unit: &#039;MINUTES&#039;) {\n                            input message: &#039;Deploy to production?&#039;, \n                                  ok: &#039;Deploy&#039;,\n                                  submitterParameter: &#039;APPROVER&#039;\n                        }\n                        \n                        script {\n                            sh &#039;&#039;&#039;\n                                # Blue-green deployment\n                                kubectl set image deployment/myapp-production \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=production\n                                \n                                kubectl rollout status deployment/myapp-production \\\n                                    --namespace=production --timeout=600s\n                            &#039;&#039;&#039;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            // Cleanup workspace\n            cleanWs()\n            \n            // Archive artifacts\n            archiveArtifacts artifacts: &#039;target/*.jar,docker-compose.yml&#039;, \n                           allowEmptyArchive: true, \n                           fingerprint: true\n                           \n            // Collect build metrics\n            script {\n                def buildDuration = currentBuild.duration / 1000\n                echo &quot;Build completed in ${buildDuration} seconds&quot;\n                \n                // Custom metrics collection\n                sh &quot;&quot;&quot;\n                    echo &quot;build_duration_seconds{job=\\&quot;${env.JOB_NAME}\\&quot;,build=\\&quot;${env.BUILD_NUMBER}\\&quot;} ${buildDuration}&quot; &gt; build-metrics.txt\n                &quot;&quot;&quot;\n                \n                archiveArtifacts artifacts: &#039;build-metrics.txt&#039;, allowEmptyArchive: true\n            }\n        }\n        \n        success {\n            // Success notifications\n            emailext(\n                subject: &quot;✅ Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;&quot;&quot;Build successful for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n                         \n                Build URL: ${env.BUILD_URL}\n                Git Commit: ${env.GIT_COMMIT}\n                Duration: ${currentBuild.durationString}\n                Approver: ${env.APPROVER ?: &#039;Automatic&#039;}&quot;&quot;&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n            \n            slackSend(\n                channel: &#039;#deployments&#039;,\n                color: &#039;good&#039;,\n                message: &quot;✅ Deployment Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER} by ${env.APPROVER ?: &#039;System&#039;}&quot;\n            )\n        }\n        \n        failure {\n            emailext(\n                subject: &quot;❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Build failed for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n            \n            slackSend(\n                channel: &#039;#ci-cd-alerts&#039;,\n                color: &#039;danger&#039;,\n                message: &quot;❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (&lt;${env.BUILD_URL}|View Details&gt;)&quot;\n            )\n        }\n        \n        unstable {\n            emailext(\n                subject: &quot;⚠️  Build Unstable: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Build unstable for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins CLI monitoring commands\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password version\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-jobs\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-builds job-name\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password get-build job-name 1\n\n# System information\ncurl -u admin:password http://localhost:8080/systemInfo\n\n# Build queue status\ncurl -u admin:password http://localhost:8080/queue/api/json\n\n# Node status\ncurl -u admin:password http://localhost:8080/computer/api/json\n\n# Plugin information\ncurl -u admin:password http://localhost:8080/pluginManager/api/json?depth=1</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Jenkins Prometheus Plugin and configure metrics\n# Via Jenkins UI: Manage Jenkins &gt; Manage Plugins &gt; Available &gt; Prometheus metrics plugin\n\n# Configure Prometheus to scrape Jenkins metrics\nsudo tee /etc/prometheus/jenkins.yml &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: &#039;jenkins&#039;\n    static_configs:\n      - targets: [&#039;localhost:8080&#039;]\n    metrics_path: /prometheus/\n    scrape_interval: 30s\n    scrape_timeout: 10s\nEOF\n\n# Install Jenkins Exporter (alternative)\nwget https://github.com/lovoo/jenkins_exporter/releases/download/v1.0.0/jenkins_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf jenkins_exporter-*.tar.gz\nsudo cp jenkins_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/jenkins_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=Jenkins Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=jenkins\nExecStart=/usr/local/bin/jenkins_exporter \\\n    --jenkins.address=http://localhost:8080 \\\n    --jenkins.username=monitoring \\\n    --jenkins.password=MonitoringPassword123! \\\n    --web.listen-address=:9118\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now jenkins_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-health-check.sh\n\nJENKINS_URL=&quot;http://localhost:8080&quot;\nHEALTH_LOG=&quot;/var/log/jenkins-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✅ Jenkins service is running&quot;\nelse\n    log_message &quot;❌ Jenkins service is not running&quot;\n    exit 2\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; ${JENKINS_URL}/login)\nif [ &quot;${HTTP_STATUS}&quot; = &quot;200&quot; ]; then\n    log_message &quot;✅ Jenkins web interface responding (HTTP ${HTTP_STATUS})&quot;\nelse\n    log_message &quot;❌ Jenkins web interface issues (HTTP ${HTTP_STATUS})&quot;\n    exit 2\nfi\n\n# Check disk space\nJENKINS_HOME_USAGE=$(df /var/lib/jenkins | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${JENKINS_HOME_USAGE} -gt 85 ]; then\n    log_message &quot;⚠️  High disk usage: ${JENKINS_HOME_USAGE}%&quot;\n    exit 1\nelse\n    log_message &quot;✅ Jenkins home disk usage: ${JENKINS_HOME_USAGE}%&quot;\nfi\n\n# Check memory usage\nJAVA_MEMORY=$(ps -o pid,vsz,rss,comm -C java | grep jenkins | awk &#039;{rss+=$3} END {print rss/1024}&#039;)\nif (( $(echo &quot;${JAVA_MEMORY} &gt; 6144&quot; | bc -l) )); then\n    log_message &quot;⚠️  High memory usage: ${JAVA_MEMORY}MB&quot;\n    exit 1\nelse\n    log_message &quot;✅ Jenkins memory usage: ${JAVA_MEMORY}MB&quot;\nfi\n\n# Check running builds (if Jenkins CLI is available)\nif [ -f /var/lib/jenkins/jenkins-cli.jar ]; then\n    RUNNING_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2&gt;/dev/null | grep -c &quot;RUNNING&quot; || echo &quot;0&quot;)\n    log_message &quot;ℹ️  Running builds: ${RUNNING_BUILDS}&quot;\n    \n    # Check for failed builds in last 24 hours\n    FAILED_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2&gt;/dev/null | grep -c &quot;FAILURE&quot; || echo &quot;0&quot;)\n    if [ ${FAILED_BUILDS} -gt 5 ]; then\n        log_message &quot;⚠️  High number of failed builds: ${FAILED_BUILDS}&quot;\n        exit 1\n    fi\nfi\n\n# Check plugin health\nPLUGIN_ERRORS=$(curl -s ${JENKINS_URL}/pluginManager/api/json?depth=1 | jq &#039;.plugins[] | select(.hasUpdate==true or .enabled==false) | .shortName&#039; | wc -l)\nif [ ${PLUGIN_ERRORS} -gt 0 ]; then\n    log_message &quot;⚠️  Plugins need attention: ${PLUGIN_ERRORS}&quot;\nfi\n\nlog_message &quot;✅ Jenkins health check completed&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"comprehensive-backup-strategy\" class=\"mobile-header\">Comprehensive Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-backup.sh\n\nBACKUP_DIR=&quot;/backup/jenkins&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nJENKINS_HOME=&quot;/var/lib/jenkins&quot;\nRETENTION_DAYS=14\n\nmkdir -p ${BACKUP_DIR}/{config,jobs,plugins,secrets,workspace}\n\necho &quot;Starting Jenkins comprehensive backup...&quot;\n\n# Function to gracefully shutdown Jenkins\ngraceful_shutdown() {\n    echo &quot;Putting Jenkins in quiet mode...&quot;\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! quiet-down\n    \n    # Wait for running builds to complete (max 20 minutes)\n    for i in {1..120}; do\n        RUNNING_BUILDS=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-builds | grep -c &quot;RUNNING&quot; || echo &quot;0&quot;)\n        if [ &quot;$RUNNING_BUILDS&quot; -eq 0 ]; then\n            echo &quot;All builds completed, stopping Jenkins...&quot;\n            systemctl stop jenkins\n            break\n        fi\n        echo &quot;Waiting for $RUNNING_BUILDS running builds to complete... (${i}/120)&quot;\n        sleep 10\n    done\n    \n    if [ &quot;$RUNNING_BUILDS&quot; -gt 0 ]; then\n        echo &quot;Warning: Stopping Jenkins with $RUNNING_BUILDS builds still running&quot;\n        systemctl stop jenkins\n    fi\n}\n\n# Function to start Jenkins\nstart_jenkins() {\n    echo &quot;Starting Jenkins...&quot;\n    systemctl start jenkins\n    \n    # Wait for Jenkins to be ready\n    for i in {1..60}; do\n        if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n            echo &quot;Jenkins is ready, canceling quiet mode...&quot;\n            java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! cancel-quiet-down\n            break\n        fi\n        echo &quot;Waiting for Jenkins to start... (${i}/60)&quot;\n        sleep 10\n    done\n}\n\n# Gracefully shutdown Jenkins\ngraceful_shutdown\n\n# Full Jenkins home backup (excluding large/temporary directories)\necho &quot;Creating full Jenkins home backup...&quot;\ntar --exclude=&quot;${JENKINS_HOME}/workspace/*&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/builds/*/archive&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/logs/*&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/.m2/repository&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/caches&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/war&quot; \\\n    -czf ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz \\\n    -C ${JENKINS_HOME} .\n\n# Job configurations backup\necho &quot;Backing up job configurations...&quot;\nmkdir -p ${BACKUP_DIR}/jobs\nfind ${JENKINS_HOME}/jobs -name &quot;config.xml&quot; -exec cp {} ${BACKUP_DIR}/jobs/ \\;\ntar -czf ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz -C ${BACKUP_DIR}/jobs .\nrm ${BACKUP_DIR}/jobs/config.xml 2&gt;/dev/null\n\n# Plugins backup\necho &quot;Backing up installed plugins...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-plugins &gt; ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt\ncp -r ${JENKINS_HOME}/plugins ${BACKUP_DIR}/plugins/plugins-${DATE}/ 2&gt;/dev/null\n\n# Secrets and credentials backup\necho &quot;Backing up secrets and credentials...&quot;\nif [ -d &quot;${JENKINS_HOME}/secrets&quot; ]; then\n    tar -czf ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz -C ${JENKINS_HOME} secrets/\nfi\n\n# System configuration backup\necho &quot;Backing up system configuration...&quot;\ntar -czf ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz \\\n    /etc/default/jenkins \\\n    /etc/sysconfig/jenkins \\\n    /etc/systemd/system/jenkins.service.d/ 2&gt;/dev/null\n\n# Database backup (if using external database)\nif [ -f &quot;${JENKINS_HOME}/database-config.xml&quot; ]; then\n    echo &quot;Backing up external database...&quot;\n    sudo -u postgres pg_dump jenkinsdb | gzip &gt; ${BACKUP_DIR}/config/jenkinsdb-${DATE}.sql.gz\nfi\n\n# Start Jenkins\nstart_jenkins\n\n# Cloud backup (uncomment and configure as needed)\n# aws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/${DATE}/ --recursive --sse AES256\n# az storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups --destination-path ${DATE}\n# gsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/${DATE}/\n\n# Verify backup integrity\necho &quot;Verifying backup integrity...&quot;\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz | head -1)\nif tar -tzf &quot;$LATEST_BACKUP&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Backup integrity verified&quot;\n    BACKUP_SIZE=$(du -h &quot;$LATEST_BACKUP&quot; | cut -f1)\n    echo &quot;Backup size: $BACKUP_SIZE&quot;\nelse\n    echo &quot;❌ Backup integrity check failed&quot;\n    exit 1\nfi\n\n# Cleanup old backups\necho &quot;Cleaning up old backups (keeping last $RETENTION_DAYS days)...&quot;\nfind ${BACKUP_DIR} -name &quot;jenkins-*&quot; -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name &quot;plugin-list-*&quot; -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name &quot;*-${DATE}*&quot; -type d -mtime +${RETENTION_DAYS} -exec rm -rf {} \\;\n\n# Generate backup report\necho &quot;Generating backup report...&quot;\ncat &gt; ${BACKUP_DIR}/backup-report-${DATE}.txt &lt;&lt;EOF\nJenkins Backup Report - ${DATE}\n================================\n\nBackup Location: ${BACKUP_DIR}\nJenkins Home: ${JENKINS_HOME}\nBackup Date: $(date)\nServer: $(hostname)\n\nFiles backed up:\n- Jenkins Home: $(ls -lh ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz)\n- Job Configs: $(ls -lh ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz)\n- Plugins: $(ls -lh ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt)\n- Secrets: $(ls -lh ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz 2&gt;/dev/null || echo &quot;No secrets backup&quot;)\n- System Config: $(ls -lh ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz 2&gt;/dev/null || echo &quot;No system config backup&quot;)\n\nTotal Backup Size: $(du -h ${BACKUP_DIR} | tail -1 | cut -f1)\n\nVerification: ✅ Passed\nEOF\n\necho &quot;✅ Jenkins backup completed: ${DATE}&quot;\necho &quot;📊 Backup report: ${BACKUP_DIR}/backup-report-${DATE}.txt&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-restore.sh\n\nBACKUP_FILE=&quot;${1}&quot;\nRESTORE_TYPE=&quot;${2:-full}&quot;  # full, config-only, jobs-only\n\nusage() {\n    echo &quot;Usage: $0 &lt;backup_file&gt; [restore_type]&quot;\n    echo &quot;Restore types: full (default), config-only, jobs-only&quot;\n    echo &quot;&quot;\n    echo &quot;Available backups:&quot;\n    ls -la /backup/jenkins/config/jenkins-home-*.tar.gz | head -10\n    exit 1\n}\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    usage\nfi\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;❌ Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\necho &quot;🔄 Starting Jenkins restore from: $BACKUP_FILE&quot;\necho &quot;Restore type: $RESTORE_TYPE&quot;\n\n# Pre-restore backup of current state\nif [ -d &quot;/var/lib/jenkins&quot; ]; then\n    echo &quot;📦 Creating backup of current installation...&quot;\n    CURRENT_BACKUP=&quot;/backup/jenkins/pre-restore-$(date +%s)&quot;\n    mkdir -p &quot;$CURRENT_BACKUP&quot;\n    mv /var/lib/jenkins &quot;$CURRENT_BACKUP/jenkins-$(date +%Y%m%d_%H%M%S)&quot;\n    echo &quot;Current installation backed up to: $CURRENT_BACKUP&quot;\nfi\n\n# Stop Jenkins\necho &quot;⏹️  Stopping Jenkins...&quot;\nsystemctl stop jenkins\n\ncase &quot;$RESTORE_TYPE&quot; in\n    &quot;full&quot;)\n        echo &quot;🔄 Performing full restore...&quot;\n        \n        # Create new Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Restore from backup\n        echo &quot;📂 Extracting backup archive...&quot;\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins\n        \n        # Set proper ownership\n        chown -R jenkins:jenkins /var/lib/jenkins\n        chmod -R 755 /var/lib/jenkins\n        \n        # Special permissions for secrets\n        if [ -d &quot;/var/lib/jenkins/secrets&quot; ]; then\n            chmod 700 /var/lib/jenkins/secrets\n            chmod 600 /var/lib/jenkins/secrets/*\n        fi\n        ;;\n        \n    &quot;config-only&quot;)\n        echo &quot;🔄 Performing configuration-only restore...&quot;\n        \n        # Create minimal Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Extract only configuration files\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins \\\n            --include=&quot;*/config.xml&quot; \\\n            --include=&quot;*/secrets/*&quot; \\\n            --include=&quot;*/users/*&quot; \\\n            --include=&quot;*/plugins/*&quot; \\\n            --exclude=&quot;*/workspace/*&quot; \\\n            --exclude=&quot;*/builds/*&quot;\n            \n        chown -R jenkins:jenkins /var/lib/jenkins\n        ;;\n        \n    &quot;jobs-only&quot;)\n        echo &quot;🔄 Performing jobs-only restore...&quot;\n        \n        if [ ! -d &quot;/var/lib/jenkins&quot; ]; then\n            echo &quot;❌ Jenkins directory not found. Cannot restore jobs only.&quot;\n            exit 1\n        fi\n        \n        # Backup current jobs\n        if [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n            mv /var/lib/jenkins/jobs &quot;/var/lib/jenkins/jobs.backup.$(date +%s)&quot;\n        fi\n        \n        # Extract only jobs\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins jobs/\n        chown -R jenkins:jenkins /var/lib/jenkins/jobs\n        ;;\n        \n    *)\n        echo &quot;❌ Unknown restore type: $RESTORE_TYPE&quot;\n        usage\n        ;;\nesac\n\n# Restore system configuration if available\nBACKUP_DIR=$(dirname &quot;$BACKUP_FILE&quot;)\nBACKUP_DATE=$(basename &quot;$BACKUP_FILE&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)\nSYSTEM_CONFIG=&quot;${BACKUP_DIR}/../config/system-config-${BACKUP_DATE}.tar.gz&quot;\n\nif [ -f &quot;$SYSTEM_CONFIG&quot; ]; then\n    echo &quot;🔧 Restoring system configuration...&quot;\n    tar -xzf &quot;$SYSTEM_CONFIG&quot; -C / 2&gt;/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=&quot;${BACKUP_DIR}/jenkinsdb-${BACKUP_DATE}.sql.gz&quot;\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;🗄️  Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql jenkinsdb\nfi\n\n# Start Jenkins\necho &quot;▶️  Starting Jenkins...&quot;\nsystemctl start jenkins\n\n# Wait for Jenkins to start and verify\necho &quot;⏳ Waiting for Jenkins to start...&quot;\nfor i in {1..120}; do\n    if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✅ Jenkins started successfully&quot;\n        break\n    fi\n    echo &quot;Waiting for Jenkins to start... (${i}/120)&quot;\n    sleep 10\ndone\n\n# Verify restoration\necho &quot;🔍 Verifying restoration...&quot;\nif curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins is responding&quot;\n    \n    # Check if jobs were restored\n    if [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n        JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs | wc -l)\n        echo &quot;📋 Jobs restored: $JOB_COUNT&quot;\n    fi\n    \n    # Check if plugins were restored\n    if [ -d &quot;/var/lib/jenkins/plugins&quot; ]; then\n        PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins | wc -l)\n        echo &quot;🔌 Plugins restored: $PLUGIN_COUNT&quot;\n    fi\n    \n    echo &quot;✅ Jenkins restoration completed successfully&quot;\n    echo &quot;&quot;\n    echo &quot;📝 Next steps:&quot;\n    echo &quot;1. Verify Jenkins configuration via web interface&quot;\n    echo &quot;2. Check plugin compatibility and update if needed&quot;\n    echo &quot;3. Verify job configurations and test builds&quot;\n    echo &quot;4. Update any environment-specific settings&quot;\n    \nelse\n    echo &quot;❌ Jenkins restoration failed - service not responding&quot;\n    echo &quot;Check logs: journalctl -u jenkins -n 50&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery\" class=\"mobile-header\">Disaster Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-disaster-recovery.sh\n\necho &quot;🚨 Jenkins Disaster Recovery Procedure&quot;\necho &quot;======================================&quot;\n\n# Check if Jenkins is running\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;⚠️  Jenkins is running. This procedure should be run on a failed system.&quot;\n    read -p &quot;Continue anyway? (y/N): &quot; -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        exit 1\n    fi\nfi\n\n# Find latest backup\nBACKUP_DIR=&quot;/backup/jenkins&quot;\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz 2&gt;/dev/null | head -1)\n\nif [ -z &quot;$LATEST_BACKUP&quot; ]; then\n    echo &quot;❌ No backups found in ${BACKUP_DIR}&quot;\n    echo &quot;Please restore from cloud backup or external storage&quot;\n    exit 1\nfi\n\necho &quot;📦 Latest backup found: $LATEST_BACKUP&quot;\necho &quot;📅 Backup date: $(basename &quot;$LATEST_BACKUP&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)&quot;\n\n# Verify backup integrity\necho &quot;🔍 Verifying backup integrity...&quot;\nif tar -tzf &quot;$LATEST_BACKUP&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Backup integrity verified&quot;\nelse\n    echo &quot;❌ Backup is corrupted. Cannot proceed with recovery.&quot;\n    exit 1\nfi\n\n# Create disaster recovery log\nDR_LOG=&quot;/var/log/jenkins-disaster-recovery-$(date +%Y%m%d_%H%M%S).log&quot;\nexec &gt; &gt;(tee -a &quot;$DR_LOG&quot;)\nexec 2&gt;&amp;1\n\necho &quot;📝 Disaster recovery log: $DR_LOG&quot;\n\n# System preparation\necho &quot;🔧 Preparing system for recovery...&quot;\n\n# Install Jenkins if not present\nif ! command -v jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;📦 Installing Jenkins...&quot;\n    # Add Jenkins repository and install (distribution-specific commands)\n    if [ -f /etc/debian_version ]; then\n        wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n        echo &quot;deb https://pkg.jenkins.io/debian-stable binary/&quot; &gt; /etc/apt/sources.list.d/jenkins.list\n        apt-get update\n        apt-get install -y openjdk-17-jdk jenkins\n    elif [ -f /etc/redhat-release ]; then\n        yum install -y java-17-openjdk jenkins\n    fi\nfi\n\n# Stop Jenkins service\nsystemctl stop jenkins\n\n# Clear existing Jenkins data\nif [ -d &quot;/var/lib/jenkins&quot; ]; then\n    echo &quot;🗑️  Removing existing Jenkins data...&quot;\n    rm -rf /var/lib/jenkins.disaster-backup-$(date +%s)\n    mv /var/lib/jenkins /var/lib/jenkins.disaster-backup-$(date +%s)\nfi\n\n# Create new Jenkins directory\nmkdir -p /var/lib/jenkins\n\n# Restore from backup\necho &quot;🔄 Restoring Jenkins from backup...&quot;\ntar -xzf &quot;$LATEST_BACKUP&quot; -C /var/lib/jenkins\n\n# Set proper permissions\nchown -R jenkins:jenkins /var/lib/jenkins\nchmod -R 755 /var/lib/jenkins\n\n# Special permissions for sensitive files\nif [ -d &quot;/var/lib/jenkins/secrets&quot; ]; then\n    chmod 700 /var/lib/jenkins/secrets\n    chmod 600 /var/lib/jenkins/secrets/*\nfi\n\nif [ -d &quot;/var/lib/jenkins/users&quot; ]; then\n    chmod 700 /var/lib/jenkins/users\nfi\n\n# Restore system configuration\nBACKUP_DATE=$(basename &quot;$LATEST_BACKUP&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)\nSYSTEM_CONFIG=&quot;${BACKUP_DIR}/config/system-config-${BACKUP_DATE}.tar.gz&quot;\n\nif [ -f &quot;$SYSTEM_CONFIG&quot; ]; then\n    echo &quot;🔧 Restoring system configuration...&quot;\n    tar -xzf &quot;$SYSTEM_CONFIG&quot; -C / 2&gt;/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=&quot;${BACKUP_DIR}/config/jenkinsdb-${BACKUP_DATE}.sql.gz&quot;\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;🗄️  Restoring database...&quot;\n    # Ensure PostgreSQL is running\n    systemctl start postgresql\n    \n    # Drop and recreate database\n    sudo -u postgres psql -c &quot;DROP DATABASE IF EXISTS jenkinsdb;&quot;\n    sudo -u postgres psql -c &quot;CREATE DATABASE jenkinsdb;&quot;\n    sudo -u postgres psql -c &quot;GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;&quot;\n    \n    # Restore database\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql jenkinsdb\nfi\n\n# Configure firewall\necho &quot;🔥 Configuring firewall...&quot;\nif command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n    ufw allow 8080/tcp\n    ufw allow 50000/tcp\nelif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n    firewall-cmd --permanent --add-port=8080/tcp\n    firewall-cmd --permanent --add-port=50000/tcp\n    firewall-cmd --reload\nfi\n\n# Start Jenkins\necho &quot;▶️  Starting Jenkins...&quot;\nsystemctl enable jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to start\necho &quot;⏳ Waiting for Jenkins to initialize...&quot;\nfor i in {1..300}; do\n    if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✅ Jenkins is responding&quot;\n        break\n    fi\n    echo &quot;Waiting for Jenkins... (${i}/300)&quot;\n    sleep 10\ndone\n\n# Verify recovery\necho &quot;🔍 Verifying disaster recovery...&quot;\n\n# Check Jenkins status\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins service is running&quot;\nelse\n    echo &quot;❌ Jenkins service failed to start&quot;\n    echo &quot;Check logs: journalctl -u jenkins -n 50&quot;\n    exit 1\nfi\n\n# Check web interface\nif curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins web interface is accessible&quot;\nelse\n    echo &quot;❌ Jenkins web interface is not responding&quot;\n    exit 1\nfi\n\n# Check jobs restoration\nif [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n    JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs 2&gt;/dev/null | wc -l)\n    echo &quot;📋 Jobs recovered: $JOB_COUNT&quot;\nelse\n    echo &quot;⚠️  No jobs directory found&quot;\nfi\n\n# Check plugins restoration\nif [ -d &quot;/var/lib/jenkins/plugins&quot; ]; then\n    PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins 2&gt;/dev/null | wc -l)\n    echo &quot;🔌 Plugins recovered: $PLUGIN_COUNT&quot;\nelse\n    echo &quot;⚠️  No plugins directory found&quot;\nfi\n\n# Generate recovery report\necho &quot;📊 Generating disaster recovery report...&quot;\ncat &gt; &quot;/var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt&quot; &lt;&lt;EOF\nJenkins Disaster Recovery Report\n===============================\nRecovery Date: $(date)\nServer: $(hostname)\nBackup Used: $LATEST_BACKUP\nRecovery Log: $DR_LOG\n\nRecovery Summary:\n- Jenkins Service: $(systemctl is-active jenkins)\n- Web Interface: $(curl -s -o /dev/null -w &quot;%{http_code}&quot; http://localhost:8080/login)\n- Jobs Recovered: $JOB_COUNT\n- Plugins Recovered: $PLUGIN_COUNT\n- Database Restored: $([ -f &quot;$DB_BACKUP&quot; ] &amp;&amp; echo &quot;Yes&quot; || echo &quot;No&quot;)\n\nNext Steps:\n1. Verify Jenkins configuration via web interface: http://$(hostname):8080\n2. Test critical job configurations\n3. Update any environment-specific settings\n4. Verify agent connections\n5. Test integrations (SCM, notifications, etc.)\n6. Update DNS/load balancer configurations if needed\n7. Notify team of recovery completion\n\nRecovery Status: ✅ COMPLETED\nEOF\n\necho &quot;&quot;\necho &quot;🎉 Jenkins disaster recovery completed successfully!&quot;\necho &quot;📝 Recovery report saved to: /var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt&quot;\necho &quot;&quot;\necho &quot;🔗 Access Jenkins: http://$(hostname):8080&quot;\necho &quot;&quot;\necho &quot;⚠️  Important post-recovery tasks:&quot;\necho &quot;1. Verify all job configurations&quot;\necho &quot;2. Test agent connections&quot;\necho &quot;3. Verify integrations (GitHub, LDAP, etc.)&quot;\necho &quot;4. Update any environment-specific configurations&quot;\necho &quot;5. Perform a backup of the recovered system&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Jenkins won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status jenkins\nsudo journalctl -u jenkins -f\n\n# Check Java version and JAVA_HOME\njava -version\necho $JAVA_HOME\n\n# Check disk space\ndf -h /var/lib/jenkins\n\n# Check permissions\nls -la /var/lib/jenkins\nsudo chown -R jenkins:jenkins /var/lib/jenkins\n\n# Check memory allocation\nfree -h\nps aux | grep jenkins\n\n# Clear Jenkins cache\nsudo systemctl stop jenkins\nsudo rm -rf /var/lib/jenkins/war\nsudo systemctl start jenkins</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Memory issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase JVM memory\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n\n# Monitor memory usage\ntop -p $(pgrep java)\njstat -gc $(pgrep java) 5s</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Plugin issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Safe start (disable all plugins)\nsudo systemctl stop jenkins\necho &#039;jenkins.install.runSetupWizard=false&#039; &gt; /var/lib/jenkins/jenkins.install.runSetupWizard\nsudo systemctl start jenkins\n\n# Clear plugin cache\nsudo rm -rf /var/lib/jenkins/plugins/*.bak\nsudo rm -rf /var/lib/jenkins/plugins/*.hpi.pinned\n\n# Update plugins via CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E &quot;\\)$&quot; | awk &#039;{print $1}&#039; | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Check plugin dependencies\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -v &quot;^$&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Build failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check workspace permissions\nsudo chown -R jenkins:jenkins /var/lib/jenkins/workspace\n\n# Clear old builds\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password delete-builds job-name 1-100\n\n# Check agent connectivity\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-computers\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password connect-node agent-name\n\n# Monitor build resources\nhtop\niostat -x 1</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging for Jenkins\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx4g -Djava.util.logging.config.file=/var/lib/jenkins/logging.properties&quot;\n\n# Create detailed logging configuration\nsudo tee /var/lib/jenkins/logging.properties &lt;&lt;EOF\n.level = INFO\n\n# Root logger\nhandlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler\n\n# Console logging\njava.util.logging.ConsoleHandler.level = INFO\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n\n# File logging\njava.util.logging.FileHandler.pattern = /var/log/jenkins/jenkins-debug.log\njava.util.logging.FileHandler.limit = 50000000\njava.util.logging.FileHandler.count = 5\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\n\n# Component-specific logging\nhudson.level = FINE\njenkins.level = FINE\nhudson.security.level = FINE\nhudson.plugins.level = FINE\nhudson.model.level = FINE\n\n# Plugin debugging\nhudson.plugins.git.level = FINE\norg.jenkinsci.plugins.workflow.level = FINE\nEOF\n\nsudo systemctl restart jenkins\n\n# View debug logs\nsudo tail -f /var/log/jenkins/jenkins-debug.log\n\n# Enable specific plugin debugging via Jenkins CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password groovy = &lt;&lt;EOF\nimport java.util.logging.Logger\nimport java.util.logging.Level\n\n// Enable debug logging for specific components\nLogger.getLogger(&quot;hudson.security&quot;).setLevel(Level.FINE)\nLogger.getLogger(&quot;hudson.plugins.git&quot;).setLevel(Level.FINE)\nLogger.getLogger(&quot;org.jenkinsci.plugins.workflow&quot;).setLevel(Level.FINE)\n\nprintln &quot;Debug logging enabled&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update jenkins\nsudo dnf update jenkins\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade jenkins\n\n# Arch Linux\nyay -Syu jenkins\n\n# Alpine Linux (Docker)\ndocker pull jenkins/jenkins:lts-jdk17\ndocker stop jenkins\ndocker rm jenkins\n# Re-run docker run command with new image\n\n# openSUSE\nsudo zypper update jenkins\n\n# FreeBSD\npkg update\npkg upgrade jenkins\n\n# macOS\nbrew upgrade jenkins-lts\n\n# Always backup before updates\nsudo /usr/local/bin/jenkins-backup.sh\n\n# Update plugins after Jenkins update\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E &quot;\\)$&quot; | awk &#039;{print $1}&#039; | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Restart after updates\nsudo systemctl restart jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-maintenance.sh\n\nJENKINS_HOME=&quot;/var/lib/jenkins&quot;\nJENKINS_URL=&quot;http://localhost:8080&quot;\nADMIN_CREDENTIALS=&quot;admin:SecureAdminPassword123!&quot;\n\necho &quot;🔧 Starting Jenkins maintenance tasks...&quot;\n\n# Clean up old builds\necho &quot;🗑️  Cleaning up old builds...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport jenkins.model.Jenkins\nimport hudson.model.*\n\nJenkins.instance.getAllItems(Job.class).each { job -&gt;\n    if (job.getBuilds().size() &gt; 50) {\n        def buildsToDelete = job.getBuilds().drop(50)\n        println &quot;Deleting \\${buildsToDelete.size()} old builds for job: \\${job.name}&quot;\n        buildsToDelete.each { build -&gt;\n            build.delete()\n        }\n    }\n}\nEOF\n\n# Clean up workspace\necho &quot;🧹 Cleaning up workspaces...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport hudson.model.*\nimport hudson.FilePath\nimport jenkins.model.Jenkins\n\nJenkins.instance.getAllItems(AbstractProject.class).each { job -&gt;\n    def workspace = job.getWorkspace()\n    if (workspace != null &amp;&amp; workspace.exists()) {\n        def size = workspace.length()\n        if (size &gt; 1024 * 1024 * 100) { // &gt; 100MB\n            println &quot;Workspace for \\${job.name} is \\${size / (1024*1024)} MB&quot;\n            workspace.deleteRecursive()\n            println &quot;Cleaned workspace for job: \\${job.name}&quot;\n        }\n    }\n}\nEOF\n\n# Update plugins\necho &quot;🔌 Checking for plugin updates...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} list-plugins | grep -E &quot;\\)$&quot; &gt; /tmp/outdated-plugins.txt\n\nif [ -s /tmp/outdated-plugins.txt ]; then\n    echo &quot;📦 Updating outdated plugins:&quot;\n    cat /tmp/outdated-plugins.txt\n    \n    # Update plugins\n    awk &#039;{print $1}&#039; /tmp/outdated-plugins.txt | xargs java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} install-plugin\n    \n    echo &quot;🔄 Restarting Jenkins to apply plugin updates...&quot;\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} safe-restart\nfi\n\n# Clean up logs\necho &quot;📋 Rotating and cleaning logs...&quot;\nfind ${JENKINS_HOME}/logs -name &quot;*.log&quot; -mtime +7 -delete\nfind /var/log/jenkins -name &quot;*.log.*&quot; -mtime +7 -delete\n\n# Disk usage check\necho &quot;💾 Checking disk usage...&quot;\nDISK_USAGE=$(df ${JENKINS_HOME} | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${DISK_USAGE} -gt 80 ]; then\n    echo &quot;⚠️  High disk usage: ${DISK_USAGE}%&quot;\n    \n    # Clean up large files\n    find ${JENKINS_HOME}/jobs -name &quot;*.log&quot; -size +100M -mtime +3 -delete\n    find ${JENKINS_HOME}/workspace -name &quot;*&quot; -size +500M -mtime +1 -delete\nfi\n\n# Backup verification\necho &quot;🔍 Verifying recent backups...&quot;\nLATEST_BACKUP=$(ls -t /backup/jenkins/config/jenkins-home-*.tar.gz 2&gt;/dev/null | head -1)\nif [ -n &quot;$LATEST_BACKUP&quot; ]; then\n    BACKUP_AGE=$(($(date +%s) - $(stat -c %Y &quot;$LATEST_BACKUP&quot;)))\n    if [ $BACKUP_AGE -gt 172800 ]; then  # 2 days\n        echo &quot;⚠️  Latest backup is older than 2 days: $LATEST_BACKUP&quot;\n        echo &quot;💾 Running backup now...&quot;\n        /usr/local/bin/jenkins-backup.sh\n    else\n        echo &quot;✅ Recent backup found: $LATEST_BACKUP&quot;\n    fi\nelse\n    echo &quot;❌ No backups found. Running backup...&quot;\n    /usr/local/bin/jenkins-backup.sh\nfi\n\n# Security check\necho &quot;🔒 Running security checks...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport jenkins.security.ApiTokenProperty\nimport hudson.security.SecurityRealm\nimport jenkins.model.Jenkins\n\ndef instance = Jenkins.getInstance()\n\n// Check for default passwords\ndef realm = instance.getSecurityRealm()\nif (realm instanceof hudson.security.HudsonPrivateSecurityRealm) {\n    def users = realm.getAllUsers()\n    users.each { user -&gt;\n        if (user.getId() == &quot;admin&quot;) {\n            println &quot;⚠️  Default admin user found. Consider renaming or removing.&quot;\n        }\n    }\n}\n\n// Check for anonymous access\ndef authStrategy = instance.getAuthorizationStrategy()\nif (authStrategy.hasPermission(org.acegisecurity.Authentication.ANONYMOUS_USER, Jenkins.READ)) {\n    println &quot;⚠️  Anonymous read access is enabled&quot;\n}\n\nprintln &quot;Security check completed&quot;\nEOF\n\n# Performance check\necho &quot;📊 Checking performance metrics...&quot;\nJAVA_PID=$(pgrep java)\nif [ -n &quot;$JAVA_PID&quot; ]; then\n    MEMORY_USAGE=$(ps -o pid,vsz,rss,comm -p $JAVA_PID | awk &#039;NR==2 {print $3/1024}&#039;)\n    CPU_USAGE=$(ps -o pid,pcpu,comm -p $JAVA_PID | awk &#039;NR==2 {print $2}&#039;)\n    \n    echo &quot;Memory usage: ${MEMORY_USAGE}MB&quot;\n    echo &quot;CPU usage: ${CPU_USAGE}%&quot;\n    \n    if (( $(echo &quot;${MEMORY_USAGE} &gt; 6144&quot; | bc -l) )); then\n        echo &quot;⚠️  High memory usage detected&quot;\n    fi\nfi\n\necho &quot;✅ Jenkins maintenance completed&quot;\n\n# Generate maintenance report\ncat &gt; /var/log/jenkins-maintenance-$(date +%Y%m%d).log &lt;&lt;EOF\nJenkins Maintenance Report - $(date)\n===================================\n\nTasks Completed:\n- Old builds cleanup: ✅\n- Workspace cleanup: ✅\n- Plugin updates: $([ -s /tmp/outdated-plugins.txt ] &amp;&amp; echo &quot;✅ Updated&quot; || echo &quot;✅ Up to date&quot;)\n- Log rotation: ✅\n- Disk usage check: ✅ (${DISK_USAGE}%)\n- Backup verification: ✅\n- Security check: ✅\n- Performance check: ✅\n\nSystem Status:\n- Memory usage: ${MEMORY_USAGE}MB\n- CPU usage: ${CPU_USAGE}%\n- Disk usage: ${DISK_USAGE}%\n\nNext maintenance: $(date -d &quot;next week&quot; +%Y-%m-%d)\nEOF\n\necho &quot;📊 Maintenance report: /var/log/jenkins-maintenance-$(date +%Y%m%d).log&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;0 2 * * * root /usr/local/bin/jenkins-maintenance.sh&quot; | sudo tee -a /etc/crontab\necho &quot;*/15 * * * * root /usr/local/bin/jenkins-health-check.sh&quot; | sudo tee -a /etc/crontab\n\n# Log rotation configuration\nsudo tee /etc/logrotate.d/jenkins &lt;&lt;EOF\n/var/log/jenkins/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins adm\n    postrotate\n        systemctl reload jenkins &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\n\n/var/lib/jenkins/logs/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins jenkins\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"git-integration-with-webhooks\" class=\"mobile-header\">Git Integration with Webhooks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Git webhook for automatic builds\nsudo tee /var/lib/jenkins/casc_configs/git-integration.yaml &lt;&lt;EOF\nunclassified:\n  gitHubPluginConfig:\n    hookUrl: &quot;https://jenkins.example.com/github-webhook/&quot;\n    \n  gitLabConnectionConfig:\n    connections:\n      - name: &quot;GitLab&quot;\n        url: &quot;https://gitlab.example.com&quot;\n        apiTokenId: &quot;gitlab-api-token&quot;\n        clientBuilderId: &quot;autodetect&quot;\n        connectionTimeout: 10\n        readTimeout: 10\n\njobs:\n  - script: |\n      multibranchPipelineJob(&#039;example-app&#039;) {\n        branchSources {\n          git {\n            id(&#039;github-example&#039;)\n            remote(&#039;https://github.com/example/app.git&#039;)\n            credentialsId(&#039;github-credentials&#039;)\n            includes(&#039;main develop feature/* release/*&#039;)\n          }\n        }\n        \n        factory {\n          workflowBranchProjectFactory {\n            scriptPath(&#039;Jenkinsfile&#039;)\n          }\n        }\n        \n        triggers {\n          periodicFolderTrigger {\n            interval(&#039;1d&#039;)\n          }\n        }\n        \n        orphanedItemStrategy {\n          discardOldItems {\n            daysToKeep(7)\n            numToKeep(10)\n          }\n        }\n      }\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-integration\" class=\"mobile-header\">Docker Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"groovy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">groovy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-groovy\">// Docker pipeline example\npipeline {\n    agent any\n    \n    environment {\n        DOCKER_REGISTRY = credentials(&#039;docker-registry&#039;)\n        DOCKER_IMAGE = &quot;${env.JOB_NAME}:${env.BUILD_NUMBER}&quot;\n    }\n    \n    stages {\n        stage(&#039;Build Docker Image&#039;) {\n            steps {\n                script {\n                    def image = docker.build(&quot;${DOCKER_REGISTRY}/${DOCKER_IMAGE}&quot;)\n                    \n                    // Security scan\n                    sh &quot;&quot;&quot;\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}\n                    &quot;&quot;&quot;\n                    \n                    // Push to registry\n                    docker.withRegistry(&quot;https://${DOCKER_REGISTRY}&quot;, &#039;docker-registry-credentials&#039;) {\n                        image.push()\n                        image.push(&quot;latest&quot;)\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Deploy&#039;) {\n            steps {\n                script {\n                    // Deploy to Kubernetes\n                    sh &quot;&quot;&quot;\n                        kubectl set image deployment/myapp \\\n                            myapp=${DOCKER_REGISTRY}/${DOCKER_IMAGE} \\\n                            --namespace=production\n                        \n                        kubectl rollout status deployment/myapp \\\n                            --namespace=production --timeout=300s\n                    &quot;&quot;&quot;\n                }\n            }\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Jenkins agent in Kubernetes\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: jenkins\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: jenkins\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods&quot;,&quot;pods/exec&quot;]\n  verbs: [&quot;create&quot;,&quot;delete&quot;,&quot;get&quot;,&quot;list&quot;,&quot;patch&quot;,&quot;update&quot;,&quot;watch&quot;]\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods/log&quot;]\n  verbs: [&quot;get&quot;,&quot;list&quot;,&quot;watch&quot;]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: jenkins\n---\n# Jenkins Configuration as Code for Kubernetes\njenkins:\n  clouds:\n    - kubernetes:\n        name: &quot;kubernetes&quot;\n        serverUrl: &quot;https://kubernetes.default&quot;\n        namespace: &quot;jenkins&quot;\n        credentialsId: &quot;kubernetes-token&quot;\n        jenkinsUrl: &quot;http://jenkins.jenkins.svc.cluster.local:8080&quot;\n        containerCapStr: &quot;10&quot;\n        templates:\n          - name: &quot;jenkins-agent&quot;\n            namespace: &quot;jenkins&quot;\n            label: &quot;kubernetes&quot;\n            containers:\n              - name: &quot;jnlp&quot;\n                image: &quot;jenkins/inbound-agent:latest&quot;\n                workingDir: &quot;/home/jenkins/agent&quot;\n                resourceRequestCpu: &quot;100m&quot;\n                resourceRequestMemory: &quot;256Mi&quot;\n                resourceLimitCpu: &quot;500m&quot;\n                resourceLimitMemory: &quot;1Gi&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"ldapactive-directory-integration\" class=\"mobile-header\">LDAP/Active Directory Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">jenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ad.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          inhibitInferRootDN: false\n          userSearchBase: &quot;OU=Users,OU=Company&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups,OU=Company&quot;\n          groupSearchFilter: &quot;(&amp;(objectClass=group)(cn={0}))&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-service-password&quot;\n          displayNameAttributeName: &quot;displayName&quot;\n          mailAddressAttributeName: &quot;mail&quot;\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;administrators&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;Domain Admins&quot;\n              - &quot;Jenkins Admins&quot;\n        items:\n          - name: &quot;developers&quot;\n            pattern: &quot;.*&quot;\n            permissions:\n              - &quot;Job/Build&quot;\n              - &quot;Job/Cancel&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;Development Team&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Jenkins Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://jenkins.io/projects/jcasc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Configuration as Code</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/pipeline/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Pipeline Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://plugins.jenkins.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Plugin Index</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/community/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/jenkinsci/jenkins\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins GitHub Repository</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"38 min","wordCount":7591,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install Java 17 LTS","id":"install-java-17-lts"},{"level":1,"text":"Add Jenkins repository","id":"add-jenkins-repository"},{"level":1,"text":"Install Jenkins","id":"install-jenkins"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Get initial admin password","id":"get-initial-admin-password"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update system packages","id":"update-system-packages"},{"level":1,"text":"Install Java 17 LTS","id":"install-java-17-lts"},{"level":1,"text":"Add Jenkins repository","id":"add-jenkins-repository"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install Jenkins","id":"install-jenkins"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Get initial admin password","id":"get-initial-admin-password"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install Java 17 LTS","id":"install-java-17-lts"},{"level":1,"text":"Install Jenkins from AUR","id":"install-jenkins-from-aur"},{"level":1,"text":"Alternative: Install manually from AUR","id":"alternative-install-manually-from-aur"},{"level":1,"text":"Create jenkins user if not created","id":"create-jenkins-user-if-not-created"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Get initial admin password","id":"get-initial-admin-password"},{"level":1,"text":"Configuration location: /etc/jenkins/","id":"configuration-location-etcjenkins"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Jenkins is not officially packaged for Alpine Linux","id":"jenkins-is-not-officially-packaged-for-alpine-linux"},{"level":1,"text":"Use Docker or manual installation","id":"use-docker-or-manual-installation"},{"level":1,"text":"Method 1: Docker installation","id":"method-1-docker-installation"},{"level":1,"text":"Create Jenkins data directory","id":"create-jenkins-data-directory"},{"level":1,"text":"Run Jenkins container","id":"run-jenkins-container"},{"level":1,"text":"Get initial admin password","id":"get-initial-admin-password"},{"level":1,"text":"Method 2: Manual installation with OpenJDK","id":"method-2-manual-installation-with-openjdk"},{"level":1,"text":"Create jenkins user and directories","id":"create-jenkins-user-and-directories"},{"level":1,"text":"Create init script","id":"create-init-script"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"openSUSE Leap/Tumbleweed","id":"opensuse-leaptumbleweed"},{"level":1,"text":"Add Jenkins repository","id":"add-jenkins-repository"},{"level":1,"text":"Install Jenkins","id":"install-jenkins"},{"level":1,"text":"SLES 15","id":"sles-15"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Get initial admin password","id":"get-initial-admin-password"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start Jenkins service","id":"start-jenkins-service"},{"level":1,"text":"Or run manually","id":"or-run-manually"},{"level":1,"text":"Alternative: Install specific version","id":"alternative-install-specific-version"},{"level":1,"text":"Get initial admin password","id":"get-initial-admin-password"},{"level":1,"text":"Configuration location: ~/.jenkins/","id":"configuration-location-jenkins"},{"level":1,"text":"Alternative: /usr/local/var/jenkins_home/ (Intel Macs)","id":"alternative-usrlocalvarjenkins_home-intel-macs"},{"level":1,"text":"Alternative: /opt/homebrew/var/jenkins_home/ (Apple Silicon)","id":"alternative-opthomebrewvarjenkins_home-apple-silicon"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Using ports","id":"using-ports"},{"level":1,"text":"Enable Jenkins","id":"enable-jenkins"},{"level":1,"text":"Create jenkins user and directories","id":"create-jenkins-user-and-directories"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Get initial admin password","id":"get-initial-admin-password"},{"level":1,"text":"Configuration location: /usr/local/jenkins/","id":"configuration-location-usrlocaljenkins"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Method 1: Using Chocolatey","id":"method-1-using-chocolatey"},{"level":1,"text":"Method 2: Using Scoop","id":"method-2-using-scoop"},{"level":1,"text":"Method 3: Manual installation","id":"method-3-manual-installation"},{"level":1,"text":"Download from https://www.jenkins.io/download/","id":"download-from-httpswwwjenkinsiodownload"},{"level":1,"text":"Run jenkins.msi installer","id":"run-jenkinsmsi-installer"},{"level":1,"text":"Method 4: Windows service installation","id":"method-4-windows-service-installation"},{"level":1,"text":"Download jenkins.war","id":"download-jenkinswar"},{"level":1,"text":"Install as Windows service","id":"install-as-windows-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Get initial admin password","id":"get-initial-admin-password"},{"level":1,"text":"Configuration location: C:\\Program Files\\Jenkins\\","id":"configuration-location-cprogram-filesjenkins"},{"level":1,"text":"Or: %JENKINS_HOME% (if custom location)","id":"or-jenkins_home-if-custom-location"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":1,"text":"Set JAVA_HOME (Linux/macOS)","id":"set-java_home-linuxmacos"},{"level":1,"text":"Verify Java installation","id":"verify-java-installation"},{"level":1,"text":"Initial web setup (after accessing http://your-server:8080)","id":"initial-web-setup-after-accessing-httpyour-server8080"},{"level":1,"text":"1. Enter admin password from: /var/lib/jenkins/secrets/initialAdminPassword","id":"1-enter-admin-password-from-varlibjenkinssecretsinitialadminpassword"},{"level":1,"text":"2. Install suggested plugins or select specific plugins","id":"2-install-suggested-plugins-or-select-specific-plugins"},{"level":1,"text":"3. Create first admin user","id":"3-create-first-admin-user"},{"level":1,"text":"4. Configure Jenkins URL","id":"4-configure-jenkins-url"},{"level":1,"text":"Essential plugins to install:","id":"essential-plugins-to-install"},{"level":1,"text":"- Pipeline plugins (Pipeline Suite)","id":"pipeline-plugins-pipeline-suite"},{"level":1,"text":"- Git plugin","id":"git-plugin"},{"level":1,"text":"- Credentials Binding Plugin","id":"credentials-binding-plugin"},{"level":1,"text":"- Build Timeout Plugin","id":"build-timeout-plugin"},{"level":1,"text":"- Timestamper Plugin","id":"timestamper-plugin"},{"level":1,"text":"- Workspace Cleanup Plugin","id":"workspace-cleanup-plugin"},{"level":1,"text":"- Blue Ocean (modern UI)","id":"blue-ocean-modern-ui"},{"level":1,"text":"- Matrix Authorization Strategy Plugin","id":"matrix-authorization-strategy-plugin"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"Check web interface","id":"check-web-interface"},{"level":1,"text":"Test Java version","id":"test-java-version"},{"level":1,"text":"Check Jenkins process","id":"check-jenkins-process"},{"level":1,"text":"Verify Jenkins CLI","id":"verify-jenkins-cli"},{"level":1,"text":"Check available plugins","id":"check-available-plugins"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable Jenkins to start on boot","id":"enable-jenkins-to-start-on-boot"},{"level":1,"text":"Start Jenkins","id":"start-jenkins"},{"level":1,"text":"Stop Jenkins","id":"stop-jenkins"},{"level":1,"text":"Restart Jenkins","id":"restart-jenkins"},{"level":1,"text":"Graceful restart (wait for running builds)","id":"graceful-restart-wait-for-running-builds"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Edit service configuration","id":"edit-service-configuration"},{"level":1,"text":"Add custom environment variables or JVM options","id":"add-custom-environment-variables-or-jvm-options"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Docker-based installation","id":"docker-based-installation"},{"level":1,"text":"Check container status","id":"check-container-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Manual installation","id":"manual-installation"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start Jenkins","id":"start-jenkins"},{"level":1,"text":"Stop Jenkins","id":"stop-jenkins"},{"level":1,"text":"Restart Jenkins","id":"restart-jenkins"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"Manual control","id":"manual-control"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start Jenkins service","id":"start-jenkins-service"},{"level":1,"text":"Stop Jenkins service","id":"stop-jenkins-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs (Windows Event Log)","id":"view-logs-windows-event-log"},{"level":1,"text":"Or check Jenkins logs","id":"or-check-jenkins-logs"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"High Availability Configuration","id":"high-availability-configuration"},{"level":1,"text":"Multi-master setup with shared storage","id":"multi-master-setup-with-shared-storage"},{"level":1,"text":"Method 1: Shared filesystem (NFS, GlusterFS)","id":"method-1-shared-filesystem-nfs-glusterfs"},{"level":1,"text":"Update Jenkins home","id":"update-jenkins-home"},{"level":1,"text":"Add:","id":"add"},{"level":1,"text":"Method 2: Database-backed configuration","id":"method-2-database-backed-configuration"},{"level":1,"text":"Install CloudBees Jenkins Enterprise plugins for HA","id":"install-cloudbees-jenkins-enterprise-plugins-for-ha"},{"level":1,"text":"Configure external database (PostgreSQL recommended)","id":"configure-external-database-postgresql-recommended"},{"level":1,"text":"Agent configuration for load distribution","id":"agent-configuration-for-load-distribution"},{"level":3,"text":"Advanced Security Settings","id":"advanced-security-settings"},{"level":1,"text":"Configure Jenkins Configuration as Code (JCasC) for security","id":"configure-jenkins-configuration-as-code-jcasc-for-security"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":1,"text":"/etc/nginx/sites-available/jenkins","id":"etcnginxsites-availablejenkins"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":1,"text":"/etc/haproxy/haproxy.cfg","id":"etchaproxyhaproxycfg"},{"level":3,"text":"Apache HTTP Server Configuration","id":"apache-http-server-configuration"},{"level":1,"text":"/etc/apache2/sites-available/jenkins.conf","id":"etcapache2sites-availablejenkinsconf"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"SSL/TLS Setup","id":"ssltls-setup"},{"level":1,"text":"Generate self-signed certificate (development only)","id":"generate-self-signed-certificate-development-only"},{"level":1,"text":"Create Java keystore","id":"create-java-keystore"},{"level":1,"text":"Configure Jenkins to use HTTPS","id":"configure-jenkins-to-use-https"},{"level":1,"text":"Add:","id":"add"},{"level":1,"text":"Or use Let's Encrypt with reverse proxy (recommended)","id":"or-use-lets-encrypt-with-reverse-proxy-recommended"},{"level":3,"text":"Authentication and Authorization","id":"authentication-and-authorization"},{"level":1,"text":"Configure LDAP authentication via JCasC","id":"configure-ldap-authentication-via-jcasc"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":1,"text":"UFW (Ubuntu/Debian)","id":"ufw-ubuntudebian"},{"level":1,"text":"firewalld (RHEL/CentOS/openSUSE)","id":"firewalld-rhelcentosopensuse"},{"level":1,"text":"iptables","id":"iptables"},{"level":1,"text":"pf (FreeBSD)","id":"pf-freebsd"},{"level":1,"text":"Add to /etc/pf.conf","id":"add-to-etcpfconf"},{"level":1,"text":"Windows Firewall","id":"windows-firewall"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"External Database Configuration (PostgreSQL)","id":"external-database-configuration-postgresql"},{"level":1,"text":"Install PostgreSQL","id":"install-postgresql"},{"level":1,"text":"Create Jenkins database","id":"create-jenkins-database"},{"level":1,"text":"Download PostgreSQL driver","id":"download-postgresql-driver"},{"level":1,"text":"Configure Jenkins to use PostgreSQL","id":"configure-jenkins-to-use-postgresql"},{"level":1,"text":"PostgreSQL database configuration","id":"postgresql-database-configuration"},{"level":1,"text":"Create database configuration","id":"create-database-configuration"},{"level":3,"text":"Backup Database Schema","id":"backup-database-schema"},{"level":1,"text":"Create database schema backup","id":"create-database-schema-backup"},{"level":1,"text":"Create Jenkins jobs and configuration backup","id":"create-jenkins-jobs-and-configuration-backup"},{"level":1,"text":"PostgreSQL backup","id":"postgresql-backup"},{"level":1,"text":"Jenkins configuration backup","id":"jenkins-configuration-backup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Jenkins-specific system optimizations","id":"jenkins-specific-system-optimizations"},{"level":1,"text":"Jenkins optimizations","id":"jenkins-optimizations"},{"level":1,"text":"Increase file descriptor limits","id":"increase-file-descriptor-limits"},{"level":1,"text":"Optimize Jenkins JVM settings","id":"optimize-jenkins-jvm-settings"},{"level":1,"text":"Add:","id":"add"},{"level":3,"text":"Jenkins Performance Configuration","id":"jenkins-performance-configuration"},{"level":1,"text":"Configure Jenkins for high performance","id":"configure-jenkins-for-high-performance"},{"level":1,"text":"Configure agent templates for auto-scaling","id":"configure-agent-templates-for-auto-scaling"},{"level":3,"text":"Pipeline Optimization","id":"pipeline-optimization"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Built-in Monitoring","id":"built-in-monitoring"},{"level":1,"text":"Jenkins CLI monitoring commands","id":"jenkins-cli-monitoring-commands"},{"level":1,"text":"System information","id":"system-information"},{"level":1,"text":"Build queue status","id":"build-queue-status"},{"level":1,"text":"Node status","id":"node-status"},{"level":1,"text":"Plugin information","id":"plugin-information"},{"level":3,"text":"External Monitoring Setup","id":"external-monitoring-setup"},{"level":1,"text":"Install Jenkins Prometheus Plugin and configure metrics","id":"install-jenkins-prometheus-plugin-and-configure-metrics"},{"level":1,"text":"Via Jenkins UI: Manage Jenkins > Manage Plugins > Available > Prometheus metrics plugin","id":"via-jenkins-ui-manage-jenkins-manage-plugins-available-prometheus-metrics-plugin"},{"level":1,"text":"Configure Prometheus to scrape Jenkins metrics","id":"configure-prometheus-to-scrape-jenkins-metrics"},{"level":1,"text":"Install Jenkins Exporter (alternative)","id":"install-jenkins-exporter-alternative"},{"level":1,"text":"Create systemd service","id":"create-systemd-service"},{"level":3,"text":"Health Check Scripts","id":"health-check-scripts"},{"level":1,"text":"jenkins-health-check.sh","id":"jenkins-health-checksh"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"Check web interface","id":"check-web-interface"},{"level":1,"text":"Check disk space","id":"check-disk-space"},{"level":1,"text":"Check memory usage","id":"check-memory-usage"},{"level":1,"text":"Check running builds (if Jenkins CLI is available)","id":"check-running-builds-if-jenkins-cli-is-available"},{"level":1,"text":"Check plugin health","id":"check-plugin-health"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Comprehensive Backup Strategy","id":"comprehensive-backup-strategy"},{"level":1,"text":"jenkins-backup.sh","id":"jenkins-backupsh"},{"level":1,"text":"Function to gracefully shutdown Jenkins","id":"function-to-gracefully-shutdown-jenkins"},{"level":1,"text":"Function to start Jenkins","id":"function-to-start-jenkins"},{"level":1,"text":"Gracefully shutdown Jenkins","id":"gracefully-shutdown-jenkins"},{"level":1,"text":"Full Jenkins home backup (excluding large/temporary directories)","id":"full-jenkins-home-backup-excluding-largetemporary-directories"},{"level":1,"text":"Job configurations backup","id":"job-configurations-backup"},{"level":1,"text":"Plugins backup","id":"plugins-backup"},{"level":1,"text":"Secrets and credentials backup","id":"secrets-and-credentials-backup"},{"level":1,"text":"System configuration backup","id":"system-configuration-backup"},{"level":1,"text":"Database backup (if using external database)","id":"database-backup-if-using-external-database"},{"level":1,"text":"Start Jenkins","id":"start-jenkins"},{"level":1,"text":"Cloud backup (uncomment and configure as needed)","id":"cloud-backup-uncomment-and-configure-as-needed"},{"level":1,"text":"aws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/${DATE}/ --recursive --sse AES256","id":"aws-s3-cp-backup_dir-s3jenkins-backupsdate-recursive-sse-aes256"},{"level":1,"text":"az storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups --destination-path ${DATE}","id":"az-storage-blob-upload-batch-source-backup_dir-destination-jenkins-backups-destination-path-date"},{"level":1,"text":"gsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/${DATE}/","id":"gsutil-cp-r-backup_dir-gsjenkins-backupsdate"},{"level":1,"text":"Verify backup integrity","id":"verify-backup-integrity"},{"level":1,"text":"Cleanup old backups","id":"cleanup-old-backups"},{"level":1,"text":"Generate backup report","id":"generate-backup-report"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":1,"text":"jenkins-restore.sh","id":"jenkins-restoresh"},{"level":1,"text":"Pre-restore backup of current state","id":"pre-restore-backup-of-current-state"},{"level":1,"text":"Stop Jenkins","id":"stop-jenkins"},{"level":1,"text":"Restore system configuration if available","id":"restore-system-configuration-if-available"},{"level":1,"text":"Restore database if available","id":"restore-database-if-available"},{"level":1,"text":"Start Jenkins","id":"start-jenkins"},{"level":1,"text":"Wait for Jenkins to start and verify","id":"wait-for-jenkins-to-start-and-verify"},{"level":1,"text":"Verify restoration","id":"verify-restoration"},{"level":3,"text":"Disaster Recovery","id":"disaster-recovery"},{"level":1,"text":"jenkins-disaster-recovery.sh","id":"jenkins-disaster-recoverysh"},{"level":1,"text":"Check if Jenkins is running","id":"check-if-jenkins-is-running"},{"level":1,"text":"Find latest backup","id":"find-latest-backup"},{"level":1,"text":"Verify backup integrity","id":"verify-backup-integrity"},{"level":1,"text":"Create disaster recovery log","id":"create-disaster-recovery-log"},{"level":1,"text":"System preparation","id":"system-preparation"},{"level":1,"text":"Install Jenkins if not present","id":"install-jenkins-if-not-present"},{"level":1,"text":"Stop Jenkins service","id":"stop-jenkins-service"},{"level":1,"text":"Clear existing Jenkins data","id":"clear-existing-jenkins-data"},{"level":1,"text":"Create new Jenkins directory","id":"create-new-jenkins-directory"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Set proper permissions","id":"set-proper-permissions"},{"level":1,"text":"Special permissions for sensitive files","id":"special-permissions-for-sensitive-files"},{"level":1,"text":"Restore system configuration","id":"restore-system-configuration"},{"level":1,"text":"Restore database if available","id":"restore-database-if-available"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Start Jenkins","id":"start-jenkins"},{"level":1,"text":"Wait for Jenkins to start","id":"wait-for-jenkins-to-start"},{"level":1,"text":"Verify recovery","id":"verify-recovery"},{"level":1,"text":"Check Jenkins status","id":"check-jenkins-status"},{"level":1,"text":"Check web interface","id":"check-web-interface"},{"level":1,"text":"Check jobs restoration","id":"check-jobs-restoration"},{"level":1,"text":"Check plugins restoration","id":"check-plugins-restoration"},{"level":1,"text":"Generate recovery report","id":"generate-recovery-report"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check service status and logs","id":"check-service-status-and-logs"},{"level":1,"text":"Check Java version and JAVA_HOME","id":"check-java-version-and-java_home"},{"level":1,"text":"Check disk space","id":"check-disk-space"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check memory allocation","id":"check-memory-allocation"},{"level":1,"text":"Clear Jenkins cache","id":"clear-jenkins-cache"},{"level":1,"text":"Increase JVM memory","id":"increase-jvm-memory"},{"level":1,"text":"Add:","id":"add"},{"level":1,"text":"Monitor memory usage","id":"monitor-memory-usage"},{"level":1,"text":"Safe start (disable all plugins)","id":"safe-start-disable-all-plugins"},{"level":1,"text":"Clear plugin cache","id":"clear-plugin-cache"},{"level":1,"text":"Update plugins via CLI","id":"update-plugins-via-cli"},{"level":1,"text":"Check plugin dependencies","id":"check-plugin-dependencies"},{"level":1,"text":"Check workspace permissions","id":"check-workspace-permissions"},{"level":1,"text":"Clear old builds","id":"clear-old-builds"},{"level":1,"text":"Check agent connectivity","id":"check-agent-connectivity"},{"level":1,"text":"Monitor build resources","id":"monitor-build-resources"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":1,"text":"Enable debug logging for Jenkins","id":"enable-debug-logging-for-jenkins"},{"level":1,"text":"Add:","id":"add"},{"level":1,"text":"Create detailed logging configuration","id":"create-detailed-logging-configuration"},{"level":1,"text":"Root logger","id":"root-logger"},{"level":1,"text":"Console logging","id":"console-logging"},{"level":1,"text":"File logging","id":"file-logging"},{"level":1,"text":"Component-specific logging","id":"component-specific-logging"},{"level":1,"text":"Plugin debugging","id":"plugin-debugging"},{"level":1,"text":"View debug logs","id":"view-debug-logs"},{"level":1,"text":"Enable specific plugin debugging via Jenkins CLI","id":"enable-specific-plugin-debugging-via-jenkins-cli"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux (Docker)","id":"alpine-linux-docker"},{"level":1,"text":"Re-run docker run command with new image","id":"re-run-docker-run-command-with-new-image"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"macOS","id":"macos"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Update plugins after Jenkins update","id":"update-plugins-after-jenkins-update"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Maintenance Tasks","id":"maintenance-tasks"},{"level":1,"text":"jenkins-maintenance.sh","id":"jenkins-maintenancesh"},{"level":1,"text":"Clean up old builds","id":"clean-up-old-builds"},{"level":1,"text":"Clean up workspace","id":"clean-up-workspace"},{"level":1,"text":"Update plugins","id":"update-plugins"},{"level":1,"text":"Clean up logs","id":"clean-up-logs"},{"level":1,"text":"Disk usage check","id":"disk-usage-check"},{"level":1,"text":"Backup verification","id":"backup-verification"},{"level":1,"text":"Security check","id":"security-check"},{"level":1,"text":"Performance check","id":"performance-check"},{"level":1,"text":"Generate maintenance report","id":"generate-maintenance-report"},{"level":3,"text":"Health Monitoring","id":"health-monitoring"},{"level":1,"text":"Create monitoring cron job","id":"create-monitoring-cron-job"},{"level":1,"text":"Log rotation configuration","id":"log-rotation-configuration"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Git Integration with Webhooks","id":"git-integration-with-webhooks"},{"level":1,"text":"Configure Git webhook for automatic builds","id":"configure-git-webhook-for-automatic-builds"},{"level":3,"text":"Docker Integration","id":"docker-integration"},{"level":3,"text":"Kubernetes Integration","id":"kubernetes-integration"},{"level":1,"text":"Jenkins agent in Kubernetes","id":"jenkins-agent-in-kubernetes"},{"level":1,"text":"Jenkins Configuration as Code for Kubernetes","id":"jenkins-configuration-as-code-for-kubernetes"},{"level":3,"text":"LDAP/Active Directory Integration","id":"ldapactive-directory-integration"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-22T18:16:49.638Z","metadataVersion":"2.0"},"category":{"key":"ci-cd","name":"Ci cd","description":"Ci cd tools and applications","icon":"🏗️","color":"#44475a"},"relatedGuides":[{"name":"agola","displayName":"agola Installation Guide","slug":"agola","description":"agola is a free and open-source CI/CD system. Agola provides open source CI/CD system with advanced workflows","category":"ci-cd","subcategory":"ci-cd","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["ci-cd","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/ci-cd/agola","documentationUrl":"https://howtomgr.github.io/ci-cd/agola","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/agola","updatedAt":"2025-09-16T16:55:54Z","createdAt":"2025-09-16T02:16:33Z","readmeRaw":"# agola Installation Guide\n\nagola is a free and open-source CI/CD system. Agola provides open source CI/CD system with advanced workflows\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 20GB for runs\n  - Network: HTTP/Git access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8000 (default agola port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install agola\nsudo dnf install -y agola\n\n# Enable and start service\nsudo systemctl enable --now agola\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nagola --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install agola\nsudo apt install -y agola\n\n# Enable and start service\nsudo systemctl enable --now agola\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nagola --version\n```\n\n### Arch Linux\n\n```bash\n# Install agola\nsudo pacman -S agola\n\n# Enable and start service\nsudo systemctl enable --now agola\n\n# Verify installation\nagola --version\n```\n\n### Alpine Linux\n\n```bash\n# Install agola\napk add --no-cache agola\n\n# Enable and start service\nrc-update add agola default\nrc-service agola start\n\n# Verify installation\nagola --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install agola\nsudo zypper install -y agola\n\n# Enable and start service\nsudo systemctl enable --now agola\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nagola --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install agola\n\n# Start service\nbrew services start agola\n\n# Verify installation\nagola --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install agola\n\n# Enable in rc.conf\necho 'agola_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice agola start\n\n# Verify installation\nagola --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install agola\n\n# Or using Scoop\nscoop install agola\n\n# Verify installation\nagola --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/agola\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nagola --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable agola\n\n# Start service\nsudo systemctl start agola\n\n# Stop service\nsudo systemctl stop agola\n\n# Restart service\nsudo systemctl restart agola\n\n# Check status\nsudo systemctl status agola\n\n# View logs\nsudo journalctl -u agola -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add agola default\n\n# Start service\nrc-service agola start\n\n# Stop service\nrc-service agola stop\n\n# Restart service\nrc-service agola restart\n\n# Check status\nrc-service agola status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'agola_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice agola start\n\n# Stop service\nservice agola stop\n\n# Restart service\nservice agola restart\n\n# Check status\nservice agola status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start agola\nbrew services stop agola\nbrew services restart agola\n\n# Check status\nbrew services list | grep agola\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start agola\n\n# Stop service\nnet stop agola\n\n# Using PowerShell\nStart-Service agola\nStop-Service agola\nRestart-Service agola\n\n# Check status\nGet-Service agola\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream agola_backend {\n    server 127.0.0.1:8000;\n}\n\nserver {\n    listen 80;\n    server_name agola.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name agola.example.com;\n\n    ssl_certificate /etc/ssl/certs/agola.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/agola.example.com.key;\n\n    location / {\n        proxy_pass http://agola_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName agola.example.com\n    Redirect permanent / https://agola.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName agola.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/agola.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/agola.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8000/\n    ProxyPassReverse / http://127.0.0.1:8000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend agola_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/agola.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend agola_backend\n\nbackend agola_backend\n    balance roundrobin\n    server agola1 127.0.0.1:8000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R agola:agola /etc/agola\nsudo chmod 750 /etc/agola\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status agola\n\n# View logs\nsudo journalctl -u agola -f\n\n# Monitor resource usage\ntop -p $(pgrep agola)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/agola\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/agola-backup-$DATE.tar.gz\" /etc/agola /var/lib/agola\n\necho \"Backup completed: $BACKUP_DIR/agola-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop agola\n\n# Restore from backup\ntar -xzf /backup/agola/agola-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start agola\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u agola -n 100\nsudo tail -f /var/log/agola/agola.log\n\n# Check configuration\nagola --version\n\n# Check permissions\nls -la /etc/agola\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8000\n\n# Test connectivity\ntelnet localhost 8000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep agola)\n\n# Check disk I/O\niotop -p $(pgrep agola)\n\n# Check connections\nss -an | grep 8000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  agola:\n    image: agola:latest\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./config:/etc/agola\n      - ./data:/var/lib/agola\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update agola\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade agola\n\n# Arch Linux\nsudo pacman -Syu agola\n\n# Alpine Linux\napk update && apk upgrade agola\n\n# openSUSE\nsudo zypper update agola\n\n# FreeBSD\npkg update && pkg upgrade agola\n\n# Always backup before updates\ntar -czf /backup/agola-pre-update-$(date +%Y%m%d).tar.gz /etc/agola\n\n# Restart after updates\nsudo systemctl restart agola\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/agola\n\n# Clean old logs\nfind /var/log/agola -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/agola\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.agola.org/\n- GitHub Repository: https://github.com/agola/agola\n- Community Forum: https://forum.agola.org/\n- Best Practices Guide: https://docs.agola.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">agola is a free and open-source CI/CD system. Agola provides open source CI/CD system with advanced workflows</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 20GB for runs</li>\n<li class=\"mobile-list-item\">Network: HTTP/Git access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8000 (default agola port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install agola\nsudo dnf install -y agola\n\n# Enable and start service\nsudo systemctl enable --now agola\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nagola --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install agola\nsudo apt install -y agola\n\n# Enable and start service\nsudo systemctl enable --now agola\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nagola --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install agola\nsudo pacman -S agola\n\n# Enable and start service\nsudo systemctl enable --now agola\n\n# Verify installation\nagola --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install agola\napk add --no-cache agola\n\n# Enable and start service\nrc-update add agola default\nrc-service agola start\n\n# Verify installation\nagola --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install agola\nsudo zypper install -y agola\n\n# Enable and start service\nsudo systemctl enable --now agola\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nagola --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install agola\n\n# Start service\nbrew services start agola\n\n# Verify installation\nagola --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install agola\n\n# Enable in rc.conf\necho &#039;agola_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice agola start\n\n# Verify installation\nagola --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install agola\n\n# Or using Scoop\nscoop install agola\n\n# Verify installation\nagola --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/agola\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nagola --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable agola\n\n# Start service\nsudo systemctl start agola\n\n# Stop service\nsudo systemctl stop agola\n\n# Restart service\nsudo systemctl restart agola\n\n# Check status\nsudo systemctl status agola\n\n# View logs\nsudo journalctl -u agola -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add agola default\n\n# Start service\nrc-service agola start\n\n# Stop service\nrc-service agola stop\n\n# Restart service\nrc-service agola restart\n\n# Check status\nrc-service agola status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;agola_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice agola start\n\n# Stop service\nservice agola stop\n\n# Restart service\nservice agola restart\n\n# Check status\nservice agola status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start agola\nbrew services stop agola\nbrew services restart agola\n\n# Check status\nbrew services list | grep agola</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start agola\n\n# Stop service\nnet stop agola\n\n# Using PowerShell\nStart-Service agola\nStop-Service agola\nRestart-Service agola\n\n# Check status\nGet-Service agola</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream agola_backend {\n    server 127.0.0.1:8000;\n}\n\nserver {\n    listen 80;\n    server_name agola.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name agola.example.com;\n\n    ssl_certificate /etc/ssl/certs/agola.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/agola.example.com.key;\n\n    location / {\n        proxy_pass http://agola_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName agola.example.com\n    Redirect permanent / https://agola.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName agola.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/agola.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/agola.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8000/\n    ProxyPassReverse / http://127.0.0.1:8000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend agola_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/agola.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend agola_backend\n\nbackend agola_backend\n    balance roundrobin\n    server agola1 127.0.0.1:8000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R agola:agola /etc/agola\nsudo chmod 750 /etc/agola\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status agola\n\n# View logs\nsudo journalctl -u agola -f\n\n# Monitor resource usage\ntop -p $(pgrep agola)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/agola&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/agola-backup-$DATE.tar.gz&quot; /etc/agola /var/lib/agola\n\necho &quot;Backup completed: $BACKUP_DIR/agola-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop agola\n\n# Restore from backup\ntar -xzf /backup/agola/agola-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start agola</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u agola -n 100\nsudo tail -f /var/log/agola/agola.log\n\n# Check configuration\nagola --version\n\n# Check permissions\nls -la /etc/agola</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8000\n\n# Test connectivity\ntelnet localhost 8000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep agola)\n\n# Check disk I/O\niotop -p $(pgrep agola)\n\n# Check connections\nss -an | grep 8000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  agola:\n    image: agola:latest\n    ports:\n      - &quot;8000:8000&quot;\n    volumes:\n      - ./config:/etc/agola\n      - ./data:/var/lib/agola\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update agola\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade agola\n\n# Arch Linux\nsudo pacman -Syu agola\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade agola\n\n# openSUSE\nsudo zypper update agola\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade agola\n\n# Always backup before updates\ntar -czf /backup/agola-pre-update-$(date +%Y%m%d).tar.gz /etc/agola\n\n# Restart after updates\nsudo systemctl restart agola</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/agola\n\n# Clean old logs\nfind /var/log/agola -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/agola</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.agola.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/agola/agola</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.agola.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.agola.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1268,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install agola","id":"install-agola"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install agola","id":"install-agola"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install agola","id":"install-agola"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install agola","id":"install-agola"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install agola","id":"install-agola"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-22T18:18:10.187Z","metadataVersion":"2.0"},{"name":"buddy","displayName":"buddy Installation Guide","slug":"buddy","description":"buddy is a free and open-source CI/CD platform. Buddy provides on-premises CI/CD with visual pipeline builder","category":"ci-cd","subcategory":"ci-cd","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["ci-cd","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/ci-cd/buddy","documentationUrl":"https://howtomgr.github.io/ci-cd/buddy","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/buddy","updatedAt":"2025-09-16T17:01:07Z","createdAt":"2025-09-16T02:23:04Z","readmeRaw":"# buddy Installation Guide\n\nbuddy is a free and open-source CI/CD platform. Buddy provides on-premises CI/CD with visual pipeline builder\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 4GB minimum\n  - Storage: 50GB for builds\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default buddy port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install buddy\nsudo dnf install -y buddy\n\n# Enable and start service\nsudo systemctl enable --now buddy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuddy --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install buddy\nsudo apt install -y buddy\n\n# Enable and start service\nsudo systemctl enable --now buddy\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nbuddy --version\n```\n\n### Arch Linux\n\n```bash\n# Install buddy\nsudo pacman -S buddy\n\n# Enable and start service\nsudo systemctl enable --now buddy\n\n# Verify installation\nbuddy --version\n```\n\n### Alpine Linux\n\n```bash\n# Install buddy\napk add --no-cache buddy\n\n# Enable and start service\nrc-update add buddy default\nrc-service buddy start\n\n# Verify installation\nbuddy --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install buddy\nsudo zypper install -y buddy\n\n# Enable and start service\nsudo systemctl enable --now buddy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuddy --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install buddy\n\n# Start service\nbrew services start buddy\n\n# Verify installation\nbuddy --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install buddy\n\n# Enable in rc.conf\necho 'buddy_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice buddy start\n\n# Verify installation\nbuddy --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install buddy\n\n# Or using Scoop\nscoop install buddy\n\n# Verify installation\nbuddy --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/buddy\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbuddy --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable buddy\n\n# Start service\nsudo systemctl start buddy\n\n# Stop service\nsudo systemctl stop buddy\n\n# Restart service\nsudo systemctl restart buddy\n\n# Check status\nsudo systemctl status buddy\n\n# View logs\nsudo journalctl -u buddy -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add buddy default\n\n# Start service\nrc-service buddy start\n\n# Stop service\nrc-service buddy stop\n\n# Restart service\nrc-service buddy restart\n\n# Check status\nrc-service buddy status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'buddy_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice buddy start\n\n# Stop service\nservice buddy stop\n\n# Restart service\nservice buddy restart\n\n# Check status\nservice buddy status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start buddy\nbrew services stop buddy\nbrew services restart buddy\n\n# Check status\nbrew services list | grep buddy\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start buddy\n\n# Stop service\nnet stop buddy\n\n# Using PowerShell\nStart-Service buddy\nStop-Service buddy\nRestart-Service buddy\n\n# Check status\nGet-Service buddy\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream buddy_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name buddy.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name buddy.example.com;\n\n    ssl_certificate /etc/ssl/certs/buddy.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/buddy.example.com.key;\n\n    location / {\n        proxy_pass http://buddy_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName buddy.example.com\n    Redirect permanent / https://buddy.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName buddy.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/buddy.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/buddy.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend buddy_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/buddy.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend buddy_backend\n\nbackend buddy_backend\n    balance roundrobin\n    server buddy1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R buddy:buddy /etc/buddy\nsudo chmod 750 /etc/buddy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status buddy\n\n# View logs\nsudo journalctl -u buddy -f\n\n# Monitor resource usage\ntop -p $(pgrep buddy)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/buddy\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/buddy-backup-$DATE.tar.gz\" /etc/buddy /var/lib/buddy\n\necho \"Backup completed: $BACKUP_DIR/buddy-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop buddy\n\n# Restore from backup\ntar -xzf /backup/buddy/buddy-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start buddy\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u buddy -n 100\nsudo tail -f /var/log/buddy/buddy.log\n\n# Check configuration\nbuddy --version\n\n# Check permissions\nls -la /etc/buddy\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep buddy)\n\n# Check disk I/O\niotop -p $(pgrep buddy)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  buddy:\n    image: buddy:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/buddy\n      - ./data:/var/lib/buddy\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update buddy\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade buddy\n\n# Arch Linux\nsudo pacman -Syu buddy\n\n# Alpine Linux\napk update && apk upgrade buddy\n\n# openSUSE\nsudo zypper update buddy\n\n# FreeBSD\npkg update && pkg upgrade buddy\n\n# Always backup before updates\ntar -czf /backup/buddy-pre-update-$(date +%Y%m%d).tar.gz /etc/buddy\n\n# Restart after updates\nsudo systemctl restart buddy\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/buddy\n\n# Clean old logs\nfind /var/log/buddy -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/buddy\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.buddy.org/\n- GitHub Repository: https://github.com/buddy/buddy\n- Community Forum: https://forum.buddy.org/\n- Best Practices Guide: https://docs.buddy.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">buddy is a free and open-source CI/CD platform. Buddy provides on-premises CI/CD with visual pipeline builder</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50GB for builds</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default buddy port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install buddy\nsudo dnf install -y buddy\n\n# Enable and start service\nsudo systemctl enable --now buddy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install buddy\nsudo apt install -y buddy\n\n# Enable and start service\nsudo systemctl enable --now buddy\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buddy\nsudo pacman -S buddy\n\n# Enable and start service\nsudo systemctl enable --now buddy\n\n# Verify installation\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buddy\napk add --no-cache buddy\n\n# Enable and start service\nrc-update add buddy default\nrc-service buddy start\n\n# Verify installation\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buddy\nsudo zypper install -y buddy\n\n# Enable and start service\nsudo systemctl enable --now buddy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install buddy\n\n# Start service\nbrew services start buddy\n\n# Verify installation\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install buddy\n\n# Enable in rc.conf\necho &#039;buddy_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice buddy start\n\n# Verify installation\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install buddy\n\n# Or using Scoop\nscoop install buddy\n\n# Verify installation\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/buddy\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbuddy --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable buddy\n\n# Start service\nsudo systemctl start buddy\n\n# Stop service\nsudo systemctl stop buddy\n\n# Restart service\nsudo systemctl restart buddy\n\n# Check status\nsudo systemctl status buddy\n\n# View logs\nsudo journalctl -u buddy -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add buddy default\n\n# Start service\nrc-service buddy start\n\n# Stop service\nrc-service buddy stop\n\n# Restart service\nrc-service buddy restart\n\n# Check status\nrc-service buddy status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;buddy_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice buddy start\n\n# Stop service\nservice buddy stop\n\n# Restart service\nservice buddy restart\n\n# Check status\nservice buddy status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start buddy\nbrew services stop buddy\nbrew services restart buddy\n\n# Check status\nbrew services list | grep buddy</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start buddy\n\n# Stop service\nnet stop buddy\n\n# Using PowerShell\nStart-Service buddy\nStop-Service buddy\nRestart-Service buddy\n\n# Check status\nGet-Service buddy</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream buddy_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name buddy.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name buddy.example.com;\n\n    ssl_certificate /etc/ssl/certs/buddy.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/buddy.example.com.key;\n\n    location / {\n        proxy_pass http://buddy_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName buddy.example.com\n    Redirect permanent / https://buddy.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName buddy.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/buddy.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/buddy.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend buddy_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/buddy.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend buddy_backend\n\nbackend buddy_backend\n    balance roundrobin\n    server buddy1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R buddy:buddy /etc/buddy\nsudo chmod 750 /etc/buddy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status buddy\n\n# View logs\nsudo journalctl -u buddy -f\n\n# Monitor resource usage\ntop -p $(pgrep buddy)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/buddy&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/buddy-backup-$DATE.tar.gz&quot; /etc/buddy /var/lib/buddy\n\necho &quot;Backup completed: $BACKUP_DIR/buddy-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop buddy\n\n# Restore from backup\ntar -xzf /backup/buddy/buddy-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start buddy</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u buddy -n 100\nsudo tail -f /var/log/buddy/buddy.log\n\n# Check configuration\nbuddy --version\n\n# Check permissions\nls -la /etc/buddy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep buddy)\n\n# Check disk I/O\niotop -p $(pgrep buddy)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  buddy:\n    image: buddy:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/buddy\n      - ./data:/var/lib/buddy\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update buddy\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade buddy\n\n# Arch Linux\nsudo pacman -Syu buddy\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade buddy\n\n# openSUSE\nsudo zypper update buddy\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade buddy\n\n# Always backup before updates\ntar -czf /backup/buddy-pre-update-$(date +%Y%m%d).tar.gz /etc/buddy\n\n# Restart after updates\nsudo systemctl restart buddy</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/buddy\n\n# Clean old logs\nfind /var/log/buddy -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/buddy</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.buddy.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/buddy/buddy</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.buddy.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.buddy.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1268,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install buddy","id":"install-buddy"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install buddy","id":"install-buddy"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install buddy","id":"install-buddy"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install buddy","id":"install-buddy"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install buddy","id":"install-buddy"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-22T18:17:53.327Z","metadataVersion":"2.0"},{"name":"buildbot","displayName":"buildbot Installation Guide","slug":"buildbot","description":"buildbot is a free and open-source CI framework. Buildbot provides Python-based CI framework for automating builds","category":"ci-cd","subcategory":"ci-cd","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8010],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["ci-cd","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/ci-cd/buildbot","documentationUrl":"https://howtomgr.github.io/ci-cd/buildbot","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/buildbot","updatedAt":"2025-09-16T17:01:23Z","createdAt":"2025-09-16T02:23:23Z","readmeRaw":"# buildbot Installation Guide\n\nbuildbot is a free and open-source CI framework. Buildbot provides Python-based CI framework for automating builds\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 10GB for builds\n  - Network: HTTP/Git access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8010 (default buildbot port)\n  - Worker on 9989\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install buildbot\nsudo dnf install -y buildbot\n\n# Enable and start service\nsudo systemctl enable --now buildbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8010/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuildbot --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install buildbot\nsudo apt install -y buildbot\n\n# Enable and start service\nsudo systemctl enable --now buildbot\n\n# Configure firewall\nsudo ufw allow 8010\n\n# Verify installation\nbuildbot --version\n```\n\n### Arch Linux\n\n```bash\n# Install buildbot\nsudo pacman -S buildbot\n\n# Enable and start service\nsudo systemctl enable --now buildbot\n\n# Verify installation\nbuildbot --version\n```\n\n### Alpine Linux\n\n```bash\n# Install buildbot\napk add --no-cache buildbot\n\n# Enable and start service\nrc-update add buildbot default\nrc-service buildbot start\n\n# Verify installation\nbuildbot --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install buildbot\nsudo zypper install -y buildbot\n\n# Enable and start service\nsudo systemctl enable --now buildbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8010/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuildbot --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install buildbot\n\n# Start service\nbrew services start buildbot\n\n# Verify installation\nbuildbot --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install buildbot\n\n# Enable in rc.conf\necho 'buildbot_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice buildbot start\n\n# Verify installation\nbuildbot --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install buildbot\n\n# Or using Scoop\nscoop install buildbot\n\n# Verify installation\nbuildbot --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/buildbot\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbuildbot --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable buildbot\n\n# Start service\nsudo systemctl start buildbot\n\n# Stop service\nsudo systemctl stop buildbot\n\n# Restart service\nsudo systemctl restart buildbot\n\n# Check status\nsudo systemctl status buildbot\n\n# View logs\nsudo journalctl -u buildbot -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add buildbot default\n\n# Start service\nrc-service buildbot start\n\n# Stop service\nrc-service buildbot stop\n\n# Restart service\nrc-service buildbot restart\n\n# Check status\nrc-service buildbot status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'buildbot_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice buildbot start\n\n# Stop service\nservice buildbot stop\n\n# Restart service\nservice buildbot restart\n\n# Check status\nservice buildbot status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start buildbot\nbrew services stop buildbot\nbrew services restart buildbot\n\n# Check status\nbrew services list | grep buildbot\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start buildbot\n\n# Stop service\nnet stop buildbot\n\n# Using PowerShell\nStart-Service buildbot\nStop-Service buildbot\nRestart-Service buildbot\n\n# Check status\nGet-Service buildbot\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream buildbot_backend {\n    server 127.0.0.1:8010;\n}\n\nserver {\n    listen 80;\n    server_name buildbot.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name buildbot.example.com;\n\n    ssl_certificate /etc/ssl/certs/buildbot.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/buildbot.example.com.key;\n\n    location / {\n        proxy_pass http://buildbot_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName buildbot.example.com\n    Redirect permanent / https://buildbot.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName buildbot.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/buildbot.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/buildbot.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8010/\n    ProxyPassReverse / http://127.0.0.1:8010/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend buildbot_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/buildbot.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend buildbot_backend\n\nbackend buildbot_backend\n    balance roundrobin\n    server buildbot1 127.0.0.1:8010 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R buildbot:buildbot /etc/buildbot\nsudo chmod 750 /etc/buildbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8010/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status buildbot\n\n# View logs\nsudo journalctl -u buildbot -f\n\n# Monitor resource usage\ntop -p $(pgrep buildbot)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/buildbot\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/buildbot-backup-$DATE.tar.gz\" /etc/buildbot /var/lib/buildbot\n\necho \"Backup completed: $BACKUP_DIR/buildbot-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop buildbot\n\n# Restore from backup\ntar -xzf /backup/buildbot/buildbot-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start buildbot\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u buildbot -n 100\nsudo tail -f /var/log/buildbot/buildbot.log\n\n# Check configuration\nbuildbot --version\n\n# Check permissions\nls -la /etc/buildbot\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8010\n\n# Test connectivity\ntelnet localhost 8010\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep buildbot)\n\n# Check disk I/O\niotop -p $(pgrep buildbot)\n\n# Check connections\nss -an | grep 8010\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  buildbot:\n    image: buildbot:latest\n    ports:\n      - \"8010:8010\"\n    volumes:\n      - ./config:/etc/buildbot\n      - ./data:/var/lib/buildbot\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update buildbot\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade buildbot\n\n# Arch Linux\nsudo pacman -Syu buildbot\n\n# Alpine Linux\napk update && apk upgrade buildbot\n\n# openSUSE\nsudo zypper update buildbot\n\n# FreeBSD\npkg update && pkg upgrade buildbot\n\n# Always backup before updates\ntar -czf /backup/buildbot-pre-update-$(date +%Y%m%d).tar.gz /etc/buildbot\n\n# Restart after updates\nsudo systemctl restart buildbot\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/buildbot\n\n# Clean old logs\nfind /var/log/buildbot -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/buildbot\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.buildbot.org/\n- GitHub Repository: https://github.com/buildbot/buildbot\n- Community Forum: https://forum.buildbot.org/\n- Best Practices Guide: https://docs.buildbot.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">buildbot is a free and open-source CI framework. Buildbot provides Python-based CI framework for automating builds</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for builds</li>\n<li class=\"mobile-list-item\">Network: HTTP/Git access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8010 (default buildbot port)</li>\n<li class=\"mobile-list-item\">Worker on 9989</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install buildbot\nsudo dnf install -y buildbot\n\n# Enable and start service\nsudo systemctl enable --now buildbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8010/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install buildbot\nsudo apt install -y buildbot\n\n# Enable and start service\nsudo systemctl enable --now buildbot\n\n# Configure firewall\nsudo ufw allow 8010\n\n# Verify installation\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buildbot\nsudo pacman -S buildbot\n\n# Enable and start service\nsudo systemctl enable --now buildbot\n\n# Verify installation\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buildbot\napk add --no-cache buildbot\n\n# Enable and start service\nrc-update add buildbot default\nrc-service buildbot start\n\n# Verify installation\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install buildbot\nsudo zypper install -y buildbot\n\n# Enable and start service\nsudo systemctl enable --now buildbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8010/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install buildbot\n\n# Start service\nbrew services start buildbot\n\n# Verify installation\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install buildbot\n\n# Enable in rc.conf\necho &#039;buildbot_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice buildbot start\n\n# Verify installation\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install buildbot\n\n# Or using Scoop\nscoop install buildbot\n\n# Verify installation\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/buildbot\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbuildbot --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable buildbot\n\n# Start service\nsudo systemctl start buildbot\n\n# Stop service\nsudo systemctl stop buildbot\n\n# Restart service\nsudo systemctl restart buildbot\n\n# Check status\nsudo systemctl status buildbot\n\n# View logs\nsudo journalctl -u buildbot -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add buildbot default\n\n# Start service\nrc-service buildbot start\n\n# Stop service\nrc-service buildbot stop\n\n# Restart service\nrc-service buildbot restart\n\n# Check status\nrc-service buildbot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;buildbot_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice buildbot start\n\n# Stop service\nservice buildbot stop\n\n# Restart service\nservice buildbot restart\n\n# Check status\nservice buildbot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start buildbot\nbrew services stop buildbot\nbrew services restart buildbot\n\n# Check status\nbrew services list | grep buildbot</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start buildbot\n\n# Stop service\nnet stop buildbot\n\n# Using PowerShell\nStart-Service buildbot\nStop-Service buildbot\nRestart-Service buildbot\n\n# Check status\nGet-Service buildbot</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream buildbot_backend {\n    server 127.0.0.1:8010;\n}\n\nserver {\n    listen 80;\n    server_name buildbot.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name buildbot.example.com;\n\n    ssl_certificate /etc/ssl/certs/buildbot.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/buildbot.example.com.key;\n\n    location / {\n        proxy_pass http://buildbot_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName buildbot.example.com\n    Redirect permanent / https://buildbot.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName buildbot.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/buildbot.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/buildbot.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8010/\n    ProxyPassReverse / http://127.0.0.1:8010/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend buildbot_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/buildbot.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend buildbot_backend\n\nbackend buildbot_backend\n    balance roundrobin\n    server buildbot1 127.0.0.1:8010 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R buildbot:buildbot /etc/buildbot\nsudo chmod 750 /etc/buildbot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8010/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status buildbot\n\n# View logs\nsudo journalctl -u buildbot -f\n\n# Monitor resource usage\ntop -p $(pgrep buildbot)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/buildbot&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/buildbot-backup-$DATE.tar.gz&quot; /etc/buildbot /var/lib/buildbot\n\necho &quot;Backup completed: $BACKUP_DIR/buildbot-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop buildbot\n\n# Restore from backup\ntar -xzf /backup/buildbot/buildbot-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start buildbot</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u buildbot -n 100\nsudo tail -f /var/log/buildbot/buildbot.log\n\n# Check configuration\nbuildbot --version\n\n# Check permissions\nls -la /etc/buildbot</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8010\n\n# Test connectivity\ntelnet localhost 8010\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep buildbot)\n\n# Check disk I/O\niotop -p $(pgrep buildbot)\n\n# Check connections\nss -an | grep 8010</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  buildbot:\n    image: buildbot:latest\n    ports:\n      - &quot;8010:8010&quot;\n    volumes:\n      - ./config:/etc/buildbot\n      - ./data:/var/lib/buildbot\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update buildbot\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade buildbot\n\n# Arch Linux\nsudo pacman -Syu buildbot\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade buildbot\n\n# openSUSE\nsudo zypper update buildbot\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade buildbot\n\n# Always backup before updates\ntar -czf /backup/buildbot-pre-update-$(date +%Y%m%d).tar.gz /etc/buildbot\n\n# Restart after updates\nsudo systemctl restart buildbot</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/buildbot\n\n# Clean old logs\nfind /var/log/buildbot -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/buildbot</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.buildbot.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/buildbot/buildbot</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.buildbot.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.buildbot.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1269,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install buildbot","id":"install-buildbot"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install buildbot","id":"install-buildbot"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install buildbot","id":"install-buildbot"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install buildbot","id":"install-buildbot"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install buildbot","id":"install-buildbot"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-22T18:17:52.679Z","metadataVersion":"2.0"}]},"__N_SSG":true}