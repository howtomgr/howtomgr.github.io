{"pageProps":{"guide":{"name":"rancher","displayName":"rancher Installation Guide","slug":"rancher","description":"rancher is a free and open-source multi-cluster Kubernetes management platform. Rancher simplifies Kubernetes cluster deployment and management across any infrastructure, serving as an open-source alternative to proprietary Kubernetes platforms","category":"container-management","subcategory":"container-management","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["container-management","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/container-management/rancher","documentationUrl":"https://howtomgr.github.io/container-management/rancher","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rancher","updatedAt":"2025-09-16T17:46:57Z","createdAt":"2023-08-28T03:49:46Z","readmeRaw":"# rancher Installation Guide\n\nrancher is a free and open-source multi-cluster Kubernetes management platform. Rancher simplifies Kubernetes cluster deployment and management across any infrastructure, serving as an open-source alternative to proprietary Kubernetes platforms\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 4GB minimum (8GB+ recommended)\n  - Storage: 20GB for management server\n  - Network: HTTPS access to clusters\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default rancher port)\n  - Port 80 for HTTP redirect\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install rancher\nsudo dnf install -y rancher\n\n# Enable and start service\nsudo systemctl enable --now rancher\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nrancher --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install rancher\nsudo apt install -y rancher\n\n# Enable and start service\nsudo systemctl enable --now rancher\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nrancher --version\n```\n\n### Arch Linux\n\n```bash\n# Install rancher\nsudo pacman -S rancher\n\n# Enable and start service\nsudo systemctl enable --now rancher\n\n# Verify installation\nrancher --version\n```\n\n### Alpine Linux\n\n```bash\n# Install rancher\napk add --no-cache rancher\n\n# Enable and start service\nrc-update add rancher default\nrc-service rancher start\n\n# Verify installation\nrancher --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install rancher\nsudo zypper install -y rancher\n\n# Enable and start service\nsudo systemctl enable --now rancher\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nrancher --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install rancher\n\n# Start service\nbrew services start rancher\n\n# Verify installation\nrancher --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install rancher\n\n# Enable in rc.conf\necho 'rancher_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice rancher start\n\n# Verify installation\nrancher --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install rancher\n\n# Or using Scoop\nscoop install rancher\n\n# Verify installation\nrancher --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/rancher\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nrancher --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable rancher\n\n# Start service\nsudo systemctl start rancher\n\n# Stop service\nsudo systemctl stop rancher\n\n# Restart service\nsudo systemctl restart rancher\n\n# Check status\nsudo systemctl status rancher\n\n# View logs\nsudo journalctl -u rancher -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add rancher default\n\n# Start service\nrc-service rancher start\n\n# Stop service\nrc-service rancher stop\n\n# Restart service\nrc-service rancher restart\n\n# Check status\nrc-service rancher status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'rancher_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice rancher start\n\n# Stop service\nservice rancher stop\n\n# Restart service\nservice rancher restart\n\n# Check status\nservice rancher status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start rancher\nbrew services stop rancher\nbrew services restart rancher\n\n# Check status\nbrew services list | grep rancher\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start rancher\n\n# Stop service\nnet stop rancher\n\n# Using PowerShell\nStart-Service rancher\nStop-Service rancher\nRestart-Service rancher\n\n# Check status\nGet-Service rancher\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream rancher_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name rancher.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name rancher.example.com;\n\n    ssl_certificate /etc/ssl/certs/rancher.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/rancher.example.com.key;\n\n    location / {\n        proxy_pass http://rancher_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName rancher.example.com\n    Redirect permanent / https://rancher.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName rancher.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/rancher.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/rancher.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend rancher_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/rancher.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rancher_backend\n\nbackend rancher_backend\n    balance roundrobin\n    server rancher1 127.0.0.1:443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R rancher:rancher /etc/rancher\nsudo chmod 750 /etc/rancher\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status rancher\n\n# View logs\nsudo journalctl -u rancher -f\n\n# Monitor resource usage\ntop -p $(pgrep rancher)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/rancher\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/rancher-backup-$DATE.tar.gz\" /etc/rancher /var/lib/rancher\n\necho \"Backup completed: $BACKUP_DIR/rancher-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop rancher\n\n# Restore from backup\ntar -xzf /backup/rancher/rancher-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start rancher\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u rancher -n 100\nsudo tail -f /var/log/rancher/rancher.log\n\n# Check configuration\nrancher --version\n\n# Check permissions\nls -la /etc/rancher\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep rancher)\n\n# Check disk I/O\niotop -p $(pgrep rancher)\n\n# Check connections\nss -an | grep 443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  rancher:\n    image: rancher:latest\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/etc/rancher\n      - ./data:/var/lib/rancher\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update rancher\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade rancher\n\n# Arch Linux\nsudo pacman -Syu rancher\n\n# Alpine Linux\napk update && apk upgrade rancher\n\n# openSUSE\nsudo zypper update rancher\n\n# FreeBSD\npkg update && pkg upgrade rancher\n\n# Always backup before updates\ntar -czf /backup/rancher-pre-update-$(date +%Y%m%d).tar.gz /etc/rancher\n\n# Restart after updates\nsudo systemctl restart rancher\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/rancher\n\n# Clean old logs\nfind /var/log/rancher -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/rancher\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.rancher.org/\n- GitHub Repository: https://github.com/rancher/rancher\n- Community Forum: https://forum.rancher.org/\n- Best Practices Guide: https://docs.rancher.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">rancher is a free and open-source multi-cluster Kubernetes management platform. Rancher simplifies Kubernetes cluster deployment and management across any infrastructure, serving as an open-source alternative to proprietary Kubernetes platforms</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 20GB for management server</li>\n<li class=\"mobile-list-item\">Network: HTTPS access to clusters</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default rancher port)</li>\n<li class=\"mobile-list-item\">Port 80 for HTTP redirect</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install rancher\nsudo dnf install -y rancher\n\n# Enable and start service\nsudo systemctl enable --now rancher\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nrancher --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install rancher\nsudo apt install -y rancher\n\n# Enable and start service\nsudo systemctl enable --now rancher\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nrancher --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install rancher\nsudo pacman -S rancher\n\n# Enable and start service\nsudo systemctl enable --now rancher\n\n# Verify installation\nrancher --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install rancher\napk add --no-cache rancher\n\n# Enable and start service\nrc-update add rancher default\nrc-service rancher start\n\n# Verify installation\nrancher --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install rancher\nsudo zypper install -y rancher\n\n# Enable and start service\nsudo systemctl enable --now rancher\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nrancher --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install rancher\n\n# Start service\nbrew services start rancher\n\n# Verify installation\nrancher --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install rancher\n\n# Enable in rc.conf\necho &#039;rancher_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice rancher start\n\n# Verify installation\nrancher --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install rancher\n\n# Or using Scoop\nscoop install rancher\n\n# Verify installation\nrancher --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/rancher\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nrancher --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable rancher\n\n# Start service\nsudo systemctl start rancher\n\n# Stop service\nsudo systemctl stop rancher\n\n# Restart service\nsudo systemctl restart rancher\n\n# Check status\nsudo systemctl status rancher\n\n# View logs\nsudo journalctl -u rancher -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add rancher default\n\n# Start service\nrc-service rancher start\n\n# Stop service\nrc-service rancher stop\n\n# Restart service\nrc-service rancher restart\n\n# Check status\nrc-service rancher status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;rancher_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice rancher start\n\n# Stop service\nservice rancher stop\n\n# Restart service\nservice rancher restart\n\n# Check status\nservice rancher status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start rancher\nbrew services stop rancher\nbrew services restart rancher\n\n# Check status\nbrew services list | grep rancher</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start rancher\n\n# Stop service\nnet stop rancher\n\n# Using PowerShell\nStart-Service rancher\nStop-Service rancher\nRestart-Service rancher\n\n# Check status\nGet-Service rancher</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream rancher_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name rancher.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name rancher.example.com;\n\n    ssl_certificate /etc/ssl/certs/rancher.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/rancher.example.com.key;\n\n    location / {\n        proxy_pass http://rancher_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName rancher.example.com\n    Redirect permanent / https://rancher.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName rancher.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/rancher.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/rancher.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend rancher_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/rancher.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rancher_backend\n\nbackend rancher_backend\n    balance roundrobin\n    server rancher1 127.0.0.1:443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R rancher:rancher /etc/rancher\nsudo chmod 750 /etc/rancher\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status rancher\n\n# View logs\nsudo journalctl -u rancher -f\n\n# Monitor resource usage\ntop -p $(pgrep rancher)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/rancher&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/rancher-backup-$DATE.tar.gz&quot; /etc/rancher /var/lib/rancher\n\necho &quot;Backup completed: $BACKUP_DIR/rancher-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop rancher\n\n# Restore from backup\ntar -xzf /backup/rancher/rancher-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start rancher</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u rancher -n 100\nsudo tail -f /var/log/rancher/rancher.log\n\n# Check configuration\nrancher --version\n\n# Check permissions\nls -la /etc/rancher</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep rancher)\n\n# Check disk I/O\niotop -p $(pgrep rancher)\n\n# Check connections\nss -an | grep 443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  rancher:\n    image: rancher:latest\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/etc/rancher\n      - ./data:/var/lib/rancher\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update rancher\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade rancher\n\n# Arch Linux\nsudo pacman -Syu rancher\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade rancher\n\n# openSUSE\nsudo zypper update rancher\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade rancher\n\n# Always backup before updates\ntar -czf /backup/rancher-pre-update-$(date +%Y%m%d).tar.gz /etc/rancher\n\n# Restart after updates\nsudo systemctl restart rancher</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/rancher\n\n# Clean old logs\nfind /var/log/rancher -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/rancher</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.rancher.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/rancher/rancher</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.rancher.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.rancher.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1290,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install rancher","id":"install-rancher"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install rancher","id":"install-rancher"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install rancher","id":"install-rancher"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install rancher","id":"install-rancher"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install rancher","id":"install-rancher"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-16T18:15:28.381Z","metadataVersion":"2.0"},"category":{"key":"container-management","name":"Container management","description":"Container management tools and applications","icon":"📦","color":"#bd93f9"},"relatedGuides":[{"name":"portainer","displayName":"portainer Installation Guide","slug":"portainer","description":"portainer is a free and open-source container management platform. Portainer simplifies container management across Docker, Swarm, and Kubernetes environments, providing a GUI alternative to command-line tools","category":"container-management","subcategory":"container-management","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8000,9000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["container-management","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/container-management/portainer","documentationUrl":"https://howtomgr.github.io/container-management/portainer","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/portainer","updatedAt":"2025-09-16T17:42:28Z","createdAt":"2025-09-08T03:14:32Z","readmeRaw":"# portainer Installation Guide\n\nportainer is a free and open-source container management platform. Portainer simplifies container management across Docker, Swarm, and Kubernetes environments, providing a GUI alternative to command-line tools\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for installation\n  - Network: Docker API access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9000 (default portainer port)\n  - Port 8000 for edge agent\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install portainer\nsudo dnf install -y portainer\n\n# Enable and start service\nsudo systemctl enable --now portainer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nportainer --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install portainer\nsudo apt install -y portainer\n\n# Enable and start service\nsudo systemctl enable --now portainer\n\n# Configure firewall\nsudo ufw allow 9000\n\n# Verify installation\nportainer --version\n```\n\n### Arch Linux\n\n```bash\n# Install portainer\nsudo pacman -S portainer\n\n# Enable and start service\nsudo systemctl enable --now portainer\n\n# Verify installation\nportainer --version\n```\n\n### Alpine Linux\n\n```bash\n# Install portainer\napk add --no-cache portainer\n\n# Enable and start service\nrc-update add portainer default\nrc-service portainer start\n\n# Verify installation\nportainer --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install portainer\nsudo zypper install -y portainer\n\n# Enable and start service\nsudo systemctl enable --now portainer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nportainer --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install portainer\n\n# Start service\nbrew services start portainer\n\n# Verify installation\nportainer --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install portainer\n\n# Enable in rc.conf\necho 'portainer_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice portainer start\n\n# Verify installation\nportainer --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install portainer\n\n# Or using Scoop\nscoop install portainer\n\n# Verify installation\nportainer --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/portainer\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nportainer --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable portainer\n\n# Start service\nsudo systemctl start portainer\n\n# Stop service\nsudo systemctl stop portainer\n\n# Restart service\nsudo systemctl restart portainer\n\n# Check status\nsudo systemctl status portainer\n\n# View logs\nsudo journalctl -u portainer -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add portainer default\n\n# Start service\nrc-service portainer start\n\n# Stop service\nrc-service portainer stop\n\n# Restart service\nrc-service portainer restart\n\n# Check status\nrc-service portainer status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'portainer_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice portainer start\n\n# Stop service\nservice portainer stop\n\n# Restart service\nservice portainer restart\n\n# Check status\nservice portainer status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start portainer\nbrew services stop portainer\nbrew services restart portainer\n\n# Check status\nbrew services list | grep portainer\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start portainer\n\n# Stop service\nnet stop portainer\n\n# Using PowerShell\nStart-Service portainer\nStop-Service portainer\nRestart-Service portainer\n\n# Check status\nGet-Service portainer\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream portainer_backend {\n    server 127.0.0.1:9000;\n}\n\nserver {\n    listen 80;\n    server_name portainer.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name portainer.example.com;\n\n    ssl_certificate /etc/ssl/certs/portainer.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/portainer.example.com.key;\n\n    location / {\n        proxy_pass http://portainer_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName portainer.example.com\n    Redirect permanent / https://portainer.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName portainer.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/portainer.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/portainer.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9000/\n    ProxyPassReverse / http://127.0.0.1:9000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend portainer_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/portainer.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend portainer_backend\n\nbackend portainer_backend\n    balance roundrobin\n    server portainer1 127.0.0.1:9000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R portainer:portainer /etc/portainer\nsudo chmod 750 /etc/portainer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status portainer\n\n# View logs\nsudo journalctl -u portainer -f\n\n# Monitor resource usage\ntop -p $(pgrep portainer)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/portainer\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/portainer-backup-$DATE.tar.gz\" /etc/portainer /var/lib/portainer\n\necho \"Backup completed: $BACKUP_DIR/portainer-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop portainer\n\n# Restore from backup\ntar -xzf /backup/portainer/portainer-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start portainer\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u portainer -n 100\nsudo tail -f /var/log/portainer/portainer.log\n\n# Check configuration\nportainer --version\n\n# Check permissions\nls -la /etc/portainer\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9000\n\n# Test connectivity\ntelnet localhost 9000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep portainer)\n\n# Check disk I/O\niotop -p $(pgrep portainer)\n\n# Check connections\nss -an | grep 9000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  portainer:\n    image: portainer:latest\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - ./config:/etc/portainer\n      - ./data:/var/lib/portainer\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update portainer\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade portainer\n\n# Arch Linux\nsudo pacman -Syu portainer\n\n# Alpine Linux\napk update && apk upgrade portainer\n\n# openSUSE\nsudo zypper update portainer\n\n# FreeBSD\npkg update && pkg upgrade portainer\n\n# Always backup before updates\ntar -czf /backup/portainer-pre-update-$(date +%Y%m%d).tar.gz /etc/portainer\n\n# Restart after updates\nsudo systemctl restart portainer\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/portainer\n\n# Clean old logs\nfind /var/log/portainer -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/portainer\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.portainer.org/\n- GitHub Repository: https://github.com/portainer/portainer\n- Community Forum: https://forum.portainer.org/\n- Best Practices Guide: https://docs.portainer.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">portainer is a free and open-source container management platform. Portainer simplifies container management across Docker, Swarm, and Kubernetes environments, providing a GUI alternative to command-line tools</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: Docker API access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9000 (default portainer port)</li>\n<li class=\"mobile-list-item\">Port 8000 for edge agent</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install portainer\nsudo dnf install -y portainer\n\n# Enable and start service\nsudo systemctl enable --now portainer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nportainer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install portainer\nsudo apt install -y portainer\n\n# Enable and start service\nsudo systemctl enable --now portainer\n\n# Configure firewall\nsudo ufw allow 9000\n\n# Verify installation\nportainer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install portainer\nsudo pacman -S portainer\n\n# Enable and start service\nsudo systemctl enable --now portainer\n\n# Verify installation\nportainer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install portainer\napk add --no-cache portainer\n\n# Enable and start service\nrc-update add portainer default\nrc-service portainer start\n\n# Verify installation\nportainer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install portainer\nsudo zypper install -y portainer\n\n# Enable and start service\nsudo systemctl enable --now portainer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nportainer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install portainer\n\n# Start service\nbrew services start portainer\n\n# Verify installation\nportainer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install portainer\n\n# Enable in rc.conf\necho &#039;portainer_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice portainer start\n\n# Verify installation\nportainer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install portainer\n\n# Or using Scoop\nscoop install portainer\n\n# Verify installation\nportainer --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/portainer\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nportainer --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable portainer\n\n# Start service\nsudo systemctl start portainer\n\n# Stop service\nsudo systemctl stop portainer\n\n# Restart service\nsudo systemctl restart portainer\n\n# Check status\nsudo systemctl status portainer\n\n# View logs\nsudo journalctl -u portainer -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add portainer default\n\n# Start service\nrc-service portainer start\n\n# Stop service\nrc-service portainer stop\n\n# Restart service\nrc-service portainer restart\n\n# Check status\nrc-service portainer status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;portainer_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice portainer start\n\n# Stop service\nservice portainer stop\n\n# Restart service\nservice portainer restart\n\n# Check status\nservice portainer status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start portainer\nbrew services stop portainer\nbrew services restart portainer\n\n# Check status\nbrew services list | grep portainer</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start portainer\n\n# Stop service\nnet stop portainer\n\n# Using PowerShell\nStart-Service portainer\nStop-Service portainer\nRestart-Service portainer\n\n# Check status\nGet-Service portainer</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream portainer_backend {\n    server 127.0.0.1:9000;\n}\n\nserver {\n    listen 80;\n    server_name portainer.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name portainer.example.com;\n\n    ssl_certificate /etc/ssl/certs/portainer.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/portainer.example.com.key;\n\n    location / {\n        proxy_pass http://portainer_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName portainer.example.com\n    Redirect permanent / https://portainer.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName portainer.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/portainer.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/portainer.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9000/\n    ProxyPassReverse / http://127.0.0.1:9000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend portainer_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/portainer.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend portainer_backend\n\nbackend portainer_backend\n    balance roundrobin\n    server portainer1 127.0.0.1:9000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R portainer:portainer /etc/portainer\nsudo chmod 750 /etc/portainer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status portainer\n\n# View logs\nsudo journalctl -u portainer -f\n\n# Monitor resource usage\ntop -p $(pgrep portainer)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/portainer&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/portainer-backup-$DATE.tar.gz&quot; /etc/portainer /var/lib/portainer\n\necho &quot;Backup completed: $BACKUP_DIR/portainer-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop portainer\n\n# Restore from backup\ntar -xzf /backup/portainer/portainer-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start portainer</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u portainer -n 100\nsudo tail -f /var/log/portainer/portainer.log\n\n# Check configuration\nportainer --version\n\n# Check permissions\nls -la /etc/portainer</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9000\n\n# Test connectivity\ntelnet localhost 9000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep portainer)\n\n# Check disk I/O\niotop -p $(pgrep portainer)\n\n# Check connections\nss -an | grep 9000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  portainer:\n    image: portainer:latest\n    ports:\n      - &quot;9000:9000&quot;\n    volumes:\n      - ./config:/etc/portainer\n      - ./data:/var/lib/portainer\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update portainer\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade portainer\n\n# Arch Linux\nsudo pacman -Syu portainer\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade portainer\n\n# openSUSE\nsudo zypper update portainer\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade portainer\n\n# Always backup before updates\ntar -czf /backup/portainer-pre-update-$(date +%Y%m%d).tar.gz /etc/portainer\n\n# Restart after updates\nsudo systemctl restart portainer</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/portainer\n\n# Clean old logs\nfind /var/log/portainer -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/portainer</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.portainer.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/portainer/portainer</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.portainer.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.portainer.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1283,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install portainer","id":"install-portainer"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install portainer","id":"install-portainer"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install portainer","id":"install-portainer"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install portainer","id":"install-portainer"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install portainer","id":"install-portainer"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-16T18:15:39.186Z","metadataVersion":"2.0"},{"name":"yacht","displayName":"Yacht","slug":"yacht","description":"Yacht is a web-based UI for managing Docker containers","category":"container-management","subcategory":"container-management","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[8000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["docker","containers","web-interface","management"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/container-management/yacht","documentationUrl":"https://howtomgr.github.io/container-management/yacht","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/yacht","updatedAt":"2025-09-16T18:04:21Z","createdAt":"2025-09-08T03:18:45Z","readmeRaw":"# Yacht Installation Guide\n\nYacht is a free and open-source Container Management. A web-based UI for managing Docker containers\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum\n  - Network: 8000 ports required\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10 Pro\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8000 (default yacht port)\n  - Firewall rules configured\n- **Dependencies**:\n  - docker, docker-compose\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install yacht\nsudo dnf install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install yacht\nsudo apt install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Arch Linux\n\n```bash\n# Install yacht\nsudo pacman -S yacht\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Alpine Linux\n\n```bash\n# Install yacht\napk add --no-cache yacht\n\n# Enable and start service\nrc-update add yacht default\nrc-service yacht start\n\n# Verify installation\nyacht --version || rc-service yacht status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install yacht\nsudo zypper install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install yacht\n\n# Start service\nbrew services start yacht\n\n# Verify installation\nyacht --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install yacht\n\n# Enable in rc.conf\necho 'yacht_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Verify installation\nyacht --version || service yacht status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install yacht\n\n# Or using Scoop\nscoop install yacht\n\n# Verify installation\nyacht --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /config\n\n# Set up basic configuration\nsudo tee /config/yacht.conf << 'EOF'\n# Yacht Configuration\nWORKERS=4\nEOF\n\n# Set appropriate permissions\nsudo chown -R yacht:yacht /config || \\\n  sudo chown -R $(whoami):$(whoami) /config\n\n# Test configuration\nsudo yacht --test || sudo yacht configtest\n```\n\n### Security Hardening\n\n```bash\n# Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false yacht || true\n\n# Secure configuration files\nsudo chmod 750 /config\nsudo chmod 640 /config/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable yacht\n\n# Start service\nsudo systemctl start yacht\n\n# Stop service\nsudo systemctl stop yacht\n\n# Restart service\nsudo systemctl restart yacht\n\n# Reload configuration\nsudo systemctl reload yacht\n\n# Check status\nsudo systemctl status yacht\n\n# View logs\nsudo journalctl -u yacht -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add yacht default\n\n# Start service\nrc-service yacht start\n\n# Stop service\nrc-service yacht stop\n\n# Restart service\nrc-service yacht restart\n\n# Check status\nrc-service yacht status\n\n# View logs\ntail -f /config/logs/yacht.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'yacht_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Stop service\nservice yacht stop\n\n# Restart service\nservice yacht restart\n\n# Check status\nservice yacht status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start yacht\nbrew services stop yacht\nbrew services restart yacht\n\n# Check status\nbrew services list | grep yacht\n\n# View logs\ntail -f $(brew --prefix)/var/log/yacht.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start yacht\n\n# Stop service\nnet stop yacht\n\n# Using PowerShell\nStart-Service yacht\nStop-Service yacht\nRestart-Service yacht\n\n# Check status\nGet-Service yacht\n\n# Set to automatic startup\nSet-Service yacht -StartupType Automatic\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /config/yacht.conf << 'EOF'\n# Performance tuning\nWORKERS=4\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart yacht\n```\n\n### High Availability Setup\n\n```bash\n# Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream yacht_backend {\n    server 127.0.0.1:8000;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name yacht.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yacht.example.com;\n\n    ssl_certificate /etc/ssl/certs/yacht.crt;\n    ssl_certificate_key /etc/ssl/private/yacht.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://yacht_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName yacht.example.com\n    Redirect permanent / https://yacht.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName yacht.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/yacht.crt\n    SSLCertificateKeyFile /etc/ssl/private/yacht.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    <Location />\n        ProxyPass http://127.0.0.1:8000/\n        ProxyPassReverse http://127.0.0.1:8000/\n    </Location>\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8000/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nglobal\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend yacht_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/yacht.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend yacht_backend\n\nbackend yacht_backend\n    balance roundrobin\n    option httpchk GET /health\n    server yacht1 127.0.0.1:8000 check\n```\n\n### Caddy Configuration\n\n```caddy\nyacht.example.com {\n    reverse_proxy 127.0.0.1:8000 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    encode gzip\n}\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Create dedicated user\nsudo useradd --system --shell /bin/false --home /config yacht || true\n\n# Set ownership\nsudo chown -R yacht:yacht /config\nsudo chown -R yacht:yacht /config/logs\n\n# Set permissions\nsudo chmod 750 /config\nsudo chmod 640 /config/*\nsudo chmod 750 /config/logs\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8000 proto tcp comment \"Yacht\"\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=yacht\nsudo firewall-cmd --permanent --service=yacht --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=yacht\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8000 || true\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/yacht.key \\\n    -out /etc/ssl/certs/yacht.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=yacht.example.com\"\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/yacht.key\nsudo chmod 644 /etc/ssl/certs/yacht.crt\n\n# For production, use Let's Encrypt\nsudo certbot certonly --standalone -d yacht.example.com\n```\n\n### Fail2ban Configuration\n\n```ini\n# /etc/fail2ban/jail.d/yacht.conf\n[yacht]\nenabled = true\nport = 8000\nfilter = yacht\nlogpath = /config/logs/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\n```\n\n```ini\n# /etc/fail2ban/filter.d/yacht.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from <HOST>.*$\n            ^.*Authentication failed.*from <HOST>.*$\n            ^.*Invalid credentials.*from <HOST>.*$\nignoreregex =\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE yacht_db;\nCREATE USER yacht_user WITH ENCRYPTED PASSWORD 'secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE yacht_db TO yacht_user;\n\\q\nEOF\n\n# Configure connection in Yacht\necho \"DATABASE_URL=postgresql://yacht_user:secure_password_here@localhost/yacht_db\" | \\\n  sudo tee -a /config/yacht.env\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE yacht_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'yacht_user'@'localhost' IDENTIFIED BY 'secure_password_here';\nGRANT ALL PRIVILEGES ON yacht_db.* TO 'yacht_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho \"DATABASE_URL=mysql://yacht_user:secure_password_here@localhost/yacht_db\" | \\\n  sudo tee -a /config/yacht.env\n```\n\n### SQLite Backend (if applicable)\n\n```bash\n# Create database directory\nsudo mkdir -p /var/lib/yacht\nsudo chown yacht:yacht /var/lib/yacht\n\n# Initialize database\nsudo -u yacht yacht init-db\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for better performance\ncat << 'EOF' | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat << 'EOF' | sudo tee -a /etc/security/limits.conf\nyacht soft nofile 65535\nyacht hard nofile 65535\nyacht soft nproc 32768\nyacht hard nproc 32768\nEOF\n```\n\n### Application Tuning\n\n```bash\n# Configure application-specific performance settings\ncat << 'EOF' | sudo tee -a /config/performance.conf\n# Performance configuration\nWORKERS=4\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart yacht\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: 'yacht'\n    static_configs:\n      - targets: ['localhost:8000/metrics']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-health\n\n# Check if service is running\nif ! systemctl is-active --quiet yacht; then\n    echo \"CRITICAL: Yacht service is not running\"\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8000 2>/dev/null; then\n    echo \"CRITICAL: Yacht is not listening on port 8000\"\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:8000/health || echo \"999\")\nif (( $(echo \"$response_time > 5\" | bc -l) )); then\n    echo \"WARNING: Slow response time: ${response_time}s\"\n    exit 1\nfi\n\necho \"OK: Yacht is healthy (response time: ${response_time}s)\"\nexit 0\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\ncat << 'EOF' | sudo tee /etc/logrotate.d/yacht\n/config/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 yacht yacht\n    postrotate\n        systemctl reload yacht > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/yacht\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-backup\n\nBACKUP_DIR=\"/backup/yacht\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/yacht_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if needed for consistency)\necho \"Stopping Yacht service...\"\nsystemctl stop yacht\n\n# Backup configuration\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_FILE\" \\\n    /config \\\n    /var/lib/yacht \\\n    /config/logs\n\n# Backup database (if applicable)\nif command -v pg_dump &> /dev/null; then\n    echo \"Backing up database...\"\n    sudo -u postgres pg_dump yacht_db | gzip > \"$BACKUP_DIR/yacht_db_$DATE.sql.gz\"\nfi\n\n# Start service\necho \"Starting Yacht service...\"\nsystemctl start yacht\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-restore\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping Yacht service...\"\nsystemctl stop yacht\n\n# Restore files\necho \"Restoring from backup...\"\ntar -xzf \"$BACKUP_FILE\" -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo \"$BACKUP_FILE\" | sed 's/.tar.gz$/_db.sql.gz/')\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql yacht_db\nfi\n\n# Fix permissions\nchown -R yacht:yacht /config\nchown -R yacht:yacht /var/lib/yacht\n\n# Start service\necho \"Starting Yacht service...\"\nsystemctl start yacht\n\necho \"Restore completed successfully\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status yacht\nsudo journalctl -u yacht -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8000\nsudo lsof -i :8000\n\n# Verify configuration\nsudo yacht --test || sudo yacht configtest\n\n# Check permissions\nls -la /config\nls -la /config/logs\n```\n\n2. **Cannot access web interface**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep yacht\ncurl -I http://localhost:8000\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8000\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep yacht\n```\n\n3. **High memory/CPU usage**:\n```bash\n# Monitor resource usage\ntop -p $(pgrep python)\nhtop -p $(pgrep python)\n\n# Check for memory leaks\nps aux | grep python\ncat /proc/$(pgrep python)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /config/logs/*.log | tail -50\n```\n\n4. **Database connection errors**:\n```bash\n# Test database connection\npsql -U yacht_user -d yacht_db -c \"SELECT 1;\"\nmysql -u yacht_user -p yacht_db -e \"SELECT 1;\"\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"debug = true\" | sudo tee -a /config/yacht.conf\n\n# Restart with debug mode\nsudo systemctl stop yacht\nsudo -u yacht yacht --debug\n\n# Watch debug logs\ntail -f /config/logs/debug.log\n```\n\n### Performance Analysis\n\n```bash\n# Profile CPU usage\nsudo perf record -p $(pgrep python) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/yacht.pcap port 8000\nsudo tcpdump -r /tmp/yacht.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep python)\n```\n\n## Integration Examples\n\n### Docker Deployment\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  yacht:\n    image: yacht:yacht\n    container_name: yacht\n    restart: unless-stopped\n    ports:\n      - \"8000:8000\"\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/config\n      - ./data:/var/lib/yacht\n      - ./logs:/config/logs\n    networks:\n      - yacht_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  yacht_network:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\n# yacht-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yacht\n  labels:\n    app: yacht\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yacht\n  template:\n    metadata:\n      labels:\n        app: yacht\n    spec:\n      containers:\n      - name: yacht\n        image: yacht:yacht\n        ports:\n        - containerPort: 8000\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /config\n        - name: data\n          mountPath: /var/lib/yacht\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: yacht-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: yacht-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: yacht\nspec:\n  selector:\n    app: yacht\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: yacht-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```\n\n### Ansible Playbook\n\n```yaml\n---\n# yacht-playbook.yml\n- name: Install and configure Yacht\n  hosts: all\n  become: yes\n  vars:\n    yacht_version: latest\n    yacht_port: 8000\n    yacht_config_dir: /config\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - docker, docker-compose\n        state: present\n    \n    - name: Install Yacht\n      package:\n        name: yacht\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: \"{{ yacht_config_dir }}\"\n        state: directory\n        owner: yacht\n        group: yacht\n        mode: '0750'\n    \n    - name: Deploy configuration\n      template:\n        src: yacht.conf.j2\n        dest: \"{{ yacht_config_dir }}/yacht.conf\"\n        owner: yacht\n        group: yacht\n        mode: '0640'\n      notify: restart yacht\n    \n    - name: Start and enable service\n      systemd:\n        name: yacht\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: \"{{ yacht_port }}/tcp\"\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart yacht\n      systemd:\n        name: yacht\n        state: restarted\n```\n\n### Terraform Configuration\n\n```hcl\n# yacht.tf\nresource \"aws_instance\" \"yacht_server\" {\n  ami           = var.ami_id\n  instance_type = \"t3.medium\"\n  \n  vpc_security_group_ids = [aws_security_group.yacht.id]\n  \n  user_data = <<-EOF\n    #!/bin/bash\n    # Install Yacht\n    apt-get update\n    apt-get install -y yacht docker, docker-compose\n    \n    # Configure Yacht\n    systemctl enable yacht\n    systemctl start yacht\n  EOF\n  \n  tags = {\n    Name = \"Yacht Server\"\n    Application = \"Yacht\"\n  }\n}\n\nresource \"aws_security_group\" \"yacht\" {\n  name        = \"yacht-sg\"\n  description = \"Security group for Yacht\"\n  \n  ingress {\n    from_port   = 8000\n    to_port     = 8000\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = {\n    Name = \"Yacht Security Group\"\n  }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update yacht\nsudo dnf update yacht\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade yacht\n\n# Arch Linux\nsudo pacman -Syu yacht\n\n# Alpine Linux\napk update\napk upgrade yacht\n\n# openSUSE\nsudo zypper ref\nsudo zypper update yacht\n\n# FreeBSD\npkg update\npkg upgrade yacht\n\n# Always backup before updates\n/usr/local/bin/yacht-backup\n\n# Restart after updates\nsudo systemctl restart yacht\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean old logs\nfind /config/logs -name \"*.log\" -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze yacht_db\n\n# Check disk usage\ndf -h | grep -E \"(/$|yacht)\"\ndu -sh /var/lib/yacht\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u yacht | grep -i \"error\\|fail\\|deny\"\n```\n\n### Health Monitoring Checklist\n\n- [ ] Service is running and enabled\n- [ ] Web interface is accessible\n- [ ] Database connections are healthy\n- [ ] Disk usage is below 80%\n- [ ] No critical errors in logs\n- [ ] Backups are running successfully\n- [ ] SSL certificates are valid\n- [ ] Security updates are applied\n\n## Additional Resources\n\n- Official Documentation: https://docs.yacht.org/\n- GitHub Repository: https://github.com/yacht/yacht\n- Community Forum: https://forum.yacht.org/\n- Wiki: https://wiki.yacht.org/\n- Docker Hub: https://hub.docker.com/r/yacht/yacht\n- Security Advisories: https://security.yacht.org/\n- Best Practices: https://docs.yacht.org/best-practices\n- API Documentation: https://api.yacht.org/\n- Comparison with Portainer, Rancher, Docker Swarm UI, Shipyard: https://docs.yacht.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Yacht is a free and open-source Container Management. A web-based UI for managing Docker containers</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum</li>\n<li class=\"mobile-list-item\">Network: 8000 ports required</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10 Pro</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8000 (default yacht port)</li>\n<li class=\"mobile-list-item\">Firewall rules configured</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">docker, docker-compose</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install yacht\nsudo dnf install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install yacht\nsudo apt install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\nsudo pacman -S yacht\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\napk add --no-cache yacht\n\n# Enable and start service\nrc-update add yacht default\nrc-service yacht start\n\n# Verify installation\nyacht --version || rc-service yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\nsudo zypper install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install yacht\n\n# Start service\nbrew services start yacht\n\n# Verify installation\nyacht --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install yacht\n\n# Enable in rc.conf\necho &#039;yacht_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Verify installation\nyacht --version || service yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install yacht\n\n# Or using Scoop\nscoop install yacht\n\n# Verify installation\nyacht --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /config\n\n# Set up basic configuration\nsudo tee /config/yacht.conf &lt;&lt; &#039;EOF&#039;\n# Yacht Configuration\nWORKERS=4\nEOF\n\n# Set appropriate permissions\nsudo chown -R yacht:yacht /config || \\\n  sudo chown -R $(whoami):$(whoami) /config\n\n# Test configuration\nsudo yacht --test || sudo yacht configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false yacht || true\n\n# Secure configuration files\nsudo chmod 750 /config\nsudo chmod 640 /config/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable yacht\n\n# Start service\nsudo systemctl start yacht\n\n# Stop service\nsudo systemctl stop yacht\n\n# Restart service\nsudo systemctl restart yacht\n\n# Reload configuration\nsudo systemctl reload yacht\n\n# Check status\nsudo systemctl status yacht\n\n# View logs\nsudo journalctl -u yacht -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add yacht default\n\n# Start service\nrc-service yacht start\n\n# Stop service\nrc-service yacht stop\n\n# Restart service\nrc-service yacht restart\n\n# Check status\nrc-service yacht status\n\n# View logs\ntail -f /config/logs/yacht.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;yacht_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Stop service\nservice yacht stop\n\n# Restart service\nservice yacht restart\n\n# Check status\nservice yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start yacht\nbrew services stop yacht\nbrew services restart yacht\n\n# Check status\nbrew services list | grep yacht\n\n# View logs\ntail -f $(brew --prefix)/var/log/yacht.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start yacht\n\n# Stop service\nnet stop yacht\n\n# Using PowerShell\nStart-Service yacht\nStop-Service yacht\nRestart-Service yacht\n\n# Check status\nGet-Service yacht\n\n# Set to automatic startup\nSet-Service yacht -StartupType Automatic</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /config/yacht.conf &lt;&lt; &#039;EOF&#039;\n# Performance tuning\nWORKERS=4\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho &quot;vm.swappiness=10&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream yacht_backend {\n    server 127.0.0.1:8000;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name yacht.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yacht.example.com;\n\n    ssl_certificate /etc/ssl/certs/yacht.crt;\n    ssl_certificate_key /etc/ssl/private/yacht.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    location / {\n        proxy_pass http://yacht_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName yacht.example.com\n    Redirect permanent / https://yacht.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName yacht.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/yacht.crt\n    SSLCertificateKeyFile /etc/ssl/private/yacht.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    &lt;Location /&gt;\n        ProxyPass http://127.0.0.1:8000/\n        ProxyPassReverse http://127.0.0.1:8000/\n    &lt;/Location&gt;\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8000/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">global\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend yacht_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/yacht.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend yacht_backend\n\nbackend yacht_backend\n    balance roundrobin\n    option httpchk GET /health\n    server yacht1 127.0.0.1:8000 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddy\">yacht.example.com {\n    reverse_proxy 127.0.0.1:8000 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user\nsudo useradd --system --shell /bin/false --home /config yacht || true\n\n# Set ownership\nsudo chown -R yacht:yacht /config\nsudo chown -R yacht:yacht /config/logs\n\n# Set permissions\nsudo chmod 750 /config\nsudo chmod 640 /config/*\nsudo chmod 750 /config/logs\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8000 proto tcp comment &quot;Yacht&quot;\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=yacht\nsudo firewall-cmd --permanent --service=yacht --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=yacht\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8000 || true</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/yacht.key \\\n    -out /etc/ssl/certs/yacht.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=yacht.example.com&quot;\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/yacht.key\nsudo chmod 644 /etc/ssl/certs/yacht.crt\n\n# For production, use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d yacht.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/jail.d/yacht.conf\n[yacht]\nenabled = true\nport = 8000\nfilter = yacht\nlogpath = /config/logs/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/filter.d/yacht.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from &lt;HOST&gt;.*$\n            ^.*Authentication failed.*from &lt;HOST&gt;.*$\n            ^.*Invalid credentials.*from &lt;HOST&gt;.*$\nignoreregex =</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE yacht_db;\nCREATE USER yacht_user WITH ENCRYPTED PASSWORD &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON DATABASE yacht_db TO yacht_user;\n\\q\nEOF\n\n# Configure connection in Yacht\necho &quot;DATABASE_URL=postgresql://yacht_user:secure_password_here@localhost/yacht_db&quot; | \\\n  sudo tee -a /config/yacht.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE yacht_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;yacht_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON yacht_db.* TO &#039;yacht_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho &quot;DATABASE_URL=mysql://yacht_user:secure_password_here@localhost/yacht_db&quot; | \\\n  sudo tee -a /config/yacht.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"sqlite-backend-if-applicable\" class=\"mobile-header\">SQLite Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database directory\nsudo mkdir -p /var/lib/yacht\nsudo chown yacht:yacht /var/lib/yacht\n\n# Initialize database\nsudo -u yacht yacht init-db</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for better performance\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/security/limits.conf\nyacht soft nofile 65535\nyacht hard nofile 65535\nyacht soft nproc 32768\nyacht hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-tuning\" class=\"mobile-header\">Application Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure application-specific performance settings\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /config/performance.conf\n# Performance configuration\nWORKERS=4\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: &#039;yacht&#039;\n    static_configs:\n      - targets: [&#039;localhost:8000/metrics&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-health\n\n# Check if service is running\nif ! systemctl is-active --quiet yacht; then\n    echo &quot;CRITICAL: Yacht service is not running&quot;\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8000 2&gt;/dev/null; then\n    echo &quot;CRITICAL: Yacht is not listening on port 8000&quot;\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w &#039;%{time_total}&#039; http://localhost:8000/health || echo &quot;999&quot;)\nif (( $(echo &quot;$response_time &gt; 5&quot; | bc -l) )); then\n    echo &quot;WARNING: Slow response time: ${response_time}s&quot;\n    exit 1\nfi\n\necho &quot;OK: Yacht is healthy (response time: ${response_time}s)&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\ncat &lt;&lt; &#039;EOF&#039; | sudo tee /etc/logrotate.d/yacht\n/config/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 yacht yacht\n    postrotate\n        systemctl reload yacht &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/yacht</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-backup\n\nBACKUP_DIR=&quot;/backup/yacht&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/yacht_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if needed for consistency)\necho &quot;Stopping Yacht service...&quot;\nsystemctl stop yacht\n\n# Backup configuration\necho &quot;Backing up configuration...&quot;\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /config \\\n    /var/lib/yacht \\\n    /config/logs\n\n# Backup database (if applicable)\nif command -v pg_dump &amp;&gt; /dev/null; then\n    echo &quot;Backing up database...&quot;\n    sudo -u postgres pg_dump yacht_db | gzip &gt; &quot;$BACKUP_DIR/yacht_db_$DATE.sql.gz&quot;\nfi\n\n# Start service\necho &quot;Starting Yacht service...&quot;\nsystemctl start yacht\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.sql.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-restore\n\nif [ $# -ne 1 ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Error: Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Stop service\necho &quot;Stopping Yacht service...&quot;\nsystemctl stop yacht\n\n# Restore files\necho &quot;Restoring from backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo &quot;$BACKUP_FILE&quot; | sed &#039;s/.tar.gz$/_db.sql.gz/&#039;)\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql yacht_db\nfi\n\n# Fix permissions\nchown -R yacht:yacht /config\nchown -R yacht:yacht /var/lib/yacht\n\n# Start service\necho &quot;Starting Yacht service...&quot;\nsystemctl start yacht\n\necho &quot;Restore completed successfully&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status yacht\nsudo journalctl -u yacht -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8000\nsudo lsof -i :8000\n\n# Verify configuration\nsudo yacht --test || sudo yacht configtest\n\n# Check permissions\nls -la /config\nls -la /config/logs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cannot access web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep yacht\ncurl -I http://localhost:8000\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8000\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep yacht</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>High memory/CPU usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor resource usage\ntop -p $(pgrep python)\nhtop -p $(pgrep python)\n\n# Check for memory leaks\nps aux | grep python\ncat /proc/$(pgrep python)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /config/logs/*.log | tail -50</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database connection errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connection\npsql -U yacht_user -d yacht_db -c &quot;SELECT 1;&quot;\nmysql -u yacht_user -p yacht_db -e &quot;SELECT 1;&quot;\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;debug = true&quot; | sudo tee -a /config/yacht.conf\n\n# Restart with debug mode\nsudo systemctl stop yacht\nsudo -u yacht yacht --debug\n\n# Watch debug logs\ntail -f /config/logs/debug.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-analysis\" class=\"mobile-header\">Performance Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile CPU usage\nsudo perf record -p $(pgrep python) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/yacht.pcap port 8000\nsudo tcpdump -r /tmp/yacht.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep python)</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml\nversion: &#039;3.8&#039;\n\nservices:\n  yacht:\n    image: yacht:yacht\n    container_name: yacht\n    restart: unless-stopped\n    ports:\n      - &quot;8000:8000&quot;\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/config\n      - ./data:/var/lib/yacht\n      - ./logs:/config/logs\n    networks:\n      - yacht_network\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8000/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  yacht_network:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># yacht-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yacht\n  labels:\n    app: yacht\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yacht\n  template:\n    metadata:\n      labels:\n        app: yacht\n    spec:\n      containers:\n      - name: yacht\n        image: yacht:yacht\n        ports:\n        - containerPort: 8000\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /config\n        - name: data\n          mountPath: /var/lib/yacht\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: yacht-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: yacht-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: yacht\nspec:\n  selector:\n    app: yacht\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: yacht-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n# yacht-playbook.yml\n- name: Install and configure Yacht\n  hosts: all\n  become: yes\n  vars:\n    yacht_version: latest\n    yacht_port: 8000\n    yacht_config_dir: /config\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - docker, docker-compose\n        state: present\n    \n    - name: Install Yacht\n      package:\n        name: yacht\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: &quot;{{ yacht_config_dir }}&quot;\n        state: directory\n        owner: yacht\n        group: yacht\n        mode: &#039;0750&#039;\n    \n    - name: Deploy configuration\n      template:\n        src: yacht.conf.j2\n        dest: &quot;{{ yacht_config_dir }}/yacht.conf&quot;\n        owner: yacht\n        group: yacht\n        mode: &#039;0640&#039;\n      notify: restart yacht\n    \n    - name: Start and enable service\n      systemd:\n        name: yacht\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: &quot;{{ yacht_port }}/tcp&quot;\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart yacht\n      systemd:\n        name: yacht\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-configuration\" class=\"mobile-header\">Terraform Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"hcl\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">hcl</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-hcl\"># yacht.tf\nresource &quot;aws_instance&quot; &quot;yacht_server&quot; {\n  ami           = var.ami_id\n  instance_type = &quot;t3.medium&quot;\n  \n  vpc_security_group_ids = [aws_security_group.yacht.id]\n  \n  user_data = &lt;&lt;-EOF\n    #!/bin/bash\n    # Install Yacht\n    apt-get update\n    apt-get install -y yacht docker, docker-compose\n    \n    # Configure Yacht\n    systemctl enable yacht\n    systemctl start yacht\n  EOF\n  \n  tags = {\n    Name = &quot;Yacht Server&quot;\n    Application = &quot;Yacht&quot;\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;yacht&quot; {\n  name        = &quot;yacht-sg&quot;\n  description = &quot;Security group for Yacht&quot;\n  \n  ingress {\n    from_port   = 8000\n    to_port     = 8000\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  tags = {\n    Name = &quot;Yacht Security Group&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update yacht\nsudo dnf update yacht\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade yacht\n\n# Arch Linux\nsudo pacman -Syu yacht\n\n# Alpine Linux\napk update\napk upgrade yacht\n\n# openSUSE\nsudo zypper ref\nsudo zypper update yacht\n\n# FreeBSD\npkg update\npkg upgrade yacht\n\n# Always backup before updates\n/usr/local/bin/yacht-backup\n\n# Restart after updates\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old logs\nfind /config/logs -name &quot;*.log&quot; -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze yacht_db\n\n# Check disk usage\ndf -h | grep -E &quot;(/$|yacht)&quot;\ndu -sh /var/lib/yacht\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u yacht | grep -i &quot;error\\|fail\\|deny&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring-checklist\" class=\"mobile-header\">Health Monitoring Checklist</h3>\n<li class=\"mobile-list-item\">[ ] Service is running and enabled</li>\n<li class=\"mobile-list-item\">[ ] Web interface is accessible</li>\n<li class=\"mobile-list-item\">[ ] Database connections are healthy</li>\n<li class=\"mobile-list-item\">[ ] Disk usage is below 80%</li>\n<li class=\"mobile-list-item\">[ ] No critical errors in logs</li>\n<li class=\"mobile-list-item\">[ ] Backups are running successfully</li>\n<li class=\"mobile-list-item\">[ ] SSL certificates are valid</li>\n<li class=\"mobile-list-item\">[ ] Security updates are applied</li>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.yacht.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/yacht/yacht</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.yacht.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.yacht.org/</li>\n<li class=\"mobile-list-item\">Docker Hub: https://hub.docker.com/r/yacht/yacht</li>\n<li class=\"mobile-list-item\">Security Advisories: https://security.yacht.org/</li>\n<li class=\"mobile-list-item\">Best Practices: https://docs.yacht.org/best-practices</li>\n<li class=\"mobile-list-item\">API Documentation: https://api.yacht.org/</li>\n<li class=\"mobile-list-item\">Comparison with Portainer, Rancher, Docker Swarm UI, Shipyard: https://docs.yacht.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"16 min","wordCount":3101,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install yacht","id":"install-yacht"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install yacht","id":"install-yacht"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install yacht","id":"install-yacht"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install yacht","id":"install-yacht"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install yacht","id":"install-yacht"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory if needed","id":"create-configuration-directory-if-needed"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"Yacht Configuration","id":"yacht-configuration"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":1,"text":"Create dedicated user (if not created by package)","id":"create-dedicated-user-if-not-created-by-package"},{"level":1,"text":"Secure configuration files","id":"secure-configuration-files"},{"level":1,"text":"Enable security features","id":"enable-security-features"},{"level":1,"text":"See security section for detailed hardening steps","id":"see-security-section-for-detailed-hardening-steps"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Reload configuration","id":"reload-configuration"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"Set to automatic startup","id":"set-to-automatic-startup"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":1,"text":"Configure performance settings","id":"configure-performance-settings"},{"level":1,"text":"Performance tuning","id":"performance-tuning"},{"level":1,"text":"Apply system tuning","id":"apply-system-tuning"},{"level":1,"text":"Restart service to apply changes","id":"restart-service-to-apply-changes"},{"level":3,"text":"High Availability Setup","id":"high-availability-setup"},{"level":1,"text":"Configure clustering/HA (if supported)","id":"configure-clusteringha-if-supported"},{"level":1,"text":"This varies greatly by tool - see official documentation","id":"this-varies-greatly-by-tool-see-official-documentation"},{"level":1,"text":"Example load balancing configuration","id":"example-load-balancing-configuration"},{"level":1,"text":"Configure multiple instances on different ports","id":"configure-multiple-instances-on-different-ports"},{"level":1,"text":"Use HAProxy or nginx for load balancing","id":"use-haproxy-or-nginx-for-load-balancing"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":3,"text":"Caddy Configuration","id":"caddy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Create dedicated user","id":"create-dedicated-user"},{"level":1,"text":"Set ownership","id":"set-ownership"},{"level":1,"text":"Set permissions","id":"set-permissions"},{"level":1,"text":"Configure firewall (UFW)","id":"configure-firewall-ufw"},{"level":1,"text":"Configure firewall (firewalld)","id":"configure-firewall-firewalld"},{"level":1,"text":"SELinux configuration (if enabled)","id":"selinux-configuration-if-enabled"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":1,"text":"Generate self-signed certificate (for testing)","id":"generate-self-signed-certificate-for-testing"},{"level":1,"text":"Set proper permissions","id":"set-proper-permissions"},{"level":1,"text":"For production, use Let's Encrypt","id":"for-production-use-lets-encrypt"},{"level":3,"text":"Fail2ban Configuration","id":"fail2ban-configuration"},{"level":1,"text":"/etc/fail2ban/jail.d/yacht.conf","id":"etcfail2banjaildyachtconf"},{"level":1,"text":"/etc/fail2ban/filter.d/yacht.conf","id":"etcfail2banfilterdyachtconf"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":1,"text":"Configure connection in Yacht","id":"configure-connection-in-yacht"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":1,"text":"Create database and user","id":"create-database-and-user"},{"level":1,"text":"Configure connection","id":"configure-connection"},{"level":3,"text":"SQLite Backend (if applicable)","id":"sqlite-backend-if-applicable"},{"level":1,"text":"Create database directory","id":"create-database-directory"},{"level":1,"text":"Initialize database","id":"initialize-database"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Kernel parameters for better performance","id":"kernel-parameters-for-better-performance"},{"level":1,"text":"Network performance tuning","id":"network-performance-tuning"},{"level":1,"text":"Memory tuning","id":"memory-tuning"},{"level":1,"text":"Apply settings","id":"apply-settings"},{"level":1,"text":"Configure system limits","id":"configure-system-limits"},{"level":3,"text":"Application Tuning","id":"application-tuning"},{"level":1,"text":"Configure application-specific performance settings","id":"configure-application-specific-performance-settings"},{"level":1,"text":"Performance configuration","id":"performance-configuration"},{"level":1,"text":"Connection pooling","id":"connection-pooling"},{"level":1,"text":"Cache settings","id":"cache-settings"},{"level":1,"text":"Worker processes","id":"worker-processes"},{"level":1,"text":"Restart to apply settings","id":"restart-to-apply-settings"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":1,"text":"/etc/prometheus/prometheus.yml","id":"etcprometheusprometheusyml"},{"level":3,"text":"Health Check Script","id":"health-check-script"},{"level":1,"text":"/usr/local/bin/yacht-health","id":"usrlocalbinyacht-health"},{"level":1,"text":"Check if service is running","id":"check-if-service-is-running"},{"level":1,"text":"Check if port is listening","id":"check-if-port-is-listening"},{"level":1,"text":"Check response time","id":"check-response-time"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":1,"text":"Configure log rotation","id":"configure-log-rotation"},{"level":1,"text":"Test log rotation","id":"test-log-rotation"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"/usr/local/bin/yacht-backup","id":"usrlocalbinyacht-backup"},{"level":1,"text":"Create backup directory","id":"create-backup-directory"},{"level":1,"text":"Stop service (if needed for consistency)","id":"stop-service-if-needed-for-consistency"},{"level":1,"text":"Backup configuration","id":"backup-configuration"},{"level":1,"text":"Backup database (if applicable)","id":"backup-database-if-applicable"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Clean old backups (keep 30 days)","id":"clean-old-backups-keep-30-days"},{"level":3,"text":"Restore Script","id":"restore-script"},{"level":1,"text":"/usr/local/bin/yacht-restore","id":"usrlocalbinyacht-restore"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore files","id":"restore-files"},{"level":1,"text":"Restore database (if applicable)","id":"restore-database-if-applicable"},{"level":1,"text":"Fix permissions","id":"fix-permissions"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check service status and logs","id":"check-service-status-and-logs"},{"level":1,"text":"Check for port conflicts","id":"check-for-port-conflicts"},{"level":1,"text":"Verify configuration","id":"verify-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Check firewall rules","id":"check-firewall-rules"},{"level":1,"text":"Check SELinux (if enabled)","id":"check-selinux-if-enabled"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":1,"text":"Check for memory leaks","id":"check-for-memory-leaks"},{"level":1,"text":"Analyze logs for errors","id":"analyze-logs-for-errors"},{"level":1,"text":"Test database connection","id":"test-database-connection"},{"level":1,"text":"Check database service","id":"check-database-service"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":1,"text":"Enable debug logging","id":"enable-debug-logging"},{"level":1,"text":"Restart with debug mode","id":"restart-with-debug-mode"},{"level":1,"text":"Watch debug logs","id":"watch-debug-logs"},{"level":3,"text":"Performance Analysis","id":"performance-analysis"},{"level":1,"text":"Profile CPU usage","id":"profile-cpu-usage"},{"level":1,"text":"Analyze network traffic","id":"analyze-network-traffic"},{"level":1,"text":"Monitor disk I/O","id":"monitor-disk-io"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Deployment","id":"docker-deployment"},{"level":1,"text":"docker-compose.yml","id":"docker-composeyml"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":1,"text":"yacht-deployment.yaml","id":"yacht-deploymentyaml"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":1,"text":"yacht-playbook.yml","id":"yacht-playbookyml"},{"level":3,"text":"Terraform Configuration","id":"terraform-configuration"},{"level":1,"text":"yacht.tf","id":"yachttf"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Vacuum database (if PostgreSQL)","id":"vacuum-database-if-postgresql"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":1,"text":"Update security patches","id":"update-security-patches"},{"level":1,"text":"Review security logs","id":"review-security-logs"},{"level":3,"text":"Health Monitoring Checklist","id":"health-monitoring-checklist"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-16T18:14:47.428Z","metadataVersion":"2.0"}]},"__N_SSG":true}