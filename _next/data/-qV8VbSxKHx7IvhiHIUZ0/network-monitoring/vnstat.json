{"pageProps":{"guide":{"name":"vnstat","displayName":"vnstat Installation Guide","slug":"vnstat","description":"vnstat is a free and open-source network monitor. vnStat provides network traffic monitor with statistics","category":"network-monitoring","subcategory":"network-monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["network-monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/network-monitoring/vnstat","documentationUrl":"https://howtomgr.github.io/network-monitoring/vnstat","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vnstat","updatedAt":"2025-09-16T18:01:35Z","createdAt":"2025-09-16T08:38:08Z","readmeRaw":"# vnstat Installation Guide\n\nvnstat is a free and open-source network monitor. vnStat provides network traffic monitor with statistics\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 64MB minimum\n  - Storage: 100MB for data\n  - Network: CLI/daemon\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default vnstat port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install vnstat\nsudo dnf install -y vnstat\n\n# Enable and start service\nsudo systemctl enable --now vnstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nvnstat --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install vnstat\nsudo apt install -y vnstat\n\n# Enable and start service\nsudo systemctl enable --now vnstat\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nvnstat --version\n```\n\n### Arch Linux\n\n```bash\n# Install vnstat\nsudo pacman -S vnstat\n\n# Enable and start service\nsudo systemctl enable --now vnstat\n\n# Verify installation\nvnstat --version\n```\n\n### Alpine Linux\n\n```bash\n# Install vnstat\napk add --no-cache vnstat\n\n# Enable and start service\nrc-update add vnstat default\nrc-service vnstat start\n\n# Verify installation\nvnstat --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install vnstat\nsudo zypper install -y vnstat\n\n# Enable and start service\nsudo systemctl enable --now vnstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nvnstat --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install vnstat\n\n# Start service\nbrew services start vnstat\n\n# Verify installation\nvnstat --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install vnstat\n\n# Enable in rc.conf\necho 'vnstat_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice vnstat start\n\n# Verify installation\nvnstat --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install vnstat\n\n# Or using Scoop\nscoop install vnstat\n\n# Verify installation\nvnstat --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/vnstat\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nvnstat --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable vnstat\n\n# Start service\nsudo systemctl start vnstat\n\n# Stop service\nsudo systemctl stop vnstat\n\n# Restart service\nsudo systemctl restart vnstat\n\n# Check status\nsudo systemctl status vnstat\n\n# View logs\nsudo journalctl -u vnstat -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add vnstat default\n\n# Start service\nrc-service vnstat start\n\n# Stop service\nrc-service vnstat stop\n\n# Restart service\nrc-service vnstat restart\n\n# Check status\nrc-service vnstat status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'vnstat_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice vnstat start\n\n# Stop service\nservice vnstat stop\n\n# Restart service\nservice vnstat restart\n\n# Check status\nservice vnstat status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start vnstat\nbrew services stop vnstat\nbrew services restart vnstat\n\n# Check status\nbrew services list | grep vnstat\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start vnstat\n\n# Stop service\nnet stop vnstat\n\n# Using PowerShell\nStart-Service vnstat\nStop-Service vnstat\nRestart-Service vnstat\n\n# Check status\nGet-Service vnstat\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream vnstat_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name vnstat.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name vnstat.example.com;\n\n    ssl_certificate /etc/ssl/certs/vnstat.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/vnstat.example.com.key;\n\n    location / {\n        proxy_pass http://vnstat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName vnstat.example.com\n    Redirect permanent / https://vnstat.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName vnstat.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/vnstat.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/vnstat.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend vnstat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/vnstat.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend vnstat_backend\n\nbackend vnstat_backend\n    balance roundrobin\n    server vnstat1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R vnstat:vnstat /etc/vnstat\nsudo chmod 750 /etc/vnstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status vnstat\n\n# View logs\nsudo journalctl -u vnstat -f\n\n# Monitor resource usage\ntop -p $(pgrep vnstat)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/vnstat\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/vnstat-backup-$DATE.tar.gz\" /etc/vnstat /var/lib/vnstat\n\necho \"Backup completed: $BACKUP_DIR/vnstat-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop vnstat\n\n# Restore from backup\ntar -xzf /backup/vnstat/vnstat-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start vnstat\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u vnstat -n 100\nsudo tail -f /var/log/vnstat/vnstat.log\n\n# Check configuration\nvnstat --version\n\n# Check permissions\nls -la /etc/vnstat\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep vnstat)\n\n# Check disk I/O\niotop -p $(pgrep vnstat)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  vnstat:\n    image: vnstat:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/vnstat\n      - ./data:/var/lib/vnstat\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update vnstat\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade vnstat\n\n# Arch Linux\nsudo pacman -Syu vnstat\n\n# Alpine Linux\napk update && apk upgrade vnstat\n\n# openSUSE\nsudo zypper update vnstat\n\n# FreeBSD\npkg update && pkg upgrade vnstat\n\n# Always backup before updates\ntar -czf /backup/vnstat-pre-update-$(date +%Y%m%d).tar.gz /etc/vnstat\n\n# Restart after updates\nsudo systemctl restart vnstat\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/vnstat\n\n# Clean old logs\nfind /var/log/vnstat -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/vnstat\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.vnstat.org/\n- GitHub Repository: https://github.com/vnstat/vnstat\n- Community Forum: https://forum.vnstat.org/\n- Best Practices Guide: https://docs.vnstat.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">vnstat is a free and open-source network monitor. vnStat provides network traffic monitor with statistics</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 64MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for data</li>\n<li class=\"mobile-list-item\">Network: CLI/daemon</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default vnstat port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install vnstat\nsudo dnf install -y vnstat\n\n# Enable and start service\nsudo systemctl enable --now vnstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install vnstat\nsudo apt install -y vnstat\n\n# Enable and start service\nsudo systemctl enable --now vnstat\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install vnstat\nsudo pacman -S vnstat\n\n# Enable and start service\nsudo systemctl enable --now vnstat\n\n# Verify installation\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install vnstat\napk add --no-cache vnstat\n\n# Enable and start service\nrc-update add vnstat default\nrc-service vnstat start\n\n# Verify installation\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install vnstat\nsudo zypper install -y vnstat\n\n# Enable and start service\nsudo systemctl enable --now vnstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install vnstat\n\n# Start service\nbrew services start vnstat\n\n# Verify installation\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install vnstat\n\n# Enable in rc.conf\necho &#039;vnstat_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice vnstat start\n\n# Verify installation\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install vnstat\n\n# Or using Scoop\nscoop install vnstat\n\n# Verify installation\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/vnstat\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nvnstat --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable vnstat\n\n# Start service\nsudo systemctl start vnstat\n\n# Stop service\nsudo systemctl stop vnstat\n\n# Restart service\nsudo systemctl restart vnstat\n\n# Check status\nsudo systemctl status vnstat\n\n# View logs\nsudo journalctl -u vnstat -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add vnstat default\n\n# Start service\nrc-service vnstat start\n\n# Stop service\nrc-service vnstat stop\n\n# Restart service\nrc-service vnstat restart\n\n# Check status\nrc-service vnstat status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;vnstat_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice vnstat start\n\n# Stop service\nservice vnstat stop\n\n# Restart service\nservice vnstat restart\n\n# Check status\nservice vnstat status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start vnstat\nbrew services stop vnstat\nbrew services restart vnstat\n\n# Check status\nbrew services list | grep vnstat</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start vnstat\n\n# Stop service\nnet stop vnstat\n\n# Using PowerShell\nStart-Service vnstat\nStop-Service vnstat\nRestart-Service vnstat\n\n# Check status\nGet-Service vnstat</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream vnstat_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name vnstat.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name vnstat.example.com;\n\n    ssl_certificate /etc/ssl/certs/vnstat.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/vnstat.example.com.key;\n\n    location / {\n        proxy_pass http://vnstat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName vnstat.example.com\n    Redirect permanent / https://vnstat.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName vnstat.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/vnstat.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/vnstat.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend vnstat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/vnstat.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend vnstat_backend\n\nbackend vnstat_backend\n    balance roundrobin\n    server vnstat1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R vnstat:vnstat /etc/vnstat\nsudo chmod 750 /etc/vnstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status vnstat\n\n# View logs\nsudo journalctl -u vnstat -f\n\n# Monitor resource usage\ntop -p $(pgrep vnstat)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/vnstat&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/vnstat-backup-$DATE.tar.gz&quot; /etc/vnstat /var/lib/vnstat\n\necho &quot;Backup completed: $BACKUP_DIR/vnstat-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop vnstat\n\n# Restore from backup\ntar -xzf /backup/vnstat/vnstat-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start vnstat</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u vnstat -n 100\nsudo tail -f /var/log/vnstat/vnstat.log\n\n# Check configuration\nvnstat --version\n\n# Check permissions\nls -la /etc/vnstat</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep vnstat)\n\n# Check disk I/O\niotop -p $(pgrep vnstat)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  vnstat:\n    image: vnstat:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/vnstat\n      - ./data:/var/lib/vnstat\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update vnstat\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade vnstat\n\n# Arch Linux\nsudo pacman -Syu vnstat\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade vnstat\n\n# openSUSE\nsudo zypper update vnstat\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade vnstat\n\n# Always backup before updates\ntar -czf /backup/vnstat-pre-update-$(date +%Y%m%d).tar.gz /etc/vnstat\n\n# Restart after updates\nsudo systemctl restart vnstat</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/vnstat\n\n# Clean old logs\nfind /var/log/vnstat -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/vnstat</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.vnstat.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/vnstat/vnstat</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.vnstat.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.vnstat.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1266,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-25T06:16:09.805Z","metadataVersion":"2.0"},"category":{"key":"network-monitoring","name":"Network monitoring","description":"Network monitoring tools and applications","icon":"📊","color":"#ffb86c"},"relatedGuides":[{"name":"bandwidthd","displayName":"bandwidthd Installation Guide","slug":"bandwidthd","description":"bandwidthd is a free and open-source bandwidth monitoring. BandwidthD tracks bandwidth usage and provides graphs","category":"network-monitoring","subcategory":"network-monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["network-monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/network-monitoring/bandwidthd","documentationUrl":"https://howtomgr.github.io/network-monitoring/bandwidthd","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bandwidthd","updatedAt":"2025-09-16T16:59:27Z","createdAt":"2025-09-16T02:20:54Z","readmeRaw":"# bandwidthd Installation Guide\n\nbandwidthd is a free and open-source bandwidth monitoring. BandwidthD tracks bandwidth usage and provides graphs\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 5GB for data\n  - Network: HTTP interface\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default bandwidthd port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bandwidthd\nsudo dnf install -y bandwidthd\n\n# Enable and start service\nsudo systemctl enable --now bandwidthd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbandwidthd --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bandwidthd\nsudo apt install -y bandwidthd\n\n# Enable and start service\nsudo systemctl enable --now bandwidthd\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nbandwidthd --version\n```\n\n### Arch Linux\n\n```bash\n# Install bandwidthd\nsudo pacman -S bandwidthd\n\n# Enable and start service\nsudo systemctl enable --now bandwidthd\n\n# Verify installation\nbandwidthd --version\n```\n\n### Alpine Linux\n\n```bash\n# Install bandwidthd\napk add --no-cache bandwidthd\n\n# Enable and start service\nrc-update add bandwidthd default\nrc-service bandwidthd start\n\n# Verify installation\nbandwidthd --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bandwidthd\nsudo zypper install -y bandwidthd\n\n# Enable and start service\nsudo systemctl enable --now bandwidthd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbandwidthd --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bandwidthd\n\n# Start service\nbrew services start bandwidthd\n\n# Verify installation\nbandwidthd --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bandwidthd\n\n# Enable in rc.conf\necho 'bandwidthd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bandwidthd start\n\n# Verify installation\nbandwidthd --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install bandwidthd\n\n# Or using Scoop\nscoop install bandwidthd\n\n# Verify installation\nbandwidthd --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/bandwidthd\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbandwidthd --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable bandwidthd\n\n# Start service\nsudo systemctl start bandwidthd\n\n# Stop service\nsudo systemctl stop bandwidthd\n\n# Restart service\nsudo systemctl restart bandwidthd\n\n# Check status\nsudo systemctl status bandwidthd\n\n# View logs\nsudo journalctl -u bandwidthd -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add bandwidthd default\n\n# Start service\nrc-service bandwidthd start\n\n# Stop service\nrc-service bandwidthd stop\n\n# Restart service\nrc-service bandwidthd restart\n\n# Check status\nrc-service bandwidthd status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'bandwidthd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bandwidthd start\n\n# Stop service\nservice bandwidthd stop\n\n# Restart service\nservice bandwidthd restart\n\n# Check status\nservice bandwidthd status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bandwidthd\nbrew services stop bandwidthd\nbrew services restart bandwidthd\n\n# Check status\nbrew services list | grep bandwidthd\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start bandwidthd\n\n# Stop service\nnet stop bandwidthd\n\n# Using PowerShell\nStart-Service bandwidthd\nStop-Service bandwidthd\nRestart-Service bandwidthd\n\n# Check status\nGet-Service bandwidthd\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bandwidthd_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name bandwidthd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bandwidthd.example.com;\n\n    ssl_certificate /etc/ssl/certs/bandwidthd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bandwidthd.example.com.key;\n\n    location / {\n        proxy_pass http://bandwidthd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bandwidthd.example.com\n    Redirect permanent / https://bandwidthd.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bandwidthd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bandwidthd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bandwidthd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bandwidthd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bandwidthd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bandwidthd_backend\n\nbackend bandwidthd_backend\n    balance roundrobin\n    server bandwidthd1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bandwidthd:bandwidthd /etc/bandwidthd\nsudo chmod 750 /etc/bandwidthd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status bandwidthd\n\n# View logs\nsudo journalctl -u bandwidthd -f\n\n# Monitor resource usage\ntop -p $(pgrep bandwidthd)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/bandwidthd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/bandwidthd-backup-$DATE.tar.gz\" /etc/bandwidthd /var/lib/bandwidthd\n\necho \"Backup completed: $BACKUP_DIR/bandwidthd-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop bandwidthd\n\n# Restore from backup\ntar -xzf /backup/bandwidthd/bandwidthd-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bandwidthd\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u bandwidthd -n 100\nsudo tail -f /var/log/bandwidthd/bandwidthd.log\n\n# Check configuration\nbandwidthd --version\n\n# Check permissions\nls -la /etc/bandwidthd\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep bandwidthd)\n\n# Check disk I/O\niotop -p $(pgrep bandwidthd)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  bandwidthd:\n    image: bandwidthd:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/bandwidthd\n      - ./data:/var/lib/bandwidthd\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bandwidthd\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bandwidthd\n\n# Arch Linux\nsudo pacman -Syu bandwidthd\n\n# Alpine Linux\napk update && apk upgrade bandwidthd\n\n# openSUSE\nsudo zypper update bandwidthd\n\n# FreeBSD\npkg update && pkg upgrade bandwidthd\n\n# Always backup before updates\ntar -czf /backup/bandwidthd-pre-update-$(date +%Y%m%d).tar.gz /etc/bandwidthd\n\n# Restart after updates\nsudo systemctl restart bandwidthd\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/bandwidthd\n\n# Clean old logs\nfind /var/log/bandwidthd -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bandwidthd\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bandwidthd.org/\n- GitHub Repository: https://github.com/bandwidthd/bandwidthd\n- Community Forum: https://forum.bandwidthd.org/\n- Best Practices Guide: https://docs.bandwidthd.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">bandwidthd is a free and open-source bandwidth monitoring. BandwidthD tracks bandwidth usage and provides graphs</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP interface</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default bandwidthd port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bandwidthd\nsudo dnf install -y bandwidthd\n\n# Enable and start service\nsudo systemctl enable --now bandwidthd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bandwidthd\nsudo apt install -y bandwidthd\n\n# Enable and start service\nsudo systemctl enable --now bandwidthd\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bandwidthd\nsudo pacman -S bandwidthd\n\n# Enable and start service\nsudo systemctl enable --now bandwidthd\n\n# Verify installation\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bandwidthd\napk add --no-cache bandwidthd\n\n# Enable and start service\nrc-update add bandwidthd default\nrc-service bandwidthd start\n\n# Verify installation\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bandwidthd\nsudo zypper install -y bandwidthd\n\n# Enable and start service\nsudo systemctl enable --now bandwidthd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bandwidthd\n\n# Start service\nbrew services start bandwidthd\n\n# Verify installation\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bandwidthd\n\n# Enable in rc.conf\necho &#039;bandwidthd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bandwidthd start\n\n# Verify installation\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install bandwidthd\n\n# Or using Scoop\nscoop install bandwidthd\n\n# Verify installation\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/bandwidthd\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbandwidthd --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable bandwidthd\n\n# Start service\nsudo systemctl start bandwidthd\n\n# Stop service\nsudo systemctl stop bandwidthd\n\n# Restart service\nsudo systemctl restart bandwidthd\n\n# Check status\nsudo systemctl status bandwidthd\n\n# View logs\nsudo journalctl -u bandwidthd -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add bandwidthd default\n\n# Start service\nrc-service bandwidthd start\n\n# Stop service\nrc-service bandwidthd stop\n\n# Restart service\nrc-service bandwidthd restart\n\n# Check status\nrc-service bandwidthd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;bandwidthd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bandwidthd start\n\n# Stop service\nservice bandwidthd stop\n\n# Restart service\nservice bandwidthd restart\n\n# Check status\nservice bandwidthd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bandwidthd\nbrew services stop bandwidthd\nbrew services restart bandwidthd\n\n# Check status\nbrew services list | grep bandwidthd</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start bandwidthd\n\n# Stop service\nnet stop bandwidthd\n\n# Using PowerShell\nStart-Service bandwidthd\nStop-Service bandwidthd\nRestart-Service bandwidthd\n\n# Check status\nGet-Service bandwidthd</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bandwidthd_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name bandwidthd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bandwidthd.example.com;\n\n    ssl_certificate /etc/ssl/certs/bandwidthd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bandwidthd.example.com.key;\n\n    location / {\n        proxy_pass http://bandwidthd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bandwidthd.example.com\n    Redirect permanent / https://bandwidthd.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bandwidthd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bandwidthd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bandwidthd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bandwidthd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bandwidthd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bandwidthd_backend\n\nbackend bandwidthd_backend\n    balance roundrobin\n    server bandwidthd1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bandwidthd:bandwidthd /etc/bandwidthd\nsudo chmod 750 /etc/bandwidthd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status bandwidthd\n\n# View logs\nsudo journalctl -u bandwidthd -f\n\n# Monitor resource usage\ntop -p $(pgrep bandwidthd)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/bandwidthd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/bandwidthd-backup-$DATE.tar.gz&quot; /etc/bandwidthd /var/lib/bandwidthd\n\necho &quot;Backup completed: $BACKUP_DIR/bandwidthd-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop bandwidthd\n\n# Restore from backup\ntar -xzf /backup/bandwidthd/bandwidthd-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bandwidthd</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u bandwidthd -n 100\nsudo tail -f /var/log/bandwidthd/bandwidthd.log\n\n# Check configuration\nbandwidthd --version\n\n# Check permissions\nls -la /etc/bandwidthd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep bandwidthd)\n\n# Check disk I/O\niotop -p $(pgrep bandwidthd)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bandwidthd:\n    image: bandwidthd:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/bandwidthd\n      - ./data:/var/lib/bandwidthd\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bandwidthd\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bandwidthd\n\n# Arch Linux\nsudo pacman -Syu bandwidthd\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bandwidthd\n\n# openSUSE\nsudo zypper update bandwidthd\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bandwidthd\n\n# Always backup before updates\ntar -czf /backup/bandwidthd-pre-update-$(date +%Y%m%d).tar.gz /etc/bandwidthd\n\n# Restart after updates\nsudo systemctl restart bandwidthd</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/bandwidthd\n\n# Clean old logs\nfind /var/log/bandwidthd -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bandwidthd</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bandwidthd.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bandwidthd/bandwidthd</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bandwidthd.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.bandwidthd.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1267,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-25T06:21:49.603Z","metadataVersion":"2.0"},{"name":"darkstat","displayName":"darkstat Installation Guide","slug":"darkstat","description":"darkstat is a free and open-source network statistics. darkstat captures network traffic and provides statistics","category":"network-monitoring","subcategory":"network-monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,667],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["network-monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/network-monitoring/darkstat","documentationUrl":"https://howtomgr.github.io/network-monitoring/darkstat","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/darkstat","updatedAt":"2025-09-16T17:06:54Z","createdAt":"2025-09-16T02:30:23Z","readmeRaw":"# darkstat Installation Guide\n\ndarkstat is a free and open-source network statistics. darkstat captures network traffic and provides statistics\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP interface\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 667 (default darkstat port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install darkstat\nsudo dnf install -y darkstat\n\n# Enable and start service\nsudo systemctl enable --now darkstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=667/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndarkstat --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install darkstat\nsudo apt install -y darkstat\n\n# Enable and start service\nsudo systemctl enable --now darkstat\n\n# Configure firewall\nsudo ufw allow 667\n\n# Verify installation\ndarkstat --version\n```\n\n### Arch Linux\n\n```bash\n# Install darkstat\nsudo pacman -S darkstat\n\n# Enable and start service\nsudo systemctl enable --now darkstat\n\n# Verify installation\ndarkstat --version\n```\n\n### Alpine Linux\n\n```bash\n# Install darkstat\napk add --no-cache darkstat\n\n# Enable and start service\nrc-update add darkstat default\nrc-service darkstat start\n\n# Verify installation\ndarkstat --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install darkstat\nsudo zypper install -y darkstat\n\n# Enable and start service\nsudo systemctl enable --now darkstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=667/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndarkstat --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install darkstat\n\n# Start service\nbrew services start darkstat\n\n# Verify installation\ndarkstat --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install darkstat\n\n# Enable in rc.conf\necho 'darkstat_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice darkstat start\n\n# Verify installation\ndarkstat --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install darkstat\n\n# Or using Scoop\nscoop install darkstat\n\n# Verify installation\ndarkstat --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/darkstat\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndarkstat --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable darkstat\n\n# Start service\nsudo systemctl start darkstat\n\n# Stop service\nsudo systemctl stop darkstat\n\n# Restart service\nsudo systemctl restart darkstat\n\n# Check status\nsudo systemctl status darkstat\n\n# View logs\nsudo journalctl -u darkstat -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add darkstat default\n\n# Start service\nrc-service darkstat start\n\n# Stop service\nrc-service darkstat stop\n\n# Restart service\nrc-service darkstat restart\n\n# Check status\nrc-service darkstat status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'darkstat_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice darkstat start\n\n# Stop service\nservice darkstat stop\n\n# Restart service\nservice darkstat restart\n\n# Check status\nservice darkstat status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start darkstat\nbrew services stop darkstat\nbrew services restart darkstat\n\n# Check status\nbrew services list | grep darkstat\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start darkstat\n\n# Stop service\nnet stop darkstat\n\n# Using PowerShell\nStart-Service darkstat\nStop-Service darkstat\nRestart-Service darkstat\n\n# Check status\nGet-Service darkstat\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream darkstat_backend {\n    server 127.0.0.1:667;\n}\n\nserver {\n    listen 80;\n    server_name darkstat.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name darkstat.example.com;\n\n    ssl_certificate /etc/ssl/certs/darkstat.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/darkstat.example.com.key;\n\n    location / {\n        proxy_pass http://darkstat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName darkstat.example.com\n    Redirect permanent / https://darkstat.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName darkstat.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/darkstat.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/darkstat.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:667/\n    ProxyPassReverse / http://127.0.0.1:667/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend darkstat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/darkstat.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend darkstat_backend\n\nbackend darkstat_backend\n    balance roundrobin\n    server darkstat1 127.0.0.1:667 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R darkstat:darkstat /etc/darkstat\nsudo chmod 750 /etc/darkstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=667/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status darkstat\n\n# View logs\nsudo journalctl -u darkstat -f\n\n# Monitor resource usage\ntop -p $(pgrep darkstat)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/darkstat\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/darkstat-backup-$DATE.tar.gz\" /etc/darkstat /var/lib/darkstat\n\necho \"Backup completed: $BACKUP_DIR/darkstat-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop darkstat\n\n# Restore from backup\ntar -xzf /backup/darkstat/darkstat-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start darkstat\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u darkstat -n 100\nsudo tail -f /var/log/darkstat/darkstat.log\n\n# Check configuration\ndarkstat --version\n\n# Check permissions\nls -la /etc/darkstat\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 667\n\n# Test connectivity\ntelnet localhost 667\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep darkstat)\n\n# Check disk I/O\niotop -p $(pgrep darkstat)\n\n# Check connections\nss -an | grep 667\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  darkstat:\n    image: darkstat:latest\n    ports:\n      - \"667:667\"\n    volumes:\n      - ./config:/etc/darkstat\n      - ./data:/var/lib/darkstat\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update darkstat\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade darkstat\n\n# Arch Linux\nsudo pacman -Syu darkstat\n\n# Alpine Linux\napk update && apk upgrade darkstat\n\n# openSUSE\nsudo zypper update darkstat\n\n# FreeBSD\npkg update && pkg upgrade darkstat\n\n# Always backup before updates\ntar -czf /backup/darkstat-pre-update-$(date +%Y%m%d).tar.gz /etc/darkstat\n\n# Restart after updates\nsudo systemctl restart darkstat\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/darkstat\n\n# Clean old logs\nfind /var/log/darkstat -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/darkstat\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.darkstat.org/\n- GitHub Repository: https://github.com/darkstat/darkstat\n- Community Forum: https://forum.darkstat.org/\n- Best Practices Guide: https://docs.darkstat.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">darkstat is a free and open-source network statistics. darkstat captures network traffic and provides statistics</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP interface</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 667 (default darkstat port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install darkstat\nsudo dnf install -y darkstat\n\n# Enable and start service\nsudo systemctl enable --now darkstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=667/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install darkstat\nsudo apt install -y darkstat\n\n# Enable and start service\nsudo systemctl enable --now darkstat\n\n# Configure firewall\nsudo ufw allow 667\n\n# Verify installation\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install darkstat\nsudo pacman -S darkstat\n\n# Enable and start service\nsudo systemctl enable --now darkstat\n\n# Verify installation\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install darkstat\napk add --no-cache darkstat\n\n# Enable and start service\nrc-update add darkstat default\nrc-service darkstat start\n\n# Verify installation\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install darkstat\nsudo zypper install -y darkstat\n\n# Enable and start service\nsudo systemctl enable --now darkstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=667/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install darkstat\n\n# Start service\nbrew services start darkstat\n\n# Verify installation\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install darkstat\n\n# Enable in rc.conf\necho &#039;darkstat_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice darkstat start\n\n# Verify installation\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install darkstat\n\n# Or using Scoop\nscoop install darkstat\n\n# Verify installation\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/darkstat\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndarkstat --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable darkstat\n\n# Start service\nsudo systemctl start darkstat\n\n# Stop service\nsudo systemctl stop darkstat\n\n# Restart service\nsudo systemctl restart darkstat\n\n# Check status\nsudo systemctl status darkstat\n\n# View logs\nsudo journalctl -u darkstat -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add darkstat default\n\n# Start service\nrc-service darkstat start\n\n# Stop service\nrc-service darkstat stop\n\n# Restart service\nrc-service darkstat restart\n\n# Check status\nrc-service darkstat status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;darkstat_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice darkstat start\n\n# Stop service\nservice darkstat stop\n\n# Restart service\nservice darkstat restart\n\n# Check status\nservice darkstat status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start darkstat\nbrew services stop darkstat\nbrew services restart darkstat\n\n# Check status\nbrew services list | grep darkstat</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start darkstat\n\n# Stop service\nnet stop darkstat\n\n# Using PowerShell\nStart-Service darkstat\nStop-Service darkstat\nRestart-Service darkstat\n\n# Check status\nGet-Service darkstat</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream darkstat_backend {\n    server 127.0.0.1:667;\n}\n\nserver {\n    listen 80;\n    server_name darkstat.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name darkstat.example.com;\n\n    ssl_certificate /etc/ssl/certs/darkstat.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/darkstat.example.com.key;\n\n    location / {\n        proxy_pass http://darkstat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName darkstat.example.com\n    Redirect permanent / https://darkstat.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName darkstat.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/darkstat.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/darkstat.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:667/\n    ProxyPassReverse / http://127.0.0.1:667/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend darkstat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/darkstat.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend darkstat_backend\n\nbackend darkstat_backend\n    balance roundrobin\n    server darkstat1 127.0.0.1:667 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R darkstat:darkstat /etc/darkstat\nsudo chmod 750 /etc/darkstat\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=667/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status darkstat\n\n# View logs\nsudo journalctl -u darkstat -f\n\n# Monitor resource usage\ntop -p $(pgrep darkstat)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/darkstat&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/darkstat-backup-$DATE.tar.gz&quot; /etc/darkstat /var/lib/darkstat\n\necho &quot;Backup completed: $BACKUP_DIR/darkstat-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop darkstat\n\n# Restore from backup\ntar -xzf /backup/darkstat/darkstat-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start darkstat</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u darkstat -n 100\nsudo tail -f /var/log/darkstat/darkstat.log\n\n# Check configuration\ndarkstat --version\n\n# Check permissions\nls -la /etc/darkstat</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 667\n\n# Test connectivity\ntelnet localhost 667\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep darkstat)\n\n# Check disk I/O\niotop -p $(pgrep darkstat)\n\n# Check connections\nss -an | grep 667</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  darkstat:\n    image: darkstat:latest\n    ports:\n      - &quot;667:667&quot;\n    volumes:\n      - ./config:/etc/darkstat\n      - ./data:/var/lib/darkstat\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update darkstat\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade darkstat\n\n# Arch Linux\nsudo pacman -Syu darkstat\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade darkstat\n\n# openSUSE\nsudo zypper update darkstat\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade darkstat\n\n# Always backup before updates\ntar -czf /backup/darkstat-pre-update-$(date +%Y%m%d).tar.gz /etc/darkstat\n\n# Restart after updates\nsudo systemctl restart darkstat</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/darkstat\n\n# Clean old logs\nfind /var/log/darkstat -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/darkstat</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.darkstat.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/darkstat/darkstat</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.darkstat.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.darkstat.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1267,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-25T06:21:09.815Z","metadataVersion":"2.0"},{"name":"iftop","displayName":"iftop Installation Guide","slug":"iftop","description":"iftop is a free and open-source bandwidth usage. iftop displays bandwidth usage on interface by host","category":"network-monitoring","subcategory":"network-monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["network-monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/network-monitoring/iftop","documentationUrl":"https://howtomgr.github.io/network-monitoring/iftop","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/iftop","updatedAt":"2025-09-16T17:20:07Z","createdAt":"2025-09-16T03:22:37Z","readmeRaw":"# iftop Installation Guide\n\niftop is a free and open-source bandwidth usage. iftop displays bandwidth usage on interface by host\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 100MB for data\n  - Network: CLI tool\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default iftop port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install iftop\nsudo dnf install -y iftop\n\n# Enable and start service\nsudo systemctl enable --now iftop\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\niftop --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install iftop\nsudo apt install -y iftop\n\n# Enable and start service\nsudo systemctl enable --now iftop\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\niftop --version\n```\n\n### Arch Linux\n\n```bash\n# Install iftop\nsudo pacman -S iftop\n\n# Enable and start service\nsudo systemctl enable --now iftop\n\n# Verify installation\niftop --version\n```\n\n### Alpine Linux\n\n```bash\n# Install iftop\napk add --no-cache iftop\n\n# Enable and start service\nrc-update add iftop default\nrc-service iftop start\n\n# Verify installation\niftop --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install iftop\nsudo zypper install -y iftop\n\n# Enable and start service\nsudo systemctl enable --now iftop\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\niftop --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install iftop\n\n# Start service\nbrew services start iftop\n\n# Verify installation\niftop --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install iftop\n\n# Enable in rc.conf\necho 'iftop_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice iftop start\n\n# Verify installation\niftop --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install iftop\n\n# Or using Scoop\nscoop install iftop\n\n# Verify installation\niftop --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/iftop\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\niftop --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable iftop\n\n# Start service\nsudo systemctl start iftop\n\n# Stop service\nsudo systemctl stop iftop\n\n# Restart service\nsudo systemctl restart iftop\n\n# Check status\nsudo systemctl status iftop\n\n# View logs\nsudo journalctl -u iftop -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add iftop default\n\n# Start service\nrc-service iftop start\n\n# Stop service\nrc-service iftop stop\n\n# Restart service\nrc-service iftop restart\n\n# Check status\nrc-service iftop status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'iftop_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice iftop start\n\n# Stop service\nservice iftop stop\n\n# Restart service\nservice iftop restart\n\n# Check status\nservice iftop status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start iftop\nbrew services stop iftop\nbrew services restart iftop\n\n# Check status\nbrew services list | grep iftop\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start iftop\n\n# Stop service\nnet stop iftop\n\n# Using PowerShell\nStart-Service iftop\nStop-Service iftop\nRestart-Service iftop\n\n# Check status\nGet-Service iftop\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream iftop_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name iftop.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name iftop.example.com;\n\n    ssl_certificate /etc/ssl/certs/iftop.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/iftop.example.com.key;\n\n    location / {\n        proxy_pass http://iftop_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName iftop.example.com\n    Redirect permanent / https://iftop.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName iftop.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/iftop.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/iftop.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend iftop_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/iftop.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend iftop_backend\n\nbackend iftop_backend\n    balance roundrobin\n    server iftop1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R iftop:iftop /etc/iftop\nsudo chmod 750 /etc/iftop\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status iftop\n\n# View logs\nsudo journalctl -u iftop -f\n\n# Monitor resource usage\ntop -p $(pgrep iftop)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/iftop\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/iftop-backup-$DATE.tar.gz\" /etc/iftop /var/lib/iftop\n\necho \"Backup completed: $BACKUP_DIR/iftop-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop iftop\n\n# Restore from backup\ntar -xzf /backup/iftop/iftop-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start iftop\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u iftop -n 100\nsudo tail -f /var/log/iftop/iftop.log\n\n# Check configuration\niftop --version\n\n# Check permissions\nls -la /etc/iftop\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep iftop)\n\n# Check disk I/O\niotop -p $(pgrep iftop)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  iftop:\n    image: iftop:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/iftop\n      - ./data:/var/lib/iftop\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update iftop\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade iftop\n\n# Arch Linux\nsudo pacman -Syu iftop\n\n# Alpine Linux\napk update && apk upgrade iftop\n\n# openSUSE\nsudo zypper update iftop\n\n# FreeBSD\npkg update && pkg upgrade iftop\n\n# Always backup before updates\ntar -czf /backup/iftop-pre-update-$(date +%Y%m%d).tar.gz /etc/iftop\n\n# Restart after updates\nsudo systemctl restart iftop\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/iftop\n\n# Clean old logs\nfind /var/log/iftop -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/iftop\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.iftop.org/\n- GitHub Repository: https://github.com/iftop/iftop\n- Community Forum: https://forum.iftop.org/\n- Best Practices Guide: https://docs.iftop.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">iftop is a free and open-source bandwidth usage. iftop displays bandwidth usage on interface by host</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for data</li>\n<li class=\"mobile-list-item\">Network: CLI tool</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default iftop port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install iftop\nsudo dnf install -y iftop\n\n# Enable and start service\nsudo systemctl enable --now iftop\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\niftop --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install iftop\nsudo apt install -y iftop\n\n# Enable and start service\nsudo systemctl enable --now iftop\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\niftop --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install iftop\nsudo pacman -S iftop\n\n# Enable and start service\nsudo systemctl enable --now iftop\n\n# Verify installation\niftop --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install iftop\napk add --no-cache iftop\n\n# Enable and start service\nrc-update add iftop default\nrc-service iftop start\n\n# Verify installation\niftop --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install iftop\nsudo zypper install -y iftop\n\n# Enable and start service\nsudo systemctl enable --now iftop\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\niftop --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install iftop\n\n# Start service\nbrew services start iftop\n\n# Verify installation\niftop --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install iftop\n\n# Enable in rc.conf\necho &#039;iftop_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice iftop start\n\n# Verify installation\niftop --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install iftop\n\n# Or using Scoop\nscoop install iftop\n\n# Verify installation\niftop --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/iftop\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\niftop --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable iftop\n\n# Start service\nsudo systemctl start iftop\n\n# Stop service\nsudo systemctl stop iftop\n\n# Restart service\nsudo systemctl restart iftop\n\n# Check status\nsudo systemctl status iftop\n\n# View logs\nsudo journalctl -u iftop -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add iftop default\n\n# Start service\nrc-service iftop start\n\n# Stop service\nrc-service iftop stop\n\n# Restart service\nrc-service iftop restart\n\n# Check status\nrc-service iftop status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;iftop_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice iftop start\n\n# Stop service\nservice iftop stop\n\n# Restart service\nservice iftop restart\n\n# Check status\nservice iftop status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start iftop\nbrew services stop iftop\nbrew services restart iftop\n\n# Check status\nbrew services list | grep iftop</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start iftop\n\n# Stop service\nnet stop iftop\n\n# Using PowerShell\nStart-Service iftop\nStop-Service iftop\nRestart-Service iftop\n\n# Check status\nGet-Service iftop</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream iftop_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name iftop.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name iftop.example.com;\n\n    ssl_certificate /etc/ssl/certs/iftop.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/iftop.example.com.key;\n\n    location / {\n        proxy_pass http://iftop_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName iftop.example.com\n    Redirect permanent / https://iftop.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName iftop.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/iftop.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/iftop.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend iftop_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/iftop.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend iftop_backend\n\nbackend iftop_backend\n    balance roundrobin\n    server iftop1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R iftop:iftop /etc/iftop\nsudo chmod 750 /etc/iftop\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status iftop\n\n# View logs\nsudo journalctl -u iftop -f\n\n# Monitor resource usage\ntop -p $(pgrep iftop)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/iftop&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/iftop-backup-$DATE.tar.gz&quot; /etc/iftop /var/lib/iftop\n\necho &quot;Backup completed: $BACKUP_DIR/iftop-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop iftop\n\n# Restore from backup\ntar -xzf /backup/iftop/iftop-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start iftop</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u iftop -n 100\nsudo tail -f /var/log/iftop/iftop.log\n\n# Check configuration\niftop --version\n\n# Check permissions\nls -la /etc/iftop</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep iftop)\n\n# Check disk I/O\niotop -p $(pgrep iftop)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  iftop:\n    image: iftop:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/iftop\n      - ./data:/var/lib/iftop\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update iftop\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade iftop\n\n# Arch Linux\nsudo pacman -Syu iftop\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade iftop\n\n# openSUSE\nsudo zypper update iftop\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade iftop\n\n# Always backup before updates\ntar -czf /backup/iftop-pre-update-$(date +%Y%m%d).tar.gz /etc/iftop\n\n# Restart after updates\nsudo systemctl restart iftop</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/iftop\n\n# Clean old logs\nfind /var/log/iftop -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/iftop</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.iftop.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/iftop/iftop</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.iftop.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.iftop.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1268,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-25T06:19:58.812Z","metadataVersion":"2.0"}]},"__N_SSG":true}