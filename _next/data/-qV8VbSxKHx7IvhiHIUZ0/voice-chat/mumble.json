{"pageProps":{"guide":{"name":"mumble","displayName":"Mumble Installation Guide","slug":"mumble","description":"Mumble is a free and open-source Voice Server. Low-latency, high quality voice chat","category":"voice-chat","subcategory":"voice-chat","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048,64738],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["voice-chat","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/voice-chat/mumble","documentationUrl":"https://howtomgr.github.io/voice-chat/mumble","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mumble","updatedAt":"2025-09-16T17:33:22Z","createdAt":"2025-09-16T03:47:13Z","readmeRaw":"# Mumble Installation Guide\n\nMumble is a free and open-source Voice Server. Low-latency, high quality voice chat\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 64738 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 64738 (default mumble port)\n- **Dependencies**:\n  - libqt5core5a, libprotobuf17\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mumble\nsudo dnf install -y mumble libqt5core5a, libprotobuf17\n\n# Enable and start service\nsudo systemctl enable --now mumble-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mumble\nsudo firewall-cmd --reload\n\n# Verify installation\nmumble --version || systemctl status mumble-server\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install mumble\nsudo apt install -y mumble libqt5core5a, libprotobuf17\n\n# Enable and start service\nsudo systemctl enable --now mumble-server\n\n# Configure firewall\nsudo ufw allow 64738\n\n# Verify installation\nmumble --version || systemctl status mumble-server\n```\n\n### Arch Linux\n\n```bash\n# Install mumble\nsudo pacman -S mumble\n\n# Enable and start service\nsudo systemctl enable --now mumble-server\n\n# Verify installation\nmumble --version || systemctl status mumble-server\n```\n\n### Alpine Linux\n\n```bash\n# Install mumble\napk add --no-cache mumble\n\n# Enable and start service\nrc-update add mumble-server default\nrc-service mumble-server start\n\n# Verify installation\nmumble --version || rc-service mumble-server status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install mumble\nsudo zypper install -y mumble libqt5core5a, libprotobuf17\n\n# Enable and start service\nsudo systemctl enable --now mumble-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mumble\nsudo firewall-cmd --reload\n\n# Verify installation\nmumble --version || systemctl status mumble-server\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install mumble\n\n# Start service\nbrew services start mumble\n\n# Verify installation\nmumble --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install mumble\n\n# Enable in rc.conf\necho 'mumble-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mumble-server start\n\n# Verify installation\nmumble --version || service mumble-server status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install mumble\n\n# Or using Scoop\nscoop install mumble\n\n# Verify installation\nmumble --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/mumble-server\n\n# Set up basic configuration\nsudo tee /etc/mumble-server/mumble.conf << 'EOF'\n# Mumble Configuration\nbandwidth=72000\nEOF\n\n# Test configuration\nsudo mumble -t || sudo mumble-server configtest\n\n# Reload service\nsudo systemctl reload mumble-server\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R mumble:mumble /etc/mumble-server\nsudo chmod 750 /etc/mumble-server\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable mumble-server\n\n# Start service\nsudo systemctl start mumble-server\n\n# Stop service\nsudo systemctl stop mumble-server\n\n# Restart service\nsudo systemctl restart mumble-server\n\n# Reload configuration\nsudo systemctl reload mumble-server\n\n# Check status\nsudo systemctl status mumble-server\n\n# View logs\nsudo journalctl -u mumble-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add mumble-server default\n\n# Start service\nrc-service mumble-server start\n\n# Stop service\nrc-service mumble-server stop\n\n# Restart service\nrc-service mumble-server restart\n\n# Check status\nrc-service mumble-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mumble-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mumble-server start\n\n# Stop service\nservice mumble-server stop\n\n# Restart service\nservice mumble-server restart\n\n# Check status\nservice mumble-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mumble\nbrew services stop mumble\nbrew services restart mumble\n\n# Check status\nbrew services list | grep mumble\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start mumble-server\n\n# Stop service\nnet stop mumble-server\n\n# Using PowerShell\nStart-Service mumble-server\nStop-Service mumble-server\nRestart-Service mumble-server\n\n# Check status\nGet-Service mumble-server\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/mumble-server/mumble.conf << 'EOF'\nbandwidth=72000\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart mumble-server\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream mumble_backend {\n    server 127.0.0.1:64738;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name mumble.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mumble.example.com;\n\n    ssl_certificate /etc/ssl/certs/mumble.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mumble.example.com.key;\n\n    location / {\n        proxy_pass http://mumble_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName mumble.example.com\n    Redirect permanent / https://mumble.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName mumble.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mumble.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mumble.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:64738/\n    ProxyPassReverse / http://127.0.0.1:64738/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:64738/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend mumble_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mumble.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mumble_backend\n\nbackend mumble_backend\n    balance roundrobin\n    option httpchk GET /health\n    server mumble1 127.0.0.1:64738 check\n    server mumble2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R mumble:mumble /etc/mumble-server\nsudo chmod 750 /etc/mumble-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mumble\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/mumble.conf << 'EOF'\n[mumble]\nenabled = true\nport = 64738\nfilter = mumble\nlogpath = /var/log/mumble-server/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/mumble.key \\\n    -out /etc/ssl/certs/mumble.crt\n\n# Configure SSL in mumble\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE mumble_db;\nCREATE USER mumble_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE mumble_db TO mumble_user;\nEOF\n\n# Configure mumble to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE mumble_db;\nCREATE USER 'mumble_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON mumble_db.* TO 'mumble_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Mumble specific tuning\nbandwidth=72000\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nmumble soft nofile 65535\nmumble hard nofile 65535\nmumble soft nproc 32768\nmumble hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'mumble'\n    static_configs:\n      - targets: ['localhost:64738']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet mumble-server; then\n    echo \"Mumble is running\"\n    exit 0\nelse\n    echo \"Mumble is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/mumble << 'EOF'\n/var/log/mumble-server/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 mumble mumble\n    postrotate\n        systemctl reload mumble-server > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Mumble backup script\nBACKUP_DIR=\"/backup/mumble\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop mumble-server\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/mumble-config-$DATE.tar.gz\" /etc/mumble-server\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/mumble-data-$DATE.tar.gz\" /var/lib/mumble\n\n# Start service\nsystemctl start mumble-server\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop mumble-server\n\n# Restore configuration\nsudo tar -xzf /backup/mumble/mumble-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/mumble/mumble-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R mumble:mumble /etc/mumble-server\nsudo chown -R mumble:mumble /var/lib/mumble\n\n# Start service\nsudo systemctl start mumble-server\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u mumble-server -n 100\nsudo tail -f /var/log/mumble-server/*.log\n\n# Check configuration\nsudo mumble -t || sudo mumble-server configtest\n\n# Check permissions\nls -la /etc/mumble-server\nls -la /var/lib/mumble\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 64738\nsudo netstat -tlnp | grep 64738\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 64738\nnc -zv localhost 64738\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep murmurd)\nhtop -p $(pgrep murmurd)\n\n# Check connections\nss -ant | grep :64738 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep murmurd)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo mumble -d\n# or\nsudo mumble-server debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  mumble:\n    image: mumble:latest\n    container_name: mumble\n    ports:\n      - \"64738:64738\"\n    volumes:\n      - ./config:/etc/mumble-server\n      - ./data:/var/lib/mumble\n    environment:\n      - mumble_CONFIG=/etc/mumble-server/mumble.conf\n    restart: unless-stopped\n    networks:\n      - mumble_net\n\nnetworks:\n  mumble_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mumble\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mumble\n  template:\n    metadata:\n      labels:\n        app: mumble\n    spec:\n      containers:\n      - name: mumble\n        image: mumble:latest\n        ports:\n        - containerPort: 64738\n        volumeMounts:\n        - name: config\n          mountPath: /etc/mumble-server\n      volumes:\n      - name: config\n        configMap:\n          name: mumble-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mumble\nspec:\n  selector:\n    app: mumble\n  ports:\n  - port: 64738\n    targetPort: 64738\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Mumble\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install mumble\n      package:\n        name: mumble\n        state: present\n    \n    - name: Configure mumble\n      template:\n        src: mumble.conf.j2\n        dest: /etc/mumble-server/mumble.conf\n        owner: mumble\n        group: mumble\n        mode: '0640'\n      notify: restart mumble\n    \n    - name: Start and enable mumble\n      systemd:\n        name: mumble-server\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart mumble\n      systemd:\n        name: mumble-server\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mumble\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade mumble\n\n# Arch Linux\nsudo pacman -Syu mumble\n\n# Alpine Linux\napk update && apk upgrade mumble\n\n# openSUSE\nsudo zypper update mumble\n\n# FreeBSD\npkg update && pkg upgrade mumble\n\n# Always backup before updates\ntar -czf /backup/mumble-pre-update-$(date +%Y%m%d).tar.gz /etc/mumble-server\n\n# Restart after updates\nsudo systemctl restart mumble-server\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/mumble-server -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo mumble --verify || sudo mumble-server check\n\n# Update databases (if applicable)\nsudo mumble-update-db\n\n# Optimize performance\nsudo mumble-optimize\n\n# Check for security updates\nsudo mumble --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.mumble.org/\n- GitHub Repository: https://github.com/mumble/mumble\n- Community Forum: https://forum.mumble.org/\n- Wiki: https://wiki.mumble.org/\n- Comparison vs TeamSpeak, Discord, Ventrilo, Element: https://docs.mumble.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Mumble is a free and open-source Voice Server. Low-latency, high quality voice chat</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 64738 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 64738 (default mumble port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">libqt5core5a, libprotobuf17</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mumble\nsudo dnf install -y mumble libqt5core5a, libprotobuf17\n\n# Enable and start service\nsudo systemctl enable --now mumble-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mumble\nsudo firewall-cmd --reload\n\n# Verify installation\nmumble --version || systemctl status mumble-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install mumble\nsudo apt install -y mumble libqt5core5a, libprotobuf17\n\n# Enable and start service\nsudo systemctl enable --now mumble-server\n\n# Configure firewall\nsudo ufw allow 64738\n\n# Verify installation\nmumble --version || systemctl status mumble-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mumble\nsudo pacman -S mumble\n\n# Enable and start service\nsudo systemctl enable --now mumble-server\n\n# Verify installation\nmumble --version || systemctl status mumble-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mumble\napk add --no-cache mumble\n\n# Enable and start service\nrc-update add mumble-server default\nrc-service mumble-server start\n\n# Verify installation\nmumble --version || rc-service mumble-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mumble\nsudo zypper install -y mumble libqt5core5a, libprotobuf17\n\n# Enable and start service\nsudo systemctl enable --now mumble-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mumble\nsudo firewall-cmd --reload\n\n# Verify installation\nmumble --version || systemctl status mumble-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install mumble\n\n# Start service\nbrew services start mumble\n\n# Verify installation\nmumble --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install mumble\n\n# Enable in rc.conf\necho &#039;mumble-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mumble-server start\n\n# Verify installation\nmumble --version || service mumble-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install mumble\n\n# Or using Scoop\nscoop install mumble\n\n# Verify installation\nmumble --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/mumble-server\n\n# Set up basic configuration\nsudo tee /etc/mumble-server/mumble.conf &lt;&lt; &#039;EOF&#039;\n# Mumble Configuration\nbandwidth=72000\nEOF\n\n# Test configuration\nsudo mumble -t || sudo mumble-server configtest\n\n# Reload service\nsudo systemctl reload mumble-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R mumble:mumble /etc/mumble-server\nsudo chmod 750 /etc/mumble-server\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable mumble-server\n\n# Start service\nsudo systemctl start mumble-server\n\n# Stop service\nsudo systemctl stop mumble-server\n\n# Restart service\nsudo systemctl restart mumble-server\n\n# Reload configuration\nsudo systemctl reload mumble-server\n\n# Check status\nsudo systemctl status mumble-server\n\n# View logs\nsudo journalctl -u mumble-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add mumble-server default\n\n# Start service\nrc-service mumble-server start\n\n# Stop service\nrc-service mumble-server stop\n\n# Restart service\nrc-service mumble-server restart\n\n# Check status\nrc-service mumble-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mumble-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mumble-server start\n\n# Stop service\nservice mumble-server stop\n\n# Restart service\nservice mumble-server restart\n\n# Check status\nservice mumble-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mumble\nbrew services stop mumble\nbrew services restart mumble\n\n# Check status\nbrew services list | grep mumble</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start mumble-server\n\n# Stop service\nnet stop mumble-server\n\n# Using PowerShell\nStart-Service mumble-server\nStop-Service mumble-server\nRestart-Service mumble-server\n\n# Check status\nGet-Service mumble-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/mumble-server/mumble.conf &lt;&lt; &#039;EOF&#039;\nbandwidth=72000\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart mumble-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream mumble_backend {\n    server 127.0.0.1:64738;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name mumble.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mumble.example.com;\n\n    ssl_certificate /etc/ssl/certs/mumble.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mumble.example.com.key;\n\n    location / {\n        proxy_pass http://mumble_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName mumble.example.com\n    Redirect permanent / https://mumble.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName mumble.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mumble.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mumble.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:64738/\n    ProxyPassReverse / http://127.0.0.1:64738/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:64738/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend mumble_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mumble.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mumble_backend\n\nbackend mumble_backend\n    balance roundrobin\n    option httpchk GET /health\n    server mumble1 127.0.0.1:64738 check\n    server mumble2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R mumble:mumble /etc/mumble-server\nsudo chmod 750 /etc/mumble-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mumble\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/mumble.conf &lt;&lt; &#039;EOF&#039;\n[mumble]\nenabled = true\nport = 64738\nfilter = mumble\nlogpath = /var/log/mumble-server/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/mumble.key \\\n    -out /etc/ssl/certs/mumble.crt\n\n# Configure SSL in mumble\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE mumble_db;\nCREATE USER mumble_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE mumble_db TO mumble_user;\nEOF\n\n# Configure mumble to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE mumble_db;\nCREATE USER &#039;mumble_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON mumble_db.* TO &#039;mumble_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Mumble specific tuning\nbandwidth=72000</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nmumble soft nofile 65535\nmumble hard nofile 65535\nmumble soft nproc 32768\nmumble hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;mumble&#039;\n    static_configs:\n      - targets: [&#039;localhost:64738&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet mumble-server; then\n    echo &quot;Mumble is running&quot;\n    exit 0\nelse\n    echo &quot;Mumble is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/mumble &lt;&lt; &#039;EOF&#039;\n/var/log/mumble-server/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 mumble mumble\n    postrotate\n        systemctl reload mumble-server &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Mumble backup script\nBACKUP_DIR=&quot;/backup/mumble&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop mumble-server\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/mumble-config-$DATE.tar.gz&quot; /etc/mumble-server\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/mumble-data-$DATE.tar.gz&quot; /var/lib/mumble\n\n# Start service\nsystemctl start mumble-server\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop mumble-server\n\n# Restore configuration\nsudo tar -xzf /backup/mumble/mumble-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/mumble/mumble-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R mumble:mumble /etc/mumble-server\nsudo chown -R mumble:mumble /var/lib/mumble\n\n# Start service\nsudo systemctl start mumble-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mumble-server -n 100\nsudo tail -f /var/log/mumble-server/*.log\n\n# Check configuration\nsudo mumble -t || sudo mumble-server configtest\n\n# Check permissions\nls -la /etc/mumble-server\nls -la /var/lib/mumble</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 64738\nsudo netstat -tlnp | grep 64738\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 64738\nnc -zv localhost 64738</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep murmurd)\nhtop -p $(pgrep murmurd)\n\n# Check connections\nss -ant | grep :64738 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep murmurd)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo mumble -d\n# or\nsudo mumble-server debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  mumble:\n    image: mumble:latest\n    container_name: mumble\n    ports:\n      - &quot;64738:64738&quot;\n    volumes:\n      - ./config:/etc/mumble-server\n      - ./data:/var/lib/mumble\n    environment:\n      - mumble_CONFIG=/etc/mumble-server/mumble.conf\n    restart: unless-stopped\n    networks:\n      - mumble_net\n\nnetworks:\n  mumble_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mumble\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mumble\n  template:\n    metadata:\n      labels:\n        app: mumble\n    spec:\n      containers:\n      - name: mumble\n        image: mumble:latest\n        ports:\n        - containerPort: 64738\n        volumeMounts:\n        - name: config\n          mountPath: /etc/mumble-server\n      volumes:\n      - name: config\n        configMap:\n          name: mumble-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mumble\nspec:\n  selector:\n    app: mumble\n  ports:\n  - port: 64738\n    targetPort: 64738\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Mumble\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install mumble\n      package:\n        name: mumble\n        state: present\n    \n    - name: Configure mumble\n      template:\n        src: mumble.conf.j2\n        dest: /etc/mumble-server/mumble.conf\n        owner: mumble\n        group: mumble\n        mode: &#039;0640&#039;\n      notify: restart mumble\n    \n    - name: Start and enable mumble\n      systemd:\n        name: mumble-server\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart mumble\n      systemd:\n        name: mumble-server\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mumble\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade mumble\n\n# Arch Linux\nsudo pacman -Syu mumble\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade mumble\n\n# openSUSE\nsudo zypper update mumble\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade mumble\n\n# Always backup before updates\ntar -czf /backup/mumble-pre-update-$(date +%Y%m%d).tar.gz /etc/mumble-server\n\n# Restart after updates\nsudo systemctl restart mumble-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/mumble-server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo mumble --verify || sudo mumble-server check\n\n# Update databases (if applicable)\nsudo mumble-update-db\n\n# Optimize performance\nsudo mumble-optimize\n\n# Check for security updates\nsudo mumble --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.mumble.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/mumble/mumble</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.mumble.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.mumble.org/</li>\n<li class=\"mobile-list-item\">Comparison vs TeamSpeak, Discord, Ventrilo, Element: https://docs.mumble.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1981,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-25T06:18:44.135Z","metadataVersion":"2.0"},"category":{"key":"voice-chat","name":"Voice chat","description":"Voice chat tools and applications","icon":"💬","color":"#f1fa8c"},"relatedGuides":[{"name":"teamspeak","displayName":"TeamSpeak Installation Guide","slug":"teamspeak","description":"TeamSpeak is a free and open-source Voice Server. Voice communication system for online gaming","category":"voice-chat","subcategory":"voice-chat","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048,9987],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["voice-chat","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/voice-chat/teamspeak","documentationUrl":"https://howtomgr.github.io/voice-chat/teamspeak","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/teamspeak","updatedAt":"2025-09-16T17:56:20Z","createdAt":"2025-09-16T08:28:35Z","readmeRaw":"# TeamSpeak Installation Guide\n\nTeamSpeak is a free and open-source Voice Server. Voice communication system for online gaming\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 9987/10011 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9987/10011 (default teamspeak port)\n- **Dependencies**:\n  - none\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install teamspeak\nsudo dnf install -y teamspeak none\n\n# Enable and start service\nsudo systemctl enable --now teamspeak\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=teamspeak\nsudo firewall-cmd --reload\n\n# Verify installation\nteamspeak --version || systemctl status teamspeak\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install teamspeak\nsudo apt install -y teamspeak none\n\n# Enable and start service\nsudo systemctl enable --now teamspeak\n\n# Configure firewall\nsudo ufw allow 9987/10011\n\n# Verify installation\nteamspeak --version || systemctl status teamspeak\n```\n\n### Arch Linux\n\n```bash\n# Install teamspeak\nsudo pacman -S teamspeak\n\n# Enable and start service\nsudo systemctl enable --now teamspeak\n\n# Verify installation\nteamspeak --version || systemctl status teamspeak\n```\n\n### Alpine Linux\n\n```bash\n# Install teamspeak\napk add --no-cache teamspeak\n\n# Enable and start service\nrc-update add teamspeak default\nrc-service teamspeak start\n\n# Verify installation\nteamspeak --version || rc-service teamspeak status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install teamspeak\nsudo zypper install -y teamspeak none\n\n# Enable and start service\nsudo systemctl enable --now teamspeak\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=teamspeak\nsudo firewall-cmd --reload\n\n# Verify installation\nteamspeak --version || systemctl status teamspeak\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install teamspeak\n\n# Start service\nbrew services start teamspeak\n\n# Verify installation\nteamspeak --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install teamspeak\n\n# Enable in rc.conf\necho 'teamspeak_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice teamspeak start\n\n# Verify installation\nteamspeak --version || service teamspeak status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install teamspeak\n\n# Or using Scoop\nscoop install teamspeak\n\n# Verify installation\nteamspeak --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /opt/teamspeak\n\n# Set up basic configuration\nsudo tee /opt/teamspeak/teamspeak.conf << 'EOF'\n# TeamSpeak Configuration\nvoice_ip=0.0.0.0\nEOF\n\n# Test configuration\nsudo teamspeak -t || sudo teamspeak configtest\n\n# Reload service\nsudo systemctl reload teamspeak\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R teamspeak:teamspeak /opt/teamspeak\nsudo chmod 750 /opt/teamspeak\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable teamspeak\n\n# Start service\nsudo systemctl start teamspeak\n\n# Stop service\nsudo systemctl stop teamspeak\n\n# Restart service\nsudo systemctl restart teamspeak\n\n# Reload configuration\nsudo systemctl reload teamspeak\n\n# Check status\nsudo systemctl status teamspeak\n\n# View logs\nsudo journalctl -u teamspeak -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add teamspeak default\n\n# Start service\nrc-service teamspeak start\n\n# Stop service\nrc-service teamspeak stop\n\n# Restart service\nrc-service teamspeak restart\n\n# Check status\nrc-service teamspeak status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'teamspeak_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice teamspeak start\n\n# Stop service\nservice teamspeak stop\n\n# Restart service\nservice teamspeak restart\n\n# Check status\nservice teamspeak status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start teamspeak\nbrew services stop teamspeak\nbrew services restart teamspeak\n\n# Check status\nbrew services list | grep teamspeak\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start teamspeak\n\n# Stop service\nnet stop teamspeak\n\n# Using PowerShell\nStart-Service teamspeak\nStop-Service teamspeak\nRestart-Service teamspeak\n\n# Check status\nGet-Service teamspeak\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /opt/teamspeak/teamspeak.conf << 'EOF'\nvoice_ip=0.0.0.0\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart teamspeak\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream teamspeak_backend {\n    server 127.0.0.1:9987/10011;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name teamspeak.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name teamspeak.example.com;\n\n    ssl_certificate /etc/ssl/certs/teamspeak.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/teamspeak.example.com.key;\n\n    location / {\n        proxy_pass http://teamspeak_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName teamspeak.example.com\n    Redirect permanent / https://teamspeak.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName teamspeak.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/teamspeak.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/teamspeak.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9987/10011/\n    ProxyPassReverse / http://127.0.0.1:9987/10011/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:9987/10011/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend teamspeak_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/teamspeak.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend teamspeak_backend\n\nbackend teamspeak_backend\n    balance roundrobin\n    option httpchk GET /health\n    server teamspeak1 127.0.0.1:9987/10011 check\n    server teamspeak2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R teamspeak:teamspeak /opt/teamspeak\nsudo chmod 750 /opt/teamspeak\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=teamspeak\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/teamspeak.conf << 'EOF'\n[teamspeak]\nenabled = true\nport = 9987/10011\nfilter = teamspeak\nlogpath = /var/log/teamspeak/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/teamspeak.key \\\n    -out /etc/ssl/certs/teamspeak.crt\n\n# Configure SSL in teamspeak\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE teamspeak_db;\nCREATE USER teamspeak_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE teamspeak_db TO teamspeak_user;\nEOF\n\n# Configure teamspeak to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE teamspeak_db;\nCREATE USER 'teamspeak_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON teamspeak_db.* TO 'teamspeak_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# TeamSpeak specific tuning\nvoice_ip=0.0.0.0\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nteamspeak soft nofile 65535\nteamspeak hard nofile 65535\nteamspeak soft nproc 32768\nteamspeak hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'teamspeak'\n    static_configs:\n      - targets: ['localhost:9987/10011']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet teamspeak; then\n    echo \"TeamSpeak is running\"\n    exit 0\nelse\n    echo \"TeamSpeak is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/teamspeak << 'EOF'\n/var/log/teamspeak/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 teamspeak teamspeak\n    postrotate\n        systemctl reload teamspeak > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# TeamSpeak backup script\nBACKUP_DIR=\"/backup/teamspeak\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop teamspeak\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/teamspeak-config-$DATE.tar.gz\" /opt/teamspeak\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/teamspeak-data-$DATE.tar.gz\" /var/lib/teamspeak\n\n# Start service\nsystemctl start teamspeak\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop teamspeak\n\n# Restore configuration\nsudo tar -xzf /backup/teamspeak/teamspeak-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/teamspeak/teamspeak-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R teamspeak:teamspeak /opt/teamspeak\nsudo chown -R teamspeak:teamspeak /var/lib/teamspeak\n\n# Start service\nsudo systemctl start teamspeak\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u teamspeak -n 100\nsudo tail -f /var/log/teamspeak/*.log\n\n# Check configuration\nsudo teamspeak -t || sudo teamspeak configtest\n\n# Check permissions\nls -la /opt/teamspeak\nls -la /var/lib/teamspeak\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9987/10011\nsudo netstat -tlnp | grep 9987/10011\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 9987/10011\nnc -zv localhost 9987/10011\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep ts3server)\nhtop -p $(pgrep ts3server)\n\n# Check connections\nss -ant | grep :9987/10011 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep ts3server)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo teamspeak -d\n# or\nsudo teamspeak debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  teamspeak:\n    image: teamspeak:latest\n    container_name: teamspeak\n    ports:\n      - \"9987/10011:9987/10011\"\n    volumes:\n      - ./config:/opt/teamspeak\n      - ./data:/var/lib/teamspeak\n    environment:\n      - teamspeak_CONFIG=/opt/teamspeak/teamspeak.conf\n    restart: unless-stopped\n    networks:\n      - teamspeak_net\n\nnetworks:\n  teamspeak_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: teamspeak\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: teamspeak\n  template:\n    metadata:\n      labels:\n        app: teamspeak\n    spec:\n      containers:\n      - name: teamspeak\n        image: teamspeak:latest\n        ports:\n        - containerPort: 9987/10011\n        volumeMounts:\n        - name: config\n          mountPath: /opt/teamspeak\n      volumes:\n      - name: config\n        configMap:\n          name: teamspeak-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: teamspeak\nspec:\n  selector:\n    app: teamspeak\n  ports:\n  - port: 9987/10011\n    targetPort: 9987/10011\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure TeamSpeak\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install teamspeak\n      package:\n        name: teamspeak\n        state: present\n    \n    - name: Configure teamspeak\n      template:\n        src: teamspeak.conf.j2\n        dest: /opt/teamspeak/teamspeak.conf\n        owner: teamspeak\n        group: teamspeak\n        mode: '0640'\n      notify: restart teamspeak\n    \n    - name: Start and enable teamspeak\n      systemd:\n        name: teamspeak\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart teamspeak\n      systemd:\n        name: teamspeak\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update teamspeak\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade teamspeak\n\n# Arch Linux\nsudo pacman -Syu teamspeak\n\n# Alpine Linux\napk update && apk upgrade teamspeak\n\n# openSUSE\nsudo zypper update teamspeak\n\n# FreeBSD\npkg update && pkg upgrade teamspeak\n\n# Always backup before updates\ntar -czf /backup/teamspeak-pre-update-$(date +%Y%m%d).tar.gz /opt/teamspeak\n\n# Restart after updates\nsudo systemctl restart teamspeak\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/teamspeak -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo teamspeak --verify || sudo teamspeak check\n\n# Update databases (if applicable)\nsudo teamspeak-update-db\n\n# Optimize performance\nsudo teamspeak-optimize\n\n# Check for security updates\nsudo teamspeak --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.teamspeak.org/\n- GitHub Repository: https://github.com/teamspeak/teamspeak\n- Community Forum: https://forum.teamspeak.org/\n- Wiki: https://wiki.teamspeak.org/\n- Comparison vs Mumble, Discord, Ventrilo, Curse Voice: https://docs.teamspeak.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">TeamSpeak is a free and open-source Voice Server. Voice communication system for online gaming</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 9987/10011 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9987/10011 (default teamspeak port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">none</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install teamspeak\nsudo dnf install -y teamspeak none\n\n# Enable and start service\nsudo systemctl enable --now teamspeak\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=teamspeak\nsudo firewall-cmd --reload\n\n# Verify installation\nteamspeak --version || systemctl status teamspeak</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install teamspeak\nsudo apt install -y teamspeak none\n\n# Enable and start service\nsudo systemctl enable --now teamspeak\n\n# Configure firewall\nsudo ufw allow 9987/10011\n\n# Verify installation\nteamspeak --version || systemctl status teamspeak</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install teamspeak\nsudo pacman -S teamspeak\n\n# Enable and start service\nsudo systemctl enable --now teamspeak\n\n# Verify installation\nteamspeak --version || systemctl status teamspeak</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install teamspeak\napk add --no-cache teamspeak\n\n# Enable and start service\nrc-update add teamspeak default\nrc-service teamspeak start\n\n# Verify installation\nteamspeak --version || rc-service teamspeak status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install teamspeak\nsudo zypper install -y teamspeak none\n\n# Enable and start service\nsudo systemctl enable --now teamspeak\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=teamspeak\nsudo firewall-cmd --reload\n\n# Verify installation\nteamspeak --version || systemctl status teamspeak</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install teamspeak\n\n# Start service\nbrew services start teamspeak\n\n# Verify installation\nteamspeak --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install teamspeak\n\n# Enable in rc.conf\necho &#039;teamspeak_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice teamspeak start\n\n# Verify installation\nteamspeak --version || service teamspeak status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install teamspeak\n\n# Or using Scoop\nscoop install teamspeak\n\n# Verify installation\nteamspeak --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /opt/teamspeak\n\n# Set up basic configuration\nsudo tee /opt/teamspeak/teamspeak.conf &lt;&lt; &#039;EOF&#039;\n# TeamSpeak Configuration\nvoice_ip=0.0.0.0\nEOF\n\n# Test configuration\nsudo teamspeak -t || sudo teamspeak configtest\n\n# Reload service\nsudo systemctl reload teamspeak</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R teamspeak:teamspeak /opt/teamspeak\nsudo chmod 750 /opt/teamspeak\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable teamspeak\n\n# Start service\nsudo systemctl start teamspeak\n\n# Stop service\nsudo systemctl stop teamspeak\n\n# Restart service\nsudo systemctl restart teamspeak\n\n# Reload configuration\nsudo systemctl reload teamspeak\n\n# Check status\nsudo systemctl status teamspeak\n\n# View logs\nsudo journalctl -u teamspeak -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add teamspeak default\n\n# Start service\nrc-service teamspeak start\n\n# Stop service\nrc-service teamspeak stop\n\n# Restart service\nrc-service teamspeak restart\n\n# Check status\nrc-service teamspeak status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;teamspeak_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice teamspeak start\n\n# Stop service\nservice teamspeak stop\n\n# Restart service\nservice teamspeak restart\n\n# Check status\nservice teamspeak status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start teamspeak\nbrew services stop teamspeak\nbrew services restart teamspeak\n\n# Check status\nbrew services list | grep teamspeak</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start teamspeak\n\n# Stop service\nnet stop teamspeak\n\n# Using PowerShell\nStart-Service teamspeak\nStop-Service teamspeak\nRestart-Service teamspeak\n\n# Check status\nGet-Service teamspeak</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /opt/teamspeak/teamspeak.conf &lt;&lt; &#039;EOF&#039;\nvoice_ip=0.0.0.0\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart teamspeak</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream teamspeak_backend {\n    server 127.0.0.1:9987/10011;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name teamspeak.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name teamspeak.example.com;\n\n    ssl_certificate /etc/ssl/certs/teamspeak.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/teamspeak.example.com.key;\n\n    location / {\n        proxy_pass http://teamspeak_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName teamspeak.example.com\n    Redirect permanent / https://teamspeak.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName teamspeak.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/teamspeak.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/teamspeak.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9987/10011/\n    ProxyPassReverse / http://127.0.0.1:9987/10011/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:9987/10011/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend teamspeak_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/teamspeak.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend teamspeak_backend\n\nbackend teamspeak_backend\n    balance roundrobin\n    option httpchk GET /health\n    server teamspeak1 127.0.0.1:9987/10011 check\n    server teamspeak2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R teamspeak:teamspeak /opt/teamspeak\nsudo chmod 750 /opt/teamspeak\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=teamspeak\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/teamspeak.conf &lt;&lt; &#039;EOF&#039;\n[teamspeak]\nenabled = true\nport = 9987/10011\nfilter = teamspeak\nlogpath = /var/log/teamspeak/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/teamspeak.key \\\n    -out /etc/ssl/certs/teamspeak.crt\n\n# Configure SSL in teamspeak\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE teamspeak_db;\nCREATE USER teamspeak_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE teamspeak_db TO teamspeak_user;\nEOF\n\n# Configure teamspeak to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE teamspeak_db;\nCREATE USER &#039;teamspeak_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON teamspeak_db.* TO &#039;teamspeak_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# TeamSpeak specific tuning\nvoice_ip=0.0.0.0</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nteamspeak soft nofile 65535\nteamspeak hard nofile 65535\nteamspeak soft nproc 32768\nteamspeak hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;teamspeak&#039;\n    static_configs:\n      - targets: [&#039;localhost:9987/10011&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet teamspeak; then\n    echo &quot;TeamSpeak is running&quot;\n    exit 0\nelse\n    echo &quot;TeamSpeak is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/teamspeak &lt;&lt; &#039;EOF&#039;\n/var/log/teamspeak/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 teamspeak teamspeak\n    postrotate\n        systemctl reload teamspeak &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# TeamSpeak backup script\nBACKUP_DIR=&quot;/backup/teamspeak&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop teamspeak\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/teamspeak-config-$DATE.tar.gz&quot; /opt/teamspeak\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/teamspeak-data-$DATE.tar.gz&quot; /var/lib/teamspeak\n\n# Start service\nsystemctl start teamspeak\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop teamspeak\n\n# Restore configuration\nsudo tar -xzf /backup/teamspeak/teamspeak-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/teamspeak/teamspeak-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R teamspeak:teamspeak /opt/teamspeak\nsudo chown -R teamspeak:teamspeak /var/lib/teamspeak\n\n# Start service\nsudo systemctl start teamspeak</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u teamspeak -n 100\nsudo tail -f /var/log/teamspeak/*.log\n\n# Check configuration\nsudo teamspeak -t || sudo teamspeak configtest\n\n# Check permissions\nls -la /opt/teamspeak\nls -la /var/lib/teamspeak</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9987/10011\nsudo netstat -tlnp | grep 9987/10011\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 9987/10011\nnc -zv localhost 9987/10011</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep ts3server)\nhtop -p $(pgrep ts3server)\n\n# Check connections\nss -ant | grep :9987/10011 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep ts3server)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo teamspeak -d\n# or\nsudo teamspeak debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  teamspeak:\n    image: teamspeak:latest\n    container_name: teamspeak\n    ports:\n      - &quot;9987/10011:9987/10011&quot;\n    volumes:\n      - ./config:/opt/teamspeak\n      - ./data:/var/lib/teamspeak\n    environment:\n      - teamspeak_CONFIG=/opt/teamspeak/teamspeak.conf\n    restart: unless-stopped\n    networks:\n      - teamspeak_net\n\nnetworks:\n  teamspeak_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: teamspeak\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: teamspeak\n  template:\n    metadata:\n      labels:\n        app: teamspeak\n    spec:\n      containers:\n      - name: teamspeak\n        image: teamspeak:latest\n        ports:\n        - containerPort: 9987/10011\n        volumeMounts:\n        - name: config\n          mountPath: /opt/teamspeak\n      volumes:\n      - name: config\n        configMap:\n          name: teamspeak-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: teamspeak\nspec:\n  selector:\n    app: teamspeak\n  ports:\n  - port: 9987/10011\n    targetPort: 9987/10011\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure TeamSpeak\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install teamspeak\n      package:\n        name: teamspeak\n        state: present\n    \n    - name: Configure teamspeak\n      template:\n        src: teamspeak.conf.j2\n        dest: /opt/teamspeak/teamspeak.conf\n        owner: teamspeak\n        group: teamspeak\n        mode: &#039;0640&#039;\n      notify: restart teamspeak\n    \n    - name: Start and enable teamspeak\n      systemd:\n        name: teamspeak\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart teamspeak\n      systemd:\n        name: teamspeak\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update teamspeak\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade teamspeak\n\n# Arch Linux\nsudo pacman -Syu teamspeak\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade teamspeak\n\n# openSUSE\nsudo zypper update teamspeak\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade teamspeak\n\n# Always backup before updates\ntar -czf /backup/teamspeak-pre-update-$(date +%Y%m%d).tar.gz /opt/teamspeak\n\n# Restart after updates\nsudo systemctl restart teamspeak</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/teamspeak -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo teamspeak --verify || sudo teamspeak check\n\n# Update databases (if applicable)\nsudo teamspeak-update-db\n\n# Optimize performance\nsudo teamspeak-optimize\n\n# Check for security updates\nsudo teamspeak --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.teamspeak.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/teamspeak/teamspeak</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.teamspeak.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.teamspeak.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Mumble, Discord, Ventrilo, Curse Voice: https://docs.teamspeak.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1979,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-25T06:16:37.328Z","metadataVersion":"2.0"}]},"__N_SSG":true}