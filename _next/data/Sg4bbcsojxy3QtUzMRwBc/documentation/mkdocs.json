{"pageProps":{"guide":{"name":"mkdocs","displayName":"mkdocs Installation Guide","slug":"mkdocs","description":"mkdocs is a free and open-source project documentation. MkDocs builds beautiful project documentation from Markdown","category":"documentation","subcategory":"documentation","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["documentation","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/documentation/mkdocs","documentationUrl":"https://howtomgr.github.io/documentation/mkdocs","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mkdocs","updatedAt":"2025-09-16T17:31:54Z","createdAt":"2025-09-16T03:44:12Z","readmeRaw":"# mkdocs Installation Guide\n\nmkdocs is a free and open-source project documentation. MkDocs builds beautiful project documentation from Markdown\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for docs\n  - Network: HTTP access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8000 (default mkdocs port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mkdocs\nsudo dnf install -y mkdocs\n\n# Enable and start service\nsudo systemctl enable --now mkdocs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmkdocs --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install mkdocs\nsudo apt install -y mkdocs\n\n# Enable and start service\nsudo systemctl enable --now mkdocs\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nmkdocs --version\n```\n\n### Arch Linux\n\n```bash\n# Install mkdocs\nsudo pacman -S mkdocs\n\n# Enable and start service\nsudo systemctl enable --now mkdocs\n\n# Verify installation\nmkdocs --version\n```\n\n### Alpine Linux\n\n```bash\n# Install mkdocs\napk add --no-cache mkdocs\n\n# Enable and start service\nrc-update add mkdocs default\nrc-service mkdocs start\n\n# Verify installation\nmkdocs --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install mkdocs\nsudo zypper install -y mkdocs\n\n# Enable and start service\nsudo systemctl enable --now mkdocs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmkdocs --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install mkdocs\n\n# Start service\nbrew services start mkdocs\n\n# Verify installation\nmkdocs --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install mkdocs\n\n# Enable in rc.conf\necho 'mkdocs_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mkdocs start\n\n# Verify installation\nmkdocs --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install mkdocs\n\n# Or using Scoop\nscoop install mkdocs\n\n# Verify installation\nmkdocs --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/mkdocs\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nmkdocs --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable mkdocs\n\n# Start service\nsudo systemctl start mkdocs\n\n# Stop service\nsudo systemctl stop mkdocs\n\n# Restart service\nsudo systemctl restart mkdocs\n\n# Check status\nsudo systemctl status mkdocs\n\n# View logs\nsudo journalctl -u mkdocs -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add mkdocs default\n\n# Start service\nrc-service mkdocs start\n\n# Stop service\nrc-service mkdocs stop\n\n# Restart service\nrc-service mkdocs restart\n\n# Check status\nrc-service mkdocs status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mkdocs_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mkdocs start\n\n# Stop service\nservice mkdocs stop\n\n# Restart service\nservice mkdocs restart\n\n# Check status\nservice mkdocs status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mkdocs\nbrew services stop mkdocs\nbrew services restart mkdocs\n\n# Check status\nbrew services list | grep mkdocs\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start mkdocs\n\n# Stop service\nnet stop mkdocs\n\n# Using PowerShell\nStart-Service mkdocs\nStop-Service mkdocs\nRestart-Service mkdocs\n\n# Check status\nGet-Service mkdocs\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream mkdocs_backend {\n    server 127.0.0.1:8000;\n}\n\nserver {\n    listen 80;\n    server_name mkdocs.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mkdocs.example.com;\n\n    ssl_certificate /etc/ssl/certs/mkdocs.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mkdocs.example.com.key;\n\n    location / {\n        proxy_pass http://mkdocs_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName mkdocs.example.com\n    Redirect permanent / https://mkdocs.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName mkdocs.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mkdocs.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mkdocs.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8000/\n    ProxyPassReverse / http://127.0.0.1:8000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend mkdocs_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mkdocs.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mkdocs_backend\n\nbackend mkdocs_backend\n    balance roundrobin\n    server mkdocs1 127.0.0.1:8000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R mkdocs:mkdocs /etc/mkdocs\nsudo chmod 750 /etc/mkdocs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status mkdocs\n\n# View logs\nsudo journalctl -u mkdocs -f\n\n# Monitor resource usage\ntop -p $(pgrep mkdocs)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/mkdocs\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/mkdocs-backup-$DATE.tar.gz\" /etc/mkdocs /var/lib/mkdocs\n\necho \"Backup completed: $BACKUP_DIR/mkdocs-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop mkdocs\n\n# Restore from backup\ntar -xzf /backup/mkdocs/mkdocs-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start mkdocs\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u mkdocs -n 100\nsudo tail -f /var/log/mkdocs/mkdocs.log\n\n# Check configuration\nmkdocs --version\n\n# Check permissions\nls -la /etc/mkdocs\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8000\n\n# Test connectivity\ntelnet localhost 8000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep mkdocs)\n\n# Check disk I/O\niotop -p $(pgrep mkdocs)\n\n# Check connections\nss -an | grep 8000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  mkdocs:\n    image: mkdocs:latest\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./config:/etc/mkdocs\n      - ./data:/var/lib/mkdocs\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mkdocs\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade mkdocs\n\n# Arch Linux\nsudo pacman -Syu mkdocs\n\n# Alpine Linux\napk update && apk upgrade mkdocs\n\n# openSUSE\nsudo zypper update mkdocs\n\n# FreeBSD\npkg update && pkg upgrade mkdocs\n\n# Always backup before updates\ntar -czf /backup/mkdocs-pre-update-$(date +%Y%m%d).tar.gz /etc/mkdocs\n\n# Restart after updates\nsudo systemctl restart mkdocs\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/mkdocs\n\n# Clean old logs\nfind /var/log/mkdocs -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/mkdocs\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.mkdocs.org/\n- GitHub Repository: https://github.com/mkdocs/mkdocs\n- Community Forum: https://forum.mkdocs.org/\n- Best Practices Guide: https://docs.mkdocs.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">mkdocs is a free and open-source project documentation. MkDocs builds beautiful project documentation from Markdown</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for docs</li>\n<li class=\"mobile-list-item\">Network: HTTP access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8000 (default mkdocs port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mkdocs\nsudo dnf install -y mkdocs\n\n# Enable and start service\nsudo systemctl enable --now mkdocs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install mkdocs\nsudo apt install -y mkdocs\n\n# Enable and start service\nsudo systemctl enable --now mkdocs\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mkdocs\nsudo pacman -S mkdocs\n\n# Enable and start service\nsudo systemctl enable --now mkdocs\n\n# Verify installation\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mkdocs\napk add --no-cache mkdocs\n\n# Enable and start service\nrc-update add mkdocs default\nrc-service mkdocs start\n\n# Verify installation\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mkdocs\nsudo zypper install -y mkdocs\n\n# Enable and start service\nsudo systemctl enable --now mkdocs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install mkdocs\n\n# Start service\nbrew services start mkdocs\n\n# Verify installation\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install mkdocs\n\n# Enable in rc.conf\necho &#039;mkdocs_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mkdocs start\n\n# Verify installation\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install mkdocs\n\n# Or using Scoop\nscoop install mkdocs\n\n# Verify installation\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/mkdocs\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nmkdocs --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable mkdocs\n\n# Start service\nsudo systemctl start mkdocs\n\n# Stop service\nsudo systemctl stop mkdocs\n\n# Restart service\nsudo systemctl restart mkdocs\n\n# Check status\nsudo systemctl status mkdocs\n\n# View logs\nsudo journalctl -u mkdocs -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add mkdocs default\n\n# Start service\nrc-service mkdocs start\n\n# Stop service\nrc-service mkdocs stop\n\n# Restart service\nrc-service mkdocs restart\n\n# Check status\nrc-service mkdocs status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mkdocs_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mkdocs start\n\n# Stop service\nservice mkdocs stop\n\n# Restart service\nservice mkdocs restart\n\n# Check status\nservice mkdocs status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mkdocs\nbrew services stop mkdocs\nbrew services restart mkdocs\n\n# Check status\nbrew services list | grep mkdocs</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start mkdocs\n\n# Stop service\nnet stop mkdocs\n\n# Using PowerShell\nStart-Service mkdocs\nStop-Service mkdocs\nRestart-Service mkdocs\n\n# Check status\nGet-Service mkdocs</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream mkdocs_backend {\n    server 127.0.0.1:8000;\n}\n\nserver {\n    listen 80;\n    server_name mkdocs.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mkdocs.example.com;\n\n    ssl_certificate /etc/ssl/certs/mkdocs.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mkdocs.example.com.key;\n\n    location / {\n        proxy_pass http://mkdocs_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName mkdocs.example.com\n    Redirect permanent / https://mkdocs.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName mkdocs.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mkdocs.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mkdocs.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8000/\n    ProxyPassReverse / http://127.0.0.1:8000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend mkdocs_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mkdocs.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mkdocs_backend\n\nbackend mkdocs_backend\n    balance roundrobin\n    server mkdocs1 127.0.0.1:8000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R mkdocs:mkdocs /etc/mkdocs\nsudo chmod 750 /etc/mkdocs\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status mkdocs\n\n# View logs\nsudo journalctl -u mkdocs -f\n\n# Monitor resource usage\ntop -p $(pgrep mkdocs)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/mkdocs&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/mkdocs-backup-$DATE.tar.gz&quot; /etc/mkdocs /var/lib/mkdocs\n\necho &quot;Backup completed: $BACKUP_DIR/mkdocs-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop mkdocs\n\n# Restore from backup\ntar -xzf /backup/mkdocs/mkdocs-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start mkdocs</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mkdocs -n 100\nsudo tail -f /var/log/mkdocs/mkdocs.log\n\n# Check configuration\nmkdocs --version\n\n# Check permissions\nls -la /etc/mkdocs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8000\n\n# Test connectivity\ntelnet localhost 8000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep mkdocs)\n\n# Check disk I/O\niotop -p $(pgrep mkdocs)\n\n# Check connections\nss -an | grep 8000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  mkdocs:\n    image: mkdocs:latest\n    ports:\n      - &quot;8000:8000&quot;\n    volumes:\n      - ./config:/etc/mkdocs\n      - ./data:/var/lib/mkdocs\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mkdocs\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade mkdocs\n\n# Arch Linux\nsudo pacman -Syu mkdocs\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade mkdocs\n\n# openSUSE\nsudo zypper update mkdocs\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade mkdocs\n\n# Always backup before updates\ntar -czf /backup/mkdocs-pre-update-$(date +%Y%m%d).tar.gz /etc/mkdocs\n\n# Restart after updates\nsudo systemctl restart mkdocs</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/mkdocs\n\n# Clean old logs\nfind /var/log/mkdocs -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/mkdocs</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.mkdocs.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/mkdocs/mkdocs</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.mkdocs.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.mkdocs.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1267,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-22T06:17:55.429Z","metadataVersion":"2.0"},"category":{"key":"documentation","name":"Documentation","description":"Documentation tools and applications","icon":"📝","color":"#ff79c6"},"relatedGuides":[{"name":"bookstack","displayName":"bookstack Installation Guide","slug":"bookstack","description":"bookstack is a free and open-source documentation platform. BookStack provides simple, self-hosted platform for organizing documentation","category":"documentation","subcategory":"documentation","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["documentation","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/documentation/bookstack","documentationUrl":"https://howtomgr.github.io/documentation/bookstack","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bookstack","updatedAt":"2025-09-16T17:00:53Z","createdAt":"2025-09-16T02:22:45Z","readmeRaw":"# bookstack Installation Guide\n\nbookstack is a free and open-source documentation platform. BookStack provides simple, self-hosted platform for organizing documentation\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default bookstack port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bookstack\nsudo dnf install -y bookstack\n\n# Enable and start service\nsudo systemctl enable --now bookstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbookstack --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bookstack\nsudo apt install -y bookstack\n\n# Enable and start service\nsudo systemctl enable --now bookstack\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nbookstack --version\n```\n\n### Arch Linux\n\n```bash\n# Install bookstack\nsudo pacman -S bookstack\n\n# Enable and start service\nsudo systemctl enable --now bookstack\n\n# Verify installation\nbookstack --version\n```\n\n### Alpine Linux\n\n```bash\n# Install bookstack\napk add --no-cache bookstack\n\n# Enable and start service\nrc-update add bookstack default\nrc-service bookstack start\n\n# Verify installation\nbookstack --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bookstack\nsudo zypper install -y bookstack\n\n# Enable and start service\nsudo systemctl enable --now bookstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbookstack --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bookstack\n\n# Start service\nbrew services start bookstack\n\n# Verify installation\nbookstack --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bookstack\n\n# Enable in rc.conf\necho 'bookstack_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bookstack start\n\n# Verify installation\nbookstack --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install bookstack\n\n# Or using Scoop\nscoop install bookstack\n\n# Verify installation\nbookstack --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/bookstack\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbookstack --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable bookstack\n\n# Start service\nsudo systemctl start bookstack\n\n# Stop service\nsudo systemctl stop bookstack\n\n# Restart service\nsudo systemctl restart bookstack\n\n# Check status\nsudo systemctl status bookstack\n\n# View logs\nsudo journalctl -u bookstack -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add bookstack default\n\n# Start service\nrc-service bookstack start\n\n# Stop service\nrc-service bookstack stop\n\n# Restart service\nrc-service bookstack restart\n\n# Check status\nrc-service bookstack status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'bookstack_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bookstack start\n\n# Stop service\nservice bookstack stop\n\n# Restart service\nservice bookstack restart\n\n# Check status\nservice bookstack status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bookstack\nbrew services stop bookstack\nbrew services restart bookstack\n\n# Check status\nbrew services list | grep bookstack\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start bookstack\n\n# Stop service\nnet stop bookstack\n\n# Using PowerShell\nStart-Service bookstack\nStop-Service bookstack\nRestart-Service bookstack\n\n# Check status\nGet-Service bookstack\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bookstack_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name bookstack.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bookstack.example.com;\n\n    ssl_certificate /etc/ssl/certs/bookstack.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bookstack.example.com.key;\n\n    location / {\n        proxy_pass http://bookstack_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bookstack.example.com\n    Redirect permanent / https://bookstack.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bookstack.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bookstack.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bookstack.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bookstack_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bookstack.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bookstack_backend\n\nbackend bookstack_backend\n    balance roundrobin\n    server bookstack1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bookstack:bookstack /etc/bookstack\nsudo chmod 750 /etc/bookstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status bookstack\n\n# View logs\nsudo journalctl -u bookstack -f\n\n# Monitor resource usage\ntop -p $(pgrep bookstack)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/bookstack\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/bookstack-backup-$DATE.tar.gz\" /etc/bookstack /var/lib/bookstack\n\necho \"Backup completed: $BACKUP_DIR/bookstack-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop bookstack\n\n# Restore from backup\ntar -xzf /backup/bookstack/bookstack-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bookstack\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u bookstack -n 100\nsudo tail -f /var/log/bookstack/bookstack.log\n\n# Check configuration\nbookstack --version\n\n# Check permissions\nls -la /etc/bookstack\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep bookstack)\n\n# Check disk I/O\niotop -p $(pgrep bookstack)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  bookstack:\n    image: bookstack:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/bookstack\n      - ./data:/var/lib/bookstack\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bookstack\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bookstack\n\n# Arch Linux\nsudo pacman -Syu bookstack\n\n# Alpine Linux\napk update && apk upgrade bookstack\n\n# openSUSE\nsudo zypper update bookstack\n\n# FreeBSD\npkg update && pkg upgrade bookstack\n\n# Always backup before updates\ntar -czf /backup/bookstack-pre-update-$(date +%Y%m%d).tar.gz /etc/bookstack\n\n# Restart after updates\nsudo systemctl restart bookstack\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/bookstack\n\n# Clean old logs\nfind /var/log/bookstack -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bookstack\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bookstack.org/\n- GitHub Repository: https://github.com/bookstack/bookstack\n- Community Forum: https://forum.bookstack.org/\n- Best Practices Guide: https://docs.bookstack.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">bookstack is a free and open-source documentation platform. BookStack provides simple, self-hosted platform for organizing documentation</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default bookstack port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bookstack\nsudo dnf install -y bookstack\n\n# Enable and start service\nsudo systemctl enable --now bookstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bookstack\nsudo apt install -y bookstack\n\n# Enable and start service\nsudo systemctl enable --now bookstack\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bookstack\nsudo pacman -S bookstack\n\n# Enable and start service\nsudo systemctl enable --now bookstack\n\n# Verify installation\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bookstack\napk add --no-cache bookstack\n\n# Enable and start service\nrc-update add bookstack default\nrc-service bookstack start\n\n# Verify installation\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bookstack\nsudo zypper install -y bookstack\n\n# Enable and start service\nsudo systemctl enable --now bookstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bookstack\n\n# Start service\nbrew services start bookstack\n\n# Verify installation\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bookstack\n\n# Enable in rc.conf\necho &#039;bookstack_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bookstack start\n\n# Verify installation\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install bookstack\n\n# Or using Scoop\nscoop install bookstack\n\n# Verify installation\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/bookstack\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbookstack --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable bookstack\n\n# Start service\nsudo systemctl start bookstack\n\n# Stop service\nsudo systemctl stop bookstack\n\n# Restart service\nsudo systemctl restart bookstack\n\n# Check status\nsudo systemctl status bookstack\n\n# View logs\nsudo journalctl -u bookstack -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add bookstack default\n\n# Start service\nrc-service bookstack start\n\n# Stop service\nrc-service bookstack stop\n\n# Restart service\nrc-service bookstack restart\n\n# Check status\nrc-service bookstack status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;bookstack_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bookstack start\n\n# Stop service\nservice bookstack stop\n\n# Restart service\nservice bookstack restart\n\n# Check status\nservice bookstack status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bookstack\nbrew services stop bookstack\nbrew services restart bookstack\n\n# Check status\nbrew services list | grep bookstack</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start bookstack\n\n# Stop service\nnet stop bookstack\n\n# Using PowerShell\nStart-Service bookstack\nStop-Service bookstack\nRestart-Service bookstack\n\n# Check status\nGet-Service bookstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bookstack_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name bookstack.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bookstack.example.com;\n\n    ssl_certificate /etc/ssl/certs/bookstack.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bookstack.example.com.key;\n\n    location / {\n        proxy_pass http://bookstack_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bookstack.example.com\n    Redirect permanent / https://bookstack.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bookstack.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bookstack.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bookstack.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bookstack_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bookstack.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bookstack_backend\n\nbackend bookstack_backend\n    balance roundrobin\n    server bookstack1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bookstack:bookstack /etc/bookstack\nsudo chmod 750 /etc/bookstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status bookstack\n\n# View logs\nsudo journalctl -u bookstack -f\n\n# Monitor resource usage\ntop -p $(pgrep bookstack)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/bookstack&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/bookstack-backup-$DATE.tar.gz&quot; /etc/bookstack /var/lib/bookstack\n\necho &quot;Backup completed: $BACKUP_DIR/bookstack-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop bookstack\n\n# Restore from backup\ntar -xzf /backup/bookstack/bookstack-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bookstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u bookstack -n 100\nsudo tail -f /var/log/bookstack/bookstack.log\n\n# Check configuration\nbookstack --version\n\n# Check permissions\nls -la /etc/bookstack</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep bookstack)\n\n# Check disk I/O\niotop -p $(pgrep bookstack)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bookstack:\n    image: bookstack:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/bookstack\n      - ./data:/var/lib/bookstack\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bookstack\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bookstack\n\n# Arch Linux\nsudo pacman -Syu bookstack\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bookstack\n\n# openSUSE\nsudo zypper update bookstack\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bookstack\n\n# Always backup before updates\ntar -czf /backup/bookstack-pre-update-$(date +%Y%m%d).tar.gz /etc/bookstack\n\n# Restart after updates\nsudo systemctl restart bookstack</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/bookstack\n\n# Clean old logs\nfind /var/log/bookstack -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bookstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bookstack.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bookstack/bookstack</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bookstack.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.bookstack.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1268,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-22T06:19:30.837Z","metadataVersion":"2.0"},{"name":"dokuwiki","displayName":"dokuwiki Installation Guide","slug":"dokuwiki","description":"dokuwiki is a free and open-source wiki without database. DokuWiki provides simple wiki that stores data in plain text files","category":"documentation","subcategory":"documentation","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["documentation","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/documentation/dokuwiki","documentationUrl":"https://howtomgr.github.io/documentation/dokuwiki","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/dokuwiki","updatedAt":"2025-09-16T17:08:31Z","createdAt":"2025-09-16T02:32:10Z","readmeRaw":"# dokuwiki Installation Guide\n\ndokuwiki is a free and open-source wiki without database. DokuWiki provides simple wiki that stores data in plain text files\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 500MB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default dokuwiki port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dokuwiki\nsudo dnf install -y dokuwiki\n\n# Enable and start service\nsudo systemctl enable --now dokuwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndokuwiki --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install dokuwiki\nsudo apt install -y dokuwiki\n\n# Enable and start service\nsudo systemctl enable --now dokuwiki\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ndokuwiki --version\n```\n\n### Arch Linux\n\n```bash\n# Install dokuwiki\nsudo pacman -S dokuwiki\n\n# Enable and start service\nsudo systemctl enable --now dokuwiki\n\n# Verify installation\ndokuwiki --version\n```\n\n### Alpine Linux\n\n```bash\n# Install dokuwiki\napk add --no-cache dokuwiki\n\n# Enable and start service\nrc-update add dokuwiki default\nrc-service dokuwiki start\n\n# Verify installation\ndokuwiki --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dokuwiki\nsudo zypper install -y dokuwiki\n\n# Enable and start service\nsudo systemctl enable --now dokuwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndokuwiki --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install dokuwiki\n\n# Start service\nbrew services start dokuwiki\n\n# Verify installation\ndokuwiki --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install dokuwiki\n\n# Enable in rc.conf\necho 'dokuwiki_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dokuwiki start\n\n# Verify installation\ndokuwiki --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install dokuwiki\n\n# Or using Scoop\nscoop install dokuwiki\n\n# Verify installation\ndokuwiki --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/dokuwiki\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndokuwiki --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable dokuwiki\n\n# Start service\nsudo systemctl start dokuwiki\n\n# Stop service\nsudo systemctl stop dokuwiki\n\n# Restart service\nsudo systemctl restart dokuwiki\n\n# Check status\nsudo systemctl status dokuwiki\n\n# View logs\nsudo journalctl -u dokuwiki -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add dokuwiki default\n\n# Start service\nrc-service dokuwiki start\n\n# Stop service\nrc-service dokuwiki stop\n\n# Restart service\nrc-service dokuwiki restart\n\n# Check status\nrc-service dokuwiki status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'dokuwiki_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dokuwiki start\n\n# Stop service\nservice dokuwiki stop\n\n# Restart service\nservice dokuwiki restart\n\n# Check status\nservice dokuwiki status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start dokuwiki\nbrew services stop dokuwiki\nbrew services restart dokuwiki\n\n# Check status\nbrew services list | grep dokuwiki\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start dokuwiki\n\n# Stop service\nnet stop dokuwiki\n\n# Using PowerShell\nStart-Service dokuwiki\nStop-Service dokuwiki\nRestart-Service dokuwiki\n\n# Check status\nGet-Service dokuwiki\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream dokuwiki_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name dokuwiki.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dokuwiki.example.com;\n\n    ssl_certificate /etc/ssl/certs/dokuwiki.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dokuwiki.example.com.key;\n\n    location / {\n        proxy_pass http://dokuwiki_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName dokuwiki.example.com\n    Redirect permanent / https://dokuwiki.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName dokuwiki.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dokuwiki.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dokuwiki.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend dokuwiki_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dokuwiki.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dokuwiki_backend\n\nbackend dokuwiki_backend\n    balance roundrobin\n    server dokuwiki1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R dokuwiki:dokuwiki /etc/dokuwiki\nsudo chmod 750 /etc/dokuwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status dokuwiki\n\n# View logs\nsudo journalctl -u dokuwiki -f\n\n# Monitor resource usage\ntop -p $(pgrep dokuwiki)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/dokuwiki\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/dokuwiki-backup-$DATE.tar.gz\" /etc/dokuwiki /var/lib/dokuwiki\n\necho \"Backup completed: $BACKUP_DIR/dokuwiki-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop dokuwiki\n\n# Restore from backup\ntar -xzf /backup/dokuwiki/dokuwiki-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start dokuwiki\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u dokuwiki -n 100\nsudo tail -f /var/log/dokuwiki/dokuwiki.log\n\n# Check configuration\ndokuwiki --version\n\n# Check permissions\nls -la /etc/dokuwiki\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep dokuwiki)\n\n# Check disk I/O\niotop -p $(pgrep dokuwiki)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  dokuwiki:\n    image: dokuwiki:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/dokuwiki\n      - ./data:/var/lib/dokuwiki\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dokuwiki\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade dokuwiki\n\n# Arch Linux\nsudo pacman -Syu dokuwiki\n\n# Alpine Linux\napk update && apk upgrade dokuwiki\n\n# openSUSE\nsudo zypper update dokuwiki\n\n# FreeBSD\npkg update && pkg upgrade dokuwiki\n\n# Always backup before updates\ntar -czf /backup/dokuwiki-pre-update-$(date +%Y%m%d).tar.gz /etc/dokuwiki\n\n# Restart after updates\nsudo systemctl restart dokuwiki\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/dokuwiki\n\n# Clean old logs\nfind /var/log/dokuwiki -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/dokuwiki\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.dokuwiki.org/\n- GitHub Repository: https://github.com/dokuwiki/dokuwiki\n- Community Forum: https://forum.dokuwiki.org/\n- Best Practices Guide: https://docs.dokuwiki.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">dokuwiki is a free and open-source wiki without database. DokuWiki provides simple wiki that stores data in plain text files</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default dokuwiki port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dokuwiki\nsudo dnf install -y dokuwiki\n\n# Enable and start service\nsudo systemctl enable --now dokuwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install dokuwiki\nsudo apt install -y dokuwiki\n\n# Enable and start service\nsudo systemctl enable --now dokuwiki\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dokuwiki\nsudo pacman -S dokuwiki\n\n# Enable and start service\nsudo systemctl enable --now dokuwiki\n\n# Verify installation\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dokuwiki\napk add --no-cache dokuwiki\n\n# Enable and start service\nrc-update add dokuwiki default\nrc-service dokuwiki start\n\n# Verify installation\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dokuwiki\nsudo zypper install -y dokuwiki\n\n# Enable and start service\nsudo systemctl enable --now dokuwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install dokuwiki\n\n# Start service\nbrew services start dokuwiki\n\n# Verify installation\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install dokuwiki\n\n# Enable in rc.conf\necho &#039;dokuwiki_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dokuwiki start\n\n# Verify installation\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install dokuwiki\n\n# Or using Scoop\nscoop install dokuwiki\n\n# Verify installation\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/dokuwiki\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndokuwiki --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable dokuwiki\n\n# Start service\nsudo systemctl start dokuwiki\n\n# Stop service\nsudo systemctl stop dokuwiki\n\n# Restart service\nsudo systemctl restart dokuwiki\n\n# Check status\nsudo systemctl status dokuwiki\n\n# View logs\nsudo journalctl -u dokuwiki -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add dokuwiki default\n\n# Start service\nrc-service dokuwiki start\n\n# Stop service\nrc-service dokuwiki stop\n\n# Restart service\nrc-service dokuwiki restart\n\n# Check status\nrc-service dokuwiki status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;dokuwiki_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dokuwiki start\n\n# Stop service\nservice dokuwiki stop\n\n# Restart service\nservice dokuwiki restart\n\n# Check status\nservice dokuwiki status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start dokuwiki\nbrew services stop dokuwiki\nbrew services restart dokuwiki\n\n# Check status\nbrew services list | grep dokuwiki</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start dokuwiki\n\n# Stop service\nnet stop dokuwiki\n\n# Using PowerShell\nStart-Service dokuwiki\nStop-Service dokuwiki\nRestart-Service dokuwiki\n\n# Check status\nGet-Service dokuwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream dokuwiki_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name dokuwiki.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dokuwiki.example.com;\n\n    ssl_certificate /etc/ssl/certs/dokuwiki.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dokuwiki.example.com.key;\n\n    location / {\n        proxy_pass http://dokuwiki_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName dokuwiki.example.com\n    Redirect permanent / https://dokuwiki.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName dokuwiki.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dokuwiki.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dokuwiki.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend dokuwiki_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dokuwiki.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dokuwiki_backend\n\nbackend dokuwiki_backend\n    balance roundrobin\n    server dokuwiki1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dokuwiki:dokuwiki /etc/dokuwiki\nsudo chmod 750 /etc/dokuwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status dokuwiki\n\n# View logs\nsudo journalctl -u dokuwiki -f\n\n# Monitor resource usage\ntop -p $(pgrep dokuwiki)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/dokuwiki&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/dokuwiki-backup-$DATE.tar.gz&quot; /etc/dokuwiki /var/lib/dokuwiki\n\necho &quot;Backup completed: $BACKUP_DIR/dokuwiki-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop dokuwiki\n\n# Restore from backup\ntar -xzf /backup/dokuwiki/dokuwiki-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start dokuwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u dokuwiki -n 100\nsudo tail -f /var/log/dokuwiki/dokuwiki.log\n\n# Check configuration\ndokuwiki --version\n\n# Check permissions\nls -la /etc/dokuwiki</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep dokuwiki)\n\n# Check disk I/O\niotop -p $(pgrep dokuwiki)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  dokuwiki:\n    image: dokuwiki:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/dokuwiki\n      - ./data:/var/lib/dokuwiki\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dokuwiki\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade dokuwiki\n\n# Arch Linux\nsudo pacman -Syu dokuwiki\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade dokuwiki\n\n# openSUSE\nsudo zypper update dokuwiki\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade dokuwiki\n\n# Always backup before updates\ntar -czf /backup/dokuwiki-pre-update-$(date +%Y%m%d).tar.gz /etc/dokuwiki\n\n# Restart after updates\nsudo systemctl restart dokuwiki</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/dokuwiki\n\n# Clean old logs\nfind /var/log/dokuwiki -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/dokuwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.dokuwiki.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/dokuwiki/dokuwiki</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.dokuwiki.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.dokuwiki.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1272,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-22T06:19:08.161Z","metadataVersion":"2.0"},{"name":"outline","displayName":"Outline Installation Guide","slug":"outline","description":"Modern team knowledge base with real-time collaboration, powerful search, and intuitive interface. Essential tool for documentation, note-taking, and team knowledge sharing with enterprise-grade security.","category":"documentation","subcategory":"documentation","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[15,3000,5432,6379,9000,9001],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["documentation","containerization","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/documentation/outline","documentationUrl":"https://howtomgr.github.io/documentation/outline","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/outline","updatedAt":"2025-09-16T17:39:52Z","createdAt":"2025-09-16T07:57:08Z","readmeRaw":"# Outline Installation Guide\n\nModern team knowledge base with real-time collaboration, powerful search, and intuitive interface. Essential tool for documentation, note-taking, and team knowledge sharing with enterprise-grade security.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- Linux system (any modern distribution)\n- Docker and Docker Compose\n- Root or sudo access\n- PostgreSQL or MySQL database\n- Redis for caching\n- S3-compatible storage (MinIO, AWS S3)\n- SMTP server for notifications\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### Docker Compose (Recommended)\n```bash\n# Create Outline directory\nmkdir -p ~/outline\ncd ~/outline\n\n# Generate secrets\nSECRET_KEY=$(openssl rand -hex 32)\nUTILS_SECRET=$(openssl rand -hex 32)\n\n# Create Docker Compose configuration\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  outline:\n    image: outlinewiki/outline:latest\n    container_name: outline\n    restart: unless-stopped\n    ports:\n      - \"127.0.0.1:3000:3000\"\n    environment:\n      # Server configuration\n      - SECRET_KEY=${SECRET_KEY}\n      - UTILS_SECRET=${UTILS_SECRET}\n      - DATABASE_URL=postgres://outline:outline_password@postgres:5432/outline\n      - REDIS_URL=redis://redis:6379\n      \n      # Application settings\n      - URL=https://docs.example.com\n      - PORT=3000\n      - FORCE_HTTPS=true\n      \n      # Authentication (Slack example)\n      - SLACK_CLIENT_ID=your_slack_client_id\n      - SLACK_CLIENT_SECRET=your_slack_client_secret\n      \n      # Alternative: Google OAuth\n      # - GOOGLE_CLIENT_ID=your_google_client_id\n      # - GOOGLE_CLIENT_SECRET=your_google_client_secret\n      \n      # File storage (S3-compatible)\n      - AWS_ACCESS_KEY_ID=minio_access_key\n      - AWS_SECRET_ACCESS_KEY=minio_secret_key\n      - AWS_REGION=us-east-1\n      - AWS_S3_UPLOAD_BUCKET_URL=http://minio:9000\n      - AWS_S3_UPLOAD_BUCKET_NAME=outline-uploads\n      - AWS_S3_UPLOAD_MAX_SIZE=26214400\n      - AWS_S3_FORCE_PATH_STYLE=true\n      \n      # Email configuration\n      - SMTP_HOST=smtp.example.com\n      - SMTP_PORT=587\n      - SMTP_USERNAME=outline@example.com\n      - SMTP_PASSWORD=smtp_secure_password\n      - SMTP_FROM_EMAIL=outline@example.com\n      - SMTP_REPLY_EMAIL=outline@example.com\n      - SMTP_TLS_CIPHERS=\n      - SMTP_SECURE=true\n      \n      # Security settings\n      - ENABLE_UPDATES=false\n      - WEB_CONCURRENCY=1\n      - MAXIMUM_IMPORT_SIZE=5120000\n      - DEBUG=cache,presenters,events\n      \n    volumes:\n      - outline_data:/var/lib/outline/data\n    depends_on:\n      - postgres\n      - redis\n      - minio\n    networks:\n      - outline\n\n  postgres:\n    image: postgres:15-alpine\n    container_name: outline-postgres\n    restart: unless-stopped\n    environment:\n      - POSTGRES_DB=outline\n      - POSTGRES_USER=outline\n      - POSTGRES_PASSWORD=outline_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - outline\n\n  redis:\n    image: redis:alpine\n    container_name: outline-redis\n    restart: unless-stopped\n    command: redis-server --requirepass redis_secure_password\n    volumes:\n      - redis_data:/data\n    networks:\n      - outline\n\n  minio:\n    image: minio/minio:latest\n    container_name: outline-minio\n    restart: unless-stopped\n    ports:\n      - \"127.0.0.1:9000:9000\"\n      - \"127.0.0.1:9001:9001\"\n    environment:\n      - MINIO_ROOT_USER=minio_access_key\n      - MINIO_ROOT_PASSWORD=minio_secret_key\n    volumes:\n      - minio_data:/data\n    command: server /data --console-address \":9001\"\n    networks:\n      - outline\n\nnetworks:\n  outline:\n    driver: bridge\n\nvolumes:\n  outline_data:\n  postgres_data:\n  redis_data:\n  minio_data:\nEOF\n\n# Start Outline stack\ndocker-compose up -d\n\n# Create S3 bucket for uploads\ndocker exec outline-minio mc alias set local http://localhost:9000 minio_access_key minio_secret_key\ndocker exec outline-minio mc mb local/outline-uploads\ndocker exec outline-minio mc policy set public local/outline-uploads\n\n# Access Outline at https://localhost:3000\n```\n\n### NGINX Reverse Proxy with SSL\n```bash\nsudo tee /etc/nginx/sites-available/outline > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name docs.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name docs.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/docs.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/docs.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options SAMEORIGIN always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n\n    # File upload limits\n    client_max_body_size 25M;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        \n        # WebSocket support for real-time collaboration\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/outline /etc/nginx/sites-enabled/\nsudo certbot --nginx -d docs.example.com\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n## Backup and Monitoring\n\n### Backup Strategy\n```bash\nsudo tee /usr/local/bin/outline-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/outline\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,uploads}\n\necho \"Starting Outline backup...\"\n\n# Backup PostgreSQL database\ndocker exec outline-postgres pg_dump -U outline outline > ${BACKUP_DIR}/database/outline-${DATE}.sql\ngzip ${BACKUP_DIR}/database/outline-${DATE}.sql\n\n# Backup MinIO uploads\ndocker exec outline-minio mc cp --recursive local/outline-uploads /tmp/uploads-backup/\ndocker cp outline-minio:/tmp/uploads-backup ${BACKUP_DIR}/uploads/outline-uploads-${DATE}\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://outline-backups/ --recursive\n\n# Keep last 14 backups\nfind ${BACKUP_DIR} -name \"outline-*\" -type f -mtime +14 -delete\n\necho \"Outline backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/outline-backup.sh\necho \"0 2 * * * root /usr/local/bin/outline-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/outline-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/outline-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check Outline container\nif docker ps --filter name=outline --filter status=running -q | grep -q .; then\n    log_message \"✓ Outline container running\"\nelse\n    log_message \"✗ Outline container not running\"\nfi\n\n# Check web interface\nif curl -f http://localhost:3000/health >/dev/null 2>&1; then\n    log_message \"✓ Outline web interface responding\"\nelse\n    log_message \"✗ Outline web interface not responding\"\nfi\n\n# Check dependencies\nif docker ps --filter name=outline-postgres --filter status=running -q | grep -q .; then\n    log_message \"✓ PostgreSQL database running\"\nelse\n    log_message \"✗ PostgreSQL database not running\"\nfi\n\nif docker ps --filter name=outline-redis --filter status=running -q | grep -q .; then\n    log_message \"✓ Redis cache running\"\nelse\n    log_message \"✗ Redis cache not running\"\nfi\n\nlog_message \"Outline health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/outline-health.sh\necho \"*/15 * * * * root /usr/local/bin/outline-health.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Outline Documentation](https://docs.getoutline.com/)\n- [Outline GitHub](https://github.com/outline/outline)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<p class=\"mobile-paragraph\">Modern team knowledge base with real-time collaboration, powerful search, and intuitive interface. Essential tool for documentation, note-taking, and team knowledge sharing with enterprise-grade security.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Docker and Docker Compose</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">PostgreSQL or MySQL database</li>\n<li class=\"mobile-list-item\">Redis for caching</li>\n<li class=\"mobile-list-item\">S3-compatible storage (MinIO, AWS S3)</li>\n<li class=\"mobile-list-item\">SMTP server for notifications</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"docker-compose-recommended\" class=\"mobile-header\">Docker Compose (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Outline directory\nmkdir -p ~/outline\ncd ~/outline\n\n# Generate secrets\nSECRET_KEY=$(openssl rand -hex 32)\nUTILS_SECRET=$(openssl rand -hex 32)\n\n# Create Docker Compose configuration\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  outline:\n    image: outlinewiki/outline:latest\n    container_name: outline\n    restart: unless-stopped\n    ports:\n      - &quot;127.0.0.1:3000:3000&quot;\n    environment:\n      # Server configuration\n      - SECRET_KEY=${SECRET_KEY}\n      - UTILS_SECRET=${UTILS_SECRET}\n      - DATABASE_URL=postgres://outline:outline_password@postgres:5432/outline\n      - REDIS_URL=redis://redis:6379\n      \n      # Application settings\n      - URL=https://docs.example.com\n      - PORT=3000\n      - FORCE_HTTPS=true\n      \n      # Authentication (Slack example)\n      - SLACK_CLIENT_ID=your_slack_client_id\n      - SLACK_CLIENT_SECRET=your_slack_client_secret\n      \n      # Alternative: Google OAuth\n      # - GOOGLE_CLIENT_ID=your_google_client_id\n      # - GOOGLE_CLIENT_SECRET=your_google_client_secret\n      \n      # File storage (S3-compatible)\n      - AWS_ACCESS_KEY_ID=minio_access_key\n      - AWS_SECRET_ACCESS_KEY=minio_secret_key\n      - AWS_REGION=us-east-1\n      - AWS_S3_UPLOAD_BUCKET_URL=http://minio:9000\n      - AWS_S3_UPLOAD_BUCKET_NAME=outline-uploads\n      - AWS_S3_UPLOAD_MAX_SIZE=26214400\n      - AWS_S3_FORCE_PATH_STYLE=true\n      \n      # Email configuration\n      - SMTP_HOST=smtp.example.com\n      - SMTP_PORT=587\n      - SMTP_USERNAME=outline@example.com\n      - SMTP_PASSWORD=smtp_secure_password\n      - SMTP_FROM_EMAIL=outline@example.com\n      - SMTP_REPLY_EMAIL=outline@example.com\n      - SMTP_TLS_CIPHERS=\n      - SMTP_SECURE=true\n      \n      # Security settings\n      - ENABLE_UPDATES=false\n      - WEB_CONCURRENCY=1\n      - MAXIMUM_IMPORT_SIZE=5120000\n      - DEBUG=cache,presenters,events\n      \n    volumes:\n      - outline_data:/var/lib/outline/data\n    depends_on:\n      - postgres\n      - redis\n      - minio\n    networks:\n      - outline\n\n  postgres:\n    image: postgres:15-alpine\n    container_name: outline-postgres\n    restart: unless-stopped\n    environment:\n      - POSTGRES_DB=outline\n      - POSTGRES_USER=outline\n      - POSTGRES_PASSWORD=outline_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - outline\n\n  redis:\n    image: redis:alpine\n    container_name: outline-redis\n    restart: unless-stopped\n    command: redis-server --requirepass redis_secure_password\n    volumes:\n      - redis_data:/data\n    networks:\n      - outline\n\n  minio:\n    image: minio/minio:latest\n    container_name: outline-minio\n    restart: unless-stopped\n    ports:\n      - &quot;127.0.0.1:9000:9000&quot;\n      - &quot;127.0.0.1:9001:9001&quot;\n    environment:\n      - MINIO_ROOT_USER=minio_access_key\n      - MINIO_ROOT_PASSWORD=minio_secret_key\n    volumes:\n      - minio_data:/data\n    command: server /data --console-address &quot;:9001&quot;\n    networks:\n      - outline\n\nnetworks:\n  outline:\n    driver: bridge\n\nvolumes:\n  outline_data:\n  postgres_data:\n  redis_data:\n  minio_data:\nEOF\n\n# Start Outline stack\ndocker-compose up -d\n\n# Create S3 bucket for uploads\ndocker exec outline-minio mc alias set local http://localhost:9000 minio_access_key minio_secret_key\ndocker exec outline-minio mc mb local/outline-uploads\ndocker exec outline-minio mc policy set public local/outline-uploads\n\n# Access Outline at https://localhost:3000</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy-with-ssl\" class=\"mobile-header\">NGINX Reverse Proxy with SSL</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/nginx/sites-available/outline &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name docs.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name docs.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/docs.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/docs.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options SAMEORIGIN always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n\n    # File upload limits\n    client_max_body_size 25M;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        \n        # WebSocket support for real-time collaboration\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/outline /etc/nginx/sites-enabled/\nsudo certbot --nginx -d docs.example.com\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-monitoring\" class=\"mobile-header\">Backup and Monitoring</h2>\n<h3 id=\"backup-strategy\" class=\"mobile-header\">Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/outline-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/outline&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,uploads}\n\necho &quot;Starting Outline backup...&quot;\n\n# Backup PostgreSQL database\ndocker exec outline-postgres pg_dump -U outline outline &gt; ${BACKUP_DIR}/database/outline-${DATE}.sql\ngzip ${BACKUP_DIR}/database/outline-${DATE}.sql\n\n# Backup MinIO uploads\ndocker exec outline-minio mc cp --recursive local/outline-uploads /tmp/uploads-backup/\ndocker cp outline-minio:/tmp/uploads-backup ${BACKUP_DIR}/uploads/outline-uploads-${DATE}\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://outline-backups/ --recursive\n\n# Keep last 14 backups\nfind ${BACKUP_DIR} -name &quot;outline-*&quot; -type f -mtime +14 -delete\n\necho &quot;Outline backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/outline-backup.sh\necho &quot;0 2 * * * root /usr/local/bin/outline-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/outline-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/outline-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check Outline container\nif docker ps --filter name=outline --filter status=running -q | grep -q .; then\n    log_message &quot;✓ Outline container running&quot;\nelse\n    log_message &quot;✗ Outline container not running&quot;\nfi\n\n# Check web interface\nif curl -f http://localhost:3000/health &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Outline web interface responding&quot;\nelse\n    log_message &quot;✗ Outline web interface not responding&quot;\nfi\n\n# Check dependencies\nif docker ps --filter name=outline-postgres --filter status=running -q | grep -q .; then\n    log_message &quot;✓ PostgreSQL database running&quot;\nelse\n    log_message &quot;✗ PostgreSQL database not running&quot;\nfi\n\nif docker ps --filter name=outline-redis --filter status=running -q | grep -q .; then\n    log_message &quot;✓ Redis cache running&quot;\nelse\n    log_message &quot;✗ Redis cache not running&quot;\nfi\n\nlog_message &quot;Outline health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/outline-health.sh\necho &quot;*/15 * * * * root /usr/local/bin/outline-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.getoutline.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Outline Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/outline/outline\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Outline GitHub</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"5 min","wordCount":850,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Docker Compose (Recommended)","id":"docker-compose-recommended"},{"level":3,"text":"NGINX Reverse Proxy with SSL","id":"nginx-reverse-proxy-with-ssl"},{"level":2,"text":"Backup and Monitoring","id":"backup-and-monitoring"},{"level":3,"text":"Backup Strategy","id":"backup-strategy"},{"level":3,"text":"Health Monitoring","id":"health-monitoring"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-22T06:17:29.687Z","metadataVersion":"2.0"}]},"__N_SSG":true}