{"pageProps":{"guide":{"name":"postgresql","displayName":"PostgreSQL Installation Guide","slug":"postgresql","description":"PostgreSQL is a free and open-source relational database management system (RDBMS) emphasizing extensibility and SQL compliance. Originally developed at UC Berkeley as POSTGRES, it has evolved into the world's most advanced open source database, competing directly with commercial solutions like Oracle Database, Microsoft SQL Server, and IBM Db2. PostgreSQL serves as a FOSS alternative to these expensive proprietary databases while offering comparable performance, reliability, and advanced features like JSON support, full-text search, and custom data types.","category":"databases","subcategory":"databases","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[1,5432],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["databases","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/databases/postgresql","documentationUrl":"https://howtomgr.github.io/databases/postgresql","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/postgresql","updatedAt":"2025-09-16T17:42:56Z","createdAt":"2025-09-16T08:02:48Z","readmeRaw":"# PostgreSQL Installation Guide\n\nPostgreSQL is a free and open-source relational database management system (RDBMS) emphasizing extensibility and SQL compliance. Originally developed at UC Berkeley as POSTGRES, it has evolved into the world's most advanced open source database, competing directly with commercial solutions like Oracle Database, Microsoft SQL Server, and IBM Db2. PostgreSQL serves as a FOSS alternative to these expensive proprietary databases while offering comparable performance, reliability, and advanced features like JSON support, full-text search, and custom data types.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 2GB minimum (8GB+ recommended for production)\n  - Storage: 1GB for installation (SSD strongly recommended for data)\n  - IOPS: 3000+ recommended for production workloads\n- **Operating System**: Linux, BSD, macOS, or Windows\n- **Network Requirements**:\n  - Port 5432 (default PostgreSQL port)\n  - Additional ports for replication if needed\n  - Low latency network for clustered setups\n- **Dependencies**:\n  - GNU make 3.81+ (for building from source)\n  - ISO/ANSI C compiler (gcc 4.7+ recommended)\n  - tar, gzip or bzip2 for unpacking source\n  - readline library (for psql command history)\n  - zlib library (for pg_dump compression)\n  - OpenSSL library (for SSL connections)\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# RHEL/CentOS 7\n# Install PostgreSQL official repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL 16 (latest stable)\nsudo yum install -y postgresql16-server postgresql16 postgresql16-contrib\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable postgresql-16\nsudo systemctl start postgresql-16\n\n# RHEL/CentOS/Rocky/AlmaLinux 8+\n# Install PostgreSQL official repository\nsudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Disable built-in PostgreSQL module\nsudo dnf -qy module disable postgresql\n\n# Install PostgreSQL 16\nsudo dnf install -y postgresql16-server postgresql16 postgresql16-contrib\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable --now postgresql-16\n```\n\n### Debian/Ubuntu\n\n```bash\n# Install prerequisites\nsudo apt update\nsudo apt install -y wget ca-certificates\n\n# Add PostgreSQL APT repository\nsudo install -d /usr/share/postgresql-common/pgdg\nsudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc\nsudo sh -c 'echo \"deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\n\n# Update package list\nsudo apt update\n\n# Install PostgreSQL 16\nsudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16\n\n# PostgreSQL should start automatically\nsudo systemctl status postgresql\n```\n\n### Arch Linux\n\n```bash\n# Install PostgreSQL from official repositories\nsudo pacman -S postgresql postgresql-libs\n\n# Optional: Install additional tools\nsudo pacman -S postgresql-old-upgrade  # For upgrading from older versions\n\n# Initialize the database cluster\nsudo -u postgres initdb -D /var/lib/postgres/data\n\n# Enable and start service\nsudo systemctl enable --now postgresql\n\n# For development headers\nsudo pacman -S postgresql-libs\n```\n\n### Alpine Linux\n\n```bash\n# Install PostgreSQL\napk add --no-cache postgresql postgresql-client postgresql-contrib\n\n# Install additional packages for full functionality\napk add --no-cache postgresql-dev postgresql-docs\n\n# Create postgres user if not exists\nadduser -D -H -s /sbin/nologin -g postgres postgres\n\n# Initialize database\nsu - postgres -s /bin/sh -c \"initdb -D /var/lib/postgresql/data\"\n\n# Enable and start service\nrc-update add postgresql default\nrc-service postgresql start\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y postgresql16 postgresql16-server postgresql16-contrib\n\n# Initialize database (if not auto-initialized)\nsudo systemctl start postgresql\n\n# If initialization is needed\nsudo -u postgres initdb -D /var/lib/pgsql/data\n\n# Enable service\nsudo systemctl enable postgresql\n\n# SLES 15\n# Enable Web and Scripting Module\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\n\n# Install PostgreSQL\nsudo zypper install -y postgresql16 postgresql16-server\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install postgresql@16\n\n# Add to PATH\necho 'export PATH=\"/usr/local/opt/postgresql@16/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc\n\n# Initialize database\ninitdb /usr/local/var/postgresql@16\n\n# Start PostgreSQL\nbrew services start postgresql@16\n\n# Alternative: Using MacPorts\nsudo port install postgresql16 +universal\nsudo port install postgresql16-server\n\n# Initialize database\nsudo mkdir -p /opt/local/var/db/postgresql16/defaultdb\nsudo chown postgres:postgres /opt/local/var/db/postgresql16/defaultdb\nsudo -u postgres /opt/local/lib/postgresql16/bin/initdb -D /opt/local/var/db/postgresql16/defaultdb\n```\n\n### FreeBSD\n\n```bash\n# Install PostgreSQL\npkg install postgresql16-server postgresql16-client postgresql16-contrib\n\n# Enable PostgreSQL\necho 'postgresql_enable=\"YES\"' >> /etc/rc.conf\n\n# Initialize database\nservice postgresql initdb\n\n# Start PostgreSQL\nservice postgresql start\n\n# For development\npkg install postgresql16-plpython py39-psycopg2\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install postgresql16 --params '/Password:StrongPassword123!'\n\n# Method 2: Using the official installer\n# Download from https://www.postgresql.org/download/windows/\n# Run the installer with administrative privileges\n\n# Method 3: Using winget\nwinget install --id PostgreSQL.PostgreSQL\n\n# After installation, add to PATH\n[Environment]::SetEnvironmentVariable(\"Path\", \"$env:Path;C:\\Program Files\\PostgreSQL\\16\\bin\", \"Machine\")\n\n# Initialize database (usually done by installer)\ninitdb -D \"C:\\Program Files\\PostgreSQL\\16\\data\" -U postgres -W\n\n# Register as Windows service\npg_ctl register -N postgresql-16 -D \"C:\\Program Files\\PostgreSQL\\16\\data\"\n\n# Start service\nnet start postgresql-16\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Switch to postgres user**:\n```bash\n# Linux/BSD systems\nsudo -i -u postgres\n\n# Or use sudo for individual commands\nsudo -u postgres psql\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/var/lib/pgsql/16/data/postgresql.conf`\n- Debian/Ubuntu: `/etc/postgresql/16/main/postgresql.conf`\n- Arch Linux: `/var/lib/postgres/data/postgresql.conf`\n- Alpine Linux: `/var/lib/postgresql/data/postgresql.conf`\n- openSUSE/SLES: `/var/lib/pgsql/data/postgresql.conf`\n- macOS: `/usr/local/var/postgresql@16/postgresql.conf`\n- FreeBSD: `/var/db/postgres/data16/postgresql.conf`\n- Windows: `C:\\Program Files\\PostgreSQL\\16\\data\\postgresql.conf`\n\n3. **Essential settings to change**:\n\n```bash\n# Edit postgresql.conf\nsudo -u postgres vi /var/lib/pgsql/16/data/postgresql.conf\n\n# Key settings to modify:\nlisten_addresses = 'localhost'  # Change to '*' for network access\nport = 5432\nmax_connections = 100           # Increase based on needs\nshared_buffers = 256MB          # Set to 25% of RAM\neffective_cache_size = 1GB      # Set to 50-75% of RAM\nwork_mem = 4MB                  # Increase for complex queries\nmaintenance_work_mem = 64MB     # For VACUUM, CREATE INDEX\n\n# Enable logging\nlogging_collector = on\nlog_directory = 'log'\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\n```\n\n4. **Configure authentication** (pg_hba.conf):\n```bash\n# Edit pg_hba.conf\nsudo -u postgres vi /var/lib/pgsql/16/data/pg_hba.conf\n\n# Change authentication method from 'ident' to 'md5' or 'scram-sha-256'\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     scram-sha-256\nhost    all             all             127.0.0.1/32            scram-sha-256\nhost    all             all             ::1/128                 scram-sha-256\n```\n\n5. **Set postgres user password**:\n```bash\nsudo -u postgres psql\npostgres=# ALTER USER postgres PASSWORD 'StrongPassword123!';\npostgres=# \\q\n```\n\n### Testing Initial Setup\n\n```bash\n# Test local connection\nsudo -u postgres psql -c \"SELECT version();\"\n\n# Create a test database\nsudo -u postgres createdb testdb\n\n# Connect to test database\nsudo -u postgres psql testdb\n\n# Run test query\ntestdb=# CREATE TABLE test (id serial PRIMARY KEY, name varchar(50));\ntestdb=# INSERT INTO test (name) VALUES ('PostgreSQL');\ntestdb=# SELECT * FROM test;\ntestdb=# \\q\n\n# Drop test database\nsudo -u postgres dropdb testdb\n```\n\n**WARNING:** Never use default passwords in production! Always set strong passwords and restrict network access.\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable PostgreSQL to start on boot\nsudo systemctl enable postgresql    # or postgresql-16 on RHEL\n\n# Start PostgreSQL\nsudo systemctl start postgresql\n\n# Stop PostgreSQL\nsudo systemctl stop postgresql\n\n# Restart PostgreSQL\nsudo systemctl restart postgresql\n\n# Reload configuration without restart\nsudo systemctl reload postgresql\n\n# Check status\nsudo systemctl status postgresql\n\n# View logs\nsudo journalctl -u postgresql -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable PostgreSQL to start on boot\nrc-update add postgresql default\n\n# Start PostgreSQL\nrc-service postgresql start\n\n# Stop PostgreSQL\nrc-service postgresql stop\n\n# Restart PostgreSQL\nrc-service postgresql restart\n\n# Reload configuration\nrc-service postgresql reload\n\n# Check status\nrc-service postgresql status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'postgresql_enable=\"YES\"' >> /etc/rc.conf\n\n# Start PostgreSQL\nservice postgresql start\n\n# Stop PostgreSQL\nservice postgresql stop\n\n# Restart PostgreSQL\nservice postgresql restart\n\n# Reload configuration\nservice postgresql reload\n\n# Check status\nservice postgresql status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start postgresql@16\nbrew services stop postgresql@16\nbrew services restart postgresql@16\n\n# Manual control\npg_ctl -D /usr/local/var/postgresql@16 start\npg_ctl -D /usr/local/var/postgresql@16 stop\npg_ctl -D /usr/local/var/postgresql@16 restart\n\n# Check status\nbrew services list | grep postgresql\n```\n\n### Windows Service Manager\n\n```powershell\n# Start PostgreSQL service\nnet start postgresql-16\n\n# Stop PostgreSQL service\nnet stop postgresql-16\n\n# Restart PostgreSQL service\nnet stop postgresql-16 && net start postgresql-16\n\n# Using pg_ctl\npg_ctl -D \"C:\\Program Files\\PostgreSQL\\16\\data\" start\npg_ctl -D \"C:\\Program Files\\PostgreSQL\\16\\data\" stop\npg_ctl -D \"C:\\Program Files\\PostgreSQL\\16\\data\" restart\n\n# Check status\nsc query postgresql-16\n```\n\n## Advanced Configuration\n\n### 8. Performance Tuning\n\n```bash\n# Calculate settings based on system resources\n# Edit postgresql.conf\n\n# Memory Settings (for 8GB RAM system)\nshared_buffers = 2GB              # 25% of RAM\neffective_cache_size = 6GB        # 75% of RAM\nmaintenance_work_mem = 512MB      # RAM/16\nwork_mem = 32MB                   # RAM/256\nwal_buffers = 64MB               # 3% of shared_buffers\n\n# Checkpoint Settings\ncheckpoint_segments = 32          # Deprecated in newer versions\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\n\n# Connection Settings\nmax_connections = 200             # Adjust based on application\n\n# Parallel Query Execution (PG 9.6+)\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\n\n# Write Performance\nsynchronous_commit = on           # Set to off for better performance (less safe)\ncheckpoint_timeout = 15min\nmax_wal_size = 4GB\nmin_wal_size = 1GB\n\n# SSD Optimizations\nrandom_page_cost = 1.1           # Default is 4.0 (for HDD)\neffective_io_concurrency = 200   # 1-1000 (higher for SSD)\n```\n\n### SSL Configuration\n\n```bash\n# Generate SSL certificates\ncd /var/lib/pgsql/16/data\n\n# Create CA certificate\nopenssl genrsa -out ca.key 4096\nopenssl req -new -x509 -days 3650 -key ca.key -out ca.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=PostgreSQL-CA\"\n\n# Create server certificate\nopenssl genrsa -out server.key 4096\nopenssl req -new -key server.key -out server.csr \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=postgres.example.com\"\nopenssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\n# Set permissions\nchown postgres:postgres server.key server.crt ca.crt\nchmod 600 server.key\nchmod 644 server.crt ca.crt\n\n# Enable SSL in postgresql.conf\nssl = on\nssl_cert_file = 'server.crt'\nssl_key_file = 'server.key'\nssl_ca_file = 'ca.crt'\nssl_min_protocol_version = 'TLSv1.2'\n```\n\n## Reverse Proxy Setup\n\nPostgreSQL typically doesn't use HTTP reverse proxies, but connection poolers like PgBouncer or HAProxy can act as database proxies.\n\n### PgBouncer Configuration\n\n```bash\n# Install PgBouncer\n# RHEL/CentOS\nsudo yum install -y pgbouncer\n\n# Debian/Ubuntu\nsudo apt install -y pgbouncer\n\n# Configure PgBouncer (/etc/pgbouncer/pgbouncer.ini)\n[databases]\nmydb = host=127.0.0.1 port=5432 dbname=mydb\n\n[pgbouncer]\nlisten_port = 6432\nlisten_addr = *\nauth_type = scram-sha-256\nauth_file = /etc/pgbouncer/userlist.txt\npool_mode = transaction\nmax_client_conn = 1000\ndefault_pool_size = 25\n```\n\n### HAProxy Configuration\n\n```nginx\n# /etc/haproxy/haproxy.cfg\nglobal\n    maxconn 1000\n\ndefaults\n    mode tcp\n    timeout connect 10s\n    timeout client 30s\n    timeout server 30s\n\nlisten postgres\n    bind *:5432\n    option pgsql-check user haproxy\n    balance roundrobin\n    server pg1 192.168.1.10:5432 check\n    server pg2 192.168.1.11:5432 check backup\n```\n\n## Security Configuration\n\n### Authentication and Access Control\n\n```bash\n# Configure pg_hba.conf for secure access\n# /var/lib/pgsql/16/data/pg_hba.conf\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# Local connections\nlocal   all             postgres                                peer\nlocal   all             all                                     scram-sha-256\n\n# IPv4 local connections\nhost    all             all             127.0.0.1/32            scram-sha-256\n\n# IPv4 remote connections (specific network)\nhost    all             all             192.168.1.0/24          scram-sha-256\n\n# Reject all other connections\nhost    all             all             0.0.0.0/0               reject\n\n# IPv6 local connections\nhost    all             all             ::1/128                 scram-sha-256\n```\n\n### User and Role Management\n\n```sql\n-- Create roles with specific privileges\nCREATE ROLE readonly;\nGRANT CONNECT ON DATABASE mydb TO readonly;\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\n-- Create application user\nCREATE USER appuser WITH PASSWORD 'StrongAppPassword123!';\nGRANT CONNECT ON DATABASE mydb TO appuser;\nGRANT USAGE ON SCHEMA public TO appuser;\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO appuser;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO appuser;\n\n-- Create backup user\nCREATE USER backupuser WITH PASSWORD 'BackupPassword123!' REPLICATION;\n\n-- Revoke unnecessary privileges\nREVOKE CREATE ON SCHEMA public FROM PUBLIC;\n```\n\n### Row-Level Security (RLS)\n\n```sql\n-- Enable RLS on a table\nALTER TABLE sensitive_data ENABLE ROW LEVEL SECURITY;\n\n-- Create policy for users to see only their own data\nCREATE POLICY user_data_policy ON sensitive_data\n    FOR ALL\n    TO application_role\n    USING (user_id = current_user_id());\n\n-- Create policy for admins to see all data\nCREATE POLICY admin_policy ON sensitive_data\n    FOR ALL\n    TO admin_role\n    USING (true);\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 5432\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"192.168.1.0/24\" port protocol=\"tcp\" port=\"5432\" accept'\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 5432 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 5432\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"PostgreSQL\" -Direction Inbound -Protocol TCP -LocalPort 5432 -Action Allow\n```\n\n## Database Setup\n\n### Creating Databases and Schemas\n\n```sql\n-- Create database with specific encoding and locale\nCREATE DATABASE myapp\n    WITH \n    OWNER = appuser\n    ENCODING = 'UTF8'\n    LC_COLLATE = 'en_US.UTF-8'\n    LC_CTYPE = 'en_US.UTF-8'\n    TABLESPACE = pg_default\n    CONNECTION LIMIT = -1;\n\n-- Create schema\n\\c myapp\nCREATE SCHEMA IF NOT EXISTS app_schema AUTHORIZATION appuser;\n\n-- Set search path\nALTER DATABASE myapp SET search_path TO app_schema, public;\n\n-- Create extensions\nCREATE EXTENSION IF NOT EXISTS pg_stat_statements;\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n```\n\n### Table Partitioning\n\n```sql\n-- Create partitioned table\nCREATE TABLE measurements (\n    id BIGSERIAL,\n    sensor_id INTEGER,\n    reading NUMERIC,\n    created_at TIMESTAMP NOT NULL\n) PARTITION BY RANGE (created_at);\n\n-- Create partitions\nCREATE TABLE measurements_2024_01 PARTITION OF measurements\n    FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');\n\nCREATE TABLE measurements_2024_02 PARTITION OF measurements\n    FOR VALUES FROM ('2024-02-01') TO ('2024-03-01');\n\n-- Create index on partitions\nCREATE INDEX idx_measurements_2024_01_created_at ON measurements_2024_01 (created_at);\nCREATE INDEX idx_measurements_2024_02_created_at ON measurements_2024_02 (created_at);\n```\n\n## Performance Optimization\n\n### Query Optimization\n\n```sql\n-- Enable query timing\n\\timing on\n\n-- Analyze query performance\nEXPLAIN (ANALYZE, BUFFERS) SELECT * FROM large_table WHERE column = 'value';\n\n-- Create appropriate indexes\nCREATE INDEX idx_column ON large_table (column);\nCREATE INDEX idx_multi_column ON large_table (col1, col2) WHERE active = true;\n\n-- Update table statistics\nANALYZE large_table;\n\n-- Find missing indexes\nSELECT \n    schemaname,\n    tablename,\n    attname,\n    n_distinct,\n    most_common_vals\nFROM pg_stats\nWHERE schemaname NOT IN ('pg_catalog', 'information_schema')\n    AND n_distinct > 100\n    AND most_common_vals IS NULL;\n```\n\n### Connection Pooling\n\n```bash\n# Install PgBouncer for connection pooling\n# Configure /etc/pgbouncer/pgbouncer.ini\n[databases]\nmydb = host=localhost port=5432 dbname=mydb\n\n[pgbouncer]\nlisten_port = 6432\nlisten_addr = localhost\nauth_type = scram-sha-256\nauth_file = /etc/pgbouncer/userlist.txt\npool_mode = transaction\nmax_client_conn = 1000\ndefault_pool_size = 25\nmin_pool_size = 5\nreserve_pool_size = 5\nserver_idle_timeout = 600\n```\n\n### Vacuum and Maintenance\n\n```sql\n-- Manual VACUUM\nVACUUM (VERBOSE, ANALYZE) large_table;\n\n-- Configure autovacuum\nALTER TABLE large_table SET (autovacuum_vacuum_scale_factor = 0.1);\nALTER TABLE large_table SET (autovacuum_analyze_scale_factor = 0.05);\n\n-- Find tables that need vacuuming\nSELECT \n    schemaname,\n    tablename,\n    n_live_tup,\n    n_dead_tup,\n    last_vacuum,\n    last_autovacuum\nFROM pg_stat_user_tables\nWHERE n_dead_tup > 1000\nORDER BY n_dead_tup DESC;\n```\n\n## Monitoring\n\n### Built-in Monitoring Views\n\n```sql\n-- Current activity\nSELECT pid, usename, datname, state, query \nFROM pg_stat_activity \nWHERE state != 'idle';\n\n-- Database statistics\nSELECT \n    datname,\n    numbackends,\n    xact_commit,\n    xact_rollback,\n    blks_read,\n    blks_hit,\n    tup_returned,\n    tup_fetched,\n    tup_inserted,\n    tup_updated,\n    tup_deleted\nFROM pg_stat_database;\n\n-- Table I/O statistics\nSELECT \n    schemaname,\n    tablename,\n    seq_scan,\n    seq_tup_read,\n    idx_scan,\n    idx_tup_fetch,\n    n_tup_ins,\n    n_tup_upd,\n    n_tup_del\nFROM pg_stat_user_tables\nORDER BY seq_tup_read DESC;\n\n-- Cache hit ratio\nSELECT \n    sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) as cache_hit_ratio\nFROM pg_statio_user_tables;\n```\n\n### pg_stat_statements\n\n```sql\n-- Enable extension\nCREATE EXTENSION pg_stat_statements;\n\n-- Top queries by total time\nSELECT \n    query,\n    calls,\n    total_exec_time,\n    mean_exec_time,\n    stddev_exec_time,\n    rows\nFROM pg_stat_statements\nORDER BY total_exec_time DESC\nLIMIT 10;\n\n-- Reset statistics\nSELECT pg_stat_statements_reset();\n```\n\n### External Monitoring Tools\n\n```bash\n# Install check_postgres for Nagios/Icinga\nwget https://bucardo.org/check_postgres/check_postgres.tar.gz\ntar xzf check_postgres.tar.gz\ncd check_postgres-*\nperl Makefile.PL\nmake\nsudo make install\n\n# PostgreSQL Exporter for Prometheus\nwget https://github.com/prometheus-community/postgres_exporter/releases/download/v0.13.0/postgres_exporter-0.13.0.linux-amd64.tar.gz\ntar xzf postgres_exporter-*.tar.gz\nsudo cp postgres_exporter*/postgres_exporter /usr/local/bin/\n\n# Create systemd service for postgres_exporter\nsudo tee /etc/systemd/system/postgres_exporter.service <<EOF\n[Unit]\nDescription=PostgreSQL Exporter\nAfter=postgresql.service\n\n[Service]\nType=simple\nUser=postgres\nEnvironment=\"DATA_SOURCE_NAME=postgresql://postgres@localhost/postgres?sslmode=disable\"\nExecStart=/usr/local/bin/postgres_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now postgres_exporter\n```\n\n## 9. Backup and Restore\n\n### Logical Backups with pg_dump\n\n```bash\n# Backup single database\npg_dump -h localhost -U postgres -d mydb -F custom -b -v -f mydb_backup.dump\n\n# Backup all databases\npg_dumpall -h localhost -U postgres -f all_databases.sql\n\n# Backup with compression\npg_dump mydb | gzip > mydb_backup.sql.gz\n\n# Backup specific schemas\npg_dump -n schema1 -n schema2 mydb > schemas_backup.sql\n\n# Backup only schema (no data)\npg_dump -s mydb > mydb_schema.sql\n\n# Backup only data (no schema)\npg_dump -a mydb > mydb_data.sql\n```\n\n### Physical Backups with pg_basebackup\n\n```bash\n# Create base backup\npg_basebackup -h localhost -D /backup/postgres -U replicator -W -Fp -Xs -P\n\n# Create tar format backup\npg_basebackup -h localhost -D /backup/postgres -U replicator -W -Ft -z -Xs -P\n\n# Backup with specific tablespace mapping\npg_basebackup -h localhost -D /backup/postgres -T /old/tablespace=/new/tablespace\n```\n\n### Restore Procedures\n\n```bash\n# Restore from custom format dump\npg_restore -h localhost -U postgres -d mydb -v mydb_backup.dump\n\n# Restore to new database\ncreatedb -h localhost -U postgres newdb\npg_restore -h localhost -U postgres -d newdb -v mydb_backup.dump\n\n# Restore from SQL dump\npsql -h localhost -U postgres -d mydb < mydb_backup.sql\n\n# Restore specific tables\npg_restore -h localhost -U postgres -d mydb -t table1 -t table2 mydb_backup.dump\n\n# Restore with parallel jobs\npg_restore -h localhost -U postgres -d mydb -j 4 -v mydb_backup.dump\n```\n\n### Automated Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/pg_backup.sh\n\nBACKUP_DIR=\"/backup/postgresql\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nDATABASE=\"mydb\"\n\n# Create backup directory\nmkdir -p ${BACKUP_DIR}/{daily,weekly,monthly}\n\n# Perform backup\npg_dump -h localhost -U postgres -d ${DATABASE} -F custom -b -v \\\n    -f ${BACKUP_DIR}/daily/${DATABASE}_${TIMESTAMP}.dump\n\n# Compress older backups\nfind ${BACKUP_DIR}/daily -name \"*.dump\" -mtime +1 -exec gzip {} \\;\n\n# Keep only last 7 daily backups\nfind ${BACKUP_DIR}/daily -name \"*.dump.gz\" -mtime +7 -delete\n\n# Weekly backup (on Sunday)\nif [ $(date +%w) -eq 0 ]; then\n    cp ${BACKUP_DIR}/daily/${DATABASE}_${TIMESTAMP}.dump \\\n       ${BACKUP_DIR}/weekly/\nfi\n\n# Monthly backup (on 1st)\nif [ $(date +%d) -eq 01 ]; then\n    cp ${BACKUP_DIR}/daily/${DATABASE}_${TIMESTAMP}.dump \\\n       ${BACKUP_DIR}/monthly/\nfi\n\n# Log backup status\necho \"Backup completed: ${TIMESTAMP}\" >> ${BACKUP_DIR}/backup.log\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Connection refused**:\n```bash\n# Check if PostgreSQL is running\nsudo systemctl status postgresql\nps aux | grep postgres\n\n# Check if PostgreSQL is listening\nsudo netstat -tlnp | grep 5432\nsudo ss -tlnp | grep 5432\n\n# Check PostgreSQL logs\nsudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log\n```\n\n2. **Authentication failed**:\n```bash\n# Check pg_hba.conf settings\nsudo cat /var/lib/pgsql/16/data/pg_hba.conf\n\n# Test with different authentication\npsql -h localhost -U postgres -W\n\n# Reset password if needed\nsudo -u postgres psql\nALTER USER postgres PASSWORD 'NewPassword123!';\n```\n\n3. **Out of connections**:\n```sql\n-- Check current connections\nSELECT count(*) FROM pg_stat_activity;\n\n-- See connection details\nSELECT pid, usename, application_name, client_addr, state \nFROM pg_stat_activity;\n\n-- Terminate idle connections\nSELECT pg_terminate_backend(pid) \nFROM pg_stat_activity \nWHERE state = 'idle' \n  AND state_change < current_timestamp - interval '10 minutes';\n```\n\n4. **Slow queries**:\n```sql\n-- Enable slow query logging\nALTER SYSTEM SET log_min_duration_statement = 1000; -- Log queries taking > 1s\nSELECT pg_reload_conf();\n\n-- Find slow queries\nSELECT query, calls, mean_exec_time, total_exec_time\nFROM pg_stat_statements\nWHERE mean_exec_time > 1000\nORDER BY mean_exec_time DESC;\n\n-- Check for missing indexes\nSELECT \n    schemaname,\n    tablename,\n    attname,\n    n_distinct,\n    most_common_vals\nFROM pg_stats\nWHERE tablename NOT LIKE 'pg_%'\nORDER BY n_distinct DESC;\n```\n\n### Performance Issues\n\n```bash\n# Check system resources\ntop -u postgres\niostat -x 1\nvmstat 1\n\n# Check PostgreSQL cache hit ratio\npsql -c \"SELECT sum(blks_hit)*100.0/sum(blks_hit+blks_read) AS hit_ratio FROM pg_stat_database;\"\n\n# Find bloated tables\npsql -c \"SELECT schemaname, tablename, pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size\nFROM pg_tables\nWHERE schemaname NOT IN ('pg_catalog', 'information_schema')\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC\nLIMIT 20;\"\n\n# Rebuild bloated indexes\nREINDEX TABLE bloated_table;\nREINDEX DATABASE mydb;\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update postgresql16*\nsudo dnf update postgresql16*\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade postgresql-16\n\n# Arch Linux\nsudo pacman -Syu postgresql\n\n# Alpine Linux\napk update\napk upgrade postgresql\n\n# openSUSE\nsudo zypper update postgresql16\n\n# FreeBSD\npkg update\npkg upgrade postgresql16-server\n\n# Always restart after updates\nsudo systemctl restart postgresql\n```\n\n### Version Upgrade\n\n```bash\n# Backup before upgrade\npg_dumpall > backup_before_upgrade.sql\n\n# Install new version (example: upgrading to 17)\nsudo dnf install postgresql17-server\n\n# Initialize new cluster\nsudo /usr/pgsql-17/bin/postgresql-17-setup initdb\n\n# Stop both versions\nsudo systemctl stop postgresql-16\nsudo systemctl stop postgresql-17\n\n# Run pg_upgrade\nsudo -u postgres /usr/pgsql-17/bin/pg_upgrade \\\n  -d /var/lib/pgsql/16/data \\\n  -D /var/lib/pgsql/17/data \\\n  -b /usr/pgsql-16/bin \\\n  -B /usr/pgsql-17/bin\n\n# Start new version\nsudo systemctl start postgresql-17\nsudo systemctl enable postgresql-17\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Create maintenance script\ncat > /usr/local/bin/pg_maintenance.sh << 'EOF'\n#!/bin/bash\n\n# Update table statistics\npsql -U postgres -d mydb -c \"ANALYZE;\"\n\n# Reindex databases\npsql -U postgres -d mydb -c \"REINDEX DATABASE mydb;\"\n\n# Clean up old logs\nfind /var/lib/pgsql/16/data/log -name \"*.log\" -mtime +30 -delete\n\n# Report database sizes\npsql -U postgres -c \"SELECT datname, pg_size_pretty(pg_database_size(datname)) as size FROM pg_database WHERE datistemplate = false;\"\n\n# Check for unused indexes\npsql -U postgres -d mydb -c \"\nSELECT schemaname, tablename, indexname, idx_scan\nFROM pg_stat_user_indexes\nWHERE idx_scan = 0\nORDER BY schemaname, tablename;\"\nEOF\n\nchmod +x /usr/local/bin/pg_maintenance.sh\n\n# Schedule with cron\necho \"0 2 * * 0 postgres /usr/local/bin/pg_maintenance.sh\" | sudo tee -a /etc/cron.d/postgresql\n```\n\n## Integration Examples\n\n### Python (psycopg2)\n\n```python\nimport psycopg2\nfrom psycopg2.extras import RealDictCursor\nimport logging\n\n# Database connection\ndef get_db_connection():\n    return psycopg2.connect(\n        host=\"localhost\",\n        database=\"mydb\",\n        user=\"appuser\",\n        password=\"password\",\n        cursor_factory=RealDictCursor\n    )\n\n# Example usage\ndef get_users():\n    conn = get_db_connection()\n    try:\n        with conn.cursor() as cur:\n            cur.execute(\"SELECT id, username, email FROM users\")\n            return cur.fetchall()\n    finally:\n        conn.close()\n\n# Connection pool\nfrom psycopg2 import pool\n\ndb_pool = psycopg2.pool.SimpleConnectionPool(\n    1, 20,\n    host=\"localhost\",\n    database=\"mydb\",\n    user=\"appuser\",\n    password=\"password\"\n)\n\ndef get_pooled_connection():\n    return db_pool.getconn()\n\ndef return_pooled_connection(conn):\n    db_pool.putconn(conn)\n```\n\n### Node.js (node-postgres)\n\n```javascript\nconst { Pool } = require('pg');\n\n// Create connection pool\nconst pool = new Pool({\n  host: 'localhost',\n  database: 'mydb',\n  user: 'appuser',\n  password: 'password',\n  port: 5432,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\n// Query example\nasync function getUsers() {\n  const client = await pool.connect();\n  try {\n    const result = await client.query('SELECT * FROM users');\n    return result.rows;\n  } finally {\n    client.release();\n  }\n}\n\n// Parameterized query\nasync function getUserById(userId) {\n  const query = 'SELECT * FROM users WHERE id = $1';\n  const values = [userId];\n  \n  try {\n    const result = await pool.query(query, values);\n    return result.rows[0];\n  } catch (err) {\n    console.error('Database error:', err);\n    throw err;\n  }\n}\n\n// Transaction example\nasync function transferFunds(fromAccount, toAccount, amount) {\n  const client = await pool.connect();\n  \n  try {\n    await client.query('BEGIN');\n    await client.query('UPDATE accounts SET balance = balance - $1 WHERE id = $2', [amount, fromAccount]);\n    await client.query('UPDATE accounts SET balance = balance + $1 WHERE id = $2', [amount, toAccount]);\n    await client.query('COMMIT');\n  } catch (err) {\n    await client.query('ROLLBACK');\n    throw err;\n  } finally {\n    client.release();\n  }\n}\n```\n\n### Java (JDBC)\n\n```java\nimport java.sql.*;\nimport javax.sql.DataSource;\nimport com.zaxxer.hikari.HikariConfig;\nimport com.zaxxer.hikari.HikariDataSource;\n\npublic class PostgreSQLExample {\n    private static DataSource dataSource;\n    \n    static {\n        HikariConfig config = new HikariConfig();\n        config.setJdbcUrl(\"jdbc:postgresql://localhost:5432/mydb\");\n        config.setUsername(\"appuser\");\n        config.setPassword(\"password\");\n        config.setMaximumPoolSize(20);\n        config.setMinimumIdle(5);\n        config.setConnectionTimeout(30000);\n        config.setIdleTimeout(600000);\n        config.setMaxLifetime(1800000);\n        \n        dataSource = new HikariDataSource(config);\n    }\n    \n    public List<User> getUsers() throws SQLException {\n        List<User> users = new ArrayList<>();\n        String sql = \"SELECT id, username, email FROM users\";\n        \n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement ps = conn.prepareStatement(sql);\n             ResultSet rs = ps.executeQuery()) {\n            \n            while (rs.next()) {\n                User user = new User();\n                user.setId(rs.getLong(\"id\"));\n                user.setUsername(rs.getString(\"username\"));\n                user.setEmail(rs.getString(\"email\"));\n                users.add(user);\n            }\n        }\n        return users;\n    }\n    \n    public void updateUser(Long id, String email) throws SQLException {\n        String sql = \"UPDATE users SET email = ? WHERE id = ?\";\n        \n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement ps = conn.prepareStatement(sql)) {\n            \n            ps.setString(1, email);\n            ps.setLong(2, id);\n            ps.executeUpdate();\n        }\n    }\n}\n```\n\n### PHP (PDO)\n\n```php\n<?php\n// Database configuration\n$dsn = 'pgsql:host=localhost;port=5432;dbname=mydb';\n$username = 'appuser';\n$password = 'password';\n\n// PDO options\n$options = [\n    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n    PDO::ATTR_EMULATE_PREPARES => false,\n];\n\ntry {\n    $pdo = new PDO($dsn, $username, $password, $options);\n} catch (PDOException $e) {\n    throw new PDOException($e->getMessage(), (int)$e->getCode());\n}\n\n// Query example\nfunction getUsers($pdo) {\n    $stmt = $pdo->query('SELECT id, username, email FROM users');\n    return $stmt->fetchAll();\n}\n\n// Prepared statement\nfunction getUserById($pdo, $userId) {\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE id = :id');\n    $stmt->execute(['id' => $userId]);\n    return $stmt->fetch();\n}\n\n// Transaction example\nfunction createUserWithProfile($pdo, $userData, $profileData) {\n    try {\n        $pdo->beginTransaction();\n        \n        // Insert user\n        $stmt = $pdo->prepare('INSERT INTO users (username, email) VALUES (:username, :email) RETURNING id');\n        $stmt->execute([\n            'username' => $userData['username'],\n            'email' => $userData['email']\n        ]);\n        $userId = $stmt->fetchColumn();\n        \n        // Insert profile\n        $stmt = $pdo->prepare('INSERT INTO profiles (user_id, bio) VALUES (:user_id, :bio)');\n        $stmt->execute([\n            'user_id' => $userId,\n            'bio' => $profileData['bio']\n        ]);\n        \n        $pdo->commit();\n        return $userId;\n    } catch (Exception $e) {\n        $pdo->rollBack();\n        throw $e;\n    }\n}\n?>\n```\n\n### Go (pq)\n\n```go\npackage main\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n    _ \"github.com/lib/pq\"\n)\n\nconst (\n    host     = \"localhost\"\n    port     = 5432\n    user     = \"appuser\"\n    password = \"password\"\n    dbname   = \"mydb\"\n)\n\nfunc main() {\n    // Connection string\n    psqlInfo := fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\",\n        host, port, user, password, dbname)\n    \n    // Open database connection\n    db, err := sql.Open(\"postgres\", psqlInfo)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer db.Close()\n    \n    // Verify connection\n    err = db.Ping()\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Query example\n    rows, err := db.Query(\"SELECT id, username, email FROM users\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer rows.Close()\n    \n    for rows.Next() {\n        var id int\n        var username, email string\n        err = rows.Scan(&id, &username, &email)\n        if err != nil {\n            log.Fatal(err)\n        }\n        fmt.Printf(\"User: %d, %s, %s\\n\", id, username, email)\n    }\n    \n    // Prepared statement\n    stmt, err := db.Prepare(\"INSERT INTO users(username, email) VALUES($1, $2) RETURNING id\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer stmt.Close()\n    \n    var newID int\n    err = stmt.QueryRow(\"newuser\", \"newuser@example.com\").Scan(&newID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"New user ID: %d\\n\", newID)\n}\n```\n\n## Additional Resources\n\n- [Official Documentation](https://www.postgresql.org/docs/)\n- [GitHub Repository](https://github.com/postgres/postgres)\n- [PostgreSQL Wiki](https://wiki.postgresql.org/)\n- [PostgreSQL Tutorial](https://www.postgresqltutorial.com/)\n- [Performance Tuning Guide](https://wiki.postgresql.org/wiki/Performance_Optimization)\n- [Security Best Practices](https://www.postgresql.org/docs/current/security.html)\n- [High Availability Guide](https://www.postgresql.org/docs/current/high-availability.html)\n- [Community Forums](https://www.postgresql.org/community/forums/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">PostgreSQL is a free and open-source relational database management system (RDBMS) emphasizing extensibility and SQL compliance. Originally developed at UC Berkeley as POSTGRES, it has evolved into the world's most advanced open source database, competing directly with commercial solutions like Oracle Database, Microsoft SQL Server, and IBM Db2. PostgreSQL serves as a FOSS alternative to these expensive proprietary databases while offering comparable performance, reliability, and advanced features like JSON support, full-text search, and custom data types.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation (SSD strongly recommended for data)</li>\n<li class=\"mobile-list-item\">IOPS: 3000+ recommended for production workloads</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux, BSD, macOS, or Windows</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5432 (default PostgreSQL port)</li>\n<li class=\"mobile-list-item\">Additional ports for replication if needed</li>\n<li class=\"mobile-list-item\">Low latency network for clustered setups</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">GNU make 3.81+ (for building from source)</li>\n<li class=\"mobile-list-item\">ISO/ANSI C compiler (gcc 4.7+ recommended)</li>\n<li class=\"mobile-list-item\">tar, gzip or bzip2 for unpacking source</li>\n<li class=\"mobile-list-item\">readline library (for psql command history)</li>\n<li class=\"mobile-list-item\">zlib library (for pg_dump compression)</li>\n<li class=\"mobile-list-item\">OpenSSL library (for SSL connections)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS 7\n# Install PostgreSQL official repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL 16 (latest stable)\nsudo yum install -y postgresql16-server postgresql16 postgresql16-contrib\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable postgresql-16\nsudo systemctl start postgresql-16\n\n# RHEL/CentOS/Rocky/AlmaLinux 8+\n# Install PostgreSQL official repository\nsudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Disable built-in PostgreSQL module\nsudo dnf -qy module disable postgresql\n\n# Install PostgreSQL 16\nsudo dnf install -y postgresql16-server postgresql16 postgresql16-contrib\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable --now postgresql-16</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prerequisites\nsudo apt update\nsudo apt install -y wget ca-certificates\n\n# Add PostgreSQL APT repository\nsudo install -d /usr/share/postgresql-common/pgdg\nsudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc\nsudo sh -c &#039;echo &quot;deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&quot; &gt; /etc/apt/sources.list.d/pgdg.list&#039;\n\n# Update package list\nsudo apt update\n\n# Install PostgreSQL 16\nsudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16\n\n# PostgreSQL should start automatically\nsudo systemctl status postgresql</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL from official repositories\nsudo pacman -S postgresql postgresql-libs\n\n# Optional: Install additional tools\nsudo pacman -S postgresql-old-upgrade  # For upgrading from older versions\n\n# Initialize the database cluster\nsudo -u postgres initdb -D /var/lib/postgres/data\n\n# Enable and start service\nsudo systemctl enable --now postgresql\n\n# For development headers\nsudo pacman -S postgresql-libs</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL\napk add --no-cache postgresql postgresql-client postgresql-contrib\n\n# Install additional packages for full functionality\napk add --no-cache postgresql-dev postgresql-docs\n\n# Create postgres user if not exists\nadduser -D -H -s /sbin/nologin -g postgres postgres\n\n# Initialize database\nsu - postgres -s /bin/sh -c &quot;initdb -D /var/lib/postgresql/data&quot;\n\n# Enable and start service\nrc-update add postgresql default\nrc-service postgresql start</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y postgresql16 postgresql16-server postgresql16-contrib\n\n# Initialize database (if not auto-initialized)\nsudo systemctl start postgresql\n\n# If initialization is needed\nsudo -u postgres initdb -D /var/lib/pgsql/data\n\n# Enable service\nsudo systemctl enable postgresql\n\n# SLES 15\n# Enable Web and Scripting Module\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\n\n# Install PostgreSQL\nsudo zypper install -y postgresql16 postgresql16-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install postgresql@16\n\n# Add to PATH\necho &#039;export PATH=&quot;/usr/local/opt/postgresql@16/bin:$PATH&quot;&#039; &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n\n# Initialize database\ninitdb /usr/local/var/postgresql@16\n\n# Start PostgreSQL\nbrew services start postgresql@16\n\n# Alternative: Using MacPorts\nsudo port install postgresql16 +universal\nsudo port install postgresql16-server\n\n# Initialize database\nsudo mkdir -p /opt/local/var/db/postgresql16/defaultdb\nsudo chown postgres:postgres /opt/local/var/db/postgresql16/defaultdb\nsudo -u postgres /opt/local/lib/postgresql16/bin/initdb -D /opt/local/var/db/postgresql16/defaultdb</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL\npkg install postgresql16-server postgresql16-client postgresql16-contrib\n\n# Enable PostgreSQL\necho &#039;postgresql_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Initialize database\nservice postgresql initdb\n\n# Start PostgreSQL\nservice postgresql start\n\n# For development\npkg install postgresql16-plpython py39-psycopg2</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install postgresql16 --params &#039;/Password:StrongPassword123!&#039;\n\n# Method 2: Using the official installer\n# Download from https://www.postgresql.org/download/windows/\n# Run the installer with administrative privileges\n\n# Method 3: Using winget\nwinget install --id PostgreSQL.PostgreSQL\n\n# After installation, add to PATH\n[Environment]::SetEnvironmentVariable(&quot;Path&quot;, &quot;$env:Path;C:\\Program Files\\PostgreSQL\\16\\bin&quot;, &quot;Machine&quot;)\n\n# Initialize database (usually done by installer)\ninitdb -D &quot;C:\\Program Files\\PostgreSQL\\16\\data&quot; -U postgres -W\n\n# Register as Windows service\npg_ctl register -N postgresql-16 -D &quot;C:\\Program Files\\PostgreSQL\\16\\data&quot;\n\n# Start service\nnet start postgresql-16</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Switch to postgres user</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux/BSD systems\nsudo -i -u postgres\n\n# Or use sudo for individual commands\nsudo -u postgres psql</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/var/lib/pgsql/16/data/postgresql.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/postgresql/16/main/postgresql.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/var/lib/postgres/data/postgresql.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/var/lib/postgresql/data/postgresql.conf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/var/lib/pgsql/data/postgresql.conf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/var/postgresql@16/postgresql.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/var/db/postgres/data16/postgresql.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Program Files\\PostgreSQL\\16\\data\\postgresql.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit postgresql.conf\nsudo -u postgres vi /var/lib/pgsql/16/data/postgresql.conf\n\n# Key settings to modify:\nlisten_addresses = &#039;localhost&#039;  # Change to &#039;*&#039; for network access\nport = 5432\nmax_connections = 100           # Increase based on needs\nshared_buffers = 256MB          # Set to 25% of RAM\neffective_cache_size = 1GB      # Set to 50-75% of RAM\nwork_mem = 4MB                  # Increase for complex queries\nmaintenance_work_mem = 64MB     # For VACUUM, CREATE INDEX\n\n# Enable logging\nlogging_collector = on\nlog_directory = &#039;log&#039;\nlog_filename = &#039;postgresql-%Y-%m-%d_%H%M%S.log&#039;\nlog_rotation_age = 1d\nlog_rotation_size = 100MB</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Configure authentication</strong> (pg_hba.conf):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit pg_hba.conf\nsudo -u postgres vi /var/lib/pgsql/16/data/pg_hba.conf\n\n# Change authentication method from &#039;ident&#039; to &#039;md5&#039; or &#039;scram-sha-256&#039;\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     scram-sha-256\nhost    all             all             127.0.0.1/32            scram-sha-256\nhost    all             all             ::1/128                 scram-sha-256</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">5. <strong>Set postgres user password</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo -u postgres psql\npostgres=# ALTER USER postgres PASSWORD &#039;StrongPassword123!&#039;;\npostgres=# \\q</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test local connection\nsudo -u postgres psql -c &quot;SELECT version();&quot;\n\n# Create a test database\nsudo -u postgres createdb testdb\n\n# Connect to test database\nsudo -u postgres psql testdb\n\n# Run test query\ntestdb=# CREATE TABLE test (id serial PRIMARY KEY, name varchar(50));\ntestdb=# INSERT INTO test (name) VALUES (&#039;PostgreSQL&#039;);\ntestdb=# SELECT * FROM test;\ntestdb=# \\q\n\n# Drop test database\nsudo -u postgres dropdb testdb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never use default passwords in production! Always set strong passwords and restrict network access.</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable PostgreSQL to start on boot\nsudo systemctl enable postgresql    # or postgresql-16 on RHEL\n\n# Start PostgreSQL\nsudo systemctl start postgresql\n\n# Stop PostgreSQL\nsudo systemctl stop postgresql\n\n# Restart PostgreSQL\nsudo systemctl restart postgresql\n\n# Reload configuration without restart\nsudo systemctl reload postgresql\n\n# Check status\nsudo systemctl status postgresql\n\n# View logs\nsudo journalctl -u postgresql -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable PostgreSQL to start on boot\nrc-update add postgresql default\n\n# Start PostgreSQL\nrc-service postgresql start\n\n# Stop PostgreSQL\nrc-service postgresql stop\n\n# Restart PostgreSQL\nrc-service postgresql restart\n\n# Reload configuration\nrc-service postgresql reload\n\n# Check status\nrc-service postgresql status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;postgresql_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start PostgreSQL\nservice postgresql start\n\n# Stop PostgreSQL\nservice postgresql stop\n\n# Restart PostgreSQL\nservice postgresql restart\n\n# Reload configuration\nservice postgresql reload\n\n# Check status\nservice postgresql status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start postgresql@16\nbrew services stop postgresql@16\nbrew services restart postgresql@16\n\n# Manual control\npg_ctl -D /usr/local/var/postgresql@16 start\npg_ctl -D /usr/local/var/postgresql@16 stop\npg_ctl -D /usr/local/var/postgresql@16 restart\n\n# Check status\nbrew services list | grep postgresql</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start PostgreSQL service\nnet start postgresql-16\n\n# Stop PostgreSQL service\nnet stop postgresql-16\n\n# Restart PostgreSQL service\nnet stop postgresql-16 &amp;&amp; net start postgresql-16\n\n# Using pg_ctl\npg_ctl -D &quot;C:\\Program Files\\PostgreSQL\\16\\data&quot; start\npg_ctl -D &quot;C:\\Program Files\\PostgreSQL\\16\\data&quot; stop\npg_ctl -D &quot;C:\\Program Files\\PostgreSQL\\16\\data&quot; restart\n\n# Check status\nsc query postgresql-16</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Calculate settings based on system resources\n# Edit postgresql.conf\n\n# Memory Settings (for 8GB RAM system)\nshared_buffers = 2GB              # 25% of RAM\neffective_cache_size = 6GB        # 75% of RAM\nmaintenance_work_mem = 512MB      # RAM/16\nwork_mem = 32MB                   # RAM/256\nwal_buffers = 64MB               # 3% of shared_buffers\n\n# Checkpoint Settings\ncheckpoint_segments = 32          # Deprecated in newer versions\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\n\n# Connection Settings\nmax_connections = 200             # Adjust based on application\n\n# Parallel Query Execution (PG 9.6+)\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\n\n# Write Performance\nsynchronous_commit = on           # Set to off for better performance (less safe)\ncheckpoint_timeout = 15min\nmax_wal_size = 4GB\nmin_wal_size = 1GB\n\n# SSD Optimizations\nrandom_page_cost = 1.1           # Default is 4.0 (for HDD)\neffective_io_concurrency = 200   # 1-1000 (higher for SSD)</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-configuration\" class=\"mobile-header\">SSL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\ncd /var/lib/pgsql/16/data\n\n# Create CA certificate\nopenssl genrsa -out ca.key 4096\nopenssl req -new -x509 -days 3650 -key ca.key -out ca.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=PostgreSQL-CA&quot;\n\n# Create server certificate\nopenssl genrsa -out server.key 4096\nopenssl req -new -key server.key -out server.csr \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=postgres.example.com&quot;\nopenssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\n# Set permissions\nchown postgres:postgres server.key server.crt ca.crt\nchmod 600 server.key\nchmod 644 server.crt ca.crt\n\n# Enable SSL in postgresql.conf\nssl = on\nssl_cert_file = &#039;server.crt&#039;\nssl_key_file = &#039;server.key&#039;\nssl_ca_file = &#039;ca.crt&#039;\nssl_min_protocol_version = &#039;TLSv1.2&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<p class=\"mobile-paragraph\">PostgreSQL typically doesn't use HTTP reverse proxies, but connection poolers like PgBouncer or HAProxy can act as database proxies.</p>\n<h3 id=\"pgbouncer-configuration\" class=\"mobile-header\">PgBouncer Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PgBouncer\n# RHEL/CentOS\nsudo yum install -y pgbouncer\n\n# Debian/Ubuntu\nsudo apt install -y pgbouncer\n\n# Configure PgBouncer (/etc/pgbouncer/pgbouncer.ini)\n[databases]\nmydb = host=127.0.0.1 port=5432 dbname=mydb\n\n[pgbouncer]\nlisten_port = 6432\nlisten_addr = *\nauth_type = scram-sha-256\nauth_file = /etc/pgbouncer/userlist.txt\npool_mode = transaction\nmax_client_conn = 1000\ndefault_pool_size = 25</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/haproxy/haproxy.cfg\nglobal\n    maxconn 1000\n\ndefaults\n    mode tcp\n    timeout connect 10s\n    timeout client 30s\n    timeout server 30s\n\nlisten postgres\n    bind *:5432\n    option pgsql-check user haproxy\n    balance roundrobin\n    server pg1 192.168.1.10:5432 check\n    server pg2 192.168.1.11:5432 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"authentication-and-access-control\" class=\"mobile-header\">Authentication and Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure pg_hba.conf for secure access\n# /var/lib/pgsql/16/data/pg_hba.conf\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# Local connections\nlocal   all             postgres                                peer\nlocal   all             all                                     scram-sha-256\n\n# IPv4 local connections\nhost    all             all             127.0.0.1/32            scram-sha-256\n\n# IPv4 remote connections (specific network)\nhost    all             all             192.168.1.0/24          scram-sha-256\n\n# Reject all other connections\nhost    all             all             0.0.0.0/0               reject\n\n# IPv6 local connections\nhost    all             all             ::1/128                 scram-sha-256</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-and-role-management\" class=\"mobile-header\">User and Role Management</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create roles with specific privileges\nCREATE ROLE readonly;\nGRANT CONNECT ON DATABASE mydb TO readonly;\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\n-- Create application user\nCREATE USER appuser WITH PASSWORD &#039;StrongAppPassword123!&#039;;\nGRANT CONNECT ON DATABASE mydb TO appuser;\nGRANT USAGE ON SCHEMA public TO appuser;\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO appuser;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO appuser;\n\n-- Create backup user\nCREATE USER backupuser WITH PASSWORD &#039;BackupPassword123!&#039; REPLICATION;\n\n-- Revoke unnecessary privileges\nREVOKE CREATE ON SCHEMA public FROM PUBLIC;</code></pre>\n      </div>\n    </div>\n<h3 id=\"row-level-security-rls\" class=\"mobile-header\">Row-Level Security (RLS)</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Enable RLS on a table\nALTER TABLE sensitive_data ENABLE ROW LEVEL SECURITY;\n\n-- Create policy for users to see only their own data\nCREATE POLICY user_data_policy ON sensitive_data\n    FOR ALL\n    TO application_role\n    USING (user_id = current_user_id());\n\n-- Create policy for admins to see all data\nCREATE POLICY admin_policy ON sensitive_data\n    FOR ALL\n    TO admin_role\n    USING (true);</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 5432\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --add-rich-rule=&#039;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.0/24&quot; port protocol=&quot;tcp&quot; port=&quot;5432&quot; accept&#039;\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 5432 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 5432\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;PostgreSQL&quot; -Direction Inbound -Protocol TCP -LocalPort 5432 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"creating-databases-and-schemas\" class=\"mobile-header\">Creating Databases and Schemas</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create database with specific encoding and locale\nCREATE DATABASE myapp\n    WITH \n    OWNER = appuser\n    ENCODING = &#039;UTF8&#039;\n    LC_COLLATE = &#039;en_US.UTF-8&#039;\n    LC_CTYPE = &#039;en_US.UTF-8&#039;\n    TABLESPACE = pg_default\n    CONNECTION LIMIT = -1;\n\n-- Create schema\n\\c myapp\nCREATE SCHEMA IF NOT EXISTS app_schema AUTHORIZATION appuser;\n\n-- Set search path\nALTER DATABASE myapp SET search_path TO app_schema, public;\n\n-- Create extensions\nCREATE EXTENSION IF NOT EXISTS pg_stat_statements;\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\nCREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;</code></pre>\n      </div>\n    </div>\n<h3 id=\"table-partitioning\" class=\"mobile-header\">Table Partitioning</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create partitioned table\nCREATE TABLE measurements (\n    id BIGSERIAL,\n    sensor_id INTEGER,\n    reading NUMERIC,\n    created_at TIMESTAMP NOT NULL\n) PARTITION BY RANGE (created_at);\n\n-- Create partitions\nCREATE TABLE measurements_2024_01 PARTITION OF measurements\n    FOR VALUES FROM (&#039;2024-01-01&#039;) TO (&#039;2024-02-01&#039;);\n\nCREATE TABLE measurements_2024_02 PARTITION OF measurements\n    FOR VALUES FROM (&#039;2024-02-01&#039;) TO (&#039;2024-03-01&#039;);\n\n-- Create index on partitions\nCREATE INDEX idx_measurements_2024_01_created_at ON measurements_2024_01 (created_at);\nCREATE INDEX idx_measurements_2024_02_created_at ON measurements_2024_02 (created_at);</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"query-optimization\" class=\"mobile-header\">Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Enable query timing\n\\timing on\n\n-- Analyze query performance\nEXPLAIN (ANALYZE, BUFFERS) SELECT * FROM large_table WHERE column = &#039;value&#039;;\n\n-- Create appropriate indexes\nCREATE INDEX idx_column ON large_table (column);\nCREATE INDEX idx_multi_column ON large_table (col1, col2) WHERE active = true;\n\n-- Update table statistics\nANALYZE large_table;\n\n-- Find missing indexes\nSELECT \n    schemaname,\n    tablename,\n    attname,\n    n_distinct,\n    most_common_vals\nFROM pg_stats\nWHERE schemaname NOT IN (&#039;pg_catalog&#039;, &#039;information_schema&#039;)\n    AND n_distinct &gt; 100\n    AND most_common_vals IS NULL;</code></pre>\n      </div>\n    </div>\n<h3 id=\"connection-pooling\" class=\"mobile-header\">Connection Pooling</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PgBouncer for connection pooling\n# Configure /etc/pgbouncer/pgbouncer.ini\n[databases]\nmydb = host=localhost port=5432 dbname=mydb\n\n[pgbouncer]\nlisten_port = 6432\nlisten_addr = localhost\nauth_type = scram-sha-256\nauth_file = /etc/pgbouncer/userlist.txt\npool_mode = transaction\nmax_client_conn = 1000\ndefault_pool_size = 25\nmin_pool_size = 5\nreserve_pool_size = 5\nserver_idle_timeout = 600</code></pre>\n      </div>\n    </div>\n<h3 id=\"vacuum-and-maintenance\" class=\"mobile-header\">Vacuum and Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Manual VACUUM\nVACUUM (VERBOSE, ANALYZE) large_table;\n\n-- Configure autovacuum\nALTER TABLE large_table SET (autovacuum_vacuum_scale_factor = 0.1);\nALTER TABLE large_table SET (autovacuum_analyze_scale_factor = 0.05);\n\n-- Find tables that need vacuuming\nSELECT \n    schemaname,\n    tablename,\n    n_live_tup,\n    n_dead_tup,\n    last_vacuum,\n    last_autovacuum\nFROM pg_stat_user_tables\nWHERE n_dead_tup &gt; 1000\nORDER BY n_dead_tup DESC;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring-views\" class=\"mobile-header\">Built-in Monitoring Views</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Current activity\nSELECT pid, usename, datname, state, query \nFROM pg_stat_activity \nWHERE state != &#039;idle&#039;;\n\n-- Database statistics\nSELECT \n    datname,\n    numbackends,\n    xact_commit,\n    xact_rollback,\n    blks_read,\n    blks_hit,\n    tup_returned,\n    tup_fetched,\n    tup_inserted,\n    tup_updated,\n    tup_deleted\nFROM pg_stat_database;\n\n-- Table I/O statistics\nSELECT \n    schemaname,\n    tablename,\n    seq_scan,\n    seq_tup_read,\n    idx_scan,\n    idx_tup_fetch,\n    n_tup_ins,\n    n_tup_upd,\n    n_tup_del\nFROM pg_stat_user_tables\nORDER BY seq_tup_read DESC;\n\n-- Cache hit ratio\nSELECT \n    sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) as cache_hit_ratio\nFROM pg_statio_user_tables;</code></pre>\n      </div>\n    </div>\n<h3 id=\"pg_stat_statements\" class=\"mobile-header\">pg_stat_statements</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Enable extension\nCREATE EXTENSION pg_stat_statements;\n\n-- Top queries by total time\nSELECT \n    query,\n    calls,\n    total_exec_time,\n    mean_exec_time,\n    stddev_exec_time,\n    rows\nFROM pg_stat_statements\nORDER BY total_exec_time DESC\nLIMIT 10;\n\n-- Reset statistics\nSELECT pg_stat_statements_reset();</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-tools\" class=\"mobile-header\">External Monitoring Tools</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install check_postgres for Nagios/Icinga\nwget https://bucardo.org/check_postgres/check_postgres.tar.gz\ntar xzf check_postgres.tar.gz\ncd check_postgres-*\nperl Makefile.PL\nmake\nsudo make install\n\n# PostgreSQL Exporter for Prometheus\nwget https://github.com/prometheus-community/postgres_exporter/releases/download/v0.13.0/postgres_exporter-0.13.0.linux-amd64.tar.gz\ntar xzf postgres_exporter-*.tar.gz\nsudo cp postgres_exporter*/postgres_exporter /usr/local/bin/\n\n# Create systemd service for postgres_exporter\nsudo tee /etc/systemd/system/postgres_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=PostgreSQL Exporter\nAfter=postgresql.service\n\n[Service]\nType=simple\nUser=postgres\nEnvironment=&quot;DATA_SOURCE_NAME=postgresql://postgres@localhost/postgres?sslmode=disable&quot;\nExecStart=/usr/local/bin/postgres_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now postgres_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"logical-backups-with-pg_dump\" class=\"mobile-header\">Logical Backups with pg_dump</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup single database\npg_dump -h localhost -U postgres -d mydb -F custom -b -v -f mydb_backup.dump\n\n# Backup all databases\npg_dumpall -h localhost -U postgres -f all_databases.sql\n\n# Backup with compression\npg_dump mydb | gzip &gt; mydb_backup.sql.gz\n\n# Backup specific schemas\npg_dump -n schema1 -n schema2 mydb &gt; schemas_backup.sql\n\n# Backup only schema (no data)\npg_dump -s mydb &gt; mydb_schema.sql\n\n# Backup only data (no schema)\npg_dump -a mydb &gt; mydb_data.sql</code></pre>\n      </div>\n    </div>\n<h3 id=\"physical-backups-with-pg_basebackup\" class=\"mobile-header\">Physical Backups with pg_basebackup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create base backup\npg_basebackup -h localhost -D /backup/postgres -U replicator -W -Fp -Xs -P\n\n# Create tar format backup\npg_basebackup -h localhost -D /backup/postgres -U replicator -W -Ft -z -Xs -P\n\n# Backup with specific tablespace mapping\npg_basebackup -h localhost -D /backup/postgres -T /old/tablespace=/new/tablespace</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Restore from custom format dump\npg_restore -h localhost -U postgres -d mydb -v mydb_backup.dump\n\n# Restore to new database\ncreatedb -h localhost -U postgres newdb\npg_restore -h localhost -U postgres -d newdb -v mydb_backup.dump\n\n# Restore from SQL dump\npsql -h localhost -U postgres -d mydb &lt; mydb_backup.sql\n\n# Restore specific tables\npg_restore -h localhost -U postgres -d mydb -t table1 -t table2 mydb_backup.dump\n\n# Restore with parallel jobs\npg_restore -h localhost -U postgres -d mydb -j 4 -v mydb_backup.dump</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backup-script\" class=\"mobile-header\">Automated Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/pg_backup.sh\n\nBACKUP_DIR=&quot;/backup/postgresql&quot;\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nDATABASE=&quot;mydb&quot;\n\n# Create backup directory\nmkdir -p ${BACKUP_DIR}/{daily,weekly,monthly}\n\n# Perform backup\npg_dump -h localhost -U postgres -d ${DATABASE} -F custom -b -v \\\n    -f ${BACKUP_DIR}/daily/${DATABASE}_${TIMESTAMP}.dump\n\n# Compress older backups\nfind ${BACKUP_DIR}/daily -name &quot;*.dump&quot; -mtime +1 -exec gzip {} \\;\n\n# Keep only last 7 daily backups\nfind ${BACKUP_DIR}/daily -name &quot;*.dump.gz&quot; -mtime +7 -delete\n\n# Weekly backup (on Sunday)\nif [ $(date +%w) -eq 0 ]; then\n    cp ${BACKUP_DIR}/daily/${DATABASE}_${TIMESTAMP}.dump \\\n       ${BACKUP_DIR}/weekly/\nfi\n\n# Monthly backup (on 1st)\nif [ $(date +%d) -eq 01 ]; then\n    cp ${BACKUP_DIR}/daily/${DATABASE}_${TIMESTAMP}.dump \\\n       ${BACKUP_DIR}/monthly/\nfi\n\n# Log backup status\necho &quot;Backup completed: ${TIMESTAMP}&quot; &gt;&gt; ${BACKUP_DIR}/backup.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if PostgreSQL is running\nsudo systemctl status postgresql\nps aux | grep postgres\n\n# Check if PostgreSQL is listening\nsudo netstat -tlnp | grep 5432\nsudo ss -tlnp | grep 5432\n\n# Check PostgreSQL logs\nsudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Authentication failed</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check pg_hba.conf settings\nsudo cat /var/lib/pgsql/16/data/pg_hba.conf\n\n# Test with different authentication\npsql -h localhost -U postgres -W\n\n# Reset password if needed\nsudo -u postgres psql\nALTER USER postgres PASSWORD &#039;NewPassword123!&#039;;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Out of connections</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Check current connections\nSELECT count(*) FROM pg_stat_activity;\n\n-- See connection details\nSELECT pid, usename, application_name, client_addr, state \nFROM pg_stat_activity;\n\n-- Terminate idle connections\nSELECT pg_terminate_backend(pid) \nFROM pg_stat_activity \nWHERE state = &#039;idle&#039; \n  AND state_change &lt; current_timestamp - interval &#039;10 minutes&#039;;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Slow queries</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Enable slow query logging\nALTER SYSTEM SET log_min_duration_statement = 1000; -- Log queries taking &gt; 1s\nSELECT pg_reload_conf();\n\n-- Find slow queries\nSELECT query, calls, mean_exec_time, total_exec_time\nFROM pg_stat_statements\nWHERE mean_exec_time &gt; 1000\nORDER BY mean_exec_time DESC;\n\n-- Check for missing indexes\nSELECT \n    schemaname,\n    tablename,\n    attname,\n    n_distinct,\n    most_common_vals\nFROM pg_stats\nWHERE tablename NOT LIKE &#039;pg_%&#039;\nORDER BY n_distinct DESC;</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-issues\" class=\"mobile-header\">Performance Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check system resources\ntop -u postgres\niostat -x 1\nvmstat 1\n\n# Check PostgreSQL cache hit ratio\npsql -c &quot;SELECT sum(blks_hit)*100.0/sum(blks_hit+blks_read) AS hit_ratio FROM pg_stat_database;&quot;\n\n# Find bloated tables\npsql -c &quot;SELECT schemaname, tablename, pg_size_pretty(pg_total_relation_size(schemaname||&#039;.&#039;||tablename)) AS size\nFROM pg_tables\nWHERE schemaname NOT IN (&#039;pg_catalog&#039;, &#039;information_schema&#039;)\nORDER BY pg_total_relation_size(schemaname||&#039;.&#039;||tablename) DESC\nLIMIT 20;&quot;\n\n# Rebuild bloated indexes\nREINDEX TABLE bloated_table;\nREINDEX DATABASE mydb;</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update postgresql16*\nsudo dnf update postgresql16*\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade postgresql-16\n\n# Arch Linux\nsudo pacman -Syu postgresql\n\n# Alpine Linux\napk update\napk upgrade postgresql\n\n# openSUSE\nsudo zypper update postgresql16\n\n# FreeBSD\npkg update\npkg upgrade postgresql16-server\n\n# Always restart after updates\nsudo systemctl restart postgresql</code></pre>\n      </div>\n    </div>\n<h3 id=\"version-upgrade\" class=\"mobile-header\">Version Upgrade</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup before upgrade\npg_dumpall &gt; backup_before_upgrade.sql\n\n# Install new version (example: upgrading to 17)\nsudo dnf install postgresql17-server\n\n# Initialize new cluster\nsudo /usr/pgsql-17/bin/postgresql-17-setup initdb\n\n# Stop both versions\nsudo systemctl stop postgresql-16\nsudo systemctl stop postgresql-17\n\n# Run pg_upgrade\nsudo -u postgres /usr/pgsql-17/bin/pg_upgrade \\\n  -d /var/lib/pgsql/16/data \\\n  -D /var/lib/pgsql/17/data \\\n  -b /usr/pgsql-16/bin \\\n  -B /usr/pgsql-17/bin\n\n# Start new version\nsudo systemctl start postgresql-17\nsudo systemctl enable postgresql-17</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create maintenance script\ncat &gt; /usr/local/bin/pg_maintenance.sh &lt;&lt; &#039;EOF&#039;\n#!/bin/bash\n\n# Update table statistics\npsql -U postgres -d mydb -c &quot;ANALYZE;&quot;\n\n# Reindex databases\npsql -U postgres -d mydb -c &quot;REINDEX DATABASE mydb;&quot;\n\n# Clean up old logs\nfind /var/lib/pgsql/16/data/log -name &quot;*.log&quot; -mtime +30 -delete\n\n# Report database sizes\npsql -U postgres -c &quot;SELECT datname, pg_size_pretty(pg_database_size(datname)) as size FROM pg_database WHERE datistemplate = false;&quot;\n\n# Check for unused indexes\npsql -U postgres -d mydb -c &quot;\nSELECT schemaname, tablename, indexname, idx_scan\nFROM pg_stat_user_indexes\nWHERE idx_scan = 0\nORDER BY schemaname, tablename;&quot;\nEOF\n\nchmod +x /usr/local/bin/pg_maintenance.sh\n\n# Schedule with cron\necho &quot;0 2 * * 0 postgres /usr/local/bin/pg_maintenance.sh&quot; | sudo tee -a /etc/cron.d/postgresql</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-psycopg2\" class=\"mobile-header\">Python (psycopg2)</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">import psycopg2\nfrom psycopg2.extras import RealDictCursor\nimport logging\n\n# Database connection\ndef get_db_connection():\n    return psycopg2.connect(\n        host=&quot;localhost&quot;,\n        database=&quot;mydb&quot;,\n        user=&quot;appuser&quot;,\n        password=&quot;password&quot;,\n        cursor_factory=RealDictCursor\n    )\n\n# Example usage\ndef get_users():\n    conn = get_db_connection()\n    try:\n        with conn.cursor() as cur:\n            cur.execute(&quot;SELECT id, username, email FROM users&quot;)\n            return cur.fetchall()\n    finally:\n        conn.close()\n\n# Connection pool\nfrom psycopg2 import pool\n\ndb_pool = psycopg2.pool.SimpleConnectionPool(\n    1, 20,\n    host=&quot;localhost&quot;,\n    database=&quot;mydb&quot;,\n    user=&quot;appuser&quot;,\n    password=&quot;password&quot;\n)\n\ndef get_pooled_connection():\n    return db_pool.getconn()\n\ndef return_pooled_connection(conn):\n    db_pool.putconn(conn)</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-node-postgres\" class=\"mobile-header\">Node.js (node-postgres)</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">const { Pool } = require(&#039;pg&#039;);\n\n// Create connection pool\nconst pool = new Pool({\n  host: &#039;localhost&#039;,\n  database: &#039;mydb&#039;,\n  user: &#039;appuser&#039;,\n  password: &#039;password&#039;,\n  port: 5432,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\n// Query example\nasync function getUsers() {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(&#039;SELECT * FROM users&#039;);\n    return result.rows;\n  } finally {\n    client.release();\n  }\n}\n\n// Parameterized query\nasync function getUserById(userId) {\n  const query = &#039;SELECT * FROM users WHERE id = $1&#039;;\n  const values = [userId];\n  \n  try {\n    const result = await pool.query(query, values);\n    return result.rows[0];\n  } catch (err) {\n    console.error(&#039;Database error:&#039;, err);\n    throw err;\n  }\n}\n\n// Transaction example\nasync function transferFunds(fromAccount, toAccount, amount) {\n  const client = await pool.connect();\n  \n  try {\n    await client.query(&#039;BEGIN&#039;);\n    await client.query(&#039;UPDATE accounts SET balance = balance - $1 WHERE id = $2&#039;, [amount, fromAccount]);\n    await client.query(&#039;UPDATE accounts SET balance = balance + $1 WHERE id = $2&#039;, [amount, toAccount]);\n    await client.query(&#039;COMMIT&#039;);\n  } catch (err) {\n    await client.query(&#039;ROLLBACK&#039;);\n    throw err;\n  } finally {\n    client.release();\n  }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-jdbc\" class=\"mobile-header\">Java (JDBC)</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">import java.sql.*;\nimport javax.sql.DataSource;\nimport com.zaxxer.hikari.HikariConfig;\nimport com.zaxxer.hikari.HikariDataSource;\n\npublic class PostgreSQLExample {\n    private static DataSource dataSource;\n    \n    static {\n        HikariConfig config = new HikariConfig();\n        config.setJdbcUrl(&quot;jdbc:postgresql://localhost:5432/mydb&quot;);\n        config.setUsername(&quot;appuser&quot;);\n        config.setPassword(&quot;password&quot;);\n        config.setMaximumPoolSize(20);\n        config.setMinimumIdle(5);\n        config.setConnectionTimeout(30000);\n        config.setIdleTimeout(600000);\n        config.setMaxLifetime(1800000);\n        \n        dataSource = new HikariDataSource(config);\n    }\n    \n    public List&lt;User&gt; getUsers() throws SQLException {\n        List&lt;User&gt; users = new ArrayList&lt;&gt;();\n        String sql = &quot;SELECT id, username, email FROM users&quot;;\n        \n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement ps = conn.prepareStatement(sql);\n             ResultSet rs = ps.executeQuery()) {\n            \n            while (rs.next()) {\n                User user = new User();\n                user.setId(rs.getLong(&quot;id&quot;));\n                user.setUsername(rs.getString(&quot;username&quot;));\n                user.setEmail(rs.getString(&quot;email&quot;));\n                users.add(user);\n            }\n        }\n        return users;\n    }\n    \n    public void updateUser(Long id, String email) throws SQLException {\n        String sql = &quot;UPDATE users SET email = ? WHERE id = ?&quot;;\n        \n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement ps = conn.prepareStatement(sql)) {\n            \n            ps.setString(1, email);\n            ps.setLong(2, id);\n            ps.executeUpdate();\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"php-pdo\" class=\"mobile-header\">PHP (PDO)</h3>\n<div class=\"mobile-code-block\" data-language=\"php\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">php</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-php\">&lt;?php\n// Database configuration\n$dsn = &#039;pgsql:host=localhost;port=5432;dbname=mydb&#039;;\n$username = &#039;appuser&#039;;\n$password = &#039;password&#039;;\n\n// PDO options\n$options = [\n    PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION,\n    PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC,\n    PDO::ATTR_EMULATE_PREPARES =&gt; false,\n];\n\ntry {\n    $pdo = new PDO($dsn, $username, $password, $options);\n} catch (PDOException $e) {\n    throw new PDOException($e-&gt;getMessage(), (int)$e-&gt;getCode());\n}\n\n// Query example\nfunction getUsers($pdo) {\n    $stmt = $pdo-&gt;query(&#039;SELECT id, username, email FROM users&#039;);\n    return $stmt-&gt;fetchAll();\n}\n\n// Prepared statement\nfunction getUserById($pdo, $userId) {\n    $stmt = $pdo-&gt;prepare(&#039;SELECT * FROM users WHERE id = :id&#039;);\n    $stmt-&gt;execute([&#039;id&#039; =&gt; $userId]);\n    return $stmt-&gt;fetch();\n}\n\n// Transaction example\nfunction createUserWithProfile($pdo, $userData, $profileData) {\n    try {\n        $pdo-&gt;beginTransaction();\n        \n        // Insert user\n        $stmt = $pdo-&gt;prepare(&#039;INSERT INTO users (username, email) VALUES (:username, :email) RETURNING id&#039;);\n        $stmt-&gt;execute([\n            &#039;username&#039; =&gt; $userData[&#039;username&#039;],\n            &#039;email&#039; =&gt; $userData[&#039;email&#039;]\n        ]);\n        $userId = $stmt-&gt;fetchColumn();\n        \n        // Insert profile\n        $stmt = $pdo-&gt;prepare(&#039;INSERT INTO profiles (user_id, bio) VALUES (:user_id, :bio)&#039;);\n        $stmt-&gt;execute([\n            &#039;user_id&#039; =&gt; $userId,\n            &#039;bio&#039; =&gt; $profileData[&#039;bio&#039;]\n        ]);\n        \n        $pdo-&gt;commit();\n        return $userId;\n    } catch (Exception $e) {\n        $pdo-&gt;rollBack();\n        throw $e;\n    }\n}\n?&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"go-pq\" class=\"mobile-header\">Go (pq)</h3>\n<div class=\"mobile-code-block\" data-language=\"go\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">go</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-go\">package main\n\nimport (\n    &quot;database/sql&quot;\n    &quot;fmt&quot;\n    &quot;log&quot;\n    _ &quot;github.com/lib/pq&quot;\n)\n\nconst (\n    host     = &quot;localhost&quot;\n    port     = 5432\n    user     = &quot;appuser&quot;\n    password = &quot;password&quot;\n    dbname   = &quot;mydb&quot;\n)\n\nfunc main() {\n    // Connection string\n    psqlInfo := fmt.Sprintf(&quot;host=%s port=%d user=%s password=%s dbname=%s sslmode=disable&quot;,\n        host, port, user, password, dbname)\n    \n    // Open database connection\n    db, err := sql.Open(&quot;postgres&quot;, psqlInfo)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer db.Close()\n    \n    // Verify connection\n    err = db.Ping()\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Query example\n    rows, err := db.Query(&quot;SELECT id, username, email FROM users&quot;)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer rows.Close()\n    \n    for rows.Next() {\n        var id int\n        var username, email string\n        err = rows.Scan(&amp;id, &amp;username, &amp;email)\n        if err != nil {\n            log.Fatal(err)\n        }\n        fmt.Printf(&quot;User: %d, %s, %s\\n&quot;, id, username, email)\n    }\n    \n    // Prepared statement\n    stmt, err := db.Prepare(&quot;INSERT INTO users(username, email) VALUES($1, $2) RETURNING id&quot;)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer stmt.Close()\n    \n    var newID int\n    err = stmt.QueryRow(&quot;newuser&quot;, &quot;newuser@example.com&quot;).Scan(&amp;newID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(&quot;New user ID: %d\\n&quot;, newID)\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresql.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/postgres/postgres\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wiki.postgresql.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PostgreSQL Wiki</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresqltutorial.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PostgreSQL Tutorial</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wiki.postgresql.org/wiki/Performance_Optimization\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresql.org/docs/current/security.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresql.org/docs/current/high-availability.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">High Availability Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresql.org/community/forums/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forums</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"22 min","wordCount":4294,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"SSL Configuration","id":"ssl-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"PgBouncer Configuration","id":"pgbouncer-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Authentication and Access Control","id":"authentication-and-access-control"},{"level":3,"text":"User and Role Management","id":"user-and-role-management"},{"level":3,"text":"Row-Level Security (RLS)","id":"row-level-security-rls"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"Creating Databases and Schemas","id":"creating-databases-and-schemas"},{"level":3,"text":"Table Partitioning","id":"table-partitioning"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Query Optimization","id":"query-optimization"},{"level":3,"text":"Connection Pooling","id":"connection-pooling"},{"level":3,"text":"Vacuum and Maintenance","id":"vacuum-and-maintenance"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Built-in Monitoring Views","id":"built-in-monitoring-views"},{"level":3,"text":"pg_stat_statements","id":"pg_stat_statements"},{"level":3,"text":"External Monitoring Tools","id":"external-monitoring-tools"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Logical Backups with pg_dump","id":"logical-backups-with-pg_dump"},{"level":3,"text":"Physical Backups with pg_basebackup","id":"physical-backups-with-pg_basebackup"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":3,"text":"Automated Backup Script","id":"automated-backup-script"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Performance Issues","id":"performance-issues"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Version Upgrade","id":"version-upgrade"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Python (psycopg2)","id":"python-psycopg2"},{"level":3,"text":"Node.js (node-postgres)","id":"nodejs-node-postgres"},{"level":3,"text":"Java (JDBC)","id":"java-jdbc"},{"level":3,"text":"PHP (PDO)","id":"php-pdo"},{"level":3,"text":"Go (pq)","id":"go-pq"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-21T18:34:25.688Z","metadataVersion":"2.0"},"category":{"key":"databases","name":"Databases","description":"Databases tools and applications","icon":"🗄️","color":"#8be9fd"},"relatedGuides":[{"name":"cassandra","displayName":"cassandra Installation Guide","slug":"cassandra","description":"cassandra is a free and open-source distributed NoSQL database. Apache Cassandra provides high availability with no single point of failure, serving as an open-source alternative to Amazon DynamoDB or Azure Cosmos DB","category":"databases","subcategory":"databases","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,7000,9042],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["databases","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/databases/cassandra","documentationUrl":"https://howtomgr.github.io/databases/cassandra","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cassandra","updatedAt":"2025-09-16T17:02:20Z","createdAt":"2025-09-16T02:24:22Z","readmeRaw":"# cassandra Installation Guide\n\ncassandra is a free and open-source distributed NoSQL database. Apache Cassandra provides high availability with no single point of failure, serving as an open-source alternative to Amazon DynamoDB or Azure Cosmos DB\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores minimum (8+ recommended)\n  - RAM: 8GB minimum (32GB+ recommended)\n  - Storage: 10GB+ for data\n  - Network: Cluster communication\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9042 (default cassandra port)\n  - Port 7000 for inter-node\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cassandra\nsudo dnf install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncassandra -v\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cassandra\nsudo apt install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo ufw allow 9042\n\n# Verify installation\ncassandra -v\n```\n\n### Arch Linux\n\n```bash\n# Install cassandra\nsudo pacman -S cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Verify installation\ncassandra -v\n```\n\n### Alpine Linux\n\n```bash\n# Install cassandra\napk add --no-cache cassandra\n\n# Enable and start service\nrc-update add cassandra default\nrc-service cassandra start\n\n# Verify installation\ncassandra -v\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cassandra\nsudo zypper install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncassandra -v\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cassandra\n\n# Start service\nbrew services start cassandra\n\n# Verify installation\ncassandra -v\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cassandra\n\n# Enable in rc.conf\necho 'cassandra_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cassandra start\n\n# Verify installation\ncassandra -v\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cassandra\n\n# Or using Scoop\nscoop install cassandra\n\n# Verify installation\ncassandra -v\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cassandra\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncassandra -v\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cassandra\n\n# Start service\nsudo systemctl start cassandra\n\n# Stop service\nsudo systemctl stop cassandra\n\n# Restart service\nsudo systemctl restart cassandra\n\n# Check status\nsudo systemctl status cassandra\n\n# View logs\nsudo journalctl -u cassandra -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cassandra default\n\n# Start service\nrc-service cassandra start\n\n# Stop service\nrc-service cassandra stop\n\n# Restart service\nrc-service cassandra restart\n\n# Check status\nrc-service cassandra status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cassandra_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cassandra start\n\n# Stop service\nservice cassandra stop\n\n# Restart service\nservice cassandra restart\n\n# Check status\nservice cassandra status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cassandra\nbrew services stop cassandra\nbrew services restart cassandra\n\n# Check status\nbrew services list | grep cassandra\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cassandra\n\n# Stop service\nnet stop cassandra\n\n# Using PowerShell\nStart-Service cassandra\nStop-Service cassandra\nRestart-Service cassandra\n\n# Check status\nGet-Service cassandra\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cassandra_backend {\n    server 127.0.0.1:9042;\n}\n\nserver {\n    listen 80;\n    server_name cassandra.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cassandra.example.com;\n\n    ssl_certificate /etc/ssl/certs/cassandra.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cassandra.example.com.key;\n\n    location / {\n        proxy_pass http://cassandra_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cassandra.example.com\n    Redirect permanent / https://cassandra.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cassandra.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cassandra.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cassandra.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9042/\n    ProxyPassReverse / http://127.0.0.1:9042/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cassandra_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cassandra.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cassandra_backend\n\nbackend cassandra_backend\n    balance roundrobin\n    server cassandra1 127.0.0.1:9042 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cassandra:cassandra /etc/cassandra\nsudo chmod 750 /etc/cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status cassandra\n\n# View logs\nsudo journalctl -u cassandra -f\n\n# Monitor resource usage\ntop -p $(pgrep cassandra)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cassandra\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cassandra-backup-$DATE.tar.gz\" /etc/cassandra /var/lib/cassandra\n\necho \"Backup completed: $BACKUP_DIR/cassandra-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cassandra\n\n# Restore from backup\ntar -xzf /backup/cassandra/cassandra-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cassandra\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cassandra -n 100\nsudo tail -f /var/log/cassandra/cassandra.log\n\n# Check configuration\ncassandra -v\n\n# Check permissions\nls -la /etc/cassandra\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9042\n\n# Test connectivity\ntelnet localhost 9042\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cassandra)\n\n# Check disk I/O\niotop -p $(pgrep cassandra)\n\n# Check connections\nss -an | grep 9042\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cassandra:\n    image: cassandra:latest\n    ports:\n      - \"9042:9042\"\n    volumes:\n      - ./config:/etc/cassandra\n      - ./data:/var/lib/cassandra\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cassandra\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cassandra\n\n# Arch Linux\nsudo pacman -Syu cassandra\n\n# Alpine Linux\napk update && apk upgrade cassandra\n\n# openSUSE\nsudo zypper update cassandra\n\n# FreeBSD\npkg update && pkg upgrade cassandra\n\n# Always backup before updates\ntar -czf /backup/cassandra-pre-update-$(date +%Y%m%d).tar.gz /etc/cassandra\n\n# Restart after updates\nsudo systemctl restart cassandra\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cassandra\n\n# Clean old logs\nfind /var/log/cassandra -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cassandra\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cassandra.org/\n- GitHub Repository: https://github.com/cassandra/cassandra\n- Community Forum: https://forum.cassandra.org/\n- Best Practices Guide: https://docs.cassandra.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">cassandra is a free and open-source distributed NoSQL database. Apache Cassandra provides high availability with no single point of failure, serving as an open-source alternative to Amazon DynamoDB or Azure Cosmos DB</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores minimum (8+ recommended)</li>\n<li class=\"mobile-list-item\">RAM: 8GB minimum (32GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for data</li>\n<li class=\"mobile-list-item\">Network: Cluster communication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9042 (default cassandra port)</li>\n<li class=\"mobile-list-item\">Port 7000 for inter-node</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cassandra\nsudo dnf install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cassandra\nsudo apt install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo ufw allow 9042\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cassandra\nsudo pacman -S cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cassandra\napk add --no-cache cassandra\n\n# Enable and start service\nrc-update add cassandra default\nrc-service cassandra start\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cassandra\nsudo zypper install -y cassandra\n\n# Enable and start service\nsudo systemctl enable --now cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cassandra\n\n# Start service\nbrew services start cassandra\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cassandra\n\n# Enable in rc.conf\necho &#039;cassandra_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cassandra start\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cassandra\n\n# Or using Scoop\nscoop install cassandra\n\n# Verify installation\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cassandra\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncassandra -v</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cassandra\n\n# Start service\nsudo systemctl start cassandra\n\n# Stop service\nsudo systemctl stop cassandra\n\n# Restart service\nsudo systemctl restart cassandra\n\n# Check status\nsudo systemctl status cassandra\n\n# View logs\nsudo journalctl -u cassandra -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cassandra default\n\n# Start service\nrc-service cassandra start\n\n# Stop service\nrc-service cassandra stop\n\n# Restart service\nrc-service cassandra restart\n\n# Check status\nrc-service cassandra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cassandra_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cassandra start\n\n# Stop service\nservice cassandra stop\n\n# Restart service\nservice cassandra restart\n\n# Check status\nservice cassandra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cassandra\nbrew services stop cassandra\nbrew services restart cassandra\n\n# Check status\nbrew services list | grep cassandra</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cassandra\n\n# Stop service\nnet stop cassandra\n\n# Using PowerShell\nStart-Service cassandra\nStop-Service cassandra\nRestart-Service cassandra\n\n# Check status\nGet-Service cassandra</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cassandra_backend {\n    server 127.0.0.1:9042;\n}\n\nserver {\n    listen 80;\n    server_name cassandra.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cassandra.example.com;\n\n    ssl_certificate /etc/ssl/certs/cassandra.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cassandra.example.com.key;\n\n    location / {\n        proxy_pass http://cassandra_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cassandra.example.com\n    Redirect permanent / https://cassandra.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cassandra.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cassandra.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cassandra.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9042/\n    ProxyPassReverse / http://127.0.0.1:9042/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cassandra_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cassandra.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cassandra_backend\n\nbackend cassandra_backend\n    balance roundrobin\n    server cassandra1 127.0.0.1:9042 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cassandra:cassandra /etc/cassandra\nsudo chmod 750 /etc/cassandra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9042/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status cassandra\n\n# View logs\nsudo journalctl -u cassandra -f\n\n# Monitor resource usage\ntop -p $(pgrep cassandra)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cassandra&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cassandra-backup-$DATE.tar.gz&quot; /etc/cassandra /var/lib/cassandra\n\necho &quot;Backup completed: $BACKUP_DIR/cassandra-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cassandra\n\n# Restore from backup\ntar -xzf /backup/cassandra/cassandra-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cassandra</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cassandra -n 100\nsudo tail -f /var/log/cassandra/cassandra.log\n\n# Check configuration\ncassandra -v\n\n# Check permissions\nls -la /etc/cassandra</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9042\n\n# Test connectivity\ntelnet localhost 9042\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cassandra)\n\n# Check disk I/O\niotop -p $(pgrep cassandra)\n\n# Check connections\nss -an | grep 9042</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cassandra:\n    image: cassandra:latest\n    ports:\n      - &quot;9042:9042&quot;\n    volumes:\n      - ./config:/etc/cassandra\n      - ./data:/var/lib/cassandra\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cassandra\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cassandra\n\n# Arch Linux\nsudo pacman -Syu cassandra\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cassandra\n\n# openSUSE\nsudo zypper update cassandra\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cassandra\n\n# Always backup before updates\ntar -czf /backup/cassandra-pre-update-$(date +%Y%m%d).tar.gz /etc/cassandra\n\n# Restart after updates\nsudo systemctl restart cassandra</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cassandra\n\n# Clean old logs\nfind /var/log/cassandra -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cassandra</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cassandra.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cassandra/cassandra</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cassandra.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cassandra.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1291,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-21T18:36:26.290Z","metadataVersion":"2.0"},{"name":"cockroachdb","displayName":"cockroachdb Installation Guide","slug":"cockroachdb","description":"cockroachdb is a free and open-source distributed SQL database. CockroachDB provides distributed SQL with strong consistency and survivability, serving as an open-source alternative to Google Spanner or Amazon Aurora","category":"databases","subcategory":"databases","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8080,26257],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["databases","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/databases/cockroachdb","documentationUrl":"https://howtomgr.github.io/databases/cockroachdb","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/cockroachdb","updatedAt":"2025-09-16T17:04:45Z","createdAt":"2025-09-16T02:27:21Z","readmeRaw":"# cockroachdb Installation Guide\n\ncockroachdb is a free and open-source distributed SQL database. CockroachDB provides distributed SQL with strong consistency and survivability, serving as an open-source alternative to Google Spanner or Amazon Aurora\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores minimum (4+ recommended)\n  - RAM: 2GB minimum (8GB+ recommended)\n  - Storage: 10GB+ for data\n  - Network: Cluster communication\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 26257 (default cockroachdb port)\n  - Port 8080 for admin UI\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cockroachdb\nsudo dnf install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockroach version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install cockroachdb\nsudo apt install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo ufw allow 26257\n\n# Verify installation\ncockroach version\n```\n\n### Arch Linux\n\n```bash\n# Install cockroachdb\nsudo pacman -S cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Verify installation\ncockroach version\n```\n\n### Alpine Linux\n\n```bash\n# Install cockroachdb\napk add --no-cache cockroachdb\n\n# Enable and start service\nrc-update add cockroachdb default\nrc-service cockroachdb start\n\n# Verify installation\ncockroach version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install cockroachdb\nsudo zypper install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockroach version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install cockroachdb\n\n# Start service\nbrew services start cockroachdb\n\n# Verify installation\ncockroach version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install cockroachdb\n\n# Enable in rc.conf\necho 'cockroachdb_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cockroachdb start\n\n# Verify installation\ncockroach version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install cockroachdb\n\n# Or using Scoop\nscoop install cockroachdb\n\n# Verify installation\ncockroach version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/cockroachdb\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncockroach version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable cockroachdb\n\n# Start service\nsudo systemctl start cockroachdb\n\n# Stop service\nsudo systemctl stop cockroachdb\n\n# Restart service\nsudo systemctl restart cockroachdb\n\n# Check status\nsudo systemctl status cockroachdb\n\n# View logs\nsudo journalctl -u cockroachdb -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add cockroachdb default\n\n# Start service\nrc-service cockroachdb start\n\n# Stop service\nrc-service cockroachdb stop\n\n# Restart service\nrc-service cockroachdb restart\n\n# Check status\nrc-service cockroachdb status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'cockroachdb_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice cockroachdb start\n\n# Stop service\nservice cockroachdb stop\n\n# Restart service\nservice cockroachdb restart\n\n# Check status\nservice cockroachdb status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start cockroachdb\nbrew services stop cockroachdb\nbrew services restart cockroachdb\n\n# Check status\nbrew services list | grep cockroachdb\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start cockroachdb\n\n# Stop service\nnet stop cockroachdb\n\n# Using PowerShell\nStart-Service cockroachdb\nStop-Service cockroachdb\nRestart-Service cockroachdb\n\n# Check status\nGet-Service cockroachdb\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream cockroachdb_backend {\n    server 127.0.0.1:26257;\n}\n\nserver {\n    listen 80;\n    server_name cockroachdb.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cockroachdb.example.com;\n\n    ssl_certificate /etc/ssl/certs/cockroachdb.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cockroachdb.example.com.key;\n\n    location / {\n        proxy_pass http://cockroachdb_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName cockroachdb.example.com\n    Redirect permanent / https://cockroachdb.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName cockroachdb.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cockroachdb.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cockroachdb.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:26257/\n    ProxyPassReverse / http://127.0.0.1:26257/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend cockroachdb_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cockroachdb.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cockroachdb_backend\n\nbackend cockroachdb_backend\n    balance roundrobin\n    server cockroachdb1 127.0.0.1:26257 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R cockroachdb:cockroachdb /etc/cockroachdb\nsudo chmod 750 /etc/cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status cockroachdb\n\n# View logs\nsudo journalctl -u cockroachdb -f\n\n# Monitor resource usage\ntop -p $(pgrep cockroachdb)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/cockroachdb\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/cockroachdb-backup-$DATE.tar.gz\" /etc/cockroachdb /var/lib/cockroachdb\n\necho \"Backup completed: $BACKUP_DIR/cockroachdb-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop cockroachdb\n\n# Restore from backup\ntar -xzf /backup/cockroachdb/cockroachdb-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cockroachdb\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u cockroachdb -n 100\nsudo tail -f /var/log/cockroachdb/cockroachdb.log\n\n# Check configuration\ncockroach version\n\n# Check permissions\nls -la /etc/cockroachdb\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 26257\n\n# Test connectivity\ntelnet localhost 26257\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep cockroachdb)\n\n# Check disk I/O\niotop -p $(pgrep cockroachdb)\n\n# Check connections\nss -an | grep 26257\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  cockroachdb:\n    image: cockroachdb:latest\n    ports:\n      - \"26257:26257\"\n    volumes:\n      - ./config:/etc/cockroachdb\n      - ./data:/var/lib/cockroachdb\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cockroachdb\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade cockroachdb\n\n# Arch Linux\nsudo pacman -Syu cockroachdb\n\n# Alpine Linux\napk update && apk upgrade cockroachdb\n\n# openSUSE\nsudo zypper update cockroachdb\n\n# FreeBSD\npkg update && pkg upgrade cockroachdb\n\n# Always backup before updates\ntar -czf /backup/cockroachdb-pre-update-$(date +%Y%m%d).tar.gz /etc/cockroachdb\n\n# Restart after updates\nsudo systemctl restart cockroachdb\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/cockroachdb\n\n# Clean old logs\nfind /var/log/cockroachdb -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cockroachdb\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.cockroachdb.org/\n- GitHub Repository: https://github.com/cockroachdb/cockroachdb\n- Community Forum: https://forum.cockroachdb.org/\n- Best Practices Guide: https://docs.cockroachdb.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">cockroachdb is a free and open-source distributed SQL database. CockroachDB provides distributed SQL with strong consistency and survivability, serving as an open-source alternative to Google Spanner or Amazon Aurora</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores minimum (4+ recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for data</li>\n<li class=\"mobile-list-item\">Network: Cluster communication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 26257 (default cockroachdb port)</li>\n<li class=\"mobile-list-item\">Port 8080 for admin UI</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install cockroachdb\nsudo dnf install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install cockroachdb\nsudo apt install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo ufw allow 26257\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockroachdb\nsudo pacman -S cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockroachdb\napk add --no-cache cockroachdb\n\n# Enable and start service\nrc-update add cockroachdb default\nrc-service cockroachdb start\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install cockroachdb\nsudo zypper install -y cockroachdb\n\n# Enable and start service\nsudo systemctl enable --now cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install cockroachdb\n\n# Start service\nbrew services start cockroachdb\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install cockroachdb\n\n# Enable in rc.conf\necho &#039;cockroachdb_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cockroachdb start\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install cockroachdb\n\n# Or using Scoop\nscoop install cockroachdb\n\n# Verify installation\ncockroach version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/cockroachdb\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncockroach version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable cockroachdb\n\n# Start service\nsudo systemctl start cockroachdb\n\n# Stop service\nsudo systemctl stop cockroachdb\n\n# Restart service\nsudo systemctl restart cockroachdb\n\n# Check status\nsudo systemctl status cockroachdb\n\n# View logs\nsudo journalctl -u cockroachdb -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add cockroachdb default\n\n# Start service\nrc-service cockroachdb start\n\n# Stop service\nrc-service cockroachdb stop\n\n# Restart service\nrc-service cockroachdb restart\n\n# Check status\nrc-service cockroachdb status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;cockroachdb_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice cockroachdb start\n\n# Stop service\nservice cockroachdb stop\n\n# Restart service\nservice cockroachdb restart\n\n# Check status\nservice cockroachdb status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start cockroachdb\nbrew services stop cockroachdb\nbrew services restart cockroachdb\n\n# Check status\nbrew services list | grep cockroachdb</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start cockroachdb\n\n# Stop service\nnet stop cockroachdb\n\n# Using PowerShell\nStart-Service cockroachdb\nStop-Service cockroachdb\nRestart-Service cockroachdb\n\n# Check status\nGet-Service cockroachdb</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream cockroachdb_backend {\n    server 127.0.0.1:26257;\n}\n\nserver {\n    listen 80;\n    server_name cockroachdb.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name cockroachdb.example.com;\n\n    ssl_certificate /etc/ssl/certs/cockroachdb.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/cockroachdb.example.com.key;\n\n    location / {\n        proxy_pass http://cockroachdb_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName cockroachdb.example.com\n    Redirect permanent / https://cockroachdb.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName cockroachdb.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/cockroachdb.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/cockroachdb.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:26257/\n    ProxyPassReverse / http://127.0.0.1:26257/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend cockroachdb_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cockroachdb.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend cockroachdb_backend\n\nbackend cockroachdb_backend\n    balance roundrobin\n    server cockroachdb1 127.0.0.1:26257 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R cockroachdb:cockroachdb /etc/cockroachdb\nsudo chmod 750 /etc/cockroachdb\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=26257/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status cockroachdb\n\n# View logs\nsudo journalctl -u cockroachdb -f\n\n# Monitor resource usage\ntop -p $(pgrep cockroachdb)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/cockroachdb&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/cockroachdb-backup-$DATE.tar.gz&quot; /etc/cockroachdb /var/lib/cockroachdb\n\necho &quot;Backup completed: $BACKUP_DIR/cockroachdb-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop cockroachdb\n\n# Restore from backup\ntar -xzf /backup/cockroachdb/cockroachdb-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start cockroachdb</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u cockroachdb -n 100\nsudo tail -f /var/log/cockroachdb/cockroachdb.log\n\n# Check configuration\ncockroach version\n\n# Check permissions\nls -la /etc/cockroachdb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 26257\n\n# Test connectivity\ntelnet localhost 26257\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep cockroachdb)\n\n# Check disk I/O\niotop -p $(pgrep cockroachdb)\n\n# Check connections\nss -an | grep 26257</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  cockroachdb:\n    image: cockroachdb:latest\n    ports:\n      - &quot;26257:26257&quot;\n    volumes:\n      - ./config:/etc/cockroachdb\n      - ./data:/var/lib/cockroachdb\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update cockroachdb\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade cockroachdb\n\n# Arch Linux\nsudo pacman -Syu cockroachdb\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade cockroachdb\n\n# openSUSE\nsudo zypper update cockroachdb\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade cockroachdb\n\n# Always backup before updates\ntar -czf /backup/cockroachdb-pre-update-$(date +%Y%m%d).tar.gz /etc/cockroachdb\n\n# Restart after updates\nsudo systemctl restart cockroachdb</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/cockroachdb\n\n# Clean old logs\nfind /var/log/cockroachdb -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/cockroachdb</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.cockroachdb.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/cockroachdb/cockroachdb</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.cockroachdb.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.cockroachdb.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1289,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-21T18:36:19.993Z","metadataVersion":"2.0"},{"name":"mariadb","displayName":"MariaDB Installation Guide","slug":"mariadb","description":"MariaDB is a free and open-source relational database management system (RDBMS) and a fork of MySQL. Originally developed by Michael \"Monty\" Widenius, the original developer of MySQL, MariaDB was created to remain free under the GNU GPL after Oracle's acquisition of MySQL. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade features including Galera clustering, advanced storage engines, and enhanced performance optimizations without licensing costs, with features like ACID compliance, replication, and horizontal scaling.","category":"databases","subcategory":"databases","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[0,1,30,2048,3306,3307,4444,4567,4568],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["databases","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/databases/mariadb","documentationUrl":"https://howtomgr.github.io/databases/mariadb","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mariadb","updatedAt":"2025-09-16T17:29:22Z","createdAt":"2025-09-16T03:39:50Z","readmeRaw":"# MariaDB Installation Guide\n\nMariaDB is a free and open-source relational database management system (RDBMS) and a fork of MySQL. Originally developed by Michael \"Monty\" Widenius, the original developer of MySQL, MariaDB was created to remain free under the GNU GPL after Oracle's acquisition of MySQL. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade features including Galera clustering, advanced storage engines, and enhanced performance optimizations without licensing costs, with features like ACID compliance, replication, and horizontal scaling.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (4+ cores recommended for production)\n  - RAM: 1GB minimum (8GB+ recommended for production)\n  - Storage: 5GB minimum (SSD recommended for performance)\n  - Network: Stable connectivity for replication and clustering setups\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 2.6+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3306 (default MariaDB port)\n  - Port 4444 (Galera SST - State Snapshot Transfer)\n  - Port 4567 (Galera group communication)\n  - Port 4568 (Galera IST - Incremental State Transfer)\n- **Dependencies**:\n  - libc6, libssl, zlib (usually included in distributions)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Add MariaDB official repository\nsudo tee /etc/yum.repos.d/mariadb.repo <<EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.mariadb.org/yum/11.2/rhel/\\$releasever/\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.mariadb.org/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nenabled = 1\nEOF\n\n# Import MariaDB GPG key\nsudo rpm --import https://mirror.mariadb.org/yum/RPM-GPG-KEY-MariaDB\n\n# Install MariaDB server\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y software-properties-common dirmngr apt-transport-https\n\n# Add MariaDB signing key\ncurl -o /tmp/mariadb_release_signing_key.asc 'https://mariadb.org/mariadb_release_signing_key.asc'\nsudo mv /tmp/mariadb_release_signing_key.asc /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc\n\n# Add MariaDB repository\nsudo add-apt-repository \"deb [arch=amd64] https://mirror.mariadb.org/repo/11.2/ubuntu $(lsb_release -cs) main\"\n\n# Update package index\nsudo apt update\n\n# Install MariaDB server\nsudo apt install -y mariadb-server mariadb-client mariadb-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo ufw allow mysql\n```\n\n### Arch Linux\n\n```bash\n# Install MariaDB from official repositories\nsudo pacman -S mariadb\n\n# Initialize database\nsudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configuration location: /etc/my.cnf\n```\n\n### Alpine Linux\n\n```bash\n# Install MariaDB\napk add --no-cache mariadb mariadb-client mariadb-backup\n\n# Initialize database\nmysql_install_db --user=mysql --datadir=/var/lib/mysql\n\n# Create mysql user if not exists\nadduser -D -H -s /sbin/nologin mysql\n\n# Set permissions\nchown -R mysql:mysql /var/lib/mysql\n\n# Enable and start service\nrc-update add mariadb default\nrc-service mariadb start\n\n# Secure installation\nmysql_secure_installation\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y mariadb mariadb-client mariadb-tools\n\n# For latest version from official repository\nsudo zypper addrepo https://mirror.mariadb.org/repo/11.2/sles/15/x86_64 mariadb\nsudo zypper refresh\nsudo zypper install -y MariaDB-server MariaDB-client\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y mariadb mariadb-client\n\n# Initialize database if needed\nsudo mysql_install_db --user=mysql\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install mariadb\n\n# Start MariaDB service\nbrew services start mariadb\n\n# Or run manually\nmariadb-safe --datadir=/usr/local/var/mysql\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/my.cnf\n# Alternative: /opt/homebrew/etc/my.cnf (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install mariadb106-server mariadb106-client\n\n# Using ports\ncd /usr/ports/databases/mariadb106-server\nmake install clean\n\n# Enable MariaDB\necho 'mysql_enable=\"YES\"' >> /etc/rc.conf\n\n# Initialize database\nservice mysql-server start\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/mysql/my.cnf\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install mariadb\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mariadb\n\n# Method 3: Manual installation\n# Download MariaDB from https://mariadb.org/download/\n# Run mariadb-*.msi installer\n\n# Install as Windows service\n\"C:\\Program Files\\MariaDB 11.2\\bin\\mysqld\" --install MariaDB\nnet start MariaDB\n\n# Configuration location: C:\\Program Files\\MariaDB 11.2\\data\\my.ini\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create mysql user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/mysql -s /sbin/nologin -c \"MariaDB Server\" mysql\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/my.cnf`\n- Debian/Ubuntu: `/etc/mysql/mariadb.conf.d/50-server.cnf`\n- Arch Linux: `/etc/my.cnf`\n- Alpine Linux: `/etc/my.cnf.d/mariadb-server.cnf`\n- openSUSE/SLES: `/etc/my.cnf`\n- macOS: `/usr/local/etc/my.cnf`\n- FreeBSD: `/usr/local/etc/mysql/my.cnf`\n- Windows: `C:\\Program Files\\MariaDB 11.2\\data\\my.ini`\n\n3. **Essential settings to change**:\n\n```ini\n# /etc/mysql/mariadb.conf.d/50-server.cnf\n[mysqld]\n# Basic settings\nbind-address = 127.0.0.1\nport = 3306\nsocket = /run/mysqld/mysqld.sock\ndatadir = /var/lib/mysql\n\n# Security settings\nsql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\nlocal_infile = 0\nskip_name_resolve = 1\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\n\n# Performance settings\nmax_connections = 200\nthread_cache_size = 50\ntable_open_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\n\n# Logging\nlog_error = /var/log/mysql/error.log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nexpire_logs_days = 7\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if MariaDB is running\nsudo systemctl status mariadb\n\n# Test connection\nmariadb -u root -p -e \"SELECT VERSION();\"\n\n# Check user accounts\nmariadb -u root -p -e \"SELECT User, Host FROM mysql.user;\"\n\n# Test database operations\nmariadb -u root -p -e \"CREATE DATABASE test_db; DROP DATABASE test_db;\"\n\n# Check configuration\nmariadb -u root -p -e \"SHOW VARIABLES LIKE 'character_set%';\"\nmariadb -u root -p -e \"SHOW VARIABLES LIKE 'collation%';\"\n```\n\n**WARNING:** Change the default root password immediately and remove anonymous users!\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable MariaDB to start on boot\nsudo systemctl enable mariadb\n\n# Start MariaDB\nsudo systemctl start mariadb\n\n# Stop MariaDB\nsudo systemctl stop mariadb\n\n# Restart MariaDB\nsudo systemctl restart mariadb\n\n# Reload configuration\nsudo systemctl reload mariadb\n\n# Check status\nsudo systemctl status mariadb\n\n# View logs\nsudo journalctl -u mariadb -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable MariaDB to start on boot\nrc-update add mariadb default\n\n# Start MariaDB\nrc-service mariadb start\n\n# Stop MariaDB\nrc-service mariadb stop\n\n# Restart MariaDB\nrc-service mariadb restart\n\n# Check status\nrc-service mariadb status\n\n# View logs\ntail -f /var/log/mysql/error.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mysql_enable=\"YES\"' >> /etc/rc.conf\n\n# Start MariaDB\nservice mysql-server start\n\n# Stop MariaDB\nservice mysql-server stop\n\n# Restart MariaDB\nservice mysql-server restart\n\n# Check status\nservice mysql-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mariadb\nbrew services stop mariadb\nbrew services restart mariadb\n\n# Check status\nbrew services list | grep mariadb\n\n# Manual control\nmariadb-safe --datadir=/usr/local/var/mysql\n```\n\n### Windows Service Manager\n\n```powershell\n# Start MariaDB service\nnet start MariaDB\n\n# Stop MariaDB service\nnet stop MariaDB\n\n# Using PowerShell\nStart-Service MariaDB\nStop-Service MariaDB\nRestart-Service MariaDB\n\n# Check status\nGet-Service MariaDB\n\n# View logs\nGet-EventLog -LogName Application -Source MariaDB\n```\n\n## Advanced Configuration\n\n### High Availability Configuration\n\n```ini\n# Master-Slave Replication Configuration\n# Master server configuration\n[mysqld]\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = production_db\n\n# Slave server configuration\n[mysqld]\nserver-id = 2\nrelay-log = relay-bin\nread_only = 1\n```\n\n### Galera Cluster Configuration\n\n```ini\n# Galera Cluster settings\n[mysqld]\n# Galera Provider Configuration\nwsrep_on = ON\nwsrep_provider = /usr/lib/galera/libgalera_smm.so\n\n# Galera Cluster Configuration\nwsrep_cluster_name = \"MariaDB_Cluster\"\nwsrep_cluster_address = \"gcomm://node1.example.com,node2.example.com,node3.example.com\"\n\n# Galera Synchronization Configuration\nwsrep_sst_method = rsync\nwsrep_sst_auth = wsrep_sst:wsrep_password\n\n# Galera Node Configuration\nwsrep_node_address = \"node1.example.com\"\nwsrep_node_name = \"mariadb-node-1\"\n\n# Required settings\nbinlog_format = ROW\ndefault_storage_engine = InnoDB\ninnodb_autoinc_lock_mode = 2\n```\n\n### Advanced Security Settings\n\n```ini\n# Security hardening\n[mysqld]\n# SSL/TLS configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\ntls_version = TLSv1.2,TLSv1.3\n\n# Authentication\nplugin-load-add = server_audit=server_audit.so\nserver_audit_logging = ON\nserver_audit_events = 'CONNECT,QUERY,TABLE'\n\n# Connection security\nmax_user_connections = 100\nmax_connect_errors = 10\n\n# Disable dangerous functions\nlocal_infile = 0\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/mariadb-proxy\nupstream mariadb_backend {\n    server 127.0.0.1:3306 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:3307 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 3306;\n    proxy_pass mariadb_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mariadb.log;\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend mariadb_frontend\n    bind *:3306\n    mode tcp\n    option tcplog\n    default_backend mariadb_servers\n\nbackend mariadb_servers\n    mode tcp\n    balance roundrobin\n    option mysql-check user haproxy\n    server mariadb1 127.0.0.1:3306 check\n    server mariadb2 127.0.0.1:3307 check backup\n```\n\n### ProxySQL Configuration\n\n```sql\n-- ProxySQL configuration for MariaDB load balancing\nINSERT INTO mysql_servers(hostgroup_id, hostname, port, weight) VALUES\n(0, '127.0.0.1', 3306, 900),\n(0, '127.0.0.1', 3307, 100);\n\nINSERT INTO mysql_query_rules(rule_id, active, match_pattern, destination_hostgroup, apply) VALUES\n(1, 1, '^SELECT.*', 0, 1),\n(2, 1, '^INSERT.*', 0, 1);\n\nLOAD MYSQL SERVERS TO RUNTIME;\nLOAD MYSQL QUERY RULES TO RUNTIME;\nSAVE MYSQL SERVERS TO DISK;\nSAVE MYSQL QUERY RULES TO DISK;\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate SSL certificates for MariaDB\nsudo mkdir -p /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa 2048 > /etc/mysql/ssl/ca-key.pem\nsudo openssl req -new -x509 -nodes -days 3650 -key /etc/mysql/ssl/ca-key.pem -out /etc/mysql/ssl/ca-cert.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MariaDB-CA\"\n\n# Create server certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mariadb.example.com\"\nsudo openssl rsa -in /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/server-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/server-cert.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mariadb-client\"\nsudo openssl rsa -in /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/client-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/client-cert.pem\n\n# Set permissions\nsudo chown -R mysql:mysql /etc/mysql/ssl\nsudo chmod 600 /etc/mysql/ssl/*-key.pem\nsudo chmod 644 /etc/mysql/ssl/*-cert.pem /etc/mysql/ssl/ca-cert.pem\n```\n\n### User Security and Privileges\n\n```sql\n-- Create secure users with SSL requirements\nCREATE USER 'appuser'@'%' IDENTIFIED BY 'SecurePassword123!' REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'%';\n\n-- Create backup user\nCREATE USER 'backup'@'localhost' IDENTIFIED BY 'BackupPassword123!' REQUIRE SSL;\nGRANT SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'backup'@'localhost';\n\n-- Create monitoring user\nCREATE USER 'monitor'@'localhost' IDENTIFIED BY 'MonitorPassword123!';\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'monitor'@'localhost';\n\n-- Set password policies\nSET GLOBAL strict_password_validation = ON;\n\n-- Remove dangerous defaults\nDELETE FROM mysql.user WHERE User = '';\nDELETE FROM mysql.user WHERE User = 'root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\nDROP DATABASE IF EXISTS test;\nFLUSH PRIVILEGES;\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 3306\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mariadb\nsudo firewall-cmd --permanent --zone=mariadb --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mariadb --add-port=3306/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 3306 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 3306\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"MariaDB\" -Direction Inbound -Protocol TCP -LocalPort 3306 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Database Creation and Management\n\n```sql\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create user with specific privileges\nCREATE USER 'appuser'@'%' IDENTIFIED BY 'SecurePassword123!' REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'%';\n\n-- Create tables with proper character set\nUSE myapp;\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_username (username),\n    INDEX idx_email (email)\n) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- Example of partitioned table for large datasets\nCREATE TABLE logs (\n    id BIGINT AUTO_INCREMENT,\n    log_date DATE NOT NULL,\n    message TEXT,\n    PRIMARY KEY (id, log_date)\n) ENGINE=InnoDB\nPARTITION BY RANGE (YEAR(log_date)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);\n```\n\n### Database Optimization\n\n```sql\n-- Analyze and optimize tables\nANALYZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.users;\n\n-- Check table status\nSHOW TABLE STATUS FROM myapp;\n\n-- Index optimization\nSHOW INDEX FROM myapp.users;\nALTER TABLE myapp.users ADD INDEX idx_created (created_at);\n\n-- View performance schema statistics\nSELECT * FROM information_schema.table_statistics \nWHERE table_schema = 'myapp' ORDER BY total_latency DESC;\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# MariaDB-specific kernel parameters\nsudo tee -a /etc/sysctl.conf <<EOF\n# MariaDB optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\nmysql soft nofile 65535\nmysql hard nofile 65535\nEOF\n```\n\n### MariaDB Performance Tuning\n\n```ini\n# High-performance MariaDB configuration\n[mysqld]\n# Memory settings\ninnodb_buffer_pool_size = 8G  # 70-80% of available RAM\ninnodb_buffer_pool_instances = 8\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\n\n# Thread settings\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# Connection settings\nmax_connections = 500\nmax_user_connections = 450\ninteractive_timeout = 3600\nwait_timeout = 600\n\n# Query cache\nquery_cache_type = 1\nquery_cache_size = 256M\n\n# Temporary tables\ntmp_table_size = 128M\nmax_heap_table_size = 128M\n\n# MyISAM settings (if used)\nkey_buffer_size = 256M\nmyisam_sort_buffer_size = 128M\n\n# InnoDB optimization\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\ninnodb_io_capacity = 2000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\n```\n\n### Query Optimization\n\n```sql\n-- Enable performance schema\nSET GLOBAL performance_schema = ON;\n\n-- Query optimization analysis\nSELECT * FROM performance_schema.events_statements_summary_by_digest \nORDER BY sum_timer_wait DESC LIMIT 10;\n\n-- Index usage analysis\nSELECT * FROM performance_schema.table_io_waits_summary_by_index_usage \nWHERE object_schema = 'myapp' ORDER BY sum_timer_wait DESC;\n\n-- Slow query analysis\nSELECT * FROM mysql.slow_log ORDER BY start_time DESC LIMIT 10;\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```sql\n-- Performance monitoring queries\nSHOW GLOBAL STATUS LIKE 'Threads_connected';\nSHOW GLOBAL STATUS LIKE 'Queries';\nSHOW GLOBAL STATUS LIKE 'Slow_queries';\nSHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read_requests';\nSHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_reads';\n\n-- Connection monitoring\nSELECT \n    USER,\n    HOST,\n    DB,\n    COMMAND,\n    TIME,\n    STATE,\n    INFO\nFROM INFORMATION_SCHEMA.PROCESSLIST\nWHERE USER != 'system user'\nORDER BY TIME DESC;\n\n-- Database size monitoring\nSELECT \n    table_schema AS 'Database',\n    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'Size (MB)'\nFROM information_schema.tables \nGROUP BY table_schema\nORDER BY SUM(data_length + index_length) DESC;\n```\n\n### External Monitoring Setup\n\n```bash\n# Install MariaDB Exporter for Prometheus\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-*.tar.gz\nsudo cp mysqld_exporter /usr/local/bin/\n\n# Create monitoring user\nmariadb -u root -p <<EOF\nCREATE USER 'exporter'@'localhost' IDENTIFIED BY 'ExporterPassword123!';\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysqld_exporter.service <<EOF\n[Unit]\nDescription=MariaDB Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mysql\nEnvironment=DATA_SOURCE_NAME=\"exporter:ExporterPassword123!@(localhost:3306)/\"\nExecStart=/usr/local/bin/mysqld_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mysqld_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# mariadb-health-check.sh\n\n# Check MariaDB service\nif ! systemctl is-active mariadb >/dev/null 2>&1; then\n    echo \"CRITICAL: MariaDB service is not running\"\n    exit 2\nfi\n\n# Check connectivity\nif ! mariadb -e \"SELECT 1;\" >/dev/null 2>&1; then\n    echo \"CRITICAL: Cannot connect to MariaDB\"\n    exit 2\nfi\n\n# Check replication (if configured)\nSLAVE_STATUS=$(mariadb -e \"SHOW SLAVE STATUS\\G\" 2>/dev/null | grep \"Slave_IO_Running:\")\nif [ -n \"$SLAVE_STATUS\" ]; then\n    IO_RUNNING=$(echo \"$SLAVE_STATUS\" | awk '{print $2}')\n    if [ \"$IO_RUNNING\" != \"Yes\" ]; then\n        echo \"WARNING: Replication IO thread not running\"\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mariadb -e \"SHOW STATUS LIKE 'Threads_connected';\" | tail -1 | awk '{print $2}')\nMAX_CONNECTIONS=$(mariadb -e \"SHOW VARIABLES LIKE 'max_connections';\" | tail -1 | awk '{print $2}')\nCONNECTION_USAGE=$((CONNECTIONS * 100 / MAX_CONNECTIONS))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo \"WARNING: High connection usage: ${CONNECTION_USAGE}%\"\n    exit 1\nfi\n\necho \"OK: MariaDB is healthy\"\nexit 0\n```\n\n## 9. Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# mariadb-backup.sh\n\nBACKUP_DIR=\"/backup/mariadb/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Full database backup\nmariadb-dump --all-databases \\\n  --single-transaction \\\n  --routines \\\n  --triggers \\\n  --events \\\n  --master-data=2 \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip > \"$BACKUP_DIR/full-backup.sql.gz\"\n\n# Individual database backup\nmariadb-dump --single-transaction \\\n  --routines \\\n  --triggers \\\n  myapp \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip > \"$BACKUP_DIR/myapp-backup.sql.gz\"\n\n# Binary log backup\ncp /var/lib/mysql/mysql-bin.* \"$BACKUP_DIR/\" 2>/dev/null || true\n\n# Configuration backup\ntar czf \"$BACKUP_DIR/mariadb-config.tar.gz\" /etc/mysql/\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# mariadb-restore.sh\n\nBACKUP_FILE=\"$1\"\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.sql.gz>\"\n    exit 1\nfi\n\n# Stop applications using the database\necho \"Stopping applications...\"\n\n# Restore database\necho \"Restoring database from $BACKUP_FILE...\"\nzcat \"$BACKUP_FILE\" | mariadb -u root -p\n\n# Verify restore\nmariadb -u root -p -e \"SHOW DATABASES;\"\n\necho \"Restore completed\"\n```\n\n### Point-in-Time Recovery\n\n```bash\n#!/bin/bash\n# mariadb-pitr.sh\n\nBACKUP_FILE=\"$1\"\nRECOVERY_TIME=\"$2\"\n\nif [ -z \"$BACKUP_FILE\" ] || [ -z \"$RECOVERY_TIME\" ]; then\n    echo \"Usage: $0 <backup-file.sql.gz> <recovery-time>\"\n    echo \"Example: $0 backup.sql.gz '2024-01-15 14:30:00'\"\n    exit 1\nfi\n\n# Restore base backup\nzcat \"$BACKUP_FILE\" | mariadb -u root -p\n\n# Apply binary logs up to recovery point\nmysqlbinlog --stop-datetime=\"$RECOVERY_TIME\" /var/lib/mysql/mysql-bin.* | mariadb -u root -p\n\necho \"Point-in-time recovery completed to $RECOVERY_TIME\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **MariaDB won't start**:\n```bash\n# Check logs\nsudo journalctl -u mariadb -f\nsudo tail -f /var/log/mysql/error.log\n\n# Check disk space\ndf -h /var/lib/mysql\n\n# Check permissions\nls -la /var/lib/mysql\n\n# Test configuration\nmariadb --help --verbose\n```\n\n2. **Connection issues**:\n```bash\n# Check if MariaDB is listening\nsudo ss -tlnp | grep :3306\n\n# Test local connection\nmariadb -u root -p -e \"SELECT 1;\"\n\n# Check user privileges\nmariadb -u root -p -e \"SELECT User, Host FROM mysql.user;\"\n\n# Check bind address\nmariadb -u root -p -e \"SHOW VARIABLES LIKE 'bind_address';\"\n```\n\n3. **Performance issues**:\n```bash\n# Check slow queries\nmariadb -u root -p -e \"SHOW GLOBAL STATUS LIKE 'Slow_queries';\"\n\n# Analyze table statistics\nmariadb -u root -p -e \"SHOW TABLE STATUS FROM myapp;\"\n\n# Check buffer pool efficiency\nmariadb -u root -p -e \"SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read%';\"\n```\n\n### Debug Mode\n\n```bash\n# Start MariaDB with debug options\nsudo mariadb --debug --user=mysql --console\n\n# Enable general query log\nmariadb -u root -p -e \"SET GLOBAL general_log = 1;\"\nmariadb -u root -p -e \"SET GLOBAL general_log_file = '/var/log/mysql/general.log';\"\n\n# Analyze queries\nsudo tail -f /var/log/mysql/general.log\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update MariaDB-server\nsudo yum update MariaDB-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mariadb-server\n\n# Arch Linux\nsudo pacman -Syu mariadb\n\n# Alpine Linux\napk update\napk upgrade mariadb\n\n# openSUSE\nsudo zypper update mariadb\n\n# FreeBSD\npkg update\npkg upgrade mariadb106-server\n\n# Always backup before updates\nmariadb -u backup -p < backup.sql\n\n# Run mysql_upgrade after major updates\nsudo mysql_upgrade -u root -p\nsudo systemctl restart mariadb\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# mariadb-maintenance.sh\n\n# Analyze tables\nmariadb -u root -p <<EOF\nANALYZE TABLE myapp.users;\nANALYZE TABLE myapp.logs;\nEOF\n\n# Optimize tables\nmariadb -u root -p <<EOF\nOPTIMIZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.logs;\nEOF\n\n# Purge old binary logs\nmariadb -u root -p -e \"PURGE BINARY LOGS BEFORE DATE_SUB(NOW(), INTERVAL 7 DAY);\"\n\n# Check for corrupted tables\nmysqlcheck --all-databases --check -u root -p\n\necho \"MariaDB maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/mariadb-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mariadb <<EOF\n/var/log/mysql/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 mysql adm\n    sharedscripts\n    postrotate\n        /usr/bin/mysqladmin flush-logs\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Django Integration\n\n```python\n# Django settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'myapp',\n        'USER': 'appuser',\n        'PASSWORD': 'SecurePassword123!',\n        'HOST': 'localhost',\n        'PORT': '3306',\n        'OPTIONS': {\n            'ssl': {\n                'cert': '/etc/mysql/ssl/client-cert.pem',\n                'key': '/etc/mysql/ssl/client-key.pem',\n                'ca': '/etc/mysql/ssl/ca-cert.pem',\n            },\n            'charset': 'utf8mb4',\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n        },\n    }\n}\n```\n\n### WordPress Integration\n\n```php\n// wp-config.php\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wpuser');\ndefine('DB_PASSWORD', 'SecureWpPassword123!');\ndefine('DB_HOST', 'localhost');\ndefine('DB_CHARSET', 'utf8mb4');\ndefine('DB_COLLATE', 'utf8mb4_unicode_ci');\n\n// Enable SSL\ndefine('MYSQL_SSL_CA', '/etc/mysql/ssl/ca-cert.pem');\ndefine('MYSQL_CLIENT_FLAGS', MYSQLI_CLIENT_SSL);\n```\n\n### Node.js Integration\n\n```javascript\n// Using mysql2 with SSL\nconst mysql = require('mysql2/promise');\n\nconst connection = await mysql.createConnection({\n    host: 'localhost',\n    user: 'appuser',\n    password: 'SecurePassword123!',\n    database: 'myapp',\n    ssl: {\n        ca: fs.readFileSync('/etc/mysql/ssl/ca-cert.pem'),\n        cert: fs.readFileSync('/etc/mysql/ssl/client-cert.pem'),\n        key: fs.readFileSync('/etc/mysql/ssl/client-key.pem')\n    }\n});\n```\n\n## Additional Resources\n\n- [Official MariaDB Documentation](https://mariadb.org/documentation/)\n- [MariaDB Knowledge Base](https://mariadb.com/kb/en/)\n- [MariaDB Security Guide](https://mariadb.com/kb/en/securing-mariadb/)\n- [Performance Tuning Guide](https://mariadb.com/kb/en/optimization-and-tuning/)\n- [Galera Cluster Documentation](https://mariadb.com/kb/en/galera-cluster/)\n- [MariaDB Community Forum](https://mariadb.org/community/)\n- [MariaDB Planet Blog Aggregator](https://planet.mariadb.org/)\n- [MariaDB Foundation](https://mariadb.org/about/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">MariaDB is a free and open-source relational database management system (RDBMS) and a fork of MySQL. Originally developed by Michael \"Monty\" Widenius, the original developer of MySQL, MariaDB was created to remain free under the GNU GPL after Oracle's acquisition of MySQL. It serves as a FOSS alternative to commercial databases like Oracle Database, Microsoft SQL Server, or IBM Db2, offering enterprise-grade features including Galera clustering, advanced storage engines, and enhanced performance optimizations without licensing costs, with features like ACID compliance, replication, and horizontal scaling.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 5GB minimum (SSD recommended for performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for replication and clustering setups</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 2.6+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3306 (default MariaDB port)</li>\n<li class=\"mobile-list-item\">Port 4444 (Galera SST - State Snapshot Transfer)</li>\n<li class=\"mobile-list-item\">Port 4567 (Galera group communication)</li>\n<li class=\"mobile-list-item\">Port 4568 (Galera IST - Incremental State Transfer)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">libc6, libssl, zlib (usually included in distributions)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add MariaDB official repository\nsudo tee /etc/yum.repos.d/mariadb.repo &lt;&lt;EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.mariadb.org/yum/11.2/rhel/\\$releasever/\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.mariadb.org/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nenabled = 1\nEOF\n\n# Import MariaDB GPG key\nsudo rpm --import https://mirror.mariadb.org/yum/RPM-GPG-KEY-MariaDB\n\n# Install MariaDB server\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y software-properties-common dirmngr apt-transport-https\n\n# Add MariaDB signing key\ncurl -o /tmp/mariadb_release_signing_key.asc &#039;https://mariadb.org/mariadb_release_signing_key.asc&#039;\nsudo mv /tmp/mariadb_release_signing_key.asc /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc\n\n# Add MariaDB repository\nsudo add-apt-repository &quot;deb [arch=amd64] https://mirror.mariadb.org/repo/11.2/ubuntu $(lsb_release -cs) main&quot;\n\n# Update package index\nsudo apt update\n\n# Install MariaDB server\nsudo apt install -y mariadb-server mariadb-client mariadb-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo ufw allow mysql</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB from official repositories\nsudo pacman -S mariadb\n\n# Initialize database\nsudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configuration location: /etc/my.cnf</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB\napk add --no-cache mariadb mariadb-client mariadb-backup\n\n# Initialize database\nmysql_install_db --user=mysql --datadir=/var/lib/mysql\n\n# Create mysql user if not exists\nadduser -D -H -s /sbin/nologin mysql\n\n# Set permissions\nchown -R mysql:mysql /var/lib/mysql\n\n# Enable and start service\nrc-update add mariadb default\nrc-service mariadb start\n\n# Secure installation\nmysql_secure_installation</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y mariadb mariadb-client mariadb-tools\n\n# For latest version from official repository\nsudo zypper addrepo https://mirror.mariadb.org/repo/11.2/sles/15/x86_64 mariadb\nsudo zypper refresh\nsudo zypper install -y MariaDB-server MariaDB-client\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y mariadb mariadb-client\n\n# Initialize database if needed\nsudo mysql_install_db --user=mysql\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install mariadb\n\n# Start MariaDB service\nbrew services start mariadb\n\n# Or run manually\nmariadb-safe --datadir=/usr/local/var/mysql\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/my.cnf\n# Alternative: /opt/homebrew/etc/my.cnf (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install mariadb106-server mariadb106-client\n\n# Using ports\ncd /usr/ports/databases/mariadb106-server\nmake install clean\n\n# Enable MariaDB\necho &#039;mysql_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Initialize database\nservice mysql-server start\n\n# Secure installation\nmysql_secure_installation\n\n# Configuration location: /usr/local/etc/mysql/my.cnf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install mariadb\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mariadb\n\n# Method 3: Manual installation\n# Download MariaDB from https://mariadb.org/download/\n# Run mariadb-*.msi installer\n\n# Install as Windows service\n&quot;C:\\Program Files\\MariaDB 11.2\\bin\\mysqld&quot; --install MariaDB\nnet start MariaDB\n\n# Configuration location: C:\\Program Files\\MariaDB 11.2\\data\\my.ini</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create mysql user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/mysql -s /sbin/nologin -c &quot;MariaDB Server&quot; mysql</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/mysql/mariadb.conf.d/50-server.cnf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/my.cnf.d/mariadb-server.cnf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/my.cnf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/mysql/my.cnf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Program Files\\MariaDB 11.2\\data\\my.ini</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/mysql/mariadb.conf.d/50-server.cnf\n[mysqld]\n# Basic settings\nbind-address = 127.0.0.1\nport = 3306\nsocket = /run/mysqld/mysqld.sock\ndatadir = /var/lib/mysql\n\n# Security settings\nsql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\nlocal_infile = 0\nskip_name_resolve = 1\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\n\n# Performance settings\nmax_connections = 200\nthread_cache_size = 50\ntable_open_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\n\n# Logging\nlog_error = /var/log/mysql/error.log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nexpire_logs_days = 7</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MariaDB is running\nsudo systemctl status mariadb\n\n# Test connection\nmariadb -u root -p -e &quot;SELECT VERSION();&quot;\n\n# Check user accounts\nmariadb -u root -p -e &quot;SELECT User, Host FROM mysql.user;&quot;\n\n# Test database operations\nmariadb -u root -p -e &quot;CREATE DATABASE test_db; DROP DATABASE test_db;&quot;\n\n# Check configuration\nmariadb -u root -p -e &quot;SHOW VARIABLES LIKE &#039;character_set%&#039;;&quot;\nmariadb -u root -p -e &quot;SHOW VARIABLES LIKE &#039;collation%&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Change the default root password immediately and remove anonymous users!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable MariaDB to start on boot\nsudo systemctl enable mariadb\n\n# Start MariaDB\nsudo systemctl start mariadb\n\n# Stop MariaDB\nsudo systemctl stop mariadb\n\n# Restart MariaDB\nsudo systemctl restart mariadb\n\n# Reload configuration\nsudo systemctl reload mariadb\n\n# Check status\nsudo systemctl status mariadb\n\n# View logs\nsudo journalctl -u mariadb -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable MariaDB to start on boot\nrc-update add mariadb default\n\n# Start MariaDB\nrc-service mariadb start\n\n# Stop MariaDB\nrc-service mariadb stop\n\n# Restart MariaDB\nrc-service mariadb restart\n\n# Check status\nrc-service mariadb status\n\n# View logs\ntail -f /var/log/mysql/error.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mysql_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start MariaDB\nservice mysql-server start\n\n# Stop MariaDB\nservice mysql-server stop\n\n# Restart MariaDB\nservice mysql-server restart\n\n# Check status\nservice mysql-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mariadb\nbrew services stop mariadb\nbrew services restart mariadb\n\n# Check status\nbrew services list | grep mariadb\n\n# Manual control\nmariadb-safe --datadir=/usr/local/var/mysql</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start MariaDB service\nnet start MariaDB\n\n# Stop MariaDB service\nnet stop MariaDB\n\n# Using PowerShell\nStart-Service MariaDB\nStop-Service MariaDB\nRestart-Service MariaDB\n\n# Check status\nGet-Service MariaDB\n\n# View logs\nGet-EventLog -LogName Application -Source MariaDB</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-configuration\" class=\"mobile-header\">High Availability Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Master-Slave Replication Configuration\n# Master server configuration\n[mysqld]\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = production_db\n\n# Slave server configuration\n[mysqld]\nserver-id = 2\nrelay-log = relay-bin\nread_only = 1</code></pre>\n      </div>\n    </div>\n<h3 id=\"galera-cluster-configuration\" class=\"mobile-header\">Galera Cluster Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Galera Cluster settings\n[mysqld]\n# Galera Provider Configuration\nwsrep_on = ON\nwsrep_provider = /usr/lib/galera/libgalera_smm.so\n\n# Galera Cluster Configuration\nwsrep_cluster_name = &quot;MariaDB_Cluster&quot;\nwsrep_cluster_address = &quot;gcomm://node1.example.com,node2.example.com,node3.example.com&quot;\n\n# Galera Synchronization Configuration\nwsrep_sst_method = rsync\nwsrep_sst_auth = wsrep_sst:wsrep_password\n\n# Galera Node Configuration\nwsrep_node_address = &quot;node1.example.com&quot;\nwsrep_node_name = &quot;mariadb-node-1&quot;\n\n# Required settings\nbinlog_format = ROW\ndefault_storage_engine = InnoDB\ninnodb_autoinc_lock_mode = 2</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Security hardening\n[mysqld]\n# SSL/TLS configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\ntls_version = TLSv1.2,TLSv1.3\n\n# Authentication\nplugin-load-add = server_audit=server_audit.so\nserver_audit_logging = ON\nserver_audit_events = &#039;CONNECT,QUERY,TABLE&#039;\n\n# Connection security\nmax_user_connections = 100\nmax_connect_errors = 10\n\n# Disable dangerous functions\nlocal_infile = 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/mariadb-proxy\nupstream mariadb_backend {\n    server 127.0.0.1:3306 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:3307 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 3306;\n    proxy_pass mariadb_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mariadb.log;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend mariadb_frontend\n    bind *:3306\n    mode tcp\n    option tcplog\n    default_backend mariadb_servers\n\nbackend mariadb_servers\n    mode tcp\n    balance roundrobin\n    option mysql-check user haproxy\n    server mariadb1 127.0.0.1:3306 check\n    server mariadb2 127.0.0.1:3307 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"proxysql-configuration\" class=\"mobile-header\">ProxySQL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- ProxySQL configuration for MariaDB load balancing\nINSERT INTO mysql_servers(hostgroup_id, hostname, port, weight) VALUES\n(0, &#039;127.0.0.1&#039;, 3306, 900),\n(0, &#039;127.0.0.1&#039;, 3307, 100);\n\nINSERT INTO mysql_query_rules(rule_id, active, match_pattern, destination_hostgroup, apply) VALUES\n(1, 1, &#039;^SELECT.*&#039;, 0, 1),\n(2, 1, &#039;^INSERT.*&#039;, 0, 1);\n\nLOAD MYSQL SERVERS TO RUNTIME;\nLOAD MYSQL QUERY RULES TO RUNTIME;\nSAVE MYSQL SERVERS TO DISK;\nSAVE MYSQL QUERY RULES TO DISK;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates for MariaDB\nsudo mkdir -p /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa 2048 &gt; /etc/mysql/ssl/ca-key.pem\nsudo openssl req -new -x509 -nodes -days 3650 -key /etc/mysql/ssl/ca-key.pem -out /etc/mysql/ssl/ca-cert.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MariaDB-CA&quot;\n\n# Create server certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mariadb.example.com&quot;\nsudo openssl rsa -in /etc/mysql/ssl/server-key.pem -out /etc/mysql/ssl/server-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/server-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/server-cert.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:2048 -days 3650 -nodes -keyout /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mariadb-client&quot;\nsudo openssl rsa -in /etc/mysql/ssl/client-key.pem -out /etc/mysql/ssl/client-key.pem\nsudo openssl x509 -req -in /etc/mysql/ssl/client-req.pem -days 3650 -CA /etc/mysql/ssl/ca-cert.pem -CAkey /etc/mysql/ssl/ca-key.pem -set_serial 01 -out /etc/mysql/ssl/client-cert.pem\n\n# Set permissions\nsudo chown -R mysql:mysql /etc/mysql/ssl\nsudo chmod 600 /etc/mysql/ssl/*-key.pem\nsudo chmod 644 /etc/mysql/ssl/*-cert.pem /etc/mysql/ssl/ca-cert.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-security-and-privileges\" class=\"mobile-header\">User Security and Privileges</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create secure users with SSL requirements\nCREATE USER &#039;appuser&#039;@&#039;%&#039; IDENTIFIED BY &#039;SecurePassword123!&#039; REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;%&#039;;\n\n-- Create backup user\nCREATE USER &#039;backup&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;BackupPassword123!&#039; REQUIRE SSL;\nGRANT SELECT, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO &#039;backup&#039;@&#039;localhost&#039;;\n\n-- Create monitoring user\nCREATE USER &#039;monitor&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;MonitorPassword123!&#039;;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;monitor&#039;@&#039;localhost&#039;;\n\n-- Set password policies\nSET GLOBAL strict_password_validation = ON;\n\n-- Remove dangerous defaults\nDELETE FROM mysql.user WHERE User = &#039;&#039;;\nDELETE FROM mysql.user WHERE User = &#039;root&#039; AND Host NOT IN (&#039;localhost&#039;, &#039;127.0.0.1&#039;, &#039;::1&#039;);\nDROP DATABASE IF EXISTS test;\nFLUSH PRIVILEGES;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 3306\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mariadb\nsudo firewall-cmd --permanent --zone=mariadb --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mariadb --add-port=3306/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 3306 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 3306\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;MariaDB&quot; -Direction Inbound -Protocol TCP -LocalPort 3306 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"database-creation-and-management\" class=\"mobile-header\">Database Creation and Management</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create user with specific privileges\nCREATE USER &#039;appuser&#039;@&#039;%&#039; IDENTIFIED BY &#039;SecurePassword123!&#039; REQUIRE SSL;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;%&#039;;\n\n-- Create tables with proper character set\nUSE myapp;\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    email VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_username (username),\n    INDEX idx_email (email)\n) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- Example of partitioned table for large datasets\nCREATE TABLE logs (\n    id BIGINT AUTO_INCREMENT,\n    log_date DATE NOT NULL,\n    message TEXT,\n    PRIMARY KEY (id, log_date)\n) ENGINE=InnoDB\nPARTITION BY RANGE (YEAR(log_date)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Analyze and optimize tables\nANALYZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.users;\n\n-- Check table status\nSHOW TABLE STATUS FROM myapp;\n\n-- Index optimization\nSHOW INDEX FROM myapp.users;\nALTER TABLE myapp.users ADD INDEX idx_created (created_at);\n\n-- View performance schema statistics\nSELECT * FROM information_schema.table_statistics \nWHERE table_schema = &#039;myapp&#039; ORDER BY total_latency DESC;</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MariaDB-specific kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# MariaDB optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\nmysql soft nofile 65535\nmysql hard nofile 65535\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"mariadb-performance-tuning\" class=\"mobile-header\">MariaDB Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># High-performance MariaDB configuration\n[mysqld]\n# Memory settings\ninnodb_buffer_pool_size = 8G  # 70-80% of available RAM\ninnodb_buffer_pool_instances = 8\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\n\n# Thread settings\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# Connection settings\nmax_connections = 500\nmax_user_connections = 450\ninteractive_timeout = 3600\nwait_timeout = 600\n\n# Query cache\nquery_cache_type = 1\nquery_cache_size = 256M\n\n# Temporary tables\ntmp_table_size = 128M\nmax_heap_table_size = 128M\n\n# MyISAM settings (if used)\nkey_buffer_size = 256M\nmyisam_sort_buffer_size = 128M\n\n# InnoDB optimization\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\ninnodb_io_capacity = 2000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8</code></pre>\n      </div>\n    </div>\n<h3 id=\"query-optimization\" class=\"mobile-header\">Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Enable performance schema\nSET GLOBAL performance_schema = ON;\n\n-- Query optimization analysis\nSELECT * FROM performance_schema.events_statements_summary_by_digest \nORDER BY sum_timer_wait DESC LIMIT 10;\n\n-- Index usage analysis\nSELECT * FROM performance_schema.table_io_waits_summary_by_index_usage \nWHERE object_schema = &#039;myapp&#039; ORDER BY sum_timer_wait DESC;\n\n-- Slow query analysis\nSELECT * FROM mysql.slow_log ORDER BY start_time DESC LIMIT 10;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Performance monitoring queries\nSHOW GLOBAL STATUS LIKE &#039;Threads_connected&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Queries&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Slow_queries&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_read_requests&#039;;\nSHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_reads&#039;;\n\n-- Connection monitoring\nSELECT \n    USER,\n    HOST,\n    DB,\n    COMMAND,\n    TIME,\n    STATE,\n    INFO\nFROM INFORMATION_SCHEMA.PROCESSLIST\nWHERE USER != &#039;system user&#039;\nORDER BY TIME DESC;\n\n-- Database size monitoring\nSELECT \n    table_schema AS &#039;Database&#039;,\n    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS &#039;Size (MB)&#039;\nFROM information_schema.tables \nGROUP BY table_schema\nORDER BY SUM(data_length + index_length) DESC;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB Exporter for Prometheus\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-*.tar.gz\nsudo cp mysqld_exporter /usr/local/bin/\n\n# Create monitoring user\nmariadb -u root -p &lt;&lt;EOF\nCREATE USER &#039;exporter&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;ExporterPassword123!&#039;;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;exporter&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysqld_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=MariaDB Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mysql\nEnvironment=DATA_SOURCE_NAME=&quot;exporter:ExporterPassword123!@(localhost:3306)/&quot;\nExecStart=/usr/local/bin/mysqld_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mariadb-health-check.sh\n\n# Check MariaDB service\nif ! systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: MariaDB service is not running&quot;\n    exit 2\nfi\n\n# Check connectivity\nif ! mariadb -e &quot;SELECT 1;&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Cannot connect to MariaDB&quot;\n    exit 2\nfi\n\n# Check replication (if configured)\nSLAVE_STATUS=$(mariadb -e &quot;SHOW SLAVE STATUS\\G&quot; 2&gt;/dev/null | grep &quot;Slave_IO_Running:&quot;)\nif [ -n &quot;$SLAVE_STATUS&quot; ]; then\n    IO_RUNNING=$(echo &quot;$SLAVE_STATUS&quot; | awk &#039;{print $2}&#039;)\n    if [ &quot;$IO_RUNNING&quot; != &quot;Yes&quot; ]; then\n        echo &quot;WARNING: Replication IO thread not running&quot;\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mariadb -e &quot;SHOW STATUS LIKE &#039;Threads_connected&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\nMAX_CONNECTIONS=$(mariadb -e &quot;SHOW VARIABLES LIKE &#039;max_connections&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\nCONNECTION_USAGE=$((CONNECTIONS * 100 / MAX_CONNECTIONS))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo &quot;WARNING: High connection usage: ${CONNECTION_USAGE}%&quot;\n    exit 1\nfi\n\necho &quot;OK: MariaDB is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mariadb-backup.sh\n\nBACKUP_DIR=&quot;/backup/mariadb/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Full database backup\nmariadb-dump --all-databases \\\n  --single-transaction \\\n  --routines \\\n  --triggers \\\n  --events \\\n  --master-data=2 \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip &gt; &quot;$BACKUP_DIR/full-backup.sql.gz&quot;\n\n# Individual database backup\nmariadb-dump --single-transaction \\\n  --routines \\\n  --triggers \\\n  myapp \\\n  --user=backup \\\n  --password=BackupPassword123! \\\n  --ssl-cert=/etc/mysql/ssl/client-cert.pem \\\n  --ssl-key=/etc/mysql/ssl/client-key.pem \\\n  --ssl-ca=/etc/mysql/ssl/ca-cert.pem \\\n  | gzip &gt; &quot;$BACKUP_DIR/myapp-backup.sql.gz&quot;\n\n# Binary log backup\ncp /var/lib/mysql/mysql-bin.* &quot;$BACKUP_DIR/&quot; 2&gt;/dev/null || true\n\n# Configuration backup\ntar czf &quot;$BACKUP_DIR/mariadb-config.tar.gz&quot; /etc/mysql/\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mariadb-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.sql.gz&gt;&quot;\n    exit 1\nfi\n\n# Stop applications using the database\necho &quot;Stopping applications...&quot;\n\n# Restore database\necho &quot;Restoring database from $BACKUP_FILE...&quot;\nzcat &quot;$BACKUP_FILE&quot; | mariadb -u root -p\n\n# Verify restore\nmariadb -u root -p -e &quot;SHOW DATABASES;&quot;\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"point-in-time-recovery\" class=\"mobile-header\">Point-in-Time Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mariadb-pitr.sh\n\nBACKUP_FILE=&quot;$1&quot;\nRECOVERY_TIME=&quot;$2&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ] || [ -z &quot;$RECOVERY_TIME&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.sql.gz&gt; &lt;recovery-time&gt;&quot;\n    echo &quot;Example: $0 backup.sql.gz &#039;2024-01-15 14:30:00&#039;&quot;\n    exit 1\nfi\n\n# Restore base backup\nzcat &quot;$BACKUP_FILE&quot; | mariadb -u root -p\n\n# Apply binary logs up to recovery point\nmysqlbinlog --stop-datetime=&quot;$RECOVERY_TIME&quot; /var/lib/mysql/mysql-bin.* | mariadb -u root -p\n\necho &quot;Point-in-time recovery completed to $RECOVERY_TIME&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>MariaDB won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mariadb -f\nsudo tail -f /var/log/mysql/error.log\n\n# Check disk space\ndf -h /var/lib/mysql\n\n# Check permissions\nls -la /var/lib/mysql\n\n# Test configuration\nmariadb --help --verbose</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MariaDB is listening\nsudo ss -tlnp | grep :3306\n\n# Test local connection\nmariadb -u root -p -e &quot;SELECT 1;&quot;\n\n# Check user privileges\nmariadb -u root -p -e &quot;SELECT User, Host FROM mysql.user;&quot;\n\n# Check bind address\nmariadb -u root -p -e &quot;SHOW VARIABLES LIKE &#039;bind_address&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check slow queries\nmariadb -u root -p -e &quot;SHOW GLOBAL STATUS LIKE &#039;Slow_queries&#039;;&quot;\n\n# Analyze table statistics\nmariadb -u root -p -e &quot;SHOW TABLE STATUS FROM myapp;&quot;\n\n# Check buffer pool efficiency\nmariadb -u root -p -e &quot;SHOW GLOBAL STATUS LIKE &#039;Innodb_buffer_pool_read%&#039;;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start MariaDB with debug options\nsudo mariadb --debug --user=mysql --console\n\n# Enable general query log\nmariadb -u root -p -e &quot;SET GLOBAL general_log = 1;&quot;\nmariadb -u root -p -e &quot;SET GLOBAL general_log_file = &#039;/var/log/mysql/general.log&#039;;&quot;\n\n# Analyze queries\nsudo tail -f /var/log/mysql/general.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update MariaDB-server\nsudo yum update MariaDB-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mariadb-server\n\n# Arch Linux\nsudo pacman -Syu mariadb\n\n# Alpine Linux\napk update\napk upgrade mariadb\n\n# openSUSE\nsudo zypper update mariadb\n\n# FreeBSD\npkg update\npkg upgrade mariadb106-server\n\n# Always backup before updates\nmariadb -u backup -p &lt; backup.sql\n\n# Run mysql_upgrade after major updates\nsudo mysql_upgrade -u root -p\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# mariadb-maintenance.sh\n\n# Analyze tables\nmariadb -u root -p &lt;&lt;EOF\nANALYZE TABLE myapp.users;\nANALYZE TABLE myapp.logs;\nEOF\n\n# Optimize tables\nmariadb -u root -p &lt;&lt;EOF\nOPTIMIZE TABLE myapp.users;\nOPTIMIZE TABLE myapp.logs;\nEOF\n\n# Purge old binary logs\nmariadb -u root -p -e &quot;PURGE BINARY LOGS BEFORE DATE_SUB(NOW(), INTERVAL 7 DAY);&quot;\n\n# Check for corrupted tables\nmysqlcheck --all-databases --check -u root -p\n\necho &quot;MariaDB maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/mariadb-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mariadb &lt;&lt;EOF\n/var/log/mysql/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 mysql adm\n    sharedscripts\n    postrotate\n        /usr/bin/mysqladmin flush-logs\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"django-integration\" class=\"mobile-header\">Django Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Django settings.py\nDATABASES = {\n    &#039;default&#039;: {\n        &#039;ENGINE&#039;: &#039;django.db.backends.mysql&#039;,\n        &#039;NAME&#039;: &#039;myapp&#039;,\n        &#039;USER&#039;: &#039;appuser&#039;,\n        &#039;PASSWORD&#039;: &#039;SecurePassword123!&#039;,\n        &#039;HOST&#039;: &#039;localhost&#039;,\n        &#039;PORT&#039;: &#039;3306&#039;,\n        &#039;OPTIONS&#039;: {\n            &#039;ssl&#039;: {\n                &#039;cert&#039;: &#039;/etc/mysql/ssl/client-cert.pem&#039;,\n                &#039;key&#039;: &#039;/etc/mysql/ssl/client-key.pem&#039;,\n                &#039;ca&#039;: &#039;/etc/mysql/ssl/ca-cert.pem&#039;,\n            },\n            &#039;charset&#039;: &#039;utf8mb4&#039;,\n            &#039;init_command&#039;: &quot;SET sql_mode=&#039;STRICT_TRANS_TABLES&#039;&quot;,\n        },\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-integration\" class=\"mobile-header\">WordPress Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"php\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">php</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-php\">// wp-config.php\ndefine(&#039;DB_NAME&#039;, &#039;wordpress&#039;);\ndefine(&#039;DB_USER&#039;, &#039;wpuser&#039;);\ndefine(&#039;DB_PASSWORD&#039;, &#039;SecureWpPassword123!&#039;);\ndefine(&#039;DB_HOST&#039;, &#039;localhost&#039;);\ndefine(&#039;DB_CHARSET&#039;, &#039;utf8mb4&#039;);\ndefine(&#039;DB_COLLATE&#039;, &#039;utf8mb4_unicode_ci&#039;);\n\n// Enable SSL\ndefine(&#039;MYSQL_SSL_CA&#039;, &#039;/etc/mysql/ssl/ca-cert.pem&#039;);\ndefine(&#039;MYSQL_CLIENT_FLAGS&#039;, MYSQLI_CLIENT_SSL);</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using mysql2 with SSL\nconst mysql = require(&#039;mysql2/promise&#039;);\n\nconst connection = await mysql.createConnection({\n    host: &#039;localhost&#039;,\n    user: &#039;appuser&#039;,\n    password: &#039;SecurePassword123!&#039;,\n    database: &#039;myapp&#039;,\n    ssl: {\n        ca: fs.readFileSync(&#039;/etc/mysql/ssl/ca-cert.pem&#039;),\n        cert: fs.readFileSync(&#039;/etc/mysql/ssl/client-cert.pem&#039;),\n        key: fs.readFileSync(&#039;/etc/mysql/ssl/client-key.pem&#039;)\n    }\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.org/documentation/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official MariaDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/kb/en/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Knowledge Base</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/kb/en/securing-mariadb/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/kb/en/optimization-and-tuning/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/kb/en/galera-cluster/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Galera Cluster Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.org/community/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://planet.mariadb.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Planet Blog Aggregator</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.org/about/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Foundation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"18 min","wordCount":3464,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"High Availability Configuration","id":"high-availability-configuration"},{"level":3,"text":"Galera Cluster Configuration","id":"galera-cluster-configuration"},{"level":3,"text":"Advanced Security Settings","id":"advanced-security-settings"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":3,"text":"ProxySQL Configuration","id":"proxysql-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"SSL/TLS Setup","id":"ssltls-setup"},{"level":3,"text":"User Security and Privileges","id":"user-security-and-privileges"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"Database Creation and Management","id":"database-creation-and-management"},{"level":3,"text":"Database Optimization","id":"database-optimization"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"MariaDB Performance Tuning","id":"mariadb-performance-tuning"},{"level":3,"text":"Query Optimization","id":"query-optimization"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Built-in Monitoring","id":"built-in-monitoring"},{"level":3,"text":"External Monitoring Setup","id":"external-monitoring-setup"},{"level":3,"text":"Health Check Scripts","id":"health-check-scripts"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Procedures","id":"backup-procedures"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":3,"text":"Point-in-Time Recovery","id":"point-in-time-recovery"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Maintenance Tasks","id":"maintenance-tasks"},{"level":3,"text":"Health Monitoring","id":"health-monitoring"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Django Integration","id":"django-integration"},{"level":3,"text":"WordPress Integration","id":"wordpress-integration"},{"level":3,"text":"Node.js Integration","id":"nodejs-integration"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-21T18:35:08.842Z","metadataVersion":"2.0"}]},"__N_SSG":true}