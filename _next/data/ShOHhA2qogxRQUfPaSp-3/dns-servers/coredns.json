{"pageProps":{"guide":{"name":"coredns","displayName":"CoreDNS Installation Guide","slug":"coredns","description":"CoreDNS is a free and open-source DNS Server. A flexible, extensible DNS server written in Go","category":"dns-servers","subcategory":"dns-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[53,80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["dns-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/dns-servers/coredns","documentationUrl":"https://howtomgr.github.io/dns-servers/coredns","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/coredns","updatedAt":"2025-09-16T17:05:45Z","createdAt":"2025-09-16T02:28:41Z","readmeRaw":"# CoreDNS Installation Guide\n\nCoreDNS is a free and open-source DNS Server. A flexible, extensible DNS server written in Go\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 53 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 53 (default coredns port)\n- **Dependencies**:\n  - none\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install coredns\nsudo dnf install -y coredns none\n\n# Enable and start service\nsudo systemctl enable --now coredns\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=coredns\nsudo firewall-cmd --reload\n\n# Verify installation\ncoredns --version || systemctl status coredns\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install coredns\nsudo apt install -y coredns none\n\n# Enable and start service\nsudo systemctl enable --now coredns\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\ncoredns --version || systemctl status coredns\n```\n\n### Arch Linux\n\n```bash\n# Install coredns\nsudo pacman -S coredns\n\n# Enable and start service\nsudo systemctl enable --now coredns\n\n# Verify installation\ncoredns --version || systemctl status coredns\n```\n\n### Alpine Linux\n\n```bash\n# Install coredns\napk add --no-cache coredns\n\n# Enable and start service\nrc-update add coredns default\nrc-service coredns start\n\n# Verify installation\ncoredns --version || rc-service coredns status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install coredns\nsudo zypper install -y coredns none\n\n# Enable and start service\nsudo systemctl enable --now coredns\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=coredns\nsudo firewall-cmd --reload\n\n# Verify installation\ncoredns --version || systemctl status coredns\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install coredns\n\n# Start service\nbrew services start coredns\n\n# Verify installation\ncoredns --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install coredns\n\n# Enable in rc.conf\necho 'coredns_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice coredns start\n\n# Verify installation\ncoredns --version || service coredns status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install coredns\n\n# Or using Scoop\nscoop install coredns\n\n# Verify installation\ncoredns --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/coredns\n\n# Set up basic configuration\nsudo tee /etc/coredns/coredns.conf << 'EOF'\n# CoreDNS Configuration\n. { forward . 8.8.8.8 9.9.9.9, cache 30 }\nEOF\n\n# Test configuration\nsudo coredns -t || sudo coredns configtest\n\n# Reload service\nsudo systemctl reload coredns\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R coredns:coredns /etc/coredns\nsudo chmod 750 /etc/coredns\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable coredns\n\n# Start service\nsudo systemctl start coredns\n\n# Stop service\nsudo systemctl stop coredns\n\n# Restart service\nsudo systemctl restart coredns\n\n# Reload configuration\nsudo systemctl reload coredns\n\n# Check status\nsudo systemctl status coredns\n\n# View logs\nsudo journalctl -u coredns -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add coredns default\n\n# Start service\nrc-service coredns start\n\n# Stop service\nrc-service coredns stop\n\n# Restart service\nrc-service coredns restart\n\n# Check status\nrc-service coredns status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'coredns_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice coredns start\n\n# Stop service\nservice coredns stop\n\n# Restart service\nservice coredns restart\n\n# Check status\nservice coredns status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start coredns\nbrew services stop coredns\nbrew services restart coredns\n\n# Check status\nbrew services list | grep coredns\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start coredns\n\n# Stop service\nnet stop coredns\n\n# Using PowerShell\nStart-Service coredns\nStop-Service coredns\nRestart-Service coredns\n\n# Check status\nGet-Service coredns\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/coredns/coredns.conf << 'EOF'\n. { forward . 8.8.8.8 9.9.9.9, cache 30 }\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart coredns\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream coredns_backend {\n    server 127.0.0.1:53;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name coredns.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name coredns.example.com;\n\n    ssl_certificate /etc/ssl/certs/coredns.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/coredns.example.com.key;\n\n    location / {\n        proxy_pass http://coredns_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName coredns.example.com\n    Redirect permanent / https://coredns.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName coredns.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/coredns.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/coredns.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:53/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend coredns_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/coredns.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend coredns_backend\n\nbackend coredns_backend\n    balance roundrobin\n    option httpchk GET /health\n    server coredns1 127.0.0.1:53 check\n    server coredns2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R coredns:coredns /etc/coredns\nsudo chmod 750 /etc/coredns\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=coredns\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/coredns.conf << 'EOF'\n[coredns]\nenabled = true\nport = 53\nfilter = coredns\nlogpath = /var/log/coredns/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/coredns.key \\\n    -out /etc/ssl/certs/coredns.crt\n\n# Configure SSL in coredns\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE coredns_db;\nCREATE USER coredns_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE coredns_db TO coredns_user;\nEOF\n\n# Configure coredns to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE coredns_db;\nCREATE USER 'coredns_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON coredns_db.* TO 'coredns_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# CoreDNS specific tuning\n. { forward . 8.8.8.8 9.9.9.9, cache 30 }\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\ncoredns soft nofile 65535\ncoredns hard nofile 65535\ncoredns soft nproc 32768\ncoredns hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'coredns'\n    static_configs:\n      - targets: ['localhost:53']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet coredns; then\n    echo \"CoreDNS is running\"\n    exit 0\nelse\n    echo \"CoreDNS is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/coredns << 'EOF'\n/var/log/coredns/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 coredns coredns\n    postrotate\n        systemctl reload coredns > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# CoreDNS backup script\nBACKUP_DIR=\"/backup/coredns\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop coredns\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/coredns-config-$DATE.tar.gz\" /etc/coredns\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/coredns-data-$DATE.tar.gz\" /var/lib/coredns\n\n# Start service\nsystemctl start coredns\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop coredns\n\n# Restore configuration\nsudo tar -xzf /backup/coredns/coredns-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/coredns/coredns-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R coredns:coredns /etc/coredns\nsudo chown -R coredns:coredns /var/lib/coredns\n\n# Start service\nsudo systemctl start coredns\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u coredns -n 100\nsudo tail -f /var/log/coredns/*.log\n\n# Check configuration\nsudo coredns -t || sudo coredns configtest\n\n# Check permissions\nls -la /etc/coredns\nls -la /var/lib/coredns\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 53\nsudo netstat -tlnp | grep 53\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 53\nnc -zv localhost 53\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep coredns)\nhtop -p $(pgrep coredns)\n\n# Check connections\nss -ant | grep :53 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep coredns)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo coredns -d\n# or\nsudo coredns debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  coredns:\n    image: coredns:latest\n    container_name: coredns\n    ports:\n      - \"53:53\"\n    volumes:\n      - ./config:/etc/coredns\n      - ./data:/var/lib/coredns\n    environment:\n      - coredns_CONFIG=/etc/coredns/coredns.conf\n    restart: unless-stopped\n    networks:\n      - coredns_net\n\nnetworks:\n  coredns_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: coredns\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: coredns\n  template:\n    metadata:\n      labels:\n        app: coredns\n    spec:\n      containers:\n      - name: coredns\n        image: coredns:latest\n        ports:\n        - containerPort: 53\n        volumeMounts:\n        - name: config\n          mountPath: /etc/coredns\n      volumes:\n      - name: config\n        configMap:\n          name: coredns-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: coredns\nspec:\n  selector:\n    app: coredns\n  ports:\n  - port: 53\n    targetPort: 53\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure CoreDNS\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install coredns\n      package:\n        name: coredns\n        state: present\n    \n    - name: Configure coredns\n      template:\n        src: coredns.conf.j2\n        dest: /etc/coredns/coredns.conf\n        owner: coredns\n        group: coredns\n        mode: '0640'\n      notify: restart coredns\n    \n    - name: Start and enable coredns\n      systemd:\n        name: coredns\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart coredns\n      systemd:\n        name: coredns\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update coredns\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade coredns\n\n# Arch Linux\nsudo pacman -Syu coredns\n\n# Alpine Linux\napk update && apk upgrade coredns\n\n# openSUSE\nsudo zypper update coredns\n\n# FreeBSD\npkg update && pkg upgrade coredns\n\n# Always backup before updates\ntar -czf /backup/coredns-pre-update-$(date +%Y%m%d).tar.gz /etc/coredns\n\n# Restart after updates\nsudo systemctl restart coredns\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/coredns -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo coredns --verify || sudo coredns check\n\n# Update databases (if applicable)\nsudo coredns-update-db\n\n# Optimize performance\nsudo coredns-optimize\n\n# Check for security updates\nsudo coredns --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.coredns.org/\n- GitHub Repository: https://github.com/coredns/coredns\n- Community Forum: https://forum.coredns.org/\n- Wiki: https://wiki.coredns.org/\n- Comparison vs BIND, PowerDNS, Knot DNS, NSD: https://docs.coredns.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">CoreDNS is a free and open-source DNS Server. A flexible, extensible DNS server written in Go</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 53 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 53 (default coredns port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">none</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install coredns\nsudo dnf install -y coredns none\n\n# Enable and start service\nsudo systemctl enable --now coredns\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=coredns\nsudo firewall-cmd --reload\n\n# Verify installation\ncoredns --version || systemctl status coredns</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install coredns\nsudo apt install -y coredns none\n\n# Enable and start service\nsudo systemctl enable --now coredns\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\ncoredns --version || systemctl status coredns</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install coredns\nsudo pacman -S coredns\n\n# Enable and start service\nsudo systemctl enable --now coredns\n\n# Verify installation\ncoredns --version || systemctl status coredns</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install coredns\napk add --no-cache coredns\n\n# Enable and start service\nrc-update add coredns default\nrc-service coredns start\n\n# Verify installation\ncoredns --version || rc-service coredns status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install coredns\nsudo zypper install -y coredns none\n\n# Enable and start service\nsudo systemctl enable --now coredns\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=coredns\nsudo firewall-cmd --reload\n\n# Verify installation\ncoredns --version || systemctl status coredns</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install coredns\n\n# Start service\nbrew services start coredns\n\n# Verify installation\ncoredns --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install coredns\n\n# Enable in rc.conf\necho &#039;coredns_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice coredns start\n\n# Verify installation\ncoredns --version || service coredns status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install coredns\n\n# Or using Scoop\nscoop install coredns\n\n# Verify installation\ncoredns --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/coredns\n\n# Set up basic configuration\nsudo tee /etc/coredns/coredns.conf &lt;&lt; &#039;EOF&#039;\n# CoreDNS Configuration\n. { forward . 8.8.8.8 9.9.9.9, cache 30 }\nEOF\n\n# Test configuration\nsudo coredns -t || sudo coredns configtest\n\n# Reload service\nsudo systemctl reload coredns</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R coredns:coredns /etc/coredns\nsudo chmod 750 /etc/coredns\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable coredns\n\n# Start service\nsudo systemctl start coredns\n\n# Stop service\nsudo systemctl stop coredns\n\n# Restart service\nsudo systemctl restart coredns\n\n# Reload configuration\nsudo systemctl reload coredns\n\n# Check status\nsudo systemctl status coredns\n\n# View logs\nsudo journalctl -u coredns -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add coredns default\n\n# Start service\nrc-service coredns start\n\n# Stop service\nrc-service coredns stop\n\n# Restart service\nrc-service coredns restart\n\n# Check status\nrc-service coredns status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;coredns_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice coredns start\n\n# Stop service\nservice coredns stop\n\n# Restart service\nservice coredns restart\n\n# Check status\nservice coredns status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start coredns\nbrew services stop coredns\nbrew services restart coredns\n\n# Check status\nbrew services list | grep coredns</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start coredns\n\n# Stop service\nnet stop coredns\n\n# Using PowerShell\nStart-Service coredns\nStop-Service coredns\nRestart-Service coredns\n\n# Check status\nGet-Service coredns</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/coredns/coredns.conf &lt;&lt; &#039;EOF&#039;\n. { forward . 8.8.8.8 9.9.9.9, cache 30 }\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart coredns</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream coredns_backend {\n    server 127.0.0.1:53;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name coredns.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name coredns.example.com;\n\n    ssl_certificate /etc/ssl/certs/coredns.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/coredns.example.com.key;\n\n    location / {\n        proxy_pass http://coredns_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName coredns.example.com\n    Redirect permanent / https://coredns.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName coredns.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/coredns.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/coredns.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:53/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend coredns_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/coredns.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend coredns_backend\n\nbackend coredns_backend\n    balance roundrobin\n    option httpchk GET /health\n    server coredns1 127.0.0.1:53 check\n    server coredns2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R coredns:coredns /etc/coredns\nsudo chmod 750 /etc/coredns\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=coredns\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/coredns.conf &lt;&lt; &#039;EOF&#039;\n[coredns]\nenabled = true\nport = 53\nfilter = coredns\nlogpath = /var/log/coredns/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/coredns.key \\\n    -out /etc/ssl/certs/coredns.crt\n\n# Configure SSL in coredns\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE coredns_db;\nCREATE USER coredns_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE coredns_db TO coredns_user;\nEOF\n\n# Configure coredns to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE coredns_db;\nCREATE USER &#039;coredns_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON coredns_db.* TO &#039;coredns_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# CoreDNS specific tuning\n. { forward . 8.8.8.8 9.9.9.9, cache 30 }</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\ncoredns soft nofile 65535\ncoredns hard nofile 65535\ncoredns soft nproc 32768\ncoredns hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;coredns&#039;\n    static_configs:\n      - targets: [&#039;localhost:53&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet coredns; then\n    echo &quot;CoreDNS is running&quot;\n    exit 0\nelse\n    echo &quot;CoreDNS is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/coredns &lt;&lt; &#039;EOF&#039;\n/var/log/coredns/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 coredns coredns\n    postrotate\n        systemctl reload coredns &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# CoreDNS backup script\nBACKUP_DIR=&quot;/backup/coredns&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop coredns\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/coredns-config-$DATE.tar.gz&quot; /etc/coredns\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/coredns-data-$DATE.tar.gz&quot; /var/lib/coredns\n\n# Start service\nsystemctl start coredns\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop coredns\n\n# Restore configuration\nsudo tar -xzf /backup/coredns/coredns-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/coredns/coredns-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R coredns:coredns /etc/coredns\nsudo chown -R coredns:coredns /var/lib/coredns\n\n# Start service\nsudo systemctl start coredns</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u coredns -n 100\nsudo tail -f /var/log/coredns/*.log\n\n# Check configuration\nsudo coredns -t || sudo coredns configtest\n\n# Check permissions\nls -la /etc/coredns\nls -la /var/lib/coredns</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 53\nsudo netstat -tlnp | grep 53\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 53\nnc -zv localhost 53</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep coredns)\nhtop -p $(pgrep coredns)\n\n# Check connections\nss -ant | grep :53 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep coredns)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo coredns -d\n# or\nsudo coredns debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  coredns:\n    image: coredns:latest\n    container_name: coredns\n    ports:\n      - &quot;53:53&quot;\n    volumes:\n      - ./config:/etc/coredns\n      - ./data:/var/lib/coredns\n    environment:\n      - coredns_CONFIG=/etc/coredns/coredns.conf\n    restart: unless-stopped\n    networks:\n      - coredns_net\n\nnetworks:\n  coredns_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: coredns\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: coredns\n  template:\n    metadata:\n      labels:\n        app: coredns\n    spec:\n      containers:\n      - name: coredns\n        image: coredns:latest\n        ports:\n        - containerPort: 53\n        volumeMounts:\n        - name: config\n          mountPath: /etc/coredns\n      volumes:\n      - name: config\n        configMap:\n          name: coredns-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: coredns\nspec:\n  selector:\n    app: coredns\n  ports:\n  - port: 53\n    targetPort: 53\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure CoreDNS\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install coredns\n      package:\n        name: coredns\n        state: present\n    \n    - name: Configure coredns\n      template:\n        src: coredns.conf.j2\n        dest: /etc/coredns/coredns.conf\n        owner: coredns\n        group: coredns\n        mode: &#039;0640&#039;\n      notify: restart coredns\n    \n    - name: Start and enable coredns\n      systemd:\n        name: coredns\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart coredns\n      systemd:\n        name: coredns\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update coredns\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade coredns\n\n# Arch Linux\nsudo pacman -Syu coredns\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade coredns\n\n# openSUSE\nsudo zypper update coredns\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade coredns\n\n# Always backup before updates\ntar -czf /backup/coredns-pre-update-$(date +%Y%m%d).tar.gz /etc/coredns\n\n# Restart after updates\nsudo systemctl restart coredns</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/coredns -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo coredns --verify || sudo coredns check\n\n# Update databases (if applicable)\nsudo coredns-update-db\n\n# Optimize performance\nsudo coredns-optimize\n\n# Check for security updates\nsudo coredns --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.coredns.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/coredns/coredns</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.coredns.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.coredns.org/</li>\n<li class=\"mobile-list-item\">Comparison vs BIND, PowerDNS, Knot DNS, NSD: https://docs.coredns.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"11 min","wordCount":2005,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-05T18:17:51.374Z","metadataVersion":"2.0"},"category":{"key":"dns-servers","name":"Dns servers","description":"Dns servers tools and applications","icon":"🌐","color":"#50fa7b"},"relatedGuides":[{"name":"bind","displayName":"BIND Installation Guide","slug":"bind","description":"BIND is a free and open-source DNS Server. Berkeley Internet Name Domain is the most widely used DNS server software","category":"dns-servers","subcategory":"dns-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[53,80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["dns-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/dns-servers/bind","documentationUrl":"https://howtomgr.github.io/dns-servers/bind","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bind","updatedAt":"2025-09-16T17:00:17Z","createdAt":"2025-09-16T02:22:00Z","readmeRaw":"# BIND Installation Guide\n\nBIND is a free and open-source DNS Server. Berkeley Internet Name Domain is the most widely used DNS server software\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 53 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 53 (default bind port)\n- **Dependencies**:\n  - bind-utils, dnssec-tools\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bind\nsudo dnf install -y bind bind-utils, dnssec-tools\n\n# Enable and start service\nsudo systemctl enable --now named\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=bind\nsudo firewall-cmd --reload\n\n# Verify installation\nbind --version || systemctl status named\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bind\nsudo apt install -y bind bind-utils, dnssec-tools\n\n# Enable and start service\nsudo systemctl enable --now named\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\nbind --version || systemctl status named\n```\n\n### Arch Linux\n\n```bash\n# Install bind\nsudo pacman -S bind\n\n# Enable and start service\nsudo systemctl enable --now named\n\n# Verify installation\nbind --version || systemctl status named\n```\n\n### Alpine Linux\n\n```bash\n# Install bind\napk add --no-cache bind\n\n# Enable and start service\nrc-update add named default\nrc-service named start\n\n# Verify installation\nbind --version || rc-service named status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bind\nsudo zypper install -y bind bind-utils, dnssec-tools\n\n# Enable and start service\nsudo systemctl enable --now named\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=bind\nsudo firewall-cmd --reload\n\n# Verify installation\nbind --version || systemctl status named\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bind\n\n# Start service\nbrew services start bind\n\n# Verify installation\nbind --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bind\n\n# Enable in rc.conf\necho 'named_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice named start\n\n# Verify installation\nbind --version || service named status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install bind\n\n# Or using Scoop\nscoop install bind\n\n# Verify installation\nbind --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/bind\n\n# Set up basic configuration\nsudo tee /etc/bind/bind.conf << 'EOF'\n# BIND Configuration\n# Basic DNS tuning\noptions {\n    directory \"/var/cache/bind\";\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8;\n        8.8.4.4;\n    };\n};\nEOF\n\n# Test configuration\nsudo bind -t || sudo named configtest\n\n# Reload service\nsudo systemctl reload named\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R bind:bind /etc/bind\nsudo chmod 750 /etc/bind\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable named\n\n# Start service\nsudo systemctl start named\n\n# Stop service\nsudo systemctl stop named\n\n# Restart service\nsudo systemctl restart named\n\n# Reload configuration\nsudo systemctl reload named\n\n# Check status\nsudo systemctl status named\n\n# View logs\nsudo journalctl -u named -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add named default\n\n# Start service\nrc-service named start\n\n# Stop service\nrc-service named stop\n\n# Restart service\nrc-service named restart\n\n# Check status\nrc-service named status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'named_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice named start\n\n# Stop service\nservice named stop\n\n# Restart service\nservice named restart\n\n# Check status\nservice named status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bind\nbrew services stop bind\nbrew services restart bind\n\n# Check status\nbrew services list | grep bind\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start named\n\n# Stop service\nnet stop named\n\n# Using PowerShell\nStart-Service named\nStop-Service named\nRestart-Service named\n\n# Check status\nGet-Service named\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/bind/bind.conf << 'EOF'\n# Basic DNS tuning\noptions {\n    directory \"/var/cache/bind\";\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8;\n        8.8.4.4;\n    };\n};\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart named\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bind_backend {\n    server 127.0.0.1:53;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name bind.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bind.example.com;\n\n    ssl_certificate /etc/ssl/certs/bind.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bind.example.com.key;\n\n    location / {\n        proxy_pass http://bind_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bind.example.com\n    Redirect permanent / https://bind.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bind.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bind.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bind.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:53/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bind_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bind.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bind_backend\n\nbackend bind_backend\n    balance roundrobin\n    option httpchk GET /health\n    server bind1 127.0.0.1:53 check\n    server bind2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bind:bind /etc/bind\nsudo chmod 750 /etc/bind\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=bind\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/bind.conf << 'EOF'\n[bind]\nenabled = true\nport = 53\nfilter = bind\nlogpath = /var/log/named/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/bind.key \\\n    -out /etc/ssl/certs/bind.crt\n\n# Configure SSL in bind\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE bind_db;\nCREATE USER bind_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE bind_db TO bind_user;\nEOF\n\n# Configure bind to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE bind_db;\nCREATE USER 'bind_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON bind_db.* TO 'bind_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# BIND specific tuning\n# Basic DNS tuning\noptions {\n    directory \"/var/cache/bind\";\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8;\n        8.8.4.4;\n    };\n};\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nbind soft nofile 65535\nbind hard nofile 65535\nbind soft nproc 32768\nbind hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'bind'\n    static_configs:\n      - targets: ['localhost:53']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet named; then\n    echo \"BIND is running\"\n    exit 0\nelse\n    echo \"BIND is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/bind << 'EOF'\n/var/log/named/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 bind bind\n    postrotate\n        systemctl reload named > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# BIND backup script\nBACKUP_DIR=\"/backup/bind\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop named\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/bind-config-$DATE.tar.gz\" /etc/bind\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/bind-data-$DATE.tar.gz\" /var/lib/bind\n\n# Start service\nsystemctl start named\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop named\n\n# Restore configuration\nsudo tar -xzf /backup/bind/bind-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/bind/bind-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R bind:bind /etc/bind\nsudo chown -R bind:bind /var/lib/bind\n\n# Start service\nsudo systemctl start named\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u named -n 100\nsudo tail -f /var/log/named/*.log\n\n# Check configuration\nsudo bind -t || sudo named configtest\n\n# Check permissions\nls -la /etc/bind\nls -la /var/lib/bind\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 53\nsudo netstat -tlnp | grep 53\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 53\nnc -zv localhost 53\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep named)\nhtop -p $(pgrep named)\n\n# Check connections\nss -ant | grep :53 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep named)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo bind -d\n# or\nsudo named debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  bind:\n    image: bind:latest\n    container_name: bind\n    ports:\n      - \"53:53\"\n    volumes:\n      - ./config:/etc/bind\n      - ./data:/var/lib/bind\n    environment:\n      - bind_CONFIG=/etc/bind/bind.conf\n    restart: unless-stopped\n    networks:\n      - bind_net\n\nnetworks:\n  bind_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bind\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: bind\n  template:\n    metadata:\n      labels:\n        app: bind\n    spec:\n      containers:\n      - name: bind\n        image: bind:latest\n        ports:\n        - containerPort: 53\n        volumeMounts:\n        - name: config\n          mountPath: /etc/bind\n      volumes:\n      - name: config\n        configMap:\n          name: bind-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: bind\nspec:\n  selector:\n    app: bind\n  ports:\n  - port: 53\n    targetPort: 53\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure BIND\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install bind\n      package:\n        name: bind\n        state: present\n    \n    - name: Configure bind\n      template:\n        src: bind.conf.j2\n        dest: /etc/bind/bind.conf\n        owner: bind\n        group: bind\n        mode: '0640'\n      notify: restart bind\n    \n    - name: Start and enable bind\n      systemd:\n        name: named\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart bind\n      systemd:\n        name: named\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bind\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bind\n\n# Arch Linux\nsudo pacman -Syu bind\n\n# Alpine Linux\napk update && apk upgrade bind\n\n# openSUSE\nsudo zypper update bind\n\n# FreeBSD\npkg update && pkg upgrade bind\n\n# Always backup before updates\ntar -czf /backup/bind-pre-update-$(date +%Y%m%d).tar.gz /etc/bind\n\n# Restart after updates\nsudo systemctl restart named\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/named -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo bind --verify || sudo named check\n\n# Update databases (if applicable)\nsudo bind-update-db\n\n# Optimize performance\nsudo bind-optimize\n\n# Check for security updates\nsudo bind --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bind.org/\n- GitHub Repository: https://github.com/bind/bind\n- Community Forum: https://forum.bind.org/\n- Wiki: https://wiki.bind.org/\n- Comparison vs PowerDNS, Unbound, Knot DNS, NSD: https://docs.bind.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">BIND is a free and open-source DNS Server. Berkeley Internet Name Domain is the most widely used DNS server software</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 53 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 53 (default bind port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">bind-utils, dnssec-tools</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bind\nsudo dnf install -y bind bind-utils, dnssec-tools\n\n# Enable and start service\nsudo systemctl enable --now named\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=bind\nsudo firewall-cmd --reload\n\n# Verify installation\nbind --version || systemctl status named</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bind\nsudo apt install -y bind bind-utils, dnssec-tools\n\n# Enable and start service\nsudo systemctl enable --now named\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\nbind --version || systemctl status named</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bind\nsudo pacman -S bind\n\n# Enable and start service\nsudo systemctl enable --now named\n\n# Verify installation\nbind --version || systemctl status named</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bind\napk add --no-cache bind\n\n# Enable and start service\nrc-update add named default\nrc-service named start\n\n# Verify installation\nbind --version || rc-service named status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bind\nsudo zypper install -y bind bind-utils, dnssec-tools\n\n# Enable and start service\nsudo systemctl enable --now named\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=bind\nsudo firewall-cmd --reload\n\n# Verify installation\nbind --version || systemctl status named</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bind\n\n# Start service\nbrew services start bind\n\n# Verify installation\nbind --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bind\n\n# Enable in rc.conf\necho &#039;named_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice named start\n\n# Verify installation\nbind --version || service named status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install bind\n\n# Or using Scoop\nscoop install bind\n\n# Verify installation\nbind --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/bind\n\n# Set up basic configuration\nsudo tee /etc/bind/bind.conf &lt;&lt; &#039;EOF&#039;\n# BIND Configuration\n# Basic DNS tuning\noptions {\n    directory &quot;/var/cache/bind&quot;;\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8;\n        8.8.4.4;\n    };\n};\nEOF\n\n# Test configuration\nsudo bind -t || sudo named configtest\n\n# Reload service\nsudo systemctl reload named</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bind:bind /etc/bind\nsudo chmod 750 /etc/bind\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable named\n\n# Start service\nsudo systemctl start named\n\n# Stop service\nsudo systemctl stop named\n\n# Restart service\nsudo systemctl restart named\n\n# Reload configuration\nsudo systemctl reload named\n\n# Check status\nsudo systemctl status named\n\n# View logs\nsudo journalctl -u named -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add named default\n\n# Start service\nrc-service named start\n\n# Stop service\nrc-service named stop\n\n# Restart service\nrc-service named restart\n\n# Check status\nrc-service named status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;named_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice named start\n\n# Stop service\nservice named stop\n\n# Restart service\nservice named restart\n\n# Check status\nservice named status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bind\nbrew services stop bind\nbrew services restart bind\n\n# Check status\nbrew services list | grep bind</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start named\n\n# Stop service\nnet stop named\n\n# Using PowerShell\nStart-Service named\nStop-Service named\nRestart-Service named\n\n# Check status\nGet-Service named</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/bind/bind.conf &lt;&lt; &#039;EOF&#039;\n# Basic DNS tuning\noptions {\n    directory &quot;/var/cache/bind&quot;;\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8;\n        8.8.4.4;\n    };\n};\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart named</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bind_backend {\n    server 127.0.0.1:53;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name bind.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bind.example.com;\n\n    ssl_certificate /etc/ssl/certs/bind.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bind.example.com.key;\n\n    location / {\n        proxy_pass http://bind_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bind.example.com\n    Redirect permanent / https://bind.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bind.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bind.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bind.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:53/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bind_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bind.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bind_backend\n\nbackend bind_backend\n    balance roundrobin\n    option httpchk GET /health\n    server bind1 127.0.0.1:53 check\n    server bind2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bind:bind /etc/bind\nsudo chmod 750 /etc/bind\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=bind\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/bind.conf &lt;&lt; &#039;EOF&#039;\n[bind]\nenabled = true\nport = 53\nfilter = bind\nlogpath = /var/log/named/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/bind.key \\\n    -out /etc/ssl/certs/bind.crt\n\n# Configure SSL in bind\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE bind_db;\nCREATE USER bind_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE bind_db TO bind_user;\nEOF\n\n# Configure bind to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE bind_db;\nCREATE USER &#039;bind_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON bind_db.* TO &#039;bind_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# BIND specific tuning\n# Basic DNS tuning\noptions {\n    directory &quot;/var/cache/bind&quot;;\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8;\n        8.8.4.4;\n    };\n};</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nbind soft nofile 65535\nbind hard nofile 65535\nbind soft nproc 32768\nbind hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;bind&#039;\n    static_configs:\n      - targets: [&#039;localhost:53&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet named; then\n    echo &quot;BIND is running&quot;\n    exit 0\nelse\n    echo &quot;BIND is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/bind &lt;&lt; &#039;EOF&#039;\n/var/log/named/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 bind bind\n    postrotate\n        systemctl reload named &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# BIND backup script\nBACKUP_DIR=&quot;/backup/bind&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop named\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/bind-config-$DATE.tar.gz&quot; /etc/bind\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/bind-data-$DATE.tar.gz&quot; /var/lib/bind\n\n# Start service\nsystemctl start named\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop named\n\n# Restore configuration\nsudo tar -xzf /backup/bind/bind-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/bind/bind-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R bind:bind /etc/bind\nsudo chown -R bind:bind /var/lib/bind\n\n# Start service\nsudo systemctl start named</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u named -n 100\nsudo tail -f /var/log/named/*.log\n\n# Check configuration\nsudo bind -t || sudo named configtest\n\n# Check permissions\nls -la /etc/bind\nls -la /var/lib/bind</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 53\nsudo netstat -tlnp | grep 53\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 53\nnc -zv localhost 53</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep named)\nhtop -p $(pgrep named)\n\n# Check connections\nss -ant | grep :53 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep named)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo bind -d\n# or\nsudo named debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bind:\n    image: bind:latest\n    container_name: bind\n    ports:\n      - &quot;53:53&quot;\n    volumes:\n      - ./config:/etc/bind\n      - ./data:/var/lib/bind\n    environment:\n      - bind_CONFIG=/etc/bind/bind.conf\n    restart: unless-stopped\n    networks:\n      - bind_net\n\nnetworks:\n  bind_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bind\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: bind\n  template:\n    metadata:\n      labels:\n        app: bind\n    spec:\n      containers:\n      - name: bind\n        image: bind:latest\n        ports:\n        - containerPort: 53\n        volumeMounts:\n        - name: config\n          mountPath: /etc/bind\n      volumes:\n      - name: config\n        configMap:\n          name: bind-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: bind\nspec:\n  selector:\n    app: bind\n  ports:\n  - port: 53\n    targetPort: 53\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure BIND\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install bind\n      package:\n        name: bind\n        state: present\n    \n    - name: Configure bind\n      template:\n        src: bind.conf.j2\n        dest: /etc/bind/bind.conf\n        owner: bind\n        group: bind\n        mode: &#039;0640&#039;\n      notify: restart bind\n    \n    - name: Start and enable bind\n      systemd:\n        name: named\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart bind\n      systemd:\n        name: named\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bind\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bind\n\n# Arch Linux\nsudo pacman -Syu bind\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bind\n\n# openSUSE\nsudo zypper update bind\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bind\n\n# Always backup before updates\ntar -czf /backup/bind-pre-update-$(date +%Y%m%d).tar.gz /etc/bind\n\n# Restart after updates\nsudo systemctl restart named</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/named -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo bind --verify || sudo named check\n\n# Update databases (if applicable)\nsudo bind-update-db\n\n# Optimize performance\nsudo bind-optimize\n\n# Check for security updates\nsudo bind --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bind.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bind/bind</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bind.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.bind.org/</li>\n<li class=\"mobile-list-item\">Comparison vs PowerDNS, Unbound, Knot DNS, NSD: https://docs.bind.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"11 min","wordCount":2046,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-05T18:18:19.382Z","metadataVersion":"2.0"},{"name":"dnsmasq","displayName":"dnsmasq Installation Guide","slug":"dnsmasq","description":"dnsmasq is a free and open-source lightweight DNS/DHCP/TFTP server. dnsmasq provides integrated DNS, DHCP, and TFTP services in a small footprint, perfect for small networks","category":"dns-servers","subcategory":"dns-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[53,67,80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["dns-servers","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/dns-servers/dnsmasq","documentationUrl":"https://howtomgr.github.io/dns-servers/dnsmasq","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/dnsmasq","updatedAt":"2025-09-16T17:08:04Z","createdAt":"2025-09-16T02:31:38Z","readmeRaw":"# dnsmasq Installation Guide\n\ndnsmasq is a free and open-source lightweight DNS/DHCP/TFTP server. dnsmasq provides integrated DNS, DHCP, and TFTP services in a small footprint, perfect for small networks\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 64MB minimum\n  - Storage: 10MB for installation\n  - Network: DNS/DHCP ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 53 (default dnsmasq port)\n  - Port 67 for DHCP\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dnsmasq\nsudo dnf install -y dnsmasq\n\n# Enable and start service\nsudo systemctl enable --now dnsmasq\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndnsmasq --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install dnsmasq\nsudo apt install -y dnsmasq\n\n# Enable and start service\nsudo systemctl enable --now dnsmasq\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\ndnsmasq --version\n```\n\n### Arch Linux\n\n```bash\n# Install dnsmasq\nsudo pacman -S dnsmasq\n\n# Enable and start service\nsudo systemctl enable --now dnsmasq\n\n# Verify installation\ndnsmasq --version\n```\n\n### Alpine Linux\n\n```bash\n# Install dnsmasq\napk add --no-cache dnsmasq\n\n# Enable and start service\nrc-update add dnsmasq default\nrc-service dnsmasq start\n\n# Verify installation\ndnsmasq --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dnsmasq\nsudo zypper install -y dnsmasq\n\n# Enable and start service\nsudo systemctl enable --now dnsmasq\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndnsmasq --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install dnsmasq\n\n# Start service\nbrew services start dnsmasq\n\n# Verify installation\ndnsmasq --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install dnsmasq\n\n# Enable in rc.conf\necho 'dnsmasq_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dnsmasq start\n\n# Verify installation\ndnsmasq --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install dnsmasq\n\n# Or using Scoop\nscoop install dnsmasq\n\n# Verify installation\ndnsmasq --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/dnsmasq\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndnsmasq --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable dnsmasq\n\n# Start service\nsudo systemctl start dnsmasq\n\n# Stop service\nsudo systemctl stop dnsmasq\n\n# Restart service\nsudo systemctl restart dnsmasq\n\n# Check status\nsudo systemctl status dnsmasq\n\n# View logs\nsudo journalctl -u dnsmasq -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add dnsmasq default\n\n# Start service\nrc-service dnsmasq start\n\n# Stop service\nrc-service dnsmasq stop\n\n# Restart service\nrc-service dnsmasq restart\n\n# Check status\nrc-service dnsmasq status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'dnsmasq_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dnsmasq start\n\n# Stop service\nservice dnsmasq stop\n\n# Restart service\nservice dnsmasq restart\n\n# Check status\nservice dnsmasq status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start dnsmasq\nbrew services stop dnsmasq\nbrew services restart dnsmasq\n\n# Check status\nbrew services list | grep dnsmasq\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start dnsmasq\n\n# Stop service\nnet stop dnsmasq\n\n# Using PowerShell\nStart-Service dnsmasq\nStop-Service dnsmasq\nRestart-Service dnsmasq\n\n# Check status\nGet-Service dnsmasq\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream dnsmasq_backend {\n    server 127.0.0.1:53;\n}\n\nserver {\n    listen 80;\n    server_name dnsmasq.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dnsmasq.example.com;\n\n    ssl_certificate /etc/ssl/certs/dnsmasq.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dnsmasq.example.com.key;\n\n    location / {\n        proxy_pass http://dnsmasq_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName dnsmasq.example.com\n    Redirect permanent / https://dnsmasq.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName dnsmasq.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dnsmasq.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dnsmasq.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend dnsmasq_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dnsmasq.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dnsmasq_backend\n\nbackend dnsmasq_backend\n    balance roundrobin\n    server dnsmasq1 127.0.0.1:53 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R dnsmasq:dnsmasq /etc/dnsmasq\nsudo chmod 750 /etc/dnsmasq\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status dnsmasq\n\n# View logs\nsudo journalctl -u dnsmasq -f\n\n# Monitor resource usage\ntop -p $(pgrep dnsmasq)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/dnsmasq\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/dnsmasq-backup-$DATE.tar.gz\" /etc/dnsmasq /var/lib/dnsmasq\n\necho \"Backup completed: $BACKUP_DIR/dnsmasq-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop dnsmasq\n\n# Restore from backup\ntar -xzf /backup/dnsmasq/dnsmasq-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start dnsmasq\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u dnsmasq -n 100\nsudo tail -f /var/log/dnsmasq/dnsmasq.log\n\n# Check configuration\ndnsmasq --version\n\n# Check permissions\nls -la /etc/dnsmasq\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 53\n\n# Test connectivity\ntelnet localhost 53\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep dnsmasq)\n\n# Check disk I/O\niotop -p $(pgrep dnsmasq)\n\n# Check connections\nss -an | grep 53\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  dnsmasq:\n    image: dnsmasq:latest\n    ports:\n      - \"53:53\"\n    volumes:\n      - ./config:/etc/dnsmasq\n      - ./data:/var/lib/dnsmasq\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dnsmasq\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade dnsmasq\n\n# Arch Linux\nsudo pacman -Syu dnsmasq\n\n# Alpine Linux\napk update && apk upgrade dnsmasq\n\n# openSUSE\nsudo zypper update dnsmasq\n\n# FreeBSD\npkg update && pkg upgrade dnsmasq\n\n# Always backup before updates\ntar -czf /backup/dnsmasq-pre-update-$(date +%Y%m%d).tar.gz /etc/dnsmasq\n\n# Restart after updates\nsudo systemctl restart dnsmasq\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/dnsmasq\n\n# Clean old logs\nfind /var/log/dnsmasq -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/dnsmasq\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.dnsmasq.org/\n- GitHub Repository: https://github.com/dnsmasq/dnsmasq\n- Community Forum: https://forum.dnsmasq.org/\n- Best Practices Guide: https://docs.dnsmasq.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">dnsmasq is a free and open-source lightweight DNS/DHCP/TFTP server. dnsmasq provides integrated DNS, DHCP, and TFTP services in a small footprint, perfect for small networks</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 64MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10MB for installation</li>\n<li class=\"mobile-list-item\">Network: DNS/DHCP ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 53 (default dnsmasq port)</li>\n<li class=\"mobile-list-item\">Port 67 for DHCP</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dnsmasq\nsudo dnf install -y dnsmasq\n\n# Enable and start service\nsudo systemctl enable --now dnsmasq\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install dnsmasq\nsudo apt install -y dnsmasq\n\n# Enable and start service\nsudo systemctl enable --now dnsmasq\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dnsmasq\nsudo pacman -S dnsmasq\n\n# Enable and start service\nsudo systemctl enable --now dnsmasq\n\n# Verify installation\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dnsmasq\napk add --no-cache dnsmasq\n\n# Enable and start service\nrc-update add dnsmasq default\nrc-service dnsmasq start\n\n# Verify installation\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dnsmasq\nsudo zypper install -y dnsmasq\n\n# Enable and start service\nsudo systemctl enable --now dnsmasq\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install dnsmasq\n\n# Start service\nbrew services start dnsmasq\n\n# Verify installation\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install dnsmasq\n\n# Enable in rc.conf\necho &#039;dnsmasq_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dnsmasq start\n\n# Verify installation\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install dnsmasq\n\n# Or using Scoop\nscoop install dnsmasq\n\n# Verify installation\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/dnsmasq\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndnsmasq --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable dnsmasq\n\n# Start service\nsudo systemctl start dnsmasq\n\n# Stop service\nsudo systemctl stop dnsmasq\n\n# Restart service\nsudo systemctl restart dnsmasq\n\n# Check status\nsudo systemctl status dnsmasq\n\n# View logs\nsudo journalctl -u dnsmasq -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add dnsmasq default\n\n# Start service\nrc-service dnsmasq start\n\n# Stop service\nrc-service dnsmasq stop\n\n# Restart service\nrc-service dnsmasq restart\n\n# Check status\nrc-service dnsmasq status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;dnsmasq_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dnsmasq start\n\n# Stop service\nservice dnsmasq stop\n\n# Restart service\nservice dnsmasq restart\n\n# Check status\nservice dnsmasq status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start dnsmasq\nbrew services stop dnsmasq\nbrew services restart dnsmasq\n\n# Check status\nbrew services list | grep dnsmasq</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start dnsmasq\n\n# Stop service\nnet stop dnsmasq\n\n# Using PowerShell\nStart-Service dnsmasq\nStop-Service dnsmasq\nRestart-Service dnsmasq\n\n# Check status\nGet-Service dnsmasq</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream dnsmasq_backend {\n    server 127.0.0.1:53;\n}\n\nserver {\n    listen 80;\n    server_name dnsmasq.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dnsmasq.example.com;\n\n    ssl_certificate /etc/ssl/certs/dnsmasq.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dnsmasq.example.com.key;\n\n    location / {\n        proxy_pass http://dnsmasq_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName dnsmasq.example.com\n    Redirect permanent / https://dnsmasq.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName dnsmasq.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dnsmasq.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dnsmasq.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend dnsmasq_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dnsmasq.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dnsmasq_backend\n\nbackend dnsmasq_backend\n    balance roundrobin\n    server dnsmasq1 127.0.0.1:53 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dnsmasq:dnsmasq /etc/dnsmasq\nsudo chmod 750 /etc/dnsmasq\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=53/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status dnsmasq\n\n# View logs\nsudo journalctl -u dnsmasq -f\n\n# Monitor resource usage\ntop -p $(pgrep dnsmasq)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/dnsmasq&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/dnsmasq-backup-$DATE.tar.gz&quot; /etc/dnsmasq /var/lib/dnsmasq\n\necho &quot;Backup completed: $BACKUP_DIR/dnsmasq-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop dnsmasq\n\n# Restore from backup\ntar -xzf /backup/dnsmasq/dnsmasq-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start dnsmasq</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u dnsmasq -n 100\nsudo tail -f /var/log/dnsmasq/dnsmasq.log\n\n# Check configuration\ndnsmasq --version\n\n# Check permissions\nls -la /etc/dnsmasq</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 53\n\n# Test connectivity\ntelnet localhost 53\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep dnsmasq)\n\n# Check disk I/O\niotop -p $(pgrep dnsmasq)\n\n# Check connections\nss -an | grep 53</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  dnsmasq:\n    image: dnsmasq:latest\n    ports:\n      - &quot;53:53&quot;\n    volumes:\n      - ./config:/etc/dnsmasq\n      - ./data:/var/lib/dnsmasq\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dnsmasq\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade dnsmasq\n\n# Arch Linux\nsudo pacman -Syu dnsmasq\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade dnsmasq\n\n# openSUSE\nsudo zypper update dnsmasq\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade dnsmasq\n\n# Always backup before updates\ntar -czf /backup/dnsmasq-pre-update-$(date +%Y%m%d).tar.gz /etc/dnsmasq\n\n# Restart after updates\nsudo systemctl restart dnsmasq</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/dnsmasq\n\n# Clean old logs\nfind /var/log/dnsmasq -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/dnsmasq</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.dnsmasq.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/dnsmasq/dnsmasq</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.dnsmasq.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.dnsmasq.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1280,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-05T18:17:38.289Z","metadataVersion":"2.0"},{"name":"knot","displayName":"Knot DNS Installation Guide","slug":"knot","description":"Knot DNS is a free and open-source DNS Server. A high-performance authoritative DNS server","category":"dns-servers","subcategory":"dns-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[53,80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["dns-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/dns-servers/knot","documentationUrl":"https://howtomgr.github.io/dns-servers/knot","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/knot","updatedAt":"2025-09-16T17:24:33Z","createdAt":"2025-09-16T03:30:19Z","readmeRaw":"# Knot DNS Installation Guide\n\nKnot DNS is a free and open-source DNS Server. A high-performance authoritative DNS server\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 53 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 53 (default knot-dns port)\n- **Dependencies**:\n  - knot-dnsutils, knot-doc\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install knot-dns\nsudo dnf install -y knot-dns knot-dnsutils, knot-doc\n\n# Enable and start service\nsudo systemctl enable --now knot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=knot-dns\nsudo firewall-cmd --reload\n\n# Verify installation\nknot-dns --version || systemctl status knot\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install knot-dns\nsudo apt install -y knot-dns knot-dnsutils, knot-doc\n\n# Enable and start service\nsudo systemctl enable --now knot\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\nknot-dns --version || systemctl status knot\n```\n\n### Arch Linux\n\n```bash\n# Install knot-dns\nsudo pacman -S knot-dns\n\n# Enable and start service\nsudo systemctl enable --now knot\n\n# Verify installation\nknot-dns --version || systemctl status knot\n```\n\n### Alpine Linux\n\n```bash\n# Install knot-dns\napk add --no-cache knot-dns\n\n# Enable and start service\nrc-update add knot default\nrc-service knot start\n\n# Verify installation\nknot-dns --version || rc-service knot status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install knot-dns\nsudo zypper install -y knot-dns knot-dnsutils, knot-doc\n\n# Enable and start service\nsudo systemctl enable --now knot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=knot-dns\nsudo firewall-cmd --reload\n\n# Verify installation\nknot-dns --version || systemctl status knot\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install knot-dns\n\n# Start service\nbrew services start knot-dns\n\n# Verify installation\nknot-dns --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install knot-dns\n\n# Enable in rc.conf\necho 'knot_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice knot start\n\n# Verify installation\nknot-dns --version || service knot status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install knot-dns\n\n# Or using Scoop\nscoop install knot-dns\n\n# Verify installation\nknot-dns --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/knot\n\n# Set up basic configuration\nsudo tee /etc/knot/knot-dns.conf << 'EOF'\n# Knot DNS Configuration\nserver: { udp-workers: 4, tcp-workers: 4 }\nEOF\n\n# Test configuration\nsudo knot-dns -t || sudo knot configtest\n\n# Reload service\nsudo systemctl reload knot\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R knot-dns:knot-dns /etc/knot\nsudo chmod 750 /etc/knot\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable knot\n\n# Start service\nsudo systemctl start knot\n\n# Stop service\nsudo systemctl stop knot\n\n# Restart service\nsudo systemctl restart knot\n\n# Reload configuration\nsudo systemctl reload knot\n\n# Check status\nsudo systemctl status knot\n\n# View logs\nsudo journalctl -u knot -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add knot default\n\n# Start service\nrc-service knot start\n\n# Stop service\nrc-service knot stop\n\n# Restart service\nrc-service knot restart\n\n# Check status\nrc-service knot status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'knot_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice knot start\n\n# Stop service\nservice knot stop\n\n# Restart service\nservice knot restart\n\n# Check status\nservice knot status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start knot-dns\nbrew services stop knot-dns\nbrew services restart knot-dns\n\n# Check status\nbrew services list | grep knot-dns\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start knot\n\n# Stop service\nnet stop knot\n\n# Using PowerShell\nStart-Service knot\nStop-Service knot\nRestart-Service knot\n\n# Check status\nGet-Service knot\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/knot/knot-dns.conf << 'EOF'\nserver: { udp-workers: 4, tcp-workers: 4 }\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart knot\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream knot-dns_backend {\n    server 127.0.0.1:53;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name knot-dns.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name knot-dns.example.com;\n\n    ssl_certificate /etc/ssl/certs/knot-dns.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/knot-dns.example.com.key;\n\n    location / {\n        proxy_pass http://knot-dns_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName knot-dns.example.com\n    Redirect permanent / https://knot-dns.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName knot-dns.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/knot-dns.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/knot-dns.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:53/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend knot-dns_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/knot-dns.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend knot-dns_backend\n\nbackend knot-dns_backend\n    balance roundrobin\n    option httpchk GET /health\n    server knot-dns1 127.0.0.1:53 check\n    server knot-dns2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R knot-dns:knot-dns /etc/knot\nsudo chmod 750 /etc/knot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=knot-dns\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/knot-dns.conf << 'EOF'\n[knot-dns]\nenabled = true\nport = 53\nfilter = knot-dns\nlogpath = /var/log/knot/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/knot-dns.key \\\n    -out /etc/ssl/certs/knot-dns.crt\n\n# Configure SSL in knot-dns\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE knot-dns_db;\nCREATE USER knot-dns_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE knot-dns_db TO knot-dns_user;\nEOF\n\n# Configure knot-dns to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE knot-dns_db;\nCREATE USER 'knot-dns_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON knot-dns_db.* TO 'knot-dns_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Knot DNS specific tuning\nserver: { udp-workers: 4, tcp-workers: 4 }\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nknot-dns soft nofile 65535\nknot-dns hard nofile 65535\nknot-dns soft nproc 32768\nknot-dns hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'knot-dns'\n    static_configs:\n      - targets: ['localhost:53']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet knot; then\n    echo \"Knot DNS is running\"\n    exit 0\nelse\n    echo \"Knot DNS is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/knot-dns << 'EOF'\n/var/log/knot/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 knot-dns knot-dns\n    postrotate\n        systemctl reload knot > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Knot DNS backup script\nBACKUP_DIR=\"/backup/knot-dns\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop knot\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/knot-dns-config-$DATE.tar.gz\" /etc/knot\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/knot-dns-data-$DATE.tar.gz\" /var/lib/knot-dns\n\n# Start service\nsystemctl start knot\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop knot\n\n# Restore configuration\nsudo tar -xzf /backup/knot-dns/knot-dns-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/knot-dns/knot-dns-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R knot-dns:knot-dns /etc/knot\nsudo chown -R knot-dns:knot-dns /var/lib/knot-dns\n\n# Start service\nsudo systemctl start knot\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u knot -n 100\nsudo tail -f /var/log/knot/*.log\n\n# Check configuration\nsudo knot-dns -t || sudo knot configtest\n\n# Check permissions\nls -la /etc/knot\nls -la /var/lib/knot-dns\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 53\nsudo netstat -tlnp | grep 53\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 53\nnc -zv localhost 53\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep knotd)\nhtop -p $(pgrep knotd)\n\n# Check connections\nss -ant | grep :53 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep knotd)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo knot-dns -d\n# or\nsudo knot debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  knot-dns:\n    image: knot-dns:latest\n    container_name: knot-dns\n    ports:\n      - \"53:53\"\n    volumes:\n      - ./config:/etc/knot\n      - ./data:/var/lib/knot-dns\n    environment:\n      - knot-dns_CONFIG=/etc/knot/knot-dns.conf\n    restart: unless-stopped\n    networks:\n      - knot-dns_net\n\nnetworks:\n  knot-dns_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: knot-dns\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: knot-dns\n  template:\n    metadata:\n      labels:\n        app: knot-dns\n    spec:\n      containers:\n      - name: knot-dns\n        image: knot-dns:latest\n        ports:\n        - containerPort: 53\n        volumeMounts:\n        - name: config\n          mountPath: /etc/knot\n      volumes:\n      - name: config\n        configMap:\n          name: knot-dns-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: knot-dns\nspec:\n  selector:\n    app: knot-dns\n  ports:\n  - port: 53\n    targetPort: 53\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Knot DNS\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install knot-dns\n      package:\n        name: knot-dns\n        state: present\n    \n    - name: Configure knot-dns\n      template:\n        src: knot-dns.conf.j2\n        dest: /etc/knot/knot-dns.conf\n        owner: knot-dns\n        group: knot-dns\n        mode: '0640'\n      notify: restart knot-dns\n    \n    - name: Start and enable knot-dns\n      systemd:\n        name: knot\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart knot-dns\n      systemd:\n        name: knot\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update knot-dns\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade knot-dns\n\n# Arch Linux\nsudo pacman -Syu knot-dns\n\n# Alpine Linux\napk update && apk upgrade knot-dns\n\n# openSUSE\nsudo zypper update knot-dns\n\n# FreeBSD\npkg update && pkg upgrade knot-dns\n\n# Always backup before updates\ntar -czf /backup/knot-dns-pre-update-$(date +%Y%m%d).tar.gz /etc/knot\n\n# Restart after updates\nsudo systemctl restart knot\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/knot -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo knot-dns --verify || sudo knot check\n\n# Update databases (if applicable)\nsudo knot-dns-update-db\n\n# Optimize performance\nsudo knot-dns-optimize\n\n# Check for security updates\nsudo knot-dns --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.knot-dns.org/\n- GitHub Repository: https://github.com/knot-dns/knot-dns\n- Community Forum: https://forum.knot-dns.org/\n- Wiki: https://wiki.knot-dns.org/\n- Comparison vs BIND, PowerDNS, NSD, Unbound: https://docs.knot-dns.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Knot DNS is a free and open-source DNS Server. A high-performance authoritative DNS server</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 53 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 53 (default knot-dns port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">knot-dnsutils, knot-doc</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install knot-dns\nsudo dnf install -y knot-dns knot-dnsutils, knot-doc\n\n# Enable and start service\nsudo systemctl enable --now knot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=knot-dns\nsudo firewall-cmd --reload\n\n# Verify installation\nknot-dns --version || systemctl status knot</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install knot-dns\nsudo apt install -y knot-dns knot-dnsutils, knot-doc\n\n# Enable and start service\nsudo systemctl enable --now knot\n\n# Configure firewall\nsudo ufw allow 53\n\n# Verify installation\nknot-dns --version || systemctl status knot</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install knot-dns\nsudo pacman -S knot-dns\n\n# Enable and start service\nsudo systemctl enable --now knot\n\n# Verify installation\nknot-dns --version || systemctl status knot</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install knot-dns\napk add --no-cache knot-dns\n\n# Enable and start service\nrc-update add knot default\nrc-service knot start\n\n# Verify installation\nknot-dns --version || rc-service knot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install knot-dns\nsudo zypper install -y knot-dns knot-dnsutils, knot-doc\n\n# Enable and start service\nsudo systemctl enable --now knot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=knot-dns\nsudo firewall-cmd --reload\n\n# Verify installation\nknot-dns --version || systemctl status knot</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install knot-dns\n\n# Start service\nbrew services start knot-dns\n\n# Verify installation\nknot-dns --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install knot-dns\n\n# Enable in rc.conf\necho &#039;knot_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice knot start\n\n# Verify installation\nknot-dns --version || service knot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install knot-dns\n\n# Or using Scoop\nscoop install knot-dns\n\n# Verify installation\nknot-dns --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/knot\n\n# Set up basic configuration\nsudo tee /etc/knot/knot-dns.conf &lt;&lt; &#039;EOF&#039;\n# Knot DNS Configuration\nserver: { udp-workers: 4, tcp-workers: 4 }\nEOF\n\n# Test configuration\nsudo knot-dns -t || sudo knot configtest\n\n# Reload service\nsudo systemctl reload knot</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R knot-dns:knot-dns /etc/knot\nsudo chmod 750 /etc/knot\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable knot\n\n# Start service\nsudo systemctl start knot\n\n# Stop service\nsudo systemctl stop knot\n\n# Restart service\nsudo systemctl restart knot\n\n# Reload configuration\nsudo systemctl reload knot\n\n# Check status\nsudo systemctl status knot\n\n# View logs\nsudo journalctl -u knot -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add knot default\n\n# Start service\nrc-service knot start\n\n# Stop service\nrc-service knot stop\n\n# Restart service\nrc-service knot restart\n\n# Check status\nrc-service knot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;knot_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice knot start\n\n# Stop service\nservice knot stop\n\n# Restart service\nservice knot restart\n\n# Check status\nservice knot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start knot-dns\nbrew services stop knot-dns\nbrew services restart knot-dns\n\n# Check status\nbrew services list | grep knot-dns</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start knot\n\n# Stop service\nnet stop knot\n\n# Using PowerShell\nStart-Service knot\nStop-Service knot\nRestart-Service knot\n\n# Check status\nGet-Service knot</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/knot/knot-dns.conf &lt;&lt; &#039;EOF&#039;\nserver: { udp-workers: 4, tcp-workers: 4 }\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart knot</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream knot-dns_backend {\n    server 127.0.0.1:53;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name knot-dns.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name knot-dns.example.com;\n\n    ssl_certificate /etc/ssl/certs/knot-dns.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/knot-dns.example.com.key;\n\n    location / {\n        proxy_pass http://knot-dns_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName knot-dns.example.com\n    Redirect permanent / https://knot-dns.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName knot-dns.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/knot-dns.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/knot-dns.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:53/\n    ProxyPassReverse / http://127.0.0.1:53/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:53/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend knot-dns_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/knot-dns.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend knot-dns_backend\n\nbackend knot-dns_backend\n    balance roundrobin\n    option httpchk GET /health\n    server knot-dns1 127.0.0.1:53 check\n    server knot-dns2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R knot-dns:knot-dns /etc/knot\nsudo chmod 750 /etc/knot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=knot-dns\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/knot-dns.conf &lt;&lt; &#039;EOF&#039;\n[knot-dns]\nenabled = true\nport = 53\nfilter = knot-dns\nlogpath = /var/log/knot/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/knot-dns.key \\\n    -out /etc/ssl/certs/knot-dns.crt\n\n# Configure SSL in knot-dns\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE knot-dns_db;\nCREATE USER knot-dns_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE knot-dns_db TO knot-dns_user;\nEOF\n\n# Configure knot-dns to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE knot-dns_db;\nCREATE USER &#039;knot-dns_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON knot-dns_db.* TO &#039;knot-dns_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Knot DNS specific tuning\nserver: { udp-workers: 4, tcp-workers: 4 }</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nknot-dns soft nofile 65535\nknot-dns hard nofile 65535\nknot-dns soft nproc 32768\nknot-dns hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;knot-dns&#039;\n    static_configs:\n      - targets: [&#039;localhost:53&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet knot; then\n    echo &quot;Knot DNS is running&quot;\n    exit 0\nelse\n    echo &quot;Knot DNS is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/knot-dns &lt;&lt; &#039;EOF&#039;\n/var/log/knot/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 knot-dns knot-dns\n    postrotate\n        systemctl reload knot &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Knot DNS backup script\nBACKUP_DIR=&quot;/backup/knot-dns&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop knot\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/knot-dns-config-$DATE.tar.gz&quot; /etc/knot\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/knot-dns-data-$DATE.tar.gz&quot; /var/lib/knot-dns\n\n# Start service\nsystemctl start knot\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop knot\n\n# Restore configuration\nsudo tar -xzf /backup/knot-dns/knot-dns-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/knot-dns/knot-dns-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R knot-dns:knot-dns /etc/knot\nsudo chown -R knot-dns:knot-dns /var/lib/knot-dns\n\n# Start service\nsudo systemctl start knot</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u knot -n 100\nsudo tail -f /var/log/knot/*.log\n\n# Check configuration\nsudo knot-dns -t || sudo knot configtest\n\n# Check permissions\nls -la /etc/knot\nls -la /var/lib/knot-dns</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 53\nsudo netstat -tlnp | grep 53\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 53\nnc -zv localhost 53</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep knotd)\nhtop -p $(pgrep knotd)\n\n# Check connections\nss -ant | grep :53 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep knotd)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo knot-dns -d\n# or\nsudo knot debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  knot-dns:\n    image: knot-dns:latest\n    container_name: knot-dns\n    ports:\n      - &quot;53:53&quot;\n    volumes:\n      - ./config:/etc/knot\n      - ./data:/var/lib/knot-dns\n    environment:\n      - knot-dns_CONFIG=/etc/knot/knot-dns.conf\n    restart: unless-stopped\n    networks:\n      - knot-dns_net\n\nnetworks:\n  knot-dns_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: knot-dns\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: knot-dns\n  template:\n    metadata:\n      labels:\n        app: knot-dns\n    spec:\n      containers:\n      - name: knot-dns\n        image: knot-dns:latest\n        ports:\n        - containerPort: 53\n        volumeMounts:\n        - name: config\n          mountPath: /etc/knot\n      volumes:\n      - name: config\n        configMap:\n          name: knot-dns-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: knot-dns\nspec:\n  selector:\n    app: knot-dns\n  ports:\n  - port: 53\n    targetPort: 53\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Knot DNS\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install knot-dns\n      package:\n        name: knot-dns\n        state: present\n    \n    - name: Configure knot-dns\n      template:\n        src: knot-dns.conf.j2\n        dest: /etc/knot/knot-dns.conf\n        owner: knot-dns\n        group: knot-dns\n        mode: &#039;0640&#039;\n      notify: restart knot-dns\n    \n    - name: Start and enable knot-dns\n      systemd:\n        name: knot\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart knot-dns\n      systemd:\n        name: knot\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update knot-dns\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade knot-dns\n\n# Arch Linux\nsudo pacman -Syu knot-dns\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade knot-dns\n\n# openSUSE\nsudo zypper update knot-dns\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade knot-dns\n\n# Always backup before updates\ntar -czf /backup/knot-dns-pre-update-$(date +%Y%m%d).tar.gz /etc/knot\n\n# Restart after updates\nsudo systemctl restart knot</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/knot -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo knot-dns --verify || sudo knot check\n\n# Update databases (if applicable)\nsudo knot-dns-update-db\n\n# Optimize performance\nsudo knot-dns-optimize\n\n# Check for security updates\nsudo knot-dns --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.knot-dns.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/knot-dns/knot-dns</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.knot-dns.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.knot-dns.org/</li>\n<li class=\"mobile-list-item\">Comparison vs BIND, PowerDNS, NSD, Unbound: https://docs.knot-dns.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"11 min","wordCount":2007,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-05T18:16:09.280Z","metadataVersion":"2.0"}]},"__N_SSG":true}