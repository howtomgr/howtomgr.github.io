{"pageProps":{"guide":{"name":"emby","displayName":"emby Installation Guide","slug":"emby","description":"emby is a free and open-source media server system. Emby provides media streaming and management, serving as an alternative to Plex with more open components","category":"media-servers","subcategory":"media-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8096,8920],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["media-servers","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/media-servers/emby","documentationUrl":"https://howtomgr.github.io/media-servers/emby","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/emby","updatedAt":"2025-09-16T03:08:49Z","createdAt":"2025-09-16T02:34:15Z","readmeRaw":"# emby Installation Guide\n\nemby is a free and open-source media server system. Emby provides media streaming and management, serving as an alternative to Plex with more open components\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 100GB+ for media\n  - Network: Streaming bandwidth\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8096 (default emby port)\n  - Port 8920 for HTTPS\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install emby\nsudo dnf install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nemby --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install emby\nsudo apt install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo ufw allow 8096\n\n# Verify installation\nemby --version\n```\n\n### Arch Linux\n\n```bash\n# Install emby\nsudo pacman -S emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Verify installation\nemby --version\n```\n\n### Alpine Linux\n\n```bash\n# Install emby\napk add --no-cache emby\n\n# Enable and start service\nrc-update add emby default\nrc-service emby start\n\n# Verify installation\nemby --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install emby\nsudo zypper install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nemby --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install emby\n\n# Start service\nbrew services start emby\n\n# Verify installation\nemby --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install emby\n\n# Enable in rc.conf\necho 'emby_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice emby start\n\n# Verify installation\nemby --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install emby\n\n# Or using Scoop\nscoop install emby\n\n# Verify installation\nemby --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/emby\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nemby --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable emby\n\n# Start service\nsudo systemctl start emby\n\n# Stop service\nsudo systemctl stop emby\n\n# Restart service\nsudo systemctl restart emby\n\n# Check status\nsudo systemctl status emby\n\n# View logs\nsudo journalctl -u emby -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add emby default\n\n# Start service\nrc-service emby start\n\n# Stop service\nrc-service emby stop\n\n# Restart service\nrc-service emby restart\n\n# Check status\nrc-service emby status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'emby_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice emby start\n\n# Stop service\nservice emby stop\n\n# Restart service\nservice emby restart\n\n# Check status\nservice emby status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start emby\nbrew services stop emby\nbrew services restart emby\n\n# Check status\nbrew services list | grep emby\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start emby\n\n# Stop service\nnet stop emby\n\n# Using PowerShell\nStart-Service emby\nStop-Service emby\nRestart-Service emby\n\n# Check status\nGet-Service emby\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream emby_backend {\n    server 127.0.0.1:8096;\n}\n\nserver {\n    listen 80;\n    server_name emby.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name emby.example.com;\n\n    ssl_certificate /etc/ssl/certs/emby.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/emby.example.com.key;\n\n    location / {\n        proxy_pass http://emby_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName emby.example.com\n    Redirect permanent / https://emby.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName emby.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/emby.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/emby.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8096/\n    ProxyPassReverse / http://127.0.0.1:8096/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend emby_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/emby.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend emby_backend\n\nbackend emby_backend\n    balance roundrobin\n    server emby1 127.0.0.1:8096 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R emby:emby /etc/emby\nsudo chmod 750 /etc/emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status emby\n\n# View logs\nsudo journalctl -u emby -f\n\n# Monitor resource usage\ntop -p $(pgrep emby)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/emby\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/emby-backup-$DATE.tar.gz\" /etc/emby /var/lib/emby\n\necho \"Backup completed: $BACKUP_DIR/emby-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop emby\n\n# Restore from backup\ntar -xzf /backup/emby/emby-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start emby\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u emby -n 100\nsudo tail -f /var/log/emby/emby.log\n\n# Check configuration\nemby --version\n\n# Check permissions\nls -la /etc/emby\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8096\n\n# Test connectivity\ntelnet localhost 8096\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep emby)\n\n# Check disk I/O\niotop -p $(pgrep emby)\n\n# Check connections\nss -an | grep 8096\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  emby:\n    image: emby:latest\n    ports:\n      - \"8096:8096\"\n    volumes:\n      - ./config:/etc/emby\n      - ./data:/var/lib/emby\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update emby\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade emby\n\n# Arch Linux\nsudo pacman -Syu emby\n\n# Alpine Linux\napk update && apk upgrade emby\n\n# openSUSE\nsudo zypper update emby\n\n# FreeBSD\npkg update && pkg upgrade emby\n\n# Always backup before updates\ntar -czf /backup/emby-pre-update-$(date +%Y%m%d).tar.gz /etc/emby\n\n# Restart after updates\nsudo systemctl restart emby\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/emby\n\n# Clean old logs\nfind /var/log/emby -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/emby\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.emby.org/\n- GitHub Repository: https://github.com/emby/emby\n- Community Forum: https://forum.emby.org/\n- Best Practices Guide: https://docs.emby.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"emby-installation-guide\" class=\"mobile-header\">emby Installation Guide</h1>\n<p class=\"mobile-paragraph\">emby is a free and open-source media server system. Emby provides media streaming and management, serving as an alternative to Plex with more open components</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100GB+ for media</li>\n<li class=\"mobile-list-item\">Network: Streaming bandwidth</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8096 (default emby port)</li>\n<li class=\"mobile-list-item\">Port 8920 for HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install emby\nsudo dnf install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install emby\nsudo apt install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo ufw allow 8096\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install emby\nsudo pacman -S emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install emby\napk add --no-cache emby\n\n# Enable and start service\nrc-update add emby default\nrc-service emby start\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install emby\nsudo zypper install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install emby\n\n# Start service\nbrew services start emby\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install emby\n\n# Enable in rc.conf\necho &#039;emby_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice emby start\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install emby\n\n# Or using Scoop\nscoop install emby\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/emby\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nemby --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable emby\n\n# Start service\nsudo systemctl start emby\n\n# Stop service\nsudo systemctl stop emby\n\n# Restart service\nsudo systemctl restart emby\n\n# Check status\nsudo systemctl status emby\n\n# View logs\nsudo journalctl -u emby -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add emby default\n\n# Start service\nrc-service emby start\n\n# Stop service\nrc-service emby stop\n\n# Restart service\nrc-service emby restart\n\n# Check status\nrc-service emby status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;emby_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice emby start\n\n# Stop service\nservice emby stop\n\n# Restart service\nservice emby restart\n\n# Check status\nservice emby status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start emby\nbrew services stop emby\nbrew services restart emby\n\n# Check status\nbrew services list | grep emby</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start emby\n\n# Stop service\nnet stop emby\n\n# Using PowerShell\nStart-Service emby\nStop-Service emby\nRestart-Service emby\n\n# Check status\nGet-Service emby</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream emby_backend {\n    server 127.0.0.1:8096;\n}\n\nserver {\n    listen 80;\n    server_name emby.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name emby.example.com;\n\n    ssl_certificate /etc/ssl/certs/emby.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/emby.example.com.key;\n\n    location / {\n        proxy_pass http://emby_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName emby.example.com\n    Redirect permanent / https://emby.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName emby.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/emby.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/emby.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8096/\n    ProxyPassReverse / http://127.0.0.1:8096/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend emby_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/emby.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend emby_backend\n\nbackend emby_backend\n    balance roundrobin\n    server emby1 127.0.0.1:8096 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R emby:emby /etc/emby\nsudo chmod 750 /etc/emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status emby\n\n# View logs\nsudo journalctl -u emby -f\n\n# Monitor resource usage\ntop -p $(pgrep emby)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/emby&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/emby-backup-$DATE.tar.gz&quot; /etc/emby /var/lib/emby\n\necho &quot;Backup completed: $BACKUP_DIR/emby-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop emby\n\n# Restore from backup\ntar -xzf /backup/emby/emby-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start emby</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u emby -n 100\nsudo tail -f /var/log/emby/emby.log\n\n# Check configuration\nemby --version\n\n# Check permissions\nls -la /etc/emby</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8096\n\n# Test connectivity\ntelnet localhost 8096\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep emby)\n\n# Check disk I/O\niotop -p $(pgrep emby)\n\n# Check connections\nss -an | grep 8096</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  emby:\n    image: emby:latest\n    ports:\n      - &quot;8096:8096&quot;\n    volumes:\n      - ./config:/etc/emby\n      - ./data:/var/lib/emby\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update emby\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade emby\n\n# Arch Linux\nsudo pacman -Syu emby\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade emby\n\n# openSUSE\nsudo zypper update emby\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade emby\n\n# Always backup before updates\ntar -czf /backup/emby-pre-update-$(date +%Y%m%d).tar.gz /etc/emby\n\n# Restart after updates\nsudo systemctl restart emby</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/emby\n\n# Clean old logs\nfind /var/log/emby -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/emby</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.emby.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/emby/emby</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.emby.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.emby.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1165,"lastBuilt":"2025-09-16T06:59:16.954Z","metadataVersion":"2.0"},"category":{"key":"media-servers","name":"Media servers","icon":"🎬","color":"#6272a4","description":"Media streaming and entertainment platforms"},"relatedGuides":[{"name":"jellyfin","displayName":"jellyfin Installation Guide","slug":"jellyfin","description":"jellyfin is a free and open-source free software media system. Jellyfin is a free and open-source media server for hosting and streaming your media library, serving as an alternative to Plex, Emby, or commercial streaming solutions","category":"media-servers","subcategory":"media-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,8096,8920],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["media-servers","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/media-servers/jellyfin","documentationUrl":"https://howtomgr.github.io/media-servers/jellyfin","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jellyfin","updatedAt":"2025-09-16T03:25:31Z","createdAt":"2025-09-08T03:08:57Z","readmeRaw":"# jellyfin Installation Guide\n\njellyfin is a free and open-source free software media system. Jellyfin is a free and open-source media server for hosting and streaming your media library, serving as an alternative to Plex, Emby, or commercial streaming solutions\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores (4+ for transcoding)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 100GB+ for media storage\n  - Network: Stable network for streaming\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8096 (default jellyfin port)\n  - Port 8920 for HTTPS\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install jellyfin\nsudo dnf install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\njellyfin --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install jellyfin\nsudo apt install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo ufw allow 8096\n\n# Verify installation\njellyfin --version\n```\n\n### Arch Linux\n\n```bash\n# Install jellyfin\nsudo pacman -S jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Verify installation\njellyfin --version\n```\n\n### Alpine Linux\n\n```bash\n# Install jellyfin\napk add --no-cache jellyfin\n\n# Enable and start service\nrc-update add jellyfin default\nrc-service jellyfin start\n\n# Verify installation\njellyfin --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install jellyfin\nsudo zypper install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\njellyfin --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install jellyfin\n\n# Start service\nbrew services start jellyfin\n\n# Verify installation\njellyfin --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install jellyfin\n\n# Enable in rc.conf\necho 'jellyfin_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice jellyfin start\n\n# Verify installation\njellyfin --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install jellyfin\n\n# Or using Scoop\nscoop install jellyfin\n\n# Verify installation\njellyfin --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/jellyfin\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\njellyfin --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable jellyfin\n\n# Start service\nsudo systemctl start jellyfin\n\n# Stop service\nsudo systemctl stop jellyfin\n\n# Restart service\nsudo systemctl restart jellyfin\n\n# Check status\nsudo systemctl status jellyfin\n\n# View logs\nsudo journalctl -u jellyfin -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add jellyfin default\n\n# Start service\nrc-service jellyfin start\n\n# Stop service\nrc-service jellyfin stop\n\n# Restart service\nrc-service jellyfin restart\n\n# Check status\nrc-service jellyfin status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'jellyfin_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice jellyfin start\n\n# Stop service\nservice jellyfin stop\n\n# Restart service\nservice jellyfin restart\n\n# Check status\nservice jellyfin status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start jellyfin\nbrew services stop jellyfin\nbrew services restart jellyfin\n\n# Check status\nbrew services list | grep jellyfin\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start jellyfin\n\n# Stop service\nnet stop jellyfin\n\n# Using PowerShell\nStart-Service jellyfin\nStop-Service jellyfin\nRestart-Service jellyfin\n\n# Check status\nGet-Service jellyfin\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream jellyfin_backend {\n    server 127.0.0.1:8096;\n}\n\nserver {\n    listen 80;\n    server_name jellyfin.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jellyfin.example.com;\n\n    ssl_certificate /etc/ssl/certs/jellyfin.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/jellyfin.example.com.key;\n\n    location / {\n        proxy_pass http://jellyfin_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName jellyfin.example.com\n    Redirect permanent / https://jellyfin.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName jellyfin.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/jellyfin.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/jellyfin.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8096/\n    ProxyPassReverse / http://127.0.0.1:8096/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend jellyfin_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jellyfin.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend jellyfin_backend\n\nbackend jellyfin_backend\n    balance roundrobin\n    server jellyfin1 127.0.0.1:8096 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R jellyfin:jellyfin /etc/jellyfin\nsudo chmod 750 /etc/jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status jellyfin\n\n# View logs\nsudo journalctl -u jellyfin -f\n\n# Monitor resource usage\ntop -p $(pgrep jellyfin)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/jellyfin\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/jellyfin-backup-$DATE.tar.gz\" /etc/jellyfin /var/lib/jellyfin\n\necho \"Backup completed: $BACKUP_DIR/jellyfin-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop jellyfin\n\n# Restore from backup\ntar -xzf /backup/jellyfin/jellyfin-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start jellyfin\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u jellyfin -n 100\nsudo tail -f /var/log/jellyfin/jellyfin.log\n\n# Check configuration\njellyfin --version\n\n# Check permissions\nls -la /etc/jellyfin\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8096\n\n# Test connectivity\ntelnet localhost 8096\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep jellyfin)\n\n# Check disk I/O\niotop -p $(pgrep jellyfin)\n\n# Check connections\nss -an | grep 8096\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  jellyfin:\n    image: jellyfin:latest\n    ports:\n      - \"8096:8096\"\n    volumes:\n      - ./config:/etc/jellyfin\n      - ./data:/var/lib/jellyfin\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update jellyfin\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade jellyfin\n\n# Arch Linux\nsudo pacman -Syu jellyfin\n\n# Alpine Linux\napk update && apk upgrade jellyfin\n\n# openSUSE\nsudo zypper update jellyfin\n\n# FreeBSD\npkg update && pkg upgrade jellyfin\n\n# Always backup before updates\ntar -czf /backup/jellyfin-pre-update-$(date +%Y%m%d).tar.gz /etc/jellyfin\n\n# Restart after updates\nsudo systemctl restart jellyfin\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/jellyfin\n\n# Clean old logs\nfind /var/log/jellyfin -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/jellyfin\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.jellyfin.org/\n- GitHub Repository: https://github.com/jellyfin/jellyfin\n- Community Forum: https://forum.jellyfin.org/\n- Best Practices Guide: https://docs.jellyfin.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"jellyfin-installation-guide\" class=\"mobile-header\">jellyfin Installation Guide</h1>\n<p class=\"mobile-paragraph\">jellyfin is a free and open-source free software media system. Jellyfin is a free and open-source media server for hosting and streaming your media library, serving as an alternative to Plex, Emby, or commercial streaming solutions</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores (4+ for transcoding)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 100GB+ for media storage</li>\n<li class=\"mobile-list-item\">Network: Stable network for streaming</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8096 (default jellyfin port)</li>\n<li class=\"mobile-list-item\">Port 8920 for HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install jellyfin\nsudo dnf install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install jellyfin\nsudo apt install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo ufw allow 8096\n\n# Verify installation\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install jellyfin\nsudo pacman -S jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Verify installation\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install jellyfin\napk add --no-cache jellyfin\n\n# Enable and start service\nrc-update add jellyfin default\nrc-service jellyfin start\n\n# Verify installation\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install jellyfin\nsudo zypper install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install jellyfin\n\n# Start service\nbrew services start jellyfin\n\n# Verify installation\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install jellyfin\n\n# Enable in rc.conf\necho &#039;jellyfin_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice jellyfin start\n\n# Verify installation\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install jellyfin\n\n# Or using Scoop\nscoop install jellyfin\n\n# Verify installation\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/jellyfin\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\njellyfin --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable jellyfin\n\n# Start service\nsudo systemctl start jellyfin\n\n# Stop service\nsudo systemctl stop jellyfin\n\n# Restart service\nsudo systemctl restart jellyfin\n\n# Check status\nsudo systemctl status jellyfin\n\n# View logs\nsudo journalctl -u jellyfin -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add jellyfin default\n\n# Start service\nrc-service jellyfin start\n\n# Stop service\nrc-service jellyfin stop\n\n# Restart service\nrc-service jellyfin restart\n\n# Check status\nrc-service jellyfin status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;jellyfin_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice jellyfin start\n\n# Stop service\nservice jellyfin stop\n\n# Restart service\nservice jellyfin restart\n\n# Check status\nservice jellyfin status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start jellyfin\nbrew services stop jellyfin\nbrew services restart jellyfin\n\n# Check status\nbrew services list | grep jellyfin</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start jellyfin\n\n# Stop service\nnet stop jellyfin\n\n# Using PowerShell\nStart-Service jellyfin\nStop-Service jellyfin\nRestart-Service jellyfin\n\n# Check status\nGet-Service jellyfin</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream jellyfin_backend {\n    server 127.0.0.1:8096;\n}\n\nserver {\n    listen 80;\n    server_name jellyfin.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jellyfin.example.com;\n\n    ssl_certificate /etc/ssl/certs/jellyfin.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/jellyfin.example.com.key;\n\n    location / {\n        proxy_pass http://jellyfin_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName jellyfin.example.com\n    Redirect permanent / https://jellyfin.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName jellyfin.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/jellyfin.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/jellyfin.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8096/\n    ProxyPassReverse / http://127.0.0.1:8096/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend jellyfin_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jellyfin.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend jellyfin_backend\n\nbackend jellyfin_backend\n    balance roundrobin\n    server jellyfin1 127.0.0.1:8096 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R jellyfin:jellyfin /etc/jellyfin\nsudo chmod 750 /etc/jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status jellyfin\n\n# View logs\nsudo journalctl -u jellyfin -f\n\n# Monitor resource usage\ntop -p $(pgrep jellyfin)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/jellyfin&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/jellyfin-backup-$DATE.tar.gz&quot; /etc/jellyfin /var/lib/jellyfin\n\necho &quot;Backup completed: $BACKUP_DIR/jellyfin-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop jellyfin\n\n# Restore from backup\ntar -xzf /backup/jellyfin/jellyfin-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start jellyfin</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u jellyfin -n 100\nsudo tail -f /var/log/jellyfin/jellyfin.log\n\n# Check configuration\njellyfin --version\n\n# Check permissions\nls -la /etc/jellyfin</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8096\n\n# Test connectivity\ntelnet localhost 8096\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep jellyfin)\n\n# Check disk I/O\niotop -p $(pgrep jellyfin)\n\n# Check connections\nss -an | grep 8096</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  jellyfin:\n    image: jellyfin:latest\n    ports:\n      - &quot;8096:8096&quot;\n    volumes:\n      - ./config:/etc/jellyfin\n      - ./data:/var/lib/jellyfin\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update jellyfin\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade jellyfin\n\n# Arch Linux\nsudo pacman -Syu jellyfin\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade jellyfin\n\n# openSUSE\nsudo zypper update jellyfin\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade jellyfin\n\n# Always backup before updates\ntar -czf /backup/jellyfin-pre-update-$(date +%Y%m%d).tar.gz /etc/jellyfin\n\n# Restart after updates\nsudo systemctl restart jellyfin</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/jellyfin\n\n# Clean old logs\nfind /var/log/jellyfin -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/jellyfin</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.jellyfin.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/jellyfin/jellyfin</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.jellyfin.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.jellyfin.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1184,"lastBuilt":"2025-09-16T06:58:37.417Z","metadataVersion":"2.0"}]},"__N_SSG":true}