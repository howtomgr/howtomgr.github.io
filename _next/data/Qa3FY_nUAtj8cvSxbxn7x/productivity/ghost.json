{"pageProps":{"guide":{"name":"ghost","displayName":"Ghost","slug":"ghost","description":"Repo for ghost","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ghost","updatedAt":"2025-09-08T03:07:48Z","createdAt":"2025-09-08T03:07:38Z","readmeRaw":"## ðŸ‘‹ Welcome to ghost ðŸš€  \n\nghost README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-ghost\" class=\"mobile-header\">ðŸ‘‹ Welcome to ghost ðŸš€  </h2>\n<p class=\"mobile-paragraph\">ghost README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:21.997Z"},"category":{"key":"productivity","name":"Productivity","description":"Content management and productivity tools","icon":"âš¡","color":"#ff79c6","keywords":["nextcloud","wordpress","ghost","bookstack","outline","bitwarden"]},"relatedGuides":[{"name":"nextcloud","displayName":"Nextcloud","slug":"nextcloud","description":"Repo for nextcloud","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nextcloud","updatedAt":"2025-09-08T03:12:12Z","createdAt":"2025-09-08T03:12:02Z","readmeRaw":"# Nextcloud Installation Guide\n\nSelf-hosted file sync and share platform with collaboration features, calendar, contacts, and extensive app ecosystem.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Web server (Apache or NGINX)\n- PHP 8.0+ with required extensions\n- Database (MySQL/MariaDB, PostgreSQL, or SQLite)\n- 2GB RAM minimum, 4GB+ recommended\n\n## Installation\n\n### LAMP Stack Setup (Apache + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# Enable services\nsudo systemctl enable --now apache2 mariadb  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb    # RHEL/CentOS\n```\n\n### Database Setup\n```bash\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create Nextcloud database\nsudo mysql -u root -p <<EOF\nCREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE USER 'nextclouduser'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON nextcloud.* TO 'nextclouduser'@'localhost';\nFLUSH PRIVILEGES;\nEXIT\nEOF\n```\n\n### Nextcloud Download and Setup\n```bash\n# Download Nextcloud\ncd /tmp\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2\ntar -xjf latest.tar.bz2\n\n# Move to web directory\nsudo cp -R nextcloud /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/nextcloud  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/nextcloud      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/nextcloud/ -type f -print0 | xargs -0 chmod 0640\nsudo find /var/www/html/nextcloud/ -type d -print0 | xargs -0 chmod 0750\nsudo chmod 750 /var/www/html/nextcloud\nsudo chmod -R 770 /var/www/html/nextcloud/data\nsudo chmod -R 770 /var/www/html/nextcloud/apps\nsudo chmod -R 770 /var/www/html/nextcloud/config\n```\n\n### Using Docker Compose\n```bash\n# Create docker-compose.yml\nmkdir -p ~/nextcloud && cd ~/nextcloud\n\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  nextcloud:\n    image: nextcloud:latest\n    restart: unless-stopped\n    ports:\n      - \"8080:80\"\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./config:/var/www/html/config\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./data:/var/www/html/data\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=secure_password\n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=admin_password\n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com\n    depends_on:\n      - db\n      - redis\n    networks:\n      - nextcloud\n\n  db:\n    image: mariadb:10.6\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - nextcloud\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - nextcloud\n\nvolumes:\n  nextcloud_data:\n  db_data:\n\nnetworks:\n  nextcloud:\n    driver: bridge\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f nextcloud\n```\n\n## Configuration\n\n### Apache Virtual Host\n```bash\n# Create Apache virtual host\nsudo tee /etc/apache2/sites-available/nextcloud.conf > /dev/null <<EOF\n<VirtualHost *:80>\n    ServerName nextcloud.example.com\n    DocumentRoot /var/www/html/nextcloud\n\n    <Directory /var/www/html/nextcloud/>\n        Require all granted\n        AllowOverride All\n        Options FollowSymLinks MultiViews\n        \n        <IfModule mod_dav.c>\n            Dav off\n        </IfModule>\n    </Directory>\n\n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=15552000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"no-referrer\"\n    Header always set Feature-Policy \"camera 'none'; microphone 'none'\"\n\n    ErrorLog \\${APACHE_LOG_DIR}/nextcloud_error.log\n    CustomLog \\${APACHE_LOG_DIR}/nextcloud_access.log combined\n</VirtualHost>\nEOF\n\n# Enable required modules\nsudo a2enmod rewrite headers env dir mime ssl\nsudo a2ensite nextcloud.conf\nsudo systemctl restart apache2\n```\n\n### NGINX Configuration\n```bash\n# Create NGINX server block\nsudo tee /etc/nginx/sites-available/nextcloud > /dev/null <<EOF\nupstream php-handler {\n    server unix:/var/run/php/php8.0-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name nextcloud.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/nextcloud.crt;\n    ssl_certificate_key /etc/ssl/private/nextcloud.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload\" always;\n    add_header Referrer-Policy \"no-referrer\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-Download-Options \"noopen\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Permitted-Cross-Domain-Policies \"none\" always;\n    add_header X-Robots-Tag \"none\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n\n    # Remove X-Powered-By\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/html/nextcloud;\n    index index.php index.html /index.php\\$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( \\$http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/\\$is_args\\$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    location ^~ /.well-known {\n        location = /.well-known/carddav { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav  { return 301 /remote.php/dav/; }\n        location /.well-known/acme-challenge    { try_files \\$uri \\$uri/ =404; }\n        location /.well-known/pki-validation    { try_files \\$uri \\$uri/ =404; }\n        return 301 /index.php\\$request_uri;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths.\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\\$|/)  { return 404; }\n    location ~ ^/(?:\\\\.|autotest|occ|issue|indie|db_|console)                { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends\n    # `/index.php` to the URI, resulting in a HTTP 500 error response.\n    location ~ \\\\.php(?:\\$|/) {\n        # Required for legacy support\n        rewrite ^/(?!index|remote|public|cron|core\\\\/ajax\\\\/update|status|ocs\\\\/v[12]|updater\\\\/.+|oc[ms]-provider\\\\/.+|.+\\\\/richdocumentscode\\\\/proxy) /index.php\\$request_uri;\n\n        fastcgi_split_path_info ^(.+?\\\\.php)(/.*)\\$;\n        set \\$path_info \\$fastcgi_path_info;\n\n        try_files \\$fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \\$path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\\\.(?:css|js|svg|gif|png|jpg|ico)\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 6M;\n        access_log off;\n    }\n\n    location ~ \\\\.woff2?\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 7d;\n        access_log off;\n    }\n\n    # Rule borrowed from `.htaccess`\n    location /remote {\n        return 301 /remote.php\\$request_uri;\n    }\n\n    location / {\n        try_files \\$uri \\$uri/ /index.php\\$request_uri;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### PHP Configuration\n```bash\n# Optimize PHP for Nextcloud\nsudo nano /etc/php/8.0/apache2/php.ini  # Apache\nsudo nano /etc/php/8.0/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\nupload_max_filesize = 16G\npost_max_size = 16G\nmax_execution_time = 3600\nmax_input_time = 3600\nmax_input_vars = 3000\ndate.timezone = \"America/New_York\"\n\n# OPcache settings\nopcache.enable = 1\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\n\n# APCu for local cache\napc.enable_cli = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php8.0-fpm  # NGINX\n```\n\n### Command Line Installation\n```bash\n# Install via command line\ncd /var/www/html/nextcloud\nsudo -u www-data php occ maintenance:install \\\n  --database=\"mysql\" \\\n  --database-name=\"nextcloud\" \\\n  --database-user=\"nextclouduser\" \\\n  --database-pass=\"secure_password\" \\\n  --admin-user=\"admin\" \\\n  --admin-pass=\"admin_password\" \\\n  --data-dir=\"/var/www/html/nextcloud/data\"\n\n# Configure trusted domains\nsudo -u www-data php occ config:system:set trusted_domains 0 --value=nextcloud.example.com\nsudo -u www-data php occ config:system:set trusted_domains 1 --value=192.168.1.100\n\n# Configure caching\nsudo -u www-data php occ config:system:set memcache.local --value=\"\\\\OC\\\\Memcache\\\\APCu\"\nsudo -u www-data php occ config:system:set memcache.distributed --value=\"\\\\OC\\\\Memcache\\\\Redis\"\nsudo -u www-data php occ config:system:set redis host --value=\"localhost\"\nsudo -u www-data php occ config:system:set redis port --value=6379\n```\n\n## Performance Optimization\n\n### Redis Caching Setup\n```bash\n# Install Redis\nsudo apt install -y redis-server  # Ubuntu/Debian\nsudo yum install -y redis          # RHEL/CentOS\n\nsudo systemctl enable --now redis\n\n# Configure Redis for Nextcloud\nsudo tee -a /etc/redis/redis.conf > /dev/null <<EOF\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\nEOF\n\nsudo systemctl restart redis\n\n# Install Redis PHP extension\nsudo apt install -y php-redis  # Ubuntu/Debian\nsudo yum install -y php-redis   # RHEL/CentOS\n\n# Configure Nextcloud to use Redis\nsudo -u www-data php occ config:system:set memcache.local --value=\"\\\\OC\\\\Memcache\\\\APCu\"\nsudo -u www-data php occ config:system:set memcache.distributed --value=\"\\\\OC\\\\Memcache\\\\Redis\"\nsudo -u www-data php occ config:system:set redis host --value=\"localhost\"\nsudo -u www-data php occ config:system:set redis port --value=6379\n```\n\n### Database Optimization\n```bash\n# MySQL/MariaDB optimization for Nextcloud\nsudo tee -a /etc/mysql/mysql.conf.d/nextcloud.cnf > /dev/null <<EOF\n[mysqld]\ninnodb_buffer_pool_size = 1G\ninnodb_io_capacity = 4000\ninnodb_log_file_size = 128M\ninnodb_log_buffer_size = 32M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\n\nquery_cache_type = 1\nquery_cache_limit = 2M\nquery_cache_size = 64M\n\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\njoin_buffer_size = 262144\nsort_buffer_size = 262144\n\nmax_connections = 100\nmax_connect_errors = 10\nconnect_timeout = 5\nwait_timeout = 600\nmax_allowed_packet = 64M\n\nthread_cache_size = 128\nquery_cache_size = 64M\n\n[mysql.server]\ndefault-table-type = innodb\nEOF\n\nsudo systemctl restart mysql\n\n# Add indexes for better performance\nmysql -u nextclouduser -p nextcloud <<EOF\nALTER TABLE oc_jobs ADD INDEX jobs_class_index (class);\nALTER TABLE oc_filecache ADD INDEX fs_mtime (mtime);\nEOF\n```\n\n### Background Jobs\n```bash\n# Configure cron for background jobs\nsudo crontab -u www-data -e\n# Add: */5 * * * * php /var/www/html/nextcloud/occ system:cron\n\n# Or configure via occ command\nsudo -u www-data php occ background:cron\n\n# Check background job status\nsudo -u www-data php occ status\nsudo -u www-data php occ background:job:list\n```\n\n## Security Hardening\n\n### File Permissions and Security\n```bash\n# Secure file permissions script\nsudo tee /usr/local/bin/nextcloud-permissions.sh > /dev/null <<'EOF'\n#!/bin/bash\nncpath='/var/www/html/nextcloud'\nhtuser='www-data'\nhtgroup='www-data'\nrootuser='root'\n\nprintf \"Creating possible missing Directories\\n\"\nmkdir -p $ncpath/data\nmkdir -p $ncpath/assets\nmkdir -p $ncpath/updater\n\nprintf \"chmod Files and Directories\\n\"\nfind ${ncpath}/ -type f -print0 | xargs -0 chmod 0640\nfind ${ncpath}/ -type d -print0 | xargs -0 chmod 0750\n\nprintf \"chown Directories\\n\"\nchown -R ${rootuser}:${htgroup} ${ncpath}/\nchown -R ${htuser}:${htgroup} ${ncpath}/apps/\nchown -R ${htuser}:${htgroup} ${ncpath}/assets/\nchown -R ${htuser}:${htgroup} ${ncpath}/config/\nchown -R ${htuser}:${htgroup} ${ncpath}/data/\nchown -R ${htuser}:${htgroup} ${ncpath}/themes/\nchown -R ${htuser}:${htgroup} ${ncpath}/updater/\n\nchmod +x ${ncpath}/occ\n\nprintf \"chmod/chown .htaccess\\n\"\nif [ -f ${ncpath}/.htaccess ]; then\n    chmod 0644 ${ncpath}/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/.htaccess\nfi\n\nif [ -f ${ncpath}/data/.htaccess ]; then\n    chmod 0644 ${ncpath}/data/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/data/.htaccess\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-permissions.sh\nsudo /usr/local/bin/nextcloud-permissions.sh\n```\n\n### SSL/TLS Configuration\n```bash\n# Install Let's Encrypt certificate\nsudo apt install -y certbot python3-certbot-apache  # Apache\nsudo apt install -y certbot python3-certbot-nginx   # NGINX\n\n# Obtain certificate\nsudo certbot --apache -d nextcloud.example.com  # Apache\nsudo certbot --nginx -d nextcloud.example.com   # NGINX\n\n# Configure HTTPS redirect in Nextcloud\nsudo -u www-data php occ config:system:set overwrite.cli.url --value=\"https://nextcloud.example.com\"\nsudo -u www-data php occ config:system:set overwriteprotocol --value=\"https\"\n```\n\n### Security Scan and Hardening\n```bash\n# Run Nextcloud security scan\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:reset admin\n\n# Configure rate limiting\nsudo -u www-data php occ config:app:set brute_force_protection delay_increment --value=10\nsudo -u www-data php occ config:app:set brute_force_protection fail_tolerance --value=3\n\n# Enable two-factor authentication\nsudo -u www-data php occ app:enable twofactor_totp\nsudo -u www-data php occ app:enable twofactor_u2f\n\n# Configure file access control\nsudo -u www-data php occ config:system:set default_file_access --value=\"restrict\"\n```\n\n## App Management\n\n### Essential Apps Installation\n```bash\n# Install popular apps via occ\nsudo -u www-data php occ app:install calendar\nsudo -u www-data php occ app:install contacts\nsudo -u www-data php occ app:install mail\nsudo -u www-data php occ app:install notes\nsudo -u www-data php occ app:install tasks\nsudo -u www-data php occ app:install deck\nsudo -u www-data php occ app:install polls\nsudo -u www-data php occ app:install richdocuments  # OnlyOffice integration\n\n# Enable apps\nsudo -u www-data php occ app:enable calendar\nsudo -u www-data php occ app:enable contacts\nsudo -u www-data php occ app:enable mail\n\n# List available apps\nsudo -u www-data php occ app:list\n\n# Update apps\nsudo -u www-data php occ app:update --all\n```\n\n### OnlyOffice Integration\n```bash\n# Install OnlyOffice Document Server\ndocker run -d --name onlyoffice \\\n  -p 8080:80 \\\n  -v onlyoffice_data:/var/www/onlyoffice/Data \\\n  -v onlyoffice_log:/var/log/onlyoffice \\\n  -v onlyoffice_fonts:/usr/share/fonts/truetype/custom \\\n  -v onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/files/forgotten \\\n  onlyoffice/documentserver\n\n# Configure Nextcloud to use OnlyOffice\nsudo -u www-data php occ config:app:set richdocuments wopi_url --value=\"http://localhost:8080\"\n```\n\n## Backup and Maintenance\n\n### Backup Script\n```bash\nsudo tee /usr/local/bin/nextcloud-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/nextcloud\"\nNC_DIR=\"/var/www/html/nextcloud\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Enable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --on\n\n# Backup files (exclude data directory for space)\ntar --exclude=\"${NC_DIR}/data\" -czf ${BACKUP_DIR}/files/nextcloud-files-${DATE}.tar.gz -C /var/www/html nextcloud\n\n# Backup database\nmysqldump -u nextclouduser -p'secure_password' nextcloud > ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\n\n# Backup data directory separately (if needed)\n# tar -czf ${BACKUP_DIR}/files/nextcloud-data-${DATE}.tar.gz -C ${NC_DIR} data\n\n# Disable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --off\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"nextcloud-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: nextcloud-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/nextcloud-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Update and Maintenance\n```bash\n# Create update script\nsudo tee /usr/local/bin/nextcloud-update.sh > /dev/null <<'EOF'\n#!/bin/bash\nNC_DIR=\"/var/www/html/nextcloud\"\n\n# Check for updates\nsudo -u www-data php ${NC_DIR}/occ update:check\n\n# Run updater\nsudo -u www-data php ${NC_DIR}/updater/updater.phar\n\n# Update apps\nsudo -u www-data php ${NC_DIR}/occ app:update --all\n\n# Run database upgrades\nsudo -u www-data php ${NC_DIR}/occ upgrade\n\n# Scan files\nsudo -u www-data php ${NC_DIR}/occ files:scan --all\n\n# Clean up\nsudo -u www-data php ${NC_DIR}/occ files:cleanup\nsudo -u www-data php ${NC_DIR}/occ trashbin:cleanup --all-users\n\necho \"Nextcloud update completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-update.sh\n```\n\n## Verification\n\n```bash\n# Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Test Nextcloud installation\ncurl -I http://localhost/nextcloud\ncurl -I https://nextcloud.example.com\n\n# Check Nextcloud status via occ\ncd /var/www/html/nextcloud\nsudo -u www-data php occ status\nsudo -u www-data php occ check\n\n# Check background jobs\nsudo -u www-data php occ background:job:list\n\n# Check database connectivity\nsudo -u www-data php occ db:check\n\n# Check security status\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:attempts\n\n# Test file operations\nsudo -u www-data php occ files:scan admin\nsudo -u www-data php occ files:scan --all\n\n# Check logs\nsudo tail -f /var/www/html/nextcloud/data/nextcloud.log\nsudo tail -f /var/log/apache2/nextcloud_error.log\n```\n\n## Troubleshooting\n\n```bash\n# Enable debug mode\nsudo -u www-data php occ config:system:set debug --value=true --type=boolean\nsudo -u www-data php occ config:system:set loglevel --value=0\n\n# Check system requirements\nsudo -u www-data php occ check\n\n# Repair installation\nsudo -u www-data php occ maintenance:repair\n\n# Clear cache\nsudo -u www-data php occ files:cleanup\n\n# Fix file permissions\nsudo /usr/local/bin/nextcloud-permissions.sh\n\n# Database repair\nsudo -u www-data php occ db:check-and-repair\n\n# Update file cache\nsudo -u www-data php occ files:scan --all\n\n# Check configuration\nsudo -u www-data php occ config:list system\n\n# Reset user password\nsudo -u www-data php occ user:resetpassword admin\n\n# Check disk usage\ndu -sh /var/www/html/nextcloud/data/\ndf -h /var/www/html/nextcloud/\n\n# Memory usage check\nsudo -u www-data php occ status --output=json\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.nextcloud.com/)\n- [Admin Manual](https://docs.nextcloud.com/server/latest/admin_manual/)\n- [Security Hardening Guide](https://docs.nextcloud.com/server/latest/admin_manual/installation/harden_server.html)\n- [Performance Tuning](https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html)\n- [Community Forum](https://help.nextcloud.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"nextcloud-installation-guide\" class=\"mobile-header\">Nextcloud Installation Guide</h1>\n<p class=\"mobile-paragraph\">Self-hosted file sync and share platform with collaboration features, calendar, contacts, and extensive app ecosystem.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Web server (Apache or NGINX)</li>\n<li class=\"mobile-list-item\">PHP 8.0+ with required extensions</li>\n<li class=\"mobile-list-item\">Database (MySQL/MariaDB, PostgreSQL, or SQLite)</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"lamp-stack-setup-apache-mysql-php\" class=\"mobile-header\">LAMP Stack Setup (Apache + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# Enable services\nsudo systemctl enable --now apache2 mariadb  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb    # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup\" class=\"mobile-header\">Database Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create Nextcloud database\nsudo mysql -u root -p &lt;&lt;EOF\nCREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE USER &#039;nextclouduser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON nextcloud.* TO &#039;nextclouduser&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEXIT\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"nextcloud-download-and-setup\" class=\"mobile-header\">Nextcloud Download and Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Nextcloud\ncd /tmp\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2\ntar -xjf latest.tar.bz2\n\n# Move to web directory\nsudo cp -R nextcloud /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/nextcloud  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/nextcloud      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/nextcloud/ -type f -print0 | xargs -0 chmod 0640\nsudo find /var/www/html/nextcloud/ -type d -print0 | xargs -0 chmod 0750\nsudo chmod 750 /var/www/html/nextcloud\nsudo chmod -R 770 /var/www/html/nextcloud/data\nsudo chmod -R 770 /var/www/html/nextcloud/apps\nsudo chmod -R 770 /var/www/html/nextcloud/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create docker-compose.yml\nmkdir -p ~/nextcloud &amp;&amp; cd ~/nextcloud\n\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  nextcloud:\n    image: nextcloud:latest\n    restart: unless-stopped\n    ports:\n      - &quot;8080:80&quot;\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./config:/var/www/html/config\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./data:/var/www/html/data\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=secure_password\n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=admin_password\n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com\n    depends_on:\n      - db\n      - redis\n    networks:\n      - nextcloud\n\n  db:\n    image: mariadb:10.6\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - nextcloud\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - nextcloud\n\nvolumes:\n  nextcloud_data:\n  db_data:\n\nnetworks:\n  nextcloud:\n    driver: bridge\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f nextcloud</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"apache-virtual-host\" class=\"mobile-header\">Apache Virtual Host</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Apache virtual host\nsudo tee /etc/apache2/sites-available/nextcloud.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n    ServerName nextcloud.example.com\n    DocumentRoot /var/www/html/nextcloud\n\n    &lt;Directory /var/www/html/nextcloud/&gt;\n        Require all granted\n        AllowOverride All\n        Options FollowSymLinks MultiViews\n        \n        &lt;IfModule mod_dav.c&gt;\n            Dav off\n        &lt;/IfModule&gt;\n    &lt;/Directory&gt;\n\n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;no-referrer&quot;\n    Header always set Feature-Policy &quot;camera &#039;none&#039;; microphone &#039;none&#039;&quot;\n\n    ErrorLog \\${APACHE_LOG_DIR}/nextcloud_error.log\n    CustomLog \\${APACHE_LOG_DIR}/nextcloud_access.log combined\n&lt;/VirtualHost&gt;\nEOF\n\n# Enable required modules\nsudo a2enmod rewrite headers env dir mime ssl\nsudo a2ensite nextcloud.conf\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">NGINX Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX server block\nsudo tee /etc/nginx/sites-available/nextcloud &gt; /dev/null &lt;&lt;EOF\nupstream php-handler {\n    server unix:/var/run/php/php8.0-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name nextcloud.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/nextcloud.crt;\n    ssl_certificate_key /etc/ssl/private/nextcloud.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload&quot; always;\n    add_header Referrer-Policy &quot;no-referrer&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-Download-Options &quot;noopen&quot; always;\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-Permitted-Cross-Domain-Policies &quot;none&quot; always;\n    add_header X-Robots-Tag &quot;none&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n\n    # Remove X-Powered-By\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/html/nextcloud;\n    index index.php index.html /index.php\\$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( \\$http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/\\$is_args\\$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    location ^~ /.well-known {\n        location = /.well-known/carddav { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav  { return 301 /remote.php/dav/; }\n        location /.well-known/acme-challenge    { try_files \\$uri \\$uri/ =404; }\n        location /.well-known/pki-validation    { try_files \\$uri \\$uri/ =404; }\n        return 301 /index.php\\$request_uri;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths.\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\\$|/)  { return 404; }\n    location ~ ^/(?:\\\\.|autotest|occ|issue|indie|db_|console)                { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends\n    # `/index.php` to the URI, resulting in a HTTP 500 error response.\n    location ~ \\\\.php(?:\\$|/) {\n        # Required for legacy support\n        rewrite ^/(?!index|remote|public|cron|core\\\\/ajax\\\\/update|status|ocs\\\\/v[12]|updater\\\\/.+|oc[ms]-provider\\\\/.+|.+\\\\/richdocumentscode\\\\/proxy) /index.php\\$request_uri;\n\n        fastcgi_split_path_info ^(.+?\\\\.php)(/.*)\\$;\n        set \\$path_info \\$fastcgi_path_info;\n\n        try_files \\$fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \\$path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\\\.(?:css|js|svg|gif|png|jpg|ico)\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 6M;\n        access_log off;\n    }\n\n    location ~ \\\\.woff2?\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 7d;\n        access_log off;\n    }\n\n    # Rule borrowed from `.htaccess`\n    location /remote {\n        return 301 /remote.php\\$request_uri;\n    }\n\n    location / {\n        try_files \\$uri \\$uri/ /index.php\\$request_uri;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"php-configuration\" class=\"mobile-header\">PHP Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize PHP for Nextcloud\nsudo nano /etc/php/8.0/apache2/php.ini  # Apache\nsudo nano /etc/php/8.0/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\nupload_max_filesize = 16G\npost_max_size = 16G\nmax_execution_time = 3600\nmax_input_time = 3600\nmax_input_vars = 3000\ndate.timezone = &quot;America/New_York&quot;\n\n# OPcache settings\nopcache.enable = 1\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\n\n# APCu for local cache\napc.enable_cli = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php8.0-fpm  # NGINX</code></pre>\n      </div>\n    </div>\n<h3 id=\"command-line-installation\" class=\"mobile-header\">Command Line Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install via command line\ncd /var/www/html/nextcloud\nsudo -u www-data php occ maintenance:install \\\n  --database=&quot;mysql&quot; \\\n  --database-name=&quot;nextcloud&quot; \\\n  --database-user=&quot;nextclouduser&quot; \\\n  --database-pass=&quot;secure_password&quot; \\\n  --admin-user=&quot;admin&quot; \\\n  --admin-pass=&quot;admin_password&quot; \\\n  --data-dir=&quot;/var/www/html/nextcloud/data&quot;\n\n# Configure trusted domains\nsudo -u www-data php occ config:system:set trusted_domains 0 --value=nextcloud.example.com\nsudo -u www-data php occ config:system:set trusted_domains 1 --value=192.168.1.100\n\n# Configure caching\nsudo -u www-data php occ config:system:set memcache.local --value=&quot;\\\\OC\\\\Memcache\\\\APCu&quot;\nsudo -u www-data php occ config:system:set memcache.distributed --value=&quot;\\\\OC\\\\Memcache\\\\Redis&quot;\nsudo -u www-data php occ config:system:set redis host --value=&quot;localhost&quot;\nsudo -u www-data php occ config:system:set redis port --value=6379</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"redis-caching-setup\" class=\"mobile-header\">Redis Caching Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis\nsudo apt install -y redis-server  # Ubuntu/Debian\nsudo yum install -y redis          # RHEL/CentOS\n\nsudo systemctl enable --now redis\n\n# Configure Redis for Nextcloud\nsudo tee -a /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\nEOF\n\nsudo systemctl restart redis\n\n# Install Redis PHP extension\nsudo apt install -y php-redis  # Ubuntu/Debian\nsudo yum install -y php-redis   # RHEL/CentOS\n\n# Configure Nextcloud to use Redis\nsudo -u www-data php occ config:system:set memcache.local --value=&quot;\\\\OC\\\\Memcache\\\\APCu&quot;\nsudo -u www-data php occ config:system:set memcache.distributed --value=&quot;\\\\OC\\\\Memcache\\\\Redis&quot;\nsudo -u www-data php occ config:system:set redis host --value=&quot;localhost&quot;\nsudo -u www-data php occ config:system:set redis port --value=6379</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB optimization for Nextcloud\nsudo tee -a /etc/mysql/mysql.conf.d/nextcloud.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\ninnodb_buffer_pool_size = 1G\ninnodb_io_capacity = 4000\ninnodb_log_file_size = 128M\ninnodb_log_buffer_size = 32M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\n\nquery_cache_type = 1\nquery_cache_limit = 2M\nquery_cache_size = 64M\n\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\njoin_buffer_size = 262144\nsort_buffer_size = 262144\n\nmax_connections = 100\nmax_connect_errors = 10\nconnect_timeout = 5\nwait_timeout = 600\nmax_allowed_packet = 64M\n\nthread_cache_size = 128\nquery_cache_size = 64M\n\n[mysql.server]\ndefault-table-type = innodb\nEOF\n\nsudo systemctl restart mysql\n\n# Add indexes for better performance\nmysql -u nextclouduser -p nextcloud &lt;&lt;EOF\nALTER TABLE oc_jobs ADD INDEX jobs_class_index (class);\nALTER TABLE oc_filecache ADD INDEX fs_mtime (mtime);\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"background-jobs\" class=\"mobile-header\">Background Jobs</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure cron for background jobs\nsudo crontab -u www-data -e\n# Add: */5 * * * * php /var/www/html/nextcloud/occ system:cron\n\n# Or configure via occ command\nsudo -u www-data php occ background:cron\n\n# Check background job status\nsudo -u www-data php occ status\nsudo -u www-data php occ background:job:list</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"file-permissions-and-security\" class=\"mobile-header\">File Permissions and Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure file permissions script\nsudo tee /usr/local/bin/nextcloud-permissions.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nncpath=&#039;/var/www/html/nextcloud&#039;\nhtuser=&#039;www-data&#039;\nhtgroup=&#039;www-data&#039;\nrootuser=&#039;root&#039;\n\nprintf &quot;Creating possible missing Directories\\n&quot;\nmkdir -p $ncpath/data\nmkdir -p $ncpath/assets\nmkdir -p $ncpath/updater\n\nprintf &quot;chmod Files and Directories\\n&quot;\nfind ${ncpath}/ -type f -print0 | xargs -0 chmod 0640\nfind ${ncpath}/ -type d -print0 | xargs -0 chmod 0750\n\nprintf &quot;chown Directories\\n&quot;\nchown -R ${rootuser}:${htgroup} ${ncpath}/\nchown -R ${htuser}:${htgroup} ${ncpath}/apps/\nchown -R ${htuser}:${htgroup} ${ncpath}/assets/\nchown -R ${htuser}:${htgroup} ${ncpath}/config/\nchown -R ${htuser}:${htgroup} ${ncpath}/data/\nchown -R ${htuser}:${htgroup} ${ncpath}/themes/\nchown -R ${htuser}:${htgroup} ${ncpath}/updater/\n\nchmod +x ${ncpath}/occ\n\nprintf &quot;chmod/chown .htaccess\\n&quot;\nif [ -f ${ncpath}/.htaccess ]; then\n    chmod 0644 ${ncpath}/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/.htaccess\nfi\n\nif [ -f ${ncpath}/data/.htaccess ]; then\n    chmod 0644 ${ncpath}/data/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/data/.htaccess\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-permissions.sh\nsudo /usr/local/bin/nextcloud-permissions.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Let&#039;s Encrypt certificate\nsudo apt install -y certbot python3-certbot-apache  # Apache\nsudo apt install -y certbot python3-certbot-nginx   # NGINX\n\n# Obtain certificate\nsudo certbot --apache -d nextcloud.example.com  # Apache\nsudo certbot --nginx -d nextcloud.example.com   # NGINX\n\n# Configure HTTPS redirect in Nextcloud\nsudo -u www-data php occ config:system:set overwrite.cli.url --value=&quot;https://nextcloud.example.com&quot;\nsudo -u www-data php occ config:system:set overwriteprotocol --value=&quot;https&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-scan-and-hardening\" class=\"mobile-header\">Security Scan and Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run Nextcloud security scan\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:reset admin\n\n# Configure rate limiting\nsudo -u www-data php occ config:app:set brute_force_protection delay_increment --value=10\nsudo -u www-data php occ config:app:set brute_force_protection fail_tolerance --value=3\n\n# Enable two-factor authentication\nsudo -u www-data php occ app:enable twofactor_totp\nsudo -u www-data php occ app:enable twofactor_u2f\n\n# Configure file access control\nsudo -u www-data php occ config:system:set default_file_access --value=&quot;restrict&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"app-management\" class=\"mobile-header\">App Management</h2>\n<h3 id=\"essential-apps-installation\" class=\"mobile-header\">Essential Apps Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install popular apps via occ\nsudo -u www-data php occ app:install calendar\nsudo -u www-data php occ app:install contacts\nsudo -u www-data php occ app:install mail\nsudo -u www-data php occ app:install notes\nsudo -u www-data php occ app:install tasks\nsudo -u www-data php occ app:install deck\nsudo -u www-data php occ app:install polls\nsudo -u www-data php occ app:install richdocuments  # OnlyOffice integration\n\n# Enable apps\nsudo -u www-data php occ app:enable calendar\nsudo -u www-data php occ app:enable contacts\nsudo -u www-data php occ app:enable mail\n\n# List available apps\nsudo -u www-data php occ app:list\n\n# Update apps\nsudo -u www-data php occ app:update --all</code></pre>\n      </div>\n    </div>\n<h3 id=\"onlyoffice-integration\" class=\"mobile-header\">OnlyOffice Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install OnlyOffice Document Server\ndocker run -d --name onlyoffice \\\n  -p 8080:80 \\\n  -v onlyoffice_data:/var/www/onlyoffice/Data \\\n  -v onlyoffice_log:/var/log/onlyoffice \\\n  -v onlyoffice_fonts:/usr/share/fonts/truetype/custom \\\n  -v onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/files/forgotten \\\n  onlyoffice/documentserver\n\n# Configure Nextcloud to use OnlyOffice\nsudo -u www-data php occ config:app:set richdocuments wopi_url --value=&quot;http://localhost:8080&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/nextcloud-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/nextcloud&quot;\nNC_DIR=&quot;/var/www/html/nextcloud&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Enable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --on\n\n# Backup files (exclude data directory for space)\ntar --exclude=&quot;${NC_DIR}/data&quot; -czf ${BACKUP_DIR}/files/nextcloud-files-${DATE}.tar.gz -C /var/www/html nextcloud\n\n# Backup database\nmysqldump -u nextclouduser -p&#039;secure_password&#039; nextcloud &gt; ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\n\n# Backup data directory separately (if needed)\n# tar -czf ${BACKUP_DIR}/files/nextcloud-data-${DATE}.tar.gz -C ${NC_DIR} data\n\n# Disable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --off\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;nextcloud-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: nextcloud-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/nextcloud-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"update-and-maintenance\" class=\"mobile-header\">Update and Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create update script\nsudo tee /usr/local/bin/nextcloud-update.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nNC_DIR=&quot;/var/www/html/nextcloud&quot;\n\n# Check for updates\nsudo -u www-data php ${NC_DIR}/occ update:check\n\n# Run updater\nsudo -u www-data php ${NC_DIR}/updater/updater.phar\n\n# Update apps\nsudo -u www-data php ${NC_DIR}/occ app:update --all\n\n# Run database upgrades\nsudo -u www-data php ${NC_DIR}/occ upgrade\n\n# Scan files\nsudo -u www-data php ${NC_DIR}/occ files:scan --all\n\n# Clean up\nsudo -u www-data php ${NC_DIR}/occ files:cleanup\nsudo -u www-data php ${NC_DIR}/occ trashbin:cleanup --all-users\n\necho &quot;Nextcloud update completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-update.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Test Nextcloud installation\ncurl -I http://localhost/nextcloud\ncurl -I https://nextcloud.example.com\n\n# Check Nextcloud status via occ\ncd /var/www/html/nextcloud\nsudo -u www-data php occ status\nsudo -u www-data php occ check\n\n# Check background jobs\nsudo -u www-data php occ background:job:list\n\n# Check database connectivity\nsudo -u www-data php occ db:check\n\n# Check security status\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:attempts\n\n# Test file operations\nsudo -u www-data php occ files:scan admin\nsudo -u www-data php occ files:scan --all\n\n# Check logs\nsudo tail -f /var/www/html/nextcloud/data/nextcloud.log\nsudo tail -f /var/log/apache2/nextcloud_error.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug mode\nsudo -u www-data php occ config:system:set debug --value=true --type=boolean\nsudo -u www-data php occ config:system:set loglevel --value=0\n\n# Check system requirements\nsudo -u www-data php occ check\n\n# Repair installation\nsudo -u www-data php occ maintenance:repair\n\n# Clear cache\nsudo -u www-data php occ files:cleanup\n\n# Fix file permissions\nsudo /usr/local/bin/nextcloud-permissions.sh\n\n# Database repair\nsudo -u www-data php occ db:check-and-repair\n\n# Update file cache\nsudo -u www-data php occ files:scan --all\n\n# Check configuration\nsudo -u www-data php occ config:list system\n\n# Reset user password\nsudo -u www-data php occ user:resetpassword admin\n\n# Check disk usage\ndu -sh /var/www/html/nextcloud/data/\ndf -h /var/www/html/nextcloud/\n\n# Memory usage check\nsudo -u www-data php occ status --output=json</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Admin Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/installation/harden_server.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Hardening Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://help.nextcloud.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2269,"lastBuilt":"2025-09-14T06:13:17.791Z"},{"name":"wordpress","displayName":"Wordpress","slug":"wordpress","description":"Repo for wordpress","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wordpress","updatedAt":"2025-09-14T01:31:24Z","createdAt":"2025-09-08T03:18:29Z","readmeRaw":"# WordPress Installation Guide\n\nWorld's most popular content management system (CMS) powering over 40% of websites globally. Complete guide for secure, high-performance WordPress deployment with modern stack configurations.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- 2GB RAM minimum, 4GB+ recommended for production\n- Web server (NGINX recommended, Apache supported)\n- PHP 8.1+ (8.2+ recommended)\n- MySQL 8.0+ or MariaDB 10.6+ \n- SSL certificate for HTTPS\n- Domain name for production deployment\n\n## Installation Methods\n\n### LEMP Stack (Recommended for 2024)\n\n#### Ubuntu/Debian LEMP Setup\n```bash\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install NGINX\nsudo apt install -y nginx\n\n# Install MySQL/MariaDB\nsudo apt install -y mariadb-server mariadb-client\n\n# Install PHP 8.2 and essential extensions\nsudo apt install -y php8.2-fpm php8.2-mysql php8.2-curl php8.2-gd php8.2-mbstring php8.2-xml php8.2-xmlrpc php8.2-soap php8.2-intl php8.2-zip php8.2-bcmath php8.2-imagick php8.2-cli php8.2-dev php8.2-imap php8.2-opcache\n\n# Install additional performance tools\nsudo apt install -y redis-server memcached unzip curl wget\n\n# Enable and start services\nsudo systemctl enable --now nginx mariadb php8.2-fpm redis-server\n\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo ufw allow 'Nginx Full'\nsudo ufw allow OpenSSH\nsudo ufw enable\n```\n\n#### RHEL/CentOS/Rocky Linux LEMP Setup\n```bash\n# Install EPEL and Remi repositories\nsudo yum install -y epel-release\nsudo yum install -y https://rpms.remirepo.net/enterprise/remi-release-9.rpm\n\n# Enable PHP 8.2 repository\nsudo yum-config-manager --enable remi-php82\n\n# Install NGINX\nsudo yum install -y nginx\n\n# Install MariaDB\nsudo yum install -y mariadb-server mariadb\n\n# Install PHP and extensions\nsudo yum install -y php php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip php-bcmath php-imagick php-opcache php-redis\n\n# Install Redis\nsudo yum install -y redis\n\n# Enable and start services\nsudo systemctl enable --now nginx mariadb php-fpm redis\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# Secure MySQL\nsudo mysql_secure_installation\n```\n\n#### Fedora LEMP Setup\n```bash\n# Install NGINX, MariaDB, PHP, and Redis\nsudo dnf install -y nginx mariadb-server mariadb php php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip php-opcache php-redis redis\n\n# Enable and start services\nsudo systemctl enable --now nginx mariadb php-fpm redis\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# Secure MySQL\nsudo mysql_secure_installation\n```\n\n### LAMP Stack (Alternative)\n\n#### Ubuntu/Debian LAMP Setup\n```bash\n# Install Apache, MySQL, PHP\nsudo apt update\nsudo apt install -y apache2 mariadb-server php8.2 php8.2-mysql php8.2-curl php8.2-gd php8.2-mbstring php8.2-xml php8.2-xmlrpc php8.2-soap php8.2-intl php8.2-zip php8.2-opcache libapache2-mod-php8.2\n\n# Enable Apache modules\nsudo a2enmod rewrite ssl headers deflate expires\n\n# Enable and start services\nsudo systemctl enable --now apache2 mariadb\n\n# Configure firewall\nsudo ufw allow 'Apache Full'\nsudo ufw enable\n\n# Secure MySQL\nsudo mysql_secure_installation\n```\n\n### Database Setup (Universal)\n```bash\n# Create WordPress database and user\nsudo mysql -u root -p <<EOF\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'wpuser'@'localhost' IDENTIFIED BY 'secure_wp_password_2024';\nGRANT ALL PRIVILEGES ON wordpress.* TO 'wpuser'@'localhost';\nFLUSH PRIVILEGES;\n\n-- Optimize MySQL for WordPress\nSET GLOBAL innodb_buffer_pool_size = 1073741824;  -- 1GB\nSET GLOBAL query_cache_size = 67108864;           -- 64MB\nSET GLOBAL query_cache_limit = 2097152;           -- 2MB\nEXIT\nEOF\n\n# Apply permanent MySQL optimizations\nsudo tee /etc/mysql/mysql.conf.d/wordpress.cnf > /dev/null <<EOF\n[mysqld]\n# WordPress optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\n\n# Query cache\nquery_cache_type = 1\nquery_cache_size = 64M\nquery_cache_limit = 2M\n\n# Connection optimization\nmax_connections = 200\nthread_cache_size = 100\ntable_open_cache = 4096\ntmp_table_size = 32M\nmax_heap_table_size = 32M\n\n# Slow query log\nslow_query_log = 1\nlong_query_time = 2\nslow_query_log_file = /var/log/mysql/slow.log\nEOF\n\nsudo systemctl restart mariadb\n```\n\n## WordPress Installation\n\n### Download and Setup WordPress\n```bash\n# Download latest WordPress\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar xzf latest.tar.gz\n\n# Create web directory and copy files\nsudo mkdir -p /var/www/html/example.com\nsudo cp -R /tmp/wordpress/* /var/www/html/example.com/\n\n# Set proper ownership and permissions\n# For NGINX (Ubuntu/Debian)\nsudo chown -R www-data:www-data /var/www/html/example.com\n# For NGINX (RHEL/CentOS)\nsudo chown -R nginx:nginx /var/www/html/example.com\n# For Apache\nsudo chown -R www-data:www-data /var/www/html/example.com  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/example.com      # RHEL/CentOS\n\n# Secure file permissions\nsudo find /var/www/html/example.com/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/example.com/ -type f -exec chmod 644 {} \\;\nsudo chmod 600 /var/www/html/example.com/wp-config.php\n\n# Create uploads directory with proper permissions\nsudo mkdir -p /var/www/html/example.com/wp-content/uploads\nsudo chmod 775 /var/www/html/example.com/wp-content/uploads\n```\n\n### Secure WordPress Configuration\n```bash\n# Create secure wp-config.php\ncd /var/www/html/example.com\nsudo cp wp-config-sample.php wp-config.php\n\n# Generate security keys\nSALT_KEYS=$(curl -s https://api.wordpress.org/secret-key/1.1/salt/)\n\n# Create wp-config.php with security hardening\nsudo tee wp-config.php > /dev/null <<EOF\n<?php\n/**\n * WordPress Configuration File - Security Hardened\n */\n\n// ** Database settings ** //\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wpuser');\ndefine('DB_PASSWORD', 'secure_wp_password_2024');\ndefine('DB_HOST', '127.0.0.1');  // Use 127.0.0.1 instead of localhost\ndefine('DB_CHARSET', 'utf8mb4');\ndefine('DB_COLLATE', '');\n\n// ** Authentication Unique Keys and Salts ** //\n${SALT_KEYS}\n\n// ** WordPress Database Table prefix ** //\n\\$table_prefix = 'wp_secure_';\n\n// ** Security hardening ** //\ndefine('WP_DEBUG', false);\ndefine('WP_DEBUG_LOG', false);\ndefine('WP_DEBUG_DISPLAY', false);\n\n// Disable file editing\ndefine('DISALLOW_FILE_EDIT', true);\ndefine('DISALLOW_FILE_MODS', true);\n\n// Force SSL\ndefine('FORCE_SSL_ADMIN', true);\n\n// Automatic updates\ndefine('WP_AUTO_UPDATE_CORE', 'minor');\ndefine('AUTOMATIC_UPDATER_DISABLED', false);\n\n// Memory limit\ndefine('WP_MEMORY_LIMIT', '512M');\n\n// Multisite (if needed)\n// define('WP_ALLOW_MULTISITE', true);\n\n// Custom content directory (optional)\ndefine('WP_CONTENT_DIR', '/var/www/html/example.com/wp-content');\ndefine('WP_CONTENT_URL', 'https://example.com/wp-content');\n\n// Database repair\ndefine('WP_ALLOW_REPAIR', false);\n\n// Cron optimization\ndefine('DISABLE_WP_CRON', true);  // Use system cron instead\n\n// Security headers\ndefine('COOKIE_DOMAIN', '.example.com');\ndefine('COOKIEHASH', md5('example.com'));\n\n// File permissions\ndefine('FS_CHMOD_DIR', (0755 & ~ umask()));\ndefine('FS_CHMOD_FILE', (0644 & ~ umask()));\n\n// Redis cache configuration\ndefine('WP_REDIS_HOST', '127.0.0.1');\ndefine('WP_REDIS_PORT', 6379);\ndefine('WP_REDIS_DATABASE', 0);\ndefine('WP_REDIS_TIMEOUT', 1);\ndefine('WP_REDIS_READ_TIMEOUT', 1);\n\n// Rate limiting\ndefine('WP_POST_REVISIONS', 5);\ndefine('AUTOSAVE_INTERVAL', 300);  // 5 minutes\ndefine('EMPTY_TRASH_DAYS', 7);\n\n/* That's all, stop editing! */\nif (!defined('ABSPATH')) {\n    define('ABSPATH', dirname(__FILE__) . '/');\n}\n\nrequire_once ABSPATH . 'wp-settings.php';\nEOF\n\nsudo chown www-data:www-data wp-config.php  # Adjust user as needed\nsudo chmod 600 wp-config.php\n```\n\n## Web Server Configuration\n\n### NGINX Configuration (Recommended)\n```bash\n# Create optimized NGINX configuration for WordPress\nsudo tee /etc/nginx/sites-available/wordpress.conf > /dev/null <<EOF\n# WordPress NGINX Configuration - 2024 Security Hardened\n\n# Rate limiting\nlimit_req_zone \\$binary_remote_addr zone=wp_login:10m rate=1r/s;\nlimit_req_zone \\$binary_remote_addr zone=wp_admin:10m rate=5r/m;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    return 301 https://example.com\\$request_uri;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n    root /var/www/html/example.com;\n    index index.php index.html index.htm;\n\n    # SSL Configuration (2024 best practices)\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n    \n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n\n    # Security headers (2024 standards)\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.googleapis.com *.gstatic.com; style-src 'self' 'unsafe-inline' *.googleapis.com; img-src 'self' data: https:; font-src 'self' data: *.gstatic.com; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; form-action 'self'; base-uri 'self';\" always;\n    add_header Permissions-Policy \"camera=(), microphone=(), geolocation=()\" always;\n\n    # Hide server information\n    server_tokens off;\n    more_set_headers \"Server: \";\n\n    # Upload size limits\n    client_max_body_size 64M;\n\n    # FastCGI caching\n    set \\$skip_cache 0;\n    if (\\$request_method = POST) { set \\$skip_cache 1; }\n    if (\\$query_string != \"\") { set \\$skip_cache 1; }\n    if (\\$request_uri ~* \"/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml\") { set \\$skip_cache 1; }\n    if (\\$http_cookie ~* \"comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in\") { set \\$skip_cache 1; }\n\n    # Main location block\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    # WordPress-specific security rules\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n\n    # Protect wp-config.php\n    location ~* wp-config\\.php {\n        deny all;\n    }\n\n    # Disable execution of PHP in uploads\n    location ~* /(?:uploads|files)/.*\\.php\\$ {\n        deny all;\n    }\n\n    # Block access to sensitive files\n    location ~* \\.(htaccess|htpasswd|ini|log|sh|sql|conf|bak|backup|swp|tmp)\\$ {\n        deny all;\n    }\n\n    # WordPress: deny wp-content, wp-includes php files\n    location ~* ^/(wp-content|wp-includes)/.*\\.php\\$ {\n        deny all;\n    }\n\n    # WordPress: deny general stuff\n    location ~* ^/(readme|license|example|README|INSTALL|CHANGELOG)\\.(txt|md)\\$ {\n        deny all;\n    }\n\n    # Block WordPress brute force attacks\n    location ~* /(wp-login\\.php|wp-admin/).*\\$ {\n        limit_req zone=wp_login burst=1 nodelay;\n        limit_req zone=wp_admin burst=5 nodelay;\n        \n        # IP whitelist for admin (replace with your IPs)\n        # allow 192.168.1.100;\n        # allow 10.0.0.0/8;\n        # deny all;\n        \n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n    }\n\n    # PHP processing with caching\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n        \n        # FastCGI caching\n        fastcgi_cache_bypass \\$skip_cache;\n        fastcgi_no_cache \\$skip_cache;\n        fastcgi_cache WORDPRESS;\n        fastcgi_cache_valid 60m;\n        \n        # Security\n        fastcgi_hide_header X-Powered-By;\n    }\n\n    # Static assets optimization\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)\\$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        add_header Vary \"Accept-Encoding\";\n        access_log off;\n        \n        # CORS for fonts\n        location ~* \\.(woff|woff2|ttf|eot)\\$ {\n            add_header Access-Control-Allow-Origin *;\n        }\n    }\n\n    # XML files (sitemaps, feeds)\n    location ~* \\.(xml|txt)\\$ {\n        expires 1h;\n        add_header Cache-Control \"public\";\n    }\n\n    # Block xmlrpc.php\n    location = /xmlrpc.php {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n\n    # WordPress REST API rate limiting\n    location ~* /wp-json/ {\n        limit_req zone=wp_admin burst=10 nodelay;\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    # Favicon and robots.txt\n    location = /favicon.ico {\n        log_not_found off;\n        access_log off;\n        expires 1y;\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n        expires 1h;\n    }\n\n    # Security.txt\n    location = /.well-known/security.txt {\n        return 301 \\$scheme://\\$server_name/.well-known/security.txt;\n    }\n}\n\n# WWW to non-WWW redirect\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name www.example.com;\n    \n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    \n    return 301 https://example.com\\$request_uri;\n}\nEOF\n\n# Create FastCGI cache directory\nsudo mkdir -p /var/cache/nginx/wordpress\nsudo chown -R www-data:www-data /var/cache/nginx\n\n# Add FastCGI cache configuration\nsudo tee /etc/nginx/conf.d/fastcgi-cache.conf > /dev/null <<EOF\n# FastCGI cache configuration for WordPress\nfastcgi_cache_path /var/cache/nginx/wordpress levels=1:2 keys_zone=WORDPRESS:100m inactive=60m;\nfastcgi_cache_key \"\\$scheme\\$request_method\\$host\\$request_uri\";\nfastcgi_cache_use_stale error timeout invalid_header http_500;\nfastcgi_ignore_headers Cache-Control Expires Set-Cookie;\nEOF\n\n# Enable site and restart NGINX\nsudo ln -s /etc/nginx/sites-available/wordpress.conf /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### Apache Configuration (Alternative)\n```bash\n# Create secure Apache virtual host\nsudo tee /etc/apache2/sites-available/wordpress.conf > /dev/null <<EOF\n<VirtualHost *:80>\n    ServerName example.com\n    ServerAlias www.example.com\n    Redirect permanent / https://example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/html/example.com\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\n    SSLHonorCipherOrder off\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-Content-Type-Options \"nosniff\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n    \n    # Hide server information\n    Header always unset Server\n    Header always unset X-Powered-By\n\n    <Directory /var/www/html/example.com>\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # WordPress security\n        <Files wp-config.php>\n            Require all denied\n        </Files>\n        \n        <Files .htaccess>\n            Require all denied\n        </Files>\n        \n        <Files readme.html>\n            Require all denied\n        </Files>\n        \n        <Files license.txt>\n            Require all denied\n        </Files>\n    </Directory>\n\n    # Disable execution in uploads\n    <Directory /var/www/html/example.com/wp-content/uploads>\n        <Files \"*.php\">\n            Require all denied\n        </Files>\n    </Directory>\n\n    # Rate limiting with mod_evasive\n    <IfModule mod_evasive24.c>\n        DOSHashTableSize    1024\n        DOSPageCount        2\n        DOSSiteCount        50\n        DOSPageInterval     1\n        DOSSiteInterval     1\n        DOSBlockingPeriod   600\n        DOSEmailNotify      admin@example.com\n    </IfModule>\n\n    # Compression\n    <IfModule mod_deflate.c>\n        SetOutputFilter DEFLATE\n        AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain application/javascript application/xml+rss application/xml application/x-javascript application/json\n        \n        # Don't compress images\n        SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary\n    </IfModule>\n\n    # Caching\n    <IfModule mod_expires.c>\n        ExpiresActive On\n        ExpiresByType image/jpg \"access plus 1 year\"\n        ExpiresByType image/jpeg \"access plus 1 year\"\n        ExpiresByType image/gif \"access plus 1 year\"\n        ExpiresByType image/png \"access plus 1 year\"\n        ExpiresByType image/webp \"access plus 1 year\"\n        ExpiresByType text/css \"access plus 1 month\"\n        ExpiresByType application/pdf \"access plus 1 month\"\n        ExpiresByType text/javascript \"access plus 1 month\"\n        ExpiresByType application/javascript \"access plus 1 month\"\n        ExpiresDefault \"access plus 1 week\"\n    </IfModule>\n\n    ErrorLog \\${APACHE_LOG_DIR}/wordpress_error.log\n    CustomLog \\${APACHE_LOG_DIR}/wordpress_access.log combined\n</VirtualHost>\nEOF\n\n# Enable modules and site\nsudo a2enmod ssl headers expires deflate rewrite\nsudo a2ensite wordpress.conf\nsudo a2dissite 000-default\nsudo systemctl restart apache2\n```\n\n## PHP Configuration and Optimization\n\n### PHP 8.2 Optimization\n```bash\n# Configure PHP-FPM for optimal WordPress performance\nsudo tee /etc/php/8.2/fpm/pool.d/wordpress.conf > /dev/null <<EOF\n[wordpress]\nuser = www-data\ngroup = www-data\nlisten = /var/run/php/php8.2-fpm-wordpress.sock\nlisten.owner = www-data\nlisten.group = www-data\nlisten.mode = 0660\n\n# Process management\npm = dynamic\npm.max_children = 50\npm.start_servers = 5\npm.min_spare_servers = 5\npm.max_spare_servers = 35\npm.max_requests = 1000\npm.process_idle_timeout = 10s\n\n# Resource limits\nphp_admin_value[memory_limit] = 512M\nphp_admin_value[upload_max_filesize] = 64M\nphp_admin_value[post_max_size] = 64M\nphp_admin_value[max_execution_time] = 300\nphp_admin_value[max_input_time] = 300\nphp_admin_value[max_input_vars] = 3000\n\n# Security settings\nphp_admin_flag[allow_url_fopen] = off\nphp_admin_flag[allow_url_include] = off\nphp_admin_flag[file_uploads] = on\nphp_admin_flag[expose_php] = off\nphp_admin_flag[log_errors] = on\nphp_admin_value[error_log] = /var/log/php/wordpress-error.log\n\n# OPcache settings\nphp_admin_flag[opcache.enable] = on\nphp_admin_value[opcache.memory_consumption] = 256\nphp_admin_value[opcache.interned_strings_buffer] = 16\nphp_admin_value[opcache.max_accelerated_files] = 10000\nphp_admin_value[opcache.revalidate_freq] = 2\nphp_admin_flag[opcache.save_comments] = on\nphp_admin_flag[opcache.fast_shutdown] = on\n\n# Session settings\nphp_admin_value[session.save_handler] = redis\nphp_admin_value[session.save_path] = \"tcp://127.0.0.1:6379\"\nphp_admin_value[session.gc_maxlifetime] = 1440\nEOF\n\n# Create PHP error log directory\nsudo mkdir -p /var/log/php\nsudo chown www-data:www-data /var/log/php\n\n# Configure main PHP settings\nsudo tee -a /etc/php/8.2/fpm/php.ini > /dev/null <<EOF\n\n; WordPress optimizations\nmax_execution_time = 300\nmax_input_time = 300\nmemory_limit = 512M\nupload_max_filesize = 64M\npost_max_size = 64M\nmax_input_vars = 3000\n\n; Security\nexpose_php = Off\nallow_url_fopen = Off\nallow_url_include = Off\ndisplay_errors = Off\nlog_errors = On\nerror_log = /var/log/php/error.log\n\n; Session security\nsession.cookie_httponly = On\nsession.cookie_secure = On\nsession.use_strict_mode = On\n\n; OPcache\nopcache.enable = 1\nopcache.memory_consumption = 256\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.revalidate_freq = 2\nopcache.save_comments = 1\nopcache.fast_shutdown = 1\nopcache.validate_timestamps = 0  ; Production only\n\n; Redis\nextension = redis\n\n; Date/time\ndate.timezone = \"America/New_York\"\nEOF\n\nsudo systemctl restart php8.2-fpm\n```\n\n### Redis Object Caching Setup\n```bash\n# Configure Redis for WordPress\nsudo tee -a /etc/redis/redis.conf > /dev/null <<EOF\n\n# WordPress optimizations\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# Security\nbind 127.0.0.1\nprotected-mode yes\nport 6379\ntcp-backlog 511\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\n\n# Persistence\nrdbcompression yes\nrdbchecksum yes\nEOF\n\nsudo systemctl restart redis-server\n```\n\n## WordPress CLI (WP-CLI) Installation and Configuration\n\n### WP-CLI Setup\n```bash\n# Download and install WP-CLI\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Create WP-CLI configuration\nsudo tee /var/www/html/example.com/wp-cli.yml > /dev/null <<EOF\n# WP-CLI configuration\npath: /var/www/html/example.com\n\ncore config:\n  dbhost: 127.0.0.1\n  dbname: wordpress\n  dbuser: wpuser\n  dbpass: secure_wp_password_2024\n  extra-php: |\n    define('WP_DEBUG', false);\n    define('WP_DEBUG_LOG', false);\n    define('DISALLOW_FILE_EDIT', true);\n    define('FORCE_SSL_ADMIN', true);\n    define('WP_REDIS_HOST', '127.0.0.1');\n\nserver:\n  docroot: /var/www/html/example.com\nEOF\n\n# Install WordPress via WP-CLI\ncd /var/www/html/example.com\nsudo -u www-data wp core download --force\nsudo -u www-data wp config create \\\n  --dbname=wordpress \\\n  --dbuser=wpuser \\\n  --dbpass=secure_wp_password_2024 \\\n  --dbhost=127.0.0.1\n\nsudo -u www-data wp core install \\\n  --url=https://example.com \\\n  --title=\"Secure WordPress Site\" \\\n  --admin_user=admin \\\n  --admin_password=secure_admin_password_2024 \\\n  --admin_email=admin@example.com \\\n  --skip-email\n\n# Essential security plugins\nsudo -u www-data wp plugin install wordfence --activate\nsudo -u www-data wp plugin install redis-cache --activate\nsudo -u www-data wp plugin install wp-super-cache --activate\nsudo -u www-data wp plugin install updraftplus --activate\n\n# Performance plugins\nsudo -u www-data wp plugin install autoptimize --activate\nsudo -u www-data wp plugin install smush --activate\n\n# Enable Redis cache\nsudo -u www-data wp redis enable\n\n# Configure security settings\nsudo -u www-data wp config set FORCE_SSL_ADMIN true --raw\nsudo -u www-data wp config set DISALLOW_FILE_EDIT true --raw\nsudo -u www-data wp config set WP_AUTO_UPDATE_CORE minor --raw\n```\n\n## Security Hardening\n\n### File System Security\n```bash\n# Create secure file permissions script\nsudo tee /usr/local/bin/wordpress-permissions.sh > /dev/null <<'EOF'\n#!/bin/bash\nWP_PATH=\"/var/www/html/example.com\"\nWP_USER=\"www-data\"\nWP_GROUP=\"www-data\"\n\n# Set directory permissions\nfind ${WP_PATH}/ -type d -exec chmod 755 {} \\;\n\n# Set file permissions\nfind ${WP_PATH}/ -type f -exec chmod 644 {} \\;\n\n# Secure wp-config.php\nchmod 600 ${WP_PATH}/wp-config.php\n\n# Secure .htaccess\nif [ -f ${WP_PATH}/.htaccess ]; then\n    chmod 644 ${WP_PATH}/.htaccess\nfi\n\n# Set ownership\nchown -R ${WP_USER}:${WP_GROUP} ${WP_PATH}/\n\n# Secure directories\nchmod 755 ${WP_PATH}/wp-content/\nchmod 755 ${WP_PATH}/wp-content/themes/\nchmod 755 ${WP_PATH}/wp-content/plugins/\nchmod 775 ${WP_PATH}/wp-content/uploads/\n\n# Create .htaccess for uploads security (Apache)\ncat > ${WP_PATH}/wp-content/uploads/.htaccess <<EOL\n# Disable PHP execution in uploads directory\n<Files \"*.php\">\n    Order Deny,Allow\n    Deny from All\n</Files>\n\n# Disable directory browsing\nOptions -Indexes\n\n# Deny access to sensitive files\n<FilesMatch \"\\.(htaccess|htpasswd|ini|log|sh|inc|bak)$\">\n    Order Allow,Deny\n    Deny from all\n</FilesMatch>\nEOL\n\necho \"WordPress file permissions have been secured\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-permissions.sh\nsudo /usr/local/bin/wordpress-permissions.sh\n```\n\n### WordPress Security Configuration\n```bash\n# Create comprehensive .htaccess for security (Apache)\nsudo tee /var/www/html/example.com/.htaccess > /dev/null <<EOF\n# WordPress Security .htaccess - 2024\n\n# Block access to wp-config.php\n<Files wp-config.php>\n    Order Allow,Deny\n    Deny from All\n</Files>\n\n# Block access to readme.html, license.txt, etc.\n<FilesMatch \"^(readme\\.html|license\\.txt|wp-config\\.php|\\.htaccess|\\.htpasswd)\">\n    Order Allow,Deny\n    Deny from All\n</FilesMatch>\n\n# Prevent script injections\nOptions +FollowSymLinks\nRewriteEngine On\nRewriteCond %{QUERY_STRING} (<|%3C).*script.*(>|%3E) [NC,OR]\nRewriteCond %{QUERY_STRING} GLOBALS(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} _REQUEST(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} ^.*(\\[|\\]|\\(|\\)|<|>|Ãª|\"|;|\\?|\\*|\\$|=) [NC,OR]\nRewriteCond %{QUERY_STRING} (NULL|OUTFILE|LOAD_FILE) [OR]\nRewriteCond %{QUERY_STRING} (\\.{1,}/)+(motd|etc|bin) [NC,OR]\nRewriteCond %{QUERY_STRING} (localhost|loopback|127\\.0\\.0\\.1) [NC,OR]\nRewriteCond %{QUERY_STRING} (<|>|'|%0A|%0D|%27|%3C|%3E|%00) [NC,OR]\nRewriteCond %{QUERY_STRING} concat[^\\(]*\\( [NC,OR]\nRewriteCond %{QUERY_STRING} union([^s]*s)+elect [NC,OR]\nRewriteCond %{QUERY_STRING} union([^a]*a)+ll([^s]*s)+elect [NC,OR]\nRewriteCond %{QUERY_STRING} \\-[sdcr].*(allow_url_include|allow_url_fopen|safe_mode|disable_functions|auto_prepend_file) [NC,OR]\nRewriteCond %{QUERY_STRING} (;|<|>|'|\"|\\)|%0A|%0D|%22|%27|%3C|%3E|%00).*(/\\*|union|select|insert|drop|delete|update|cast|create|char|convert|alter|declare|or|;|\\)|script|\\<|\\>|\\&|\\|\\|) [NC]\nRewriteRule ^(.*)$ index.php [F,L]\n\n# Block XML-RPC\n<Files xmlrpc.php>\n    Order Allow,Deny\n    Deny from All\n</Files>\n\n# Limit login attempts\n<FilesMatch \"wp-login.php\">\n    Order Allow,Deny\n    Allow from all\n    # Add your IP for admin access\n    # Allow from 192.168.1.100\n</FilesMatch>\n\n# Disable directory browsing\nOptions -Indexes\n\n# Protect includes directory\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteRule ^wp-admin/includes/ - [F,L]\n    RewriteRule !^wp-includes/ - [S=3]\n    RewriteRule ^wp-includes/[^/]+\\.php$ - [F,L]\n    RewriteRule ^wp-includes/js/tinymce/langs/.+\\.php - [F,L]\n    RewriteRule ^wp-includes/theme-compat/ - [F,L]\n</IfModule>\n\n# WordPress SEO\nRewriteRule ^index\\.php$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /index.php [L]\n\n# Force HTTPS (if not using NGINX redirect)\n# RewriteCond %{HTTPS} !=on\n# RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n\n# Security headers (if mod_headers is enabled)\n<IfModule mod_headers.c>\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-Content-Type-Options \"nosniff\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n</IfModule>\nEOF\n\nsudo chown www-data:www-data /var/www/html/example.com/.htaccess\n```\n\n## Performance Optimization\n\n### Caching Strategy Implementation\n```bash\n# Install and configure Redis plugin\ncd /var/www/html/example.com\nsudo -u www-data wp plugin install redis-cache --activate\n\n# Configure Redis for WordPress\nsudo -u www-data wp config set WP_REDIS_HOST '127.0.0.1' --raw\nsudo -u www-data wp config set WP_REDIS_PORT 6379 --raw --type=integer\nsudo -u www-data wp config set WP_REDIS_DATABASE 0 --raw --type=integer\nsudo -u www-data wp config set WP_REDIS_TIMEOUT 1 --raw --type=integer\nsudo -u www-data wp config set WP_REDIS_READ_TIMEOUT 1 --raw --type=integer\n\n# Enable Redis object cache\nsudo -u www-data wp redis enable\n\n# Install and configure caching plugin\nsudo -u www-data wp plugin install w3-total-cache --activate\n\n# Configure W3 Total Cache via WP-CLI\nsudo -u www-data wp w3-total-cache option set pgcache.enabled true\nsudo -u www-data wp w3-total-cache option set dbcache.enabled true\nsudo -u www-data wp w3-total-cache option set objectcache.enabled true\nsudo -u www-data wp w3-total-cache option set browsercache.enabled true\n\n# Install performance optimization plugins\nsudo -u www-data wp plugin install autoptimize --activate\nsudo -u www-data wp plugin install smush --activate\nsudo -u www-data wp plugin install wp-rocket --activate  # Premium plugin\n```\n\n### Database Optimization\n```bash\n# Create database optimization script\nsudo tee /usr/local/bin/wordpress-db-optimize.sh > /dev/null <<'EOF'\n#!/bin/bash\nWP_PATH=\"/var/www/html/example.com\"\nLOG_FILE=\"/var/log/wordpress-optimization.log\"\n\ncd ${WP_PATH}\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG_FILE}\n}\n\nlog_message \"Starting WordPress database optimization...\"\n\n# Database cleanup\nsudo -u www-data wp transient delete --all --quiet\nsudo -u www-data wp db optimize --quiet\nsudo -u www-data wp db repair --quiet\n\n# Clean spam and trash\nsudo -u www-data wp comment delete $(sudo -u www-data wp comment list --status=spam --format=ids) --quiet\nsudo -u www-data wp post delete $(sudo -u www-data wp post list --post_status=trash --format=ids) --quiet\n\n# Optimize images\nif sudo -u www-data wp plugin is-installed smush; then\n    sudo -u www-data wp smush optimize --quiet\nfi\n\n# Clear caches\nif sudo -u www-data wp plugin is-installed w3-total-cache; then\n    sudo -u www-data wp w3-total-cache flush all --quiet\nfi\n\nif sudo -u www-data wp plugin is-installed wp-super-cache; then\n    sudo -u www-data wp super-cache flush --quiet\nfi\n\nif sudo -u www-data wp plugin is-installed redis-cache; then\n    sudo -u www-data wp redis flush --quiet\nfi\n\n# Update WordPress core and plugins\nsudo -u www-data wp core update --quiet\nsudo -u www-data wp plugin update --all --quiet\nsudo -u www-data wp theme update --all --quiet\n\nlog_message \"WordPress optimization completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-db-optimize.sh\n\n# Schedule weekly optimization\necho \"0 3 * * 0 root /usr/local/bin/wordpress-db-optimize.sh\" | sudo tee -a /etc/crontab\n```\n\n### CDN Integration\n```bash\n# Configure Cloudflare integration\nsudo -u www-data wp plugin install cloudflare --activate\n\n# Configure CDN settings via WP-CLI\nsudo -u www-data wp option update cloudflare_api_key \"your_cloudflare_api_key\"\nsudo -u www-data wp option update cloudflare_email \"your_email@example.com\"\n\n# Install MaxCDN/StackPath plugin\nsudo -u www-data wp plugin install maxcdn --activate\n\n# Configure image optimization\nsudo -u www-data wp plugin install ewww-image-optimizer --activate\nsudo -u www-data wp option update ewww_image_optimizer_cloud_key \"your_api_key\"\n```\n\n## SSL Certificate Setup\n\n### Let's Encrypt SSL Configuration\n```bash\n# Install Certbot\nsudo apt install -y certbot python3-certbot-nginx  # NGINX\nsudo apt install -y certbot python3-certbot-apache # Apache\n\n# Obtain SSL certificate\nsudo certbot --nginx -d example.com -d www.example.com  # NGINX\nsudo certbot --apache -d example.com -d www.example.com # Apache\n\n# Configure automatic renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload nginx\n\n# Test renewal\nsudo certbot renew --dry-run\n\n# Update WordPress URLs to HTTPS\ncd /var/www/html/example.com\nsudo -u www-data wp search-replace \"http://example.com\" \"https://example.com\" --dry-run\nsudo -u www-data wp search-replace \"http://example.com\" \"https://example.com\"\nsudo -u www-data wp option update home \"https://example.com\"\nsudo -u www-data wp option update siteurl \"https://example.com\"\n```\n\n## Backup and Security\n\n### Comprehensive Backup Strategy\n```bash\nsudo tee /usr/local/bin/wordpress-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/wordpress\"\nWP_PATH=\"/var/www/html/example.com\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database,configs}\n\ncd ${WP_PATH}\n\n# Database backup via WP-CLI\nsudo -u www-data wp db export ${BACKUP_DIR}/database/wordpress-${DATE}.sql --quiet\ngzip ${BACKUP_DIR}/database/wordpress-${DATE}.sql\n\n# Files backup (exclude cache and temp files)\ntar --exclude='${WP_PATH}/wp-content/cache' \\\n    --exclude='${WP_PATH}/wp-content/uploads/cache' \\\n    --exclude='${WP_PATH}/wp-content/w3tc-config' \\\n    --exclude='${WP_PATH}/.htaccess.bak*' \\\n    -czf ${BACKUP_DIR}/files/wordpress-files-${DATE}.tar.gz \\\n    -C /var/www/html example.com\n\n# Configuration backup\ntar -czf ${BACKUP_DIR}/configs/wordpress-config-${DATE}.tar.gz \\\n    /etc/nginx/sites-available/wordpress.conf \\\n    /etc/php/8.2/fpm/pool.d/wordpress.conf \\\n    /etc/mysql/mysql.conf.d/wordpress.cnf \\\n    /etc/redis/redis.conf\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://wordpress-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination wordpress-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://wordpress-backups/\n\n# Keep only last 14 backups locally\nfind ${BACKUP_DIR} -name \"wordpress-*\" -type f -mtime +14 -delete\n\n# Test backup integrity\nif [ -f ${BACKUP_DIR}/database/wordpress-${DATE}.sql.gz ]; then\n    zcat ${BACKUP_DIR}/database/wordpress-${DATE}.sql.gz | head -10 >/dev/null\n    if [ $? -eq 0 ]; then\n        echo \"âœ“ Database backup integrity verified\"\n    else\n        echo \"âœ— Database backup may be corrupted\"\n    fi\nfi\n\necho \"WordPress backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * root /usr/local/bin/wordpress-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Security Monitoring and Hardening\n```bash\n# Create security monitoring script\nsudo tee /usr/local/bin/wordpress-security-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nWP_PATH=\"/var/www/html/example.com\"\nSECURITY_LOG=\"/var/log/wordpress-security.log\"\n\ncd ${WP_PATH}\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${SECURITY_LOG}\n}\n\n# Check for malware\nif command -v clamscan >/dev/null 2>&1; then\n    log_message \"Running malware scan...\"\n    clamscan -r ${WP_PATH} --infected --remove --quiet\n    if [ $? -eq 0 ]; then\n        log_message \"âœ“ No malware detected\"\n    else\n        log_message \"âš  Malware detected and removed\"\n    fi\nfi\n\n# Check file integrity\nlog_message \"Checking WordPress core file integrity...\"\nCORE_INTEGRITY=$(sudo -u www-data wp core verify-checksums --quiet 2>&1)\nif [ $? -eq 0 ]; then\n    log_message \"âœ“ WordPress core files are intact\"\nelse\n    log_message \"âš  WordPress core file integrity issues: ${CORE_INTEGRITY}\"\nfi\n\n# Check for vulnerable plugins\nlog_message \"Checking for vulnerable plugins...\"\nVULN_PLUGINS=$(sudo -u www-data wp vuln plugin-status 2>/dev/null | grep \"vulnerable\" | wc -l)\nif [ ${VULN_PLUGINS} -eq 0 ]; then\n    log_message \"âœ“ No vulnerable plugins detected\"\nelse\n    log_message \"âš  ${VULN_PLUGINS} vulnerable plugins found\"\nfi\n\n# Check user accounts\nADMIN_COUNT=$(sudo -u www-data wp user list --role=administrator --format=count)\nlog_message \"â„¹ ${ADMIN_COUNT} administrator accounts found\"\n\n# Check for suspicious uploads\nSUSPICIOUS_FILES=$(find ${WP_PATH}/wp-content/uploads -name \"*.php\" -o -name \"*.js\" -o -name \"*.exe\" 2>/dev/null | wc -l)\nif [ ${SUSPICIOUS_FILES} -gt 0 ]; then\n    log_message \"âš  ${SUSPICIOUS_FILES} suspicious files found in uploads directory\"\n    find ${WP_PATH}/wp-content/uploads -name \"*.php\" -o -name \"*.js\" -o -name \"*.exe\" 2>/dev/null >> ${SECURITY_LOG}\nfi\n\n# Check file permissions\nWRITABLE_FILES=$(find ${WP_PATH} -type f -perm 777 2>/dev/null | wc -l)\nif [ ${WRITABLE_FILES} -gt 0 ]; then\n    log_message \"âš  ${WRITABLE_FILES} files are world-writable\"\nfi\n\n# Check .htaccess integrity\nif [ -f ${WP_PATH}/.htaccess ]; then\n    HTACCESS_SIZE=$(stat -c%s ${WP_PATH}/.htaccess)\n    if [ ${HTACCESS_SIZE} -lt 100 ]; then\n        log_message \"âš  .htaccess file may be compromised or empty\"\n    fi\nfi\n\n# Check for brute force attempts\nFAILED_LOGINS=$(grep \"authentication failure\" /var/log/auth.log | grep -c \"$(date +'%b %d')\")\nif [ ${FAILED_LOGINS} -gt 10 ]; then\n    log_message \"âš  ${FAILED_LOGINS} failed login attempts detected today\"\nfi\n\nlog_message \"Security check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-security-check.sh\n\n# Schedule daily security checks\necho \"0 6 * * * root /usr/local/bin/wordpress-security-check.sh\" | sudo tee -a /etc/crontab\n```\n\n### Fail2Ban WordPress Protection\n```bash\n# Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create WordPress filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^<HOST>.*POST.*(wp-login\\.php|xmlrpc\\.php).* 200\n            ^<HOST>.*POST.*wp-login\\.php.* 404\n            ^<HOST>.*GET.*wp-admin.* 403\n            ^<HOST>.*POST.*wp-comments-post\\.php.* 403\n\nignoreregex = ^<HOST>.*POST.*wp-login\\.php.*200.*admin\nEOF\n\n# Configure WordPress jail\nsudo tee /etc/fail2ban/jail.d/wordpress.conf > /dev/null <<EOF\n[wordpress]\nenabled = true\nport = http,https\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nmaxretry = 3\nfindtime = 600\nbantime = 3600\naction = iptables-multiport[name=WordPress, port=\"http,https\", protocol=tcp]\n\n[wordpress-xmlrpc]\nenabled = true\nport = http,https\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nfindtime = 300\nbantime = 86400\naction = iptables-multiport[name=WordPress-XMLRPC, port=\"http,https\", protocol=tcp]\nEOF\n\nsudo systemctl restart fail2ban\n```\n\n## Monitoring and Maintenance\n\n### WordPress Health Monitoring\n```bash\nsudo tee /usr/local/bin/wordpress-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nWP_PATH=\"/var/www/html/example.com\"\nHEALTH_LOG=\"/var/log/wordpress-health.log\"\n\ncd ${WP_PATH}\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check web server status\nWEB_SERVER=\"nginx\"\nif command -v apache2 >/dev/null 2>&1; then\n    WEB_SERVER=\"apache2\"\nelif command -v httpd >/dev/null 2>&1; then\n    WEB_SERVER=\"httpd\"\nfi\n\nif systemctl is-active ${WEB_SERVER} >/dev/null 2>&1; then\n    log_message \"âœ“ ${WEB_SERVER} is running\"\nelse\n    log_message \"âœ— ${WEB_SERVER} is not running\"\n    exit 1\nfi\n\n# Check database connectivity\nif sudo -u www-data wp db check --quiet >/dev/null 2>&1; then\n    log_message \"âœ“ Database connection is healthy\"\nelse\n    log_message \"âœ— Database connection issues\"\nfi\n\n# Check WordPress status\nWP_VERSION=$(sudo -u www-data wp core version --quiet)\nlog_message \"â„¹ WordPress version: ${WP_VERSION}\"\n\n# Check for updates\nCORE_UPDATES=$(sudo -u www-data wp core check-update --format=count --quiet)\nPLUGIN_UPDATES=$(sudo -u www-data wp plugin list --update=available --format=count --quiet)\nTHEME_UPDATES=$(sudo -u www-data wp theme list --update=available --format=count --quiet)\n\nlog_message \"â„¹ Updates available - Core: ${CORE_UPDATES}, Plugins: ${PLUGIN_UPDATES}, Themes: ${THEME_UPDATES}\"\n\n# Check Redis cache\nif sudo -u www-data wp redis status >/dev/null 2>&1; then\n    log_message \"âœ“ Redis object cache is working\"\nelse\n    log_message \"âš  Redis object cache issues\"\nfi\n\n# Check disk space\nDISK_USAGE=$(df ${WP_PATH} | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message \"âš  Disk usage is ${DISK_USAGE}%\"\nelse\n    log_message \"âœ“ Disk usage is ${DISK_USAGE}%\"\nfi\n\n# Check file permissions\nWRITABLE_WP_CONFIG=$([ -w ${WP_PATH}/wp-config.php ] && echo \"1\" || echo \"0\")\nif [ ${WRITABLE_WP_CONFIG} -eq 1 ]; then\n    log_message \"âš  wp-config.php is writable - security risk\"\nelse\n    log_message \"âœ“ wp-config.php permissions are secure\"\nfi\n\n# Check SSL certificate\nSSL_EXPIRY=$(echo | openssl s_client -servername example.com -connect example.com:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)\nSSL_EXPIRY_EPOCH=$(date -d \"$SSL_EXPIRY\" +%s)\nCURRENT_EPOCH=$(date +%s)\nDAYS_TO_SSL_EXPIRY=$(( (SSL_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n\nif [ ${DAYS_TO_SSL_EXPIRY} -lt 30 ]; then\n    log_message \"âš  SSL certificate expires in ${DAYS_TO_SSL_EXPIRY} days\"\nelse\n    log_message \"âœ“ SSL certificate expires in ${DAYS_TO_SSL_EXPIRY} days\"\nfi\n\n# Check website accessibility\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" https://example.com)\nif [ \"${HTTP_STATUS}\" = \"200\" ]; then\n    log_message \"âœ“ Website is accessible (HTTP ${HTTP_STATUS})\"\nelse\n    log_message \"âœ— Website accessibility issues (HTTP ${HTTP_STATUS})\"\nfi\n\nlog_message \"WordPress health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-health-check.sh\n\n# Schedule health checks every 30 minutes\necho \"*/30 * * * * root /usr/local/bin/wordpress-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n### WordPress Security Scanning\n```bash\n# Install WP-CLI vulnerability scanner\nsudo -u www-data wp package install wp-cli/doctor-command\n\n# Create comprehensive security scan script\nsudo tee /usr/local/bin/wordpress-security-scan.sh > /dev/null <<'EOF'\n#!/bin/bash\nWP_PATH=\"/var/www/html/example.com\"\nSCAN_LOG=\"/var/log/wordpress-security-scan.log\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\ncd ${WP_PATH}\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${SCAN_LOG}\n}\n\nlog_message \"Starting WordPress security scan...\"\n\n# Check WordPress version\nWP_VERSION=$(sudo -u www-data wp core version --quiet)\nLATEST_VERSION=$(sudo -u www-data wp core check-update --format=csv --quiet | tail -1 | cut -d, -f2)\n\nif [ \"${WP_VERSION}\" != \"${LATEST_VERSION}\" ] && [ -n \"${LATEST_VERSION}\" ]; then\n    log_message \"âš  WordPress is outdated (${WP_VERSION}), latest is ${LATEST_VERSION}\"\nelse\n    log_message \"âœ“ WordPress is up to date (${WP_VERSION})\"\nfi\n\n# Check for vulnerable plugins\nsudo -u www-data wp plugin list --format=json > /tmp/wp-plugins-${DATE}.json\nwhile read -r plugin; do\n    plugin_name=$(echo $plugin | jq -r .name)\n    plugin_version=$(echo $plugin | jq -r .version)\n    plugin_update=$(echo $plugin | jq -r .update)\n    \n    if [ \"$plugin_update\" != \"none\" ] && [ \"$plugin_update\" != \"null\" ]; then\n        log_message \"âš  Plugin update available: ${plugin_name} (${plugin_version})\"\n    fi\ndone < <(jq -c '.[]' /tmp/wp-plugins-${DATE}.json)\n\n# Check theme security\nACTIVE_THEME=$(sudo -u www-data wp theme status --format=json | jq -r '.[] | select(.status==\"Active\") | .name')\nlog_message \"â„¹ Active theme: ${ACTIVE_THEME}\"\n\n# Check user accounts\nUSERS_WITH_ADMIN=$(sudo -u www-data wp user list --role=administrator --format=count --quiet)\nlog_message \"â„¹ ${USERS_WITH_ADMIN} administrator accounts\"\n\n# Check for inactive plugins\nINACTIVE_PLUGINS=$(sudo -u www-data wp plugin list --status=inactive --format=count --quiet)\nif [ ${INACTIVE_PLUGINS} -gt 0 ]; then\n    log_message \"â„¹ ${INACTIVE_PLUGINS} inactive plugins (consider removing)\"\nfi\n\n# Check database integrity\nif sudo -u www-data wp db check --quiet >/dev/null 2>&1; then\n    log_message \"âœ“ Database integrity check passed\"\nelse\n    log_message \"âš  Database integrity issues detected\"\nfi\n\n# Check for spam content\nSPAM_COMMENTS=$(sudo -u www-data wp comment list --status=spam --format=count --quiet)\nif [ ${SPAM_COMMENTS} -gt 0 ]; then\n    log_message \"â„¹ ${SPAM_COMMENTS} spam comments detected\"\nfi\n\n# Run Wordfence scan (if installed)\nif sudo -u www-data wp plugin is-installed wordfence; then\n    log_message \"Running Wordfence security scan...\"\n    # Note: Wordfence CLI scanning requires premium\nfi\n\n# Check file changes (basic integrity)\nfind ${WP_PATH} -name \"*.php\" -newer ${WP_PATH}/wp-config.php | wc -l > /tmp/changed_files_count\nCHANGED_FILES=$(cat /tmp/changed_files_count)\nif [ ${CHANGED_FILES} -gt 5 ]; then\n    log_message \"âš  ${CHANGED_FILES} PHP files changed recently\"\nfi\n\nlog_message \"WordPress security scan completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-security-scan.sh\n\n# Schedule daily security scans\necho \"0 7 * * * root /usr/local/bin/wordpress-security-scan.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Check web server status\nsudo systemctl status nginx    # or apache2/httpd\nsudo systemctl status php8.2-fpm\nsudo systemctl status mariadb\n\n# Test database connection\nmysql -u wpuser -p wordpress -e \"SELECT 1;\"\n\n# Check PHP-FPM logs\nsudo tail -f /var/log/php8.2-fpm.log\n\n# WordPress debug mode\ncd /var/www/html/example.com\nsudo -u www-data wp config set WP_DEBUG true --raw\nsudo -u www-data wp config set WP_DEBUG_LOG true --raw\nsudo tail -f /var/www/html/example.com/wp-content/debug.log\n\n# Check web server logs\nsudo tail -f /var/log/nginx/error.log          # NGINX\nsudo tail -f /var/log/apache2/error.log        # Apache\n\n# Clear all caches\nsudo -u www-data wp cache flush\nsudo -u www-data wp redis flush\nsudo -u www-data wp super-cache flush\n\n# Reset file permissions\nsudo /usr/local/bin/wordpress-permissions.sh\n\n# Database repair\nsudo -u www-data wp db repair\n\n# Plugin conflict troubleshooting\nsudo -u www-data wp plugin deactivate --all\nsudo -u www-data wp plugin activate plugin-name\n\n# Theme troubleshooting\nsudo -u www-data wp theme activate twentytwentyfour\n\n# Memory issues\nsudo -u www-data wp config set WP_MEMORY_LIMIT 1024M --raw\nfree -h\n\n# Check disk space\ndf -h /var/www/html/example.com\ndu -sh /var/www/html/example.com/wp-content/uploads/\n\n# SSL issues\nsudo certbot certificates\nsudo nginx -t  # or apache2ctl configtest\n\n# Performance debugging\nsudo -u www-data wp profile hook --all\nsudo -u www-data wp doctor check\n\n# Database optimization\nsudo -u www-data wp db optimize\n```\n\n### Advanced Debugging\n```bash\n# Enable WordPress debugging\nsudo -u www-data wp config set WP_DEBUG true --raw\nsudo -u www-data wp config set WP_DEBUG_LOG true --raw\nsudo -u www-data wp config set WP_DEBUG_DISPLAY false --raw\nsudo -u www-data wp config set SCRIPT_DEBUG true --raw\n\n# Query debugging\nsudo -u www-data wp config set SAVEQUERIES true --raw\n\n# Enable error logging\nsudo tee -a /etc/php/8.2/fpm/php.ini > /dev/null <<EOF\n; WordPress debugging\nlog_errors = On\nerror_log = /var/log/php/wordpress-errors.log\ndisplay_errors = Off\ndisplay_startup_errors = Off\nEOF\n\nsudo systemctl restart php8.2-fpm\n\n# Monitor real-time logs\ntail -f /var/www/html/example.com/wp-content/debug.log\ntail -f /var/log/php/wordpress-errors.log\ntail -f /var/log/nginx/error.log\n\n# Database query analysis\nsudo -u www-data wp db query \"SHOW FULL PROCESSLIST;\"\nsudo -u www-data wp db query \"SHOW STATUS LIKE 'Slow_queries';\"\n\n# Memory profiling\nsudo -u www-data wp eval 'echo \"Memory usage: \" . memory_get_usage(true) / 1024 / 1024 . \" MB\\n\";'\n\n# Plugin profiling\nsudo -u www-data wp plugin list --status=active\nsudo -u www-data wp eval 'foreach(get_option(\"active_plugins\") as $p) { echo $p . \"\\n\"; }'\n\n# Theme debugging\nsudo -u www-data wp theme status\nsudo -u www-data wp eval 'echo get_template_directory() . \"\\n\";'\n```\n\n## Additional Resources\n\n- [Official Documentation](https://wordpress.org/documentation/)\n- [WP-CLI Documentation](https://wp-cli.org/)\n- [WordPress Security Guide](https://wordpress.org/support/article/hardening-wordpress/)\n- [Performance Best Practices](https://wordpress.org/support/article/optimization/)\n- [WordPress Codex](https://codex.wordpress.org/)\n- [Security Plugin: Wordfence](https://www.wordfence.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"wordpress-installation-guide\" class=\"mobile-header\">WordPress Installation Guide</h1>\n<p class=\"mobile-paragraph\">World's most popular content management system (CMS) powering over 40% of websites globally. Complete guide for secure, high-performance WordPress deployment with modern stack configurations.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for production</li>\n<li class=\"mobile-list-item\">Web server (NGINX recommended, Apache supported)</li>\n<li class=\"mobile-list-item\">PHP 8.1+ (8.2+ recommended)</li>\n<li class=\"mobile-list-item\">MySQL 8.0+ or MariaDB 10.6+ </li>\n<li class=\"mobile-list-item\">SSL certificate for HTTPS</li>\n<li class=\"mobile-list-item\">Domain name for production deployment</li>\n<h2 id=\"installation-methods\" class=\"mobile-header\">Installation Methods</h2>\n<h3 id=\"lemp-stack-recommended-for-2024\" class=\"mobile-header\">LEMP Stack (Recommended for 2024)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian LEMP Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install NGINX\nsudo apt install -y nginx\n\n# Install MySQL/MariaDB\nsudo apt install -y mariadb-server mariadb-client\n\n# Install PHP 8.2 and essential extensions\nsudo apt install -y php8.2-fpm php8.2-mysql php8.2-curl php8.2-gd php8.2-mbstring php8.2-xml php8.2-xmlrpc php8.2-soap php8.2-intl php8.2-zip php8.2-bcmath php8.2-imagick php8.2-cli php8.2-dev php8.2-imap php8.2-opcache\n\n# Install additional performance tools\nsudo apt install -y redis-server memcached unzip curl wget\n\n# Enable and start services\nsudo systemctl enable --now nginx mariadb php8.2-fpm redis-server\n\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo ufw allow &#039;Nginx Full&#039;\nsudo ufw allow OpenSSH\nsudo ufw enable</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux LEMP Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL and Remi repositories\nsudo yum install -y epel-release\nsudo yum install -y https://rpms.remirepo.net/enterprise/remi-release-9.rpm\n\n# Enable PHP 8.2 repository\nsudo yum-config-manager --enable remi-php82\n\n# Install NGINX\nsudo yum install -y nginx\n\n# Install MariaDB\nsudo yum install -y mariadb-server mariadb\n\n# Install PHP and extensions\nsudo yum install -y php php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip php-bcmath php-imagick php-opcache php-redis\n\n# Install Redis\nsudo yum install -y redis\n\n# Enable and start services\nsudo systemctl enable --now nginx mariadb php-fpm redis\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# Secure MySQL\nsudo mysql_secure_installation</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora LEMP Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX, MariaDB, PHP, and Redis\nsudo dnf install -y nginx mariadb-server mariadb php php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip php-opcache php-redis redis\n\n# Enable and start services\nsudo systemctl enable --now nginx mariadb php-fpm redis\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# Secure MySQL\nsudo mysql_secure_installation</code></pre>\n      </div>\n    </div>\n<h3 id=\"lamp-stack-alternative\" class=\"mobile-header\">LAMP Stack (Alternative)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian LAMP Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache, MySQL, PHP\nsudo apt update\nsudo apt install -y apache2 mariadb-server php8.2 php8.2-mysql php8.2-curl php8.2-gd php8.2-mbstring php8.2-xml php8.2-xmlrpc php8.2-soap php8.2-intl php8.2-zip php8.2-opcache libapache2-mod-php8.2\n\n# Enable Apache modules\nsudo a2enmod rewrite ssl headers deflate expires\n\n# Enable and start services\nsudo systemctl enable --now apache2 mariadb\n\n# Configure firewall\nsudo ufw allow &#039;Apache Full&#039;\nsudo ufw enable\n\n# Secure MySQL\nsudo mysql_secure_installation</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup-universal\" class=\"mobile-header\">Database Setup (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create WordPress database and user\nsudo mysql -u root -p &lt;&lt;EOF\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;wpuser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_wp_password_2024&#039;;\nGRANT ALL PRIVILEGES ON wordpress.* TO &#039;wpuser&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\n\n-- Optimize MySQL for WordPress\nSET GLOBAL innodb_buffer_pool_size = 1073741824;  -- 1GB\nSET GLOBAL query_cache_size = 67108864;           -- 64MB\nSET GLOBAL query_cache_limit = 2097152;           -- 2MB\nEXIT\nEOF\n\n# Apply permanent MySQL optimizations\nsudo tee /etc/mysql/mysql.conf.d/wordpress.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\n# WordPress optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\n\n# Query cache\nquery_cache_type = 1\nquery_cache_size = 64M\nquery_cache_limit = 2M\n\n# Connection optimization\nmax_connections = 200\nthread_cache_size = 100\ntable_open_cache = 4096\ntmp_table_size = 32M\nmax_heap_table_size = 32M\n\n# Slow query log\nslow_query_log = 1\nlong_query_time = 2\nslow_query_log_file = /var/log/mysql/slow.log\nEOF\n\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h2 id=\"wordpress-installation\" class=\"mobile-header\">WordPress Installation</h2>\n<h3 id=\"download-and-setup-wordpress\" class=\"mobile-header\">Download and Setup WordPress</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest WordPress\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar xzf latest.tar.gz\n\n# Create web directory and copy files\nsudo mkdir -p /var/www/html/example.com\nsudo cp -R /tmp/wordpress/* /var/www/html/example.com/\n\n# Set proper ownership and permissions\n# For NGINX (Ubuntu/Debian)\nsudo chown -R www-data:www-data /var/www/html/example.com\n# For NGINX (RHEL/CentOS)\nsudo chown -R nginx:nginx /var/www/html/example.com\n# For Apache\nsudo chown -R www-data:www-data /var/www/html/example.com  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/example.com      # RHEL/CentOS\n\n# Secure file permissions\nsudo find /var/www/html/example.com/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/example.com/ -type f -exec chmod 644 {} \\;\nsudo chmod 600 /var/www/html/example.com/wp-config.php\n\n# Create uploads directory with proper permissions\nsudo mkdir -p /var/www/html/example.com/wp-content/uploads\nsudo chmod 775 /var/www/html/example.com/wp-content/uploads</code></pre>\n      </div>\n    </div>\n<h3 id=\"secure-wordpress-configuration\" class=\"mobile-header\">Secure WordPress Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure wp-config.php\ncd /var/www/html/example.com\nsudo cp wp-config-sample.php wp-config.php\n\n# Generate security keys\nSALT_KEYS=$(curl -s https://api.wordpress.org/secret-key/1.1/salt/)\n\n# Create wp-config.php with security hardening\nsudo tee wp-config.php &gt; /dev/null &lt;&lt;EOF\n&lt;?php\n/**\n * WordPress Configuration File - Security Hardened\n */\n\n// ** Database settings ** //\ndefine(&#039;DB_NAME&#039;, &#039;wordpress&#039;);\ndefine(&#039;DB_USER&#039;, &#039;wpuser&#039;);\ndefine(&#039;DB_PASSWORD&#039;, &#039;secure_wp_password_2024&#039;);\ndefine(&#039;DB_HOST&#039;, &#039;127.0.0.1&#039;);  // Use 127.0.0.1 instead of localhost\ndefine(&#039;DB_CHARSET&#039;, &#039;utf8mb4&#039;);\ndefine(&#039;DB_COLLATE&#039;, &#039;&#039;);\n\n// ** Authentication Unique Keys and Salts ** //\n${SALT_KEYS}\n\n// ** WordPress Database Table prefix ** //\n\\$table_prefix = &#039;wp_secure_&#039;;\n\n// ** Security hardening ** //\ndefine(&#039;WP_DEBUG&#039;, false);\ndefine(&#039;WP_DEBUG_LOG&#039;, false);\ndefine(&#039;WP_DEBUG_DISPLAY&#039;, false);\n\n// Disable file editing\ndefine(&#039;DISALLOW_FILE_EDIT&#039;, true);\ndefine(&#039;DISALLOW_FILE_MODS&#039;, true);\n\n// Force SSL\ndefine(&#039;FORCE_SSL_ADMIN&#039;, true);\n\n// Automatic updates\ndefine(&#039;WP_AUTO_UPDATE_CORE&#039;, &#039;minor&#039;);\ndefine(&#039;AUTOMATIC_UPDATER_DISABLED&#039;, false);\n\n// Memory limit\ndefine(&#039;WP_MEMORY_LIMIT&#039;, &#039;512M&#039;);\n\n// Multisite (if needed)\n// define(&#039;WP_ALLOW_MULTISITE&#039;, true);\n\n// Custom content directory (optional)\ndefine(&#039;WP_CONTENT_DIR&#039;, &#039;/var/www/html/example.com/wp-content&#039;);\ndefine(&#039;WP_CONTENT_URL&#039;, &#039;https://example.com/wp-content&#039;);\n\n// Database repair\ndefine(&#039;WP_ALLOW_REPAIR&#039;, false);\n\n// Cron optimization\ndefine(&#039;DISABLE_WP_CRON&#039;, true);  // Use system cron instead\n\n// Security headers\ndefine(&#039;COOKIE_DOMAIN&#039;, &#039;.example.com&#039;);\ndefine(&#039;COOKIEHASH&#039;, md5(&#039;example.com&#039;));\n\n// File permissions\ndefine(&#039;FS_CHMOD_DIR&#039;, (0755 &amp; ~ umask()));\ndefine(&#039;FS_CHMOD_FILE&#039;, (0644 &amp; ~ umask()));\n\n// Redis cache configuration\ndefine(&#039;WP_REDIS_HOST&#039;, &#039;127.0.0.1&#039;);\ndefine(&#039;WP_REDIS_PORT&#039;, 6379);\ndefine(&#039;WP_REDIS_DATABASE&#039;, 0);\ndefine(&#039;WP_REDIS_TIMEOUT&#039;, 1);\ndefine(&#039;WP_REDIS_READ_TIMEOUT&#039;, 1);\n\n// Rate limiting\ndefine(&#039;WP_POST_REVISIONS&#039;, 5);\ndefine(&#039;AUTOSAVE_INTERVAL&#039;, 300);  // 5 minutes\ndefine(&#039;EMPTY_TRASH_DAYS&#039;, 7);\n\n/* That&#039;s all, stop editing! */\nif (!defined(&#039;ABSPATH&#039;)) {\n    define(&#039;ABSPATH&#039;, dirname(__FILE__) . &#039;/&#039;);\n}\n\nrequire_once ABSPATH . &#039;wp-settings.php&#039;;\nEOF\n\nsudo chown www-data:www-data wp-config.php  # Adjust user as needed\nsudo chmod 600 wp-config.php</code></pre>\n      </div>\n    </div>\n<h2 id=\"web-server-configuration\" class=\"mobile-header\">Web Server Configuration</h2>\n<h3 id=\"nginx-configuration-recommended\" class=\"mobile-header\">NGINX Configuration (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create optimized NGINX configuration for WordPress\nsudo tee /etc/nginx/sites-available/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n# WordPress NGINX Configuration - 2024 Security Hardened\n\n# Rate limiting\nlimit_req_zone \\$binary_remote_addr zone=wp_login:10m rate=1r/s;\nlimit_req_zone \\$binary_remote_addr zone=wp_admin:10m rate=5r/m;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    return 301 https://example.com\\$request_uri;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n    root /var/www/html/example.com;\n    index index.php index.html index.htm;\n\n    # SSL Configuration (2024 best practices)\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n    \n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n\n    # Security headers (2024 standards)\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot; always;\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039; &#039;unsafe-eval&#039; *.googleapis.com *.gstatic.com; style-src &#039;self&#039; &#039;unsafe-inline&#039; *.googleapis.com; img-src &#039;self&#039; data: https:; font-src &#039;self&#039; data: *.gstatic.com; connect-src &#039;self&#039;; media-src &#039;self&#039;; object-src &#039;none&#039;; child-src &#039;self&#039;; form-action &#039;self&#039;; base-uri &#039;self&#039;;&quot; always;\n    add_header Permissions-Policy &quot;camera=(), microphone=(), geolocation=()&quot; always;\n\n    # Hide server information\n    server_tokens off;\n    more_set_headers &quot;Server: &quot;;\n\n    # Upload size limits\n    client_max_body_size 64M;\n\n    # FastCGI caching\n    set \\$skip_cache 0;\n    if (\\$request_method = POST) { set \\$skip_cache 1; }\n    if (\\$query_string != &quot;&quot;) { set \\$skip_cache 1; }\n    if (\\$request_uri ~* &quot;/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml&quot;) { set \\$skip_cache 1; }\n    if (\\$http_cookie ~* &quot;comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in&quot;) { set \\$skip_cache 1; }\n\n    # Main location block\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    # WordPress-specific security rules\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n\n    # Protect wp-config.php\n    location ~* wp-config\\.php {\n        deny all;\n    }\n\n    # Disable execution of PHP in uploads\n    location ~* /(?:uploads|files)/.*\\.php\\$ {\n        deny all;\n    }\n\n    # Block access to sensitive files\n    location ~* \\.(htaccess|htpasswd|ini|log|sh|sql|conf|bak|backup|swp|tmp)\\$ {\n        deny all;\n    }\n\n    # WordPress: deny wp-content, wp-includes php files\n    location ~* ^/(wp-content|wp-includes)/.*\\.php\\$ {\n        deny all;\n    }\n\n    # WordPress: deny general stuff\n    location ~* ^/(readme|license|example|README|INSTALL|CHANGELOG)\\.(txt|md)\\$ {\n        deny all;\n    }\n\n    # Block WordPress brute force attacks\n    location ~* /(wp-login\\.php|wp-admin/).*\\$ {\n        limit_req zone=wp_login burst=1 nodelay;\n        limit_req zone=wp_admin burst=5 nodelay;\n        \n        # IP whitelist for admin (replace with your IPs)\n        # allow 192.168.1.100;\n        # allow 10.0.0.0/8;\n        # deny all;\n        \n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n    }\n\n    # PHP processing with caching\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n        \n        # FastCGI caching\n        fastcgi_cache_bypass \\$skip_cache;\n        fastcgi_no_cache \\$skip_cache;\n        fastcgi_cache WORDPRESS;\n        fastcgi_cache_valid 60m;\n        \n        # Security\n        fastcgi_hide_header X-Powered-By;\n    }\n\n    # Static assets optimization\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)\\$ {\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n        add_header Vary &quot;Accept-Encoding&quot;;\n        access_log off;\n        \n        # CORS for fonts\n        location ~* \\.(woff|woff2|ttf|eot)\\$ {\n            add_header Access-Control-Allow-Origin *;\n        }\n    }\n\n    # XML files (sitemaps, feeds)\n    location ~* \\.(xml|txt)\\$ {\n        expires 1h;\n        add_header Cache-Control &quot;public&quot;;\n    }\n\n    # Block xmlrpc.php\n    location = /xmlrpc.php {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n\n    # WordPress REST API rate limiting\n    location ~* /wp-json/ {\n        limit_req zone=wp_admin burst=10 nodelay;\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    # Favicon and robots.txt\n    location = /favicon.ico {\n        log_not_found off;\n        access_log off;\n        expires 1y;\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n        expires 1h;\n    }\n\n    # Security.txt\n    location = /.well-known/security.txt {\n        return 301 \\$scheme://\\$server_name/.well-known/security.txt;\n    }\n}\n\n# WWW to non-WWW redirect\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name www.example.com;\n    \n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    \n    return 301 https://example.com\\$request_uri;\n}\nEOF\n\n# Create FastCGI cache directory\nsudo mkdir -p /var/cache/nginx/wordpress\nsudo chown -R www-data:www-data /var/cache/nginx\n\n# Add FastCGI cache configuration\nsudo tee /etc/nginx/conf.d/fastcgi-cache.conf &gt; /dev/null &lt;&lt;EOF\n# FastCGI cache configuration for WordPress\nfastcgi_cache_path /var/cache/nginx/wordpress levels=1:2 keys_zone=WORDPRESS:100m inactive=60m;\nfastcgi_cache_key &quot;\\$scheme\\$request_method\\$host\\$request_uri&quot;;\nfastcgi_cache_use_stale error timeout invalid_header http_500;\nfastcgi_ignore_headers Cache-Control Expires Set-Cookie;\nEOF\n\n# Enable site and restart NGINX\nsudo ln -s /etc/nginx/sites-available/wordpress.conf /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration-alternative\" class=\"mobile-header\">Apache Configuration (Alternative)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure Apache virtual host\nsudo tee /etc/apache2/sites-available/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    Redirect permanent / https://example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/html/example.com\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\n    SSLHonorCipherOrder off\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-Content-Type-Options &quot;nosniff&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n    \n    # Hide server information\n    Header always unset Server\n    Header always unset X-Powered-By\n\n    &lt;Directory /var/www/html/example.com&gt;\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # WordPress security\n        &lt;Files wp-config.php&gt;\n            Require all denied\n        &lt;/Files&gt;\n        \n        &lt;Files .htaccess&gt;\n            Require all denied\n        &lt;/Files&gt;\n        \n        &lt;Files readme.html&gt;\n            Require all denied\n        &lt;/Files&gt;\n        \n        &lt;Files license.txt&gt;\n            Require all denied\n        &lt;/Files&gt;\n    &lt;/Directory&gt;\n\n    # Disable execution in uploads\n    &lt;Directory /var/www/html/example.com/wp-content/uploads&gt;\n        &lt;Files &quot;*.php&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n    &lt;/Directory&gt;\n\n    # Rate limiting with mod_evasive\n    &lt;IfModule mod_evasive24.c&gt;\n        DOSHashTableSize    1024\n        DOSPageCount        2\n        DOSSiteCount        50\n        DOSPageInterval     1\n        DOSSiteInterval     1\n        DOSBlockingPeriod   600\n        DOSEmailNotify      admin@example.com\n    &lt;/IfModule&gt;\n\n    # Compression\n    &lt;IfModule mod_deflate.c&gt;\n        SetOutputFilter DEFLATE\n        AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain application/javascript application/xml+rss application/xml application/x-javascript application/json\n        \n        # Don&#039;t compress images\n        SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary\n    &lt;/IfModule&gt;\n\n    # Caching\n    &lt;IfModule mod_expires.c&gt;\n        ExpiresActive On\n        ExpiresByType image/jpg &quot;access plus 1 year&quot;\n        ExpiresByType image/jpeg &quot;access plus 1 year&quot;\n        ExpiresByType image/gif &quot;access plus 1 year&quot;\n        ExpiresByType image/png &quot;access plus 1 year&quot;\n        ExpiresByType image/webp &quot;access plus 1 year&quot;\n        ExpiresByType text/css &quot;access plus 1 month&quot;\n        ExpiresByType application/pdf &quot;access plus 1 month&quot;\n        ExpiresByType text/javascript &quot;access plus 1 month&quot;\n        ExpiresByType application/javascript &quot;access plus 1 month&quot;\n        ExpiresDefault &quot;access plus 1 week&quot;\n    &lt;/IfModule&gt;\n\n    ErrorLog \\${APACHE_LOG_DIR}/wordpress_error.log\n    CustomLog \\${APACHE_LOG_DIR}/wordpress_access.log combined\n&lt;/VirtualHost&gt;\nEOF\n\n# Enable modules and site\nsudo a2enmod ssl headers expires deflate rewrite\nsudo a2ensite wordpress.conf\nsudo a2dissite 000-default\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"php-configuration-and-optimization\" class=\"mobile-header\">PHP Configuration and Optimization</h2>\n<h3 id=\"php-82-optimization\" class=\"mobile-header\">PHP 8.2 Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure PHP-FPM for optimal WordPress performance\nsudo tee /etc/php/8.2/fpm/pool.d/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n[wordpress]\nuser = www-data\ngroup = www-data\nlisten = /var/run/php/php8.2-fpm-wordpress.sock\nlisten.owner = www-data\nlisten.group = www-data\nlisten.mode = 0660\n\n# Process management\npm = dynamic\npm.max_children = 50\npm.start_servers = 5\npm.min_spare_servers = 5\npm.max_spare_servers = 35\npm.max_requests = 1000\npm.process_idle_timeout = 10s\n\n# Resource limits\nphp_admin_value[memory_limit] = 512M\nphp_admin_value[upload_max_filesize] = 64M\nphp_admin_value[post_max_size] = 64M\nphp_admin_value[max_execution_time] = 300\nphp_admin_value[max_input_time] = 300\nphp_admin_value[max_input_vars] = 3000\n\n# Security settings\nphp_admin_flag[allow_url_fopen] = off\nphp_admin_flag[allow_url_include] = off\nphp_admin_flag[file_uploads] = on\nphp_admin_flag[expose_php] = off\nphp_admin_flag[log_errors] = on\nphp_admin_value[error_log] = /var/log/php/wordpress-error.log\n\n# OPcache settings\nphp_admin_flag[opcache.enable] = on\nphp_admin_value[opcache.memory_consumption] = 256\nphp_admin_value[opcache.interned_strings_buffer] = 16\nphp_admin_value[opcache.max_accelerated_files] = 10000\nphp_admin_value[opcache.revalidate_freq] = 2\nphp_admin_flag[opcache.save_comments] = on\nphp_admin_flag[opcache.fast_shutdown] = on\n\n# Session settings\nphp_admin_value[session.save_handler] = redis\nphp_admin_value[session.save_path] = &quot;tcp://127.0.0.1:6379&quot;\nphp_admin_value[session.gc_maxlifetime] = 1440\nEOF\n\n# Create PHP error log directory\nsudo mkdir -p /var/log/php\nsudo chown www-data:www-data /var/log/php\n\n# Configure main PHP settings\nsudo tee -a /etc/php/8.2/fpm/php.ini &gt; /dev/null &lt;&lt;EOF\n\n; WordPress optimizations\nmax_execution_time = 300\nmax_input_time = 300\nmemory_limit = 512M\nupload_max_filesize = 64M\npost_max_size = 64M\nmax_input_vars = 3000\n\n; Security\nexpose_php = Off\nallow_url_fopen = Off\nallow_url_include = Off\ndisplay_errors = Off\nlog_errors = On\nerror_log = /var/log/php/error.log\n\n; Session security\nsession.cookie_httponly = On\nsession.cookie_secure = On\nsession.use_strict_mode = On\n\n; OPcache\nopcache.enable = 1\nopcache.memory_consumption = 256\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.revalidate_freq = 2\nopcache.save_comments = 1\nopcache.fast_shutdown = 1\nopcache.validate_timestamps = 0  ; Production only\n\n; Redis\nextension = redis\n\n; Date/time\ndate.timezone = &quot;America/New_York&quot;\nEOF\n\nsudo systemctl restart php8.2-fpm</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-object-caching-setup\" class=\"mobile-header\">Redis Object Caching Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Redis for WordPress\nsudo tee -a /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\n\n# WordPress optimizations\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# Security\nbind 127.0.0.1\nprotected-mode yes\nport 6379\ntcp-backlog 511\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\n\n# Persistence\nrdbcompression yes\nrdbchecksum yes\nEOF\n\nsudo systemctl restart redis-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"wordpress-cli-wp-cli-installation-and-configuration\" class=\"mobile-header\">WordPress CLI (WP-CLI) Installation and Configuration</h2>\n<h3 id=\"wp-cli-setup\" class=\"mobile-header\">WP-CLI Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and install WP-CLI\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Create WP-CLI configuration\nsudo tee /var/www/html/example.com/wp-cli.yml &gt; /dev/null &lt;&lt;EOF\n# WP-CLI configuration\npath: /var/www/html/example.com\n\ncore config:\n  dbhost: 127.0.0.1\n  dbname: wordpress\n  dbuser: wpuser\n  dbpass: secure_wp_password_2024\n  extra-php: |\n    define(&#039;WP_DEBUG&#039;, false);\n    define(&#039;WP_DEBUG_LOG&#039;, false);\n    define(&#039;DISALLOW_FILE_EDIT&#039;, true);\n    define(&#039;FORCE_SSL_ADMIN&#039;, true);\n    define(&#039;WP_REDIS_HOST&#039;, &#039;127.0.0.1&#039;);\n\nserver:\n  docroot: /var/www/html/example.com\nEOF\n\n# Install WordPress via WP-CLI\ncd /var/www/html/example.com\nsudo -u www-data wp core download --force\nsudo -u www-data wp config create \\\n  --dbname=wordpress \\\n  --dbuser=wpuser \\\n  --dbpass=secure_wp_password_2024 \\\n  --dbhost=127.0.0.1\n\nsudo -u www-data wp core install \\\n  --url=https://example.com \\\n  --title=&quot;Secure WordPress Site&quot; \\\n  --admin_user=admin \\\n  --admin_password=secure_admin_password_2024 \\\n  --admin_email=admin@example.com \\\n  --skip-email\n\n# Essential security plugins\nsudo -u www-data wp plugin install wordfence --activate\nsudo -u www-data wp plugin install redis-cache --activate\nsudo -u www-data wp plugin install wp-super-cache --activate\nsudo -u www-data wp plugin install updraftplus --activate\n\n# Performance plugins\nsudo -u www-data wp plugin install autoptimize --activate\nsudo -u www-data wp plugin install smush --activate\n\n# Enable Redis cache\nsudo -u www-data wp redis enable\n\n# Configure security settings\nsudo -u www-data wp config set FORCE_SSL_ADMIN true --raw\nsudo -u www-data wp config set DISALLOW_FILE_EDIT true --raw\nsudo -u www-data wp config set WP_AUTO_UPDATE_CORE minor --raw</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"file-system-security\" class=\"mobile-header\">File System Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure file permissions script\nsudo tee /usr/local/bin/wordpress-permissions.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nWP_PATH=&quot;/var/www/html/example.com&quot;\nWP_USER=&quot;www-data&quot;\nWP_GROUP=&quot;www-data&quot;\n\n# Set directory permissions\nfind ${WP_PATH}/ -type d -exec chmod 755 {} \\;\n\n# Set file permissions\nfind ${WP_PATH}/ -type f -exec chmod 644 {} \\;\n\n# Secure wp-config.php\nchmod 600 ${WP_PATH}/wp-config.php\n\n# Secure .htaccess\nif [ -f ${WP_PATH}/.htaccess ]; then\n    chmod 644 ${WP_PATH}/.htaccess\nfi\n\n# Set ownership\nchown -R ${WP_USER}:${WP_GROUP} ${WP_PATH}/\n\n# Secure directories\nchmod 755 ${WP_PATH}/wp-content/\nchmod 755 ${WP_PATH}/wp-content/themes/\nchmod 755 ${WP_PATH}/wp-content/plugins/\nchmod 775 ${WP_PATH}/wp-content/uploads/\n\n# Create .htaccess for uploads security (Apache)\ncat &gt; ${WP_PATH}/wp-content/uploads/.htaccess &lt;&lt;EOL\n# Disable PHP execution in uploads directory\n&lt;Files &quot;*.php&quot;&gt;\n    Order Deny,Allow\n    Deny from All\n&lt;/Files&gt;\n\n# Disable directory browsing\nOptions -Indexes\n\n# Deny access to sensitive files\n&lt;FilesMatch &quot;\\.(htaccess|htpasswd|ini|log|sh|inc|bak)$&quot;&gt;\n    Order Allow,Deny\n    Deny from all\n&lt;/FilesMatch&gt;\nEOL\n\necho &quot;WordPress file permissions have been secured&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-permissions.sh\nsudo /usr/local/bin/wordpress-permissions.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-security-configuration\" class=\"mobile-header\">WordPress Security Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive .htaccess for security (Apache)\nsudo tee /var/www/html/example.com/.htaccess &gt; /dev/null &lt;&lt;EOF\n# WordPress Security .htaccess - 2024\n\n# Block access to wp-config.php\n&lt;Files wp-config.php&gt;\n    Order Allow,Deny\n    Deny from All\n&lt;/Files&gt;\n\n# Block access to readme.html, license.txt, etc.\n&lt;FilesMatch &quot;^(readme\\.html|license\\.txt|wp-config\\.php|\\.htaccess|\\.htpasswd)&quot;&gt;\n    Order Allow,Deny\n    Deny from All\n&lt;/FilesMatch&gt;\n\n# Prevent script injections\nOptions +FollowSymLinks\nRewriteEngine On\nRewriteCond %{QUERY_STRING} (&lt;|%3C).*script.*(&gt;|%3E) [NC,OR]\nRewriteCond %{QUERY_STRING} GLOBALS(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} _REQUEST(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} ^.*(\\[|\\]|\\(|\\)|&lt;|&gt;|Ãª|&quot;|;|\\?|\\*|\\$|=) [NC,OR]\nRewriteCond %{QUERY_STRING} (NULL|OUTFILE|LOAD_FILE) [OR]\nRewriteCond %{QUERY_STRING} (\\.{1,}/)+(motd|etc|bin) [NC,OR]\nRewriteCond %{QUERY_STRING} (localhost|loopback|127\\.0\\.0\\.1) [NC,OR]\nRewriteCond %{QUERY_STRING} (&lt;|&gt;|&#039;|%0A|%0D|%27|%3C|%3E|%00) [NC,OR]\nRewriteCond %{QUERY_STRING} concat[^\\(]*\\( [NC,OR]\nRewriteCond %{QUERY_STRING} union([^s]*s)+elect [NC,OR]\nRewriteCond %{QUERY_STRING} union([^a]*a)+ll([^s]*s)+elect [NC,OR]\nRewriteCond %{QUERY_STRING} \\-[sdcr].*(allow_url_include|allow_url_fopen|safe_mode|disable_functions|auto_prepend_file) [NC,OR]\nRewriteCond %{QUERY_STRING} (;|&lt;|&gt;|&#039;|&quot;|\\)|%0A|%0D|%22|%27|%3C|%3E|%00).*(/\\*|union|select|insert|drop|delete|update|cast|create|char|convert|alter|declare|or|;|\\)|script|\\&lt;|\\&gt;|\\&amp;|\\|\\|) [NC]\nRewriteRule ^(.*)$ index.php [F,L]\n\n# Block XML-RPC\n&lt;Files xmlrpc.php&gt;\n    Order Allow,Deny\n    Deny from All\n&lt;/Files&gt;\n\n# Limit login attempts\n&lt;FilesMatch &quot;wp-login.php&quot;&gt;\n    Order Allow,Deny\n    Allow from all\n    # Add your IP for admin access\n    # Allow from 192.168.1.100\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing\nOptions -Indexes\n\n# Protect includes directory\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteRule ^wp-admin/includes/ - [F,L]\n    RewriteRule !^wp-includes/ - [S=3]\n    RewriteRule ^wp-includes/[^/]+\\.php$ - [F,L]\n    RewriteRule ^wp-includes/js/tinymce/langs/.+\\.php - [F,L]\n    RewriteRule ^wp-includes/theme-compat/ - [F,L]\n&lt;/IfModule&gt;\n\n# WordPress SEO\nRewriteRule ^index\\.php$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /index.php [L]\n\n# Force HTTPS (if not using NGINX redirect)\n# RewriteCond %{HTTPS} !=on\n# RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n\n# Security headers (if mod_headers is enabled)\n&lt;IfModule mod_headers.c&gt;\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-Content-Type-Options &quot;nosniff&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n&lt;/IfModule&gt;\nEOF\n\nsudo chown www-data:www-data /var/www/html/example.com/.htaccess</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"caching-strategy-implementation\" class=\"mobile-header\">Caching Strategy Implementation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install and configure Redis plugin\ncd /var/www/html/example.com\nsudo -u www-data wp plugin install redis-cache --activate\n\n# Configure Redis for WordPress\nsudo -u www-data wp config set WP_REDIS_HOST &#039;127.0.0.1&#039; --raw\nsudo -u www-data wp config set WP_REDIS_PORT 6379 --raw --type=integer\nsudo -u www-data wp config set WP_REDIS_DATABASE 0 --raw --type=integer\nsudo -u www-data wp config set WP_REDIS_TIMEOUT 1 --raw --type=integer\nsudo -u www-data wp config set WP_REDIS_READ_TIMEOUT 1 --raw --type=integer\n\n# Enable Redis object cache\nsudo -u www-data wp redis enable\n\n# Install and configure caching plugin\nsudo -u www-data wp plugin install w3-total-cache --activate\n\n# Configure W3 Total Cache via WP-CLI\nsudo -u www-data wp w3-total-cache option set pgcache.enabled true\nsudo -u www-data wp w3-total-cache option set dbcache.enabled true\nsudo -u www-data wp w3-total-cache option set objectcache.enabled true\nsudo -u www-data wp w3-total-cache option set browsercache.enabled true\n\n# Install performance optimization plugins\nsudo -u www-data wp plugin install autoptimize --activate\nsudo -u www-data wp plugin install smush --activate\nsudo -u www-data wp plugin install wp-rocket --activate  # Premium plugin</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database optimization script\nsudo tee /usr/local/bin/wordpress-db-optimize.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nWP_PATH=&quot;/var/www/html/example.com&quot;\nLOG_FILE=&quot;/var/log/wordpress-optimization.log&quot;\n\ncd ${WP_PATH}\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG_FILE}\n}\n\nlog_message &quot;Starting WordPress database optimization...&quot;\n\n# Database cleanup\nsudo -u www-data wp transient delete --all --quiet\nsudo -u www-data wp db optimize --quiet\nsudo -u www-data wp db repair --quiet\n\n# Clean spam and trash\nsudo -u www-data wp comment delete $(sudo -u www-data wp comment list --status=spam --format=ids) --quiet\nsudo -u www-data wp post delete $(sudo -u www-data wp post list --post_status=trash --format=ids) --quiet\n\n# Optimize images\nif sudo -u www-data wp plugin is-installed smush; then\n    sudo -u www-data wp smush optimize --quiet\nfi\n\n# Clear caches\nif sudo -u www-data wp plugin is-installed w3-total-cache; then\n    sudo -u www-data wp w3-total-cache flush all --quiet\nfi\n\nif sudo -u www-data wp plugin is-installed wp-super-cache; then\n    sudo -u www-data wp super-cache flush --quiet\nfi\n\nif sudo -u www-data wp plugin is-installed redis-cache; then\n    sudo -u www-data wp redis flush --quiet\nfi\n\n# Update WordPress core and plugins\nsudo -u www-data wp core update --quiet\nsudo -u www-data wp plugin update --all --quiet\nsudo -u www-data wp theme update --all --quiet\n\nlog_message &quot;WordPress optimization completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-db-optimize.sh\n\n# Schedule weekly optimization\necho &quot;0 3 * * 0 root /usr/local/bin/wordpress-db-optimize.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"cdn-integration\" class=\"mobile-header\">CDN Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Cloudflare integration\nsudo -u www-data wp plugin install cloudflare --activate\n\n# Configure CDN settings via WP-CLI\nsudo -u www-data wp option update cloudflare_api_key &quot;your_cloudflare_api_key&quot;\nsudo -u www-data wp option update cloudflare_email &quot;your_email@example.com&quot;\n\n# Install MaxCDN/StackPath plugin\nsudo -u www-data wp plugin install maxcdn --activate\n\n# Configure image optimization\nsudo -u www-data wp plugin install ewww-image-optimizer --activate\nsudo -u www-data wp option update ewww_image_optimizer_cloud_key &quot;your_api_key&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssl-certificate-setup\" class=\"mobile-header\">SSL Certificate Setup</h2>\n<h3 id=\"lets-encrypt-ssl-configuration\" class=\"mobile-header\">Let's Encrypt SSL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo apt install -y certbot python3-certbot-nginx  # NGINX\nsudo apt install -y certbot python3-certbot-apache # Apache\n\n# Obtain SSL certificate\nsudo certbot --nginx -d example.com -d www.example.com  # NGINX\nsudo certbot --apache -d example.com -d www.example.com # Apache\n\n# Configure automatic renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet &amp;&amp; systemctl reload nginx\n\n# Test renewal\nsudo certbot renew --dry-run\n\n# Update WordPress URLs to HTTPS\ncd /var/www/html/example.com\nsudo -u www-data wp search-replace &quot;http://example.com&quot; &quot;https://example.com&quot; --dry-run\nsudo -u www-data wp search-replace &quot;http://example.com&quot; &quot;https://example.com&quot;\nsudo -u www-data wp option update home &quot;https://example.com&quot;\nsudo -u www-data wp option update siteurl &quot;https://example.com&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-security\" class=\"mobile-header\">Backup and Security</h2>\n<h3 id=\"comprehensive-backup-strategy\" class=\"mobile-header\">Comprehensive Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/wordpress-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/wordpress&quot;\nWP_PATH=&quot;/var/www/html/example.com&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database,configs}\n\ncd ${WP_PATH}\n\n# Database backup via WP-CLI\nsudo -u www-data wp db export ${BACKUP_DIR}/database/wordpress-${DATE}.sql --quiet\ngzip ${BACKUP_DIR}/database/wordpress-${DATE}.sql\n\n# Files backup (exclude cache and temp files)\ntar --exclude=&#039;${WP_PATH}/wp-content/cache&#039; \\\n    --exclude=&#039;${WP_PATH}/wp-content/uploads/cache&#039; \\\n    --exclude=&#039;${WP_PATH}/wp-content/w3tc-config&#039; \\\n    --exclude=&#039;${WP_PATH}/.htaccess.bak*&#039; \\\n    -czf ${BACKUP_DIR}/files/wordpress-files-${DATE}.tar.gz \\\n    -C /var/www/html example.com\n\n# Configuration backup\ntar -czf ${BACKUP_DIR}/configs/wordpress-config-${DATE}.tar.gz \\\n    /etc/nginx/sites-available/wordpress.conf \\\n    /etc/php/8.2/fpm/pool.d/wordpress.conf \\\n    /etc/mysql/mysql.conf.d/wordpress.cnf \\\n    /etc/redis/redis.conf\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://wordpress-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination wordpress-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://wordpress-backups/\n\n# Keep only last 14 backups locally\nfind ${BACKUP_DIR} -name &quot;wordpress-*&quot; -type f -mtime +14 -delete\n\n# Test backup integrity\nif [ -f ${BACKUP_DIR}/database/wordpress-${DATE}.sql.gz ]; then\n    zcat ${BACKUP_DIR}/database/wordpress-${DATE}.sql.gz | head -10 &gt;/dev/null\n    if [ $? -eq 0 ]; then\n        echo &quot;âœ“ Database backup integrity verified&quot;\n    else\n        echo &quot;âœ— Database backup may be corrupted&quot;\n    fi\nfi\n\necho &quot;WordPress backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-backup.sh\n\n# Schedule daily backups\necho &quot;0 2 * * * root /usr/local/bin/wordpress-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-monitoring-and-hardening\" class=\"mobile-header\">Security Monitoring and Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security monitoring script\nsudo tee /usr/local/bin/wordpress-security-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nWP_PATH=&quot;/var/www/html/example.com&quot;\nSECURITY_LOG=&quot;/var/log/wordpress-security.log&quot;\n\ncd ${WP_PATH}\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${SECURITY_LOG}\n}\n\n# Check for malware\nif command -v clamscan &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;Running malware scan...&quot;\n    clamscan -r ${WP_PATH} --infected --remove --quiet\n    if [ $? -eq 0 ]; then\n        log_message &quot;âœ“ No malware detected&quot;\n    else\n        log_message &quot;âš  Malware detected and removed&quot;\n    fi\nfi\n\n# Check file integrity\nlog_message &quot;Checking WordPress core file integrity...&quot;\nCORE_INTEGRITY=$(sudo -u www-data wp core verify-checksums --quiet 2&gt;&amp;1)\nif [ $? -eq 0 ]; then\n    log_message &quot;âœ“ WordPress core files are intact&quot;\nelse\n    log_message &quot;âš  WordPress core file integrity issues: ${CORE_INTEGRITY}&quot;\nfi\n\n# Check for vulnerable plugins\nlog_message &quot;Checking for vulnerable plugins...&quot;\nVULN_PLUGINS=$(sudo -u www-data wp vuln plugin-status 2&gt;/dev/null | grep &quot;vulnerable&quot; | wc -l)\nif [ ${VULN_PLUGINS} -eq 0 ]; then\n    log_message &quot;âœ“ No vulnerable plugins detected&quot;\nelse\n    log_message &quot;âš  ${VULN_PLUGINS} vulnerable plugins found&quot;\nfi\n\n# Check user accounts\nADMIN_COUNT=$(sudo -u www-data wp user list --role=administrator --format=count)\nlog_message &quot;â„¹ ${ADMIN_COUNT} administrator accounts found&quot;\n\n# Check for suspicious uploads\nSUSPICIOUS_FILES=$(find ${WP_PATH}/wp-content/uploads -name &quot;*.php&quot; -o -name &quot;*.js&quot; -o -name &quot;*.exe&quot; 2&gt;/dev/null | wc -l)\nif [ ${SUSPICIOUS_FILES} -gt 0 ]; then\n    log_message &quot;âš  ${SUSPICIOUS_FILES} suspicious files found in uploads directory&quot;\n    find ${WP_PATH}/wp-content/uploads -name &quot;*.php&quot; -o -name &quot;*.js&quot; -o -name &quot;*.exe&quot; 2&gt;/dev/null &gt;&gt; ${SECURITY_LOG}\nfi\n\n# Check file permissions\nWRITABLE_FILES=$(find ${WP_PATH} -type f -perm 777 2&gt;/dev/null | wc -l)\nif [ ${WRITABLE_FILES} -gt 0 ]; then\n    log_message &quot;âš  ${WRITABLE_FILES} files are world-writable&quot;\nfi\n\n# Check .htaccess integrity\nif [ -f ${WP_PATH}/.htaccess ]; then\n    HTACCESS_SIZE=$(stat -c%s ${WP_PATH}/.htaccess)\n    if [ ${HTACCESS_SIZE} -lt 100 ]; then\n        log_message &quot;âš  .htaccess file may be compromised or empty&quot;\n    fi\nfi\n\n# Check for brute force attempts\nFAILED_LOGINS=$(grep &quot;authentication failure&quot; /var/log/auth.log | grep -c &quot;$(date +&#039;%b %d&#039;)&quot;)\nif [ ${FAILED_LOGINS} -gt 10 ]; then\n    log_message &quot;âš  ${FAILED_LOGINS} failed login attempts detected today&quot;\nfi\n\nlog_message &quot;Security check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-security-check.sh\n\n# Schedule daily security checks\necho &quot;0 6 * * * root /usr/local/bin/wordpress-security-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-wordpress-protection\" class=\"mobile-header\">Fail2Ban WordPress Protection</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create WordPress filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^&lt;HOST&gt;.*POST.*(wp-login\\.php|xmlrpc\\.php).* 200\n            ^&lt;HOST&gt;.*POST.*wp-login\\.php.* 404\n            ^&lt;HOST&gt;.*GET.*wp-admin.* 403\n            ^&lt;HOST&gt;.*POST.*wp-comments-post\\.php.* 403\n\nignoreregex = ^&lt;HOST&gt;.*POST.*wp-login\\.php.*200.*admin\nEOF\n\n# Configure WordPress jail\nsudo tee /etc/fail2ban/jail.d/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n[wordpress]\nenabled = true\nport = http,https\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nmaxretry = 3\nfindtime = 600\nbantime = 3600\naction = iptables-multiport[name=WordPress, port=&quot;http,https&quot;, protocol=tcp]\n\n[wordpress-xmlrpc]\nenabled = true\nport = http,https\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nfindtime = 300\nbantime = 86400\naction = iptables-multiport[name=WordPress-XMLRPC, port=&quot;http,https&quot;, protocol=tcp]\nEOF\n\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-maintenance\" class=\"mobile-header\">Monitoring and Maintenance</h2>\n<h3 id=\"wordpress-health-monitoring\" class=\"mobile-header\">WordPress Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/wordpress-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nWP_PATH=&quot;/var/www/html/example.com&quot;\nHEALTH_LOG=&quot;/var/log/wordpress-health.log&quot;\n\ncd ${WP_PATH}\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check web server status\nWEB_SERVER=&quot;nginx&quot;\nif command -v apache2 &gt;/dev/null 2&gt;&amp;1; then\n    WEB_SERVER=&quot;apache2&quot;\nelif command -v httpd &gt;/dev/null 2&gt;&amp;1; then\n    WEB_SERVER=&quot;httpd&quot;\nfi\n\nif systemctl is-active ${WEB_SERVER} &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ ${WEB_SERVER} is running&quot;\nelse\n    log_message &quot;âœ— ${WEB_SERVER} is not running&quot;\n    exit 1\nfi\n\n# Check database connectivity\nif sudo -u www-data wp db check --quiet &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Database connection is healthy&quot;\nelse\n    log_message &quot;âœ— Database connection issues&quot;\nfi\n\n# Check WordPress status\nWP_VERSION=$(sudo -u www-data wp core version --quiet)\nlog_message &quot;â„¹ WordPress version: ${WP_VERSION}&quot;\n\n# Check for updates\nCORE_UPDATES=$(sudo -u www-data wp core check-update --format=count --quiet)\nPLUGIN_UPDATES=$(sudo -u www-data wp plugin list --update=available --format=count --quiet)\nTHEME_UPDATES=$(sudo -u www-data wp theme list --update=available --format=count --quiet)\n\nlog_message &quot;â„¹ Updates available - Core: ${CORE_UPDATES}, Plugins: ${PLUGIN_UPDATES}, Themes: ${THEME_UPDATES}&quot;\n\n# Check Redis cache\nif sudo -u www-data wp redis status &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Redis object cache is working&quot;\nelse\n    log_message &quot;âš  Redis object cache issues&quot;\nfi\n\n# Check disk space\nDISK_USAGE=$(df ${WP_PATH} | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message &quot;âš  Disk usage is ${DISK_USAGE}%&quot;\nelse\n    log_message &quot;âœ“ Disk usage is ${DISK_USAGE}%&quot;\nfi\n\n# Check file permissions\nWRITABLE_WP_CONFIG=$([ -w ${WP_PATH}/wp-config.php ] &amp;&amp; echo &quot;1&quot; || echo &quot;0&quot;)\nif [ ${WRITABLE_WP_CONFIG} -eq 1 ]; then\n    log_message &quot;âš  wp-config.php is writable - security risk&quot;\nelse\n    log_message &quot;âœ“ wp-config.php permissions are secure&quot;\nfi\n\n# Check SSL certificate\nSSL_EXPIRY=$(echo | openssl s_client -servername example.com -connect example.com:443 2&gt;/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)\nSSL_EXPIRY_EPOCH=$(date -d &quot;$SSL_EXPIRY&quot; +%s)\nCURRENT_EPOCH=$(date +%s)\nDAYS_TO_SSL_EXPIRY=$(( (SSL_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n\nif [ ${DAYS_TO_SSL_EXPIRY} -lt 30 ]; then\n    log_message &quot;âš  SSL certificate expires in ${DAYS_TO_SSL_EXPIRY} days&quot;\nelse\n    log_message &quot;âœ“ SSL certificate expires in ${DAYS_TO_SSL_EXPIRY} days&quot;\nfi\n\n# Check website accessibility\nHTTP_STATUS=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; https://example.com)\nif [ &quot;${HTTP_STATUS}&quot; = &quot;200&quot; ]; then\n    log_message &quot;âœ“ Website is accessible (HTTP ${HTTP_STATUS})&quot;\nelse\n    log_message &quot;âœ— Website accessibility issues (HTTP ${HTTP_STATUS})&quot;\nfi\n\nlog_message &quot;WordPress health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-health-check.sh\n\n# Schedule health checks every 30 minutes\necho &quot;*/30 * * * * root /usr/local/bin/wordpress-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-security-scanning\" class=\"mobile-header\">WordPress Security Scanning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WP-CLI vulnerability scanner\nsudo -u www-data wp package install wp-cli/doctor-command\n\n# Create comprehensive security scan script\nsudo tee /usr/local/bin/wordpress-security-scan.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nWP_PATH=&quot;/var/www/html/example.com&quot;\nSCAN_LOG=&quot;/var/log/wordpress-security-scan.log&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\ncd ${WP_PATH}\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${SCAN_LOG}\n}\n\nlog_message &quot;Starting WordPress security scan...&quot;\n\n# Check WordPress version\nWP_VERSION=$(sudo -u www-data wp core version --quiet)\nLATEST_VERSION=$(sudo -u www-data wp core check-update --format=csv --quiet | tail -1 | cut -d, -f2)\n\nif [ &quot;${WP_VERSION}&quot; != &quot;${LATEST_VERSION}&quot; ] &amp;&amp; [ -n &quot;${LATEST_VERSION}&quot; ]; then\n    log_message &quot;âš  WordPress is outdated (${WP_VERSION}), latest is ${LATEST_VERSION}&quot;\nelse\n    log_message &quot;âœ“ WordPress is up to date (${WP_VERSION})&quot;\nfi\n\n# Check for vulnerable plugins\nsudo -u www-data wp plugin list --format=json &gt; /tmp/wp-plugins-${DATE}.json\nwhile read -r plugin; do\n    plugin_name=$(echo $plugin | jq -r .name)\n    plugin_version=$(echo $plugin | jq -r .version)\n    plugin_update=$(echo $plugin | jq -r .update)\n    \n    if [ &quot;$plugin_update&quot; != &quot;none&quot; ] &amp;&amp; [ &quot;$plugin_update&quot; != &quot;null&quot; ]; then\n        log_message &quot;âš  Plugin update available: ${plugin_name} (${plugin_version})&quot;\n    fi\ndone &lt; &lt;(jq -c &#039;.[]&#039; /tmp/wp-plugins-${DATE}.json)\n\n# Check theme security\nACTIVE_THEME=$(sudo -u www-data wp theme status --format=json | jq -r &#039;.[] | select(.status==&quot;Active&quot;) | .name&#039;)\nlog_message &quot;â„¹ Active theme: ${ACTIVE_THEME}&quot;\n\n# Check user accounts\nUSERS_WITH_ADMIN=$(sudo -u www-data wp user list --role=administrator --format=count --quiet)\nlog_message &quot;â„¹ ${USERS_WITH_ADMIN} administrator accounts&quot;\n\n# Check for inactive plugins\nINACTIVE_PLUGINS=$(sudo -u www-data wp plugin list --status=inactive --format=count --quiet)\nif [ ${INACTIVE_PLUGINS} -gt 0 ]; then\n    log_message &quot;â„¹ ${INACTIVE_PLUGINS} inactive plugins (consider removing)&quot;\nfi\n\n# Check database integrity\nif sudo -u www-data wp db check --quiet &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Database integrity check passed&quot;\nelse\n    log_message &quot;âš  Database integrity issues detected&quot;\nfi\n\n# Check for spam content\nSPAM_COMMENTS=$(sudo -u www-data wp comment list --status=spam --format=count --quiet)\nif [ ${SPAM_COMMENTS} -gt 0 ]; then\n    log_message &quot;â„¹ ${SPAM_COMMENTS} spam comments detected&quot;\nfi\n\n# Run Wordfence scan (if installed)\nif sudo -u www-data wp plugin is-installed wordfence; then\n    log_message &quot;Running Wordfence security scan...&quot;\n    # Note: Wordfence CLI scanning requires premium\nfi\n\n# Check file changes (basic integrity)\nfind ${WP_PATH} -name &quot;*.php&quot; -newer ${WP_PATH}/wp-config.php | wc -l &gt; /tmp/changed_files_count\nCHANGED_FILES=$(cat /tmp/changed_files_count)\nif [ ${CHANGED_FILES} -gt 5 ]; then\n    log_message &quot;âš  ${CHANGED_FILES} PHP files changed recently&quot;\nfi\n\nlog_message &quot;WordPress security scan completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-security-scan.sh\n\n# Schedule daily security scans\necho &quot;0 7 * * * root /usr/local/bin/wordpress-security-scan.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check web server status\nsudo systemctl status nginx    # or apache2/httpd\nsudo systemctl status php8.2-fpm\nsudo systemctl status mariadb\n\n# Test database connection\nmysql -u wpuser -p wordpress -e &quot;SELECT 1;&quot;\n\n# Check PHP-FPM logs\nsudo tail -f /var/log/php8.2-fpm.log\n\n# WordPress debug mode\ncd /var/www/html/example.com\nsudo -u www-data wp config set WP_DEBUG true --raw\nsudo -u www-data wp config set WP_DEBUG_LOG true --raw\nsudo tail -f /var/www/html/example.com/wp-content/debug.log\n\n# Check web server logs\nsudo tail -f /var/log/nginx/error.log          # NGINX\nsudo tail -f /var/log/apache2/error.log        # Apache\n\n# Clear all caches\nsudo -u www-data wp cache flush\nsudo -u www-data wp redis flush\nsudo -u www-data wp super-cache flush\n\n# Reset file permissions\nsudo /usr/local/bin/wordpress-permissions.sh\n\n# Database repair\nsudo -u www-data wp db repair\n\n# Plugin conflict troubleshooting\nsudo -u www-data wp plugin deactivate --all\nsudo -u www-data wp plugin activate plugin-name\n\n# Theme troubleshooting\nsudo -u www-data wp theme activate twentytwentyfour\n\n# Memory issues\nsudo -u www-data wp config set WP_MEMORY_LIMIT 1024M --raw\nfree -h\n\n# Check disk space\ndf -h /var/www/html/example.com\ndu -sh /var/www/html/example.com/wp-content/uploads/\n\n# SSL issues\nsudo certbot certificates\nsudo nginx -t  # or apache2ctl configtest\n\n# Performance debugging\nsudo -u www-data wp profile hook --all\nsudo -u www-data wp doctor check\n\n# Database optimization\nsudo -u www-data wp db optimize</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable WordPress debugging\nsudo -u www-data wp config set WP_DEBUG true --raw\nsudo -u www-data wp config set WP_DEBUG_LOG true --raw\nsudo -u www-data wp config set WP_DEBUG_DISPLAY false --raw\nsudo -u www-data wp config set SCRIPT_DEBUG true --raw\n\n# Query debugging\nsudo -u www-data wp config set SAVEQUERIES true --raw\n\n# Enable error logging\nsudo tee -a /etc/php/8.2/fpm/php.ini &gt; /dev/null &lt;&lt;EOF\n; WordPress debugging\nlog_errors = On\nerror_log = /var/log/php/wordpress-errors.log\ndisplay_errors = Off\ndisplay_startup_errors = Off\nEOF\n\nsudo systemctl restart php8.2-fpm\n\n# Monitor real-time logs\ntail -f /var/www/html/example.com/wp-content/debug.log\ntail -f /var/log/php/wordpress-errors.log\ntail -f /var/log/nginx/error.log\n\n# Database query analysis\nsudo -u www-data wp db query &quot;SHOW FULL PROCESSLIST;&quot;\nsudo -u www-data wp db query &quot;SHOW STATUS LIKE &#039;Slow_queries&#039;;&quot;\n\n# Memory profiling\nsudo -u www-data wp eval &#039;echo &quot;Memory usage: &quot; . memory_get_usage(true) / 1024 / 1024 . &quot; MB\\n&quot;;&#039;\n\n# Plugin profiling\nsudo -u www-data wp plugin list --status=active\nsudo -u www-data wp eval &#039;foreach(get_option(&quot;active_plugins&quot;) as $p) { echo $p . &quot;\\n&quot;; }&#039;\n\n# Theme debugging\nsudo -u www-data wp theme status\nsudo -u www-data wp eval &#039;echo get_template_directory() . &quot;\\n&quot;;&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/documentation/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wp-cli.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WP-CLI Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/article/hardening-wordpress/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/article/optimization/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://codex.wordpress.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Codex</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wordfence.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Plugin: Wordfence</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"27 min","wordCount":5295,"lastBuilt":"2025-09-14T06:13:02.075Z"}]},"__N_SSG":true}