{"pageProps":{"category":{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]},"guides":[{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:24.872Z"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:24.567Z"},{"name":"ansible","displayName":"Ansible","slug":"ansible","description":"Repo for ansible","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-14T01:29:39Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAgentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.\n\n## Prerequisites\n\n- Linux control machine (any modern distribution)\n- Python 3.8+ on control machine\n- SSH access to target hosts\n- Python 2.7+ or 3.5+ on target hosts\n- 2GB RAM minimum, 4GB+ recommended for large infrastructures\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Fedora\n```bash\n# Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Arch Linux\n```bash\n# Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version\n```\n\n#### Alpine Linux\n```bash\n# Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version\n```\n\n### Using pip (Latest Version)\n```bash\n# Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho 'source ~/ansible-venv/bin/activate' >> ~/.bashrc\n\n# Verify installation\nansible --version\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho 'alias ansible=\"ansible-docker ansible\"' >> ~/.bashrc\necho 'alias ansible-playbook=\"ansible-docker ansible-playbook\"' >> ~/.bashrc\n```\n\n## Project Structure and Configuration\n\n### Professional Project Structure\n```bash\n# Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF\n```\n\n### Advanced Inventory Management\n```bash\n# Create production inventory with groups and variables\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: \"{{ vault_mysql_root_password }}\"\n        mysql_replication_user: \"{{ vault_mysql_replication_user }}\"\n        mysql_replication_password: \"{{ vault_mysql_replication_password }}\"\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: \"{{ vault_haproxy_stats_password }}\"\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: \"0 2 * * *\"\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: \"0 1 * * *\"\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat > inventories/production/aws_ec2.yml <<EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: \"'web' in tags.Role\"\n  databases: \"'db' in tags.Role\"\n  loadbalancers: \"'lb' in tags.Role\"\n  \n  # Group by environment\n  production: \"tags.Environment == 'production'\"\n  staging: \"tags.Environment == 'staging'\"\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == \"us-west-2a\"\n  us_west_2b: ec2_placement_availability_zone == \"us-west-2b\"\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF\n```\n\n### Ansible Vault Security\n```bash\n# Create strong vault password\nopenssl rand -base64 32 > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat > group_vars/all/vars.yml <<EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: \"{{ vault_mysql_root_password }}\"\ngrafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: \"{{ vault_ssl_private_key }}\"\n\n# Security settings\nansible_ssh_common_args: '-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts'\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml\n```\n\n## Comprehensive Playbooks\n\n### System Hardening Playbook\n```bash\ncat > playbooks/system-hardening.yml <<EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [\"Debian\", \"RedHat\"]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: \"*\"\n        state: latest\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == \"Debian\"\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: \"{{ security_packages }}\"\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: 'ansible ALL=(ALL) NOPASSWD:ALL'\n        create: yes\n        mode: '0440'\n        validate: 'visudo -cf %s'\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }\n        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }\n        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 0' }\n        - { regexp: '^#?Protocol', line: 'Protocol 2' }\n        - { regexp: '^#?LogLevel', line: 'LogLevel VERBOSE' }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == \"Debian\"\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: 'SSH access'\n      when: ansible_os_family == \"Debian\"\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: \"{{ item }}\"\n        enabled: no\n        state: stopped\n      loop: \"{{ disabled_services }}\"\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: \"{{ item.path }}\"\n        mode: \"{{ item.mode }}\"\n        owner: root\n        group: root\n      loop:\n        - { path: '/etc/passwd', mode: '0644' }\n        - { path: '/etc/shadow', mode: '0640' }\n        - { path: '/etc/group', mode: '0644' }\n        - { path: '/etc/gshadow', mode: '0640' }\n        - { path: '/etc/ssh/sshd_config', mode: '0600' }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'net.ipv4.ip_forward', value: '0' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'kernel.randomize_va_space', value: '2' }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF\n```\n\n### Application Deployment Playbook\n```bash\ncat > playbooks/web-application-deployment.yml <<EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: \"25%\"  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: \"{{ app_version | default('latest') }}\"\n    app_port: 3000\n    nginx_workers: \"{{ ansible_processor_cores }}\"\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: \"Server is in maintenance mode\"\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: \"{{ item }}\"\n        state: directory\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0755'\n      loop:\n        - \"/opt/{{ app_name }}\"\n        - \"/opt/{{ app_name }}/releases\"\n        - \"/opt/{{ app_name }}/shared\"\n        - \"/var/log/{{ app_name }}\"\n\n    - name: Download application release\n      get_url:\n        url: \"https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        mode: '0644'\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}/releases/\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n        creates: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n\n    - name: Create symlink to current release\n      file:\n        src: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n        dest: \"/opt/{{ app_name }}/current\"\n        state: link\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: \"templates/{{ app_name }}.conf.j2\"\n        dest: \"/opt/{{ app_name }}/shared/{{ app_name }}.conf\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0640'\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: \"templates/{{ app_name }}.service.j2\"\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: \"{{ app_name }}\"\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: \"http://localhost:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: \"http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: \"/var/log/{{ app_name }}/deployments.log\"\n        line: \"{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}\"\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Infrastructure as Code Playbook\n```bash\ncat > playbooks/infrastructure-provisioning.yml <<EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: \"{{ inventory_hostname }}\"\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: \"{{ ansible_default_ipv4.address }} {{ inventory_hostname }}\"\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: \"{{ base_packages[ansible_os_family] | default(base_packages['Debian']) }}\"\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chrony' }}\"\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chronyd' }}\"\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: '0644'\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: \"https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\"\n        dest: /tmp/node_exporter.tar.gz\n        mode: '0644'\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: '0755'\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'kernel.dmesg_restrict', value: '1' }\n        - { key: 'kernel.kptr_restrict', value: '2' }\n        - { key: 'kernel.yama.ptrace_scope', value: '1' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check\"\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF\n```\n\n## Advanced Role Development\n\n### Comprehensive NGINX Role\n```bash\n# Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n\n- name: Install NGINX\n  include_tasks: \"install-{{ ansible_os_family }}.yml\"\n\n- name: Create NGINX directories\n  file:\n    path: \"{{ item }}\"\n    state: directory\n    owner: root\n    group: root\n    mode: '0755'\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: 'nginx -t -c %s'\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    backup: yes\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: '0644'\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat > roles/nginx/tasks/install-Debian.yml <<EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: \"deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx\"\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat > roles/nginx/tasks/install-RedHat.yml <<EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: \"https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/\"\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat > roles/nginx/vars/main.yml <<EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - \"add_header X-Frame-Options SAMEORIGIN always;\"\n  - \"add_header X-Content-Type-Options nosniff always;\"\n  - \"add_header X-XSS-Protection '1; mode=block' always;\"\n  - \"add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains' always;\"\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: \"_\"\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat > roles/nginx/templates/nginx.conf.j2 <<EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat > roles/nginx/handlers/main.yml <<EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF\n```\n\n## Security and Compliance\n\n### Ansible Security Scanner Integration\n```bash\n# Create security scanning playbook\ncat > playbooks/security-scan.yml <<EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: \"/tmp/security-scans\"\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: \"{{ scan_results_dir }}\"\n        state: directory\n        mode: '0755'\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: \"https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip\"\n        dest: \"/tmp/cis-benchmark.zip\"\n        mode: '0644'\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh > {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: \"{{ lynis_result.stdout }}\"\n        dest: \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        mode: '0644'\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == \"Debian\"\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [\"RedHat\", \"Debian\"]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: \"{{ item }}\"\n        dest: \"./security-reports/{{ inventory_hostname }}/\"\n        flat: yes\n      loop:\n        - \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html\"\n        - \"{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json\"\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: \"{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt\"\n        mode: '0644'\nEOF\n```\n\n### Ansible AWX/Tower Integration\n```bash\n# Install Ansible AWX (open source)\ncat > playbooks/install-awx.yml <<EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: \"{{ vault_awx_admin_password }}\"\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: '0644'\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: \"http://localhost:80/api/v2/ping/\"\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: \"http://localhost:80/api/v2/organizations/\"\n        method: POST\n        user: \"{{ awx_admin_user }}\"\n        password: \"{{ awx_admin_password }}\"\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: \"Production\"\n          description: \"Production environment organization\"\n        status_code: [200, 201, 409]\nEOF\n```\n\n## Multi-Cloud Automation\n\n### AWS Infrastructure Automation\n```bash\ncat > playbooks/aws-infrastructure.yml <<EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: \"{{ aws_region | default('us-west-2') }}\"\n    vpc_cidr: \"{{ vpc_cidr | default('10.0.0.0/16') }}\"\n    environment: \"{{ environment | default('production') }}\"\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          \"tag:Name\": \"{{ environment }}-vpc\"\n        region: \"{{ aws_region }}\"\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: \"{{ environment }}-vpc\"\n        cidr_block: \"{{ vpc_cidr }}\"\n        region: \"{{ aws_region }}\"\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: \"{{ environment }}\"\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: \"{{ environment }}-web-sg\"\n        description: \"Security group for web servers\"\n        vpc_id: \"{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}\"\n        region: \"{{ aws_region }}\"\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: \"HTTP and HTTPS access\"\n          - proto: tcp\n            ports:\n              - 22\n            group_id: \"{{ environment }}-bastion-sg\"\n            rule_desc: \"SSH from bastion\"\n        tags:\n          Environment: \"{{ environment }}\"\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: \"{{ environment }}-web-{{ item }}\"\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: \"{{ ec2_key_name }}\"\n        vpc_subnet_id: \"{{ web_subnet_id }}\"\n        security_groups:\n          - \"{{ environment }}-web-sg\"\n        region: \"{{ aws_region }}\"\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: \"{{ environment }}\"\n          Role: webserver\n          Ansible: managed\n      loop: \"{{ range(1, web_server_count + 1) | list }}\"\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: \"{{ item.instances[0].tags.Name }}\"\n        hostname: \"{{ item.instances[0].public_ip_address }}\"\n        groups: webservers\n        ansible_ssh_private_key_file: \"~/.ssh/{{ ec2_key_name }}.pem\"\n        ansible_user: ec2-user\n      loop: \"{{ web_instances.results }}\"\n      changed_when: false\nEOF\n```\n\n### Kubernetes Cluster Management\n```bash\ncat > playbooks/k8s-cluster-management.yml <<EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: \"1.28.2\"\n    containerd_version: \"1.6.24\"\n    cni_version: \"1.3.0\"\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb >= 1700\n          - ansible_processor_cores >= 2\n        fail_msg: \"System doesn't meet minimum requirements\"\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: \"{{ item }}\"\n      loop: \"{{ groups['k8s_all'] }}\"\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: \"{{ containerd_version }}\"\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: \"{{ k8s_version }}\"\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: \"{{ ansible_env.HOME }}/.kube\"\n        state: directory\n        mode: '0755'\n\n    - name: Copy admin.conf to user's kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: \"{{ ansible_env.HOME }}/.kube/config\"\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n        mode: '0644'\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Join worker nodes to cluster\n      shell: \"{{ hostvars[groups['k8s_masters'][0]]['join_command'].stdout }}\"\n      when: inventory_hostname in groups['k8s_workers']\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n      register: cluster_status\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups['k8s_masters'][0]\nEOF\n```\n\n## Performance Optimization and Scaling\n\n### Parallel Execution Strategies\n```bash\n# Create high-performance playbook configuration\ncat > playbooks/high-performance-deployment.yml <<EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: \"30%\"   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk '{print $(NF-2)}' | sed 's/,//'\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float > 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: \"*\"\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dest }}\"\n        mode: \"{{ item.mode | default('0644') }}\"\n        backup: yes\n      loop:\n        - { src: \"nginx.conf.j2\", dest: \"/etc/nginx/nginx.conf\" }\n        - { src: \"mysql.cnf.j2\", dest: \"/etc/mysql/my.cnf\" }\n        - { src: \"redis.conf.j2\", dest: \"/etc/redis/redis.conf\" }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: \"{{ item.ansible_job_id }}\"\n      loop: \"{{ config_deployment.results }}\"\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: \"{{ item }}\"\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: \"restart all services\"\nEOF\n\n# Performance monitoring playbook\ncat > playbooks/performance-monitoring.yml <<EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: \"{{ monitoring_tools }}\"\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Enable system statistics collection\n      service:\n        name: \"{{ 'sysstat' if ansible_os_family == 'Debian' else 'sysstat' }}\"\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: '0755'\n\n    - name: Schedule performance monitoring\n      cron:\n        name: \"Performance monitoring\"\n        minute: \"*/5\"\n        job: \"/usr/local/bin/performance-monitor.sh\"\n        user: root\nEOF\n```\n\n## Testing and Validation\n\n### Molecule Testing Framework\n```bash\n# Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat > molecule/default/molecule.yml <<EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat > molecule/default/converge.yml <<EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: \"Include nginx role\"\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat > molecule/default/verify.yml <<EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: \"NGINX is not responding correctly\"\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test\n```\n\n### Ansible Lint and Security Scanning\n```bash\n# Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat > .ansible-lint <<EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: ['true', 'false', 'yes', 'no']\nEOF\n\n# Create security-focused playbook linting\ncat > .yamllint <<EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .\n```\n\n## Backup and Disaster Recovery\n\n### Comprehensive Backup Automation\n```bash\ncat > playbooks/backup-automation.yml <<EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: \"0 2 * * *\"\n      files: \"0 3 * * *\"\n      configs: \"0 4 * * *\"\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: \"{{ backup_root }}/{{ item }}\"\n        state: directory\n        mode: '0755'\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: '0755'\n      when: \"'dbservers' in group_names\"\n\n    - name: Schedule database backups\n      cron:\n        name: \"MySQL backup\"\n        minute: \"0\"\n        hour: \"2\"\n        job: \"/usr/local/bin/mysql-backup.sh\"\n        user: root\n      when: \"'dbservers' in group_names\"\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: '0755'\n\n    - name: Schedule file backups\n      cron:\n        name: \"File system backup\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/local/bin/file-backup.sh\"\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: \"{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz\"\n        mode: '0600'\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: \"{{ backup_root }}/\"\n        dest: \"backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/\"\n        delete: yes\n        rsync_opts:\n          - \"--exclude=*.tmp\"\n          - \"--compress\"\n          - \"--archive\"\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: \"{{ backup_root }}\"\n        age: \"{{ backup_retention_days }}d\"\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: \"{{ item.path }}\"\n        state: absent\n      loop: \"{{ old_backups.files }}\"\nEOF\n```\n\n## Verification and Monitoring\n\n### Cross-Platform System Verification\n```bash\n# Create comprehensive verification playbook\ncat > playbooks/system-verification.yml <<EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - \"ansible_facts.services[item.service + '.service'].state == 'running'\"\n        fail_msg: \"Service {{ item.service }} is not running\"\n        success_msg: \"Service {{ item.service }} is healthy\"\n      loop: \"{{ health_checks }}\"\n      when: \"item.service + '.service' in ansible_facts.services\"\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: \"{{ item.host }}\"\n        port: \"{{ item.port }}\"\n        timeout: 5\n      loop:\n        - { host: \"8.8.8.8\", port: 53 }\n        - { host: \"1.1.1.1\", port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk '$5 > \"85%\" {print $0}'\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != \"\"\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: \"WARNING: Memory usage is {{ memory_usage.stdout }}%\"\n      when: memory_usage.stdout | int > 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep \"Failed password\" /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw >/dev/null 2>&1; then\n          ufw status\n        elif command -v firewall-cmd >/dev/null 2>&1; then\n          firewall-cmd --state\n        else\n          echo \"No supported firewall found\"\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        mode: '0644'\n\n    - name: Fetch health reports\n      fetch:\n        src: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        dest: \"./reports/\"\n        flat: yes\nEOF\n```\n\n### Continuous Compliance Monitoring\n```bash\ncat > playbooks/compliance-monitoring.yml <<EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: \"{{ 'auditd' if ansible_os_family == 'RedHat' else 'auditd' }}\"\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo \"CIS-CAT not installed, skipping\"\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check | mail -s 'AIDE Report' security@example.com\"\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF\n```\n\n## CI/CD Integration\n\n### Jenkins Pipeline Integration\n```bash\n# Create Jenkinsfile for Ansible automation\ncat > Jenkinsfile <<EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = 'ansible.cfg'\n        ANSIBLE_HOST_KEY_CHECKING = 'False'\n    }\n    \n    stages {\n        stage('Lint') {\n            steps {\n                sh 'ansible-lint playbooks/'\n                sh 'yamllint .'\n            }\n        }\n        \n        stage('Syntax Check') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --syntax-check'\n            }\n        }\n        \n        stage('Dry Run') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --check --diff'\n            }\n        }\n        \n        stage('Deploy to Staging') {\n            when {\n                branch 'develop'\n            }\n            steps {\n                sh 'ansible-playbook -i inventories/staging playbooks/site.yml'\n            }\n        }\n        \n        stage('Deploy to Production') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input 'Deploy to Production?'\n                sh 'ansible-playbook -i inventories/production playbooks/site.yml'\n            }\n        }\n        \n        stage('Verify Deployment') {\n            steps {\n                sh 'ansible-playbook playbooks/system-verification.yml'\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'reports',\n                reportFiles: '*.html',\n                reportName: 'Ansible Report'\n            ])\n        }\n        failure {\n            emailext (\n                subject: \"Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Something is wrong with ${env.BUILD_URL}\",\n                to: \"${env.DEFAULT_RECIPIENTS}\"\n            )\n        }\n    }\n}\nEOF\n```\n\n### GitLab CI Integration\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: \"False\"\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"develop\"'\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a \"uptime\"\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=\"debug=true\" --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a \"path=/tmp/test state=touch\" --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=\"specific task name\"\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a \"var=hostvars\"\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name \"*.yml\" -exec ansible-playbook {} --syntax-check \\;\n```\n\n### Advanced Debugging\n```bash\n# Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=\"profile_tasks_sort_order=none\"\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=\"ansible_python_interpreter=/usr/bin/python3\"\n\n# Network debugging\nansible all -m command -a \"ss -tulpn\"\nansible all -m command -a \"netstat -rn\"\n\n# Process debugging\nansible all -m command -a \"ps aux --sort=-%mem | head -10\"\n\n# Disk usage analysis\nansible all -m command -a \"df -h\"\nansible all -m command -a \"du -sh /var/log/*\"\n\n# Service debugging\nansible all -m systemd -a \"name=nginx\" --become\nansible all -m command -a \"systemctl status nginx\" --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=\"debug_vars=true\" --tags debug_vars\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices Guide](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Security Best Practices](https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices)\n- [Ansible Molecule Testing](https://molecule.readthedocs.io/)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"ansible-installation-guide\" class=\"mobile-header\">Ansible Installation Guide</h1>\n<p class=\"mobile-paragraph\">Agentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux control machine (any modern distribution)</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine</li>\n<li class=\"mobile-list-item\">SSH access to target hosts</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target hosts</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for large infrastructures</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho &#039;source ~/ansible-venv/bin/activate&#039; &gt;&gt; ~/.bashrc\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho &#039;alias ansible=&quot;ansible-docker ansible&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;alias ansible-playbook=&quot;ansible-docker ansible-playbook&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"project-structure-and-configuration\" class=\"mobile-header\">Project Structure and Configuration</h2>\n<h3 id=\"professional-project-structure\" class=\"mobile-header\">Professional Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-inventory-management\" class=\"mobile-header\">Advanced Inventory Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production inventory with groups and variables\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\n        mysql_replication_user: &quot;{{ vault_mysql_replication_user }}&quot;\n        mysql_replication_password: &quot;{{ vault_mysql_replication_password }}&quot;\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: &quot;{{ vault_haproxy_stats_password }}&quot;\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: &quot;0 2 * * *&quot;\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: &quot;0 1 * * *&quot;\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat &gt; inventories/production/aws_ec2.yml &lt;&lt;EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: &quot;&#039;web&#039; in tags.Role&quot;\n  databases: &quot;&#039;db&#039; in tags.Role&quot;\n  loadbalancers: &quot;&#039;lb&#039; in tags.Role&quot;\n  \n  # Group by environment\n  production: &quot;tags.Environment == &#039;production&#039;&quot;\n  staging: &quot;tags.Environment == &#039;staging&#039;&quot;\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == &quot;us-west-2a&quot;\n  us_west_2b: ec2_placement_availability_zone == &quot;us-west-2b&quot;\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-security\" class=\"mobile-header\">Ansible Vault Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create strong vault password\nopenssl rand -base64 32 &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat &gt; group_vars/all/vars.yml &lt;&lt;EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\ngrafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: &quot;{{ vault_ssl_private_key }}&quot;\n\n# Security settings\nansible_ssh_common_args: &#039;-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts&#039;\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"comprehensive-playbooks\" class=\"mobile-header\">Comprehensive Playbooks</h2>\n<h3 id=\"system-hardening-playbook\" class=\"mobile-header\">System Hardening Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-hardening.yml &lt;&lt;EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [&quot;Debian&quot;, &quot;RedHat&quot;]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: &quot;*&quot;\n        state: latest\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: &quot;{{ security_packages }}&quot;\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: &#039;ansible ALL=(ALL) NOPASSWD:ALL&#039;\n        create: yes\n        mode: &#039;0440&#039;\n        validate: &#039;visudo -cf %s&#039;\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n        - { regexp: &#039;^#?MaxAuthTries&#039;, line: &#039;MaxAuthTries 3&#039; }\n        - { regexp: &#039;^#?ClientAliveInterval&#039;, line: &#039;ClientAliveInterval 300&#039; }\n        - { regexp: &#039;^#?ClientAliveCountMax&#039;, line: &#039;ClientAliveCountMax 0&#039; }\n        - { regexp: &#039;^#?Protocol&#039;, line: &#039;Protocol 2&#039; }\n        - { regexp: &#039;^#?LogLevel&#039;, line: &#039;LogLevel VERBOSE&#039; }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: &#039;SSH access&#039;\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: &quot;{{ item }}&quot;\n        enabled: no\n        state: stopped\n      loop: &quot;{{ disabled_services }}&quot;\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        mode: &quot;{{ item.mode }}&quot;\n        owner: root\n        group: root\n      loop:\n        - { path: &#039;/etc/passwd&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/shadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/group&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/gshadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/ssh/sshd_config&#039;, mode: &#039;0600&#039; }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;net.ipv4.ip_forward&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.randomize_va_space&#039;, value: &#039;2&#039; }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-deployment-playbook\" class=\"mobile-header\">Application Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/web-application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: &quot;25%&quot;  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: &quot;{{ app_version | default(&#039;latest&#039;) }}&quot;\n    app_port: 3000\n    nginx_workers: &quot;{{ ansible_processor_cores }}&quot;\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: &quot;Server is in maintenance mode&quot;\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: &quot;{{ item }}&quot;\n        state: directory\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0755&#039;\n      loop:\n        - &quot;/opt/{{ app_name }}&quot;\n        - &quot;/opt/{{ app_name }}/releases&quot;\n        - &quot;/opt/{{ app_name }}/shared&quot;\n        - &quot;/var/log/{{ app_name }}&quot;\n\n    - name: Download application release\n      get_url:\n        url: &quot;https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        mode: &#039;0644&#039;\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}/releases/&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n        creates: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n\n    - name: Create symlink to current release\n      file:\n        src: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n        dest: &quot;/opt/{{ app_name }}/current&quot;\n        state: link\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: &quot;templates/{{ app_name }}.conf.j2&quot;\n        dest: &quot;/opt/{{ app_name }}/shared/{{ app_name }}.conf&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0640&#039;\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: &quot;templates/{{ app_name }}.service.j2&quot;\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: &quot;http://localhost:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: &quot;http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: &quot;/var/log/{{ app_name }}/deployments.log&quot;\n        line: &quot;{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}&quot;\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-as-code-playbook\" class=\"mobile-header\">Infrastructure as Code Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/infrastructure-provisioning.yml &lt;&lt;EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: &quot;{{ inventory_hostname }}&quot;\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: &quot;{{ ansible_default_ipv4.address }} {{ inventory_hostname }}&quot;\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: &quot;{{ base_packages[ansible_os_family] | default(base_packages[&#039;Debian&#039;]) }}&quot;\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chrony&#039; }}&quot;\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chronyd&#039; }}&quot;\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: &#039;0644&#039;\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: &quot;https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz&quot;\n        dest: /tmp/node_exporter.tar.gz\n        mode: &#039;0644&#039;\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;kernel.dmesg_restrict&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.kptr_restrict&#039;, value: &#039;2&#039; }\n        - { key: &#039;kernel.yama.ptrace_scope&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check&quot;\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-role-development\" class=\"mobile-header\">Advanced Role Development</h2>\n<h3 id=\"comprehensive-nginx-role\" class=\"mobile-header\">Comprehensive NGINX Role</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: &quot;{{ ansible_os_family }}.yml&quot;\n\n- name: Install NGINX\n  include_tasks: &quot;install-{{ ansible_os_family }}.yml&quot;\n\n- name: Create NGINX directories\n  file:\n    path: &quot;{{ item }}&quot;\n    state: directory\n    owner: root\n    group: root\n    mode: &#039;0755&#039;\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: &#039;nginx -t -c %s&#039;\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    backup: yes\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: &#039;0644&#039;\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat &gt; roles/nginx/tasks/install-Debian.yml &lt;&lt;EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: &quot;deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx&quot;\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat &gt; roles/nginx/tasks/install-RedHat.yml &lt;&lt;EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: &quot;https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/&quot;\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat &gt; roles/nginx/vars/main.yml &lt;&lt;EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - &quot;add_header X-Frame-Options SAMEORIGIN always;&quot;\n  - &quot;add_header X-Content-Type-Options nosniff always;&quot;\n  - &quot;add_header X-XSS-Protection &#039;1; mode=block&#039; always;&quot;\n  - &quot;add_header Strict-Transport-Security &#039;max-age=31536000; includeSubDomains&#039; always;&quot;\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: &quot;_&quot;\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat &gt; roles/nginx/templates/nginx.conf.j2 &lt;&lt;EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main &#039;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#039;\n                    &#039;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#039;\n                    &#039;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#039;;\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat &gt; roles/nginx/handlers/main.yml &lt;&lt;EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-and-compliance\" class=\"mobile-header\">Security and Compliance</h2>\n<h3 id=\"ansible-security-scanner-integration\" class=\"mobile-header\">Ansible Security Scanner Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security scanning playbook\ncat &gt; playbooks/security-scan.yml &lt;&lt;EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: &quot;/tmp/security-scans&quot;\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: &quot;{{ scan_results_dir }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: &quot;https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip&quot;\n        dest: &quot;/tmp/cis-benchmark.zip&quot;\n        mode: &#039;0644&#039;\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh &gt; {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: &quot;{{ lynis_result.stdout }}&quot;\n        dest: &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [&quot;RedHat&quot;, &quot;Debian&quot;]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: &quot;{{ item }}&quot;\n        dest: &quot;./security-reports/{{ inventory_hostname }}/&quot;\n        flat: yes\n      loop:\n        - &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html&quot;\n        - &quot;{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json&quot;\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: &quot;{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-awxtower-integration\" class=\"mobile-header\">Ansible AWX/Tower Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible AWX (open source)\ncat &gt; playbooks/install-awx.yml &lt;&lt;EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: &quot;{{ vault_awx_admin_password }}&quot;\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: &#039;0644&#039;\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: &quot;http://localhost:80/api/v2/ping/&quot;\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: &quot;http://localhost:80/api/v2/organizations/&quot;\n        method: POST\n        user: &quot;{{ awx_admin_user }}&quot;\n        password: &quot;{{ awx_admin_password }}&quot;\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: &quot;Production&quot;\n          description: &quot;Production environment organization&quot;\n        status_code: [200, 201, 409]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"multi-cloud-automation\" class=\"mobile-header\">Multi-Cloud Automation</h2>\n<h3 id=\"aws-infrastructure-automation\" class=\"mobile-header\">AWS Infrastructure Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/aws-infrastructure.yml &lt;&lt;EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: &quot;{{ aws_region | default(&#039;us-west-2&#039;) }}&quot;\n    vpc_cidr: &quot;{{ vpc_cidr | default(&#039;10.0.0.0/16&#039;) }}&quot;\n    environment: &quot;{{ environment | default(&#039;production&#039;) }}&quot;\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          &quot;tag:Name&quot;: &quot;{{ environment }}-vpc&quot;\n        region: &quot;{{ aws_region }}&quot;\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: &quot;{{ environment }}-vpc&quot;\n        cidr_block: &quot;{{ vpc_cidr }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: &quot;{{ environment }}-web-sg&quot;\n        description: &quot;Security group for web servers&quot;\n        vpc_id: &quot;{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: &quot;HTTP and HTTPS access&quot;\n          - proto: tcp\n            ports:\n              - 22\n            group_id: &quot;{{ environment }}-bastion-sg&quot;\n            rule_desc: &quot;SSH from bastion&quot;\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: &quot;{{ environment }}-web-{{ item }}&quot;\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: &quot;{{ ec2_key_name }}&quot;\n        vpc_subnet_id: &quot;{{ web_subnet_id }}&quot;\n        security_groups:\n          - &quot;{{ environment }}-web-sg&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          Role: webserver\n          Ansible: managed\n      loop: &quot;{{ range(1, web_server_count + 1) | list }}&quot;\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: &quot;{{ item.instances[0].tags.Name }}&quot;\n        hostname: &quot;{{ item.instances[0].public_ip_address }}&quot;\n        groups: webservers\n        ansible_ssh_private_key_file: &quot;~/.ssh/{{ ec2_key_name }}.pem&quot;\n        ansible_user: ec2-user\n      loop: &quot;{{ web_instances.results }}&quot;\n      changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-cluster-management\" class=\"mobile-header\">Kubernetes Cluster Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/k8s-cluster-management.yml &lt;&lt;EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: &quot;1.28.2&quot;\n    containerd_version: &quot;1.6.24&quot;\n    cni_version: &quot;1.3.0&quot;\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb &gt;= 1700\n          - ansible_processor_cores &gt;= 2\n        fail_msg: &quot;System doesn&#039;t meet minimum requirements&quot;\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: &quot;{{ item }}&quot;\n      loop: &quot;{{ groups[&#039;k8s_all&#039;] }}&quot;\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: &quot;{{ containerd_version }}&quot;\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: &quot;{{ k8s_version }}&quot;\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: &quot;{{ ansible_env.HOME }}/.kube&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    - name: Copy admin.conf to user&#039;s kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n        owner: &quot;{{ ansible_user }}&quot;\n        group: &quot;{{ ansible_user }}&quot;\n        mode: &#039;0644&#039;\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Join worker nodes to cluster\n      shell: &quot;{{ hostvars[groups[&#039;k8s_masters&#039;][0]][&#039;join_command&#039;].stdout }}&quot;\n      when: inventory_hostname in groups[&#039;k8s_workers&#039;]\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n      register: cluster_status\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization-and-scaling\" class=\"mobile-header\">Performance Optimization and Scaling</h2>\n<h3 id=\"parallel-execution-strategies\" class=\"mobile-header\">Parallel Execution Strategies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create high-performance playbook configuration\ncat &gt; playbooks/high-performance-deployment.yml &lt;&lt;EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: &quot;30%&quot;   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk &#039;{print $(NF-2)}&#039; | sed &#039;s/,//&#039;\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float &gt; 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: &quot;*&quot;\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: &quot;{{ item.src }}&quot;\n        dest: &quot;{{ item.dest }}&quot;\n        mode: &quot;{{ item.mode | default(&#039;0644&#039;) }}&quot;\n        backup: yes\n      loop:\n        - { src: &quot;nginx.conf.j2&quot;, dest: &quot;/etc/nginx/nginx.conf&quot; }\n        - { src: &quot;mysql.cnf.j2&quot;, dest: &quot;/etc/mysql/my.cnf&quot; }\n        - { src: &quot;redis.conf.j2&quot;, dest: &quot;/etc/redis/redis.conf&quot; }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: &quot;{{ item.ansible_job_id }}&quot;\n      loop: &quot;{{ config_deployment.results }}&quot;\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: &quot;{{ item }}&quot;\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: &quot;restart all services&quot;\nEOF\n\n# Performance monitoring playbook\ncat &gt; playbooks/performance-monitoring.yml &lt;&lt;EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: &quot;{{ monitoring_tools }}&quot;\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Enable system statistics collection\n      service:\n        name: &quot;{{ &#039;sysstat&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sysstat&#039; }}&quot;\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule performance monitoring\n      cron:\n        name: &quot;Performance monitoring&quot;\n        minute: &quot;*/5&quot;\n        job: &quot;/usr/local/bin/performance-monitor.sh&quot;\n        user: root\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"testing-and-validation\" class=\"mobile-header\">Testing and Validation</h2>\n<h3 id=\"molecule-testing-framework\" class=\"mobile-header\">Molecule Testing Framework</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat &gt; molecule/default/molecule.yml &lt;&lt;EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat &gt; molecule/default/converge.yml &lt;&lt;EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: &quot;Include nginx role&quot;\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat &gt; molecule/default/verify.yml &lt;&lt;EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: &quot;NGINX is not responding correctly&quot;\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-lint-and-security-scanning\" class=\"mobile-header\">Ansible Lint and Security Scanning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat &gt; .ansible-lint &lt;&lt;EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: [&#039;true&#039;, &#039;false&#039;, &#039;yes&#039;, &#039;no&#039;]\nEOF\n\n# Create security-focused playbook linting\ncat &gt; .yamllint &lt;&lt;EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"comprehensive-backup-automation\" class=\"mobile-header\">Comprehensive Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/backup-automation.yml &lt;&lt;EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: &quot;0 2 * * *&quot;\n      files: &quot;0 3 * * *&quot;\n      configs: &quot;0 4 * * *&quot;\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: &quot;{{ backup_root }}/{{ item }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: &#039;0755&#039;\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    - name: Schedule database backups\n      cron:\n        name: &quot;MySQL backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;2&quot;\n        job: &quot;/usr/local/bin/mysql-backup.sh&quot;\n        user: root\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule file backups\n      cron:\n        name: &quot;File system backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/local/bin/file-backup.sh&quot;\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: &quot;{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz&quot;\n        mode: &#039;0600&#039;\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: &quot;{{ backup_root }}/&quot;\n        dest: &quot;backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/&quot;\n        delete: yes\n        rsync_opts:\n          - &quot;--exclude=*.tmp&quot;\n          - &quot;--compress&quot;\n          - &quot;--archive&quot;\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: &quot;{{ backup_root }}&quot;\n        age: &quot;{{ backup_retention_days }}d&quot;\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        state: absent\n      loop: &quot;{{ old_backups.files }}&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-monitoring\" class=\"mobile-header\">Verification and Monitoring</h2>\n<h3 id=\"cross-platform-system-verification\" class=\"mobile-header\">Cross-Platform System Verification</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive verification playbook\ncat &gt; playbooks/system-verification.yml &lt;&lt;EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - &quot;ansible_facts.services[item.service + &#039;.service&#039;].state == &#039;running&#039;&quot;\n        fail_msg: &quot;Service {{ item.service }} is not running&quot;\n        success_msg: &quot;Service {{ item.service }} is healthy&quot;\n      loop: &quot;{{ health_checks }}&quot;\n      when: &quot;item.service + &#039;.service&#039; in ansible_facts.services&quot;\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: &quot;{{ item.host }}&quot;\n        port: &quot;{{ item.port }}&quot;\n        timeout: 5\n      loop:\n        - { host: &quot;8.8.8.8&quot;, port: 53 }\n        - { host: &quot;1.1.1.1&quot;, port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk &#039;$5 &gt; &quot;85%&quot; {print $0}&#039;\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != &quot;&quot;\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk &#039;{printf &quot;%.0f&quot;, $3/$2 * 100.0}&#039;\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: &quot;WARNING: Memory usage is {{ memory_usage.stdout }}%&quot;\n      when: memory_usage.stdout | int &gt; 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep &quot;Failed password&quot; /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n          ufw status\n        elif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n          firewall-cmd --state\n        else\n          echo &quot;No supported firewall found&quot;\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    - name: Fetch health reports\n      fetch:\n        src: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        dest: &quot;./reports/&quot;\n        flat: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"continuous-compliance-monitoring\" class=\"mobile-header\">Continuous Compliance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/compliance-monitoring.yml &lt;&lt;EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: &quot;{{ &#039;auditd&#039; if ansible_os_family == &#039;RedHat&#039; else &#039;auditd&#039; }}&quot;\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo &quot;CIS-CAT not installed, skipping&quot;\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check | mail -s &#039;AIDE Report&#039; security@example.com&quot;\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-integration\" class=\"mobile-header\">CI/CD Integration</h2>\n<h3 id=\"jenkins-pipeline-integration\" class=\"mobile-header\">Jenkins Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkinsfile for Ansible automation\ncat &gt; Jenkinsfile &lt;&lt;EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = &#039;ansible.cfg&#039;\n        ANSIBLE_HOST_KEY_CHECKING = &#039;False&#039;\n    }\n    \n    stages {\n        stage(&#039;Lint&#039;) {\n            steps {\n                sh &#039;ansible-lint playbooks/&#039;\n                sh &#039;yamllint .&#039;\n            }\n        }\n        \n        stage(&#039;Syntax Check&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --syntax-check&#039;\n            }\n        }\n        \n        stage(&#039;Dry Run&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --check --diff&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Staging&#039;) {\n            when {\n                branch &#039;develop&#039;\n            }\n            steps {\n                sh &#039;ansible-playbook -i inventories/staging playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Production&#039;) {\n            when {\n                branch &#039;main&#039;\n            }\n            steps {\n                input &#039;Deploy to Production?&#039;\n                sh &#039;ansible-playbook -i inventories/production playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Verify Deployment&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/system-verification.yml&#039;\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: &#039;logs/*.log&#039;, allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: &#039;reports&#039;,\n                reportFiles: &#039;*.html&#039;,\n                reportName: &#039;Ansible Report&#039;\n            ])\n        }\n        failure {\n            emailext (\n                subject: &quot;Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Something is wrong with ${env.BUILD_URL}&quot;,\n                to: &quot;${env.DEFAULT_RECIPIENTS}&quot;\n            )\n        }\n    }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: &quot;False&quot;\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;develop&quot;&#039;\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a &quot;uptime&quot;\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug=true&quot; --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a &quot;path=/tmp/test state=touch&quot; --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=&quot;specific task name&quot;\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a &quot;var=hostvars&quot;\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name &quot;*.yml&quot; -exec ansible-playbook {} --syntax-check \\;</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=&quot;profile_tasks_sort_order=none&quot;\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=&quot;ansible_python_interpreter=/usr/bin/python3&quot;\n\n# Network debugging\nansible all -m command -a &quot;ss -tulpn&quot;\nansible all -m command -a &quot;netstat -rn&quot;\n\n# Process debugging\nansible all -m command -a &quot;ps aux --sort=-%mem | head -10&quot;\n\n# Disk usage analysis\nansible all -m command -a &quot;df -h&quot;\nansible all -m command -a &quot;du -sh /var/log/*&quot;\n\n# Service debugging\nansible all -m systemd -a &quot;name=nginx&quot; --become\nansible all -m command -a &quot;systemctl status nginx&quot; --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug_vars=true&quot; --tags debug_vars</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://molecule.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Molecule Testing</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"31 min","wordCount":6191,"lastBuilt":"2025-09-14T06:13:09.503Z"},{"name":"certbot","displayName":"Certbot","slug":"certbot","description":"Repo for certbot","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/certbot","updatedAt":"2025-09-08T03:05:44Z","createdAt":"2025-09-08T03:05:34Z","readmeRaw":"## 👋 Welcome to certbot 🚀  \n\nDescription  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-certbot\" class=\"mobile-header\">👋 Welcome to certbot 🚀  </h2>\n<p class=\"mobile-paragraph\">Description  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":14,"lastBuilt":"2025-09-14T06:13:23.708Z"},{"name":"code-server","displayName":"Code Server","slug":"code-server","description":"Repo for code-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/code-server","updatedAt":"2025-09-08T03:06:11Z","createdAt":"2025-09-08T03:06:01Z","readmeRaw":"## 👋 Welcome to code-server 🚀  \n\ncode-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-code-server\" class=\"mobile-header\">👋 Welcome to code-server 🚀  </h2>\n<p class=\"mobile-paragraph\">code-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:23.436Z"},{"name":"discourse","displayName":"Discourse","slug":"discourse","description":"Repo for discourse","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/discourse","updatedAt":"2025-09-08T03:06:31Z","createdAt":"2025-09-08T03:06:20Z","readmeRaw":"## 👋 Welcome to discourse 🚀  \n\ndiscourse README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-discourse\" class=\"mobile-header\">👋 Welcome to discourse 🚀  </h2>\n<p class=\"mobile-paragraph\">discourse README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:23.152Z"},{"name":"drupal","displayName":"Drupal","slug":"drupal","description":"Repo for drupal","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/drupal","updatedAt":"2025-09-08T03:06:48Z","createdAt":"2025-09-08T03:06:38Z","readmeRaw":"## 👋 Welcome to drupal 🚀  \n\ndrupal README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-drupal\" class=\"mobile-header\">👋 Welcome to drupal 🚀  </h2>\n<p class=\"mobile-paragraph\">drupal README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:22.824Z"},{"name":"elasticsearch","displayName":"Elasticsearch","slug":"elasticsearch","description":"Repo for elasticsearch","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/elasticsearch","updatedAt":"2025-09-14T03:45:07Z","createdAt":"2025-09-08T03:06:51Z","readmeRaw":"# Elasticsearch Installation Guide\n\nElasticsearch is a free and open-source distributed, RESTful search and analytics engine. Originally developed by Shay Banon and now maintained by Elastic N.V., Elasticsearch is built on Apache Lucene and designed for horizontal scalability, reliability, and real-time search. It serves as a FOSS alternative to commercial search solutions like Amazon CloudSearch, Azure Cognitive Search, or Splunk Enterprise, offering enterprise-grade features including full-text search, aggregations, and analytics without licensing costs, with features like distributed architecture, RESTful API, and multi-tenancy.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 4GB minimum (16GB+ recommended for production)\n  - Storage: 20GB minimum (SSD strongly recommended for performance)\n  - Network: Stable connectivity for cluster communication\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9200 (HTTP/REST API)\n  - Port 9300 (Node communication)\n  - Additional ports for cluster discovery\n- **Dependencies**:\n  - Java 11 or Java 17 (OpenJDK recommended)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install Java (OpenJDK)\nsudo yum install -y java-11-openjdk java-11-openjdk-devel\n\n# Import Elasticsearch GPG key\nsudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch\n\n# Create Elasticsearch repository\nsudo tee /etc/yum.repos.d/elasticsearch.repo <<EOF\n[elasticsearch]\nname=Elasticsearch repository for 8.x packages\nbaseurl=https://artifacts.elastic.co/packages/8.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=0\nautorefresh=1\ntype=rpm-md\nEOF\n\n# Install Elasticsearch\nsudo yum install -y --enablerepo=elasticsearch elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --permanent --add-port=9300/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncurl -X GET \"localhost:9200/\"\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install Java (OpenJDK)\nsudo apt install -y openjdk-11-jdk\n\n# Install prerequisite packages\nsudo apt install -y wget gnupg apt-transport-https\n\n# Import Elasticsearch GPG key\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/elasticsearch.gpg\n\n# Add Elasticsearch repository\necho \"deb https://artifacts.elastic.co/packages/8.x/apt stable main\" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list\n\n# Update package index\nsudo apt update\n\n# Install Elasticsearch\nsudo apt install -y elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configure firewall\nsudo ufw allow 9200\nsudo ufw allow 9300\n```\n\n### Arch Linux\n\n```bash\n# Install Java\nsudo pacman -S jdk11-openjdk\n\n# Elasticsearch is available in AUR\nyay -S elasticsearch\n\n# Alternative: Install from AUR with makepkg\ngit clone https://aur.archlinux.org/elasticsearch.git\ncd elasticsearch\nmakepkg -si\n\n# Create elasticsearch user and group\nsudo useradd -r -s /sbin/nologin elasticsearch\n\n# Create necessary directories\nsudo mkdir -p /var/lib/elasticsearch /var/log/elasticsearch\nsudo chown elasticsearch:elasticsearch /var/lib/elasticsearch /var/log/elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configuration location: /etc/elasticsearch/\n```\n\n### Alpine Linux\n\n```bash\n# Install Java\napk add --no-cache openjdk11\n\n# Elasticsearch is not officially packaged for Alpine\n# Use Docker for Elasticsearch on Alpine:\n\n# Install Docker\napk add --no-cache docker docker-compose\n\n# Enable and start Docker\nrc-update add docker default\nrc-service docker start\n\n# Run Elasticsearch container\ndocker run -d \\\n  --name elasticsearch \\\n  --restart unless-stopped \\\n  -p 9200:9200 -p 9300:9300 \\\n  -e \"discovery.type=single-node\" \\\n  -e \"xpack.security.enabled=false\" \\\n  -v /var/lib/elasticsearch:/usr/share/elasticsearch/data \\\n  elasticsearch:8.11.3\n\n# Verify installation\ncurl -X GET \"localhost:9200/\"\n```\n\n### openSUSE/SLES\n\n```bash\n# Install Java\nsudo zypper install -y java-11-openjdk java-11-openjdk-devel\n\n# Elasticsearch is not officially packaged for openSUSE/SLES\n# Use Docker or manual installation:\n\n# Method 1: Docker installation\nsudo zypper install -y docker docker-compose\nsudo systemctl enable --now docker\n\ndocker run -d \\\n  --name elasticsearch \\\n  --restart unless-stopped \\\n  -p 9200:9200 -p 9300:9300 \\\n  -e \"discovery.type=single-node\" \\\n  -e \"xpack.security.enabled=false\" \\\n  -v /var/lib/elasticsearch:/usr/share/elasticsearch/data \\\n  elasticsearch:8.11.3\n\n# Method 2: Manual installation from tarball\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.11.3-linux-x86_64.tar.gz\ntar -xzf elasticsearch-8.11.3-linux-x86_64.tar.gz\nsudo mv elasticsearch-8.11.3 /usr/local/elasticsearch\n\n# Create elasticsearch user and directories\nsudo useradd -r elasticsearch\nsudo mkdir -p /var/lib/elasticsearch /var/log/elasticsearch\nsudo chown elasticsearch:elasticsearch /var/lib/elasticsearch /var/log/elasticsearch\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew tap elastic/tap\nbrew install elastic/tap/elasticsearch-full\n\n# Start Elasticsearch service\nbrew services start elastic/tap/elasticsearch-full\n\n# Or run manually\nelasticsearch\n\n# Configuration location: /usr/local/etc/elasticsearch/\n# Alternative: /opt/homebrew/etc/elasticsearch/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Install Java\npkg install openjdk11\n\n# Install Elasticsearch from ports\ncd /usr/ports/textproc/elasticsearch8\nmake install clean\n\n# Enable Elasticsearch\necho 'elasticsearch_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice elasticsearch start\n\n# Configuration location: /usr/local/etc/elasticsearch/\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install elasticsearch\n\n# Method 2: Using Scoop\nscoop bucket add java\nscoop install openjdk11\nscoop bucket add extras\nscoop install elasticsearch\n\n# Method 3: Manual installation\n# Download from https://www.elastic.co/downloads/elasticsearch\n# Extract to C:\\elasticsearch\n\n# Install as Windows service\n\"C:\\elasticsearch\\bin\\elasticsearch-service.bat\" install\n\n# Start service\nnet start Elasticsearch\n\n# Configuration location: C:\\elasticsearch\\config\\elasticsearch.yml\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create elasticsearch user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/elasticsearch -s /sbin/nologin -c \"Elasticsearch\" elasticsearch\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/elasticsearch/elasticsearch.yml`\n- Debian/Ubuntu: `/etc/elasticsearch/elasticsearch.yml`\n- Arch Linux: `/etc/elasticsearch/elasticsearch.yml`\n- Alpine Linux: Docker container configuration\n- openSUSE/SLES: `/etc/elasticsearch/elasticsearch.yml` (manual installation)\n- macOS: `/usr/local/etc/elasticsearch/elasticsearch.yml`\n- FreeBSD: `/usr/local/etc/elasticsearch/elasticsearch.yml`\n- Windows: `C:\\elasticsearch\\config\\elasticsearch.yml`\n\n3. **Essential settings to change**:\n\n```yaml\n# /etc/elasticsearch/elasticsearch.yml\ncluster.name: my-application\nnode.name: node-1\n\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\n\nnetwork.host: 127.0.0.1\nhttp.port: 9200\n\ndiscovery.type: single-node\n\n# Security (disable for initial setup, enable for production)\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\n# Memory settings\nbootstrap.memory_lock: true\n\n# Index settings\naction.auto_create_index: .monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if Elasticsearch is running\nsudo systemctl status elasticsearch\n\n# Test REST API\ncurl -X GET \"localhost:9200/\"\n\n# Check cluster health\ncurl -X GET \"localhost:9200/_cluster/health?pretty\"\n\n# Check nodes\ncurl -X GET \"localhost:9200/_cat/nodes?v\"\n\n# Test indexing and searching\ncurl -X PUT \"localhost:9200/test_index/_doc/1\" -H 'Content-Type: application/json' -d '{\"message\": \"Hello Elasticsearch\"}'\ncurl -X GET \"localhost:9200/test_index/_search?pretty\"\n```\n\n**WARNING:** Enable X-Pack security for production deployments!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Elasticsearch to start on boot\nsudo systemctl enable elasticsearch\n\n# Start Elasticsearch\nsudo systemctl start elasticsearch\n\n# Stop Elasticsearch\nsudo systemctl stop elasticsearch\n\n# Restart Elasticsearch\nsudo systemctl restart elasticsearch\n\n# Reload configuration (not supported, requires restart)\nsudo systemctl restart elasticsearch\n\n# Check status\nsudo systemctl status elasticsearch\n\n# View logs\nsudo journalctl -u elasticsearch -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Elasticsearch runs in Docker container on Alpine\ndocker start elasticsearch\ndocker stop elasticsearch\ndocker restart elasticsearch\n\n# Check status\ndocker ps | grep elasticsearch\n\n# View logs\ndocker logs -f elasticsearch\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'elasticsearch_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Elasticsearch\nservice elasticsearch start\n\n# Stop Elasticsearch\nservice elasticsearch stop\n\n# Restart Elasticsearch\nservice elasticsearch restart\n\n# Check status\nservice elasticsearch status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start elastic/tap/elasticsearch-full\nbrew services stop elastic/tap/elasticsearch-full\nbrew services restart elastic/tap/elasticsearch-full\n\n# Check status\nbrew services list | grep elasticsearch\n\n# Manual control\nelasticsearch\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Elasticsearch service\nnet start Elasticsearch\n\n# Stop Elasticsearch service\nnet stop Elasticsearch\n\n# Using PowerShell\nStart-Service Elasticsearch\nStop-Service Elasticsearch\nRestart-Service Elasticsearch\n\n# Check status\nGet-Service Elasticsearch\n\n# View logs\nGet-EventLog -LogName Application -Source Elasticsearch\n```\n\n## Advanced Configuration\n\n### Cluster Configuration\n\n```yaml\n# Multi-node cluster configuration\ncluster.name: production-cluster\nnode.name: node-1\nnode.roles: [master, data, ingest]\n\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ntransport.port: 9300\n\ndiscovery.seed_hosts: [\"node1.example.com\", \"node2.example.com\", \"node3.example.com\"]\ncluster.initial_master_nodes: [\"node-1\", \"node-2\", \"node-3\"]\n\n# Node-specific roles\n# Master-eligible node\nnode.roles: [master]\n\n# Data node\nnode.roles: [data]\n\n# Ingest node\nnode.roles: [ingest]\n\n# Coordinating only node\nnode.roles: []\n```\n\n### Memory and Performance Configuration\n\n```yaml\n# JVM heap settings (in elasticsearch.yml or jvm.options)\n# Set via environment variables:\nES_JAVA_OPTS: \"-Xms4g -Xmx4g\"\n\n# Thread pool settings\nthread_pool:\n  write:\n    size: 8\n    queue_size: 200\n  search:\n    size: 13\n    queue_size: 1000\n\n# Index settings\nindices.memory.index_buffer_size: 20%\nindices.breaker.total.use_real_memory: true\n```\n\n### Advanced Security Settings\n\n```yaml\n# X-Pack Security configuration\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\n# SSL/TLS configuration\nxpack.security.http.ssl.enabled: true\nxpack.security.http.ssl.keystore.path: certs/http.p12\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: certs/transport.p12\nxpack.security.transport.ssl.truststore.path: certs/transport.p12\n\n# Authentication realms\nxpack.security.authc.realms:\n  native:\n    native1:\n      order: 0\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/elasticsearch\nupstream elasticsearch_backend {\n    server 127.0.0.1:9200 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:9201 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 80;\n    server_name elasticsearch.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name elasticsearch.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/elasticsearch.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/elasticsearch.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n    location / {\n        proxy_pass http://elasticsearch_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n# /etc/apache2/sites-available/elasticsearch.conf\n<VirtualHost *:443>\n    ServerName elasticsearch.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/elasticsearch.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/elasticsearch.example.com/privkey.pem\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:9200/\n    ProxyPassReverse / http://localhost:9200/\n    \n    Header always set Strict-Transport-Security \"max-age=63072000\"\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend elasticsearch_frontend\n    bind *:9200 ssl crt /etc/haproxy/certs/elasticsearch.pem\n    mode http\n    option httplog\n    default_backend elasticsearch_backend\n\nbackend elasticsearch_backend\n    mode http\n    balance roundrobin\n    option httpchk GET /_cluster/health\n    server elasticsearch1 127.0.0.1:9200 check\n    server elasticsearch2 127.0.0.1:9201 check backup\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate certificates using Elasticsearch's certificate tool\ncd /usr/share/elasticsearch\nsudo bin/elasticsearch-certutil ca --pem --out /tmp/ca.zip\nsudo unzip /tmp/ca.zip -d /tmp/ca\nsudo bin/elasticsearch-certutil cert --ca-cert /tmp/ca/ca.crt --ca-key /tmp/ca/ca.key --pem --out /tmp/certs.zip\nsudo unzip /tmp/certs.zip -d /tmp/certs\n\n# Create certificates directory\nsudo mkdir -p /etc/elasticsearch/certs\nsudo cp /tmp/ca/ca.crt /etc/elasticsearch/certs/\nsudo cp /tmp/certs/instance/instance.crt /etc/elasticsearch/certs/\nsudo cp /tmp/certs/instance/instance.key /etc/elasticsearch/certs/\n\n# Create keystore\nsudo bin/elasticsearch-keystore create\nsudo bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password\nsudo bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password\n\n# Set permissions\nsudo chown -R elasticsearch:elasticsearch /etc/elasticsearch/certs\nsudo chmod 600 /etc/elasticsearch/certs/*\n```\n\n### User Management and Authentication\n\n```bash\n# Set passwords for built-in users (run after enabling security)\nsudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto\n\n# Create custom users\ncurl -X POST \"localhost:9200/_security/user/appuser\" -H 'Content-Type: application/json' -u elastic:password -d'\n{\n  \"password\" : \"SecurePassword123!\",\n  \"roles\" : [ \"kibana_admin\", \"monitoring_user\" ],\n  \"full_name\" : \"Application User\",\n  \"email\" : \"appuser@example.com\"\n}'\n\n# Create custom roles\ncurl -X POST \"localhost:9200/_security/role/log_reader\" -H 'Content-Type: application/json' -u elastic:password -d'\n{\n  \"cluster\": [\"monitor\"],\n  \"indices\": [\n    {\n      \"names\": [\"logs-*\"],\n      \"privileges\": [\"read\", \"view_index_metadata\"]\n    }\n  ]\n}'\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 9200\nsudo ufw allow from 192.168.1.0/24 to any port 9300\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=elasticsearch\nsudo firewall-cmd --permanent --zone=elasticsearch --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=elasticsearch --add-port=9200/tcp\nsudo firewall-cmd --permanent --zone=elasticsearch --add-port=9300/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9200 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9300 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port { 9200, 9300 }\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Elasticsearch HTTP\" -Direction Inbound -Protocol TCP -LocalPort 9200 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName \"Elasticsearch Transport\" -Direction Inbound -Protocol TCP -LocalPort 9300 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Index Templates and Mappings\n\n```bash\n# Create index template\ncurl -X PUT \"localhost:9200/_index_template/logs_template\" -H 'Content-Type: application/json' -d'\n{\n  \"index_patterns\": [\"logs-*\"],\n  \"template\": {\n    \"settings\": {\n      \"number_of_shards\": 1,\n      \"number_of_replicas\": 1,\n      \"index.refresh_interval\": \"30s\"\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"timestamp\": {\n          \"type\": \"date\"\n        },\n        \"level\": {\n          \"type\": \"keyword\"\n        },\n        \"message\": {\n          \"type\": \"text\",\n          \"analyzer\": \"standard\"\n        },\n        \"host\": {\n          \"type\": \"keyword\"\n        }\n      }\n    }\n  }\n}'\n\n# Create index with custom settings\ncurl -X PUT \"localhost:9200/my_index\" -H 'Content-Type: application/json' -d'\n{\n  \"settings\": {\n    \"number_of_shards\": 3,\n    \"number_of_replicas\": 2,\n    \"analysis\": {\n      \"analyzer\": {\n        \"custom_analyzer\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\"lowercase\", \"asciifolding\"]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"title\": {\n        \"type\": \"text\",\n        \"analyzer\": \"custom_analyzer\"\n      },\n      \"content\": {\n        \"type\": \"text\"\n      },\n      \"tags\": {\n        \"type\": \"keyword\"\n      },\n      \"created_at\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}'\n```\n\n### Index Lifecycle Management\n\n```bash\n# Create ILM policy\ncurl -X PUT \"localhost:9200/_ilm/policy/logs_policy\" -H 'Content-Type: application/json' -d'\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"10gb\",\n            \"max_age\": \"7d\"\n          }\n        }\n      },\n      \"warm\": {\n        \"min_age\": \"7d\",\n        \"actions\": {\n          \"allocate\": {\n            \"number_of_replicas\": 0\n          }\n        }\n      },\n      \"cold\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"allocate\": {\n            \"number_of_replicas\": 0\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"90d\"\n      }\n    }\n  }\n}'\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Elasticsearch-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# Elasticsearch optimizations\nvm.max_map_count = 262144\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nEOF\n\nsudo sysctl -p\n\n# Disable swap\nsudo swapoff -a\necho 'vm.swappiness=1' | sudo tee -a /etc/sysctl.conf\n\n# Set file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\nelasticsearch soft nofile 65535\nelasticsearch hard nofile 65535\nelasticsearch soft memlock unlimited\nelasticsearch hard memlock unlimited\nEOF\n```\n\n### JVM and Memory Tuning\n\n```bash\n# JVM options (/etc/elasticsearch/jvm.options)\n# Set heap size (50% of available RAM, max 32GB)\n-Xms8g\n-Xmx8g\n\n# GC settings\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=16m\n-XX:+UnlockExperimentalVMOptions\n-XX:+UnlockDiagnosticVMOptions\n-XX:+G1PrintRegionRememberedSetInfo\n\n# Memory lock\n-XX:+AlwaysPreTouch\n```\n\n### Index and Query Optimization\n\n```bash\n# Index optimization settings\ncurl -X PUT \"localhost:9200/my_index/_settings\" -H 'Content-Type: application/json' -d'\n{\n  \"index\": {\n    \"refresh_interval\": \"30s\",\n    \"number_of_replicas\": 1,\n    \"routing.allocation.total_shards_per_node\": 3,\n    \"translog.flush_threshold_size\": \"1gb\",\n    \"translog.sync_interval\": \"30s\"\n  }\n}'\n\n# Force merge indices\ncurl -X POST \"localhost:9200/my_index/_forcemerge?max_num_segments=1\"\n\n# Clear cache\ncurl -X POST \"localhost:9200/_cache/clear\"\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Cluster health\ncurl -X GET \"localhost:9200/_cluster/health?pretty\"\n\n# Node statistics\ncurl -X GET \"localhost:9200/_nodes/stats?pretty\"\n\n# Index statistics\ncurl -X GET \"localhost:9200/_stats?pretty\"\n\n# Hot threads\ncurl -X GET \"localhost:9200/_nodes/hot_threads\"\n\n# Task management\ncurl -X GET \"localhost:9200/_tasks?detailed=true&actions=*search\"\n\n# Pending cluster tasks\ncurl -X GET \"localhost:9200/_cluster/pending_tasks\"\n```\n\n### External Monitoring Setup\n\n```bash\n# Install Metricbeat for monitoring\ncurl -L -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-8.11.3-linux-x86_64.tar.gz\ntar xzvf metricbeat-8.11.3-linux-x86_64.tar.gz\nsudo mv metricbeat-8.11.3-linux-x86_64 /usr/local/metricbeat\n\n# Configure Metricbeat for Elasticsearch monitoring\nsudo tee /usr/local/metricbeat/metricbeat.yml <<EOF\nmetricbeat.modules:\n- module: elasticsearch\n  metricsets:\n    - node\n    - node_stats\n    - cluster_stats\n  period: 10s\n  hosts: [\"localhost:9200\"]\n\noutput.elasticsearch:\n  hosts: [\"localhost:9200\"]\n\nsetup.kibana:\n  host: \"localhost:5601\"\nEOF\n\n# Create systemd service for Metricbeat\nsudo tee /etc/systemd/system/metricbeat.service <<EOF\n[Unit]\nDescription=Metricbeat\nAfter=network.target\n\n[Service]\nType=simple\nUser=elasticsearch\nWorkingDirectory=/usr/local/metricbeat\nExecStart=/usr/local/metricbeat/metricbeat -c /usr/local/metricbeat/metricbeat.yml\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now metricbeat\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# elasticsearch-health-check.sh\n\n# Check Elasticsearch service\nif ! systemctl is-active elasticsearch >/dev/null 2>&1; then\n    echo \"CRITICAL: Elasticsearch service is not running\"\n    exit 2\nfi\n\n# Check HTTP API\nif ! curl -s http://localhost:9200/ >/dev/null; then\n    echo \"CRITICAL: Cannot connect to Elasticsearch HTTP API\"\n    exit 2\nfi\n\n# Check cluster health\nCLUSTER_STATUS=$(curl -s http://localhost:9200/_cluster/health | jq -r '.status')\ncase $CLUSTER_STATUS in\n    \"green\")\n        echo \"OK: Cluster health is green\"\n        exit 0\n        ;;\n    \"yellow\")\n        echo \"WARNING: Cluster health is yellow\"\n        exit 1\n        ;;\n    \"red\")\n        echo \"CRITICAL: Cluster health is red\"\n        exit 2\n        ;;\n    *)\n        echo \"UNKNOWN: Cannot determine cluster health\"\n        exit 3\n        ;;\nesac\n```\n\n## Backup and Restore\n\n### Snapshot Repository Setup\n\n```bash\n# Create snapshot repository\ncurl -X PUT \"localhost:9200/_snapshot/backup_repo\" -H 'Content-Type: application/json' -d'\n{\n  \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"/backup/elasticsearch\",\n    \"compress\": true,\n    \"max_snapshot_bytes_per_sec\": \"50mb\",\n    \"max_restore_bytes_per_sec\": \"50mb\"\n  }\n}'\n\n# Create backup directory\nsudo mkdir -p /backup/elasticsearch\nsudo chown elasticsearch:elasticsearch /backup/elasticsearch\n\n# Add repository path to elasticsearch.yml\necho 'path.repo: [\"/backup/elasticsearch\"]' | sudo tee -a /etc/elasticsearch/elasticsearch.yml\nsudo systemctl restart elasticsearch\n```\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# elasticsearch-backup.sh\n\nSNAPSHOT_NAME=\"snapshot-$(date +%Y%m%d_%H%M%S)\"\n\n# Create snapshot\ncurl -X PUT \"localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME?wait_for_completion=true\" -H 'Content-Type: application/json' -d'\n{\n  \"indices\": \"*\",\n  \"ignore_unavailable\": true,\n  \"include_global_state\": true,\n  \"metadata\": {\n    \"taken_by\": \"elasticsearch-backup-script\",\n    \"taken_because\": \"scheduled backup\"\n  }\n}'\n\n# Verify snapshot\nSNAPSHOT_STATUS=$(curl -s \"localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME\" | jq -r '.snapshots[0].state')\n\nif [ \"$SNAPSHOT_STATUS\" = \"SUCCESS\" ]; then\n    echo \"Backup completed successfully: $SNAPSHOT_NAME\"\nelse\n    echo \"Backup failed: $SNAPSHOT_NAME\"\n    exit 1\nfi\n\n# Clean up old snapshots (keep last 7 days)\ncurl -s \"localhost:9200/_snapshot/backup_repo/_all\" | jq -r '.snapshots[] | select(.end_time_in_millis < '$(date -d '7 days ago' +%s000)') | .snapshot' | while read snapshot; do\n    curl -X DELETE \"localhost:9200/_snapshot/backup_repo/$snapshot\"\n    echo \"Deleted old snapshot: $snapshot\"\ndone\n\necho \"Elasticsearch backup completed: $SNAPSHOT_NAME\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# elasticsearch-restore.sh\n\nSNAPSHOT_NAME=\"$1\"\nif [ -z \"$SNAPSHOT_NAME\" ]; then\n    echo \"Usage: $0 <snapshot-name>\"\n    echo \"Available snapshots:\"\n    curl -s \"localhost:9200/_snapshot/backup_repo/_all\" | jq -r '.snapshots[].snapshot'\n    exit 1\nfi\n\n# Close indices before restore\ncurl -X POST \"localhost:9200/_all/_close\"\n\n# Restore snapshot\ncurl -X POST \"localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME/_restore?wait_for_completion=true\" -H 'Content-Type: application/json' -d'\n{\n  \"indices\": \"*\",\n  \"ignore_unavailable\": true,\n  \"include_global_state\": true\n}'\n\necho \"Restore completed from snapshot: $SNAPSHOT_NAME\"\n```\n\n### Automated Backup\n\n```bash\n# Create cron job for daily backups\necho \"0 2 * * * /usr/local/bin/elasticsearch-backup.sh\" | sudo crontab -\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Elasticsearch won't start**:\n```bash\n# Check logs\nsudo journalctl -u elasticsearch -f\nsudo tail -f /var/log/elasticsearch/elasticsearch.log\n\n# Check Java version\njava -version\n\n# Check memory settings\ngrep -E \"Xms|Xmx\" /etc/elasticsearch/jvm.options\n\n# Check disk space\ndf -h /var/lib/elasticsearch\n```\n\n2. **Out of memory errors**:\n```bash\n# Check heap usage\ncurl -X GET \"localhost:9200/_nodes/stats/jvm?pretty\"\n\n# Check field data cache\ncurl -X GET \"localhost:9200/_nodes/stats/indices/fielddata?pretty\"\n\n# Clear field data cache\ncurl -X POST \"localhost:9200/_cache/clear?fielddata=true\"\n```\n\n3. **Slow queries**:\n```bash\n# Enable slow log\ncurl -X PUT \"localhost:9200/_all/_settings\" -H 'Content-Type: application/json' -d'\n{\n  \"index.search.slowlog.threshold.query.warn\": \"10s\",\n  \"index.search.slowlog.threshold.query.info\": \"5s\",\n  \"index.search.slowlog.threshold.query.debug\": \"2s\",\n  \"index.search.slowlog.threshold.query.trace\": \"500ms\"\n}'\n\n# Check slow queries\nsudo tail -f /var/log/elasticsearch/*_index_search_slowlog.log\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\ncurl -X PUT \"localhost:9200/_cluster/settings\" -H 'Content-Type: application/json' -d'\n{\n  \"transient\": {\n    \"logger.org.elasticsearch\": \"DEBUG\"\n  }\n}'\n\n# Check cluster state\ncurl -X GET \"localhost:9200/_cluster/state?pretty\"\n\n# Explain API for query analysis\ncurl -X GET \"localhost:9200/my_index/_search\" -H 'Content-Type: application/json' -d'\n{\n  \"explain\": true,\n  \"query\": {\n    \"match\": {\n      \"title\": \"search term\"\n    }\n  }\n}'\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update elasticsearch\nsudo yum update elasticsearch\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade elasticsearch\n\n# Arch Linux\nyay -Syu elasticsearch\n\n# macOS\nbrew upgrade elastic/tap/elasticsearch-full\n\n# Docker (Alpine/openSUSE)\ndocker pull elasticsearch:8.11.3\ndocker stop elasticsearch\ndocker rm elasticsearch\n# Re-run docker run command with new image\n\n# Always backup before updates\n./elasticsearch-backup.sh\n\n# Restart after updates\nsudo systemctl restart elasticsearch\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# elasticsearch-maintenance.sh\n\n# Force merge old indices\ncurl -X POST \"localhost:9200/logs-$(date -d '1 week ago' +%Y.%m.%d)/_forcemerge?max_num_segments=1\"\n\n# Clear caches\ncurl -X POST \"localhost:9200/_cache/clear\"\n\n# Optimize indices\ncurl -X POST \"localhost:9200/_optimize\"\n\n# Update index settings for better performance\ncurl -X PUT \"localhost:9200/_all/_settings\" -H 'Content-Type: application/json' -d'\n{\n  \"index\": {\n    \"refresh_interval\": \"30s\"\n  }\n}'\n\necho \"Elasticsearch maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/elasticsearch-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/elasticsearch <<EOF\n/var/log/elasticsearch/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 elasticsearch elasticsearch\n    postrotate\n        systemctl restart elasticsearch > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Python Integration\n\n```python\n# Using elasticsearch-py\nfrom elasticsearch import Elasticsearch\n\n# Connect to Elasticsearch\nes = Elasticsearch(\n    hosts=[{'host': 'localhost', 'port': 9200}],\n    http_auth=('elastic', 'password'),\n    use_ssl=True,\n    verify_certs=True,\n    ca_certs='/etc/elasticsearch/certs/ca.crt',\n)\n\n# Index a document\ndoc = {\n    'title': 'Sample Document',\n    'content': 'This is a sample document for testing',\n    'timestamp': '2024-01-15T10:30:00'\n}\nes.index(index='my_index', id=1, body=doc)\n\n# Search documents\nresponse = es.search(\n    index='my_index',\n    body={\n        'query': {\n            'match': {\n                'content': 'sample'\n            }\n        }\n    }\n)\nprint(response['hits'])\n```\n\n### Node.js Integration\n\n```javascript\n// Using @elastic/elasticsearch\nconst { Client } = require('@elastic/elasticsearch');\n\nconst client = new Client({\n  node: 'https://localhost:9200',\n  auth: {\n    username: 'elastic',\n    password: 'password'\n  },\n  tls: {\n    ca: fs.readFileSync('/etc/elasticsearch/certs/ca.crt'),\n    rejectUnauthorized: true\n  }\n});\n\n// Index a document\nasync function indexDocument() {\n  const response = await client.index({\n    index: 'my_index',\n    id: 1,\n    body: {\n      title: 'Sample Document',\n      content: 'This is a sample document for testing',\n      timestamp: new Date()\n    }\n  });\n  console.log(response);\n}\n\n// Search documents\nasync function searchDocuments() {\n  const response = await client.search({\n    index: 'my_index',\n    body: {\n      query: {\n        match: {\n          content: 'sample'\n        }\n      }\n    }\n  });\n  console.log(response.body.hits);\n}\n```\n\n### Java Integration\n\n```java\n// Using Elasticsearch Java client\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.common.xcontent.XContentType;\n\nRestHighLevelClient client = new RestHighLevelClient(\n    RestClient.builder(new HttpHost(\"localhost\", 9200, \"https\"))\n        .setHttpClientConfigCallback(httpClientBuilder -> \n            httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)\n                .setSSLContext(sslContext))\n);\n\n// Index a document\nIndexRequest indexRequest = new IndexRequest(\"my_index\")\n    .id(\"1\")\n    .source(\"{\\n\" +\n        \"\\\"title\\\":\\\"Sample Document\\\",\\n\" +\n        \"\\\"content\\\":\\\"This is a sample document for testing\\\",\\n\" +\n        \"\\\"timestamp\\\":\\\"2024-01-15T10:30:00\\\"\\n\" +\n        \"}\", XContentType.JSON);\n\nclient.index(indexRequest, RequestOptions.DEFAULT);\n```\n\n### Logstash Integration\n\n```ruby\n# logstash.conf\ninput {\n  beats {\n    port => 5044\n  }\n}\n\nfilter {\n  if [fields][log_type] == \"apache\" {\n    grok {\n      match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }\n    }\n    date {\n      match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"localhost:9200\"]\n    user => \"logstash_user\"\n    password => \"logstash_password\"\n    index => \"logs-%{+YYYY.MM.dd}\"\n  }\n}\n```\n\n## Additional Resources\n\n- [Official Elasticsearch Documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html)\n- [Elasticsearch Security Guide](https://www.elastic.co/guide/en/elasticsearch/reference/current/security-minimal-setup.html)\n- [Performance Tuning Guide](https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html)\n- [Index Lifecycle Management](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-lifecycle-management.html)\n- [Elasticsearch Cluster Setup](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-bootstrap-cluster.html)\n- [Elastic Stack Community](https://discuss.elastic.co/)\n- [Elasticsearch Blog](https://www.elastic.co/blog/category/elasticsearch)\n- [Best Practices Guide](https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"elasticsearch-installation-guide\" class=\"mobile-header\">Elasticsearch Installation Guide</h1>\n<p class=\"mobile-paragraph\">Elasticsearch is a free and open-source distributed, RESTful search and analytics engine. Originally developed by Shay Banon and now maintained by Elastic N.V., Elasticsearch is built on Apache Lucene and designed for horizontal scalability, reliability, and real-time search. It serves as a FOSS alternative to commercial search solutions like Amazon CloudSearch, Azure Cognitive Search, or Splunk Enterprise, offering enterprise-grade features including full-text search, aggregations, and analytics without licensing costs, with features like distributed architecture, RESTful API, and multi-tenancy.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum (16GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 20GB minimum (SSD strongly recommended for performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for cluster communication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9200 (HTTP/REST API)</li>\n<li class=\"mobile-list-item\">Port 9300 (Node communication)</li>\n<li class=\"mobile-list-item\">Additional ports for cluster discovery</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Java 11 or Java 17 (OpenJDK recommended)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java (OpenJDK)\nsudo yum install -y java-11-openjdk java-11-openjdk-devel\n\n# Import Elasticsearch GPG key\nsudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch\n\n# Create Elasticsearch repository\nsudo tee /etc/yum.repos.d/elasticsearch.repo &lt;&lt;EOF\n[elasticsearch]\nname=Elasticsearch repository for 8.x packages\nbaseurl=https://artifacts.elastic.co/packages/8.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=0\nautorefresh=1\ntype=rpm-md\nEOF\n\n# Install Elasticsearch\nsudo yum install -y --enablerepo=elasticsearch elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9200/tcp\nsudo firewall-cmd --permanent --add-port=9300/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncurl -X GET &quot;localhost:9200/&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install Java (OpenJDK)\nsudo apt install -y openjdk-11-jdk\n\n# Install prerequisite packages\nsudo apt install -y wget gnupg apt-transport-https\n\n# Import Elasticsearch GPG key\nwget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/elasticsearch.gpg\n\n# Add Elasticsearch repository\necho &quot;deb https://artifacts.elastic.co/packages/8.x/apt stable main&quot; | sudo tee /etc/apt/sources.list.d/elastic-8.x.list\n\n# Update package index\nsudo apt update\n\n# Install Elasticsearch\nsudo apt install -y elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configure firewall\nsudo ufw allow 9200\nsudo ufw allow 9300</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\nsudo pacman -S jdk11-openjdk\n\n# Elasticsearch is available in AUR\nyay -S elasticsearch\n\n# Alternative: Install from AUR with makepkg\ngit clone https://aur.archlinux.org/elasticsearch.git\ncd elasticsearch\nmakepkg -si\n\n# Create elasticsearch user and group\nsudo useradd -r -s /sbin/nologin elasticsearch\n\n# Create necessary directories\nsudo mkdir -p /var/lib/elasticsearch /var/log/elasticsearch\nsudo chown elasticsearch:elasticsearch /var/lib/elasticsearch /var/log/elasticsearch\n\n# Enable and start service\nsudo systemctl enable --now elasticsearch\n\n# Configuration location: /etc/elasticsearch/</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\napk add --no-cache openjdk11\n\n# Elasticsearch is not officially packaged for Alpine\n# Use Docker for Elasticsearch on Alpine:\n\n# Install Docker\napk add --no-cache docker docker-compose\n\n# Enable and start Docker\nrc-update add docker default\nrc-service docker start\n\n# Run Elasticsearch container\ndocker run -d \\\n  --name elasticsearch \\\n  --restart unless-stopped \\\n  -p 9200:9200 -p 9300:9300 \\\n  -e &quot;discovery.type=single-node&quot; \\\n  -e &quot;xpack.security.enabled=false&quot; \\\n  -v /var/lib/elasticsearch:/usr/share/elasticsearch/data \\\n  elasticsearch:8.11.3\n\n# Verify installation\ncurl -X GET &quot;localhost:9200/&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\nsudo zypper install -y java-11-openjdk java-11-openjdk-devel\n\n# Elasticsearch is not officially packaged for openSUSE/SLES\n# Use Docker or manual installation:\n\n# Method 1: Docker installation\nsudo zypper install -y docker docker-compose\nsudo systemctl enable --now docker\n\ndocker run -d \\\n  --name elasticsearch \\\n  --restart unless-stopped \\\n  -p 9200:9200 -p 9300:9300 \\\n  -e &quot;discovery.type=single-node&quot; \\\n  -e &quot;xpack.security.enabled=false&quot; \\\n  -v /var/lib/elasticsearch:/usr/share/elasticsearch/data \\\n  elasticsearch:8.11.3\n\n# Method 2: Manual installation from tarball\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.11.3-linux-x86_64.tar.gz\ntar -xzf elasticsearch-8.11.3-linux-x86_64.tar.gz\nsudo mv elasticsearch-8.11.3 /usr/local/elasticsearch\n\n# Create elasticsearch user and directories\nsudo useradd -r elasticsearch\nsudo mkdir -p /var/lib/elasticsearch /var/log/elasticsearch\nsudo chown elasticsearch:elasticsearch /var/lib/elasticsearch /var/log/elasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew tap elastic/tap\nbrew install elastic/tap/elasticsearch-full\n\n# Start Elasticsearch service\nbrew services start elastic/tap/elasticsearch-full\n\n# Or run manually\nelasticsearch\n\n# Configuration location: /usr/local/etc/elasticsearch/\n# Alternative: /opt/homebrew/etc/elasticsearch/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\npkg install openjdk11\n\n# Install Elasticsearch from ports\ncd /usr/ports/textproc/elasticsearch8\nmake install clean\n\n# Enable Elasticsearch\necho &#039;elasticsearch_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice elasticsearch start\n\n# Configuration location: /usr/local/etc/elasticsearch/</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install elasticsearch\n\n# Method 2: Using Scoop\nscoop bucket add java\nscoop install openjdk11\nscoop bucket add extras\nscoop install elasticsearch\n\n# Method 3: Manual installation\n# Download from https://www.elastic.co/downloads/elasticsearch\n# Extract to C:\\elasticsearch\n\n# Install as Windows service\n&quot;C:\\elasticsearch\\bin\\elasticsearch-service.bat&quot; install\n\n# Start service\nnet start Elasticsearch\n\n# Configuration location: C:\\elasticsearch\\config\\elasticsearch.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create elasticsearch user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/elasticsearch -s /sbin/nologin -c &quot;Elasticsearch&quot; elasticsearch</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: Docker container configuration</li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/elasticsearch/elasticsearch.yml</code> (manual installation)</li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/elasticsearch/elasticsearch.yml</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\elasticsearch\\config\\elasticsearch.yml</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/elasticsearch/elasticsearch.yml\ncluster.name: my-application\nnode.name: node-1\n\npath.data: /var/lib/elasticsearch\npath.logs: /var/log/elasticsearch\n\nnetwork.host: 127.0.0.1\nhttp.port: 9200\n\ndiscovery.type: single-node\n\n# Security (disable for initial setup, enable for production)\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\n# Memory settings\nbootstrap.memory_lock: true\n\n# Index settings\naction.auto_create_index: .monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Elasticsearch is running\nsudo systemctl status elasticsearch\n\n# Test REST API\ncurl -X GET &quot;localhost:9200/&quot;\n\n# Check cluster health\ncurl -X GET &quot;localhost:9200/_cluster/health?pretty&quot;\n\n# Check nodes\ncurl -X GET &quot;localhost:9200/_cat/nodes?v&quot;\n\n# Test indexing and searching\ncurl -X PUT &quot;localhost:9200/test_index/_doc/1&quot; -H &#039;Content-Type: application/json&#039; -d &#039;{&quot;message&quot;: &quot;Hello Elasticsearch&quot;}&#039;\ncurl -X GET &quot;localhost:9200/test_index/_search?pretty&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Enable X-Pack security for production deployments!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Elasticsearch to start on boot\nsudo systemctl enable elasticsearch\n\n# Start Elasticsearch\nsudo systemctl start elasticsearch\n\n# Stop Elasticsearch\nsudo systemctl stop elasticsearch\n\n# Restart Elasticsearch\nsudo systemctl restart elasticsearch\n\n# Reload configuration (not supported, requires restart)\nsudo systemctl restart elasticsearch\n\n# Check status\nsudo systemctl status elasticsearch\n\n# View logs\nsudo journalctl -u elasticsearch -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Elasticsearch runs in Docker container on Alpine\ndocker start elasticsearch\ndocker stop elasticsearch\ndocker restart elasticsearch\n\n# Check status\ndocker ps | grep elasticsearch\n\n# View logs\ndocker logs -f elasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;elasticsearch_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Elasticsearch\nservice elasticsearch start\n\n# Stop Elasticsearch\nservice elasticsearch stop\n\n# Restart Elasticsearch\nservice elasticsearch restart\n\n# Check status\nservice elasticsearch status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start elastic/tap/elasticsearch-full\nbrew services stop elastic/tap/elasticsearch-full\nbrew services restart elastic/tap/elasticsearch-full\n\n# Check status\nbrew services list | grep elasticsearch\n\n# Manual control\nelasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Elasticsearch service\nnet start Elasticsearch\n\n# Stop Elasticsearch service\nnet stop Elasticsearch\n\n# Using PowerShell\nStart-Service Elasticsearch\nStop-Service Elasticsearch\nRestart-Service Elasticsearch\n\n# Check status\nGet-Service Elasticsearch\n\n# View logs\nGet-EventLog -LogName Application -Source Elasticsearch</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"cluster-configuration\" class=\"mobile-header\">Cluster Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Multi-node cluster configuration\ncluster.name: production-cluster\nnode.name: node-1\nnode.roles: [master, data, ingest]\n\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ntransport.port: 9300\n\ndiscovery.seed_hosts: [&quot;node1.example.com&quot;, &quot;node2.example.com&quot;, &quot;node3.example.com&quot;]\ncluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;, &quot;node-3&quot;]\n\n# Node-specific roles\n# Master-eligible node\nnode.roles: [master]\n\n# Data node\nnode.roles: [data]\n\n# Ingest node\nnode.roles: [ingest]\n\n# Coordinating only node\nnode.roles: []</code></pre>\n      </div>\n    </div>\n<h3 id=\"memory-and-performance-configuration\" class=\"mobile-header\">Memory and Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># JVM heap settings (in elasticsearch.yml or jvm.options)\n# Set via environment variables:\nES_JAVA_OPTS: &quot;-Xms4g -Xmx4g&quot;\n\n# Thread pool settings\nthread_pool:\n  write:\n    size: 8\n    queue_size: 200\n  search:\n    size: 13\n    queue_size: 1000\n\n# Index settings\nindices.memory.index_buffer_size: 20%\nindices.breaker.total.use_real_memory: true</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># X-Pack Security configuration\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\n# SSL/TLS configuration\nxpack.security.http.ssl.enabled: true\nxpack.security.http.ssl.keystore.path: certs/http.p12\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: certs/transport.p12\nxpack.security.transport.ssl.truststore.path: certs/transport.p12\n\n# Authentication realms\nxpack.security.authc.realms:\n  native:\n    native1:\n      order: 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/elasticsearch\nupstream elasticsearch_backend {\n    server 127.0.0.1:9200 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:9201 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 80;\n    server_name elasticsearch.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name elasticsearch.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/elasticsearch.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/elasticsearch.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;\n\n    location / {\n        proxy_pass http://elasticsearch_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/elasticsearch.conf\n&lt;VirtualHost *:443&gt;\n    ServerName elasticsearch.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/elasticsearch.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/elasticsearch.example.com/privkey.pem\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:9200/\n    ProxyPassReverse / http://localhost:9200/\n    \n    Header always set Strict-Transport-Security &quot;max-age=63072000&quot;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend elasticsearch_frontend\n    bind *:9200 ssl crt /etc/haproxy/certs/elasticsearch.pem\n    mode http\n    option httplog\n    default_backend elasticsearch_backend\n\nbackend elasticsearch_backend\n    mode http\n    balance roundrobin\n    option httpchk GET /_cluster/health\n    server elasticsearch1 127.0.0.1:9200 check\n    server elasticsearch2 127.0.0.1:9201 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate certificates using Elasticsearch&#039;s certificate tool\ncd /usr/share/elasticsearch\nsudo bin/elasticsearch-certutil ca --pem --out /tmp/ca.zip\nsudo unzip /tmp/ca.zip -d /tmp/ca\nsudo bin/elasticsearch-certutil cert --ca-cert /tmp/ca/ca.crt --ca-key /tmp/ca/ca.key --pem --out /tmp/certs.zip\nsudo unzip /tmp/certs.zip -d /tmp/certs\n\n# Create certificates directory\nsudo mkdir -p /etc/elasticsearch/certs\nsudo cp /tmp/ca/ca.crt /etc/elasticsearch/certs/\nsudo cp /tmp/certs/instance/instance.crt /etc/elasticsearch/certs/\nsudo cp /tmp/certs/instance/instance.key /etc/elasticsearch/certs/\n\n# Create keystore\nsudo bin/elasticsearch-keystore create\nsudo bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password\nsudo bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password\n\n# Set permissions\nsudo chown -R elasticsearch:elasticsearch /etc/elasticsearch/certs\nsudo chmod 600 /etc/elasticsearch/certs/*</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-management-and-authentication\" class=\"mobile-header\">User Management and Authentication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set passwords for built-in users (run after enabling security)\nsudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto\n\n# Create custom users\ncurl -X POST &quot;localhost:9200/_security/user/appuser&quot; -H &#039;Content-Type: application/json&#039; -u elastic:password -d&#039;\n{\n  &quot;password&quot; : &quot;SecurePassword123!&quot;,\n  &quot;roles&quot; : [ &quot;kibana_admin&quot;, &quot;monitoring_user&quot; ],\n  &quot;full_name&quot; : &quot;Application User&quot;,\n  &quot;email&quot; : &quot;appuser@example.com&quot;\n}&#039;\n\n# Create custom roles\ncurl -X POST &quot;localhost:9200/_security/role/log_reader&quot; -H &#039;Content-Type: application/json&#039; -u elastic:password -d&#039;\n{\n  &quot;cluster&quot;: [&quot;monitor&quot;],\n  &quot;indices&quot;: [\n    {\n      &quot;names&quot;: [&quot;logs-*&quot;],\n      &quot;privileges&quot;: [&quot;read&quot;, &quot;view_index_metadata&quot;]\n    }\n  ]\n}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 9200\nsudo ufw allow from 192.168.1.0/24 to any port 9300\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=elasticsearch\nsudo firewall-cmd --permanent --zone=elasticsearch --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=elasticsearch --add-port=9200/tcp\nsudo firewall-cmd --permanent --zone=elasticsearch --add-port=9300/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9200 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9300 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port { 9200, 9300 }\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Elasticsearch HTTP&quot; -Direction Inbound -Protocol TCP -LocalPort 9200 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;Elasticsearch Transport&quot; -Direction Inbound -Protocol TCP -LocalPort 9300 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"index-templates-and-mappings\" class=\"mobile-header\">Index Templates and Mappings</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create index template\ncurl -X PUT &quot;localhost:9200/_index_template/logs_template&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;index_patterns&quot;: [&quot;logs-*&quot;],\n  &quot;template&quot;: {\n    &quot;settings&quot;: {\n      &quot;number_of_shards&quot;: 1,\n      &quot;number_of_replicas&quot;: 1,\n      &quot;index.refresh_interval&quot;: &quot;30s&quot;\n    },\n    &quot;mappings&quot;: {\n      &quot;properties&quot;: {\n        &quot;timestamp&quot;: {\n          &quot;type&quot;: &quot;date&quot;\n        },\n        &quot;level&quot;: {\n          &quot;type&quot;: &quot;keyword&quot;\n        },\n        &quot;message&quot;: {\n          &quot;type&quot;: &quot;text&quot;,\n          &quot;analyzer&quot;: &quot;standard&quot;\n        },\n        &quot;host&quot;: {\n          &quot;type&quot;: &quot;keyword&quot;\n        }\n      }\n    }\n  }\n}&#039;\n\n# Create index with custom settings\ncurl -X PUT &quot;localhost:9200/my_index&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;settings&quot;: {\n    &quot;number_of_shards&quot;: 3,\n    &quot;number_of_replicas&quot;: 2,\n    &quot;analysis&quot;: {\n      &quot;analyzer&quot;: {\n        &quot;custom_analyzer&quot;: {\n          &quot;type&quot;: &quot;custom&quot;,\n          &quot;tokenizer&quot;: &quot;standard&quot;,\n          &quot;filter&quot;: [&quot;lowercase&quot;, &quot;asciifolding&quot;]\n        }\n      }\n    }\n  },\n  &quot;mappings&quot;: {\n    &quot;properties&quot;: {\n      &quot;title&quot;: {\n        &quot;type&quot;: &quot;text&quot;,\n        &quot;analyzer&quot;: &quot;custom_analyzer&quot;\n      },\n      &quot;content&quot;: {\n        &quot;type&quot;: &quot;text&quot;\n      },\n      &quot;tags&quot;: {\n        &quot;type&quot;: &quot;keyword&quot;\n      },\n      &quot;created_at&quot;: {\n        &quot;type&quot;: &quot;date&quot;\n      }\n    }\n  }\n}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"index-lifecycle-management\" class=\"mobile-header\">Index Lifecycle Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create ILM policy\ncurl -X PUT &quot;localhost:9200/_ilm/policy/logs_policy&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;policy&quot;: {\n    &quot;phases&quot;: {\n      &quot;hot&quot;: {\n        &quot;actions&quot;: {\n          &quot;rollover&quot;: {\n            &quot;max_size&quot;: &quot;10gb&quot;,\n            &quot;max_age&quot;: &quot;7d&quot;\n          }\n        }\n      },\n      &quot;warm&quot;: {\n        &quot;min_age&quot;: &quot;7d&quot;,\n        &quot;actions&quot;: {\n          &quot;allocate&quot;: {\n            &quot;number_of_replicas&quot;: 0\n          }\n        }\n      },\n      &quot;cold&quot;: {\n        &quot;min_age&quot;: &quot;30d&quot;,\n        &quot;actions&quot;: {\n          &quot;allocate&quot;: {\n            &quot;number_of_replicas&quot;: 0\n          }\n        }\n      },\n      &quot;delete&quot;: {\n        &quot;min_age&quot;: &quot;90d&quot;\n      }\n    }\n  }\n}&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Elasticsearch-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Elasticsearch optimizations\nvm.max_map_count = 262144\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nEOF\n\nsudo sysctl -p\n\n# Disable swap\nsudo swapoff -a\necho &#039;vm.swappiness=1&#039; | sudo tee -a /etc/sysctl.conf\n\n# Set file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\nelasticsearch soft nofile 65535\nelasticsearch hard nofile 65535\nelasticsearch soft memlock unlimited\nelasticsearch hard memlock unlimited\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"jvm-and-memory-tuning\" class=\"mobile-header\">JVM and Memory Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># JVM options (/etc/elasticsearch/jvm.options)\n# Set heap size (50% of available RAM, max 32GB)\n-Xms8g\n-Xmx8g\n\n# GC settings\n-XX:+UseG1GC\n-XX:G1HeapRegionSize=16m\n-XX:+UnlockExperimentalVMOptions\n-XX:+UnlockDiagnosticVMOptions\n-XX:+G1PrintRegionRememberedSetInfo\n\n# Memory lock\n-XX:+AlwaysPreTouch</code></pre>\n      </div>\n    </div>\n<h3 id=\"index-and-query-optimization\" class=\"mobile-header\">Index and Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Index optimization settings\ncurl -X PUT &quot;localhost:9200/my_index/_settings&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;index&quot;: {\n    &quot;refresh_interval&quot;: &quot;30s&quot;,\n    &quot;number_of_replicas&quot;: 1,\n    &quot;routing.allocation.total_shards_per_node&quot;: 3,\n    &quot;translog.flush_threshold_size&quot;: &quot;1gb&quot;,\n    &quot;translog.sync_interval&quot;: &quot;30s&quot;\n  }\n}&#039;\n\n# Force merge indices\ncurl -X POST &quot;localhost:9200/my_index/_forcemerge?max_num_segments=1&quot;\n\n# Clear cache\ncurl -X POST &quot;localhost:9200/_cache/clear&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Cluster health\ncurl -X GET &quot;localhost:9200/_cluster/health?pretty&quot;\n\n# Node statistics\ncurl -X GET &quot;localhost:9200/_nodes/stats?pretty&quot;\n\n# Index statistics\ncurl -X GET &quot;localhost:9200/_stats?pretty&quot;\n\n# Hot threads\ncurl -X GET &quot;localhost:9200/_nodes/hot_threads&quot;\n\n# Task management\ncurl -X GET &quot;localhost:9200/_tasks?detailed=true&amp;actions=*search&quot;\n\n# Pending cluster tasks\ncurl -X GET &quot;localhost:9200/_cluster/pending_tasks&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Metricbeat for monitoring\ncurl -L -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-8.11.3-linux-x86_64.tar.gz\ntar xzvf metricbeat-8.11.3-linux-x86_64.tar.gz\nsudo mv metricbeat-8.11.3-linux-x86_64 /usr/local/metricbeat\n\n# Configure Metricbeat for Elasticsearch monitoring\nsudo tee /usr/local/metricbeat/metricbeat.yml &lt;&lt;EOF\nmetricbeat.modules:\n- module: elasticsearch\n  metricsets:\n    - node\n    - node_stats\n    - cluster_stats\n  period: 10s\n  hosts: [&quot;localhost:9200&quot;]\n\noutput.elasticsearch:\n  hosts: [&quot;localhost:9200&quot;]\n\nsetup.kibana:\n  host: &quot;localhost:5601&quot;\nEOF\n\n# Create systemd service for Metricbeat\nsudo tee /etc/systemd/system/metricbeat.service &lt;&lt;EOF\n[Unit]\nDescription=Metricbeat\nAfter=network.target\n\n[Service]\nType=simple\nUser=elasticsearch\nWorkingDirectory=/usr/local/metricbeat\nExecStart=/usr/local/metricbeat/metricbeat -c /usr/local/metricbeat/metricbeat.yml\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now metricbeat</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# elasticsearch-health-check.sh\n\n# Check Elasticsearch service\nif ! systemctl is-active elasticsearch &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Elasticsearch service is not running&quot;\n    exit 2\nfi\n\n# Check HTTP API\nif ! curl -s http://localhost:9200/ &gt;/dev/null; then\n    echo &quot;CRITICAL: Cannot connect to Elasticsearch HTTP API&quot;\n    exit 2\nfi\n\n# Check cluster health\nCLUSTER_STATUS=$(curl -s http://localhost:9200/_cluster/health | jq -r &#039;.status&#039;)\ncase $CLUSTER_STATUS in\n    &quot;green&quot;)\n        echo &quot;OK: Cluster health is green&quot;\n        exit 0\n        ;;\n    &quot;yellow&quot;)\n        echo &quot;WARNING: Cluster health is yellow&quot;\n        exit 1\n        ;;\n    &quot;red&quot;)\n        echo &quot;CRITICAL: Cluster health is red&quot;\n        exit 2\n        ;;\n    *)\n        echo &quot;UNKNOWN: Cannot determine cluster health&quot;\n        exit 3\n        ;;\nesac</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"snapshot-repository-setup\" class=\"mobile-header\">Snapshot Repository Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create snapshot repository\ncurl -X PUT &quot;localhost:9200/_snapshot/backup_repo&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;type&quot;: &quot;fs&quot;,\n  &quot;settings&quot;: {\n    &quot;location&quot;: &quot;/backup/elasticsearch&quot;,\n    &quot;compress&quot;: true,\n    &quot;max_snapshot_bytes_per_sec&quot;: &quot;50mb&quot;,\n    &quot;max_restore_bytes_per_sec&quot;: &quot;50mb&quot;\n  }\n}&#039;\n\n# Create backup directory\nsudo mkdir -p /backup/elasticsearch\nsudo chown elasticsearch:elasticsearch /backup/elasticsearch\n\n# Add repository path to elasticsearch.yml\necho &#039;path.repo: [&quot;/backup/elasticsearch&quot;]&#039; | sudo tee -a /etc/elasticsearch/elasticsearch.yml\nsudo systemctl restart elasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# elasticsearch-backup.sh\n\nSNAPSHOT_NAME=&quot;snapshot-$(date +%Y%m%d_%H%M%S)&quot;\n\n# Create snapshot\ncurl -X PUT &quot;localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME?wait_for_completion=true&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;indices&quot;: &quot;*&quot;,\n  &quot;ignore_unavailable&quot;: true,\n  &quot;include_global_state&quot;: true,\n  &quot;metadata&quot;: {\n    &quot;taken_by&quot;: &quot;elasticsearch-backup-script&quot;,\n    &quot;taken_because&quot;: &quot;scheduled backup&quot;\n  }\n}&#039;\n\n# Verify snapshot\nSNAPSHOT_STATUS=$(curl -s &quot;localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME&quot; | jq -r &#039;.snapshots[0].state&#039;)\n\nif [ &quot;$SNAPSHOT_STATUS&quot; = &quot;SUCCESS&quot; ]; then\n    echo &quot;Backup completed successfully: $SNAPSHOT_NAME&quot;\nelse\n    echo &quot;Backup failed: $SNAPSHOT_NAME&quot;\n    exit 1\nfi\n\n# Clean up old snapshots (keep last 7 days)\ncurl -s &quot;localhost:9200/_snapshot/backup_repo/_all&quot; | jq -r &#039;.snapshots[] | select(.end_time_in_millis &lt; &#039;$(date -d &#039;7 days ago&#039; +%s000)&#039;) | .snapshot&#039; | while read snapshot; do\n    curl -X DELETE &quot;localhost:9200/_snapshot/backup_repo/$snapshot&quot;\n    echo &quot;Deleted old snapshot: $snapshot&quot;\ndone\n\necho &quot;Elasticsearch backup completed: $SNAPSHOT_NAME&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# elasticsearch-restore.sh\n\nSNAPSHOT_NAME=&quot;$1&quot;\nif [ -z &quot;$SNAPSHOT_NAME&quot; ]; then\n    echo &quot;Usage: $0 &lt;snapshot-name&gt;&quot;\n    echo &quot;Available snapshots:&quot;\n    curl -s &quot;localhost:9200/_snapshot/backup_repo/_all&quot; | jq -r &#039;.snapshots[].snapshot&#039;\n    exit 1\nfi\n\n# Close indices before restore\ncurl -X POST &quot;localhost:9200/_all/_close&quot;\n\n# Restore snapshot\ncurl -X POST &quot;localhost:9200/_snapshot/backup_repo/$SNAPSHOT_NAME/_restore?wait_for_completion=true&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;indices&quot;: &quot;*&quot;,\n  &quot;ignore_unavailable&quot;: true,\n  &quot;include_global_state&quot;: true\n}&#039;\n\necho &quot;Restore completed from snapshot: $SNAPSHOT_NAME&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create cron job for daily backups\necho &quot;0 2 * * * /usr/local/bin/elasticsearch-backup.sh&quot; | sudo crontab -</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Elasticsearch won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u elasticsearch -f\nsudo tail -f /var/log/elasticsearch/elasticsearch.log\n\n# Check Java version\njava -version\n\n# Check memory settings\ngrep -E &quot;Xms|Xmx&quot; /etc/elasticsearch/jvm.options\n\n# Check disk space\ndf -h /var/lib/elasticsearch</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Out of memory errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check heap usage\ncurl -X GET &quot;localhost:9200/_nodes/stats/jvm?pretty&quot;\n\n# Check field data cache\ncurl -X GET &quot;localhost:9200/_nodes/stats/indices/fielddata?pretty&quot;\n\n# Clear field data cache\ncurl -X POST &quot;localhost:9200/_cache/clear?fielddata=true&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Slow queries</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable slow log\ncurl -X PUT &quot;localhost:9200/_all/_settings&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;index.search.slowlog.threshold.query.warn&quot;: &quot;10s&quot;,\n  &quot;index.search.slowlog.threshold.query.info&quot;: &quot;5s&quot;,\n  &quot;index.search.slowlog.threshold.query.debug&quot;: &quot;2s&quot;,\n  &quot;index.search.slowlog.threshold.query.trace&quot;: &quot;500ms&quot;\n}&#039;\n\n# Check slow queries\nsudo tail -f /var/log/elasticsearch/*_index_search_slowlog.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\ncurl -X PUT &quot;localhost:9200/_cluster/settings&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;transient&quot;: {\n    &quot;logger.org.elasticsearch&quot;: &quot;DEBUG&quot;\n  }\n}&#039;\n\n# Check cluster state\ncurl -X GET &quot;localhost:9200/_cluster/state?pretty&quot;\n\n# Explain API for query analysis\ncurl -X GET &quot;localhost:9200/my_index/_search&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;explain&quot;: true,\n  &quot;query&quot;: {\n    &quot;match&quot;: {\n      &quot;title&quot;: &quot;search term&quot;\n    }\n  }\n}&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update elasticsearch\nsudo yum update elasticsearch\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade elasticsearch\n\n# Arch Linux\nyay -Syu elasticsearch\n\n# macOS\nbrew upgrade elastic/tap/elasticsearch-full\n\n# Docker (Alpine/openSUSE)\ndocker pull elasticsearch:8.11.3\ndocker stop elasticsearch\ndocker rm elasticsearch\n# Re-run docker run command with new image\n\n# Always backup before updates\n./elasticsearch-backup.sh\n\n# Restart after updates\nsudo systemctl restart elasticsearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# elasticsearch-maintenance.sh\n\n# Force merge old indices\ncurl -X POST &quot;localhost:9200/logs-$(date -d &#039;1 week ago&#039; +%Y.%m.%d)/_forcemerge?max_num_segments=1&quot;\n\n# Clear caches\ncurl -X POST &quot;localhost:9200/_cache/clear&quot;\n\n# Optimize indices\ncurl -X POST &quot;localhost:9200/_optimize&quot;\n\n# Update index settings for better performance\ncurl -X PUT &quot;localhost:9200/_all/_settings&quot; -H &#039;Content-Type: application/json&#039; -d&#039;\n{\n  &quot;index&quot;: {\n    &quot;refresh_interval&quot;: &quot;30s&quot;\n  }\n}&#039;\n\necho &quot;Elasticsearch maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/elasticsearch-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/elasticsearch &lt;&lt;EOF\n/var/log/elasticsearch/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 elasticsearch elasticsearch\n    postrotate\n        systemctl restart elasticsearch &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Using elasticsearch-py\nfrom elasticsearch import Elasticsearch\n\n# Connect to Elasticsearch\nes = Elasticsearch(\n    hosts=[{&#039;host&#039;: &#039;localhost&#039;, &#039;port&#039;: 9200}],\n    http_auth=(&#039;elastic&#039;, &#039;password&#039;),\n    use_ssl=True,\n    verify_certs=True,\n    ca_certs=&#039;/etc/elasticsearch/certs/ca.crt&#039;,\n)\n\n# Index a document\ndoc = {\n    &#039;title&#039;: &#039;Sample Document&#039;,\n    &#039;content&#039;: &#039;This is a sample document for testing&#039;,\n    &#039;timestamp&#039;: &#039;2024-01-15T10:30:00&#039;\n}\nes.index(index=&#039;my_index&#039;, id=1, body=doc)\n\n# Search documents\nresponse = es.search(\n    index=&#039;my_index&#039;,\n    body={\n        &#039;query&#039;: {\n            &#039;match&#039;: {\n                &#039;content&#039;: &#039;sample&#039;\n            }\n        }\n    }\n)\nprint(response[&#039;hits&#039;])</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using @elastic/elasticsearch\nconst { Client } = require(&#039;@elastic/elasticsearch&#039;);\n\nconst client = new Client({\n  node: &#039;https://localhost:9200&#039;,\n  auth: {\n    username: &#039;elastic&#039;,\n    password: &#039;password&#039;\n  },\n  tls: {\n    ca: fs.readFileSync(&#039;/etc/elasticsearch/certs/ca.crt&#039;),\n    rejectUnauthorized: true\n  }\n});\n\n// Index a document\nasync function indexDocument() {\n  const response = await client.index({\n    index: &#039;my_index&#039;,\n    id: 1,\n    body: {\n      title: &#039;Sample Document&#039;,\n      content: &#039;This is a sample document for testing&#039;,\n      timestamp: new Date()\n    }\n  });\n  console.log(response);\n}\n\n// Search documents\nasync function searchDocuments() {\n  const response = await client.search({\n    index: &#039;my_index&#039;,\n    body: {\n      query: {\n        match: {\n          content: &#039;sample&#039;\n        }\n      }\n    }\n  });\n  console.log(response.body.hits);\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-integration\" class=\"mobile-header\">Java Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// Using Elasticsearch Java client\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.common.xcontent.XContentType;\n\nRestHighLevelClient client = new RestHighLevelClient(\n    RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;https&quot;))\n        .setHttpClientConfigCallback(httpClientBuilder -&gt; \n            httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)\n                .setSSLContext(sslContext))\n);\n\n// Index a document\nIndexRequest indexRequest = new IndexRequest(&quot;my_index&quot;)\n    .id(&quot;1&quot;)\n    .source(&quot;{\\n&quot; +\n        &quot;\\&quot;title\\&quot;:\\&quot;Sample Document\\&quot;,\\n&quot; +\n        &quot;\\&quot;content\\&quot;:\\&quot;This is a sample document for testing\\&quot;,\\n&quot; +\n        &quot;\\&quot;timestamp\\&quot;:\\&quot;2024-01-15T10:30:00\\&quot;\\n&quot; +\n        &quot;}&quot;, XContentType.JSON);\n\nclient.index(indexRequest, RequestOptions.DEFAULT);</code></pre>\n      </div>\n    </div>\n<h3 id=\"logstash-integration\" class=\"mobile-header\">Logstash Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"ruby\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ruby</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ruby\"># logstash.conf\ninput {\n  beats {\n    port =&gt; 5044\n  }\n}\n\nfilter {\n  if [fields][log_type] == &quot;apache&quot; {\n    grok {\n      match =&gt; { &quot;message&quot; =&gt; &quot;%{COMBINEDAPACHELOG}&quot; }\n    }\n    date {\n      match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]\n    }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [&quot;localhost:9200&quot;]\n    user =&gt; &quot;logstash_user&quot;\n    password =&gt; &quot;logstash_password&quot;\n    index =&gt; &quot;logs-%{+YYYY.MM.dd}&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Elasticsearch Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/security-minimal-setup.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Elasticsearch Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-lifecycle-management.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Index Lifecycle Management</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-bootstrap-cluster.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Elasticsearch Cluster Setup</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discuss.elastic.co/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Elastic Stack Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/blog/category/elasticsearch\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Elasticsearch Blog</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"17 min","wordCount":3365,"lastBuilt":"2025-09-14T06:13:01.716Z"},{"name":"exchange","displayName":"Exchange","slug":"exchange","description":"Repo for exchange","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/exchange","updatedAt":"2025-09-08T03:07:21Z","createdAt":"2023-08-28T03:47:46Z","readmeRaw":"# Exchange 2016 on Server 2016\n\n```text\n\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n\n```\n","readmeHtml":"<h1 id=\"exchange-2016-on-server-2016\" class=\"mobile-header\">Exchange 2016 on Server 2016</h1>\n<div class=\"mobile-code-block\" data-language=\"text\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">text</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-text\">\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T06:13:22.284Z"},{"name":"gitea","displayName":"Gitea","slug":"gitea","description":"Repo for gitea","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitea","updatedAt":"2025-09-08T03:07:55Z","createdAt":"2023-08-28T03:47:56Z","readmeRaw":"# Gitea Install\n\n```bash\necho \"\n###### Debian Main Repos\ndeb http://ftp.us.debian.org/debian/ stable main contrib non-free\ndeb http://ftp.us.debian.org/debian/ stable-updates main contrib non-free\ndeb http://security.debian.org/ stable/updates main contrib non-free\n\" > /etc/apt/sources.list\n\napt update && apt upgrade -y\napt install -y curl wget apt-transport-https psmisc net-tools postfix dirmngr neovim git-core build-essential nginx-full nfs-common htop open-vm-tools\ndpkg-reconfigure postfix\ndpkg-reconfigure dash\n\nmkdir -p /mnt/backups /var/www/html/.well-known /etc/letsencrypt\necho \"\n10.0.254.1:/mnt/Volume_1/backups         /mnt/backups                 nfs defaults,rw 0 0\n10.0.254.1:/var/www/html/.well-known     /var/www/html/.well-known    nfs defaults,rw 0 0\n10.0.254.1:/etc/letsencrypt              /etc/letsencrypt             nfs defaults,rw 0 0\n\" >> /etc/fstab\nmount -a\n\nuseradd --system --shell /bin/bash --comment 'Git Version Control' --create-home --home-dir /home/git git\n\nmkdir -p /var/lib/gitea/{custom,data,indexers,public,log}\nchown git:git /var/lib/gitea/{data,indexers,log}\nchmod 750 /var/lib/gitea/{data,indexers,log}\nmkdir /etc/gitea\nchown root:git /etc/gitea\nchmod 770 /etc/gitea\nchmod 750 /etc/gitea\nchmod 644 /etc/gitea/app.ini\n```\n","readmeHtml":"<h1 id=\"gitea-install\" class=\"mobile-header\">Gitea Install</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">echo &quot;\n###### Debian Main Repos\ndeb http://ftp.us.debian.org/debian/ stable main contrib non-free\ndeb http://ftp.us.debian.org/debian/ stable-updates main contrib non-free\ndeb http://security.debian.org/ stable/updates main contrib non-free\n&quot; &gt; /etc/apt/sources.list\n\napt update &amp;&amp; apt upgrade -y\napt install -y curl wget apt-transport-https psmisc net-tools postfix dirmngr neovim git-core build-essential nginx-full nfs-common htop open-vm-tools\ndpkg-reconfigure postfix\ndpkg-reconfigure dash\n\nmkdir -p /mnt/backups /var/www/html/.well-known /etc/letsencrypt\necho &quot;\n10.0.254.1:/mnt/Volume_1/backups         /mnt/backups                 nfs defaults,rw 0 0\n10.0.254.1:/var/www/html/.well-known     /var/www/html/.well-known    nfs defaults,rw 0 0\n10.0.254.1:/etc/letsencrypt              /etc/letsencrypt             nfs defaults,rw 0 0\n&quot; &gt;&gt; /etc/fstab\nmount -a\n\nuseradd --system --shell /bin/bash --comment &#039;Git Version Control&#039; --create-home --home-dir /home/git git\n\nmkdir -p /var/lib/gitea/{custom,data,indexers,public,log}\nchown git:git /var/lib/gitea/{data,indexers,log}\nchmod 750 /var/lib/gitea/{data,indexers,log}\nmkdir /etc/gitea\nchown root:git /etc/gitea\nchmod 770 /etc/gitea\nchmod 750 /etc/gitea\nchmod 644 /etc/gitea/app.ini</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":125,"lastBuilt":"2025-09-14T06:13:21.679Z"},{"name":"gitlab","displayName":"Gitlab","slug":"gitlab","description":"Repo for gitlab","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitlab","updatedAt":"2025-09-14T01:30:01Z","createdAt":"2025-09-08T03:07:56Z","readmeRaw":"# GitLab Installation Guide\n\nComplete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry. Enterprise-grade solution for modern software development lifecycle with advanced security features.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- 8GB RAM minimum, 16GB+ recommended for production\n- 4 CPU cores minimum, 8+ recommended\n- 50GB+ available disk space, SSD recommended\n- Domain name for external access\n- SSL certificates for production deployment\n- SMTP server for email notifications\n\n## Installation\n\n### Using Omnibus Package (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Install dependencies\nsudo apt-get update\nsudo apt-get install -y curl openssh-server ca-certificates tzdata perl postfix\n\n# Configure Postfix for email\nsudo dpkg-reconfigure postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab Enterprise Edition\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" apt-get install -y gitlab-ee\n\n# For GitLab Community Edition\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" apt-get install -y gitlab-ce\n\n# Initial configuration\nsudo gitlab-ctl reconfigure\n\n# Check status\nsudo gitlab-ctl status\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# For newer versions\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable and start services\nsudo systemctl enable --now sshd postfix\n\n# Configure SELinux and firewall\nsudo setsebool -P httpd_can_network_connect 1\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" yum install -y gitlab-ee\n\n# Configure and start\nsudo gitlab-ctl reconfigure\n```\n\n#### Fedora\n```bash\n# Install dependencies\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable services\nsudo systemctl enable --now sshd postfix\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" dnf install -y gitlab-ee\n\nsudo gitlab-ctl reconfigure\n```\n\n### Docker Installation (Single Container)\n```bash\n# Create GitLab directories\nsudo mkdir -p /srv/gitlab/{config,logs,data}\n\n# Set environment variables\nexport GITLAB_HOME=/srv/gitlab\n\n# Run GitLab container with comprehensive configuration\nsudo docker run --detach \\\n  --hostname gitlab.example.com \\\n  --env GITLAB_OMNIBUS_CONFIG=\"\n    external_url 'https://gitlab.example.com';\n    gitlab_rails['gitlab_shell_ssh_port'] = 2222;\n    \n    # SSL configuration\n    nginx['ssl_certificate'] = '/etc/gitlab/ssl/gitlab.crt';\n    nginx['ssl_certificate_key'] = '/etc/gitlab/ssl/gitlab.key';\n    nginx['ssl_protocols'] = 'TLSv1.2 TLSv1.3';\n    nginx['ssl_prefer_server_ciphers'] = 'off';\n    \n    # Security settings\n    gitlab_rails['rack_attack_git_basic_auth'] = {\n      'enabled' => true,\n      'ip_whitelist' => ['127.0.0.1', '192.168.1.0/24'],\n      'maxretry' => 10,\n      'findtime' => 60,\n      'bantime' => 3600\n    };\n    \n    # Performance settings\n    postgresql['shared_preload_libraries'] = 'pg_stat_statements';\n    postgresql['max_connections'] = 200;\n    postgresql['shared_buffers'] = '1GB';\n    postgresql['effective_cache_size'] = '4GB';\n    \n    # Container Registry\n    registry_external_url 'https://registry.example.com';\n    gitlab_rails['registry_enabled'] = true;\n    \n    # Monitoring\n    prometheus_monitoring['enable'] = true;\n    grafana['enable'] = true;\n    grafana['admin_password'] = 'secure_grafana_password';\n    \n    # Email configuration\n    gitlab_rails['smtp_enable'] = true;\n    gitlab_rails['smtp_address'] = 'smtp.example.com';\n    gitlab_rails['smtp_port'] = 587;\n    gitlab_rails['smtp_user_name'] = 'gitlab@example.com';\n    gitlab_rails['smtp_password'] = 'smtp_secure_password';\n    gitlab_rails['smtp_domain'] = 'example.com';\n    gitlab_rails['smtp_authentication'] = 'login';\n    gitlab_rails['smtp_enable_starttls_auto'] = true;\n    gitlab_rails['smtp_tls'] = false;\n    gitlab_rails['smtp_openssl_verify_mode'] = 'peer';\n    \n    # Email settings\n    gitlab_rails['gitlab_email_from'] = 'gitlab@example.com';\n    gitlab_rails['gitlab_email_display_name'] = 'GitLab';\n    \n    # Backup configuration\n    gitlab_rails['backup_keep_time'] = 604800;\n    gitlab_rails['backup_upload_connection'] = {\n      'provider' => 'AWS',\n      'region' => 'us-west-2',\n      'aws_access_key_id' => 'backup_access_key',\n      'aws_secret_access_key' => 'backup_secret_key'\n    };\n    gitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups';\n    \" \\\n  --publish 443:443 --publish 80:80 --publish 2222:22 \\\n  --name gitlab \\\n  --restart unless-stopped \\\n  --volume $GITLAB_HOME/config:/etc/gitlab \\\n  --volume $GITLAB_HOME/logs:/var/log/gitlab \\\n  --volume $GITLAB_HOME/data:/var/opt/gitlab \\\n  --shm-size 256m \\\n  gitlab/gitlab-ee:latest\n```\n\n### Docker Compose (Production Setup)\n```bash\nmkdir -p ~/gitlab-stack\ncd ~/gitlab-stack\n\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    container_name: gitlab\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'https://gitlab.example.com'\n        \n        # Performance settings\n        postgresql['shared_buffers'] = \"2GB\"\n        postgresql['effective_cache_size'] = \"8GB\"\n        postgresql['max_connections'] = 300\n        \n        # Security settings\n        gitlab_rails['rack_attack_git_basic_auth'] = {\n          'enabled' => true,\n          'ip_whitelist' => ['127.0.0.1', '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16'],\n          'maxretry' => 10,\n          'findtime' => 60,\n          'bantime' => 3600\n        }\n        \n        # Container Registry\n        registry_external_url 'https://registry.example.com'\n        gitlab_rails['registry_enabled'] = true\n        \n        # Monitoring\n        prometheus_monitoring['enable'] = true\n        grafana['enable'] = true\n        \n        # Let's Encrypt (disable for reverse proxy setup)\n        letsencrypt['enable'] = false\n        nginx['listen_port'] = 80\n        nginx['listen_https'] = false\n        \n        # GitLab Pages\n        pages_external_url \"https://pages.example.com\"\n        gitlab_pages['enable'] = true\n    ports:\n      - '80:80'\n      - '443:443'\n      - '2222:22'\n    volumes:\n      - './config:/etc/gitlab'\n      - './logs:/var/log/gitlab'\n      - './data:/var/opt/gitlab'\n    networks:\n      - gitlab\n    shm_size: '256m'\n    healthcheck:\n      test: [\"CMD-SHELL\", \"gitlab-healthcheck --fail --max-time 10\"]\n      interval: 60s\n      timeout: 30s\n      retries: 5\n      start_period: 200s\n\n  gitlab-runner:\n    image: gitlab/gitlab-runner:latest\n    container_name: gitlab-runner\n    restart: unless-stopped\n    volumes:\n      - './runner-config:/etc/gitlab-runner'\n      - '/var/run/docker.sock:/var/run/docker.sock'\n    networks:\n      - gitlab\n    depends_on:\n      - gitlab\n\n  redis:\n    image: redis:7-alpine\n    container_name: gitlab-redis\n    restart: unless-stopped\n    command: redis-server --appendonly yes --requirepass redis_secure_password\n    volumes:\n      - redis-data:/data\n    networks:\n      - gitlab\n\n  nginx:\n    image: nginx:alpine\n    container_name: gitlab-nginx\n    restart: unless-stopped\n    ports:\n      - '443:443'\n    volumes:\n      - './nginx/nginx.conf:/etc/nginx/nginx.conf:ro'\n      - './nginx/ssl:/etc/nginx/ssl:ro'\n    depends_on:\n      - gitlab\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\n\nvolumes:\n  redis-data:\nEOF\n\n# Create NGINX reverse proxy configuration\nmkdir -p nginx\ncat > nginx/nginx.conf <<EOF\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream gitlab {\n        server gitlab:80;\n    }\n    \n    upstream registry {\n        server gitlab:5000;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name gitlab.example.com;\n\n        ssl_certificate /etc/nginx/ssl/gitlab.crt;\n        ssl_certificate_key /etc/nginx/ssl/gitlab.key;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n\n        client_max_body_size 0;\n        gzip off;\n\n        location / {\n            proxy_pass http://gitlab;\n            proxy_set_header Host \\$host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n        }\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name registry.example.com;\n\n        ssl_certificate /etc/nginx/ssl/registry.crt;\n        ssl_certificate_key /etc/nginx/ssl/registry.key;\n\n        client_max_body_size 0;\n\n        location /v2/ {\n            proxy_pass http://registry;\n            proxy_set_header Host \\$host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n        }\n    }\n}\nEOF\n\ndocker-compose up -d\n```\n\n## Enterprise Configuration\n\n### Production Configuration (/etc/gitlab/gitlab.rb)\n```bash\nsudo tee /etc/gitlab/gitlab.rb > /dev/null <<EOF\n# GitLab Enterprise Production Configuration\n\nexternal_url 'https://gitlab.example.com'\n\n# Performance and Resource Settings\nunicorn['worker_timeout'] = 60\nunicorn['worker_processes'] = 8\nsidekiq['max_concurrency'] = 25\nsidekiq['min_concurrency'] = 10\n\n# PostgreSQL configuration\npostgresql['enable'] = true\npostgresql['max_connections'] = 300\npostgresql['shared_buffers'] = \"2GB\"\npostgresql['effective_cache_size'] = \"8GB\"\npostgresql['work_mem'] = \"16MB\"\npostgresql['maintenance_work_mem'] = \"256MB\"\npostgresql['checkpoint_completion_target'] = 0.9\npostgresql['wal_buffers'] = \"16MB\"\npostgresql['default_statistics_target'] = 100\npostgresql['random_page_cost'] = 1.1\npostgresql['effective_io_concurrency'] = 200\n\n# Redis configuration\nredis['enable'] = true\nredis['maxmemory'] = \"1gb\"\nredis['maxmemory_policy'] = \"allkeys-lru\"\nredis['save'] = '900 1 300 10 60 10000'\nredis['password'] = 'redis_secure_password'\n\n# Gitaly configuration (Git RPC service)\ngitaly['enable'] = true\ngitaly['auth_token'] = 'secure_gitaly_token'\ngitaly['ruby_max_rss'] = 300000000  # 300MB\ngitaly['concurrency'] = [\n  {\n    'rpc' => \"/gitaly.SmartHTTPService/PostReceivePack\",\n    'max_per_repo' => 3\n  },\n  {\n    'rpc' => \"/gitaly.SSHService/SSHUploadPack\", \n    'max_per_repo' => 3\n  }\n]\n\n# NGINX configuration\nnginx['enable'] = true\nnginx['listen_port'] = 80\nnginx['listen_https'] = false\nnginx['redirect_http_to_https'] = false\nnginx['ssl_certificate'] = \"/etc/gitlab/ssl/gitlab.crt\"\nnginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/gitlab.key\"\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\nnginx['ssl_prefer_server_ciphers'] = \"off\"\nnginx['ssl_ciphers'] = \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\"\n\n# Container Registry\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\nregistry['enable'] = true\nregistry['username'] = \"registry\"\nregistry['uid'] = 996\nregistry['gid'] = 996\nregistry['dir'] = \"/var/opt/gitlab/registry\"\nregistry['log_directory'] = \"/var/log/gitlab/registry\"\nregistry['log_level'] = \"info\"\nregistry['rootcertbundle'] = \"/opt/gitlab/embedded/ssl/certs/cacert.pem\"\n\n# GitLab Pages\npages_external_url \"https://pages.example.com\"\ngitlab_pages['enable'] = true\ngitlab_pages['dir'] = \"/var/opt/gitlab/gitlab-pages\"\ngitlab_pages['log_directory'] = \"/var/log/gitlab/gitlab-pages\"\ngitlab_pages['access_control'] = true\ngitlab_pages['use_legacy_storage'] = false\n\n# Email configuration\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.example.com\"\ngitlab_rails['smtp_port'] = 587\ngitlab_rails['smtp_user_name'] = \"gitlab@example.com\"\ngitlab_rails['smtp_password'] = \"smtp_secure_password\"\ngitlab_rails['smtp_domain'] = \"example.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\ngitlab_rails['smtp_openssl_verify_mode'] = 'peer'\n\ngitlab_rails['gitlab_email_enabled'] = true\ngitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\ngitlab_rails['gitlab_email_display_name'] = 'GitLab'\ngitlab_rails['gitlab_email_reply_to'] = 'noreply@example.com'\n\n# Security settings\ngitlab_rails['rack_attack_git_basic_auth'] = {\n  'enabled' => true,\n  'ip_whitelist' => %w{127.0.0.1 192.168.1.0/24 10.0.0.0/8},\n  'maxretry' => 10,\n  'findtime' => 60,\n  'bantime' => 3600\n}\n\n# Two-factor authentication\ngitlab_rails['require_two_factor_authentication'] = false\ngitlab_rails['two_factor_grace_period'] = 8  # 8 hours instead of default 48\n\n# Session settings\ngitlab_rails['session_expire_delay'] = 10080  # 1 week\ngitlab_rails['session_store_enabled'] = true\n\n# Backup configuration\ngitlab_rails['backup_keep_time'] = 604800  # 7 days\ngitlab_rails['backup_upload_connection'] = {\n  'provider' => 'AWS',\n  'region' => 'us-west-2',\n  'aws_access_key_id' => 'backup_access_key',\n  'aws_secret_access_key' => 'backup_secret_key'\n}\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'\ngitlab_rails['backup_multipart_chunk_size'] = 104857600  # 100MB\n\n# Monitoring\nprometheus_monitoring['enable'] = true\nprometheus['enable'] = true\nprometheus['listen_address'] = 'localhost:9090'\nprometheus['scrape_configs'] = [\n  {\n    'job_name' => 'gitlab-workhorse',\n    'static_configs' => [\n      { 'targets' => ['localhost:9229'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-unicorn',\n    'static_configs' => [\n      { 'targets' => ['localhost:8080'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-sidekiq',\n    'static_configs' => [\n      { 'targets' => ['localhost:8082'] }\n    ]\n  }\n]\n\ngrafana['enable'] = true\ngrafana['admin_password'] = 'secure_grafana_password'\ngrafana['disable_login_form'] = false\n\n# Logging\nlogging['svlogd_size'] = 200 * 1024 * 1024  # 200MB\nlogging['svlogd_num'] = 30\nlogging['svlogd_timeout'] = 24 * 60 * 60    # rotate after 24 hours\nlogging['logrotate_frequency'] = \"daily\"\nlogging['logrotate_rotate'] = 30\nlogging['logrotate_compress'] = \"compress\"\n\n# Git settings\ngitlab_rails['gitlab_default_branch'] = 'main'\ngitlab_rails['max_request_duration_seconds'] = 60\n\n# Rate limiting\ngitlab_rails['rate_limit_requests_per_period'] = 300\ngitlab_rails['rate_limit_period'] = 60\n\n# Enterprise features (if using GitLab EE)\n# gitlab_rails['ee_license'] = File.read('/etc/gitlab/GitLab.gitlab-license')\n\n# Security scanning\ngitlab_rails['dependency_scanning_enabled'] = true\ngitlab_rails['container_scanning_enabled'] = true\ngitlab_rails['sast_enabled'] = true\ngitlab_rails['secret_detection_enabled'] = true\n\n# LDAP configuration (Enterprise)\ngitlab_rails['ldap_enabled'] = false\ngitlab_rails['prevent_ldap_sign_in'] = false\ngitlab_rails['ldap_servers'] = {\n  'main' => {\n    'label' => 'LDAP',\n    'host' => 'ldap.example.com',\n    'port' => 636,\n    'uid' => 'sAMAccountName',\n    'bind_dn' => 'CN=gitlab,OU=Service Accounts,DC=example,DC=com',\n    'password' => 'ldap_service_password',\n    'encryption' => 'ssl',\n    'verify_certificates' => true,\n    'ca_file' => '/etc/gitlab/ssl/ldap-ca.crt',\n    'base' => 'DC=example,DC=com',\n    'user_filter' => '',\n    'attributes' => {\n      'username' => ['uid', 'userid', 'sAMAccountName'],\n      'email' => ['mail', 'email', 'userPrincipalName'],\n      'name' => 'cn',\n      'first_name' => 'givenName',\n      'last_name' => 'sn'\n    },\n    'group_base' => 'OU=Groups,DC=example,DC=com',\n    'admin_group' => 'GitLab Administrators'\n  }\n}\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Security Hardening (2024 Best Practices)\n\n### SSL/TLS Configuration\n```bash\n# Generate SSL certificates\nsudo mkdir -p /etc/gitlab/ssl\n\n# Self-signed certificate for testing\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/gitlab/ssl/gitlab.key \\\n  -out /etc/gitlab/ssl/gitlab.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=gitlab.example.com\"\n\n# Production: Let's Encrypt integration\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Let's Encrypt configuration\nletsencrypt['enable'] = true\nletsencrypt['contact_emails'] = ['admin@example.com']\nletsencrypt['auto_renew'] = true\nletsencrypt['auto_renew_hour'] = 0\nletsencrypt['auto_renew_minute'] = 0\nletsencrypt['auto_renew_day_of_month'] = \"*/4\"\n\n# Force HTTPS\nnginx['redirect_http_to_https'] = true\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\nnginx['ssl_prefer_server_ciphers'] = \"off\"\nnginx['ssl_ciphers'] = \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\"\n\n# HSTS\nnginx['hsts_max_age'] = 31536000\nnginx['hsts_include_subdomains'] = true\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Advanced Security Configuration\n```bash\n# Configure security settings\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Security hardening\ngitlab_rails['webhook_timeout'] = 10\ngitlab_rails['webhook_max_redirects'] = 3\n\n# Disable password authentication (use SSO/LDAP)\ngitlab_rails['omniauth_allow_single_sign_on'] = ['saml', 'ldapmain']\ngitlab_rails['omniauth_block_auto_created_users'] = false\ngitlab_rails['omniauth_auto_sign_in_with_provider'] = 'saml'\n\n# API rate limiting\ngitlab_rails['rate_limit_requests_per_period'] = 1000\ngitlab_rails['rate_limit_period'] = 60\n\n# Git over HTTP rate limiting\ngitlab_rails['rack_attack_git_basic_auth'] = {\n  'enabled' => true,\n  'ip_whitelist' => %w{127.0.0.1 192.168.1.0/24},\n  'maxretry' => 20,\n  'findtime' => 60,\n  'bantime' => 3600\n}\n\n# Protected paths\ngitlab_rails['rack_attack_protected_paths'] = [\n  '/users/password',\n  '/users/sign_in',\n  '/api/v4/session.json',\n  '/api/v4/session',\n  '/users/confirmation',\n  '/unsubscribes/',\n  '/import/github/personal_access_token',\n  '/admin/session'\n]\n\n# SSH security\ngitlab_rails['gitlab_shell_ssh_port'] = 2222\ngitlab_shell['auth_file'] = \"/var/opt/gitlab/.ssh/authorized_keys\"\n\n# Container Registry security\nregistry['notifications'] = [\n  {\n    'name' => 'security_scan',\n    'url' => 'https://security-scanner.example.com/webhook',\n    'timeout' => '2000ms',\n    'threshold' => 3,\n    'backoff' => '1000ms'\n  }\n]\n\n# Secrets management\ngitlab_rails['db_password'] = File.read('/etc/gitlab/secrets/db_password').strip\ngitlab_rails['secret_key_base'] = File.read('/etc/gitlab/secrets/secret_key_base').strip\ngitlab_rails['otp_key_base'] = File.read('/etc/gitlab/secrets/otp_key_base').strip\ngitlab_rails['encrypted_settings_key_base'] = File.read('/etc/gitlab/secrets/encrypted_settings_key_base').strip\n\n# Audit logging\ngitlab_rails['audit_events_enabled'] = true\n\n# Disable features that increase attack surface\ngitlab_rails['usage_ping_enabled'] = false\ngitlab_rails['sentry_enabled'] = false\nEOF\n\n# Create secrets directory and files\nsudo mkdir -p /etc/gitlab/secrets\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/db_password\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/secret_key_base\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/otp_key_base\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/encrypted_settings_key_base\n\n# Secure permissions\nsudo chmod 600 /etc/gitlab/secrets/*\nsudo chown git:git /etc/gitlab/secrets/*\n\nsudo gitlab-ctl reconfigure\n```\n\n### GitLab Runner Security Configuration\n```bash\n# Create secure runner configuration\nsudo mkdir -p /etc/gitlab-runner\n\nsudo tee /etc/gitlab-runner/config.toml > /dev/null <<EOF\nconcurrent = 4\ncheck_interval = 0\nshutdown_timeout = 0\n\n[session_server]\n  session_timeout = 1800\n\n[[runners]]\n  name = \"docker-runner-secure\"\n  url = \"https://gitlab.example.com/\"\n  token = \"runner_registration_token\"\n  executor = \"docker\"\n  \n  # Security settings\n  pre_clone_script = \"echo 'Starting secure build'\"\n  pre_build_script = \"echo 'Preparing secure environment'\"\n  post_build_script = \"echo 'Cleaning up secure environment'\"\n  \n  [runners.docker]\n    tls_verify = false\n    image = \"alpine:latest\"\n    privileged = false  # Critical: Never use privileged mode\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [\"/cache\", \"/certs/client\"]\n    shm_size = 0\n    network_mode = \"bridge\"\n    \n    # Security restrictions\n    cap_drop = [\"ALL\"]\n    cap_add = [\"CHOWN\", \"SETGID\", \"SETUID\"]\n    security_opt = [\"no-new-privileges:true\"]\n    \n    # Resource limits\n    memory = \"2g\"\n    memory_swap = \"2g\"\n    memory_reservation = \"1g\"\n    cpus = \"1.5\"\n    \n    # Network security\n    dns = [\"8.8.8.8\", \"8.8.4.4\"]\n    extra_hosts = [\"gitlab.example.com:192.168.1.100\"]\n    \n    # Image scanning\n    pull_policy = [\"if-not-present\"]\n    \n  [runners.docker.tmpfs]\n    \"/tmp\" = \"rw,noexec,nosuid,size=100m\"\n    \"/var/tmp\" = \"rw,noexec,nosuid,size=100m\"\n\n# Kubernetes executor (more secure)\n[[runners]]\n  name = \"k8s-runner-secure\"\n  url = \"https://gitlab.example.com/\"\n  token = \"k8s_runner_token\"\n  executor = \"kubernetes\"\n  \n  [runners.kubernetes]\n    host = \"https://k8s.example.com:6443\"\n    namespace = \"gitlab-runner\"\n    privileged = false  # Never use privileged\n    image = \"alpine:latest\"\n    \n    # Security context\n    run_as_user = 1000\n    run_as_group = 1000\n    fs_group = 1000\n    \n    # Resource limits\n    memory_limit = \"2Gi\"\n    memory_request = \"1Gi\"\n    cpu_limit = \"1000m\"\n    cpu_request = \"500m\"\n    \n    # Security policies\n    [runners.kubernetes.pod_security_context]\n      run_as_non_root = true\n      run_as_user = 1000\n      run_as_group = 1000\n      fs_group = 1000\n      \n    [[runners.kubernetes.volumes.empty_dir]]\n      name = \"tmp\"\n      mount_path = \"/tmp\"\n      medium = \"Memory\"\nEOF\n\n# Register runner with security tags\nsudo gitlab-runner register \\\n  --url \"https://gitlab.example.com/\" \\\n  --registration-token \"RUNNER_TOKEN\" \\\n  --description \"secure-docker-runner\" \\\n  --tag-list \"docker,secure,production\" \\\n  --run-untagged=\"false\" \\\n  --locked=\"true\" \\\n  --access-level=\"ref_protected\" \\\n  --executor \"docker\" \\\n  --docker-image alpine:latest \\\n  --docker-privileged=\"false\" \\\n  --docker-volumes \"/certs/client\"\n\nsudo systemctl enable --now gitlab-runner\n```\n\n## CI/CD Pipeline Security\n\n### Secure Pipeline Configuration\n```bash\n# Create .gitlab-ci.yml with security best practices\ncat > .gitlab-ci.yml <<EOF\n# GitLab CI/CD Security Best Practices - 2024\n\nstages:\n  - security-scan\n  - test\n  - build\n  - security-test\n  - deploy\n\nvariables:\n  # Security variables\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"/certs\"\n  SECURE_LOG_LEVEL: info\n  \n  # Use protected variables for sensitive data\n  # DEPLOY_TOKEN: (set in GitLab UI as protected variable)\n  # AWS_ACCESS_KEY: (set in GitLab UI as protected variable)\n\n# Security scanning stage\nsecret-detection:\n  stage: security-scan\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/secrets:latest\n  script:\n    - echo \"Scanning for secrets in code...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      secret_detection: gl-secret-detection-report.json\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n  tags:\n    - secure\n\ndependency-scanning:\n  stage: security-scan  \n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium:latest\n  script:\n    - echo \"Scanning dependencies for vulnerabilities...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      dependency_scanning: gl-dependency-scanning-report.json\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n  tags:\n    - secure\n\nsast:\n  stage: security-scan\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/sobelow:latest\n  script:\n    - echo \"Static application security testing...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n  tags:\n    - secure\n\n# Container scanning\ncontainer-scanning:\n  stage: security-test\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/klar:latest\n  script:\n    - echo \"Scanning container image for vulnerabilities...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n  dependencies:\n    - build\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n  tags:\n    - secure\n\n# Secure build stage\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  before_script:\n    # Verify image signatures\n    - echo \"Verifying base image integrity...\"\n    - docker trust inspect alpine:latest\n  script:\n    - echo \"Building application with security scanning...\"\n    - docker build -t \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA .\n    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n    - docker login -u \\$CI_REGISTRY_USER -p \\$CI_REGISTRY_PASSWORD \\$CI_REGISTRY\n    - docker push \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \"main\"'\n  tags:\n    - secure\n\n# Secure deployment\ndeploy-production:\n  stage: deploy\n  image: alpine:latest\n  before_script:\n    # Install kubectl and verify cluster connectivity\n    - apk add --no-cache curl\n    - curl -LO \"https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl\"\n    - chmod +x kubectl && mv kubectl /usr/local/bin/\n    - kubectl config use-context production-cluster\n    - kubectl auth can-i create deployments --namespace=production\n  script:\n    - echo \"Deploying to production with security validations...\"\n    - kubectl apply -f k8s/production/ --namespace=production\n    - kubectl rollout status deployment/app --namespace=production --timeout=300s\n  environment:\n    name: production\n    url: https://app.example.com\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \"main\"'\n      when: manual\n  only:\n    variables:\n      - \\$CI_COMMIT_REF_PROTECTED == \"true\"\n  tags:\n    - secure\n    - production\n\n# Security compliance check\ncompliance-check:\n  stage: security-test\n  image: alpine:latest\n  script:\n    - echo \"Running compliance checks...\"\n    - apk add --no-cache curl jq\n    - |\n      # Check for required security labels in Docker images\n      if ! docker inspect \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA | jq -r '.[].Config.Labels[\"security.scan\"]' | grep -q \"passed\"; then\n        echo \"ERROR: Image failed security scan\"\n        exit 1\n      fi\n    - echo \"Compliance check passed\"\n  dependencies:\n    - container-scanning\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \"main\"'\n  tags:\n    - secure\n\n# Infrastructure as Code scanning\niac-scanning:\n  stage: security-scan\n  image: bridgecrew/checkov:latest\n  script:\n    - checkov --framework terraform --framework kubernetes --framework dockerfile\n  artifacts:\n    reports:\n      junit: checkov-report.xml\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n      changes:\n        - \"**/*.tf\"\n        - \"**/*.yml\"\n        - \"**/*.yaml\"\n        - \"**/Dockerfile*\"\n  tags:\n    - secure\nEOF\n```\n\n### RBAC and Access Control\n```bash\n# Configure GitLab RBAC via API\nGITLAB_URL=\"https://gitlab.example.com\"\nADMIN_TOKEN=\"your_admin_token\"\n\n# Create groups with specific permissions\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"name=developers&path=developers&description=Development team&visibility=private\" \\\n  \"${GITLAB_URL}/api/v4/groups\"\n\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"name=security-team&path=security-team&description=Security team&visibility=private\" \\\n  \"${GITLAB_URL}/api/v4/groups\"\n\n# Create projects with security templates\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"name=secure-app&description=Secure application&visibility=private&issues_enabled=true&merge_requests_enabled=true&wiki_enabled=false&builds_enabled=true&snippets_enabled=false&container_registry_enabled=true&shared_runners_enabled=false\" \\\n  \"${GITLAB_URL}/api/v4/projects\"\n\n# Configure branch protection\nPROJECT_ID=\"1\"  # Replace with actual project ID\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"name=main&code_owner_approval_required=true&push_access_level=40&merge_access_level=40&unprotect_access_level=40\" \\\n  \"${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/protected_branches\"\n\n# Configure push rules (Premium/Ultimate)\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"deny_delete_tag=true&member_check=true&prevent_secrets=true&author_email_regex=.*@example.com&file_extension_restriction=jar,exe&max_file_size=100\" \\\n  \"${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/push_rule\"\n```\n\n### Vulnerability Scanning Integration\n```bash\n# Configure dependency proxy for secure image caching\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Dependency Proxy for secure image caching\ngitlab_rails['dependency_proxy_enabled'] = true\ngitlab_rails['dependency_proxy_storage_path'] = \"/var/opt/gitlab/gitlab-rails/shared/dependency_proxy\"\n\n# Security scanning\ngitlab_rails['sast_enabled'] = true\ngitlab_rails['dependency_scanning_enabled'] = true\ngitlab_rails['container_scanning_enabled'] = true\ngitlab_rails['secret_detection_enabled'] = true\ngitlab_rails['license_scanning_enabled'] = true\n\n# Secure package registry\ngitlab_rails['packages_enabled'] = true\ngitlab_rails['packages_storage_path'] = \"/var/opt/gitlab/gitlab-rails/shared/packages\"\nEOF\n\n# Create custom security scanning templates\nmkdir -p .gitlab/ci-templates\n\ncat > .gitlab/ci-templates/Security-Scanning.gitlab-ci.yml <<EOF\n# Custom Security Scanning Template\n\n.security-scan-template:\n  stage: security-scan\n  variables:\n    SECURE_LOG_LEVEL: info\n  before_script:\n    - echo \"Preparing security scan environment...\"\n    - apk add --no-cache curl jq\n  tags:\n    - secure\n\ncustom-sast:\n  extends: .security-scan-template\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/semgrep:latest\n  script:\n    - echo \"Running custom SAST analysis...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n    expire_in: 1 week\n\ncustom-secrets-scan:\n  extends: .security-scan-template\n  image: trufflesecurity/trufflehog:latest\n  script:\n    - echo \"Scanning for secrets with TruffleHog...\"\n    - trufflehog git file://. --json > trufflehog-report.json\n    - |\n      if [ -s trufflehog-report.json ]; then\n        echo \"Secrets detected!\"\n        cat trufflehog-report.json\n        exit 1\n      fi\n  artifacts:\n    reports:\n      secret_detection: trufflehog-report.json\n    expire_in: 1 week\n\nimage-vulnerability-scan:\n  extends: .security-scan-template\n  image: aquasec/trivy:latest\n  script:\n    - echo \"Scanning Docker images for vulnerabilities...\"\n    - trivy image --format template --template \"@contrib/gitlab.tpl\" \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n    expire_in: 1 week\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Backup and Disaster Recovery\n\n### Enterprise Backup Strategy\n```bash\nsudo tee /usr/local/bin/gitlab-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/gitlab\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{omnibus,secrets,ssl,logs}\n\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy SKIP=uploads,builds,artifacts,lfs,registry,pages\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/omnibus/gitlab-config-${DATE}.tar.gz \\\n    /etc/gitlab/gitlab.rb \\\n    /etc/gitlab/gitlab-secrets.json\n\n# Backup SSL certificates\ntar -czf ${BACKUP_DIR}/ssl/gitlab-ssl-${DATE}.tar.gz \\\n    /etc/gitlab/ssl/ \\\n    /etc/letsencrypt/\n\n# Backup secrets\ntar -czf ${BACKUP_DIR}/secrets/gitlab-secrets-${DATE}.tar.gz \\\n    /etc/gitlab/secrets/\n\n# Upload to multiple cloud storage backends\naws s3 cp ${BACKUP_DIR}/ s3://gitlab-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination gitlab-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://gitlab-backups/\n\n# Geo-replication backup (Enterprise)\nif command -v gitlab-rake >/dev/null 2>&1; then\n    gitlab-rake gitlab:geo:check\n    gitlab-rake geo:status\nfi\n\n# Test backup integrity\nLATEST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar | head -1)\nif [ -n \"$LATEST_BACKUP\" ]; then\n    echo \"Latest backup: $LATEST_BACKUP\"\n    tar -tf \"$LATEST_BACKUP\" > /tmp/backup-contents.txt\n    if [ $? -eq 0 ]; then\n        echo \"✓ Backup integrity verified\"\n    else\n        echo \"✗ Backup integrity check failed\"\n    fi\nfi\n\n# Keep only last 7 backups locally\nfind /var/opt/gitlab/backups/ -name \"*_gitlab_backup.tar\" -mtime +7 -delete\nfind ${BACKUP_DIR} -name \"gitlab-*\" -type f -mtime +7 -delete\n\necho \"GitLab backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * root /usr/local/bin/gitlab-backup.sh\" | sudo tee -a /etc/crontab\n\n# Create disaster recovery script\nsudo tee /usr/local/bin/gitlab-restore.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_FILE=\"${1}\"\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup_file>\"\n    echo \"Available backups:\"\n    ls -la /var/opt/gitlab/backups/*_gitlab_backup.tar\n    exit 1\nfi\n\n# Stop GitLab services\ngitlab-ctl stop unicorn\ngitlab-ctl stop puma\ngitlab-ctl stop sidekiq\n\n# Restore from backup\ngitlab-backup restore BACKUP=$(basename $BACKUP_FILE _gitlab_backup.tar) force=yes\n\n# Restore configuration\nif [ -f \"/backup/gitlab/omnibus/gitlab-config-latest.tar.gz\" ]; then\n    cd /\n    tar -xzf /backup/gitlab/omnibus/gitlab-config-latest.tar.gz\nfi\n\n# Reconfigure and restart\ngitlab-ctl reconfigure\ngitlab-ctl restart\n\n# Verify installation\ngitlab-rake gitlab:check SANITIZE=true\n\necho \"GitLab restore completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-restore.sh\n```\n\n### High Availability Setup\n```bash\n# Configure GitLab for HA with external services\nsudo tee /etc/gitlab/gitlab.rb > /dev/null <<EOF\n# GitLab High Availability Configuration\n\nexternal_url 'https://gitlab.example.com'\n\n# Disable built-in services (use external)\npostgresql['enable'] = false\nredis['enable'] = false\nnginx['enable'] = true\nunicorn['enable'] = true\nsidekiq['enable'] = true\ngitlab_workhorse['enable'] = true\ngitaly['enable'] = true\n\n# External PostgreSQL\ngitlab_rails['db_adapter'] = 'postgresql'\ngitlab_rails['db_encoding'] = 'unicode'\ngitlab_rails['db_host'] = 'postgres-master.example.com'\ngitlab_rails['db_port'] = 5432\ngitlab_rails['db_database'] = 'gitlabhq_production'\ngitlab_rails['db_username'] = 'gitlab'\ngitlab_rails['db_password'] = 'secure_db_password'\ngitlab_rails['db_load_balancing'] = {\n  'hosts' => ['postgres-slave1.example.com', 'postgres-slave2.example.com']\n}\n\n# External Redis\ngitlab_rails['redis_host'] = 'redis-master.example.com'\ngitlab_rails['redis_port'] = 6379\ngitlab_rails['redis_password'] = 'redis_secure_password'\ngitlab_rails['redis_sentinels'] = [\n  {'host' => 'redis-sentinel1.example.com', 'port' => 26379},\n  {'host' => 'redis-sentinel2.example.com', 'port' => 26379},\n  {'host' => 'redis-sentinel3.example.com', 'port' => 26379}\n]\n\n# Load balancing\nnginx['listen_addresses'] = ['0.0.0.0']\nnginx['real_ip_header'] = 'X-Forwarded-For'\nnginx['real_ip_recursive'] = 'on'\nnginx['real_ip_trusted_addresses'] = ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16']\n\n# Gitaly cluster (Enterprise)\ngit_data_dirs({\n  'default' => {\n    'gitaly_address' => 'tcp://gitaly1.example.com:8075',\n    'gitaly_token' => 'gitaly_secure_token'\n  },\n  'storage1' => {\n    'gitaly_address' => 'tcp://gitaly2.example.com:8075',\n    'gitaly_token' => 'gitaly_secure_token'\n  }\n})\n\n# Object storage (S3-compatible)\ngitlab_rails['object_store']['enabled'] = true\ngitlab_rails['object_store']['proxy_download'] = true\ngitlab_rails['object_store']['connection'] = {\n  'provider' => 'AWS',\n  'region' => 'us-west-2',\n  'aws_access_key_id' => 'object_store_access_key',\n  'aws_secret_access_key' => 'object_store_secret_key'\n}\ngitlab_rails['object_store']['objects']['artifacts']['bucket'] = 'gitlab-artifacts'\ngitlab_rails['object_store']['objects']['lfs']['bucket'] = 'gitlab-lfs'\ngitlab_rails['object_store']['objects']['uploads']['bucket'] = 'gitlab-uploads'\ngitlab_rails['object_store']['objects']['packages']['bucket'] = 'gitlab-packages'\n\n# Geo replication (Enterprise Premium)\ngitlab_rails['geo_primary_role'] = true  # Set to false for secondary\ngitlab_rails['geo_node_name'] = 'primary-site'\ngitlab_rails['geo_registry_replication_enabled'] = true\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Container Registry and Package Management\n\n### Secure Container Registry Setup\n```bash\n# Configure container registry with security scanning\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Container Registry configuration\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\nregistry['enable'] = true\n\n# Registry storage\nregistry['storage'] = {\n  's3' => {\n    'accesskey' => 'registry_s3_access_key',\n    'secretkey' => 'registry_s3_secret_key',\n    'bucket' => 'gitlab-registry',\n    'region' => 'us-west-2',\n    'encrypt' => true\n  }\n}\n\n# Registry security\nregistry['auth_token_realm'] = \"https://gitlab.example.com/jwt/auth\"\nregistry['auth_token_service'] = \"container_registry\"\nregistry['auth_token_issuer'] = \"gitlab-issuer\"\nregistry['auth_token_autoredirect'] = false\n\n# Health checks\nregistry['health_storagedriver_enabled'] = true\nregistry['health_storagedriver_interval'] = '10s'\nregistry['health_storagedriver_threshold'] = 3\n\n# Container scanning\ngitlab_rails['container_registry_token_expire_delay'] = 300\ngitlab_rails['container_registry_cleanup_enabled'] = true\n\n# Image retention policies\nregistry['middleware'] = {\n  'repository' => [\n    {\n      'name' => 'cloudfront',\n      'disabled' => false,\n      'options' => {\n        'baseurl' => 'https://registry-cdn.example.com',\n        'privatekey' => '/etc/gitlab/registry-cdn-private-key.pem',\n        'keypairid' => 'CLOUDFRONT_KEY_PAIR_ID',\n        'duration' => '3600s'\n      }\n    }\n  ]\n}\n\n# Package registry\ngitlab_rails['packages_enabled'] = true\ngitlab_rails['packages_storage_path'] = \"/var/opt/gitlab/gitlab-rails/shared/packages\"\nEOF\n\n# Create container registry cleanup policy\ncat > registry-cleanup-policy.json <<EOF\n{\n  \"name_regex\": \".*\",\n  \"name_regex_keep\": \"v\\\\d+\\\\.\\\\d+\\\\.\\\\d+\",\n  \"cadence\": \"7d\",\n  \"older_than\": \"30d\",\n  \"keep_n\": 10\n}\nEOF\n\n# Apply cleanup policy via API\ncurl --request PUT --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --header \"Content-Type: application/json\" \\\n  --data @registry-cleanup-policy.json \\\n  \"${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/registry/repositories/1\"\n\nsudo gitlab-ctl reconfigure\n```\n\n## Monitoring and Observability\n\n### Comprehensive Monitoring Setup\n```bash\n# Enable built-in monitoring stack\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Prometheus monitoring\nprometheus_monitoring['enable'] = true\nprometheus['enable'] = true\nprometheus['monitor_kubernetes'] = true\nprometheus['scrape_configs'] = [\n  {\n    'job_name' => 'gitlab-workhorse',\n    'static_configs' => [\n      { 'targets' => ['localhost:9229'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-unicorn',  \n    'static_configs' => [\n      { 'targets' => ['localhost:8080'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-sidekiq',\n    'static_configs' => [\n      { 'targets' => ['localhost:8082'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-pages',\n    'static_configs' => [\n      { 'targets' => ['localhost:8090'] }\n    ]\n  },\n  {\n    'job_name' => 'docker-registry',\n    'static_configs' => [\n      { 'targets' => ['localhost:5001'] }\n    ]\n  }\n]\n\n# Grafana configuration\ngrafana['enable'] = true\ngrafana['admin_password'] = 'secure_grafana_password'\ngrafana['disable_login_form'] = false\ngrafana['allow_user_sign_up'] = false\n\n# Grafana LDAP integration\ngrafana['ldap_enabled'] = true\ngrafana['ldap_allow_sign_up'] = false\ngrafana['ldap_servers'] = [{\n  'host' => 'ldap.example.com',\n  'port' => 636,\n  'uid' => 'sAMAccountName',\n  'bind_dn' => 'CN=grafana,OU=Service Accounts,DC=example,DC=com',\n  'password' => 'ldap_service_password',\n  'encryption' => 'ssl',\n  'base' => 'DC=example,DC=com',\n  'user_filter' => '',\n  'group_base' => 'OU=Groups,DC=example,DC=com',\n  'admin_group' => 'GitLab Administrators'\n}]\n\n# Node Exporter\nnode_exporter['enable'] = true\nnode_exporter['listen_address'] = 'localhost:9100'\n\n# Alert Manager\nalertmanager['enable'] = true\nalertmanager['admin_email'] = 'alerts@example.com'\nalertmanager['flags'] = {\n  'storage.path' => '/var/opt/gitlab/alertmanager/data',\n  'config.file' => '/var/opt/gitlab/alertmanager/alertmanager.yml'\n}\n\n# Log forwarding\nlogging['logrotate_frequency'] = \"daily\"\nlogging['logrotate_rotate'] = 30\nlogging['logrotate_compress'] = \"compress\"\nlogging['svlogd_size'] = 200 * 1024 * 1024  # 200MB\nlogging['svlogd_num'] = 30\nEOF\n\n# Create custom alerting rules\nsudo mkdir -p /var/opt/gitlab/alertmanager\n\nsudo tee /var/opt/gitlab/alertmanager/alertmanager.yml > /dev/null <<EOF\nglobal:\n  smtp_smarthost: 'smtp.example.com:587'\n  smtp_from: 'gitlab-alerts@example.com'\n  smtp_auth_username: 'gitlab-alerts@example.com'\n  smtp_auth_password: 'smtp_password'\n\nroute:\n  group_by: ['alertname', 'cluster', 'service']\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 12h\n  receiver: 'gitlab-alerts'\n  routes:\n  - match:\n      severity: critical\n    receiver: 'critical-alerts'\n    group_wait: 10s\n    repeat_interval: 5m\n\nreceivers:\n- name: 'gitlab-alerts'\n  email_configs:\n  - to: 'gitlab-admin@example.com'\n    subject: 'GitLab Alert: {{ .GroupLabels.alertname }}'\n    body: |\n      {{ range .Alerts }}\n      Alert: {{ .Annotations.summary }}\n      Description: {{ .Annotations.description }}\n      Instance: {{ .Labels.instance }}\n      {{ end }}\n\n- name: 'critical-alerts'\n  email_configs:\n  - to: 'oncall@example.com'\n    subject: 'CRITICAL GitLab Alert: {{ .GroupLabels.alertname }}'\n  slack_configs:\n  - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'\n    channel: '#critical-alerts'\n    title: 'Critical GitLab Alert'\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Performance Monitoring\n```bash\n# Create GitLab performance monitoring script\nsudo tee /usr/local/bin/gitlab-performance-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/gitlab-performance.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# Check GitLab service health\nfor service in unicorn sidekiq workhorse gitaly; do\n    if gitlab-ctl status $service | grep -q \"run:\"; then\n        log_message \"✓ $service is running\"\n    else\n        log_message \"✗ $service is not running\"\n    fi\ndone\n\n# Check database performance\nDB_CONNECTIONS=$(gitlab-psql -c \"SELECT count(*) FROM pg_stat_activity;\" -t)\nlog_message \"ℹ Database connections: ${DB_CONNECTIONS}\"\n\n# Check Redis performance  \nREDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\nlog_message \"ℹ Redis memory usage: ${REDIS_MEMORY}\"\n\n# Check Git repository storage\nREPO_SIZE=$(du -sh /var/opt/gitlab/git-data/repositories | cut -f1)\nlog_message \"ℹ Repository storage usage: ${REPO_SIZE}\"\n\n# Check background job queue\nSIDEKIQ_QUEUE=$(gitlab-rails runner \"puts Sidekiq::Queue.new.size\")\nlog_message \"ℹ Sidekiq queue size: ${SIDEKIQ_QUEUE}\"\n\n# Check GitLab metrics\nGITLAB_VERSION=$(gitlab-rake gitlab:env:info | grep \"GitLab information\" -A 10 | grep \"Version:\" | awk '{print $2}')\nlog_message \"ℹ GitLab version: ${GITLAB_VERSION}\"\n\n# Performance metrics via API\nAPI_RESPONSE_TIME=$(curl -w \"%{time_total}\" -s -o /dev/null https://gitlab.example.com/api/v4/projects)\nlog_message \"ℹ API response time: ${API_RESPONSE_TIME}s\"\n\n# Check disk I/O\nDISK_USAGE=$(df /var/opt/gitlab | awk 'NR==2 {print $5}' | sed 's/%//')\nlog_message \"ℹ Disk usage: ${DISK_USAGE}%\"\n\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message \"⚠ High disk usage detected\"\nfi\n\nlog_message \"Performance monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-performance-monitor.sh\n\n# Schedule performance monitoring\necho \"*/15 * * * * root /usr/local/bin/gitlab-performance-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## GitLab Runner Advanced Configuration\n\n### Secure Multi-Platform Runner Setup\n```bash\n# Create advanced runner configuration with security\nsudo tee /etc/gitlab-runner/config.toml > /dev/null <<EOF\nconcurrent = 10\ncheck_interval = 0\nlog_level = \"info\"\nlog_format = \"runner\"\nshutdown_timeout = 30\n\n[session_server]\n  session_timeout = 1800\n\n# Docker executor with security hardening\n[[runners]]\n  name = \"docker-secure-runner\"\n  url = \"https://gitlab.example.com/\"\n  token = \"secure_runner_token\"\n  executor = \"docker\"\n  output_limit = 4096\n  \n  # Security scripts\n  pre_clone_script = \"\"\"\n    echo 'Security scan initiated'\n    id\n    pwd\n    env | grep -E '^(CI_|GITLAB_)' | sort\n  \"\"\"\n  \n  pre_build_script = \"\"\"\n    echo 'Preparing secure build environment'\n    # Verify no sensitive data in environment\n    if env | grep -i -E '(password|secret|key|token)' | grep -v -E '^(CI_JOB_TOKEN|GITLAB_CI|CI_SERVER)'; then\n      echo 'ERROR: Sensitive data detected in environment'\n      exit 1\n    fi\n  \"\"\"\n  \n  post_build_script = \"\"\"\n    echo 'Cleaning up build artifacts'\n    rm -rf /tmp/* 2>/dev/null || true\n  \"\"\"\n  \n  [runners.docker]\n    tls_verify = false\n    image = \"alpine:latest\"\n    privileged = false\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [\"/cache\", \"/certs/client\"]\n    shm_size = 268435456  # 256MB\n    \n    # Security restrictions\n    cap_drop = [\"ALL\"]\n    cap_add = [\"CHOWN\", \"SETGID\", \"SETUID\"]\n    security_opt = [\"no-new-privileges:true\", \"apparmor:unconfined\"]\n    \n    # Resource limits\n    memory = \"2g\"\n    memory_swap = \"2g\"\n    memory_reservation = \"1g\"\n    cpus = \"2\"\n    \n    # Network security\n    network_mode = \"bridge\"\n    dns = [\"8.8.8.8\", \"8.8.4.4\"]\n    \n    # Disable dangerous features\n    disable_entrypoint_overwrite = true\n    \n    # Image pull policy\n    pull_policy = [\"if-not-present\"]\n    \n  [runners.docker.tmpfs]\n    \"/tmp\" = \"rw,noexec,nosuid,size=100m\"\n    \"/var/tmp\" = \"rw,noexec,nosuid,size=100m\"\n\n# Kubernetes executor (Enterprise recommended)\n[[runners]]\n  name = \"k8s-secure-runner\"\n  url = \"https://gitlab.example.com/\"\n  token = \"k8s_runner_token\"\n  executor = \"kubernetes\"\n  \n  [runners.kubernetes]\n    host = \"https://k8s.example.com:6443\"\n    namespace = \"gitlab-runner\"\n    privileged = false\n    image = \"alpine:latest\"\n    \n    # Security context\n    run_as_user = 1000\n    run_as_group = 1000\n    fs_group = 1000\n    \n    # Resource limits\n    memory_limit = \"4Gi\"\n    memory_request = \"2Gi\"\n    cpu_limit = \"2000m\"\n    cpu_request = \"1000m\"\n    \n    # Security policies\n    [runners.kubernetes.pod_security_context]\n      run_as_non_root = true\n      run_as_user = 1000\n      run_as_group = 1000\n      fs_group = 1000\n      seccomp_profile_type = \"RuntimeDefault\"\n      \n    [runners.kubernetes.container_security_context]\n      allow_privilege_escalation = false\n      read_only_root_filesystem = true\n      capabilities = { drop = [\"ALL\"] }\n      \n    # Volume mounts for security\n    [[runners.kubernetes.volumes.empty_dir]]\n      name = \"tmp\"\n      mount_path = \"/tmp\"\n      medium = \"Memory\"\n      \n    [[runners.kubernetes.volumes.empty_dir]]\n      name = \"var-tmp\"\n      mount_path = \"/var/tmp\"\n      medium = \"Memory\"\n\n# Shell executor for specific tasks (limited use)\n[[runners]]\n  name = \"shell-restricted-runner\"\n  url = \"https://gitlab.example.com/\"\n  token = \"shell_runner_token\"\n  executor = \"shell\"\n  shell = \"bash\"\n  \n  # Restricted tags only\n  tag_list = [\"shell\", \"restricted\"]\n  run_untagged = false\n  locked = true\n  \n  # Security environment\n  environment = [\n    \"PATH=/usr/local/bin:/usr/bin:/bin\",\n    \"HOME=/home/gitlab-runner\",\n    \"SHELL=/bin/bash\"\n  ]\n  \n  # Cleanup\n  builds_dir = \"/home/gitlab-runner/builds\"\n  cache_dir = \"/home/gitlab-runner/cache\"\n  \n  [runners.cache]\n    Type = \"s3\"\n    [runners.cache.s3]\n      ServerAddress = \"s3.amazonaws.com\"\n      BucketName = \"gitlab-runner-cache\"\n      BucketLocation = \"us-west-2\"\n      Insecure = false\nEOF\n\nsudo systemctl restart gitlab-runner\n```\n\n### GitLab Runner Auto-scaling (Cloud)\n```bash\n# Configure GitLab Runner with Docker Machine for auto-scaling\nsudo tee /etc/gitlab-runner/autoscale-config.toml > /dev/null <<EOF\nconcurrent = 50\ncheck_interval = 0\n\n[[runners]]\n  name = \"autoscale-runner\"\n  url = \"https://gitlab.example.com/\"\n  token = \"autoscale_runner_token\"\n  executor = \"docker+machine\"\n  \n  [runners.docker]\n    image = \"alpine:latest\"\n    privileged = false\n    disable_cache = false\n    volumes = [\"/cache\"]\n    \n    # Security\n    cap_drop = [\"ALL\"]\n    security_opt = [\"no-new-privileges:true\"]\n    \n  [runners.machine]\n    IdleCount = 2\n    IdleTime = 1800\n    MaxBuilds = 20\n    MachineName = \"gitlab-runner-%s\"\n    MachineDriver = \"amazonec2\"\n    \n    # AWS EC2 configuration\n    [runners.machine.autoscaling]\n      Periods = [\"* * 9-17 * * mon-fri *\", \"* * 18-8 * * * *\"]\n      IdleCount = [5, 1]\n      IdleTime = [1800, 3600]\n      Timezone = \"UTC\"\n    \n    # Machine options for security\n    [runners.machine.machineoptions]\n      amazonec2-access-key = \"aws_access_key\"\n      amazonec2-secret-key = \"aws_secret_key\"\n      amazonec2-region = \"us-west-2\"\n      amazonec2-vpc-id = \"vpc-12345678\"\n      amazonec2-subnet-id = \"subnet-87654321\"\n      amazonec2-security-group = \"gitlab-runner-sg\"\n      amazonec2-instance-type = \"t3.medium\"\n      amazonec2-ami = \"ami-0c02fb55956c7d316\"  # Amazon Linux 2\n      amazonec2-iam-instance-profile = \"GitLabRunnerInstanceProfile\"\n      amazonec2-use-private-address = \"true\"\n      amazonec2-tags = \"Name,gitlab-runner,Environment,production\"\n      amazonec2-root-size = \"20\"\n      amazonec2-volume-type = \"gp3\"\n      amazonec2-use-ebs-optimized = \"true\"\n      \n  [runners.cache]\n    Type = \"s3\"\n    Shared = true\n    [runners.cache.s3]\n      ServerAddress = \"s3.amazonaws.com\"\n      AccessKey = \"cache_access_key\"\n      SecretKey = \"cache_secret_key\"  \n      BucketName = \"gitlab-runner-cache\"\n      BucketLocation = \"us-west-2\"\n      Insecure = false\nEOF\n```\n\n## Verification and Health Checks\n\n### Comprehensive Health Monitoring\n```bash\nsudo tee /usr/local/bin/gitlab-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/gitlab-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check GitLab service status\nif gitlab-ctl status | grep -q \"down:\"; then\n    log_message \"⚠ Some GitLab services are down:\"\n    gitlab-ctl status | grep \"down:\" | while read line; do\n        log_message \"  - $line\"\n    done\nelse\n    log_message \"✓ All GitLab services are running\"\nfi\n\n# Check GitLab application health\nif gitlab-rake gitlab:check >/dev/null 2>&1; then\n    log_message \"✓ GitLab application health check passed\"\nelse\n    log_message \"✗ GitLab application health check failed\"\n    gitlab-rake gitlab:check | tail -10 >> ${HEALTH_LOG}\nfi\n\n# Check GitLab Runner connectivity\nRUNNERS_ONLINE=$(curl -s --header \"PRIVATE-TOKEN: admin_token\" https://gitlab.example.com/api/v4/runners | jq '[.[] | select(.status==\"online\")] | length')\nTOTAL_RUNNERS=$(curl -s --header \"PRIVATE-TOKEN: admin_token\" https://gitlab.example.com/api/v4/runners | jq '. | length')\nlog_message \"ℹ GitLab Runners: ${RUNNERS_ONLINE}/${TOTAL_RUNNERS} online\"\n\n# Check database connectivity\nif gitlab-psql -c \"SELECT version();\" >/dev/null 2>&1; then\n    log_message \"✓ Database connection is healthy\"\nelse\n    log_message \"✗ Database connection issues\"\nfi\n\n# Check Redis connectivity\nif redis-cli ping | grep -q \"PONG\"; then\n    log_message \"✓ Redis connection is healthy\"\nelse\n    log_message \"✗ Redis connection issues\"\nfi\n\n# Check container registry\nREGISTRY_STATUS=$(curl -s https://registry.example.com/v2/ | jq -r .message 2>/dev/null)\nif [ \"$REGISTRY_STATUS\" = \"authentication required\" ] || [ \"$REGISTRY_STATUS\" = \"null\" ]; then\n    log_message \"✓ Container registry is responding\"\nelse\n    log_message \"⚠ Container registry issues\"\nfi\n\n# Check backup status\nLAST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar 2>/dev/null | head -1)\nif [ -n \"$LAST_BACKUP\" ]; then\n    BACKUP_AGE=$(stat -c %Y \"$LAST_BACKUP\")\n    CURRENT_TIME=$(date +%s)\n    HOURS_SINCE_BACKUP=$(( (CURRENT_TIME - BACKUP_AGE) / 3600 ))\n    \n    if [ $HOURS_SINCE_BACKUP -lt 48 ]; then\n        log_message \"✓ Recent backup available (${HOURS_SINCE_BACKUP} hours old)\"\n    else\n        log_message \"⚠ Last backup is ${HOURS_SINCE_BACKUP} hours old\"\n    fi\nelse\n    log_message \"✗ No backup files found\"\nfi\n\n# Check SSL certificate expiry\nSSL_EXPIRY=$(echo | openssl s_client -servername gitlab.example.com -connect gitlab.example.com:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)\nSSL_EXPIRY_EPOCH=$(date -d \"$SSL_EXPIRY\" +%s)\nCURRENT_EPOCH=$(date +%s)\nDAYS_TO_EXPIRY=$(( (SSL_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n\nif [ $DAYS_TO_EXPIRY -lt 30 ]; then\n    log_message \"⚠ SSL certificate expires in ${DAYS_TO_EXPIRY} days\"\nelse\n    log_message \"✓ SSL certificate expires in ${DAYS_TO_EXPIRY} days\"\nfi\n\n# Check system resources\nCPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | cut -d'%' -f1)\nMEMORY_USAGE=$(free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}')\nlog_message \"ℹ System usage - CPU: ${CPU_USAGE}%, Memory: ${MEMORY_USAGE}%\"\n\nlog_message \"GitLab health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-health-check.sh\n\n# Schedule health checks every 15 minutes\necho \"*/15 * * * * root /usr/local/bin/gitlab-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n### Security Audit and Compliance\n```bash\nsudo tee /usr/local/bin/gitlab-security-audit.sh > /dev/null <<'EOF'\n#!/bin/bash\nAUDIT_LOG=\"/var/log/gitlab-security-audit.log\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${AUDIT_LOG}\n}\n\nlog_message \"Starting GitLab security audit...\"\n\n# Check user accounts with admin privileges\nADMIN_USERS=$(gitlab-rails runner \"puts User.admins.count\")\nlog_message \"ℹ ${ADMIN_USERS} users with admin privileges\"\n\n# Check for users without 2FA\nUSERS_WITHOUT_2FA=$(gitlab-rails runner \"puts User.where(two_factor_enabled: false).count\")\nlog_message \"ℹ ${USERS_WITHOUT_2FA} users without 2FA enabled\"\n\n# Check SSH key security\nWEAK_SSH_KEYS=$(gitlab-rails runner \"puts Key.where('LENGTH(key) < ?', 2048).count\")\nlog_message \"ℹ ${WEAK_SSH_KEYS} SSH keys shorter than 2048 bits\"\n\n# Check project visibility\nPUBLIC_PROJECTS=$(gitlab-rails runner \"puts Project.where(visibility_level: 20).count\")\nINTERNAL_PROJECTS=$(gitlab-rails runner \"puts Project.where(visibility_level: 10).count\")\nPRIVATE_PROJECTS=$(gitlab-rails runner \"puts Project.where(visibility_level: 0).count\")\nlog_message \"ℹ Projects - Public: ${PUBLIC_PROJECTS}, Internal: ${INTERNAL_PROJECTS}, Private: ${PRIVATE_PROJECTS}\"\n\n# Check for projects without security scanning\nPROJECTS_WITHOUT_SAST=$(gitlab-rails runner \"\nputs Project.joins(:ci_pipelines)\n  .where('ci_pipelines.created_at > ?', 30.days.ago)\n  .where.not(id: Ci::Build.joins(:pipeline).where('ci_builds.name ILIKE ?', '%sast%').select(:project_id))\n  .distinct.count\n\")\nlog_message \"ℹ ${PROJECTS_WITHOUT_SAST} active projects without SAST scanning\"\n\n# Check external integrations\nWEBHOOK_COUNT=$(gitlab-rails runner \"puts ProjectHook.count + SystemHook.count\")\nlog_message \"ℹ ${WEBHOOK_COUNT} webhooks configured\"\n\n# Check audit events (Enterprise)\nif gitlab-rails runner \"puts defined?(AuditEvent)\" | grep -q \"constant\"; then\n    RECENT_AUDIT_EVENTS=$(gitlab-rails runner \"puts AuditEvent.where('created_at > ?', 24.hours.ago).count\")\n    log_message \"ℹ ${RECENT_AUDIT_EVENTS} audit events in last 24 hours\"\nfi\n\n# Check for suspicious activity\nFAILED_LOGINS=$(grep \"Failed Login\" /var/log/gitlab/gitlab-rails/production.log | grep \"$(date +'%Y-%m-%d')\" | wc -l)\nif [ ${FAILED_LOGINS} -gt 20 ]; then\n    log_message \"⚠ ${FAILED_LOGINS} failed login attempts today\"\nelse\n    log_message \"✓ ${FAILED_LOGINS} failed login attempts today (normal)\"\nfi\n\n# Check for large file uploads\nLARGE_UPLOADS=$(find /var/opt/gitlab/git-data/repositories -type f -size +100M -mtime -7 | wc -l)\nif [ ${LARGE_UPLOADS} -gt 0 ]; then\n    log_message \"ℹ ${LARGE_UPLOADS} large files (>100MB) uploaded in last week\"\nfi\n\nlog_message \"Security audit completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-security-audit.sh\n\n# Schedule daily security audits\necho \"0 8 * * * root /usr/local/bin/gitlab-security-audit.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-ctl tail\n\n# Check configuration\nsudo gitlab-ctl show-config\nsudo gitlab-rake gitlab:check SANITIZE=true\n\n# Reconfigure GitLab\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n\n# Database issues\nsudo gitlab-psql -d gitlabhq_production\nsudo gitlab-rake db:migrate:status\n\n# Redis issues\nredis-cli ping\nredis-cli info\n\n# Check logs for errors\nsudo gitlab-ctl tail gitlab-workhorse\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail sidekiq\n\n# Performance issues\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-ctl status | grep memory\n\n# SSL/TLS issues\nsudo gitlab-rake gitlab:check\nopenssl s_client -connect gitlab.example.com:443\n\n# Container registry issues\nsudo gitlab-ctl registry-garbage-collect\ndocker login registry.example.com\n\n# Runner connectivity issues\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Backup issues\ngitlab-backup create STRATEGY=copy\ngitlab-backup restore BACKUP=timestamp\n\n# Reset admin password\nsudo gitlab-rake \"gitlab:password:reset[root]\"\n\n# Check disk usage\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage analysis\nps aux --sort=-%mem | grep gitlab\ngitlab-ctl status | grep memory\n\n# Network connectivity\ncurl -I https://gitlab.example.com\ntelnet gitlab.example.com 443\n\n# Service restart order (if needed)\nsudo gitlab-ctl stop\nsudo gitlab-ctl start postgresql\nsudo gitlab-ctl start redis\nsudo gitlab-ctl start\n```\n\n### Advanced Debugging\n```bash\n# Enable debug logging\nsudo gitlab-ctl edit-config\n# Add: gitlab_rails['log_level'] = 'DEBUG'\n\nsudo gitlab-ctl reconfigure\n\n# Debug specific services\nsudo gitlab-ctl tail gitlab-workhorse\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail sidekiq\nsudo gitlab-ctl tail gitaly\n\n# Database debugging\nsudo gitlab-psql -d gitlabhq_production -c \"\\l\"\nsudo gitlab-rake db:migrate:status\n\n# Git debugging\nsudo -u git gitaly-debug\nsudo gitlab-rake gitlab:gitaly:check\n\n# Performance profiling\nsudo gitlab-rake gitlab:setup\nsudo gitlab-rake gitlab:check:repos\nsudo gitlab-rake gitlab:cleanup:sessions\n\n# Container registry debugging\nsudo gitlab-ctl registry-garbage-collect -m\ndocker system df\n\n# Runner debugging\nsudo gitlab-runner --debug run\nsudo gitlab-runner exec docker test-job\n\n# Network debugging for distributed setup\nping -c 4 postgres-master.example.com\nping -c 4 redis-master.example.com\ntelnet postgres-master.example.com 5432\ntelnet redis-master.example.com 6379\n\n# Memory leak detection\npmap -x $(pgrep gitlab-workhorse)\nvalgrind --tool=memcheck --leak-check=full gitlab-workhorse\n\n# Strace for syscall analysis\nstrace -p $(pgrep gitlab-workhorse) -e trace=network,file\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.gitlab.com/)\n- [GitLab Admin Documentation](https://docs.gitlab.com/ee/administration/)\n- [Security Hardening Guide](https://docs.gitlab.com/security/hardening/)\n- [GitLab Runner Documentation](https://docs.gitlab.com/runner/)\n- [Container Registry Guide](https://docs.gitlab.com/ee/administration/packages/container_registry.html)\n- [GitLab API Documentation](https://docs.gitlab.com/ee/api/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"gitlab-installation-guide\" class=\"mobile-header\">GitLab Installation Guide</h1>\n<p class=\"mobile-paragraph\">Complete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry. Enterprise-grade solution for modern software development lifecycle with advanced security features.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">8GB RAM minimum, 16GB+ recommended for production</li>\n<li class=\"mobile-list-item\">4 CPU cores minimum, 8+ recommended</li>\n<li class=\"mobile-list-item\">50GB+ available disk space, SSD recommended</li>\n<li class=\"mobile-list-item\">Domain name for external access</li>\n<li class=\"mobile-list-item\">SSL certificates for production deployment</li>\n<li class=\"mobile-list-item\">SMTP server for email notifications</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-omnibus-package-recommended\" class=\"mobile-header\">Using Omnibus Package (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo apt-get update\nsudo apt-get install -y curl openssh-server ca-certificates tzdata perl postfix\n\n# Configure Postfix for email\nsudo dpkg-reconfigure postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab Enterprise Edition\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; apt-get install -y gitlab-ee\n\n# For GitLab Community Edition\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; apt-get install -y gitlab-ce\n\n# Initial configuration\nsudo gitlab-ctl reconfigure\n\n# Check status\nsudo gitlab-ctl status</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# For newer versions\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable and start services\nsudo systemctl enable --now sshd postfix\n\n# Configure SELinux and firewall\nsudo setsebool -P httpd_can_network_connect 1\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; yum install -y gitlab-ee\n\n# Configure and start\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable services\nsudo systemctl enable --now sshd postfix\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; dnf install -y gitlab-ee\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation-single-container\" class=\"mobile-header\">Docker Installation (Single Container)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create GitLab directories\nsudo mkdir -p /srv/gitlab/{config,logs,data}\n\n# Set environment variables\nexport GITLAB_HOME=/srv/gitlab\n\n# Run GitLab container with comprehensive configuration\nsudo docker run --detach \\\n  --hostname gitlab.example.com \\\n  --env GITLAB_OMNIBUS_CONFIG=&quot;\n    external_url &#039;https://gitlab.example.com&#039;;\n    gitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222;\n    \n    # SSL configuration\n    nginx[&#039;ssl_certificate&#039;] = &#039;/etc/gitlab/ssl/gitlab.crt&#039;;\n    nginx[&#039;ssl_certificate_key&#039;] = &#039;/etc/gitlab/ssl/gitlab.key&#039;;\n    nginx[&#039;ssl_protocols&#039;] = &#039;TLSv1.2 TLSv1.3&#039;;\n    nginx[&#039;ssl_prefer_server_ciphers&#039;] = &#039;off&#039;;\n    \n    # Security settings\n    gitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n      &#039;enabled&#039; =&gt; true,\n      &#039;ip_whitelist&#039; =&gt; [&#039;127.0.0.1&#039;, &#039;192.168.1.0/24&#039;],\n      &#039;maxretry&#039; =&gt; 10,\n      &#039;findtime&#039; =&gt; 60,\n      &#039;bantime&#039; =&gt; 3600\n    };\n    \n    # Performance settings\n    postgresql[&#039;shared_preload_libraries&#039;] = &#039;pg_stat_statements&#039;;\n    postgresql[&#039;max_connections&#039;] = 200;\n    postgresql[&#039;shared_buffers&#039;] = &#039;1GB&#039;;\n    postgresql[&#039;effective_cache_size&#039;] = &#039;4GB&#039;;\n    \n    # Container Registry\n    registry_external_url &#039;https://registry.example.com&#039;;\n    gitlab_rails[&#039;registry_enabled&#039;] = true;\n    \n    # Monitoring\n    prometheus_monitoring[&#039;enable&#039;] = true;\n    grafana[&#039;enable&#039;] = true;\n    grafana[&#039;admin_password&#039;] = &#039;secure_grafana_password&#039;;\n    \n    # Email configuration\n    gitlab_rails[&#039;smtp_enable&#039;] = true;\n    gitlab_rails[&#039;smtp_address&#039;] = &#039;smtp.example.com&#039;;\n    gitlab_rails[&#039;smtp_port&#039;] = 587;\n    gitlab_rails[&#039;smtp_user_name&#039;] = &#039;gitlab@example.com&#039;;\n    gitlab_rails[&#039;smtp_password&#039;] = &#039;smtp_secure_password&#039;;\n    gitlab_rails[&#039;smtp_domain&#039;] = &#039;example.com&#039;;\n    gitlab_rails[&#039;smtp_authentication&#039;] = &#039;login&#039;;\n    gitlab_rails[&#039;smtp_enable_starttls_auto&#039;] = true;\n    gitlab_rails[&#039;smtp_tls&#039;] = false;\n    gitlab_rails[&#039;smtp_openssl_verify_mode&#039;] = &#039;peer&#039;;\n    \n    # Email settings\n    gitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;;\n    gitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;;\n    \n    # Backup configuration\n    gitlab_rails[&#039;backup_keep_time&#039;] = 604800;\n    gitlab_rails[&#039;backup_upload_connection&#039;] = {\n      &#039;provider&#039; =&gt; &#039;AWS&#039;,\n      &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n      &#039;aws_access_key_id&#039; =&gt; &#039;backup_access_key&#039;,\n      &#039;aws_secret_access_key&#039; =&gt; &#039;backup_secret_key&#039;\n    };\n    gitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;;\n    &quot; \\\n  --publish 443:443 --publish 80:80 --publish 2222:22 \\\n  --name gitlab \\\n  --restart unless-stopped \\\n  --volume $GITLAB_HOME/config:/etc/gitlab \\\n  --volume $GITLAB_HOME/logs:/var/log/gitlab \\\n  --volume $GITLAB_HOME/data:/var/opt/gitlab \\\n  --shm-size 256m \\\n  gitlab/gitlab-ee:latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-compose-production-setup\" class=\"mobile-header\">Docker Compose (Production Setup)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">mkdir -p ~/gitlab-stack\ncd ~/gitlab-stack\n\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    container_name: gitlab\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url &#039;https://gitlab.example.com&#039;\n        \n        # Performance settings\n        postgresql[&#039;shared_buffers&#039;] = &quot;2GB&quot;\n        postgresql[&#039;effective_cache_size&#039;] = &quot;8GB&quot;\n        postgresql[&#039;max_connections&#039;] = 300\n        \n        # Security settings\n        gitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n          &#039;enabled&#039; =&gt; true,\n          &#039;ip_whitelist&#039; =&gt; [&#039;127.0.0.1&#039;, &#039;10.0.0.0/8&#039;, &#039;172.16.0.0/12&#039;, &#039;192.168.0.0/16&#039;],\n          &#039;maxretry&#039; =&gt; 10,\n          &#039;findtime&#039; =&gt; 60,\n          &#039;bantime&#039; =&gt; 3600\n        }\n        \n        # Container Registry\n        registry_external_url &#039;https://registry.example.com&#039;\n        gitlab_rails[&#039;registry_enabled&#039;] = true\n        \n        # Monitoring\n        prometheus_monitoring[&#039;enable&#039;] = true\n        grafana[&#039;enable&#039;] = true\n        \n        # Let&#039;s Encrypt (disable for reverse proxy setup)\n        letsencrypt[&#039;enable&#039;] = false\n        nginx[&#039;listen_port&#039;] = 80\n        nginx[&#039;listen_https&#039;] = false\n        \n        # GitLab Pages\n        pages_external_url &quot;https://pages.example.com&quot;\n        gitlab_pages[&#039;enable&#039;] = true\n    ports:\n      - &#039;80:80&#039;\n      - &#039;443:443&#039;\n      - &#039;2222:22&#039;\n    volumes:\n      - &#039;./config:/etc/gitlab&#039;\n      - &#039;./logs:/var/log/gitlab&#039;\n      - &#039;./data:/var/opt/gitlab&#039;\n    networks:\n      - gitlab\n    shm_size: &#039;256m&#039;\n    healthcheck:\n      test: [&quot;CMD-SHELL&quot;, &quot;gitlab-healthcheck --fail --max-time 10&quot;]\n      interval: 60s\n      timeout: 30s\n      retries: 5\n      start_period: 200s\n\n  gitlab-runner:\n    image: gitlab/gitlab-runner:latest\n    container_name: gitlab-runner\n    restart: unless-stopped\n    volumes:\n      - &#039;./runner-config:/etc/gitlab-runner&#039;\n      - &#039;/var/run/docker.sock:/var/run/docker.sock&#039;\n    networks:\n      - gitlab\n    depends_on:\n      - gitlab\n\n  redis:\n    image: redis:7-alpine\n    container_name: gitlab-redis\n    restart: unless-stopped\n    command: redis-server --appendonly yes --requirepass redis_secure_password\n    volumes:\n      - redis-data:/data\n    networks:\n      - gitlab\n\n  nginx:\n    image: nginx:alpine\n    container_name: gitlab-nginx\n    restart: unless-stopped\n    ports:\n      - &#039;443:443&#039;\n    volumes:\n      - &#039;./nginx/nginx.conf:/etc/nginx/nginx.conf:ro&#039;\n      - &#039;./nginx/ssl:/etc/nginx/ssl:ro&#039;\n    depends_on:\n      - gitlab\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\n\nvolumes:\n  redis-data:\nEOF\n\n# Create NGINX reverse proxy configuration\nmkdir -p nginx\ncat &gt; nginx/nginx.conf &lt;&lt;EOF\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream gitlab {\n        server gitlab:80;\n    }\n    \n    upstream registry {\n        server gitlab:5000;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name gitlab.example.com;\n\n        ssl_certificate /etc/nginx/ssl/gitlab.crt;\n        ssl_certificate_key /etc/nginx/ssl/gitlab.key;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n\n        client_max_body_size 0;\n        gzip off;\n\n        location / {\n            proxy_pass http://gitlab;\n            proxy_set_header Host \\$host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n        }\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name registry.example.com;\n\n        ssl_certificate /etc/nginx/ssl/registry.crt;\n        ssl_certificate_key /etc/nginx/ssl/registry.key;\n\n        client_max_body_size 0;\n\n        location /v2/ {\n            proxy_pass http://registry;\n            proxy_set_header Host \\$host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n        }\n    }\n}\nEOF\n\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"enterprise-configuration\" class=\"mobile-header\">Enterprise Configuration</h2>\n<h3 id=\"production-configuration-etcgitlabgitlabrb\" class=\"mobile-header\">Production Configuration (/etc/gitlab/gitlab.rb)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n# GitLab Enterprise Production Configuration\n\nexternal_url &#039;https://gitlab.example.com&#039;\n\n# Performance and Resource Settings\nunicorn[&#039;worker_timeout&#039;] = 60\nunicorn[&#039;worker_processes&#039;] = 8\nsidekiq[&#039;max_concurrency&#039;] = 25\nsidekiq[&#039;min_concurrency&#039;] = 10\n\n# PostgreSQL configuration\npostgresql[&#039;enable&#039;] = true\npostgresql[&#039;max_connections&#039;] = 300\npostgresql[&#039;shared_buffers&#039;] = &quot;2GB&quot;\npostgresql[&#039;effective_cache_size&#039;] = &quot;8GB&quot;\npostgresql[&#039;work_mem&#039;] = &quot;16MB&quot;\npostgresql[&#039;maintenance_work_mem&#039;] = &quot;256MB&quot;\npostgresql[&#039;checkpoint_completion_target&#039;] = 0.9\npostgresql[&#039;wal_buffers&#039;] = &quot;16MB&quot;\npostgresql[&#039;default_statistics_target&#039;] = 100\npostgresql[&#039;random_page_cost&#039;] = 1.1\npostgresql[&#039;effective_io_concurrency&#039;] = 200\n\n# Redis configuration\nredis[&#039;enable&#039;] = true\nredis[&#039;maxmemory&#039;] = &quot;1gb&quot;\nredis[&#039;maxmemory_policy&#039;] = &quot;allkeys-lru&quot;\nredis[&#039;save&#039;] = &#039;900 1 300 10 60 10000&#039;\nredis[&#039;password&#039;] = &#039;redis_secure_password&#039;\n\n# Gitaly configuration (Git RPC service)\ngitaly[&#039;enable&#039;] = true\ngitaly[&#039;auth_token&#039;] = &#039;secure_gitaly_token&#039;\ngitaly[&#039;ruby_max_rss&#039;] = 300000000  # 300MB\ngitaly[&#039;concurrency&#039;] = [\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SmartHTTPService/PostReceivePack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  },\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SSHService/SSHUploadPack&quot;, \n    &#039;max_per_repo&#039; =&gt; 3\n  }\n]\n\n# NGINX configuration\nnginx[&#039;enable&#039;] = true\nnginx[&#039;listen_port&#039;] = 80\nnginx[&#039;listen_https&#039;] = false\nnginx[&#039;redirect_http_to_https&#039;] = false\nnginx[&#039;ssl_certificate&#039;] = &quot;/etc/gitlab/ssl/gitlab.crt&quot;\nnginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/gitlab/ssl/gitlab.key&quot;\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;\nnginx[&#039;ssl_prefer_server_ciphers&#039;] = &quot;off&quot;\nnginx[&#039;ssl_ciphers&#039;] = &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&quot;\n\n# Container Registry\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\nregistry[&#039;enable&#039;] = true\nregistry[&#039;username&#039;] = &quot;registry&quot;\nregistry[&#039;uid&#039;] = 996\nregistry[&#039;gid&#039;] = 996\nregistry[&#039;dir&#039;] = &quot;/var/opt/gitlab/registry&quot;\nregistry[&#039;log_directory&#039;] = &quot;/var/log/gitlab/registry&quot;\nregistry[&#039;log_level&#039;] = &quot;info&quot;\nregistry[&#039;rootcertbundle&#039;] = &quot;/opt/gitlab/embedded/ssl/certs/cacert.pem&quot;\n\n# GitLab Pages\npages_external_url &quot;https://pages.example.com&quot;\ngitlab_pages[&#039;enable&#039;] = true\ngitlab_pages[&#039;dir&#039;] = &quot;/var/opt/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;log_directory&#039;] = &quot;/var/log/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;access_control&#039;] = true\ngitlab_pages[&#039;use_legacy_storage&#039;] = false\n\n# Email configuration\ngitlab_rails[&#039;smtp_enable&#039;] = true\ngitlab_rails[&#039;smtp_address&#039;] = &quot;smtp.example.com&quot;\ngitlab_rails[&#039;smtp_port&#039;] = 587\ngitlab_rails[&#039;smtp_user_name&#039;] = &quot;gitlab@example.com&quot;\ngitlab_rails[&#039;smtp_password&#039;] = &quot;smtp_secure_password&quot;\ngitlab_rails[&#039;smtp_domain&#039;] = &quot;example.com&quot;\ngitlab_rails[&#039;smtp_authentication&#039;] = &quot;login&quot;\ngitlab_rails[&#039;smtp_enable_starttls_auto&#039;] = true\ngitlab_rails[&#039;smtp_tls&#039;] = false\ngitlab_rails[&#039;smtp_openssl_verify_mode&#039;] = &#039;peer&#039;\n\ngitlab_rails[&#039;gitlab_email_enabled&#039;] = true\ngitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\ngitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\ngitlab_rails[&#039;gitlab_email_reply_to&#039;] = &#039;noreply@example.com&#039;\n\n# Security settings\ngitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n  &#039;enabled&#039; =&gt; true,\n  &#039;ip_whitelist&#039; =&gt; %w{127.0.0.1 192.168.1.0/24 10.0.0.0/8},\n  &#039;maxretry&#039; =&gt; 10,\n  &#039;findtime&#039; =&gt; 60,\n  &#039;bantime&#039; =&gt; 3600\n}\n\n# Two-factor authentication\ngitlab_rails[&#039;require_two_factor_authentication&#039;] = false\ngitlab_rails[&#039;two_factor_grace_period&#039;] = 8  # 8 hours instead of default 48\n\n# Session settings\ngitlab_rails[&#039;session_expire_delay&#039;] = 10080  # 1 week\ngitlab_rails[&#039;session_store_enabled&#039;] = true\n\n# Backup configuration\ngitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\ngitlab_rails[&#039;backup_upload_connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;backup_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;backup_secret_key&#039;\n}\ngitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;\ngitlab_rails[&#039;backup_multipart_chunk_size&#039;] = 104857600  # 100MB\n\n# Monitoring\nprometheus_monitoring[&#039;enable&#039;] = true\nprometheus[&#039;enable&#039;] = true\nprometheus[&#039;listen_address&#039;] = &#039;localhost:9090&#039;\nprometheus[&#039;scrape_configs&#039;] = [\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-workhorse&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:9229&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-unicorn&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8080&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-sidekiq&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8082&#039;] }\n    ]\n  }\n]\n\ngrafana[&#039;enable&#039;] = true\ngrafana[&#039;admin_password&#039;] = &#039;secure_grafana_password&#039;\ngrafana[&#039;disable_login_form&#039;] = false\n\n# Logging\nlogging[&#039;svlogd_size&#039;] = 200 * 1024 * 1024  # 200MB\nlogging[&#039;svlogd_num&#039;] = 30\nlogging[&#039;svlogd_timeout&#039;] = 24 * 60 * 60    # rotate after 24 hours\nlogging[&#039;logrotate_frequency&#039;] = &quot;daily&quot;\nlogging[&#039;logrotate_rotate&#039;] = 30\nlogging[&#039;logrotate_compress&#039;] = &quot;compress&quot;\n\n# Git settings\ngitlab_rails[&#039;gitlab_default_branch&#039;] = &#039;main&#039;\ngitlab_rails[&#039;max_request_duration_seconds&#039;] = 60\n\n# Rate limiting\ngitlab_rails[&#039;rate_limit_requests_per_period&#039;] = 300\ngitlab_rails[&#039;rate_limit_period&#039;] = 60\n\n# Enterprise features (if using GitLab EE)\n# gitlab_rails[&#039;ee_license&#039;] = File.read(&#039;/etc/gitlab/GitLab.gitlab-license&#039;)\n\n# Security scanning\ngitlab_rails[&#039;dependency_scanning_enabled&#039;] = true\ngitlab_rails[&#039;container_scanning_enabled&#039;] = true\ngitlab_rails[&#039;sast_enabled&#039;] = true\ngitlab_rails[&#039;secret_detection_enabled&#039;] = true\n\n# LDAP configuration (Enterprise)\ngitlab_rails[&#039;ldap_enabled&#039;] = false\ngitlab_rails[&#039;prevent_ldap_sign_in&#039;] = false\ngitlab_rails[&#039;ldap_servers&#039;] = {\n  &#039;main&#039; =&gt; {\n    &#039;label&#039; =&gt; &#039;LDAP&#039;,\n    &#039;host&#039; =&gt; &#039;ldap.example.com&#039;,\n    &#039;port&#039; =&gt; 636,\n    &#039;uid&#039; =&gt; &#039;sAMAccountName&#039;,\n    &#039;bind_dn&#039; =&gt; &#039;CN=gitlab,OU=Service Accounts,DC=example,DC=com&#039;,\n    &#039;password&#039; =&gt; &#039;ldap_service_password&#039;,\n    &#039;encryption&#039; =&gt; &#039;ssl&#039;,\n    &#039;verify_certificates&#039; =&gt; true,\n    &#039;ca_file&#039; =&gt; &#039;/etc/gitlab/ssl/ldap-ca.crt&#039;,\n    &#039;base&#039; =&gt; &#039;DC=example,DC=com&#039;,\n    &#039;user_filter&#039; =&gt; &#039;&#039;,\n    &#039;attributes&#039; =&gt; {\n      &#039;username&#039; =&gt; [&#039;uid&#039;, &#039;userid&#039;, &#039;sAMAccountName&#039;],\n      &#039;email&#039; =&gt; [&#039;mail&#039;, &#039;email&#039;, &#039;userPrincipalName&#039;],\n      &#039;name&#039; =&gt; &#039;cn&#039;,\n      &#039;first_name&#039; =&gt; &#039;givenName&#039;,\n      &#039;last_name&#039; =&gt; &#039;sn&#039;\n    },\n    &#039;group_base&#039; =&gt; &#039;OU=Groups,DC=example,DC=com&#039;,\n    &#039;admin_group&#039; =&gt; &#039;GitLab Administrators&#039;\n  }\n}\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo mkdir -p /etc/gitlab/ssl\n\n# Self-signed certificate for testing\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/gitlab/ssl/gitlab.key \\\n  -out /etc/gitlab/ssl/gitlab.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=gitlab.example.com&quot;\n\n# Production: Let&#039;s Encrypt integration\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Let&#039;s Encrypt configuration\nletsencrypt[&#039;enable&#039;] = true\nletsencrypt[&#039;contact_emails&#039;] = [&#039;admin@example.com&#039;]\nletsencrypt[&#039;auto_renew&#039;] = true\nletsencrypt[&#039;auto_renew_hour&#039;] = 0\nletsencrypt[&#039;auto_renew_minute&#039;] = 0\nletsencrypt[&#039;auto_renew_day_of_month&#039;] = &quot;*/4&quot;\n\n# Force HTTPS\nnginx[&#039;redirect_http_to_https&#039;] = true\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;\nnginx[&#039;ssl_prefer_server_ciphers&#039;] = &quot;off&quot;\nnginx[&#039;ssl_ciphers&#039;] = &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&quot;\n\n# HSTS\nnginx[&#039;hsts_max_age&#039;] = 31536000\nnginx[&#039;hsts_include_subdomains&#039;] = true\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-configuration\" class=\"mobile-header\">Advanced Security Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure security settings\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Security hardening\ngitlab_rails[&#039;webhook_timeout&#039;] = 10\ngitlab_rails[&#039;webhook_max_redirects&#039;] = 3\n\n# Disable password authentication (use SSO/LDAP)\ngitlab_rails[&#039;omniauth_allow_single_sign_on&#039;] = [&#039;saml&#039;, &#039;ldapmain&#039;]\ngitlab_rails[&#039;omniauth_block_auto_created_users&#039;] = false\ngitlab_rails[&#039;omniauth_auto_sign_in_with_provider&#039;] = &#039;saml&#039;\n\n# API rate limiting\ngitlab_rails[&#039;rate_limit_requests_per_period&#039;] = 1000\ngitlab_rails[&#039;rate_limit_period&#039;] = 60\n\n# Git over HTTP rate limiting\ngitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n  &#039;enabled&#039; =&gt; true,\n  &#039;ip_whitelist&#039; =&gt; %w{127.0.0.1 192.168.1.0/24},\n  &#039;maxretry&#039; =&gt; 20,\n  &#039;findtime&#039; =&gt; 60,\n  &#039;bantime&#039; =&gt; 3600\n}\n\n# Protected paths\ngitlab_rails[&#039;rack_attack_protected_paths&#039;] = [\n  &#039;/users/password&#039;,\n  &#039;/users/sign_in&#039;,\n  &#039;/api/v4/session.json&#039;,\n  &#039;/api/v4/session&#039;,\n  &#039;/users/confirmation&#039;,\n  &#039;/unsubscribes/&#039;,\n  &#039;/import/github/personal_access_token&#039;,\n  &#039;/admin/session&#039;\n]\n\n# SSH security\ngitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222\ngitlab_shell[&#039;auth_file&#039;] = &quot;/var/opt/gitlab/.ssh/authorized_keys&quot;\n\n# Container Registry security\nregistry[&#039;notifications&#039;] = [\n  {\n    &#039;name&#039; =&gt; &#039;security_scan&#039;,\n    &#039;url&#039; =&gt; &#039;https://security-scanner.example.com/webhook&#039;,\n    &#039;timeout&#039; =&gt; &#039;2000ms&#039;,\n    &#039;threshold&#039; =&gt; 3,\n    &#039;backoff&#039; =&gt; &#039;1000ms&#039;\n  }\n]\n\n# Secrets management\ngitlab_rails[&#039;db_password&#039;] = File.read(&#039;/etc/gitlab/secrets/db_password&#039;).strip\ngitlab_rails[&#039;secret_key_base&#039;] = File.read(&#039;/etc/gitlab/secrets/secret_key_base&#039;).strip\ngitlab_rails[&#039;otp_key_base&#039;] = File.read(&#039;/etc/gitlab/secrets/otp_key_base&#039;).strip\ngitlab_rails[&#039;encrypted_settings_key_base&#039;] = File.read(&#039;/etc/gitlab/secrets/encrypted_settings_key_base&#039;).strip\n\n# Audit logging\ngitlab_rails[&#039;audit_events_enabled&#039;] = true\n\n# Disable features that increase attack surface\ngitlab_rails[&#039;usage_ping_enabled&#039;] = false\ngitlab_rails[&#039;sentry_enabled&#039;] = false\nEOF\n\n# Create secrets directory and files\nsudo mkdir -p /etc/gitlab/secrets\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/db_password\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/secret_key_base\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/otp_key_base\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/encrypted_settings_key_base\n\n# Secure permissions\nsudo chmod 600 /etc/gitlab/secrets/*\nsudo chown git:git /etc/gitlab/secrets/*\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-runner-security-configuration\" class=\"mobile-header\">GitLab Runner Security Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure runner configuration\nsudo mkdir -p /etc/gitlab-runner\n\nsudo tee /etc/gitlab-runner/config.toml &gt; /dev/null &lt;&lt;EOF\nconcurrent = 4\ncheck_interval = 0\nshutdown_timeout = 0\n\n[session_server]\n  session_timeout = 1800\n\n[[runners]]\n  name = &quot;docker-runner-secure&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;runner_registration_token&quot;\n  executor = &quot;docker&quot;\n  \n  # Security settings\n  pre_clone_script = &quot;echo &#039;Starting secure build&#039;&quot;\n  pre_build_script = &quot;echo &#039;Preparing secure environment&#039;&quot;\n  post_build_script = &quot;echo &#039;Cleaning up secure environment&#039;&quot;\n  \n  [runners.docker]\n    tls_verify = false\n    image = &quot;alpine:latest&quot;\n    privileged = false  # Critical: Never use privileged mode\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [&quot;/cache&quot;, &quot;/certs/client&quot;]\n    shm_size = 0\n    network_mode = &quot;bridge&quot;\n    \n    # Security restrictions\n    cap_drop = [&quot;ALL&quot;]\n    cap_add = [&quot;CHOWN&quot;, &quot;SETGID&quot;, &quot;SETUID&quot;]\n    security_opt = [&quot;no-new-privileges:true&quot;]\n    \n    # Resource limits\n    memory = &quot;2g&quot;\n    memory_swap = &quot;2g&quot;\n    memory_reservation = &quot;1g&quot;\n    cpus = &quot;1.5&quot;\n    \n    # Network security\n    dns = [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;]\n    extra_hosts = [&quot;gitlab.example.com:192.168.1.100&quot;]\n    \n    # Image scanning\n    pull_policy = [&quot;if-not-present&quot;]\n    \n  [runners.docker.tmpfs]\n    &quot;/tmp&quot; = &quot;rw,noexec,nosuid,size=100m&quot;\n    &quot;/var/tmp&quot; = &quot;rw,noexec,nosuid,size=100m&quot;\n\n# Kubernetes executor (more secure)\n[[runners]]\n  name = &quot;k8s-runner-secure&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;k8s_runner_token&quot;\n  executor = &quot;kubernetes&quot;\n  \n  [runners.kubernetes]\n    host = &quot;https://k8s.example.com:6443&quot;\n    namespace = &quot;gitlab-runner&quot;\n    privileged = false  # Never use privileged\n    image = &quot;alpine:latest&quot;\n    \n    # Security context\n    run_as_user = 1000\n    run_as_group = 1000\n    fs_group = 1000\n    \n    # Resource limits\n    memory_limit = &quot;2Gi&quot;\n    memory_request = &quot;1Gi&quot;\n    cpu_limit = &quot;1000m&quot;\n    cpu_request = &quot;500m&quot;\n    \n    # Security policies\n    [runners.kubernetes.pod_security_context]\n      run_as_non_root = true\n      run_as_user = 1000\n      run_as_group = 1000\n      fs_group = 1000\n      \n    [[runners.kubernetes.volumes.empty_dir]]\n      name = &quot;tmp&quot;\n      mount_path = &quot;/tmp&quot;\n      medium = &quot;Memory&quot;\nEOF\n\n# Register runner with security tags\nsudo gitlab-runner register \\\n  --url &quot;https://gitlab.example.com/&quot; \\\n  --registration-token &quot;RUNNER_TOKEN&quot; \\\n  --description &quot;secure-docker-runner&quot; \\\n  --tag-list &quot;docker,secure,production&quot; \\\n  --run-untagged=&quot;false&quot; \\\n  --locked=&quot;true&quot; \\\n  --access-level=&quot;ref_protected&quot; \\\n  --executor &quot;docker&quot; \\\n  --docker-image alpine:latest \\\n  --docker-privileged=&quot;false&quot; \\\n  --docker-volumes &quot;/certs/client&quot;\n\nsudo systemctl enable --now gitlab-runner</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-pipeline-security\" class=\"mobile-header\">CI/CD Pipeline Security</h2>\n<h3 id=\"secure-pipeline-configuration\" class=\"mobile-header\">Secure Pipeline Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create .gitlab-ci.yml with security best practices\ncat &gt; .gitlab-ci.yml &lt;&lt;EOF\n# GitLab CI/CD Security Best Practices - 2024\n\nstages:\n  - security-scan\n  - test\n  - build\n  - security-test\n  - deploy\n\nvariables:\n  # Security variables\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: &quot;/certs&quot;\n  SECURE_LOG_LEVEL: info\n  \n  # Use protected variables for sensitive data\n  # DEPLOY_TOKEN: (set in GitLab UI as protected variable)\n  # AWS_ACCESS_KEY: (set in GitLab UI as protected variable)\n\n# Security scanning stage\nsecret-detection:\n  stage: security-scan\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/secrets:latest\n  script:\n    - echo &quot;Scanning for secrets in code...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      secret_detection: gl-secret-detection-report.json\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n  tags:\n    - secure\n\ndependency-scanning:\n  stage: security-scan  \n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium:latest\n  script:\n    - echo &quot;Scanning dependencies for vulnerabilities...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      dependency_scanning: gl-dependency-scanning-report.json\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n  tags:\n    - secure\n\nsast:\n  stage: security-scan\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/sobelow:latest\n  script:\n    - echo &quot;Static application security testing...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n  tags:\n    - secure\n\n# Container scanning\ncontainer-scanning:\n  stage: security-test\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/klar:latest\n  script:\n    - echo &quot;Scanning container image for vulnerabilities...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n  dependencies:\n    - build\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n  tags:\n    - secure\n\n# Secure build stage\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  before_script:\n    # Verify image signatures\n    - echo &quot;Verifying base image integrity...&quot;\n    - docker trust inspect alpine:latest\n  script:\n    - echo &quot;Building application with security scanning...&quot;\n    - docker build -t \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA .\n    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n    - docker login -u \\$CI_REGISTRY_USER -p \\$CI_REGISTRY_PASSWORD \\$CI_REGISTRY\n    - docker push \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n  tags:\n    - secure\n\n# Secure deployment\ndeploy-production:\n  stage: deploy\n  image: alpine:latest\n  before_script:\n    # Install kubectl and verify cluster connectivity\n    - apk add --no-cache curl\n    - curl -LO &quot;https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl&quot;\n    - chmod +x kubectl &amp;&amp; mv kubectl /usr/local/bin/\n    - kubectl config use-context production-cluster\n    - kubectl auth can-i create deployments --namespace=production\n  script:\n    - echo &quot;Deploying to production with security validations...&quot;\n    - kubectl apply -f k8s/production/ --namespace=production\n    - kubectl rollout status deployment/app --namespace=production --timeout=300s\n  environment:\n    name: production\n    url: https://app.example.com\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n      when: manual\n  only:\n    variables:\n      - \\$CI_COMMIT_REF_PROTECTED == &quot;true&quot;\n  tags:\n    - secure\n    - production\n\n# Security compliance check\ncompliance-check:\n  stage: security-test\n  image: alpine:latest\n  script:\n    - echo &quot;Running compliance checks...&quot;\n    - apk add --no-cache curl jq\n    - |\n      # Check for required security labels in Docker images\n      if ! docker inspect \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA | jq -r &#039;.[].Config.Labels[&quot;security.scan&quot;]&#039; | grep -q &quot;passed&quot;; then\n        echo &quot;ERROR: Image failed security scan&quot;\n        exit 1\n      fi\n    - echo &quot;Compliance check passed&quot;\n  dependencies:\n    - container-scanning\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n  tags:\n    - secure\n\n# Infrastructure as Code scanning\niac-scanning:\n  stage: security-scan\n  image: bridgecrew/checkov:latest\n  script:\n    - checkov --framework terraform --framework kubernetes --framework dockerfile\n  artifacts:\n    reports:\n      junit: checkov-report.xml\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n      changes:\n        - &quot;**/*.tf&quot;\n        - &quot;**/*.yml&quot;\n        - &quot;**/*.yaml&quot;\n        - &quot;**/Dockerfile*&quot;\n  tags:\n    - secure\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rbac-and-access-control\" class=\"mobile-header\">RBAC and Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure GitLab RBAC via API\nGITLAB_URL=&quot;https://gitlab.example.com&quot;\nADMIN_TOKEN=&quot;your_admin_token&quot;\n\n# Create groups with specific permissions\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;name=developers&amp;path=developers&amp;description=Development team&amp;visibility=private&quot; \\\n  &quot;${GITLAB_URL}/api/v4/groups&quot;\n\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;name=security-team&amp;path=security-team&amp;description=Security team&amp;visibility=private&quot; \\\n  &quot;${GITLAB_URL}/api/v4/groups&quot;\n\n# Create projects with security templates\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;name=secure-app&amp;description=Secure application&amp;visibility=private&amp;issues_enabled=true&amp;merge_requests_enabled=true&amp;wiki_enabled=false&amp;builds_enabled=true&amp;snippets_enabled=false&amp;container_registry_enabled=true&amp;shared_runners_enabled=false&quot; \\\n  &quot;${GITLAB_URL}/api/v4/projects&quot;\n\n# Configure branch protection\nPROJECT_ID=&quot;1&quot;  # Replace with actual project ID\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;name=main&amp;code_owner_approval_required=true&amp;push_access_level=40&amp;merge_access_level=40&amp;unprotect_access_level=40&quot; \\\n  &quot;${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/protected_branches&quot;\n\n# Configure push rules (Premium/Ultimate)\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;deny_delete_tag=true&amp;member_check=true&amp;prevent_secrets=true&amp;author_email_regex=.*@example.com&amp;file_extension_restriction=jar,exe&amp;max_file_size=100&quot; \\\n  &quot;${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/push_rule&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"vulnerability-scanning-integration\" class=\"mobile-header\">Vulnerability Scanning Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure dependency proxy for secure image caching\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Dependency Proxy for secure image caching\ngitlab_rails[&#039;dependency_proxy_enabled&#039;] = true\ngitlab_rails[&#039;dependency_proxy_storage_path&#039;] = &quot;/var/opt/gitlab/gitlab-rails/shared/dependency_proxy&quot;\n\n# Security scanning\ngitlab_rails[&#039;sast_enabled&#039;] = true\ngitlab_rails[&#039;dependency_scanning_enabled&#039;] = true\ngitlab_rails[&#039;container_scanning_enabled&#039;] = true\ngitlab_rails[&#039;secret_detection_enabled&#039;] = true\ngitlab_rails[&#039;license_scanning_enabled&#039;] = true\n\n# Secure package registry\ngitlab_rails[&#039;packages_enabled&#039;] = true\ngitlab_rails[&#039;packages_storage_path&#039;] = &quot;/var/opt/gitlab/gitlab-rails/shared/packages&quot;\nEOF\n\n# Create custom security scanning templates\nmkdir -p .gitlab/ci-templates\n\ncat &gt; .gitlab/ci-templates/Security-Scanning.gitlab-ci.yml &lt;&lt;EOF\n# Custom Security Scanning Template\n\n.security-scan-template:\n  stage: security-scan\n  variables:\n    SECURE_LOG_LEVEL: info\n  before_script:\n    - echo &quot;Preparing security scan environment...&quot;\n    - apk add --no-cache curl jq\n  tags:\n    - secure\n\ncustom-sast:\n  extends: .security-scan-template\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/semgrep:latest\n  script:\n    - echo &quot;Running custom SAST analysis...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n    expire_in: 1 week\n\ncustom-secrets-scan:\n  extends: .security-scan-template\n  image: trufflesecurity/trufflehog:latest\n  script:\n    - echo &quot;Scanning for secrets with TruffleHog...&quot;\n    - trufflehog git file://. --json &gt; trufflehog-report.json\n    - |\n      if [ -s trufflehog-report.json ]; then\n        echo &quot;Secrets detected!&quot;\n        cat trufflehog-report.json\n        exit 1\n      fi\n  artifacts:\n    reports:\n      secret_detection: trufflehog-report.json\n    expire_in: 1 week\n\nimage-vulnerability-scan:\n  extends: .security-scan-template\n  image: aquasec/trivy:latest\n  script:\n    - echo &quot;Scanning Docker images for vulnerabilities...&quot;\n    - trivy image --format template --template &quot;@contrib/gitlab.tpl&quot; \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n    expire_in: 1 week\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"enterprise-backup-strategy\" class=\"mobile-header\">Enterprise Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/gitlab-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/gitlab&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{omnibus,secrets,ssl,logs}\n\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy SKIP=uploads,builds,artifacts,lfs,registry,pages\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/omnibus/gitlab-config-${DATE}.tar.gz \\\n    /etc/gitlab/gitlab.rb \\\n    /etc/gitlab/gitlab-secrets.json\n\n# Backup SSL certificates\ntar -czf ${BACKUP_DIR}/ssl/gitlab-ssl-${DATE}.tar.gz \\\n    /etc/gitlab/ssl/ \\\n    /etc/letsencrypt/\n\n# Backup secrets\ntar -czf ${BACKUP_DIR}/secrets/gitlab-secrets-${DATE}.tar.gz \\\n    /etc/gitlab/secrets/\n\n# Upload to multiple cloud storage backends\naws s3 cp ${BACKUP_DIR}/ s3://gitlab-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination gitlab-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://gitlab-backups/\n\n# Geo-replication backup (Enterprise)\nif command -v gitlab-rake &gt;/dev/null 2&gt;&amp;1; then\n    gitlab-rake gitlab:geo:check\n    gitlab-rake geo:status\nfi\n\n# Test backup integrity\nLATEST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar | head -1)\nif [ -n &quot;$LATEST_BACKUP&quot; ]; then\n    echo &quot;Latest backup: $LATEST_BACKUP&quot;\n    tar -tf &quot;$LATEST_BACKUP&quot; &gt; /tmp/backup-contents.txt\n    if [ $? -eq 0 ]; then\n        echo &quot;✓ Backup integrity verified&quot;\n    else\n        echo &quot;✗ Backup integrity check failed&quot;\n    fi\nfi\n\n# Keep only last 7 backups locally\nfind /var/opt/gitlab/backups/ -name &quot;*_gitlab_backup.tar&quot; -mtime +7 -delete\nfind ${BACKUP_DIR} -name &quot;gitlab-*&quot; -type f -mtime +7 -delete\n\necho &quot;GitLab backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backups\necho &quot;0 2 * * * root /usr/local/bin/gitlab-backup.sh&quot; | sudo tee -a /etc/crontab\n\n# Create disaster recovery script\nsudo tee /usr/local/bin/gitlab-restore.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_FILE=&quot;${1}&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    echo &quot;Available backups:&quot;\n    ls -la /var/opt/gitlab/backups/*_gitlab_backup.tar\n    exit 1\nfi\n\n# Stop GitLab services\ngitlab-ctl stop unicorn\ngitlab-ctl stop puma\ngitlab-ctl stop sidekiq\n\n# Restore from backup\ngitlab-backup restore BACKUP=$(basename $BACKUP_FILE _gitlab_backup.tar) force=yes\n\n# Restore configuration\nif [ -f &quot;/backup/gitlab/omnibus/gitlab-config-latest.tar.gz&quot; ]; then\n    cd /\n    tar -xzf /backup/gitlab/omnibus/gitlab-config-latest.tar.gz\nfi\n\n# Reconfigure and restart\ngitlab-ctl reconfigure\ngitlab-ctl restart\n\n# Verify installation\ngitlab-rake gitlab:check SANITIZE=true\n\necho &quot;GitLab restore completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-restore.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure GitLab for HA with external services\nsudo tee /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n# GitLab High Availability Configuration\n\nexternal_url &#039;https://gitlab.example.com&#039;\n\n# Disable built-in services (use external)\npostgresql[&#039;enable&#039;] = false\nredis[&#039;enable&#039;] = false\nnginx[&#039;enable&#039;] = true\nunicorn[&#039;enable&#039;] = true\nsidekiq[&#039;enable&#039;] = true\ngitlab_workhorse[&#039;enable&#039;] = true\ngitaly[&#039;enable&#039;] = true\n\n# External PostgreSQL\ngitlab_rails[&#039;db_adapter&#039;] = &#039;postgresql&#039;\ngitlab_rails[&#039;db_encoding&#039;] = &#039;unicode&#039;\ngitlab_rails[&#039;db_host&#039;] = &#039;postgres-master.example.com&#039;\ngitlab_rails[&#039;db_port&#039;] = 5432\ngitlab_rails[&#039;db_database&#039;] = &#039;gitlabhq_production&#039;\ngitlab_rails[&#039;db_username&#039;] = &#039;gitlab&#039;\ngitlab_rails[&#039;db_password&#039;] = &#039;secure_db_password&#039;\ngitlab_rails[&#039;db_load_balancing&#039;] = {\n  &#039;hosts&#039; =&gt; [&#039;postgres-slave1.example.com&#039;, &#039;postgres-slave2.example.com&#039;]\n}\n\n# External Redis\ngitlab_rails[&#039;redis_host&#039;] = &#039;redis-master.example.com&#039;\ngitlab_rails[&#039;redis_port&#039;] = 6379\ngitlab_rails[&#039;redis_password&#039;] = &#039;redis_secure_password&#039;\ngitlab_rails[&#039;redis_sentinels&#039;] = [\n  {&#039;host&#039; =&gt; &#039;redis-sentinel1.example.com&#039;, &#039;port&#039; =&gt; 26379},\n  {&#039;host&#039; =&gt; &#039;redis-sentinel2.example.com&#039;, &#039;port&#039; =&gt; 26379},\n  {&#039;host&#039; =&gt; &#039;redis-sentinel3.example.com&#039;, &#039;port&#039; =&gt; 26379}\n]\n\n# Load balancing\nnginx[&#039;listen_addresses&#039;] = [&#039;0.0.0.0&#039;]\nnginx[&#039;real_ip_header&#039;] = &#039;X-Forwarded-For&#039;\nnginx[&#039;real_ip_recursive&#039;] = &#039;on&#039;\nnginx[&#039;real_ip_trusted_addresses&#039;] = [&#039;10.0.0.0/8&#039;, &#039;172.16.0.0/12&#039;, &#039;192.168.0.0/16&#039;]\n\n# Gitaly cluster (Enterprise)\ngit_data_dirs({\n  &#039;default&#039; =&gt; {\n    &#039;gitaly_address&#039; =&gt; &#039;tcp://gitaly1.example.com:8075&#039;,\n    &#039;gitaly_token&#039; =&gt; &#039;gitaly_secure_token&#039;\n  },\n  &#039;storage1&#039; =&gt; {\n    &#039;gitaly_address&#039; =&gt; &#039;tcp://gitaly2.example.com:8075&#039;,\n    &#039;gitaly_token&#039; =&gt; &#039;gitaly_secure_token&#039;\n  }\n})\n\n# Object storage (S3-compatible)\ngitlab_rails[&#039;object_store&#039;][&#039;enabled&#039;] = true\ngitlab_rails[&#039;object_store&#039;][&#039;proxy_download&#039;] = true\ngitlab_rails[&#039;object_store&#039;][&#039;connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;object_store_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;object_store_secret_key&#039;\n}\ngitlab_rails[&#039;object_store&#039;][&#039;objects&#039;][&#039;artifacts&#039;][&#039;bucket&#039;] = &#039;gitlab-artifacts&#039;\ngitlab_rails[&#039;object_store&#039;][&#039;objects&#039;][&#039;lfs&#039;][&#039;bucket&#039;] = &#039;gitlab-lfs&#039;\ngitlab_rails[&#039;object_store&#039;][&#039;objects&#039;][&#039;uploads&#039;][&#039;bucket&#039;] = &#039;gitlab-uploads&#039;\ngitlab_rails[&#039;object_store&#039;][&#039;objects&#039;][&#039;packages&#039;][&#039;bucket&#039;] = &#039;gitlab-packages&#039;\n\n# Geo replication (Enterprise Premium)\ngitlab_rails[&#039;geo_primary_role&#039;] = true  # Set to false for secondary\ngitlab_rails[&#039;geo_node_name&#039;] = &#039;primary-site&#039;\ngitlab_rails[&#039;geo_registry_replication_enabled&#039;] = true\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"container-registry-and-package-management\" class=\"mobile-header\">Container Registry and Package Management</h2>\n<h3 id=\"secure-container-registry-setup\" class=\"mobile-header\">Secure Container Registry Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure container registry with security scanning\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Container Registry configuration\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\nregistry[&#039;enable&#039;] = true\n\n# Registry storage\nregistry[&#039;storage&#039;] = {\n  &#039;s3&#039; =&gt; {\n    &#039;accesskey&#039; =&gt; &#039;registry_s3_access_key&#039;,\n    &#039;secretkey&#039; =&gt; &#039;registry_s3_secret_key&#039;,\n    &#039;bucket&#039; =&gt; &#039;gitlab-registry&#039;,\n    &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n    &#039;encrypt&#039; =&gt; true\n  }\n}\n\n# Registry security\nregistry[&#039;auth_token_realm&#039;] = &quot;https://gitlab.example.com/jwt/auth&quot;\nregistry[&#039;auth_token_service&#039;] = &quot;container_registry&quot;\nregistry[&#039;auth_token_issuer&#039;] = &quot;gitlab-issuer&quot;\nregistry[&#039;auth_token_autoredirect&#039;] = false\n\n# Health checks\nregistry[&#039;health_storagedriver_enabled&#039;] = true\nregistry[&#039;health_storagedriver_interval&#039;] = &#039;10s&#039;\nregistry[&#039;health_storagedriver_threshold&#039;] = 3\n\n# Container scanning\ngitlab_rails[&#039;container_registry_token_expire_delay&#039;] = 300\ngitlab_rails[&#039;container_registry_cleanup_enabled&#039;] = true\n\n# Image retention policies\nregistry[&#039;middleware&#039;] = {\n  &#039;repository&#039; =&gt; [\n    {\n      &#039;name&#039; =&gt; &#039;cloudfront&#039;,\n      &#039;disabled&#039; =&gt; false,\n      &#039;options&#039; =&gt; {\n        &#039;baseurl&#039; =&gt; &#039;https://registry-cdn.example.com&#039;,\n        &#039;privatekey&#039; =&gt; &#039;/etc/gitlab/registry-cdn-private-key.pem&#039;,\n        &#039;keypairid&#039; =&gt; &#039;CLOUDFRONT_KEY_PAIR_ID&#039;,\n        &#039;duration&#039; =&gt; &#039;3600s&#039;\n      }\n    }\n  ]\n}\n\n# Package registry\ngitlab_rails[&#039;packages_enabled&#039;] = true\ngitlab_rails[&#039;packages_storage_path&#039;] = &quot;/var/opt/gitlab/gitlab-rails/shared/packages&quot;\nEOF\n\n# Create container registry cleanup policy\ncat &gt; registry-cleanup-policy.json &lt;&lt;EOF\n{\n  &quot;name_regex&quot;: &quot;.*&quot;,\n  &quot;name_regex_keep&quot;: &quot;v\\\\d+\\\\.\\\\d+\\\\.\\\\d+&quot;,\n  &quot;cadence&quot;: &quot;7d&quot;,\n  &quot;older_than&quot;: &quot;30d&quot;,\n  &quot;keep_n&quot;: 10\n}\nEOF\n\n# Apply cleanup policy via API\ncurl --request PUT --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --header &quot;Content-Type: application/json&quot; \\\n  --data @registry-cleanup-policy.json \\\n  &quot;${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/registry/repositories/1&quot;\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-observability\" class=\"mobile-header\">Monitoring and Observability</h2>\n<h3 id=\"comprehensive-monitoring-setup\" class=\"mobile-header\">Comprehensive Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable built-in monitoring stack\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Prometheus monitoring\nprometheus_monitoring[&#039;enable&#039;] = true\nprometheus[&#039;enable&#039;] = true\nprometheus[&#039;monitor_kubernetes&#039;] = true\nprometheus[&#039;scrape_configs&#039;] = [\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-workhorse&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:9229&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-unicorn&#039;,  \n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8080&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-sidekiq&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8082&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-pages&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8090&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;docker-registry&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:5001&#039;] }\n    ]\n  }\n]\n\n# Grafana configuration\ngrafana[&#039;enable&#039;] = true\ngrafana[&#039;admin_password&#039;] = &#039;secure_grafana_password&#039;\ngrafana[&#039;disable_login_form&#039;] = false\ngrafana[&#039;allow_user_sign_up&#039;] = false\n\n# Grafana LDAP integration\ngrafana[&#039;ldap_enabled&#039;] = true\ngrafana[&#039;ldap_allow_sign_up&#039;] = false\ngrafana[&#039;ldap_servers&#039;] = [{\n  &#039;host&#039; =&gt; &#039;ldap.example.com&#039;,\n  &#039;port&#039; =&gt; 636,\n  &#039;uid&#039; =&gt; &#039;sAMAccountName&#039;,\n  &#039;bind_dn&#039; =&gt; &#039;CN=grafana,OU=Service Accounts,DC=example,DC=com&#039;,\n  &#039;password&#039; =&gt; &#039;ldap_service_password&#039;,\n  &#039;encryption&#039; =&gt; &#039;ssl&#039;,\n  &#039;base&#039; =&gt; &#039;DC=example,DC=com&#039;,\n  &#039;user_filter&#039; =&gt; &#039;&#039;,\n  &#039;group_base&#039; =&gt; &#039;OU=Groups,DC=example,DC=com&#039;,\n  &#039;admin_group&#039; =&gt; &#039;GitLab Administrators&#039;\n}]\n\n# Node Exporter\nnode_exporter[&#039;enable&#039;] = true\nnode_exporter[&#039;listen_address&#039;] = &#039;localhost:9100&#039;\n\n# Alert Manager\nalertmanager[&#039;enable&#039;] = true\nalertmanager[&#039;admin_email&#039;] = &#039;alerts@example.com&#039;\nalertmanager[&#039;flags&#039;] = {\n  &#039;storage.path&#039; =&gt; &#039;/var/opt/gitlab/alertmanager/data&#039;,\n  &#039;config.file&#039; =&gt; &#039;/var/opt/gitlab/alertmanager/alertmanager.yml&#039;\n}\n\n# Log forwarding\nlogging[&#039;logrotate_frequency&#039;] = &quot;daily&quot;\nlogging[&#039;logrotate_rotate&#039;] = 30\nlogging[&#039;logrotate_compress&#039;] = &quot;compress&quot;\nlogging[&#039;svlogd_size&#039;] = 200 * 1024 * 1024  # 200MB\nlogging[&#039;svlogd_num&#039;] = 30\nEOF\n\n# Create custom alerting rules\nsudo mkdir -p /var/opt/gitlab/alertmanager\n\nsudo tee /var/opt/gitlab/alertmanager/alertmanager.yml &gt; /dev/null &lt;&lt;EOF\nglobal:\n  smtp_smarthost: &#039;smtp.example.com:587&#039;\n  smtp_from: &#039;gitlab-alerts@example.com&#039;\n  smtp_auth_username: &#039;gitlab-alerts@example.com&#039;\n  smtp_auth_password: &#039;smtp_password&#039;\n\nroute:\n  group_by: [&#039;alertname&#039;, &#039;cluster&#039;, &#039;service&#039;]\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 12h\n  receiver: &#039;gitlab-alerts&#039;\n  routes:\n  - match:\n      severity: critical\n    receiver: &#039;critical-alerts&#039;\n    group_wait: 10s\n    repeat_interval: 5m\n\nreceivers:\n- name: &#039;gitlab-alerts&#039;\n  email_configs:\n  - to: &#039;gitlab-admin@example.com&#039;\n    subject: &#039;GitLab Alert: {{ .GroupLabels.alertname }}&#039;\n    body: |\n      {{ range .Alerts }}\n      Alert: {{ .Annotations.summary }}\n      Description: {{ .Annotations.description }}\n      Instance: {{ .Labels.instance }}\n      {{ end }}\n\n- name: &#039;critical-alerts&#039;\n  email_configs:\n  - to: &#039;oncall@example.com&#039;\n    subject: &#039;CRITICAL GitLab Alert: {{ .GroupLabels.alertname }}&#039;\n  slack_configs:\n  - api_url: &#039;https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK&#039;\n    channel: &#039;#critical-alerts&#039;\n    title: &#039;Critical GitLab Alert&#039;\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring\" class=\"mobile-header\">Performance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create GitLab performance monitoring script\nsudo tee /usr/local/bin/gitlab-performance-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/gitlab-performance.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# Check GitLab service health\nfor service in unicorn sidekiq workhorse gitaly; do\n    if gitlab-ctl status $service | grep -q &quot;run:&quot;; then\n        log_message &quot;✓ $service is running&quot;\n    else\n        log_message &quot;✗ $service is not running&quot;\n    fi\ndone\n\n# Check database performance\nDB_CONNECTIONS=$(gitlab-psql -c &quot;SELECT count(*) FROM pg_stat_activity;&quot; -t)\nlog_message &quot;ℹ Database connections: ${DB_CONNECTIONS}&quot;\n\n# Check Redis performance  \nREDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\nlog_message &quot;ℹ Redis memory usage: ${REDIS_MEMORY}&quot;\n\n# Check Git repository storage\nREPO_SIZE=$(du -sh /var/opt/gitlab/git-data/repositories | cut -f1)\nlog_message &quot;ℹ Repository storage usage: ${REPO_SIZE}&quot;\n\n# Check background job queue\nSIDEKIQ_QUEUE=$(gitlab-rails runner &quot;puts Sidekiq::Queue.new.size&quot;)\nlog_message &quot;ℹ Sidekiq queue size: ${SIDEKIQ_QUEUE}&quot;\n\n# Check GitLab metrics\nGITLAB_VERSION=$(gitlab-rake gitlab:env:info | grep &quot;GitLab information&quot; -A 10 | grep &quot;Version:&quot; | awk &#039;{print $2}&#039;)\nlog_message &quot;ℹ GitLab version: ${GITLAB_VERSION}&quot;\n\n# Performance metrics via API\nAPI_RESPONSE_TIME=$(curl -w &quot;%{time_total}&quot; -s -o /dev/null https://gitlab.example.com/api/v4/projects)\nlog_message &quot;ℹ API response time: ${API_RESPONSE_TIME}s&quot;\n\n# Check disk I/O\nDISK_USAGE=$(df /var/opt/gitlab | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nlog_message &quot;ℹ Disk usage: ${DISK_USAGE}%&quot;\n\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message &quot;⚠ High disk usage detected&quot;\nfi\n\nlog_message &quot;Performance monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-performance-monitor.sh\n\n# Schedule performance monitoring\necho &quot;*/15 * * * * root /usr/local/bin/gitlab-performance-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"gitlab-runner-advanced-configuration\" class=\"mobile-header\">GitLab Runner Advanced Configuration</h2>\n<h3 id=\"secure-multi-platform-runner-setup\" class=\"mobile-header\">Secure Multi-Platform Runner Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create advanced runner configuration with security\nsudo tee /etc/gitlab-runner/config.toml &gt; /dev/null &lt;&lt;EOF\nconcurrent = 10\ncheck_interval = 0\nlog_level = &quot;info&quot;\nlog_format = &quot;runner&quot;\nshutdown_timeout = 30\n\n[session_server]\n  session_timeout = 1800\n\n# Docker executor with security hardening\n[[runners]]\n  name = &quot;docker-secure-runner&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;secure_runner_token&quot;\n  executor = &quot;docker&quot;\n  output_limit = 4096\n  \n  # Security scripts\n  pre_clone_script = &quot;&quot;&quot;\n    echo &#039;Security scan initiated&#039;\n    id\n    pwd\n    env | grep -E &#039;^(CI_|GITLAB_)&#039; | sort\n  &quot;&quot;&quot;\n  \n  pre_build_script = &quot;&quot;&quot;\n    echo &#039;Preparing secure build environment&#039;\n    # Verify no sensitive data in environment\n    if env | grep -i -E &#039;(password|secret|key|token)&#039; | grep -v -E &#039;^(CI_JOB_TOKEN|GITLAB_CI|CI_SERVER)&#039;; then\n      echo &#039;ERROR: Sensitive data detected in environment&#039;\n      exit 1\n    fi\n  &quot;&quot;&quot;\n  \n  post_build_script = &quot;&quot;&quot;\n    echo &#039;Cleaning up build artifacts&#039;\n    rm -rf /tmp/* 2&gt;/dev/null || true\n  &quot;&quot;&quot;\n  \n  [runners.docker]\n    tls_verify = false\n    image = &quot;alpine:latest&quot;\n    privileged = false\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [&quot;/cache&quot;, &quot;/certs/client&quot;]\n    shm_size = 268435456  # 256MB\n    \n    # Security restrictions\n    cap_drop = [&quot;ALL&quot;]\n    cap_add = [&quot;CHOWN&quot;, &quot;SETGID&quot;, &quot;SETUID&quot;]\n    security_opt = [&quot;no-new-privileges:true&quot;, &quot;apparmor:unconfined&quot;]\n    \n    # Resource limits\n    memory = &quot;2g&quot;\n    memory_swap = &quot;2g&quot;\n    memory_reservation = &quot;1g&quot;\n    cpus = &quot;2&quot;\n    \n    # Network security\n    network_mode = &quot;bridge&quot;\n    dns = [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;]\n    \n    # Disable dangerous features\n    disable_entrypoint_overwrite = true\n    \n    # Image pull policy\n    pull_policy = [&quot;if-not-present&quot;]\n    \n  [runners.docker.tmpfs]\n    &quot;/tmp&quot; = &quot;rw,noexec,nosuid,size=100m&quot;\n    &quot;/var/tmp&quot; = &quot;rw,noexec,nosuid,size=100m&quot;\n\n# Kubernetes executor (Enterprise recommended)\n[[runners]]\n  name = &quot;k8s-secure-runner&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;k8s_runner_token&quot;\n  executor = &quot;kubernetes&quot;\n  \n  [runners.kubernetes]\n    host = &quot;https://k8s.example.com:6443&quot;\n    namespace = &quot;gitlab-runner&quot;\n    privileged = false\n    image = &quot;alpine:latest&quot;\n    \n    # Security context\n    run_as_user = 1000\n    run_as_group = 1000\n    fs_group = 1000\n    \n    # Resource limits\n    memory_limit = &quot;4Gi&quot;\n    memory_request = &quot;2Gi&quot;\n    cpu_limit = &quot;2000m&quot;\n    cpu_request = &quot;1000m&quot;\n    \n    # Security policies\n    [runners.kubernetes.pod_security_context]\n      run_as_non_root = true\n      run_as_user = 1000\n      run_as_group = 1000\n      fs_group = 1000\n      seccomp_profile_type = &quot;RuntimeDefault&quot;\n      \n    [runners.kubernetes.container_security_context]\n      allow_privilege_escalation = false\n      read_only_root_filesystem = true\n      capabilities = { drop = [&quot;ALL&quot;] }\n      \n    # Volume mounts for security\n    [[runners.kubernetes.volumes.empty_dir]]\n      name = &quot;tmp&quot;\n      mount_path = &quot;/tmp&quot;\n      medium = &quot;Memory&quot;\n      \n    [[runners.kubernetes.volumes.empty_dir]]\n      name = &quot;var-tmp&quot;\n      mount_path = &quot;/var/tmp&quot;\n      medium = &quot;Memory&quot;\n\n# Shell executor for specific tasks (limited use)\n[[runners]]\n  name = &quot;shell-restricted-runner&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;shell_runner_token&quot;\n  executor = &quot;shell&quot;\n  shell = &quot;bash&quot;\n  \n  # Restricted tags only\n  tag_list = [&quot;shell&quot;, &quot;restricted&quot;]\n  run_untagged = false\n  locked = true\n  \n  # Security environment\n  environment = [\n    &quot;PATH=/usr/local/bin:/usr/bin:/bin&quot;,\n    &quot;HOME=/home/gitlab-runner&quot;,\n    &quot;SHELL=/bin/bash&quot;\n  ]\n  \n  # Cleanup\n  builds_dir = &quot;/home/gitlab-runner/builds&quot;\n  cache_dir = &quot;/home/gitlab-runner/cache&quot;\n  \n  [runners.cache]\n    Type = &quot;s3&quot;\n    [runners.cache.s3]\n      ServerAddress = &quot;s3.amazonaws.com&quot;\n      BucketName = &quot;gitlab-runner-cache&quot;\n      BucketLocation = &quot;us-west-2&quot;\n      Insecure = false\nEOF\n\nsudo systemctl restart gitlab-runner</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-runner-auto-scaling-cloud\" class=\"mobile-header\">GitLab Runner Auto-scaling (Cloud)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure GitLab Runner with Docker Machine for auto-scaling\nsudo tee /etc/gitlab-runner/autoscale-config.toml &gt; /dev/null &lt;&lt;EOF\nconcurrent = 50\ncheck_interval = 0\n\n[[runners]]\n  name = &quot;autoscale-runner&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;autoscale_runner_token&quot;\n  executor = &quot;docker+machine&quot;\n  \n  [runners.docker]\n    image = &quot;alpine:latest&quot;\n    privileged = false\n    disable_cache = false\n    volumes = [&quot;/cache&quot;]\n    \n    # Security\n    cap_drop = [&quot;ALL&quot;]\n    security_opt = [&quot;no-new-privileges:true&quot;]\n    \n  [runners.machine]\n    IdleCount = 2\n    IdleTime = 1800\n    MaxBuilds = 20\n    MachineName = &quot;gitlab-runner-%s&quot;\n    MachineDriver = &quot;amazonec2&quot;\n    \n    # AWS EC2 configuration\n    [runners.machine.autoscaling]\n      Periods = [&quot;* * 9-17 * * mon-fri *&quot;, &quot;* * 18-8 * * * *&quot;]\n      IdleCount = [5, 1]\n      IdleTime = [1800, 3600]\n      Timezone = &quot;UTC&quot;\n    \n    # Machine options for security\n    [runners.machine.machineoptions]\n      amazonec2-access-key = &quot;aws_access_key&quot;\n      amazonec2-secret-key = &quot;aws_secret_key&quot;\n      amazonec2-region = &quot;us-west-2&quot;\n      amazonec2-vpc-id = &quot;vpc-12345678&quot;\n      amazonec2-subnet-id = &quot;subnet-87654321&quot;\n      amazonec2-security-group = &quot;gitlab-runner-sg&quot;\n      amazonec2-instance-type = &quot;t3.medium&quot;\n      amazonec2-ami = &quot;ami-0c02fb55956c7d316&quot;  # Amazon Linux 2\n      amazonec2-iam-instance-profile = &quot;GitLabRunnerInstanceProfile&quot;\n      amazonec2-use-private-address = &quot;true&quot;\n      amazonec2-tags = &quot;Name,gitlab-runner,Environment,production&quot;\n      amazonec2-root-size = &quot;20&quot;\n      amazonec2-volume-type = &quot;gp3&quot;\n      amazonec2-use-ebs-optimized = &quot;true&quot;\n      \n  [runners.cache]\n    Type = &quot;s3&quot;\n    Shared = true\n    [runners.cache.s3]\n      ServerAddress = &quot;s3.amazonaws.com&quot;\n      AccessKey = &quot;cache_access_key&quot;\n      SecretKey = &quot;cache_secret_key&quot;  \n      BucketName = &quot;gitlab-runner-cache&quot;\n      BucketLocation = &quot;us-west-2&quot;\n      Insecure = false\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-health-checks\" class=\"mobile-header\">Verification and Health Checks</h2>\n<h3 id=\"comprehensive-health-monitoring\" class=\"mobile-header\">Comprehensive Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/gitlab-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/gitlab-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check GitLab service status\nif gitlab-ctl status | grep -q &quot;down:&quot;; then\n    log_message &quot;⚠ Some GitLab services are down:&quot;\n    gitlab-ctl status | grep &quot;down:&quot; | while read line; do\n        log_message &quot;  - $line&quot;\n    done\nelse\n    log_message &quot;✓ All GitLab services are running&quot;\nfi\n\n# Check GitLab application health\nif gitlab-rake gitlab:check &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ GitLab application health check passed&quot;\nelse\n    log_message &quot;✗ GitLab application health check failed&quot;\n    gitlab-rake gitlab:check | tail -10 &gt;&gt; ${HEALTH_LOG}\nfi\n\n# Check GitLab Runner connectivity\nRUNNERS_ONLINE=$(curl -s --header &quot;PRIVATE-TOKEN: admin_token&quot; https://gitlab.example.com/api/v4/runners | jq &#039;[.[] | select(.status==&quot;online&quot;)] | length&#039;)\nTOTAL_RUNNERS=$(curl -s --header &quot;PRIVATE-TOKEN: admin_token&quot; https://gitlab.example.com/api/v4/runners | jq &#039;. | length&#039;)\nlog_message &quot;ℹ GitLab Runners: ${RUNNERS_ONLINE}/${TOTAL_RUNNERS} online&quot;\n\n# Check database connectivity\nif gitlab-psql -c &quot;SELECT version();&quot; &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Database connection is healthy&quot;\nelse\n    log_message &quot;✗ Database connection issues&quot;\nfi\n\n# Check Redis connectivity\nif redis-cli ping | grep -q &quot;PONG&quot;; then\n    log_message &quot;✓ Redis connection is healthy&quot;\nelse\n    log_message &quot;✗ Redis connection issues&quot;\nfi\n\n# Check container registry\nREGISTRY_STATUS=$(curl -s https://registry.example.com/v2/ | jq -r .message 2&gt;/dev/null)\nif [ &quot;$REGISTRY_STATUS&quot; = &quot;authentication required&quot; ] || [ &quot;$REGISTRY_STATUS&quot; = &quot;null&quot; ]; then\n    log_message &quot;✓ Container registry is responding&quot;\nelse\n    log_message &quot;⚠ Container registry issues&quot;\nfi\n\n# Check backup status\nLAST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar 2&gt;/dev/null | head -1)\nif [ -n &quot;$LAST_BACKUP&quot; ]; then\n    BACKUP_AGE=$(stat -c %Y &quot;$LAST_BACKUP&quot;)\n    CURRENT_TIME=$(date +%s)\n    HOURS_SINCE_BACKUP=$(( (CURRENT_TIME - BACKUP_AGE) / 3600 ))\n    \n    if [ $HOURS_SINCE_BACKUP -lt 48 ]; then\n        log_message &quot;✓ Recent backup available (${HOURS_SINCE_BACKUP} hours old)&quot;\n    else\n        log_message &quot;⚠ Last backup is ${HOURS_SINCE_BACKUP} hours old&quot;\n    fi\nelse\n    log_message &quot;✗ No backup files found&quot;\nfi\n\n# Check SSL certificate expiry\nSSL_EXPIRY=$(echo | openssl s_client -servername gitlab.example.com -connect gitlab.example.com:443 2&gt;/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)\nSSL_EXPIRY_EPOCH=$(date -d &quot;$SSL_EXPIRY&quot; +%s)\nCURRENT_EPOCH=$(date +%s)\nDAYS_TO_EXPIRY=$(( (SSL_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n\nif [ $DAYS_TO_EXPIRY -lt 30 ]; then\n    log_message &quot;⚠ SSL certificate expires in ${DAYS_TO_EXPIRY} days&quot;\nelse\n    log_message &quot;✓ SSL certificate expires in ${DAYS_TO_EXPIRY} days&quot;\nfi\n\n# Check system resources\nCPU_USAGE=$(top -bn1 | grep &quot;Cpu(s)&quot; | awk &#039;{print $2}&#039; | cut -d&#039;%&#039; -f1)\nMEMORY_USAGE=$(free | grep Mem | awk &#039;{printf &quot;%.0f&quot;, $3/$2 * 100.0}&#039;)\nlog_message &quot;ℹ System usage - CPU: ${CPU_USAGE}%, Memory: ${MEMORY_USAGE}%&quot;\n\nlog_message &quot;GitLab health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-health-check.sh\n\n# Schedule health checks every 15 minutes\necho &quot;*/15 * * * * root /usr/local/bin/gitlab-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-audit-and-compliance\" class=\"mobile-header\">Security Audit and Compliance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/gitlab-security-audit.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nAUDIT_LOG=&quot;/var/log/gitlab-security-audit.log&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${AUDIT_LOG}\n}\n\nlog_message &quot;Starting GitLab security audit...&quot;\n\n# Check user accounts with admin privileges\nADMIN_USERS=$(gitlab-rails runner &quot;puts User.admins.count&quot;)\nlog_message &quot;ℹ ${ADMIN_USERS} users with admin privileges&quot;\n\n# Check for users without 2FA\nUSERS_WITHOUT_2FA=$(gitlab-rails runner &quot;puts User.where(two_factor_enabled: false).count&quot;)\nlog_message &quot;ℹ ${USERS_WITHOUT_2FA} users without 2FA enabled&quot;\n\n# Check SSH key security\nWEAK_SSH_KEYS=$(gitlab-rails runner &quot;puts Key.where(&#039;LENGTH(key) &lt; ?&#039;, 2048).count&quot;)\nlog_message &quot;ℹ ${WEAK_SSH_KEYS} SSH keys shorter than 2048 bits&quot;\n\n# Check project visibility\nPUBLIC_PROJECTS=$(gitlab-rails runner &quot;puts Project.where(visibility_level: 20).count&quot;)\nINTERNAL_PROJECTS=$(gitlab-rails runner &quot;puts Project.where(visibility_level: 10).count&quot;)\nPRIVATE_PROJECTS=$(gitlab-rails runner &quot;puts Project.where(visibility_level: 0).count&quot;)\nlog_message &quot;ℹ Projects - Public: ${PUBLIC_PROJECTS}, Internal: ${INTERNAL_PROJECTS}, Private: ${PRIVATE_PROJECTS}&quot;\n\n# Check for projects without security scanning\nPROJECTS_WITHOUT_SAST=$(gitlab-rails runner &quot;\nputs Project.joins(:ci_pipelines)\n  .where(&#039;ci_pipelines.created_at &gt; ?&#039;, 30.days.ago)\n  .where.not(id: Ci::Build.joins(:pipeline).where(&#039;ci_builds.name ILIKE ?&#039;, &#039;%sast%&#039;).select(:project_id))\n  .distinct.count\n&quot;)\nlog_message &quot;ℹ ${PROJECTS_WITHOUT_SAST} active projects without SAST scanning&quot;\n\n# Check external integrations\nWEBHOOK_COUNT=$(gitlab-rails runner &quot;puts ProjectHook.count + SystemHook.count&quot;)\nlog_message &quot;ℹ ${WEBHOOK_COUNT} webhooks configured&quot;\n\n# Check audit events (Enterprise)\nif gitlab-rails runner &quot;puts defined?(AuditEvent)&quot; | grep -q &quot;constant&quot;; then\n    RECENT_AUDIT_EVENTS=$(gitlab-rails runner &quot;puts AuditEvent.where(&#039;created_at &gt; ?&#039;, 24.hours.ago).count&quot;)\n    log_message &quot;ℹ ${RECENT_AUDIT_EVENTS} audit events in last 24 hours&quot;\nfi\n\n# Check for suspicious activity\nFAILED_LOGINS=$(grep &quot;Failed Login&quot; /var/log/gitlab/gitlab-rails/production.log | grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; | wc -l)\nif [ ${FAILED_LOGINS} -gt 20 ]; then\n    log_message &quot;⚠ ${FAILED_LOGINS} failed login attempts today&quot;\nelse\n    log_message &quot;✓ ${FAILED_LOGINS} failed login attempts today (normal)&quot;\nfi\n\n# Check for large file uploads\nLARGE_UPLOADS=$(find /var/opt/gitlab/git-data/repositories -type f -size +100M -mtime -7 | wc -l)\nif [ ${LARGE_UPLOADS} -gt 0 ]; then\n    log_message &quot;ℹ ${LARGE_UPLOADS} large files (&gt;100MB) uploaded in last week&quot;\nfi\n\nlog_message &quot;Security audit completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-security-audit.sh\n\n# Schedule daily security audits\necho &quot;0 8 * * * root /usr/local/bin/gitlab-security-audit.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-ctl tail\n\n# Check configuration\nsudo gitlab-ctl show-config\nsudo gitlab-rake gitlab:check SANITIZE=true\n\n# Reconfigure GitLab\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n\n# Database issues\nsudo gitlab-psql -d gitlabhq_production\nsudo gitlab-rake db:migrate:status\n\n# Redis issues\nredis-cli ping\nredis-cli info\n\n# Check logs for errors\nsudo gitlab-ctl tail gitlab-workhorse\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail sidekiq\n\n# Performance issues\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-ctl status | grep memory\n\n# SSL/TLS issues\nsudo gitlab-rake gitlab:check\nopenssl s_client -connect gitlab.example.com:443\n\n# Container registry issues\nsudo gitlab-ctl registry-garbage-collect\ndocker login registry.example.com\n\n# Runner connectivity issues\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Backup issues\ngitlab-backup create STRATEGY=copy\ngitlab-backup restore BACKUP=timestamp\n\n# Reset admin password\nsudo gitlab-rake &quot;gitlab:password:reset[root]&quot;\n\n# Check disk usage\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage analysis\nps aux --sort=-%mem | grep gitlab\ngitlab-ctl status | grep memory\n\n# Network connectivity\ncurl -I https://gitlab.example.com\ntelnet gitlab.example.com 443\n\n# Service restart order (if needed)\nsudo gitlab-ctl stop\nsudo gitlab-ctl start postgresql\nsudo gitlab-ctl start redis\nsudo gitlab-ctl start</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo gitlab-ctl edit-config\n# Add: gitlab_rails[&#039;log_level&#039;] = &#039;DEBUG&#039;\n\nsudo gitlab-ctl reconfigure\n\n# Debug specific services\nsudo gitlab-ctl tail gitlab-workhorse\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail sidekiq\nsudo gitlab-ctl tail gitaly\n\n# Database debugging\nsudo gitlab-psql -d gitlabhq_production -c &quot;\\l&quot;\nsudo gitlab-rake db:migrate:status\n\n# Git debugging\nsudo -u git gitaly-debug\nsudo gitlab-rake gitlab:gitaly:check\n\n# Performance profiling\nsudo gitlab-rake gitlab:setup\nsudo gitlab-rake gitlab:check:repos\nsudo gitlab-rake gitlab:cleanup:sessions\n\n# Container registry debugging\nsudo gitlab-ctl registry-garbage-collect -m\ndocker system df\n\n# Runner debugging\nsudo gitlab-runner --debug run\nsudo gitlab-runner exec docker test-job\n\n# Network debugging for distributed setup\nping -c 4 postgres-master.example.com\nping -c 4 redis-master.example.com\ntelnet postgres-master.example.com 5432\ntelnet redis-master.example.com 6379\n\n# Memory leak detection\npmap -x $(pgrep gitlab-workhorse)\nvalgrind --tool=memcheck --leak-check=full gitlab-workhorse\n\n# Strace for syscall analysis\nstrace -p $(pgrep gitlab-workhorse) -e trace=network,file</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Admin Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/security/hardening/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Hardening Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/runner/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Runner Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/packages/container_registry.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Container Registry Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/api/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab API Documentation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"29 min","wordCount":5786,"lastBuilt":"2025-09-14T06:13:07.647Z"},{"name":"home-assistant","displayName":"Home Assistant","slug":"home-assistant","description":"Repo for home-assistant","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/home-assistant","updatedAt":"2025-09-08T03:08:39Z","createdAt":"2023-08-28T03:48:06Z","readmeRaw":"# Home-Assistant on CentOS 7\n\n```bash\n# Optionally add user\n#adduser --system --shell=/bin/bash --home=/var/lib/homeassistant  homeassistant\n\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/rpm-packages.txt -O /tmp/hass-rpms.txt\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/requirements-el7.txt -O /tmp/hass-pips.txt\n\nyum install -y $(cat /tmp/hass-rpms.txt)\n\n#Optional switch to user and clone repo\n#su - homeassistant\n#git clone https://github.com/casjay-devices/home-assistant /var/lib/homeassistant/.homeassistant\n\ncd /var/lib/homeassistant && python3 -m venv . && source ./bin/activate\n\n/var/lib/homeassistant/bin/python3 -m pip install --upgrade pip\n/var/lib/homeassistant/bin/python3 -m pip install wheel\n/var/lib/homeassistant/bin/python3 -m pip install python-openzwave\n/var/lib/homeassistant/bin/python3 -m pip install homeassistant \n/var/lib/homeassistant/bin/python3 -m pip install -r /tmp/hass-pips.txt\nsystemctl daemon-reload && systemctl enable hass.service\n\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0658\", ATTRS{idProduct}==\"0200\", SYMLINK+=\"zwave\"' >> /etc/udev/rules.d/99-usb-serial.rules\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"067b\", ATTRS{idProduct}==\"2303\", SYMLINK+=\"gps\"' >> /etc/udev/rules.d/99-usb-serial.rules\n\ndeactivate\n```\n","readmeHtml":"<h1 id=\"home-assistant-on-centos-7\" class=\"mobile-header\">Home-Assistant on CentOS 7</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optionally add user\n#adduser --system --shell=/bin/bash --home=/var/lib/homeassistant  homeassistant\n\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/rpm-packages.txt -O /tmp/hass-rpms.txt\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/requirements-el7.txt -O /tmp/hass-pips.txt\n\nyum install -y $(cat /tmp/hass-rpms.txt)\n\n#Optional switch to user and clone repo\n#su - homeassistant\n#git clone https://github.com/casjay-devices/home-assistant /var/lib/homeassistant/.homeassistant\n\ncd /var/lib/homeassistant &amp;&amp; python3 -m venv . &amp;&amp; source ./bin/activate\n\n/var/lib/homeassistant/bin/python3 -m pip install --upgrade pip\n/var/lib/homeassistant/bin/python3 -m pip install wheel\n/var/lib/homeassistant/bin/python3 -m pip install python-openzwave\n/var/lib/homeassistant/bin/python3 -m pip install homeassistant \n/var/lib/homeassistant/bin/python3 -m pip install -r /tmp/hass-pips.txt\nsystemctl daemon-reload &amp;&amp; systemctl enable hass.service\n\necho &#039;SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0658&quot;, ATTRS{idProduct}==&quot;0200&quot;, SYMLINK+=&quot;zwave&quot;&#039; &gt;&gt; /etc/udev/rules.d/99-usb-serial.rules\necho &#039;SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;067b&quot;, ATTRS{idProduct}==&quot;2303&quot;, SYMLINK+=&quot;gps&quot;&#039; &gt;&gt; /etc/udev/rules.d/99-usb-serial.rules\n\ndeactivate</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":102,"lastBuilt":"2025-09-14T06:13:21.360Z"},{"name":"influxdb","displayName":"Influxdb","slug":"influxdb","description":"Repo for influxdb","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/influxdb","updatedAt":"2025-09-08T03:08:55Z","createdAt":"2025-09-08T03:08:45Z","readmeRaw":"## 👋 Welcome to influxdb 🚀  \n\ninfluxdb README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-influxdb\" class=\"mobile-header\">👋 Welcome to influxdb 🚀  </h2>\n<p class=\"mobile-paragraph\">influxdb README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:21.107Z"},{"name":"jenkins","displayName":"Jenkins","slug":"jenkins","description":"Repo for jenkins","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jenkins","updatedAt":"2025-09-14T03:45:21Z","createdAt":"2023-08-28T03:48:15Z","readmeRaw":"# Jenkins Installation Guide\n\nJenkins is a free and open-source automation server for building, testing, and deploying applications. Originally developed by Kohsuke Kawaguchi and now maintained by the Jenkins community, Jenkins is the industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade features. It serves as a FOSS alternative to commercial CI/CD solutions like TeamCity, GitLab CI Premium, or Azure DevOps Server, offering unlimited build minutes, unlimited private repositories, and advanced pipeline capabilities without licensing costs, with features like distributed builds, Pipeline as Code, and extensive plugin ecosystem.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 2GB minimum (8GB+ recommended for production)\n  - Storage: 50GB minimum (SSD recommended for build performance)\n  - Network: Stable connectivity for agent communication and external integrations\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default Jenkins HTTP)\n  - Port 50000 (default Jenkins agent communication)\n  - Additional ports for external integrations (webhooks, etc.)\n- **Dependencies**:\n  - Java 11 or 17 LTS (OpenJDK recommended)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install Java 17 LTS\nsudo dnf install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\ncurl -fsSL https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key | sudo tee /etc/yum.repos.d/jenkins.io.key\n\nsudo tee /etc/yum.repos.d/jenkins.repo <<EOF\n[jenkins]\nname=Jenkins-stable\nbaseurl=http://pkg.jenkins.io/redhat-stable\ngpgcheck=1\ngpgkey=file:///etc/yum.repos.d/jenkins.io.key\nenabled=1\nEOF\n\n# Install Jenkins\nsudo dnf install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update system packages\nsudo apt update\n\n# Install Java 17 LTS\nsudo apt install -y openjdk-17-jdk openjdk-17-jre\n\n# Add Jenkins repository\nwget -O /tmp/jenkins-key.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\nsudo mv /tmp/jenkins-key.asc /etc/apt/trusted.gpg.d/jenkins.asc\n\necho \"deb https://pkg.jenkins.io/debian-stable binary/\" | sudo tee /etc/apt/sources.list.d/jenkins.list\n\n# Update package index\nsudo apt update\n\n# Install Jenkins\nsudo apt install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo ufw allow 8080/tcp\nsudo ufw allow 50000/tcp\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### Arch Linux\n\n```bash\n# Install Java 17 LTS\nsudo pacman -S jdk17-openjdk\n\n# Install Jenkins from AUR\nyay -S jenkins\n\n# Alternative: Install manually from AUR\ngit clone https://aur.archlinux.org/jenkins.git\ncd jenkins\nmakepkg -si\n\n# Create jenkins user if not created\nsudo useradd -r -d /var/lib/jenkins -s /sbin/nologin jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /etc/jenkins/\n```\n\n### Alpine Linux\n\n```bash\n# Jenkins is not officially packaged for Alpine Linux\n# Use Docker or manual installation\n\n# Method 1: Docker installation\napk add --no-cache docker docker-compose\nrc-update add docker default\nrc-service docker start\n\n# Create Jenkins data directory\nmkdir -p /var/lib/jenkins\n\n# Run Jenkins container\ndocker run -d \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v /var/lib/jenkins:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --group-add $(getent group docker | cut -d: -f3) \\\n  jenkins/jenkins:lts-jdk17\n\n# Get initial admin password\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n\n# Method 2: Manual installation with OpenJDK\napk add --no-cache openjdk17-jre-headless\nwget https://get.jenkins.io/war-stable/latest/jenkins.war -O /opt/jenkins.war\n\n# Create jenkins user and directories\nadduser -D -s /sbin/nologin jenkins\nmkdir -p /var/lib/jenkins /var/log/jenkins\nchown -R jenkins:jenkins /var/lib/jenkins /var/log/jenkins\n\n# Create init script\ntee /etc/init.d/jenkins <<'EOF'\n#!/sbin/openrc-run\nname=\"Jenkins\"\ncommand=\"java\"\ncommand_args=\"-jar /opt/jenkins.war --httpPort=8080 --ajp13Port=-1\"\ncommand_user=\"jenkins\"\npidfile=\"/run/jenkins.pid\"\ncommand_background=\"yes\"\ndepend() {\n    need net\n}\nEOF\n\nchmod +x /etc/init.d/jenkins\nrc-update add jenkins default\nrc-service jenkins start\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo zypper addrepo -G https://pkg.jenkins.io/opensuse-stable/ jenkins\nsudo zypper refresh\n\n# Install Jenkins\nsudo zypper install -y jenkins\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y java-17-openjdk jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install jenkins-lts\n\n# Start Jenkins service\nbrew services start jenkins-lts\n\n# Or run manually\njenkins-lts\n\n# Alternative: Install specific version\nbrew install jenkins-lts@2.414\n\n# Get initial admin password\ncat ~/.jenkins/secrets/initialAdminPassword\n\n# Configuration location: ~/.jenkins/\n# Alternative: /usr/local/var/jenkins_home/ (Intel Macs)\n# Alternative: /opt/homebrew/var/jenkins_home/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install jenkins openjdk17\n\n# Using ports\ncd /usr/ports/devel/jenkins\nmake install clean\n\n# Enable Jenkins\necho 'jenkins_enable=\"YES\"' >> /etc/rc.conf\necho 'jenkins_java_home=\"/usr/local/openjdk17\"' >> /etc/rc.conf\n\n# Create jenkins user and directories\npw useradd jenkins -d /usr/local/jenkins -s /sbin/nologin\nmkdir -p /usr/local/jenkins\nchown jenkins:jenkins /usr/local/jenkins\n\n# Start service\nservice jenkins start\n\n# Get initial admin password\ncat /usr/local/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /usr/local/jenkins/\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install jenkins\n\n# Method 2: Using Scoop\nscoop install jenkins\n\n# Method 3: Manual installation\n# Download from https://www.jenkins.io/download/\n# Run jenkins.msi installer\n\n# Method 4: Windows service installation\n# Download jenkins.war\n# Install as Windows service\njava -jar jenkins.war --httpPort=8080 --install\n\n# Start service\nnet start Jenkins\n\n# Get initial admin password\nGet-Content \"C:\\Program Files\\Jenkins\\secrets\\initialAdminPassword\"\n\n# Configuration location: C:\\Program Files\\Jenkins\\\n# Or: %JENKINS_HOME% (if custom location)\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Java Environment Setup**:\n```bash\n# Set JAVA_HOME (Linux/macOS)\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk\necho 'export JAVA_HOME=/usr/lib/jvm/java-17-openjdk' >> ~/.bashrc\n\n# Verify Java installation\njava -version\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/var/lib/jenkins/`, `/etc/sysconfig/jenkins`\n- Debian/Ubuntu: `/var/lib/jenkins/`, `/etc/default/jenkins`\n- Arch Linux: `/var/lib/jenkins/`, `/etc/jenkins/`\n- Alpine Linux: `/var/lib/jenkins/` (Docker) or `/var/lib/jenkins/` (manual)\n- openSUSE/SLES: `/var/lib/jenkins/`, `/etc/sysconfig/jenkins`\n- macOS: `~/.jenkins/` or `/usr/local/var/jenkins_home/`\n- FreeBSD: `/usr/local/jenkins/`\n- Windows: `C:\\Program Files\\Jenkins\\` or `%JENKINS_HOME%`\n\n3. **Essential initial configuration**:\n\n```bash\n# Initial web setup (after accessing http://your-server:8080)\n# 1. Enter admin password from: /var/lib/jenkins/secrets/initialAdminPassword\n# 2. Install suggested plugins or select specific plugins\n# 3. Create first admin user\n# 4. Configure Jenkins URL\n\n# Essential plugins to install:\n# - Pipeline plugins (Pipeline Suite)\n# - Git plugin\n# - Credentials Binding Plugin\n# - Build Timeout Plugin\n# - Timestamper Plugin\n# - Workspace Cleanup Plugin\n# - Blue Ocean (modern UI)\n# - Matrix Authorization Strategy Plugin\n```\n\n### Testing Initial Setup\n\n```bash\n# Check service status\nsudo systemctl status jenkins\n\n# Check web interface\ncurl -I http://localhost:8080\n\n# Test Java version\njava -version\n\n# Check Jenkins process\nps aux | grep jenkins\n\n# Verify Jenkins CLI\nwget http://localhost:8080/jnlpJars/jenkins-cli.jar\njava -jar jenkins-cli.jar -s http://localhost:8080 version\n\n# Check available plugins\njava -jar jenkins-cli.jar -s http://localhost:8080 list-plugins\n```\n\n**WARNING:** Change the default admin password immediately and configure proper authentication!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Jenkins to start on boot\nsudo systemctl enable jenkins\n\n# Start Jenkins\nsudo systemctl start jenkins\n\n# Stop Jenkins\nsudo systemctl stop jenkins\n\n# Restart Jenkins\nsudo systemctl restart jenkins\n\n# Graceful restart (wait for running builds)\nsudo systemctl reload jenkins\n\n# Check status\nsudo systemctl status jenkins\n\n# View logs\nsudo journalctl -u jenkins -f\n\n# Edit service configuration\nsudo systemctl edit jenkins\n# Add custom environment variables or JVM options\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Docker-based installation\ndocker start jenkins\ndocker stop jenkins\ndocker restart jenkins\n\n# Check container status\ndocker ps | grep jenkins\n\n# View logs\ndocker logs -f jenkins\n\n# Manual installation\nrc-update add jenkins default\nrc-service jenkins start\nrc-service jenkins stop\nrc-service jenkins restart\nrc-service jenkins status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'jenkins_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Jenkins\nservice jenkins start\n\n# Stop Jenkins\nservice jenkins stop\n\n# Restart Jenkins\nservice jenkins restart\n\n# Check status\nservice jenkins status\n\n# View logs\ntail -f /var/log/jenkins/jenkins.log\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start jenkins-lts\nbrew services stop jenkins-lts\nbrew services restart jenkins-lts\n\n# Check status\nbrew services list | grep jenkins\n\n# Manual control\njenkins-lts --httpPort=8080\n\n# View logs\ntail -f /usr/local/var/log/jenkins/jenkins.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Jenkins service\nnet start Jenkins\n\n# Stop Jenkins service\nnet stop Jenkins\n\n# Using PowerShell\nStart-Service Jenkins\nStop-Service Jenkins\nRestart-Service Jenkins\n\n# Check status\nGet-Service Jenkins\n\n# View logs (Windows Event Log)\nGet-EventLog -LogName Application -Source Jenkins\n\n# Or check Jenkins logs\nGet-Content \"C:\\Program Files\\Jenkins\\logs\\jenkins.log\" -Tail 50 -Wait\n```\n\n## Advanced Configuration\n\n### High Availability Configuration\n\n```bash\n# Multi-master setup with shared storage\n# Method 1: Shared filesystem (NFS, GlusterFS)\nsudo mkdir -p /shared/jenkins\nsudo mount -t nfs nfs-server:/jenkins /shared/jenkins\n\n# Update Jenkins home\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JENKINS_HOME=/shared/jenkins\"\n\n# Method 2: Database-backed configuration\n# Install CloudBees Jenkins Enterprise plugins for HA\n# Configure external database (PostgreSQL recommended)\n\n# Agent configuration for load distribution\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml <<EOF\njenkins:\n  nodes:\n    - permanent:\n        name: \"linux-agent-1\"\n        remoteFS: \"/var/lib/jenkins\"\n        numExecutors: 4\n        launcher:\n          ssh:\n            host: \"agent1.example.com\"\n            credentialsId: \"ssh-agent-key\"\n    - permanent:\n        name: \"windows-agent-1\"\n        remoteFS: \"C:\\\\Jenkins\"\n        numExecutors: 2\n        launcher:\n          command:\n            command: \"java -jar agent.jar\"\nEOF\n```\n\n### Advanced Security Settings\n\n```bash\n# Configure Jenkins Configuration as Code (JCasC) for security\nsudo tee /var/lib/jenkins/casc_configs/security.yaml <<EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ldap.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          userSearchBase: \"OU=Users\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-password\"\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"admin\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"jenkins-admins\"\n          - name: \"developer\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Build\"\n              - \"Job/Read\"\n            assignments:\n              - \"developers\"\n\nsecurity:\n  globalJobDslSecurityConfiguration:\n    useScriptSecurity: true\n  scriptApproval:\n    approvedSignatures:\n      - \"method java.lang.String trim\"\n      - \"staticMethod java.lang.System getProperty java.lang.String\"\n\nunclassified:\n  location:\n    adminAddress: \"jenkins@example.com\"\n    url: \"https://jenkins.example.com/\"\n    \n  mailer:\n    smtpHost: \"smtp.example.com\"\n    smtpPort: 587\n    charset: \"UTF-8\"\n    authentication:\n      username: \"jenkins@example.com\"\n      password: \"{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}\"\n    useSsl: false\n    useTls: true\nEOF\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/jenkins\nupstream jenkins {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name jenkins.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jenkins.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jenkins.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.example.com/privkey.pem;\n    \n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    client_max_body_size 100M;\n    \n    location / {\n        proxy_pass http://jenkins;\n        proxy_redirect default;\n        proxy_http_version 1.1;\n        \n        # Required headers for Jenkins\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        \n        # WebSocket support for Jenkins\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeout settings\n        proxy_connect_timeout 90;\n        proxy_send_timeout 90;\n        proxy_read_timeout 90;\n        \n        proxy_buffering off;\n        proxy_request_buffering off;\n        proxy_max_temp_file_size 0;\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend jenkins_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jenkins.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend jenkins_servers\n\nbackend jenkins_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /login\n    http-check expect status 200\n    server jenkins1 127.0.0.1:8080 check inter 30s rise 2 fall 3\n    server jenkins2 127.0.0.1:8081 check inter 30s rise 2 fall 3 backup\n\n    # Headers for Jenkins\n    http-request set-header X-Forwarded-Proto https\n    http-request set-header X-Forwarded-Port %[dst_port]\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n```\n\n### Apache HTTP Server Configuration\n\n```apache\n# /etc/apache2/sites-available/jenkins.conf\n<VirtualHost *:80>\n    ServerName jenkins.example.com\n    Redirect permanent / https://jenkins.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName jenkins.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/jenkins.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/jenkins.example.com/privkey.pem\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyPreserveHost On\n    ProxyRequests Off\n    \n    ProxyPass / http://127.0.0.1:8080/ nocanon\n    ProxyPassReverse / http://127.0.0.1:8080/\n    ProxyPassReverse  /  http://jenkins.example.com/\n    \n    # WebSocket support\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8080/$1\" [P,L]\n    \n    AllowEncodedSlashes NoDecode\n</VirtualHost>\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate self-signed certificate (development only)\nsudo mkdir -p /etc/jenkins/ssl\nsudo openssl req -x509 -newkey rsa:4096 -keyout /etc/jenkins/ssl/jenkins.key -out /etc/jenkins/ssl/jenkins.crt -days 365 -nodes -subj \"/C=US/ST=State/L=City/O=Organization/CN=jenkins.example.com\"\n\n# Create Java keystore\nsudo keytool -genkey -alias jenkins -keyalg RSA -keystore /etc/jenkins/ssl/jenkins.jks -keysize 2048 -dname \"CN=jenkins.example.com,OU=IT,O=Organization,L=City,ST=State,C=US\" -storepass changeit -keypass changeit\n\n# Configure Jenkins to use HTTPS\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JENKINS_OPTS=--httpPort=-1 --httpsPort=8443 --httpsKeyStore=/etc/jenkins/ssl/jenkins.jks --httpsKeyStorePassword=changeit\"\n\nsudo systemctl restart jenkins\n\n# Or use Let's Encrypt with reverse proxy (recommended)\nsudo certbot --nginx -d jenkins.example.com\n```\n\n### Authentication and Authorization\n\n```bash\n# Configure LDAP authentication via JCasC\nsudo tee /var/lib/jenkins/casc_configs/auth.yaml <<EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ldap.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          inhibitInferRootDN: false\n          userSearchBase: \"OU=Users\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups\"\n          groupSearchFilter: \"(&(objectClass=group)(cn={0}))\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-password\"\n          displayNameAttributeName: \"displayName\"\n          mailAddressAttributeName: \"mail\"\n\n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"jenkins-admins\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"Domain Admins\"\n              - \"jenkins-admins\"\n          - name: \"developers\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Build\"\n              - \"Job/Cancel\"\n              - \"Job/Read\"\n              - \"Job/Workspace\"\n              - \"Run/Replay\"\n              - \"Run/Update\"\n            assignments:\n              - \"developers\"\n              - \"authenticated\"\n          - name: \"viewers\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Read\"\n            assignments:\n              - \"viewers\"\n              \ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"ldap-password\"\n              username: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n              password: \"{AQAAABAAAAAQSecureEncryptedPassword=}\"\n              description: \"LDAP Service Account\"\n          - basicSSHUserPrivateKey:\n              scope: GLOBAL\n              id: \"ssh-agent-key\"\n              username: \"jenkins\"\n              description: \"SSH key for Jenkins agents\"\n              privateKeySource:\n                directEntry:\n                  privateKey: |\n                    -----BEGIN OPENSSH PRIVATE KEY-----\n                    EncryptedPrivateKeyContentHere\n                    -----END OPENSSH PRIVATE KEY-----\nEOF\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 8080\nsudo ufw allow from 192.168.1.0/24 to any port 50000\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=jenkins\nsudo firewall-cmd --permanent --zone=jenkins --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=jenkins --add-port=8080/tcp\nsudo firewall-cmd --permanent --zone=jenkins --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 8080 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 50000 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {8080, 50000}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Jenkins HTTP\" -Direction Inbound -Protocol TCP -LocalPort 8080 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName \"Jenkins Agent\" -Direction Inbound -Protocol TCP -LocalPort 50000 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### External Database Configuration (PostgreSQL)\n\n```bash\n# Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Create Jenkins database\nsudo -u postgres createdb jenkinsdb\nsudo -u postgres createuser jenkinsuser\nsudo -u postgres psql -c \"ALTER USER jenkinsuser WITH PASSWORD 'SecureJenkinsPassword123!';\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;\"\n\n# Download PostgreSQL driver\nwget https://jdbc.postgresql.org/download/postgresql-42.6.0.jar -O /var/lib/jenkins/postgresql-connector.jar\n\n# Configure Jenkins to use PostgreSQL\nsudo tee -a /etc/default/jenkins <<EOF\n# PostgreSQL database configuration\nJENKINS_JAVA_OPTIONS=\"-Djenkins.install.runSetupWizard=false -Dhudson.model.DirectoryBrowserSupport.CSP=\\\"sandbox allow-scripts; default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';\\\"\"\nEOF\n\n# Create database configuration\nsudo tee /var/lib/jenkins/database-config.xml <<EOF\n<databaseConfiguration>\n  <database class=\"org.jenkinsci.plugins.database.postgresql.PostgreSQLDatabase\">\n    <hostname>localhost</hostname>\n    <port>5432</port>\n    <database>jenkinsdb</database>\n    <username>jenkinsuser</username>\n    <password>{AQAAABAAAAAQEncryptedPasswordHere=}</password>\n    <properties>sslmode=require</properties>\n  </database>\n</databaseConfiguration>\nEOF\n```\n\n### Backup Database Schema\n\n```bash\n# Create database schema backup\nsudo -u postgres pg_dump jenkinsdb > /backup/jenkins/jenkinsdb-schema-$(date +%Y%m%d).sql\n\n# Create Jenkins jobs and configuration backup\nsudo tee /usr/local/bin/jenkins-db-backup.sh <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/jenkins/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# PostgreSQL backup\nsudo -u postgres pg_dump jenkinsdb | gzip > \"$BACKUP_DIR/jenkinsdb.sql.gz\"\n\n# Jenkins configuration backup\ntar -czf \"$BACKUP_DIR/jenkins-config.tar.gz\" \\\n  --exclude=\"/var/lib/jenkins/workspace/*\" \\\n  --exclude=\"/var/lib/jenkins/builds/*/archive\" \\\n  --exclude=\"/var/lib/jenkins/logs/*\" \\\n  /var/lib/jenkins/\n\necho \"Database backup completed: $BACKUP_DIR\"\nEOF\n\nchmod +x /usr/local/bin/jenkins-db-backup.sh\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Jenkins-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# Jenkins optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\njenkins soft nofile 65535\njenkins hard nofile 65535\njenkins soft nproc 32768\njenkins hard nproc 32768\nEOF\n\n# Optimize Jenkins JVM settings\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+DisableExplicitGC -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\"\nEnvironment=\"JENKINS_OPTS=--sessionTimeout=1440 --sessionEviction=86400\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n```\n\n### Jenkins Performance Configuration\n\n```bash\n# Configure Jenkins for high performance\nsudo tee /var/lib/jenkins/casc_configs/performance.yaml <<EOF\njenkins:\n  systemMessage: \"High-Performance Jenkins Instance\"\n  numExecutors: 0  # Don't run builds on controller\n  mode: EXCLUSIVE\n  quietPeriod: 5\n  scmCheckoutRetryCount: 3\n  \n  # Global pipeline libraries for shared code\n  globalLibraries:\n    libraries:\n      - name: \"shared-pipeline-library\"\n        defaultVersion: \"main\"\n        implicit: true\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: \"https://github.com/example/jenkins-shared-library.git\"\n                credentialsId: \"github-token\"\n\n  # Configure build discarders globally\n  buildDiscarders:\n    configuredBuildDiscarders:\n      - \"logRotator\":\n          artifactDaysToKeepStr: \"30\"\n          artifactNumToKeepStr: \"10\"\n          daysToKeepStr: \"30\"\n          numToKeepStr: \"100\"\n\nunclassified:\n  # Configure global timeout\n  buildTimeout:\n    operations:\n      - timeoutMinutes: 60\n      - failBuild: true\n      - writingDescription: true\n      \n  # Workspace cleanup configuration  \n  wsCleanup:\n    deleteDirs: true\n    cleanupMatrixParent: true\n    skipWhenFailed: false\n    \ntool:\n  # Configure tools for performance\n  git:\n    installations:\n      - name: \"Default\"\n        home: \"/usr/bin/git\"\n        \n  maven:\n    installations:\n      - name: \"Maven 3.9\"\n        properties:\n          - installSource:\n              installers:\n                - maven:\n                    id: \"3.9.6\"\n                    \n  gradle:\n    installations:\n      - name: \"Gradle 8\"\n        properties:\n          - installSource:\n              installers:\n                - gradleInstaller:\n                    id: \"8.4\"\n\n  nodejs:\n    installations:\n      - name: \"NodeJS 18\"\n        properties:\n          - installSource:\n              installers:\n                - nodeJSInstaller:\n                    id: \"18.18.2\"\n                    \n  dockerTool:\n    installations:\n      - name: \"Docker\"\n        properties:\n          - installSource:\n              installers:\n                - dockerInstaller:\n                    version: \"latest\"\nEOF\n\n# Configure agent templates for auto-scaling\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml <<EOF\njenkins:\n  clouds:\n    - kubernetes:\n        name: \"kubernetes\"\n        serverUrl: \"https://kubernetes.default.svc.cluster.local\"\n        namespace: \"jenkins\"\n        credentialsId: \"kubernetes-token\"\n        jenkinsUrl: \"http://jenkins.jenkins.svc.cluster.local:8080\"\n        jenkinsTunnel: \"jenkins-agent.jenkins.svc.cluster.local:50000\"\n        connectTimeout: 300\n        readTimeout: 300\n        containerCapStr: 100\n        templates:\n          - name: \"jenkins-agent\"\n            namespace: \"jenkins\"\n            label: \"kubernetes docker\"\n            nodeUsageMode: EXCLUSIVE\n            containers:\n              - name: \"jnlp\"\n                image: \"jenkins/inbound-agent:latest\"\n                alwaysPullImage: true\n                workingDir: \"/home/jenkins/agent\"\n                command: \"\"\n                args: \"\"\n                resourceRequestCpu: \"500m\"\n                resourceRequestMemory: \"1Gi\"\n                resourceLimitCpu: \"2\"\n                resourceLimitMemory: \"4Gi\"\n            volumes:\n              - hostPathVolume:\n                  hostPath: \"/var/run/docker.sock\"\n                  mountPath: \"/var/run/docker.sock\"\nEOF\n```\n\n### Pipeline Optimization\n\n```groovy\n// Optimized Jenkins Pipeline Template\n// /var/lib/jenkins/pipeline-templates/optimized-pipeline.groovy\n@Library('shared-pipeline-library') _\n\npipeline {\n    agent {\n        label 'docker && linux'\n    }\n    \n    options {\n        buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '10'))\n        timeout(time: 120, unit: 'MINUTES')\n        timestamps()\n        skipDefaultCheckout(true)\n        disableConcurrentBuilds()\n        ansiColor('xterm')\n        parallelsAlwaysFailFast()\n        copyArtifactPermission('*')\n    }\n    \n    environment {\n        DOCKER_REGISTRY = credentials('docker-registry-url')\n        MAVEN_OPTS = '-Xmx2g -XX:+UseG1GC'\n        GRADLE_OPTS = '-Xmx2g -Dorg.gradle.daemon=false'\n        CI = 'true'\n    }\n    \n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n                script {\n                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(8)\n                    env.BUILD_VERSION = \"${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}\"\n                }\n            }\n        }\n        \n        stage('Parallel Analysis') {\n            parallel {\n                stage('Code Quality') {\n                    steps {\n                        script {\n                            // SonarQube analysis\n                            withSonarQubeEnv('SonarQube') {\n                                sh '''\n                                    mvn sonar:sonar \\\n                                        -Dsonar.projectKey=${JOB_NAME} \\\n                                        -Dsonar.projectVersion=${BUILD_VERSION} \\\n                                        -Dsonar.sources=src/main \\\n                                        -Dsonar.tests=src/test \\\n                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml\n                                '''\n                            }\n                            \n                            timeout(time: 10, unit: 'MINUTES') {\n                                waitForQualityGate abortPipeline: true\n                            }\n                        }\n                    }\n                }\n                \n                stage('Security Scan') {\n                    steps {\n                        // OWASP Dependency Check\n                        dependencyCheck additionalArguments: '''\n                            --enableRetired\n                            --enableExperimental  \n                            --scan ./\n                            --format JSON\n                            --format HTML\n                            --suppression dependency-check-suppressions.xml\n                        ''', odcInstallation: 'dependency-check-8.4.0'\n                        \n                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'\n                        \n                        // Secret scanning\n                        sh '''\n                            docker run --rm -v $(pwd):/repo \\\n                                trufflesecurity/trufflehog:latest \\\n                                git file:///repo \\\n                                --json \\\n                                --fail > trufflehog-results.json || true\n                        '''\n                    }\n                }\n                \n                stage('Test') {\n                    steps {\n                        sh '''\n                            # Parallel test execution\n                            mvn clean test \\\n                                -Dmaven.test.failure.ignore=true \\\n                                -Dspring.profiles.active=test \\\n                                -Djunit.jupiter.execution.parallel.enabled=true \\\n                                -Djunit.jupiter.execution.parallel.mode.default=concurrent\n                        '''\n                        \n                        publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'\n                        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], \n                                       sourceFileResolver: sourceFiles('STORE_LAST_BUILD')\n                    }\n                    post {\n                        always {\n                            archiveArtifacts artifacts: 'target/surefire-reports/**', allowEmptyArchive: true\n                        }\n                    }\n                }\n            }\n        }\n        \n        stage('Build & Package') {\n            steps {\n                sh '''\n                    # Optimized build with parallel processing\n                    mvn clean package \\\n                        -DskipTests \\\n                        -T 2C \\\n                        -Dspring.profiles.active=production \\\n                        -Dmaven.javadoc.skip=true\n                '''\n                \n                // Docker build with BuildKit\n                script {\n                    def image = docker.build(\"${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\", \n                                           \"--build-arg BUILD_VERSION=${env.BUILD_VERSION} .\")\n                    \n                    // Security scanning with Trivy\n                    sh \"\"\"\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --format table \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\n                    \"\"\"\n                    \n                    image.push()\n                    image.push(\"latest\")\n                }\n            }\n        }\n        \n        stage('Deploy') {\n            when {\n                anyOf {\n                    branch 'main'\n                    branch 'develop'\n                    branch 'release/*'\n                }\n            }\n            parallel {\n                stage('Staging') {\n                    when { branch 'develop' }\n                    steps {\n                        script {\n                            // Deploy to staging environment\n                            sh '''\n                                kubectl set image deployment/myapp-staging \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=staging\n                                \n                                kubectl rollout status deployment/myapp-staging \\\n                                    --namespace=staging --timeout=300s\n                            '''\n                            \n                            // Run smoke tests\n                            sh '''\n                                curl -f http://myapp-staging.example.com/health || exit 1\n                                npm run test:e2e -- --base-url http://myapp-staging.example.com\n                            '''\n                        }\n                    }\n                }\n                \n                stage('Production') {\n                    when { \n                        anyOf {\n                            branch 'main'\n                            branch 'release/*'\n                        }\n                    }\n                    steps {\n                        // Manual approval for production\n                        timeout(time: 60, unit: 'MINUTES') {\n                            input message: 'Deploy to production?', \n                                  ok: 'Deploy',\n                                  submitterParameter: 'APPROVER'\n                        }\n                        \n                        script {\n                            sh '''\n                                # Blue-green deployment\n                                kubectl set image deployment/myapp-production \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=production\n                                \n                                kubectl rollout status deployment/myapp-production \\\n                                    --namespace=production --timeout=600s\n                            '''\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            // Cleanup workspace\n            cleanWs()\n            \n            // Archive artifacts\n            archiveArtifacts artifacts: 'target/*.jar,docker-compose.yml', \n                           allowEmptyArchive: true, \n                           fingerprint: true\n                           \n            // Collect build metrics\n            script {\n                def buildDuration = currentBuild.duration / 1000\n                echo \"Build completed in ${buildDuration} seconds\"\n                \n                // Custom metrics collection\n                sh \"\"\"\n                    echo \"build_duration_seconds{job=\\\"${env.JOB_NAME}\\\",build=\\\"${env.BUILD_NUMBER}\\\"} ${buildDuration}\" > build-metrics.txt\n                \"\"\"\n                \n                archiveArtifacts artifacts: 'build-metrics.txt', allowEmptyArchive: true\n            }\n        }\n        \n        success {\n            // Success notifications\n            emailext(\n                subject: \"✅ Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"\"\"Build successful for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n                         \n                Build URL: ${env.BUILD_URL}\n                Git Commit: ${env.GIT_COMMIT}\n                Duration: ${currentBuild.durationString}\n                Approver: ${env.APPROVER ?: 'Automatic'}\"\"\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n            \n            slackSend(\n                channel: '#deployments',\n                color: 'good',\n                message: \"✅ Deployment Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER} by ${env.APPROVER ?: 'System'}\"\n            )\n        }\n        \n        failure {\n            emailext(\n                subject: \"❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build failed for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n            \n            slackSend(\n                channel: '#ci-cd-alerts',\n                color: 'danger',\n                message: \"❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|View Details>)\"\n            )\n        }\n        \n        unstable {\n            emailext(\n                subject: \"⚠️  Build Unstable: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build unstable for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n        }\n    }\n}\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Jenkins CLI monitoring commands\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password version\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-jobs\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-builds job-name\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password get-build job-name 1\n\n# System information\ncurl -u admin:password http://localhost:8080/systemInfo\n\n# Build queue status\ncurl -u admin:password http://localhost:8080/queue/api/json\n\n# Node status\ncurl -u admin:password http://localhost:8080/computer/api/json\n\n# Plugin information\ncurl -u admin:password http://localhost:8080/pluginManager/api/json?depth=1\n```\n\n### External Monitoring Setup\n\n```bash\n# Install Jenkins Prometheus Plugin and configure metrics\n# Via Jenkins UI: Manage Jenkins > Manage Plugins > Available > Prometheus metrics plugin\n\n# Configure Prometheus to scrape Jenkins metrics\nsudo tee /etc/prometheus/jenkins.yml <<EOF\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'jenkins'\n    static_configs:\n      - targets: ['localhost:8080']\n    metrics_path: /prometheus/\n    scrape_interval: 30s\n    scrape_timeout: 10s\nEOF\n\n# Install Jenkins Exporter (alternative)\nwget https://github.com/lovoo/jenkins_exporter/releases/download/v1.0.0/jenkins_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf jenkins_exporter-*.tar.gz\nsudo cp jenkins_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/jenkins_exporter.service <<EOF\n[Unit]\nDescription=Jenkins Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=jenkins\nExecStart=/usr/local/bin/jenkins_exporter \\\n    --jenkins.address=http://localhost:8080 \\\n    --jenkins.username=monitoring \\\n    --jenkins.password=MonitoringPassword123! \\\n    --web.listen-address=:9118\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now jenkins_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# jenkins-health-check.sh\n\nJENKINS_URL=\"http://localhost:8080\"\nHEALTH_LOG=\"/var/log/jenkins-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    log_message \"✅ Jenkins service is running\"\nelse\n    log_message \"❌ Jenkins service is not running\"\n    exit 2\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" ${JENKINS_URL}/login)\nif [ \"${HTTP_STATUS}\" = \"200\" ]; then\n    log_message \"✅ Jenkins web interface responding (HTTP ${HTTP_STATUS})\"\nelse\n    log_message \"❌ Jenkins web interface issues (HTTP ${HTTP_STATUS})\"\n    exit 2\nfi\n\n# Check disk space\nJENKINS_HOME_USAGE=$(df /var/lib/jenkins | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${JENKINS_HOME_USAGE} -gt 85 ]; then\n    log_message \"⚠️  High disk usage: ${JENKINS_HOME_USAGE}%\"\n    exit 1\nelse\n    log_message \"✅ Jenkins home disk usage: ${JENKINS_HOME_USAGE}%\"\nfi\n\n# Check memory usage\nJAVA_MEMORY=$(ps -o pid,vsz,rss,comm -C java | grep jenkins | awk '{rss+=$3} END {print rss/1024}')\nif (( $(echo \"${JAVA_MEMORY} > 6144\" | bc -l) )); then\n    log_message \"⚠️  High memory usage: ${JAVA_MEMORY}MB\"\n    exit 1\nelse\n    log_message \"✅ Jenkins memory usage: ${JAVA_MEMORY}MB\"\nfi\n\n# Check running builds (if Jenkins CLI is available)\nif [ -f /var/lib/jenkins/jenkins-cli.jar ]; then\n    RUNNING_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2>/dev/null | grep -c \"RUNNING\" || echo \"0\")\n    log_message \"ℹ️  Running builds: ${RUNNING_BUILDS}\"\n    \n    # Check for failed builds in last 24 hours\n    FAILED_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2>/dev/null | grep -c \"FAILURE\" || echo \"0\")\n    if [ ${FAILED_BUILDS} -gt 5 ]; then\n        log_message \"⚠️  High number of failed builds: ${FAILED_BUILDS}\"\n        exit 1\n    fi\nfi\n\n# Check plugin health\nPLUGIN_ERRORS=$(curl -s ${JENKINS_URL}/pluginManager/api/json?depth=1 | jq '.plugins[] | select(.hasUpdate==true or .enabled==false) | .shortName' | wc -l)\nif [ ${PLUGIN_ERRORS} -gt 0 ]; then\n    log_message \"⚠️  Plugins need attention: ${PLUGIN_ERRORS}\"\nfi\n\nlog_message \"✅ Jenkins health check completed\"\nexit 0\n```\n\n## Backup and Restore\n\n### Comprehensive Backup Strategy\n\n```bash\n#!/bin/bash\n# jenkins-backup.sh\n\nBACKUP_DIR=\"/backup/jenkins\"\nDATE=$(date +%Y%m%d_%H%M%S)\nJENKINS_HOME=\"/var/lib/jenkins\"\nRETENTION_DAYS=14\n\nmkdir -p ${BACKUP_DIR}/{config,jobs,plugins,secrets,workspace}\n\necho \"Starting Jenkins comprehensive backup...\"\n\n# Function to gracefully shutdown Jenkins\ngraceful_shutdown() {\n    echo \"Putting Jenkins in quiet mode...\"\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! quiet-down\n    \n    # Wait for running builds to complete (max 20 minutes)\n    for i in {1..120}; do\n        RUNNING_BUILDS=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-builds | grep -c \"RUNNING\" || echo \"0\")\n        if [ \"$RUNNING_BUILDS\" -eq 0 ]; then\n            echo \"All builds completed, stopping Jenkins...\"\n            systemctl stop jenkins\n            break\n        fi\n        echo \"Waiting for $RUNNING_BUILDS running builds to complete... (${i}/120)\"\n        sleep 10\n    done\n    \n    if [ \"$RUNNING_BUILDS\" -gt 0 ]; then\n        echo \"Warning: Stopping Jenkins with $RUNNING_BUILDS builds still running\"\n        systemctl stop jenkins\n    fi\n}\n\n# Function to start Jenkins\nstart_jenkins() {\n    echo \"Starting Jenkins...\"\n    systemctl start jenkins\n    \n    # Wait for Jenkins to be ready\n    for i in {1..60}; do\n        if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n            echo \"Jenkins is ready, canceling quiet mode...\"\n            java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! cancel-quiet-down\n            break\n        fi\n        echo \"Waiting for Jenkins to start... (${i}/60)\"\n        sleep 10\n    done\n}\n\n# Gracefully shutdown Jenkins\ngraceful_shutdown\n\n# Full Jenkins home backup (excluding large/temporary directories)\necho \"Creating full Jenkins home backup...\"\ntar --exclude=\"${JENKINS_HOME}/workspace/*\" \\\n    --exclude=\"${JENKINS_HOME}/builds/*/archive\" \\\n    --exclude=\"${JENKINS_HOME}/logs/*\" \\\n    --exclude=\"${JENKINS_HOME}/.m2/repository\" \\\n    --exclude=\"${JENKINS_HOME}/caches\" \\\n    --exclude=\"${JENKINS_HOME}/war\" \\\n    -czf ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz \\\n    -C ${JENKINS_HOME} .\n\n# Job configurations backup\necho \"Backing up job configurations...\"\nmkdir -p ${BACKUP_DIR}/jobs\nfind ${JENKINS_HOME}/jobs -name \"config.xml\" -exec cp {} ${BACKUP_DIR}/jobs/ \\;\ntar -czf ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz -C ${BACKUP_DIR}/jobs .\nrm ${BACKUP_DIR}/jobs/config.xml 2>/dev/null\n\n# Plugins backup\necho \"Backing up installed plugins...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-plugins > ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt\ncp -r ${JENKINS_HOME}/plugins ${BACKUP_DIR}/plugins/plugins-${DATE}/ 2>/dev/null\n\n# Secrets and credentials backup\necho \"Backing up secrets and credentials...\"\nif [ -d \"${JENKINS_HOME}/secrets\" ]; then\n    tar -czf ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz -C ${JENKINS_HOME} secrets/\nfi\n\n# System configuration backup\necho \"Backing up system configuration...\"\ntar -czf ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz \\\n    /etc/default/jenkins \\\n    /etc/sysconfig/jenkins \\\n    /etc/systemd/system/jenkins.service.d/ 2>/dev/null\n\n# Database backup (if using external database)\nif [ -f \"${JENKINS_HOME}/database-config.xml\" ]; then\n    echo \"Backing up external database...\"\n    sudo -u postgres pg_dump jenkinsdb | gzip > ${BACKUP_DIR}/config/jenkinsdb-${DATE}.sql.gz\nfi\n\n# Start Jenkins\nstart_jenkins\n\n# Cloud backup (uncomment and configure as needed)\n# aws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/${DATE}/ --recursive --sse AES256\n# az storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups --destination-path ${DATE}\n# gsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/${DATE}/\n\n# Verify backup integrity\necho \"Verifying backup integrity...\"\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz | head -1)\nif tar -tzf \"$LATEST_BACKUP\" >/dev/null 2>&1; then\n    echo \"✅ Backup integrity verified\"\n    BACKUP_SIZE=$(du -h \"$LATEST_BACKUP\" | cut -f1)\n    echo \"Backup size: $BACKUP_SIZE\"\nelse\n    echo \"❌ Backup integrity check failed\"\n    exit 1\nfi\n\n# Cleanup old backups\necho \"Cleaning up old backups (keeping last $RETENTION_DAYS days)...\"\nfind ${BACKUP_DIR} -name \"jenkins-*\" -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name \"plugin-list-*\" -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name \"*-${DATE}*\" -type d -mtime +${RETENTION_DAYS} -exec rm -rf {} \\;\n\n# Generate backup report\necho \"Generating backup report...\"\ncat > ${BACKUP_DIR}/backup-report-${DATE}.txt <<EOF\nJenkins Backup Report - ${DATE}\n================================\n\nBackup Location: ${BACKUP_DIR}\nJenkins Home: ${JENKINS_HOME}\nBackup Date: $(date)\nServer: $(hostname)\n\nFiles backed up:\n- Jenkins Home: $(ls -lh ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz)\n- Job Configs: $(ls -lh ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz)\n- Plugins: $(ls -lh ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt)\n- Secrets: $(ls -lh ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz 2>/dev/null || echo \"No secrets backup\")\n- System Config: $(ls -lh ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz 2>/dev/null || echo \"No system config backup\")\n\nTotal Backup Size: $(du -h ${BACKUP_DIR} | tail -1 | cut -f1)\n\nVerification: ✅ Passed\nEOF\n\necho \"✅ Jenkins backup completed: ${DATE}\"\necho \"📊 Backup report: ${BACKUP_DIR}/backup-report-${DATE}.txt\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# jenkins-restore.sh\n\nBACKUP_FILE=\"${1}\"\nRESTORE_TYPE=\"${2:-full}\"  # full, config-only, jobs-only\n\nusage() {\n    echo \"Usage: $0 <backup_file> [restore_type]\"\n    echo \"Restore types: full (default), config-only, jobs-only\"\n    echo \"\"\n    echo \"Available backups:\"\n    ls -la /backup/jenkins/config/jenkins-home-*.tar.gz | head -10\n    exit 1\n}\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    usage\nfi\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"❌ Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\necho \"🔄 Starting Jenkins restore from: $BACKUP_FILE\"\necho \"Restore type: $RESTORE_TYPE\"\n\n# Pre-restore backup of current state\nif [ -d \"/var/lib/jenkins\" ]; then\n    echo \"📦 Creating backup of current installation...\"\n    CURRENT_BACKUP=\"/backup/jenkins/pre-restore-$(date +%s)\"\n    mkdir -p \"$CURRENT_BACKUP\"\n    mv /var/lib/jenkins \"$CURRENT_BACKUP/jenkins-$(date +%Y%m%d_%H%M%S)\"\n    echo \"Current installation backed up to: $CURRENT_BACKUP\"\nfi\n\n# Stop Jenkins\necho \"⏹️  Stopping Jenkins...\"\nsystemctl stop jenkins\n\ncase \"$RESTORE_TYPE\" in\n    \"full\")\n        echo \"🔄 Performing full restore...\"\n        \n        # Create new Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Restore from backup\n        echo \"📂 Extracting backup archive...\"\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins\n        \n        # Set proper ownership\n        chown -R jenkins:jenkins /var/lib/jenkins\n        chmod -R 755 /var/lib/jenkins\n        \n        # Special permissions for secrets\n        if [ -d \"/var/lib/jenkins/secrets\" ]; then\n            chmod 700 /var/lib/jenkins/secrets\n            chmod 600 /var/lib/jenkins/secrets/*\n        fi\n        ;;\n        \n    \"config-only\")\n        echo \"🔄 Performing configuration-only restore...\"\n        \n        # Create minimal Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Extract only configuration files\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins \\\n            --include=\"*/config.xml\" \\\n            --include=\"*/secrets/*\" \\\n            --include=\"*/users/*\" \\\n            --include=\"*/plugins/*\" \\\n            --exclude=\"*/workspace/*\" \\\n            --exclude=\"*/builds/*\"\n            \n        chown -R jenkins:jenkins /var/lib/jenkins\n        ;;\n        \n    \"jobs-only\")\n        echo \"🔄 Performing jobs-only restore...\"\n        \n        if [ ! -d \"/var/lib/jenkins\" ]; then\n            echo \"❌ Jenkins directory not found. Cannot restore jobs only.\"\n            exit 1\n        fi\n        \n        # Backup current jobs\n        if [ -d \"/var/lib/jenkins/jobs\" ]; then\n            mv /var/lib/jenkins/jobs \"/var/lib/jenkins/jobs.backup.$(date +%s)\"\n        fi\n        \n        # Extract only jobs\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins jobs/\n        chown -R jenkins:jenkins /var/lib/jenkins/jobs\n        ;;\n        \n    *)\n        echo \"❌ Unknown restore type: $RESTORE_TYPE\"\n        usage\n        ;;\nesac\n\n# Restore system configuration if available\nBACKUP_DIR=$(dirname \"$BACKUP_FILE\")\nBACKUP_DATE=$(basename \"$BACKUP_FILE\" .tar.gz | sed 's/jenkins-home-//')\nSYSTEM_CONFIG=\"${BACKUP_DIR}/../config/system-config-${BACKUP_DATE}.tar.gz\"\n\nif [ -f \"$SYSTEM_CONFIG\" ]; then\n    echo \"🔧 Restoring system configuration...\"\n    tar -xzf \"$SYSTEM_CONFIG\" -C / 2>/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=\"${BACKUP_DIR}/jenkinsdb-${BACKUP_DATE}.sql.gz\"\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"🗄️  Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql jenkinsdb\nfi\n\n# Start Jenkins\necho \"▶️  Starting Jenkins...\"\nsystemctl start jenkins\n\n# Wait for Jenkins to start and verify\necho \"⏳ Waiting for Jenkins to start...\"\nfor i in {1..120}; do\n    if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n        echo \"✅ Jenkins started successfully\"\n        break\n    fi\n    echo \"Waiting for Jenkins to start... (${i}/120)\"\n    sleep 10\ndone\n\n# Verify restoration\necho \"🔍 Verifying restoration...\"\nif curl -f http://localhost:8080/login >/dev/null 2>&1; then\n    echo \"✅ Jenkins is responding\"\n    \n    # Check if jobs were restored\n    if [ -d \"/var/lib/jenkins/jobs\" ]; then\n        JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs | wc -l)\n        echo \"📋 Jobs restored: $JOB_COUNT\"\n    fi\n    \n    # Check if plugins were restored\n    if [ -d \"/var/lib/jenkins/plugins\" ]; then\n        PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins | wc -l)\n        echo \"🔌 Plugins restored: $PLUGIN_COUNT\"\n    fi\n    \n    echo \"✅ Jenkins restoration completed successfully\"\n    echo \"\"\n    echo \"📝 Next steps:\"\n    echo \"1. Verify Jenkins configuration via web interface\"\n    echo \"2. Check plugin compatibility and update if needed\"\n    echo \"3. Verify job configurations and test builds\"\n    echo \"4. Update any environment-specific settings\"\n    \nelse\n    echo \"❌ Jenkins restoration failed - service not responding\"\n    echo \"Check logs: journalctl -u jenkins -n 50\"\n    exit 1\nfi\n```\n\n### Disaster Recovery\n\n```bash\n#!/bin/bash\n# jenkins-disaster-recovery.sh\n\necho \"🚨 Jenkins Disaster Recovery Procedure\"\necho \"======================================\"\n\n# Check if Jenkins is running\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    echo \"⚠️  Jenkins is running. This procedure should be run on a failed system.\"\n    read -p \"Continue anyway? (y/N): \" -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        exit 1\n    fi\nfi\n\n# Find latest backup\nBACKUP_DIR=\"/backup/jenkins\"\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz 2>/dev/null | head -1)\n\nif [ -z \"$LATEST_BACKUP\" ]; then\n    echo \"❌ No backups found in ${BACKUP_DIR}\"\n    echo \"Please restore from cloud backup or external storage\"\n    exit 1\nfi\n\necho \"📦 Latest backup found: $LATEST_BACKUP\"\necho \"📅 Backup date: $(basename \"$LATEST_BACKUP\" .tar.gz | sed 's/jenkins-home-//')\"\n\n# Verify backup integrity\necho \"🔍 Verifying backup integrity...\"\nif tar -tzf \"$LATEST_BACKUP\" >/dev/null 2>&1; then\n    echo \"✅ Backup integrity verified\"\nelse\n    echo \"❌ Backup is corrupted. Cannot proceed with recovery.\"\n    exit 1\nfi\n\n# Create disaster recovery log\nDR_LOG=\"/var/log/jenkins-disaster-recovery-$(date +%Y%m%d_%H%M%S).log\"\nexec > >(tee -a \"$DR_LOG\")\nexec 2>&1\n\necho \"📝 Disaster recovery log: $DR_LOG\"\n\n# System preparation\necho \"🔧 Preparing system for recovery...\"\n\n# Install Jenkins if not present\nif ! command -v jenkins >/dev/null 2>&1; then\n    echo \"📦 Installing Jenkins...\"\n    # Add Jenkins repository and install (distribution-specific commands)\n    if [ -f /etc/debian_version ]; then\n        wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n        echo \"deb https://pkg.jenkins.io/debian-stable binary/\" > /etc/apt/sources.list.d/jenkins.list\n        apt-get update\n        apt-get install -y openjdk-17-jdk jenkins\n    elif [ -f /etc/redhat-release ]; then\n        yum install -y java-17-openjdk jenkins\n    fi\nfi\n\n# Stop Jenkins service\nsystemctl stop jenkins\n\n# Clear existing Jenkins data\nif [ -d \"/var/lib/jenkins\" ]; then\n    echo \"🗑️  Removing existing Jenkins data...\"\n    rm -rf /var/lib/jenkins.disaster-backup-$(date +%s)\n    mv /var/lib/jenkins /var/lib/jenkins.disaster-backup-$(date +%s)\nfi\n\n# Create new Jenkins directory\nmkdir -p /var/lib/jenkins\n\n# Restore from backup\necho \"🔄 Restoring Jenkins from backup...\"\ntar -xzf \"$LATEST_BACKUP\" -C /var/lib/jenkins\n\n# Set proper permissions\nchown -R jenkins:jenkins /var/lib/jenkins\nchmod -R 755 /var/lib/jenkins\n\n# Special permissions for sensitive files\nif [ -d \"/var/lib/jenkins/secrets\" ]; then\n    chmod 700 /var/lib/jenkins/secrets\n    chmod 600 /var/lib/jenkins/secrets/*\nfi\n\nif [ -d \"/var/lib/jenkins/users\" ]; then\n    chmod 700 /var/lib/jenkins/users\nfi\n\n# Restore system configuration\nBACKUP_DATE=$(basename \"$LATEST_BACKUP\" .tar.gz | sed 's/jenkins-home-//')\nSYSTEM_CONFIG=\"${BACKUP_DIR}/config/system-config-${BACKUP_DATE}.tar.gz\"\n\nif [ -f \"$SYSTEM_CONFIG\" ]; then\n    echo \"🔧 Restoring system configuration...\"\n    tar -xzf \"$SYSTEM_CONFIG\" -C / 2>/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=\"${BACKUP_DIR}/config/jenkinsdb-${BACKUP_DATE}.sql.gz\"\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"🗄️  Restoring database...\"\n    # Ensure PostgreSQL is running\n    systemctl start postgresql\n    \n    # Drop and recreate database\n    sudo -u postgres psql -c \"DROP DATABASE IF EXISTS jenkinsdb;\"\n    sudo -u postgres psql -c \"CREATE DATABASE jenkinsdb;\"\n    sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;\"\n    \n    # Restore database\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql jenkinsdb\nfi\n\n# Configure firewall\necho \"🔥 Configuring firewall...\"\nif command -v ufw >/dev/null 2>&1; then\n    ufw allow 8080/tcp\n    ufw allow 50000/tcp\nelif command -v firewall-cmd >/dev/null 2>&1; then\n    firewall-cmd --permanent --add-port=8080/tcp\n    firewall-cmd --permanent --add-port=50000/tcp\n    firewall-cmd --reload\nfi\n\n# Start Jenkins\necho \"▶️  Starting Jenkins...\"\nsystemctl enable jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to start\necho \"⏳ Waiting for Jenkins to initialize...\"\nfor i in {1..300}; do\n    if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n        echo \"✅ Jenkins is responding\"\n        break\n    fi\n    echo \"Waiting for Jenkins... (${i}/300)\"\n    sleep 10\ndone\n\n# Verify recovery\necho \"🔍 Verifying disaster recovery...\"\n\n# Check Jenkins status\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    echo \"✅ Jenkins service is running\"\nelse\n    echo \"❌ Jenkins service failed to start\"\n    echo \"Check logs: journalctl -u jenkins -n 50\"\n    exit 1\nfi\n\n# Check web interface\nif curl -f http://localhost:8080/login >/dev/null 2>&1; then\n    echo \"✅ Jenkins web interface is accessible\"\nelse\n    echo \"❌ Jenkins web interface is not responding\"\n    exit 1\nfi\n\n# Check jobs restoration\nif [ -d \"/var/lib/jenkins/jobs\" ]; then\n    JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs 2>/dev/null | wc -l)\n    echo \"📋 Jobs recovered: $JOB_COUNT\"\nelse\n    echo \"⚠️  No jobs directory found\"\nfi\n\n# Check plugins restoration\nif [ -d \"/var/lib/jenkins/plugins\" ]; then\n    PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins 2>/dev/null | wc -l)\n    echo \"🔌 Plugins recovered: $PLUGIN_COUNT\"\nelse\n    echo \"⚠️  No plugins directory found\"\nfi\n\n# Generate recovery report\necho \"📊 Generating disaster recovery report...\"\ncat > \"/var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt\" <<EOF\nJenkins Disaster Recovery Report\n===============================\nRecovery Date: $(date)\nServer: $(hostname)\nBackup Used: $LATEST_BACKUP\nRecovery Log: $DR_LOG\n\nRecovery Summary:\n- Jenkins Service: $(systemctl is-active jenkins)\n- Web Interface: $(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080/login)\n- Jobs Recovered: $JOB_COUNT\n- Plugins Recovered: $PLUGIN_COUNT\n- Database Restored: $([ -f \"$DB_BACKUP\" ] && echo \"Yes\" || echo \"No\")\n\nNext Steps:\n1. Verify Jenkins configuration via web interface: http://$(hostname):8080\n2. Test critical job configurations\n3. Update any environment-specific settings\n4. Verify agent connections\n5. Test integrations (SCM, notifications, etc.)\n6. Update DNS/load balancer configurations if needed\n7. Notify team of recovery completion\n\nRecovery Status: ✅ COMPLETED\nEOF\n\necho \"\"\necho \"🎉 Jenkins disaster recovery completed successfully!\"\necho \"📝 Recovery report saved to: /var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt\"\necho \"\"\necho \"🔗 Access Jenkins: http://$(hostname):8080\"\necho \"\"\necho \"⚠️  Important post-recovery tasks:\"\necho \"1. Verify all job configurations\"\necho \"2. Test agent connections\"\necho \"3. Verify integrations (GitHub, LDAP, etc.)\"\necho \"4. Update any environment-specific configurations\"\necho \"5. Perform a backup of the recovered system\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Jenkins won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status jenkins\nsudo journalctl -u jenkins -f\n\n# Check Java version and JAVA_HOME\njava -version\necho $JAVA_HOME\n\n# Check disk space\ndf -h /var/lib/jenkins\n\n# Check permissions\nls -la /var/lib/jenkins\nsudo chown -R jenkins:jenkins /var/lib/jenkins\n\n# Check memory allocation\nfree -h\nps aux | grep jenkins\n\n# Clear Jenkins cache\nsudo systemctl stop jenkins\nsudo rm -rf /var/lib/jenkins/war\nsudo systemctl start jenkins\n```\n\n2. **Memory issues**:\n```bash\n# Increase JVM memory\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n\n# Monitor memory usage\ntop -p $(pgrep java)\njstat -gc $(pgrep java) 5s\n```\n\n3. **Plugin issues**:\n```bash\n# Safe start (disable all plugins)\nsudo systemctl stop jenkins\necho 'jenkins.install.runSetupWizard=false' > /var/lib/jenkins/jenkins.install.runSetupWizard\nsudo systemctl start jenkins\n\n# Clear plugin cache\nsudo rm -rf /var/lib/jenkins/plugins/*.bak\nsudo rm -rf /var/lib/jenkins/plugins/*.hpi.pinned\n\n# Update plugins via CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E \"\\)$\" | awk '{print $1}' | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Check plugin dependencies\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -v \"^$\"\n```\n\n4. **Build failures**:\n```bash\n# Check workspace permissions\nsudo chown -R jenkins:jenkins /var/lib/jenkins/workspace\n\n# Clear old builds\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password delete-builds job-name 1-100\n\n# Check agent connectivity\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-computers\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password connect-node agent-name\n\n# Monitor build resources\nhtop\niostat -x 1\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging for Jenkins\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx4g -Djava.util.logging.config.file=/var/lib/jenkins/logging.properties\"\n\n# Create detailed logging configuration\nsudo tee /var/lib/jenkins/logging.properties <<EOF\n.level = INFO\n\n# Root logger\nhandlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler\n\n# Console logging\njava.util.logging.ConsoleHandler.level = INFO\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n\n# File logging\njava.util.logging.FileHandler.pattern = /var/log/jenkins/jenkins-debug.log\njava.util.logging.FileHandler.limit = 50000000\njava.util.logging.FileHandler.count = 5\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\n\n# Component-specific logging\nhudson.level = FINE\njenkins.level = FINE\nhudson.security.level = FINE\nhudson.plugins.level = FINE\nhudson.model.level = FINE\n\n# Plugin debugging\nhudson.plugins.git.level = FINE\norg.jenkinsci.plugins.workflow.level = FINE\nEOF\n\nsudo systemctl restart jenkins\n\n# View debug logs\nsudo tail -f /var/log/jenkins/jenkins-debug.log\n\n# Enable specific plugin debugging via Jenkins CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password groovy = <<EOF\nimport java.util.logging.Logger\nimport java.util.logging.Level\n\n// Enable debug logging for specific components\nLogger.getLogger(\"hudson.security\").setLevel(Level.FINE)\nLogger.getLogger(\"hudson.plugins.git\").setLevel(Level.FINE)\nLogger.getLogger(\"org.jenkinsci.plugins.workflow\").setLevel(Level.FINE)\n\nprintln \"Debug logging enabled\"\nEOF\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update jenkins\nsudo dnf update jenkins\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade jenkins\n\n# Arch Linux\nyay -Syu jenkins\n\n# Alpine Linux (Docker)\ndocker pull jenkins/jenkins:lts-jdk17\ndocker stop jenkins\ndocker rm jenkins\n# Re-run docker run command with new image\n\n# openSUSE\nsudo zypper update jenkins\n\n# FreeBSD\npkg update\npkg upgrade jenkins\n\n# macOS\nbrew upgrade jenkins-lts\n\n# Always backup before updates\nsudo /usr/local/bin/jenkins-backup.sh\n\n# Update plugins after Jenkins update\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E \"\\)$\" | awk '{print $1}' | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Restart after updates\nsudo systemctl restart jenkins\n```\n\n### Maintenance Tasks\n\n```bash\n#!/bin/bash\n# jenkins-maintenance.sh\n\nJENKINS_HOME=\"/var/lib/jenkins\"\nJENKINS_URL=\"http://localhost:8080\"\nADMIN_CREDENTIALS=\"admin:SecureAdminPassword123!\"\n\necho \"🔧 Starting Jenkins maintenance tasks...\"\n\n# Clean up old builds\necho \"🗑️  Cleaning up old builds...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport jenkins.model.Jenkins\nimport hudson.model.*\n\nJenkins.instance.getAllItems(Job.class).each { job ->\n    if (job.getBuilds().size() > 50) {\n        def buildsToDelete = job.getBuilds().drop(50)\n        println \"Deleting \\${buildsToDelete.size()} old builds for job: \\${job.name}\"\n        buildsToDelete.each { build ->\n            build.delete()\n        }\n    }\n}\nEOF\n\n# Clean up workspace\necho \"🧹 Cleaning up workspaces...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport hudson.model.*\nimport hudson.FilePath\nimport jenkins.model.Jenkins\n\nJenkins.instance.getAllItems(AbstractProject.class).each { job ->\n    def workspace = job.getWorkspace()\n    if (workspace != null && workspace.exists()) {\n        def size = workspace.length()\n        if (size > 1024 * 1024 * 100) { // > 100MB\n            println \"Workspace for \\${job.name} is \\${size / (1024*1024)} MB\"\n            workspace.deleteRecursive()\n            println \"Cleaned workspace for job: \\${job.name}\"\n        }\n    }\n}\nEOF\n\n# Update plugins\necho \"🔌 Checking for plugin updates...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} list-plugins | grep -E \"\\)$\" > /tmp/outdated-plugins.txt\n\nif [ -s /tmp/outdated-plugins.txt ]; then\n    echo \"📦 Updating outdated plugins:\"\n    cat /tmp/outdated-plugins.txt\n    \n    # Update plugins\n    awk '{print $1}' /tmp/outdated-plugins.txt | xargs java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} install-plugin\n    \n    echo \"🔄 Restarting Jenkins to apply plugin updates...\"\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} safe-restart\nfi\n\n# Clean up logs\necho \"📋 Rotating and cleaning logs...\"\nfind ${JENKINS_HOME}/logs -name \"*.log\" -mtime +7 -delete\nfind /var/log/jenkins -name \"*.log.*\" -mtime +7 -delete\n\n# Disk usage check\necho \"💾 Checking disk usage...\"\nDISK_USAGE=$(df ${JENKINS_HOME} | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${DISK_USAGE} -gt 80 ]; then\n    echo \"⚠️  High disk usage: ${DISK_USAGE}%\"\n    \n    # Clean up large files\n    find ${JENKINS_HOME}/jobs -name \"*.log\" -size +100M -mtime +3 -delete\n    find ${JENKINS_HOME}/workspace -name \"*\" -size +500M -mtime +1 -delete\nfi\n\n# Backup verification\necho \"🔍 Verifying recent backups...\"\nLATEST_BACKUP=$(ls -t /backup/jenkins/config/jenkins-home-*.tar.gz 2>/dev/null | head -1)\nif [ -n \"$LATEST_BACKUP\" ]; then\n    BACKUP_AGE=$(($(date +%s) - $(stat -c %Y \"$LATEST_BACKUP\")))\n    if [ $BACKUP_AGE -gt 172800 ]; then  # 2 days\n        echo \"⚠️  Latest backup is older than 2 days: $LATEST_BACKUP\"\n        echo \"💾 Running backup now...\"\n        /usr/local/bin/jenkins-backup.sh\n    else\n        echo \"✅ Recent backup found: $LATEST_BACKUP\"\n    fi\nelse\n    echo \"❌ No backups found. Running backup...\"\n    /usr/local/bin/jenkins-backup.sh\nfi\n\n# Security check\necho \"🔒 Running security checks...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport jenkins.security.ApiTokenProperty\nimport hudson.security.SecurityRealm\nimport jenkins.model.Jenkins\n\ndef instance = Jenkins.getInstance()\n\n// Check for default passwords\ndef realm = instance.getSecurityRealm()\nif (realm instanceof hudson.security.HudsonPrivateSecurityRealm) {\n    def users = realm.getAllUsers()\n    users.each { user ->\n        if (user.getId() == \"admin\") {\n            println \"⚠️  Default admin user found. Consider renaming or removing.\"\n        }\n    }\n}\n\n// Check for anonymous access\ndef authStrategy = instance.getAuthorizationStrategy()\nif (authStrategy.hasPermission(org.acegisecurity.Authentication.ANONYMOUS_USER, Jenkins.READ)) {\n    println \"⚠️  Anonymous read access is enabled\"\n}\n\nprintln \"Security check completed\"\nEOF\n\n# Performance check\necho \"📊 Checking performance metrics...\"\nJAVA_PID=$(pgrep java)\nif [ -n \"$JAVA_PID\" ]; then\n    MEMORY_USAGE=$(ps -o pid,vsz,rss,comm -p $JAVA_PID | awk 'NR==2 {print $3/1024}')\n    CPU_USAGE=$(ps -o pid,pcpu,comm -p $JAVA_PID | awk 'NR==2 {print $2}')\n    \n    echo \"Memory usage: ${MEMORY_USAGE}MB\"\n    echo \"CPU usage: ${CPU_USAGE}%\"\n    \n    if (( $(echo \"${MEMORY_USAGE} > 6144\" | bc -l) )); then\n        echo \"⚠️  High memory usage detected\"\n    fi\nfi\n\necho \"✅ Jenkins maintenance completed\"\n\n# Generate maintenance report\ncat > /var/log/jenkins-maintenance-$(date +%Y%m%d).log <<EOF\nJenkins Maintenance Report - $(date)\n===================================\n\nTasks Completed:\n- Old builds cleanup: ✅\n- Workspace cleanup: ✅\n- Plugin updates: $([ -s /tmp/outdated-plugins.txt ] && echo \"✅ Updated\" || echo \"✅ Up to date\")\n- Log rotation: ✅\n- Disk usage check: ✅ (${DISK_USAGE}%)\n- Backup verification: ✅\n- Security check: ✅\n- Performance check: ✅\n\nSystem Status:\n- Memory usage: ${MEMORY_USAGE}MB\n- CPU usage: ${CPU_USAGE}%\n- Disk usage: ${DISK_USAGE}%\n\nNext maintenance: $(date -d \"next week\" +%Y-%m-%d)\nEOF\n\necho \"📊 Maintenance report: /var/log/jenkins-maintenance-$(date +%Y%m%d).log\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"0 2 * * * root /usr/local/bin/jenkins-maintenance.sh\" | sudo tee -a /etc/crontab\necho \"*/15 * * * * root /usr/local/bin/jenkins-health-check.sh\" | sudo tee -a /etc/crontab\n\n# Log rotation configuration\nsudo tee /etc/logrotate.d/jenkins <<EOF\n/var/log/jenkins/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins adm\n    postrotate\n        systemctl reload jenkins > /dev/null 2>&1 || true\n    endscript\n}\n\n/var/lib/jenkins/logs/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins jenkins\n}\nEOF\n```\n\n## Integration Examples\n\n### Git Integration with Webhooks\n\n```bash\n# Configure Git webhook for automatic builds\nsudo tee /var/lib/jenkins/casc_configs/git-integration.yaml <<EOF\nunclassified:\n  gitHubPluginConfig:\n    hookUrl: \"https://jenkins.example.com/github-webhook/\"\n    \n  gitLabConnectionConfig:\n    connections:\n      - name: \"GitLab\"\n        url: \"https://gitlab.example.com\"\n        apiTokenId: \"gitlab-api-token\"\n        clientBuilderId: \"autodetect\"\n        connectionTimeout: 10\n        readTimeout: 10\n\njobs:\n  - script: |\n      multibranchPipelineJob('example-app') {\n        branchSources {\n          git {\n            id('github-example')\n            remote('https://github.com/example/app.git')\n            credentialsId('github-credentials')\n            includes('main develop feature/* release/*')\n          }\n        }\n        \n        factory {\n          workflowBranchProjectFactory {\n            scriptPath('Jenkinsfile')\n          }\n        }\n        \n        triggers {\n          periodicFolderTrigger {\n            interval('1d')\n          }\n        }\n        \n        orphanedItemStrategy {\n          discardOldItems {\n            daysToKeep(7)\n            numToKeep(10)\n          }\n        }\n      }\nEOF\n```\n\n### Docker Integration\n\n```groovy\n// Docker pipeline example\npipeline {\n    agent any\n    \n    environment {\n        DOCKER_REGISTRY = credentials('docker-registry')\n        DOCKER_IMAGE = \"${env.JOB_NAME}:${env.BUILD_NUMBER}\"\n    }\n    \n    stages {\n        stage('Build Docker Image') {\n            steps {\n                script {\n                    def image = docker.build(\"${DOCKER_REGISTRY}/${DOCKER_IMAGE}\")\n                    \n                    // Security scan\n                    sh \"\"\"\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}\n                    \"\"\"\n                    \n                    // Push to registry\n                    docker.withRegistry(\"https://${DOCKER_REGISTRY}\", 'docker-registry-credentials') {\n                        image.push()\n                        image.push(\"latest\")\n                    }\n                }\n            }\n        }\n        \n        stage('Deploy') {\n            steps {\n                script {\n                    // Deploy to Kubernetes\n                    sh \"\"\"\n                        kubectl set image deployment/myapp \\\n                            myapp=${DOCKER_REGISTRY}/${DOCKER_IMAGE} \\\n                            --namespace=production\n                        \n                        kubectl rollout status deployment/myapp \\\n                            --namespace=production --timeout=300s\n                    \"\"\"\n                }\n            }\n        }\n    }\n}\n```\n\n### Kubernetes Integration\n\n```yaml\n# Jenkins agent in Kubernetes\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: jenkins\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: jenkins\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\",\"pods/exec\"]\n  verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: jenkins\n---\n# Jenkins Configuration as Code for Kubernetes\njenkins:\n  clouds:\n    - kubernetes:\n        name: \"kubernetes\"\n        serverUrl: \"https://kubernetes.default\"\n        namespace: \"jenkins\"\n        credentialsId: \"kubernetes-token\"\n        jenkinsUrl: \"http://jenkins.jenkins.svc.cluster.local:8080\"\n        containerCapStr: \"10\"\n        templates:\n          - name: \"jenkins-agent\"\n            namespace: \"jenkins\"\n            label: \"kubernetes\"\n            containers:\n              - name: \"jnlp\"\n                image: \"jenkins/inbound-agent:latest\"\n                workingDir: \"/home/jenkins/agent\"\n                resourceRequestCpu: \"100m\"\n                resourceRequestMemory: \"256Mi\"\n                resourceLimitCpu: \"500m\"\n                resourceLimitMemory: \"1Gi\"\n```\n\n### LDAP/Active Directory Integration\n\n```yaml\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ad.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          inhibitInferRootDN: false\n          userSearchBase: \"OU=Users,OU=Company\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups,OU=Company\"\n          groupSearchFilter: \"(&(objectClass=group)(cn={0}))\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-service-password\"\n          displayNameAttributeName: \"displayName\"\n          mailAddressAttributeName: \"mail\"\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"administrators\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"Domain Admins\"\n              - \"Jenkins Admins\"\n        items:\n          - name: \"developers\"\n            pattern: \".*\"\n            permissions:\n              - \"Job/Build\"\n              - \"Job/Cancel\"\n              - \"Job/Read\"\n            assignments:\n              - \"Development Team\"\n```\n\n## Additional Resources\n\n- [Official Jenkins Documentation](https://www.jenkins.io/doc/)\n- [Jenkins Configuration as Code](https://jenkins.io/projects/jcasc/)\n- [Jenkins Pipeline Documentation](https://www.jenkins.io/doc/book/pipeline/)\n- [Jenkins Security Guide](https://www.jenkins.io/doc/book/security/)\n- [Jenkins Plugin Index](https://plugins.jenkins.io/)\n- [Jenkins Community](https://www.jenkins.io/community/)\n- [Jenkins Best Practices](https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/)\n- [Jenkins GitHub Repository](https://github.com/jenkinsci/jenkins)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"jenkins-installation-guide\" class=\"mobile-header\">Jenkins Installation Guide</h1>\n<p class=\"mobile-paragraph\">Jenkins is a free and open-source automation server for building, testing, and deploying applications. Originally developed by Kohsuke Kawaguchi and now maintained by the Jenkins community, Jenkins is the industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade features. It serves as a FOSS alternative to commercial CI/CD solutions like TeamCity, GitLab CI Premium, or Azure DevOps Server, offering unlimited build minutes, unlimited private repositories, and advanced pipeline capabilities without licensing costs, with features like distributed builds, Pipeline as Code, and extensive plugin ecosystem.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 50GB minimum (SSD recommended for build performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for agent communication and external integrations</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default Jenkins HTTP)</li>\n<li class=\"mobile-list-item\">Port 50000 (default Jenkins agent communication)</li>\n<li class=\"mobile-list-item\">Additional ports for external integrations (webhooks, etc.)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Java 11 or 17 LTS (OpenJDK recommended)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java 17 LTS\nsudo dnf install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\ncurl -fsSL https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key | sudo tee /etc/yum.repos.d/jenkins.io.key\n\nsudo tee /etc/yum.repos.d/jenkins.repo &lt;&lt;EOF\n[jenkins]\nname=Jenkins-stable\nbaseurl=http://pkg.jenkins.io/redhat-stable\ngpgcheck=1\ngpgkey=file:///etc/yum.repos.d/jenkins.io.key\nenabled=1\nEOF\n\n# Install Jenkins\nsudo dnf install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update\n\n# Install Java 17 LTS\nsudo apt install -y openjdk-17-jdk openjdk-17-jre\n\n# Add Jenkins repository\nwget -O /tmp/jenkins-key.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\nsudo mv /tmp/jenkins-key.asc /etc/apt/trusted.gpg.d/jenkins.asc\n\necho &quot;deb https://pkg.jenkins.io/debian-stable binary/&quot; | sudo tee /etc/apt/sources.list.d/jenkins.list\n\n# Update package index\nsudo apt update\n\n# Install Jenkins\nsudo apt install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo ufw allow 8080/tcp\nsudo ufw allow 50000/tcp\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java 17 LTS\nsudo pacman -S jdk17-openjdk\n\n# Install Jenkins from AUR\nyay -S jenkins\n\n# Alternative: Install manually from AUR\ngit clone https://aur.archlinux.org/jenkins.git\ncd jenkins\nmakepkg -si\n\n# Create jenkins user if not created\nsudo useradd -r -d /var/lib/jenkins -s /sbin/nologin jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /etc/jenkins/</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins is not officially packaged for Alpine Linux\n# Use Docker or manual installation\n\n# Method 1: Docker installation\napk add --no-cache docker docker-compose\nrc-update add docker default\nrc-service docker start\n\n# Create Jenkins data directory\nmkdir -p /var/lib/jenkins\n\n# Run Jenkins container\ndocker run -d \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v /var/lib/jenkins:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --group-add $(getent group docker | cut -d: -f3) \\\n  jenkins/jenkins:lts-jdk17\n\n# Get initial admin password\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n\n# Method 2: Manual installation with OpenJDK\napk add --no-cache openjdk17-jre-headless\nwget https://get.jenkins.io/war-stable/latest/jenkins.war -O /opt/jenkins.war\n\n# Create jenkins user and directories\nadduser -D -s /sbin/nologin jenkins\nmkdir -p /var/lib/jenkins /var/log/jenkins\nchown -R jenkins:jenkins /var/lib/jenkins /var/log/jenkins\n\n# Create init script\ntee /etc/init.d/jenkins &lt;&lt;&#039;EOF&#039;\n#!/sbin/openrc-run\nname=&quot;Jenkins&quot;\ncommand=&quot;java&quot;\ncommand_args=&quot;-jar /opt/jenkins.war --httpPort=8080 --ajp13Port=-1&quot;\ncommand_user=&quot;jenkins&quot;\npidfile=&quot;/run/jenkins.pid&quot;\ncommand_background=&quot;yes&quot;\ndepend() {\n    need net\n}\nEOF\n\nchmod +x /etc/init.d/jenkins\nrc-update add jenkins default\nrc-service jenkins start</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo zypper addrepo -G https://pkg.jenkins.io/opensuse-stable/ jenkins\nsudo zypper refresh\n\n# Install Jenkins\nsudo zypper install -y jenkins\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y java-17-openjdk jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install jenkins-lts\n\n# Start Jenkins service\nbrew services start jenkins-lts\n\n# Or run manually\njenkins-lts\n\n# Alternative: Install specific version\nbrew install jenkins-lts@2.414\n\n# Get initial admin password\ncat ~/.jenkins/secrets/initialAdminPassword\n\n# Configuration location: ~/.jenkins/\n# Alternative: /usr/local/var/jenkins_home/ (Intel Macs)\n# Alternative: /opt/homebrew/var/jenkins_home/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install jenkins openjdk17\n\n# Using ports\ncd /usr/ports/devel/jenkins\nmake install clean\n\n# Enable Jenkins\necho &#039;jenkins_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\necho &#039;jenkins_java_home=&quot;/usr/local/openjdk17&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Create jenkins user and directories\npw useradd jenkins -d /usr/local/jenkins -s /sbin/nologin\nmkdir -p /usr/local/jenkins\nchown jenkins:jenkins /usr/local/jenkins\n\n# Start service\nservice jenkins start\n\n# Get initial admin password\ncat /usr/local/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /usr/local/jenkins/</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install jenkins\n\n# Method 2: Using Scoop\nscoop install jenkins\n\n# Method 3: Manual installation\n# Download from https://www.jenkins.io/download/\n# Run jenkins.msi installer\n\n# Method 4: Windows service installation\n# Download jenkins.war\n# Install as Windows service\njava -jar jenkins.war --httpPort=8080 --install\n\n# Start service\nnet start Jenkins\n\n# Get initial admin password\nGet-Content &quot;C:\\Program Files\\Jenkins\\secrets\\initialAdminPassword&quot;\n\n# Configuration location: C:\\Program Files\\Jenkins\\\n# Or: %JENKINS_HOME% (if custom location)</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Java Environment Setup</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set JAVA_HOME (Linux/macOS)\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk\necho &#039;export JAVA_HOME=/usr/lib/jvm/java-17-openjdk&#039; &gt;&gt; ~/.bashrc\n\n# Verify Java installation\njava -version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/sysconfig/jenkins</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/default/jenkins</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/jenkins/</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code> (Docker) or <code class=\"mobile-inline-code\">/var/lib/jenkins/</code> (manual)</li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/sysconfig/jenkins</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">~/.jenkins/</code> or <code class=\"mobile-inline-code\">/usr/local/var/jenkins_home/</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/jenkins/</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Program Files\\Jenkins\\</code> or <code class=\"mobile-inline-code\">%JENKINS_HOME%</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential initial configuration</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initial web setup (after accessing http://your-server:8080)\n# 1. Enter admin password from: /var/lib/jenkins/secrets/initialAdminPassword\n# 2. Install suggested plugins or select specific plugins\n# 3. Create first admin user\n# 4. Configure Jenkins URL\n\n# Essential plugins to install:\n# - Pipeline plugins (Pipeline Suite)\n# - Git plugin\n# - Credentials Binding Plugin\n# - Build Timeout Plugin\n# - Timestamper Plugin\n# - Workspace Cleanup Plugin\n# - Blue Ocean (modern UI)\n# - Matrix Authorization Strategy Plugin</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status jenkins\n\n# Check web interface\ncurl -I http://localhost:8080\n\n# Test Java version\njava -version\n\n# Check Jenkins process\nps aux | grep jenkins\n\n# Verify Jenkins CLI\nwget http://localhost:8080/jnlpJars/jenkins-cli.jar\njava -jar jenkins-cli.jar -s http://localhost:8080 version\n\n# Check available plugins\njava -jar jenkins-cli.jar -s http://localhost:8080 list-plugins</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Change the default admin password immediately and configure proper authentication!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Jenkins to start on boot\nsudo systemctl enable jenkins\n\n# Start Jenkins\nsudo systemctl start jenkins\n\n# Stop Jenkins\nsudo systemctl stop jenkins\n\n# Restart Jenkins\nsudo systemctl restart jenkins\n\n# Graceful restart (wait for running builds)\nsudo systemctl reload jenkins\n\n# Check status\nsudo systemctl status jenkins\n\n# View logs\nsudo journalctl -u jenkins -f\n\n# Edit service configuration\nsudo systemctl edit jenkins\n# Add custom environment variables or JVM options</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Docker-based installation\ndocker start jenkins\ndocker stop jenkins\ndocker restart jenkins\n\n# Check container status\ndocker ps | grep jenkins\n\n# View logs\ndocker logs -f jenkins\n\n# Manual installation\nrc-update add jenkins default\nrc-service jenkins start\nrc-service jenkins stop\nrc-service jenkins restart\nrc-service jenkins status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;jenkins_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Jenkins\nservice jenkins start\n\n# Stop Jenkins\nservice jenkins stop\n\n# Restart Jenkins\nservice jenkins restart\n\n# Check status\nservice jenkins status\n\n# View logs\ntail -f /var/log/jenkins/jenkins.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start jenkins-lts\nbrew services stop jenkins-lts\nbrew services restart jenkins-lts\n\n# Check status\nbrew services list | grep jenkins\n\n# Manual control\njenkins-lts --httpPort=8080\n\n# View logs\ntail -f /usr/local/var/log/jenkins/jenkins.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Jenkins service\nnet start Jenkins\n\n# Stop Jenkins service\nnet stop Jenkins\n\n# Using PowerShell\nStart-Service Jenkins\nStop-Service Jenkins\nRestart-Service Jenkins\n\n# Check status\nGet-Service Jenkins\n\n# View logs (Windows Event Log)\nGet-EventLog -LogName Application -Source Jenkins\n\n# Or check Jenkins logs\nGet-Content &quot;C:\\Program Files\\Jenkins\\logs\\jenkins.log&quot; -Tail 50 -Wait</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-configuration\" class=\"mobile-header\">High Availability Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Multi-master setup with shared storage\n# Method 1: Shared filesystem (NFS, GlusterFS)\nsudo mkdir -p /shared/jenkins\nsudo mount -t nfs nfs-server:/jenkins /shared/jenkins\n\n# Update Jenkins home\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JENKINS_HOME=/shared/jenkins&quot;\n\n# Method 2: Database-backed configuration\n# Install CloudBees Jenkins Enterprise plugins for HA\n# Configure external database (PostgreSQL recommended)\n\n# Agent configuration for load distribution\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml &lt;&lt;EOF\njenkins:\n  nodes:\n    - permanent:\n        name: &quot;linux-agent-1&quot;\n        remoteFS: &quot;/var/lib/jenkins&quot;\n        numExecutors: 4\n        launcher:\n          ssh:\n            host: &quot;agent1.example.com&quot;\n            credentialsId: &quot;ssh-agent-key&quot;\n    - permanent:\n        name: &quot;windows-agent-1&quot;\n        remoteFS: &quot;C:\\\\Jenkins&quot;\n        numExecutors: 2\n        launcher:\n          command:\n            command: &quot;java -jar agent.jar&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Jenkins Configuration as Code (JCasC) for security\nsudo tee /var/lib/jenkins/casc_configs/security.yaml &lt;&lt;EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ldap.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          userSearchBase: &quot;OU=Users&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-password&quot;\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;admin&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;jenkins-admins&quot;\n          - name: &quot;developer&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Build&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;developers&quot;\n\nsecurity:\n  globalJobDslSecurityConfiguration:\n    useScriptSecurity: true\n  scriptApproval:\n    approvedSignatures:\n      - &quot;method java.lang.String trim&quot;\n      - &quot;staticMethod java.lang.System getProperty java.lang.String&quot;\n\nunclassified:\n  location:\n    adminAddress: &quot;jenkins@example.com&quot;\n    url: &quot;https://jenkins.example.com/&quot;\n    \n  mailer:\n    smtpHost: &quot;smtp.example.com&quot;\n    smtpPort: 587\n    charset: &quot;UTF-8&quot;\n    authentication:\n      username: &quot;jenkins@example.com&quot;\n      password: &quot;{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}&quot;\n    useSsl: false\n    useTls: true\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/jenkins\nupstream jenkins {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name jenkins.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jenkins.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jenkins.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.example.com/privkey.pem;\n    \n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n\n    client_max_body_size 100M;\n    \n    location / {\n        proxy_pass http://jenkins;\n        proxy_redirect default;\n        proxy_http_version 1.1;\n        \n        # Required headers for Jenkins\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        \n        # WebSocket support for Jenkins\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeout settings\n        proxy_connect_timeout 90;\n        proxy_send_timeout 90;\n        proxy_read_timeout 90;\n        \n        proxy_buffering off;\n        proxy_request_buffering off;\n        proxy_max_temp_file_size 0;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend jenkins_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jenkins.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend jenkins_servers\n\nbackend jenkins_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /login\n    http-check expect status 200\n    server jenkins1 127.0.0.1:8080 check inter 30s rise 2 fall 3\n    server jenkins2 127.0.0.1:8081 check inter 30s rise 2 fall 3 backup\n\n    # Headers for Jenkins\n    http-request set-header X-Forwarded-Proto https\n    http-request set-header X-Forwarded-Port %[dst_port]\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-http-server-configuration\" class=\"mobile-header\">Apache HTTP Server Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/jenkins.conf\n&lt;VirtualHost *:80&gt;\n    ServerName jenkins.example.com\n    Redirect permanent / https://jenkins.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName jenkins.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/jenkins.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/jenkins.example.com/privkey.pem\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyPreserveHost On\n    ProxyRequests Off\n    \n    ProxyPass / http://127.0.0.1:8080/ nocanon\n    ProxyPassReverse / http://127.0.0.1:8080/\n    ProxyPassReverse  /  http://jenkins.example.com/\n    \n    # WebSocket support\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8080/$1&quot; [P,L]\n    \n    AllowEncodedSlashes NoDecode\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (development only)\nsudo mkdir -p /etc/jenkins/ssl\nsudo openssl req -x509 -newkey rsa:4096 -keyout /etc/jenkins/ssl/jenkins.key -out /etc/jenkins/ssl/jenkins.crt -days 365 -nodes -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=jenkins.example.com&quot;\n\n# Create Java keystore\nsudo keytool -genkey -alias jenkins -keyalg RSA -keystore /etc/jenkins/ssl/jenkins.jks -keysize 2048 -dname &quot;CN=jenkins.example.com,OU=IT,O=Organization,L=City,ST=State,C=US&quot; -storepass changeit -keypass changeit\n\n# Configure Jenkins to use HTTPS\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JENKINS_OPTS=--httpPort=-1 --httpsPort=8443 --httpsKeyStore=/etc/jenkins/ssl/jenkins.jks --httpsKeyStorePassword=changeit&quot;\n\nsudo systemctl restart jenkins\n\n# Or use Let&#039;s Encrypt with reverse proxy (recommended)\nsudo certbot --nginx -d jenkins.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"authentication-and-authorization\" class=\"mobile-header\">Authentication and Authorization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure LDAP authentication via JCasC\nsudo tee /var/lib/jenkins/casc_configs/auth.yaml &lt;&lt;EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ldap.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          inhibitInferRootDN: false\n          userSearchBase: &quot;OU=Users&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups&quot;\n          groupSearchFilter: &quot;(&amp;(objectClass=group)(cn={0}))&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-password&quot;\n          displayNameAttributeName: &quot;displayName&quot;\n          mailAddressAttributeName: &quot;mail&quot;\n\n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;jenkins-admins&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;Domain Admins&quot;\n              - &quot;jenkins-admins&quot;\n          - name: &quot;developers&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Build&quot;\n              - &quot;Job/Cancel&quot;\n              - &quot;Job/Read&quot;\n              - &quot;Job/Workspace&quot;\n              - &quot;Run/Replay&quot;\n              - &quot;Run/Update&quot;\n            assignments:\n              - &quot;developers&quot;\n              - &quot;authenticated&quot;\n          - name: &quot;viewers&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;viewers&quot;\n              \ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: &quot;ldap-password&quot;\n              username: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n              password: &quot;{AQAAABAAAAAQSecureEncryptedPassword=}&quot;\n              description: &quot;LDAP Service Account&quot;\n          - basicSSHUserPrivateKey:\n              scope: GLOBAL\n              id: &quot;ssh-agent-key&quot;\n              username: &quot;jenkins&quot;\n              description: &quot;SSH key for Jenkins agents&quot;\n              privateKeySource:\n                directEntry:\n                  privateKey: |\n                    -----BEGIN OPENSSH PRIVATE KEY-----\n                    EncryptedPrivateKeyContentHere\n                    -----END OPENSSH PRIVATE KEY-----\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 8080\nsudo ufw allow from 192.168.1.0/24 to any port 50000\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=jenkins\nsudo firewall-cmd --permanent --zone=jenkins --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=jenkins --add-port=8080/tcp\nsudo firewall-cmd --permanent --zone=jenkins --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 8080 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 50000 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {8080, 50000}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Jenkins HTTP&quot; -Direction Inbound -Protocol TCP -LocalPort 8080 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;Jenkins Agent&quot; -Direction Inbound -Protocol TCP -LocalPort 50000 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"external-database-configuration-postgresql\" class=\"mobile-header\">External Database Configuration (PostgreSQL)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Create Jenkins database\nsudo -u postgres createdb jenkinsdb\nsudo -u postgres createuser jenkinsuser\nsudo -u postgres psql -c &quot;ALTER USER jenkinsuser WITH PASSWORD &#039;SecureJenkinsPassword123!&#039;;&quot;\nsudo -u postgres psql -c &quot;GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;&quot;\n\n# Download PostgreSQL driver\nwget https://jdbc.postgresql.org/download/postgresql-42.6.0.jar -O /var/lib/jenkins/postgresql-connector.jar\n\n# Configure Jenkins to use PostgreSQL\nsudo tee -a /etc/default/jenkins &lt;&lt;EOF\n# PostgreSQL database configuration\nJENKINS_JAVA_OPTIONS=&quot;-Djenkins.install.runSetupWizard=false -Dhudson.model.DirectoryBrowserSupport.CSP=\\&quot;sandbox allow-scripts; default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;;\\&quot;&quot;\nEOF\n\n# Create database configuration\nsudo tee /var/lib/jenkins/database-config.xml &lt;&lt;EOF\n&lt;databaseConfiguration&gt;\n  &lt;database class=&quot;org.jenkinsci.plugins.database.postgresql.PostgreSQLDatabase&quot;&gt;\n    &lt;hostname&gt;localhost&lt;/hostname&gt;\n    &lt;port&gt;5432&lt;/port&gt;\n    &lt;database&gt;jenkinsdb&lt;/database&gt;\n    &lt;username&gt;jenkinsuser&lt;/username&gt;\n    &lt;password&gt;{AQAAABAAAAAQEncryptedPasswordHere=}&lt;/password&gt;\n    &lt;properties&gt;sslmode=require&lt;/properties&gt;\n  &lt;/database&gt;\n&lt;/databaseConfiguration&gt;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-database-schema\" class=\"mobile-header\">Backup Database Schema</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database schema backup\nsudo -u postgres pg_dump jenkinsdb &gt; /backup/jenkins/jenkinsdb-schema-$(date +%Y%m%d).sql\n\n# Create Jenkins jobs and configuration backup\nsudo tee /usr/local/bin/jenkins-db-backup.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/jenkins/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# PostgreSQL backup\nsudo -u postgres pg_dump jenkinsdb | gzip &gt; &quot;$BACKUP_DIR/jenkinsdb.sql.gz&quot;\n\n# Jenkins configuration backup\ntar -czf &quot;$BACKUP_DIR/jenkins-config.tar.gz&quot; \\\n  --exclude=&quot;/var/lib/jenkins/workspace/*&quot; \\\n  --exclude=&quot;/var/lib/jenkins/builds/*/archive&quot; \\\n  --exclude=&quot;/var/lib/jenkins/logs/*&quot; \\\n  /var/lib/jenkins/\n\necho &quot;Database backup completed: $BACKUP_DIR&quot;\nEOF\n\nchmod +x /usr/local/bin/jenkins-db-backup.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Jenkins optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\njenkins soft nofile 65535\njenkins hard nofile 65535\njenkins soft nproc 32768\njenkins hard nproc 32768\nEOF\n\n# Optimize Jenkins JVM settings\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+DisableExplicitGC -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&quot;\nEnvironment=&quot;JENKINS_OPTS=--sessionTimeout=1440 --sessionEviction=86400&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"jenkins-performance-configuration\" class=\"mobile-header\">Jenkins Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Jenkins for high performance\nsudo tee /var/lib/jenkins/casc_configs/performance.yaml &lt;&lt;EOF\njenkins:\n  systemMessage: &quot;High-Performance Jenkins Instance&quot;\n  numExecutors: 0  # Don&#039;t run builds on controller\n  mode: EXCLUSIVE\n  quietPeriod: 5\n  scmCheckoutRetryCount: 3\n  \n  # Global pipeline libraries for shared code\n  globalLibraries:\n    libraries:\n      - name: &quot;shared-pipeline-library&quot;\n        defaultVersion: &quot;main&quot;\n        implicit: true\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: &quot;https://github.com/example/jenkins-shared-library.git&quot;\n                credentialsId: &quot;github-token&quot;\n\n  # Configure build discarders globally\n  buildDiscarders:\n    configuredBuildDiscarders:\n      - &quot;logRotator&quot;:\n          artifactDaysToKeepStr: &quot;30&quot;\n          artifactNumToKeepStr: &quot;10&quot;\n          daysToKeepStr: &quot;30&quot;\n          numToKeepStr: &quot;100&quot;\n\nunclassified:\n  # Configure global timeout\n  buildTimeout:\n    operations:\n      - timeoutMinutes: 60\n      - failBuild: true\n      - writingDescription: true\n      \n  # Workspace cleanup configuration  \n  wsCleanup:\n    deleteDirs: true\n    cleanupMatrixParent: true\n    skipWhenFailed: false\n    \ntool:\n  # Configure tools for performance\n  git:\n    installations:\n      - name: &quot;Default&quot;\n        home: &quot;/usr/bin/git&quot;\n        \n  maven:\n    installations:\n      - name: &quot;Maven 3.9&quot;\n        properties:\n          - installSource:\n              installers:\n                - maven:\n                    id: &quot;3.9.6&quot;\n                    \n  gradle:\n    installations:\n      - name: &quot;Gradle 8&quot;\n        properties:\n          - installSource:\n              installers:\n                - gradleInstaller:\n                    id: &quot;8.4&quot;\n\n  nodejs:\n    installations:\n      - name: &quot;NodeJS 18&quot;\n        properties:\n          - installSource:\n              installers:\n                - nodeJSInstaller:\n                    id: &quot;18.18.2&quot;\n                    \n  dockerTool:\n    installations:\n      - name: &quot;Docker&quot;\n        properties:\n          - installSource:\n              installers:\n                - dockerInstaller:\n                    version: &quot;latest&quot;\nEOF\n\n# Configure agent templates for auto-scaling\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml &lt;&lt;EOF\njenkins:\n  clouds:\n    - kubernetes:\n        name: &quot;kubernetes&quot;\n        serverUrl: &quot;https://kubernetes.default.svc.cluster.local&quot;\n        namespace: &quot;jenkins&quot;\n        credentialsId: &quot;kubernetes-token&quot;\n        jenkinsUrl: &quot;http://jenkins.jenkins.svc.cluster.local:8080&quot;\n        jenkinsTunnel: &quot;jenkins-agent.jenkins.svc.cluster.local:50000&quot;\n        connectTimeout: 300\n        readTimeout: 300\n        containerCapStr: 100\n        templates:\n          - name: &quot;jenkins-agent&quot;\n            namespace: &quot;jenkins&quot;\n            label: &quot;kubernetes docker&quot;\n            nodeUsageMode: EXCLUSIVE\n            containers:\n              - name: &quot;jnlp&quot;\n                image: &quot;jenkins/inbound-agent:latest&quot;\n                alwaysPullImage: true\n                workingDir: &quot;/home/jenkins/agent&quot;\n                command: &quot;&quot;\n                args: &quot;&quot;\n                resourceRequestCpu: &quot;500m&quot;\n                resourceRequestMemory: &quot;1Gi&quot;\n                resourceLimitCpu: &quot;2&quot;\n                resourceLimitMemory: &quot;4Gi&quot;\n            volumes:\n              - hostPathVolume:\n                  hostPath: &quot;/var/run/docker.sock&quot;\n                  mountPath: &quot;/var/run/docker.sock&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"pipeline-optimization\" class=\"mobile-header\">Pipeline Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"groovy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">groovy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-groovy\">// Optimized Jenkins Pipeline Template\n// /var/lib/jenkins/pipeline-templates/optimized-pipeline.groovy\n@Library(&#039;shared-pipeline-library&#039;) _\n\npipeline {\n    agent {\n        label &#039;docker &amp;&amp; linux&#039;\n    }\n    \n    options {\n        buildDiscarder(logRotator(numToKeepStr: &#039;50&#039;, artifactNumToKeepStr: &#039;10&#039;))\n        timeout(time: 120, unit: &#039;MINUTES&#039;)\n        timestamps()\n        skipDefaultCheckout(true)\n        disableConcurrentBuilds()\n        ansiColor(&#039;xterm&#039;)\n        parallelsAlwaysFailFast()\n        copyArtifactPermission(&#039;*&#039;)\n    }\n    \n    environment {\n        DOCKER_REGISTRY = credentials(&#039;docker-registry-url&#039;)\n        MAVEN_OPTS = &#039;-Xmx2g -XX:+UseG1GC&#039;\n        GRADLE_OPTS = &#039;-Xmx2g -Dorg.gradle.daemon=false&#039;\n        CI = &#039;true&#039;\n    }\n    \n    stages {\n        stage(&#039;Checkout&#039;) {\n            steps {\n                checkout scm\n                script {\n                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(8)\n                    env.BUILD_VERSION = &quot;${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}&quot;\n                }\n            }\n        }\n        \n        stage(&#039;Parallel Analysis&#039;) {\n            parallel {\n                stage(&#039;Code Quality&#039;) {\n                    steps {\n                        script {\n                            // SonarQube analysis\n                            withSonarQubeEnv(&#039;SonarQube&#039;) {\n                                sh &#039;&#039;&#039;\n                                    mvn sonar:sonar \\\n                                        -Dsonar.projectKey=${JOB_NAME} \\\n                                        -Dsonar.projectVersion=${BUILD_VERSION} \\\n                                        -Dsonar.sources=src/main \\\n                                        -Dsonar.tests=src/test \\\n                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml\n                                &#039;&#039;&#039;\n                            }\n                            \n                            timeout(time: 10, unit: &#039;MINUTES&#039;) {\n                                waitForQualityGate abortPipeline: true\n                            }\n                        }\n                    }\n                }\n                \n                stage(&#039;Security Scan&#039;) {\n                    steps {\n                        // OWASP Dependency Check\n                        dependencyCheck additionalArguments: &#039;&#039;&#039;\n                            --enableRetired\n                            --enableExperimental  \n                            --scan ./\n                            --format JSON\n                            --format HTML\n                            --suppression dependency-check-suppressions.xml\n                        &#039;&#039;&#039;, odcInstallation: &#039;dependency-check-8.4.0&#039;\n                        \n                        dependencyCheckPublisher pattern: &#039;**/dependency-check-report.xml&#039;\n                        \n                        // Secret scanning\n                        sh &#039;&#039;&#039;\n                            docker run --rm -v $(pwd):/repo \\\n                                trufflesecurity/trufflehog:latest \\\n                                git file:///repo \\\n                                --json \\\n                                --fail &gt; trufflehog-results.json || true\n                        &#039;&#039;&#039;\n                    }\n                }\n                \n                stage(&#039;Test&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            # Parallel test execution\n                            mvn clean test \\\n                                -Dmaven.test.failure.ignore=true \\\n                                -Dspring.profiles.active=test \\\n                                -Djunit.jupiter.execution.parallel.enabled=true \\\n                                -Djunit.jupiter.execution.parallel.mode.default=concurrent\n                        &#039;&#039;&#039;\n                        \n                        publishTestResults testResultsPattern: &#039;target/surefire-reports/*.xml&#039;\n                        publishCoverage adapters: [jacocoAdapter(&#039;target/site/jacoco/jacoco.xml&#039;)], \n                                       sourceFileResolver: sourceFiles(&#039;STORE_LAST_BUILD&#039;)\n                    }\n                    post {\n                        always {\n                            archiveArtifacts artifacts: &#039;target/surefire-reports/**&#039;, allowEmptyArchive: true\n                        }\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Build &amp; Package&#039;) {\n            steps {\n                sh &#039;&#039;&#039;\n                    # Optimized build with parallel processing\n                    mvn clean package \\\n                        -DskipTests \\\n                        -T 2C \\\n                        -Dspring.profiles.active=production \\\n                        -Dmaven.javadoc.skip=true\n                &#039;&#039;&#039;\n                \n                // Docker build with BuildKit\n                script {\n                    def image = docker.build(&quot;${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}&quot;, \n                                           &quot;--build-arg BUILD_VERSION=${env.BUILD_VERSION} .&quot;)\n                    \n                    // Security scanning with Trivy\n                    sh &quot;&quot;&quot;\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --format table \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\n                    &quot;&quot;&quot;\n                    \n                    image.push()\n                    image.push(&quot;latest&quot;)\n                }\n            }\n        }\n        \n        stage(&#039;Deploy&#039;) {\n            when {\n                anyOf {\n                    branch &#039;main&#039;\n                    branch &#039;develop&#039;\n                    branch &#039;release/*&#039;\n                }\n            }\n            parallel {\n                stage(&#039;Staging&#039;) {\n                    when { branch &#039;develop&#039; }\n                    steps {\n                        script {\n                            // Deploy to staging environment\n                            sh &#039;&#039;&#039;\n                                kubectl set image deployment/myapp-staging \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=staging\n                                \n                                kubectl rollout status deployment/myapp-staging \\\n                                    --namespace=staging --timeout=300s\n                            &#039;&#039;&#039;\n                            \n                            // Run smoke tests\n                            sh &#039;&#039;&#039;\n                                curl -f http://myapp-staging.example.com/health || exit 1\n                                npm run test:e2e -- --base-url http://myapp-staging.example.com\n                            &#039;&#039;&#039;\n                        }\n                    }\n                }\n                \n                stage(&#039;Production&#039;) {\n                    when { \n                        anyOf {\n                            branch &#039;main&#039;\n                            branch &#039;release/*&#039;\n                        }\n                    }\n                    steps {\n                        // Manual approval for production\n                        timeout(time: 60, unit: &#039;MINUTES&#039;) {\n                            input message: &#039;Deploy to production?&#039;, \n                                  ok: &#039;Deploy&#039;,\n                                  submitterParameter: &#039;APPROVER&#039;\n                        }\n                        \n                        script {\n                            sh &#039;&#039;&#039;\n                                # Blue-green deployment\n                                kubectl set image deployment/myapp-production \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=production\n                                \n                                kubectl rollout status deployment/myapp-production \\\n                                    --namespace=production --timeout=600s\n                            &#039;&#039;&#039;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            // Cleanup workspace\n            cleanWs()\n            \n            // Archive artifacts\n            archiveArtifacts artifacts: &#039;target/*.jar,docker-compose.yml&#039;, \n                           allowEmptyArchive: true, \n                           fingerprint: true\n                           \n            // Collect build metrics\n            script {\n                def buildDuration = currentBuild.duration / 1000\n                echo &quot;Build completed in ${buildDuration} seconds&quot;\n                \n                // Custom metrics collection\n                sh &quot;&quot;&quot;\n                    echo &quot;build_duration_seconds{job=\\&quot;${env.JOB_NAME}\\&quot;,build=\\&quot;${env.BUILD_NUMBER}\\&quot;} ${buildDuration}&quot; &gt; build-metrics.txt\n                &quot;&quot;&quot;\n                \n                archiveArtifacts artifacts: &#039;build-metrics.txt&#039;, allowEmptyArchive: true\n            }\n        }\n        \n        success {\n            // Success notifications\n            emailext(\n                subject: &quot;✅ Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;&quot;&quot;Build successful for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n                         \n                Build URL: ${env.BUILD_URL}\n                Git Commit: ${env.GIT_COMMIT}\n                Duration: ${currentBuild.durationString}\n                Approver: ${env.APPROVER ?: &#039;Automatic&#039;}&quot;&quot;&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n            \n            slackSend(\n                channel: &#039;#deployments&#039;,\n                color: &#039;good&#039;,\n                message: &quot;✅ Deployment Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER} by ${env.APPROVER ?: &#039;System&#039;}&quot;\n            )\n        }\n        \n        failure {\n            emailext(\n                subject: &quot;❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Build failed for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n            \n            slackSend(\n                channel: &#039;#ci-cd-alerts&#039;,\n                color: &#039;danger&#039;,\n                message: &quot;❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (&lt;${env.BUILD_URL}|View Details&gt;)&quot;\n            )\n        }\n        \n        unstable {\n            emailext(\n                subject: &quot;⚠️  Build Unstable: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Build unstable for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins CLI monitoring commands\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password version\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-jobs\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-builds job-name\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password get-build job-name 1\n\n# System information\ncurl -u admin:password http://localhost:8080/systemInfo\n\n# Build queue status\ncurl -u admin:password http://localhost:8080/queue/api/json\n\n# Node status\ncurl -u admin:password http://localhost:8080/computer/api/json\n\n# Plugin information\ncurl -u admin:password http://localhost:8080/pluginManager/api/json?depth=1</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Jenkins Prometheus Plugin and configure metrics\n# Via Jenkins UI: Manage Jenkins &gt; Manage Plugins &gt; Available &gt; Prometheus metrics plugin\n\n# Configure Prometheus to scrape Jenkins metrics\nsudo tee /etc/prometheus/jenkins.yml &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: &#039;jenkins&#039;\n    static_configs:\n      - targets: [&#039;localhost:8080&#039;]\n    metrics_path: /prometheus/\n    scrape_interval: 30s\n    scrape_timeout: 10s\nEOF\n\n# Install Jenkins Exporter (alternative)\nwget https://github.com/lovoo/jenkins_exporter/releases/download/v1.0.0/jenkins_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf jenkins_exporter-*.tar.gz\nsudo cp jenkins_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/jenkins_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=Jenkins Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=jenkins\nExecStart=/usr/local/bin/jenkins_exporter \\\n    --jenkins.address=http://localhost:8080 \\\n    --jenkins.username=monitoring \\\n    --jenkins.password=MonitoringPassword123! \\\n    --web.listen-address=:9118\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now jenkins_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-health-check.sh\n\nJENKINS_URL=&quot;http://localhost:8080&quot;\nHEALTH_LOG=&quot;/var/log/jenkins-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✅ Jenkins service is running&quot;\nelse\n    log_message &quot;❌ Jenkins service is not running&quot;\n    exit 2\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; ${JENKINS_URL}/login)\nif [ &quot;${HTTP_STATUS}&quot; = &quot;200&quot; ]; then\n    log_message &quot;✅ Jenkins web interface responding (HTTP ${HTTP_STATUS})&quot;\nelse\n    log_message &quot;❌ Jenkins web interface issues (HTTP ${HTTP_STATUS})&quot;\n    exit 2\nfi\n\n# Check disk space\nJENKINS_HOME_USAGE=$(df /var/lib/jenkins | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${JENKINS_HOME_USAGE} -gt 85 ]; then\n    log_message &quot;⚠️  High disk usage: ${JENKINS_HOME_USAGE}%&quot;\n    exit 1\nelse\n    log_message &quot;✅ Jenkins home disk usage: ${JENKINS_HOME_USAGE}%&quot;\nfi\n\n# Check memory usage\nJAVA_MEMORY=$(ps -o pid,vsz,rss,comm -C java | grep jenkins | awk &#039;{rss+=$3} END {print rss/1024}&#039;)\nif (( $(echo &quot;${JAVA_MEMORY} &gt; 6144&quot; | bc -l) )); then\n    log_message &quot;⚠️  High memory usage: ${JAVA_MEMORY}MB&quot;\n    exit 1\nelse\n    log_message &quot;✅ Jenkins memory usage: ${JAVA_MEMORY}MB&quot;\nfi\n\n# Check running builds (if Jenkins CLI is available)\nif [ -f /var/lib/jenkins/jenkins-cli.jar ]; then\n    RUNNING_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2&gt;/dev/null | grep -c &quot;RUNNING&quot; || echo &quot;0&quot;)\n    log_message &quot;ℹ️  Running builds: ${RUNNING_BUILDS}&quot;\n    \n    # Check for failed builds in last 24 hours\n    FAILED_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2&gt;/dev/null | grep -c &quot;FAILURE&quot; || echo &quot;0&quot;)\n    if [ ${FAILED_BUILDS} -gt 5 ]; then\n        log_message &quot;⚠️  High number of failed builds: ${FAILED_BUILDS}&quot;\n        exit 1\n    fi\nfi\n\n# Check plugin health\nPLUGIN_ERRORS=$(curl -s ${JENKINS_URL}/pluginManager/api/json?depth=1 | jq &#039;.plugins[] | select(.hasUpdate==true or .enabled==false) | .shortName&#039; | wc -l)\nif [ ${PLUGIN_ERRORS} -gt 0 ]; then\n    log_message &quot;⚠️  Plugins need attention: ${PLUGIN_ERRORS}&quot;\nfi\n\nlog_message &quot;✅ Jenkins health check completed&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"comprehensive-backup-strategy\" class=\"mobile-header\">Comprehensive Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-backup.sh\n\nBACKUP_DIR=&quot;/backup/jenkins&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nJENKINS_HOME=&quot;/var/lib/jenkins&quot;\nRETENTION_DAYS=14\n\nmkdir -p ${BACKUP_DIR}/{config,jobs,plugins,secrets,workspace}\n\necho &quot;Starting Jenkins comprehensive backup...&quot;\n\n# Function to gracefully shutdown Jenkins\ngraceful_shutdown() {\n    echo &quot;Putting Jenkins in quiet mode...&quot;\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! quiet-down\n    \n    # Wait for running builds to complete (max 20 minutes)\n    for i in {1..120}; do\n        RUNNING_BUILDS=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-builds | grep -c &quot;RUNNING&quot; || echo &quot;0&quot;)\n        if [ &quot;$RUNNING_BUILDS&quot; -eq 0 ]; then\n            echo &quot;All builds completed, stopping Jenkins...&quot;\n            systemctl stop jenkins\n            break\n        fi\n        echo &quot;Waiting for $RUNNING_BUILDS running builds to complete... (${i}/120)&quot;\n        sleep 10\n    done\n    \n    if [ &quot;$RUNNING_BUILDS&quot; -gt 0 ]; then\n        echo &quot;Warning: Stopping Jenkins with $RUNNING_BUILDS builds still running&quot;\n        systemctl stop jenkins\n    fi\n}\n\n# Function to start Jenkins\nstart_jenkins() {\n    echo &quot;Starting Jenkins...&quot;\n    systemctl start jenkins\n    \n    # Wait for Jenkins to be ready\n    for i in {1..60}; do\n        if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n            echo &quot;Jenkins is ready, canceling quiet mode...&quot;\n            java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! cancel-quiet-down\n            break\n        fi\n        echo &quot;Waiting for Jenkins to start... (${i}/60)&quot;\n        sleep 10\n    done\n}\n\n# Gracefully shutdown Jenkins\ngraceful_shutdown\n\n# Full Jenkins home backup (excluding large/temporary directories)\necho &quot;Creating full Jenkins home backup...&quot;\ntar --exclude=&quot;${JENKINS_HOME}/workspace/*&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/builds/*/archive&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/logs/*&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/.m2/repository&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/caches&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/war&quot; \\\n    -czf ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz \\\n    -C ${JENKINS_HOME} .\n\n# Job configurations backup\necho &quot;Backing up job configurations...&quot;\nmkdir -p ${BACKUP_DIR}/jobs\nfind ${JENKINS_HOME}/jobs -name &quot;config.xml&quot; -exec cp {} ${BACKUP_DIR}/jobs/ \\;\ntar -czf ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz -C ${BACKUP_DIR}/jobs .\nrm ${BACKUP_DIR}/jobs/config.xml 2&gt;/dev/null\n\n# Plugins backup\necho &quot;Backing up installed plugins...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-plugins &gt; ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt\ncp -r ${JENKINS_HOME}/plugins ${BACKUP_DIR}/plugins/plugins-${DATE}/ 2&gt;/dev/null\n\n# Secrets and credentials backup\necho &quot;Backing up secrets and credentials...&quot;\nif [ -d &quot;${JENKINS_HOME}/secrets&quot; ]; then\n    tar -czf ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz -C ${JENKINS_HOME} secrets/\nfi\n\n# System configuration backup\necho &quot;Backing up system configuration...&quot;\ntar -czf ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz \\\n    /etc/default/jenkins \\\n    /etc/sysconfig/jenkins \\\n    /etc/systemd/system/jenkins.service.d/ 2&gt;/dev/null\n\n# Database backup (if using external database)\nif [ -f &quot;${JENKINS_HOME}/database-config.xml&quot; ]; then\n    echo &quot;Backing up external database...&quot;\n    sudo -u postgres pg_dump jenkinsdb | gzip &gt; ${BACKUP_DIR}/config/jenkinsdb-${DATE}.sql.gz\nfi\n\n# Start Jenkins\nstart_jenkins\n\n# Cloud backup (uncomment and configure as needed)\n# aws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/${DATE}/ --recursive --sse AES256\n# az storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups --destination-path ${DATE}\n# gsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/${DATE}/\n\n# Verify backup integrity\necho &quot;Verifying backup integrity...&quot;\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz | head -1)\nif tar -tzf &quot;$LATEST_BACKUP&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Backup integrity verified&quot;\n    BACKUP_SIZE=$(du -h &quot;$LATEST_BACKUP&quot; | cut -f1)\n    echo &quot;Backup size: $BACKUP_SIZE&quot;\nelse\n    echo &quot;❌ Backup integrity check failed&quot;\n    exit 1\nfi\n\n# Cleanup old backups\necho &quot;Cleaning up old backups (keeping last $RETENTION_DAYS days)...&quot;\nfind ${BACKUP_DIR} -name &quot;jenkins-*&quot; -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name &quot;plugin-list-*&quot; -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name &quot;*-${DATE}*&quot; -type d -mtime +${RETENTION_DAYS} -exec rm -rf {} \\;\n\n# Generate backup report\necho &quot;Generating backup report...&quot;\ncat &gt; ${BACKUP_DIR}/backup-report-${DATE}.txt &lt;&lt;EOF\nJenkins Backup Report - ${DATE}\n================================\n\nBackup Location: ${BACKUP_DIR}\nJenkins Home: ${JENKINS_HOME}\nBackup Date: $(date)\nServer: $(hostname)\n\nFiles backed up:\n- Jenkins Home: $(ls -lh ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz)\n- Job Configs: $(ls -lh ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz)\n- Plugins: $(ls -lh ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt)\n- Secrets: $(ls -lh ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz 2&gt;/dev/null || echo &quot;No secrets backup&quot;)\n- System Config: $(ls -lh ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz 2&gt;/dev/null || echo &quot;No system config backup&quot;)\n\nTotal Backup Size: $(du -h ${BACKUP_DIR} | tail -1 | cut -f1)\n\nVerification: ✅ Passed\nEOF\n\necho &quot;✅ Jenkins backup completed: ${DATE}&quot;\necho &quot;📊 Backup report: ${BACKUP_DIR}/backup-report-${DATE}.txt&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-restore.sh\n\nBACKUP_FILE=&quot;${1}&quot;\nRESTORE_TYPE=&quot;${2:-full}&quot;  # full, config-only, jobs-only\n\nusage() {\n    echo &quot;Usage: $0 &lt;backup_file&gt; [restore_type]&quot;\n    echo &quot;Restore types: full (default), config-only, jobs-only&quot;\n    echo &quot;&quot;\n    echo &quot;Available backups:&quot;\n    ls -la /backup/jenkins/config/jenkins-home-*.tar.gz | head -10\n    exit 1\n}\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    usage\nfi\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;❌ Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\necho &quot;🔄 Starting Jenkins restore from: $BACKUP_FILE&quot;\necho &quot;Restore type: $RESTORE_TYPE&quot;\n\n# Pre-restore backup of current state\nif [ -d &quot;/var/lib/jenkins&quot; ]; then\n    echo &quot;📦 Creating backup of current installation...&quot;\n    CURRENT_BACKUP=&quot;/backup/jenkins/pre-restore-$(date +%s)&quot;\n    mkdir -p &quot;$CURRENT_BACKUP&quot;\n    mv /var/lib/jenkins &quot;$CURRENT_BACKUP/jenkins-$(date +%Y%m%d_%H%M%S)&quot;\n    echo &quot;Current installation backed up to: $CURRENT_BACKUP&quot;\nfi\n\n# Stop Jenkins\necho &quot;⏹️  Stopping Jenkins...&quot;\nsystemctl stop jenkins\n\ncase &quot;$RESTORE_TYPE&quot; in\n    &quot;full&quot;)\n        echo &quot;🔄 Performing full restore...&quot;\n        \n        # Create new Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Restore from backup\n        echo &quot;📂 Extracting backup archive...&quot;\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins\n        \n        # Set proper ownership\n        chown -R jenkins:jenkins /var/lib/jenkins\n        chmod -R 755 /var/lib/jenkins\n        \n        # Special permissions for secrets\n        if [ -d &quot;/var/lib/jenkins/secrets&quot; ]; then\n            chmod 700 /var/lib/jenkins/secrets\n            chmod 600 /var/lib/jenkins/secrets/*\n        fi\n        ;;\n        \n    &quot;config-only&quot;)\n        echo &quot;🔄 Performing configuration-only restore...&quot;\n        \n        # Create minimal Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Extract only configuration files\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins \\\n            --include=&quot;*/config.xml&quot; \\\n            --include=&quot;*/secrets/*&quot; \\\n            --include=&quot;*/users/*&quot; \\\n            --include=&quot;*/plugins/*&quot; \\\n            --exclude=&quot;*/workspace/*&quot; \\\n            --exclude=&quot;*/builds/*&quot;\n            \n        chown -R jenkins:jenkins /var/lib/jenkins\n        ;;\n        \n    &quot;jobs-only&quot;)\n        echo &quot;🔄 Performing jobs-only restore...&quot;\n        \n        if [ ! -d &quot;/var/lib/jenkins&quot; ]; then\n            echo &quot;❌ Jenkins directory not found. Cannot restore jobs only.&quot;\n            exit 1\n        fi\n        \n        # Backup current jobs\n        if [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n            mv /var/lib/jenkins/jobs &quot;/var/lib/jenkins/jobs.backup.$(date +%s)&quot;\n        fi\n        \n        # Extract only jobs\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins jobs/\n        chown -R jenkins:jenkins /var/lib/jenkins/jobs\n        ;;\n        \n    *)\n        echo &quot;❌ Unknown restore type: $RESTORE_TYPE&quot;\n        usage\n        ;;\nesac\n\n# Restore system configuration if available\nBACKUP_DIR=$(dirname &quot;$BACKUP_FILE&quot;)\nBACKUP_DATE=$(basename &quot;$BACKUP_FILE&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)\nSYSTEM_CONFIG=&quot;${BACKUP_DIR}/../config/system-config-${BACKUP_DATE}.tar.gz&quot;\n\nif [ -f &quot;$SYSTEM_CONFIG&quot; ]; then\n    echo &quot;🔧 Restoring system configuration...&quot;\n    tar -xzf &quot;$SYSTEM_CONFIG&quot; -C / 2&gt;/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=&quot;${BACKUP_DIR}/jenkinsdb-${BACKUP_DATE}.sql.gz&quot;\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;🗄️  Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql jenkinsdb\nfi\n\n# Start Jenkins\necho &quot;▶️  Starting Jenkins...&quot;\nsystemctl start jenkins\n\n# Wait for Jenkins to start and verify\necho &quot;⏳ Waiting for Jenkins to start...&quot;\nfor i in {1..120}; do\n    if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✅ Jenkins started successfully&quot;\n        break\n    fi\n    echo &quot;Waiting for Jenkins to start... (${i}/120)&quot;\n    sleep 10\ndone\n\n# Verify restoration\necho &quot;🔍 Verifying restoration...&quot;\nif curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins is responding&quot;\n    \n    # Check if jobs were restored\n    if [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n        JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs | wc -l)\n        echo &quot;📋 Jobs restored: $JOB_COUNT&quot;\n    fi\n    \n    # Check if plugins were restored\n    if [ -d &quot;/var/lib/jenkins/plugins&quot; ]; then\n        PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins | wc -l)\n        echo &quot;🔌 Plugins restored: $PLUGIN_COUNT&quot;\n    fi\n    \n    echo &quot;✅ Jenkins restoration completed successfully&quot;\n    echo &quot;&quot;\n    echo &quot;📝 Next steps:&quot;\n    echo &quot;1. Verify Jenkins configuration via web interface&quot;\n    echo &quot;2. Check plugin compatibility and update if needed&quot;\n    echo &quot;3. Verify job configurations and test builds&quot;\n    echo &quot;4. Update any environment-specific settings&quot;\n    \nelse\n    echo &quot;❌ Jenkins restoration failed - service not responding&quot;\n    echo &quot;Check logs: journalctl -u jenkins -n 50&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery\" class=\"mobile-header\">Disaster Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-disaster-recovery.sh\n\necho &quot;🚨 Jenkins Disaster Recovery Procedure&quot;\necho &quot;======================================&quot;\n\n# Check if Jenkins is running\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;⚠️  Jenkins is running. This procedure should be run on a failed system.&quot;\n    read -p &quot;Continue anyway? (y/N): &quot; -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        exit 1\n    fi\nfi\n\n# Find latest backup\nBACKUP_DIR=&quot;/backup/jenkins&quot;\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz 2&gt;/dev/null | head -1)\n\nif [ -z &quot;$LATEST_BACKUP&quot; ]; then\n    echo &quot;❌ No backups found in ${BACKUP_DIR}&quot;\n    echo &quot;Please restore from cloud backup or external storage&quot;\n    exit 1\nfi\n\necho &quot;📦 Latest backup found: $LATEST_BACKUP&quot;\necho &quot;📅 Backup date: $(basename &quot;$LATEST_BACKUP&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)&quot;\n\n# Verify backup integrity\necho &quot;🔍 Verifying backup integrity...&quot;\nif tar -tzf &quot;$LATEST_BACKUP&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Backup integrity verified&quot;\nelse\n    echo &quot;❌ Backup is corrupted. Cannot proceed with recovery.&quot;\n    exit 1\nfi\n\n# Create disaster recovery log\nDR_LOG=&quot;/var/log/jenkins-disaster-recovery-$(date +%Y%m%d_%H%M%S).log&quot;\nexec &gt; &gt;(tee -a &quot;$DR_LOG&quot;)\nexec 2&gt;&amp;1\n\necho &quot;📝 Disaster recovery log: $DR_LOG&quot;\n\n# System preparation\necho &quot;🔧 Preparing system for recovery...&quot;\n\n# Install Jenkins if not present\nif ! command -v jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;📦 Installing Jenkins...&quot;\n    # Add Jenkins repository and install (distribution-specific commands)\n    if [ -f /etc/debian_version ]; then\n        wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n        echo &quot;deb https://pkg.jenkins.io/debian-stable binary/&quot; &gt; /etc/apt/sources.list.d/jenkins.list\n        apt-get update\n        apt-get install -y openjdk-17-jdk jenkins\n    elif [ -f /etc/redhat-release ]; then\n        yum install -y java-17-openjdk jenkins\n    fi\nfi\n\n# Stop Jenkins service\nsystemctl stop jenkins\n\n# Clear existing Jenkins data\nif [ -d &quot;/var/lib/jenkins&quot; ]; then\n    echo &quot;🗑️  Removing existing Jenkins data...&quot;\n    rm -rf /var/lib/jenkins.disaster-backup-$(date +%s)\n    mv /var/lib/jenkins /var/lib/jenkins.disaster-backup-$(date +%s)\nfi\n\n# Create new Jenkins directory\nmkdir -p /var/lib/jenkins\n\n# Restore from backup\necho &quot;🔄 Restoring Jenkins from backup...&quot;\ntar -xzf &quot;$LATEST_BACKUP&quot; -C /var/lib/jenkins\n\n# Set proper permissions\nchown -R jenkins:jenkins /var/lib/jenkins\nchmod -R 755 /var/lib/jenkins\n\n# Special permissions for sensitive files\nif [ -d &quot;/var/lib/jenkins/secrets&quot; ]; then\n    chmod 700 /var/lib/jenkins/secrets\n    chmod 600 /var/lib/jenkins/secrets/*\nfi\n\nif [ -d &quot;/var/lib/jenkins/users&quot; ]; then\n    chmod 700 /var/lib/jenkins/users\nfi\n\n# Restore system configuration\nBACKUP_DATE=$(basename &quot;$LATEST_BACKUP&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)\nSYSTEM_CONFIG=&quot;${BACKUP_DIR}/config/system-config-${BACKUP_DATE}.tar.gz&quot;\n\nif [ -f &quot;$SYSTEM_CONFIG&quot; ]; then\n    echo &quot;🔧 Restoring system configuration...&quot;\n    tar -xzf &quot;$SYSTEM_CONFIG&quot; -C / 2&gt;/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=&quot;${BACKUP_DIR}/config/jenkinsdb-${BACKUP_DATE}.sql.gz&quot;\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;🗄️  Restoring database...&quot;\n    # Ensure PostgreSQL is running\n    systemctl start postgresql\n    \n    # Drop and recreate database\n    sudo -u postgres psql -c &quot;DROP DATABASE IF EXISTS jenkinsdb;&quot;\n    sudo -u postgres psql -c &quot;CREATE DATABASE jenkinsdb;&quot;\n    sudo -u postgres psql -c &quot;GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;&quot;\n    \n    # Restore database\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql jenkinsdb\nfi\n\n# Configure firewall\necho &quot;🔥 Configuring firewall...&quot;\nif command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n    ufw allow 8080/tcp\n    ufw allow 50000/tcp\nelif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n    firewall-cmd --permanent --add-port=8080/tcp\n    firewall-cmd --permanent --add-port=50000/tcp\n    firewall-cmd --reload\nfi\n\n# Start Jenkins\necho &quot;▶️  Starting Jenkins...&quot;\nsystemctl enable jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to start\necho &quot;⏳ Waiting for Jenkins to initialize...&quot;\nfor i in {1..300}; do\n    if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✅ Jenkins is responding&quot;\n        break\n    fi\n    echo &quot;Waiting for Jenkins... (${i}/300)&quot;\n    sleep 10\ndone\n\n# Verify recovery\necho &quot;🔍 Verifying disaster recovery...&quot;\n\n# Check Jenkins status\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins service is running&quot;\nelse\n    echo &quot;❌ Jenkins service failed to start&quot;\n    echo &quot;Check logs: journalctl -u jenkins -n 50&quot;\n    exit 1\nfi\n\n# Check web interface\nif curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins web interface is accessible&quot;\nelse\n    echo &quot;❌ Jenkins web interface is not responding&quot;\n    exit 1\nfi\n\n# Check jobs restoration\nif [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n    JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs 2&gt;/dev/null | wc -l)\n    echo &quot;📋 Jobs recovered: $JOB_COUNT&quot;\nelse\n    echo &quot;⚠️  No jobs directory found&quot;\nfi\n\n# Check plugins restoration\nif [ -d &quot;/var/lib/jenkins/plugins&quot; ]; then\n    PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins 2&gt;/dev/null | wc -l)\n    echo &quot;🔌 Plugins recovered: $PLUGIN_COUNT&quot;\nelse\n    echo &quot;⚠️  No plugins directory found&quot;\nfi\n\n# Generate recovery report\necho &quot;📊 Generating disaster recovery report...&quot;\ncat &gt; &quot;/var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt&quot; &lt;&lt;EOF\nJenkins Disaster Recovery Report\n===============================\nRecovery Date: $(date)\nServer: $(hostname)\nBackup Used: $LATEST_BACKUP\nRecovery Log: $DR_LOG\n\nRecovery Summary:\n- Jenkins Service: $(systemctl is-active jenkins)\n- Web Interface: $(curl -s -o /dev/null -w &quot;%{http_code}&quot; http://localhost:8080/login)\n- Jobs Recovered: $JOB_COUNT\n- Plugins Recovered: $PLUGIN_COUNT\n- Database Restored: $([ -f &quot;$DB_BACKUP&quot; ] &amp;&amp; echo &quot;Yes&quot; || echo &quot;No&quot;)\n\nNext Steps:\n1. Verify Jenkins configuration via web interface: http://$(hostname):8080\n2. Test critical job configurations\n3. Update any environment-specific settings\n4. Verify agent connections\n5. Test integrations (SCM, notifications, etc.)\n6. Update DNS/load balancer configurations if needed\n7. Notify team of recovery completion\n\nRecovery Status: ✅ COMPLETED\nEOF\n\necho &quot;&quot;\necho &quot;🎉 Jenkins disaster recovery completed successfully!&quot;\necho &quot;📝 Recovery report saved to: /var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt&quot;\necho &quot;&quot;\necho &quot;🔗 Access Jenkins: http://$(hostname):8080&quot;\necho &quot;&quot;\necho &quot;⚠️  Important post-recovery tasks:&quot;\necho &quot;1. Verify all job configurations&quot;\necho &quot;2. Test agent connections&quot;\necho &quot;3. Verify integrations (GitHub, LDAP, etc.)&quot;\necho &quot;4. Update any environment-specific configurations&quot;\necho &quot;5. Perform a backup of the recovered system&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Jenkins won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status jenkins\nsudo journalctl -u jenkins -f\n\n# Check Java version and JAVA_HOME\njava -version\necho $JAVA_HOME\n\n# Check disk space\ndf -h /var/lib/jenkins\n\n# Check permissions\nls -la /var/lib/jenkins\nsudo chown -R jenkins:jenkins /var/lib/jenkins\n\n# Check memory allocation\nfree -h\nps aux | grep jenkins\n\n# Clear Jenkins cache\nsudo systemctl stop jenkins\nsudo rm -rf /var/lib/jenkins/war\nsudo systemctl start jenkins</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Memory issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase JVM memory\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n\n# Monitor memory usage\ntop -p $(pgrep java)\njstat -gc $(pgrep java) 5s</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Plugin issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Safe start (disable all plugins)\nsudo systemctl stop jenkins\necho &#039;jenkins.install.runSetupWizard=false&#039; &gt; /var/lib/jenkins/jenkins.install.runSetupWizard\nsudo systemctl start jenkins\n\n# Clear plugin cache\nsudo rm -rf /var/lib/jenkins/plugins/*.bak\nsudo rm -rf /var/lib/jenkins/plugins/*.hpi.pinned\n\n# Update plugins via CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E &quot;\\)$&quot; | awk &#039;{print $1}&#039; | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Check plugin dependencies\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -v &quot;^$&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Build failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check workspace permissions\nsudo chown -R jenkins:jenkins /var/lib/jenkins/workspace\n\n# Clear old builds\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password delete-builds job-name 1-100\n\n# Check agent connectivity\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-computers\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password connect-node agent-name\n\n# Monitor build resources\nhtop\niostat -x 1</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging for Jenkins\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx4g -Djava.util.logging.config.file=/var/lib/jenkins/logging.properties&quot;\n\n# Create detailed logging configuration\nsudo tee /var/lib/jenkins/logging.properties &lt;&lt;EOF\n.level = INFO\n\n# Root logger\nhandlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler\n\n# Console logging\njava.util.logging.ConsoleHandler.level = INFO\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n\n# File logging\njava.util.logging.FileHandler.pattern = /var/log/jenkins/jenkins-debug.log\njava.util.logging.FileHandler.limit = 50000000\njava.util.logging.FileHandler.count = 5\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\n\n# Component-specific logging\nhudson.level = FINE\njenkins.level = FINE\nhudson.security.level = FINE\nhudson.plugins.level = FINE\nhudson.model.level = FINE\n\n# Plugin debugging\nhudson.plugins.git.level = FINE\norg.jenkinsci.plugins.workflow.level = FINE\nEOF\n\nsudo systemctl restart jenkins\n\n# View debug logs\nsudo tail -f /var/log/jenkins/jenkins-debug.log\n\n# Enable specific plugin debugging via Jenkins CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password groovy = &lt;&lt;EOF\nimport java.util.logging.Logger\nimport java.util.logging.Level\n\n// Enable debug logging for specific components\nLogger.getLogger(&quot;hudson.security&quot;).setLevel(Level.FINE)\nLogger.getLogger(&quot;hudson.plugins.git&quot;).setLevel(Level.FINE)\nLogger.getLogger(&quot;org.jenkinsci.plugins.workflow&quot;).setLevel(Level.FINE)\n\nprintln &quot;Debug logging enabled&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update jenkins\nsudo dnf update jenkins\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade jenkins\n\n# Arch Linux\nyay -Syu jenkins\n\n# Alpine Linux (Docker)\ndocker pull jenkins/jenkins:lts-jdk17\ndocker stop jenkins\ndocker rm jenkins\n# Re-run docker run command with new image\n\n# openSUSE\nsudo zypper update jenkins\n\n# FreeBSD\npkg update\npkg upgrade jenkins\n\n# macOS\nbrew upgrade jenkins-lts\n\n# Always backup before updates\nsudo /usr/local/bin/jenkins-backup.sh\n\n# Update plugins after Jenkins update\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E &quot;\\)$&quot; | awk &#039;{print $1}&#039; | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Restart after updates\nsudo systemctl restart jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-maintenance.sh\n\nJENKINS_HOME=&quot;/var/lib/jenkins&quot;\nJENKINS_URL=&quot;http://localhost:8080&quot;\nADMIN_CREDENTIALS=&quot;admin:SecureAdminPassword123!&quot;\n\necho &quot;🔧 Starting Jenkins maintenance tasks...&quot;\n\n# Clean up old builds\necho &quot;🗑️  Cleaning up old builds...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport jenkins.model.Jenkins\nimport hudson.model.*\n\nJenkins.instance.getAllItems(Job.class).each { job -&gt;\n    if (job.getBuilds().size() &gt; 50) {\n        def buildsToDelete = job.getBuilds().drop(50)\n        println &quot;Deleting \\${buildsToDelete.size()} old builds for job: \\${job.name}&quot;\n        buildsToDelete.each { build -&gt;\n            build.delete()\n        }\n    }\n}\nEOF\n\n# Clean up workspace\necho &quot;🧹 Cleaning up workspaces...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport hudson.model.*\nimport hudson.FilePath\nimport jenkins.model.Jenkins\n\nJenkins.instance.getAllItems(AbstractProject.class).each { job -&gt;\n    def workspace = job.getWorkspace()\n    if (workspace != null &amp;&amp; workspace.exists()) {\n        def size = workspace.length()\n        if (size &gt; 1024 * 1024 * 100) { // &gt; 100MB\n            println &quot;Workspace for \\${job.name} is \\${size / (1024*1024)} MB&quot;\n            workspace.deleteRecursive()\n            println &quot;Cleaned workspace for job: \\${job.name}&quot;\n        }\n    }\n}\nEOF\n\n# Update plugins\necho &quot;🔌 Checking for plugin updates...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} list-plugins | grep -E &quot;\\)$&quot; &gt; /tmp/outdated-plugins.txt\n\nif [ -s /tmp/outdated-plugins.txt ]; then\n    echo &quot;📦 Updating outdated plugins:&quot;\n    cat /tmp/outdated-plugins.txt\n    \n    # Update plugins\n    awk &#039;{print $1}&#039; /tmp/outdated-plugins.txt | xargs java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} install-plugin\n    \n    echo &quot;🔄 Restarting Jenkins to apply plugin updates...&quot;\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} safe-restart\nfi\n\n# Clean up logs\necho &quot;📋 Rotating and cleaning logs...&quot;\nfind ${JENKINS_HOME}/logs -name &quot;*.log&quot; -mtime +7 -delete\nfind /var/log/jenkins -name &quot;*.log.*&quot; -mtime +7 -delete\n\n# Disk usage check\necho &quot;💾 Checking disk usage...&quot;\nDISK_USAGE=$(df ${JENKINS_HOME} | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${DISK_USAGE} -gt 80 ]; then\n    echo &quot;⚠️  High disk usage: ${DISK_USAGE}%&quot;\n    \n    # Clean up large files\n    find ${JENKINS_HOME}/jobs -name &quot;*.log&quot; -size +100M -mtime +3 -delete\n    find ${JENKINS_HOME}/workspace -name &quot;*&quot; -size +500M -mtime +1 -delete\nfi\n\n# Backup verification\necho &quot;🔍 Verifying recent backups...&quot;\nLATEST_BACKUP=$(ls -t /backup/jenkins/config/jenkins-home-*.tar.gz 2&gt;/dev/null | head -1)\nif [ -n &quot;$LATEST_BACKUP&quot; ]; then\n    BACKUP_AGE=$(($(date +%s) - $(stat -c %Y &quot;$LATEST_BACKUP&quot;)))\n    if [ $BACKUP_AGE -gt 172800 ]; then  # 2 days\n        echo &quot;⚠️  Latest backup is older than 2 days: $LATEST_BACKUP&quot;\n        echo &quot;💾 Running backup now...&quot;\n        /usr/local/bin/jenkins-backup.sh\n    else\n        echo &quot;✅ Recent backup found: $LATEST_BACKUP&quot;\n    fi\nelse\n    echo &quot;❌ No backups found. Running backup...&quot;\n    /usr/local/bin/jenkins-backup.sh\nfi\n\n# Security check\necho &quot;🔒 Running security checks...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport jenkins.security.ApiTokenProperty\nimport hudson.security.SecurityRealm\nimport jenkins.model.Jenkins\n\ndef instance = Jenkins.getInstance()\n\n// Check for default passwords\ndef realm = instance.getSecurityRealm()\nif (realm instanceof hudson.security.HudsonPrivateSecurityRealm) {\n    def users = realm.getAllUsers()\n    users.each { user -&gt;\n        if (user.getId() == &quot;admin&quot;) {\n            println &quot;⚠️  Default admin user found. Consider renaming or removing.&quot;\n        }\n    }\n}\n\n// Check for anonymous access\ndef authStrategy = instance.getAuthorizationStrategy()\nif (authStrategy.hasPermission(org.acegisecurity.Authentication.ANONYMOUS_USER, Jenkins.READ)) {\n    println &quot;⚠️  Anonymous read access is enabled&quot;\n}\n\nprintln &quot;Security check completed&quot;\nEOF\n\n# Performance check\necho &quot;📊 Checking performance metrics...&quot;\nJAVA_PID=$(pgrep java)\nif [ -n &quot;$JAVA_PID&quot; ]; then\n    MEMORY_USAGE=$(ps -o pid,vsz,rss,comm -p $JAVA_PID | awk &#039;NR==2 {print $3/1024}&#039;)\n    CPU_USAGE=$(ps -o pid,pcpu,comm -p $JAVA_PID | awk &#039;NR==2 {print $2}&#039;)\n    \n    echo &quot;Memory usage: ${MEMORY_USAGE}MB&quot;\n    echo &quot;CPU usage: ${CPU_USAGE}%&quot;\n    \n    if (( $(echo &quot;${MEMORY_USAGE} &gt; 6144&quot; | bc -l) )); then\n        echo &quot;⚠️  High memory usage detected&quot;\n    fi\nfi\n\necho &quot;✅ Jenkins maintenance completed&quot;\n\n# Generate maintenance report\ncat &gt; /var/log/jenkins-maintenance-$(date +%Y%m%d).log &lt;&lt;EOF\nJenkins Maintenance Report - $(date)\n===================================\n\nTasks Completed:\n- Old builds cleanup: ✅\n- Workspace cleanup: ✅\n- Plugin updates: $([ -s /tmp/outdated-plugins.txt ] &amp;&amp; echo &quot;✅ Updated&quot; || echo &quot;✅ Up to date&quot;)\n- Log rotation: ✅\n- Disk usage check: ✅ (${DISK_USAGE}%)\n- Backup verification: ✅\n- Security check: ✅\n- Performance check: ✅\n\nSystem Status:\n- Memory usage: ${MEMORY_USAGE}MB\n- CPU usage: ${CPU_USAGE}%\n- Disk usage: ${DISK_USAGE}%\n\nNext maintenance: $(date -d &quot;next week&quot; +%Y-%m-%d)\nEOF\n\necho &quot;📊 Maintenance report: /var/log/jenkins-maintenance-$(date +%Y%m%d).log&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;0 2 * * * root /usr/local/bin/jenkins-maintenance.sh&quot; | sudo tee -a /etc/crontab\necho &quot;*/15 * * * * root /usr/local/bin/jenkins-health-check.sh&quot; | sudo tee -a /etc/crontab\n\n# Log rotation configuration\nsudo tee /etc/logrotate.d/jenkins &lt;&lt;EOF\n/var/log/jenkins/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins adm\n    postrotate\n        systemctl reload jenkins &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\n\n/var/lib/jenkins/logs/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins jenkins\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"git-integration-with-webhooks\" class=\"mobile-header\">Git Integration with Webhooks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Git webhook for automatic builds\nsudo tee /var/lib/jenkins/casc_configs/git-integration.yaml &lt;&lt;EOF\nunclassified:\n  gitHubPluginConfig:\n    hookUrl: &quot;https://jenkins.example.com/github-webhook/&quot;\n    \n  gitLabConnectionConfig:\n    connections:\n      - name: &quot;GitLab&quot;\n        url: &quot;https://gitlab.example.com&quot;\n        apiTokenId: &quot;gitlab-api-token&quot;\n        clientBuilderId: &quot;autodetect&quot;\n        connectionTimeout: 10\n        readTimeout: 10\n\njobs:\n  - script: |\n      multibranchPipelineJob(&#039;example-app&#039;) {\n        branchSources {\n          git {\n            id(&#039;github-example&#039;)\n            remote(&#039;https://github.com/example/app.git&#039;)\n            credentialsId(&#039;github-credentials&#039;)\n            includes(&#039;main develop feature/* release/*&#039;)\n          }\n        }\n        \n        factory {\n          workflowBranchProjectFactory {\n            scriptPath(&#039;Jenkinsfile&#039;)\n          }\n        }\n        \n        triggers {\n          periodicFolderTrigger {\n            interval(&#039;1d&#039;)\n          }\n        }\n        \n        orphanedItemStrategy {\n          discardOldItems {\n            daysToKeep(7)\n            numToKeep(10)\n          }\n        }\n      }\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-integration\" class=\"mobile-header\">Docker Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"groovy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">groovy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-groovy\">// Docker pipeline example\npipeline {\n    agent any\n    \n    environment {\n        DOCKER_REGISTRY = credentials(&#039;docker-registry&#039;)\n        DOCKER_IMAGE = &quot;${env.JOB_NAME}:${env.BUILD_NUMBER}&quot;\n    }\n    \n    stages {\n        stage(&#039;Build Docker Image&#039;) {\n            steps {\n                script {\n                    def image = docker.build(&quot;${DOCKER_REGISTRY}/${DOCKER_IMAGE}&quot;)\n                    \n                    // Security scan\n                    sh &quot;&quot;&quot;\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}\n                    &quot;&quot;&quot;\n                    \n                    // Push to registry\n                    docker.withRegistry(&quot;https://${DOCKER_REGISTRY}&quot;, &#039;docker-registry-credentials&#039;) {\n                        image.push()\n                        image.push(&quot;latest&quot;)\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Deploy&#039;) {\n            steps {\n                script {\n                    // Deploy to Kubernetes\n                    sh &quot;&quot;&quot;\n                        kubectl set image deployment/myapp \\\n                            myapp=${DOCKER_REGISTRY}/${DOCKER_IMAGE} \\\n                            --namespace=production\n                        \n                        kubectl rollout status deployment/myapp \\\n                            --namespace=production --timeout=300s\n                    &quot;&quot;&quot;\n                }\n            }\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Jenkins agent in Kubernetes\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: jenkins\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: jenkins\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods&quot;,&quot;pods/exec&quot;]\n  verbs: [&quot;create&quot;,&quot;delete&quot;,&quot;get&quot;,&quot;list&quot;,&quot;patch&quot;,&quot;update&quot;,&quot;watch&quot;]\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods/log&quot;]\n  verbs: [&quot;get&quot;,&quot;list&quot;,&quot;watch&quot;]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: jenkins\n---\n# Jenkins Configuration as Code for Kubernetes\njenkins:\n  clouds:\n    - kubernetes:\n        name: &quot;kubernetes&quot;\n        serverUrl: &quot;https://kubernetes.default&quot;\n        namespace: &quot;jenkins&quot;\n        credentialsId: &quot;kubernetes-token&quot;\n        jenkinsUrl: &quot;http://jenkins.jenkins.svc.cluster.local:8080&quot;\n        containerCapStr: &quot;10&quot;\n        templates:\n          - name: &quot;jenkins-agent&quot;\n            namespace: &quot;jenkins&quot;\n            label: &quot;kubernetes&quot;\n            containers:\n              - name: &quot;jnlp&quot;\n                image: &quot;jenkins/inbound-agent:latest&quot;\n                workingDir: &quot;/home/jenkins/agent&quot;\n                resourceRequestCpu: &quot;100m&quot;\n                resourceRequestMemory: &quot;256Mi&quot;\n                resourceLimitCpu: &quot;500m&quot;\n                resourceLimitMemory: &quot;1Gi&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"ldapactive-directory-integration\" class=\"mobile-header\">LDAP/Active Directory Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">jenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ad.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          inhibitInferRootDN: false\n          userSearchBase: &quot;OU=Users,OU=Company&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups,OU=Company&quot;\n          groupSearchFilter: &quot;(&amp;(objectClass=group)(cn={0}))&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-service-password&quot;\n          displayNameAttributeName: &quot;displayName&quot;\n          mailAddressAttributeName: &quot;mail&quot;\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;administrators&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;Domain Admins&quot;\n              - &quot;Jenkins Admins&quot;\n        items:\n          - name: &quot;developers&quot;\n            pattern: &quot;.*&quot;\n            permissions:\n              - &quot;Job/Build&quot;\n              - &quot;Job/Cancel&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;Development Team&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Jenkins Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://jenkins.io/projects/jcasc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Configuration as Code</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/pipeline/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Pipeline Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://plugins.jenkins.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Plugin Index</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/community/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/jenkinsci/jenkins\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins GitHub Repository</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"38 min","wordCount":7477,"lastBuilt":"2025-09-14T06:13:01.301Z"},{"name":"jupyter","displayName":"Jupyter","slug":"jupyter","description":"Repo for jupyter","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jupyter","updatedAt":"2025-09-08T03:09:39Z","createdAt":"2025-09-08T03:09:29Z","readmeRaw":"## 👋 Welcome to jupyter 🚀  \n\njupyter README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-jupyter\" class=\"mobile-header\">👋 Welcome to jupyter 🚀  </h2>\n<p class=\"mobile-paragraph\">jupyter README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:20.503Z"},{"name":"libvirt","displayName":"Libvirt","slug":"libvirt","description":"Repo for libvirt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/libvirt","updatedAt":"2025-09-08T03:10:30Z","createdAt":"2023-08-28T03:48:25Z","readmeRaw":"# libvirt setup\n\n## [Archlinux](./ArchLinux.md)  \n  \n","readmeHtml":"<h1 id=\"libvirt-setup\" class=\"mobile-header\">libvirt setup</h1>\n<h2 id=\"archlinuxarchlinuxmd\" class=\"mobile-header\">[Archlinux](./ArchLinux.md)  </h2>","readTime":"1 min","wordCount":6,"lastBuilt":"2025-09-14T06:13:19.605Z"},{"name":"mce","displayName":"Mce","slug":"mce","description":"Repo for mce","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mce","updatedAt":"2025-09-08T03:10:56Z","createdAt":"2023-08-28T03:48:56Z","readmeRaw":"# CouchPotato/HeadPhones/SickRage/Plex/Emby install\n\n## CentOS/RedHat/SL 7\n\n```bash\nyum groupinstall -y \"Development Tools\"\nyum -y install curl gcc gettext git libmediainfo libzen mediainfo p7zip par2cmdline python-configobj sqlite tar unzip wget unrar\n\nmkdir -p /mnt/media /mnt/torrents\necho \"\n10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\n10.0.254.1:/mnt/Volume_1/torrents        /mnt/torrents                nfs defaults,rw 0 0\n\" >> /etc/fstab\nmount -a\n```\n\n### CouchPotato\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/couchpotato.git /var/lib/couchpotato\ngit clone https://git.casjay.in/systems/couchpotato.git /tmp/couchpotato\n\nmkdir -p /var/lib/couchpotato && cd /var/lib/couchpotato\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/couchpotato/bin/activate\n/var/lib/couchpotato/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/couchpotato/bin/python -m pip install -r /tmp/couchpotato/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/couchpotato/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable couchpotato couchpotato-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/couchpotato/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### HeadPhones\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/headphones.git /var/lib/headphones\ngit clone https://git.casjay.in/systems/headphones.git /tmp/headphones\n\nmkdir -p /var/lib/headphones && cd /var/lib/headphones\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/headphones/bin/activate\n/var/lib/headphones/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/headphones/bin/python -m pip install -r /tmp/headphones/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/headphones/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable headphones headphones-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/headphones/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### SickRage\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/sickrage.git /var/lib/sickrage\ngit clone https://git.casjay.in/systems/sickrage.git /tmp/sickrage\n\nmkdir -p /var/lib/sickrage && cd /var/lib/sickrage\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/sickrage/bin/activate\n/var/lib/sickrage/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/sickrage/bin/python -m pip install -r /tmp/sickrage/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/sickrage/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable sickrage sickrage-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/sickrage/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### Plex\n\n```bash\nyum install ffmpeg\nyum install -y https://downloads.plex.tv/plex-media-server/1.14.0.5470-9d51fdfaa/plexmediaserver-1.14.0.5470-9d51fdfaa.x86_64.rpm \ngo to http://yourserverip:32400/ and configure it\n\nOptional stats for plex [Tautulli]\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\ngit clone https://git.casjay.in/mirrors/Plex-Tautulli.git /var/lib/tautulli\ngit clone https://git.casjay.in/mirrors/plex.git /tmp/plex\ncp -Rf /tmp/plex/{etc,root,var}* /\n```\n\n### Emby\n\n```bash\nyum install ffmpeg\nyum install -y https://github.com/MediaBrowser/Emby.Releases/releases/download/3.5.3.0/emby-server-rpm_3.5.3.0_x86_64.rpm\ngo to http://yourserverip:8096/ and configure it\n\n```\n\n### Airsonic\n\n```bash\nmkdir -p /var/airsonic\nyum install java-1.8.0-openjdk-headless -y\nwget https://github.com/airsonic/airsonic/raw/main/contrib/airsonic.service -O /etc/systemd/system/airsonic.service\nwget https://github.com/airsonic/airsonic/releases/download/v10.1.2/airsonic.war -O /var/airsonic/airsonic.war\nmkdir -p /mnt/media\necho \" 10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\" >> /etc/fstab\nmount -a\n\n```\n","readmeHtml":"<h1 id=\"couchpotatoheadphonessickrageplexemby-install\" class=\"mobile-header\">CouchPotato/HeadPhones/SickRage/Plex/Emby install</h1>\n<h2 id=\"centosredhatsl-7\" class=\"mobile-header\">CentOS/RedHat/SL 7</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum groupinstall -y &quot;Development Tools&quot;\nyum -y install curl gcc gettext git libmediainfo libzen mediainfo p7zip par2cmdline python-configobj sqlite tar unzip wget unrar\n\nmkdir -p /mnt/media /mnt/torrents\necho &quot;\n10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\n10.0.254.1:/mnt/Volume_1/torrents        /mnt/torrents                nfs defaults,rw 0 0\n&quot; &gt;&gt; /etc/fstab\nmount -a</code></pre>\n      </div>\n    </div>\n<h3 id=\"couchpotato\" class=\"mobile-header\">CouchPotato</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/couchpotato.git /var/lib/couchpotato\ngit clone https://git.casjay.in/systems/couchpotato.git /tmp/couchpotato\n\nmkdir -p /var/lib/couchpotato &amp;&amp; cd /var/lib/couchpotato\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/couchpotato/bin/activate\n/var/lib/couchpotato/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/couchpotato/bin/python -m pip install -r /tmp/couchpotato/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/couchpotato/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable couchpotato couchpotato-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/couchpotato/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"headphones\" class=\"mobile-header\">HeadPhones</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/headphones.git /var/lib/headphones\ngit clone https://git.casjay.in/systems/headphones.git /tmp/headphones\n\nmkdir -p /var/lib/headphones &amp;&amp; cd /var/lib/headphones\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/headphones/bin/activate\n/var/lib/headphones/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/headphones/bin/python -m pip install -r /tmp/headphones/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/headphones/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable headphones headphones-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/headphones/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"sickrage\" class=\"mobile-header\">SickRage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/sickrage.git /var/lib/sickrage\ngit clone https://git.casjay.in/systems/sickrage.git /tmp/sickrage\n\nmkdir -p /var/lib/sickrage &amp;&amp; cd /var/lib/sickrage\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/sickrage/bin/activate\n/var/lib/sickrage/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/sickrage/bin/python -m pip install -r /tmp/sickrage/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/sickrage/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable sickrage sickrage-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/sickrage/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"plex\" class=\"mobile-header\">Plex</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install ffmpeg\nyum install -y https://downloads.plex.tv/plex-media-server/1.14.0.5470-9d51fdfaa/plexmediaserver-1.14.0.5470-9d51fdfaa.x86_64.rpm \ngo to http://yourserverip:32400/ and configure it\n\nOptional stats for plex [Tautulli]\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\ngit clone https://git.casjay.in/mirrors/Plex-Tautulli.git /var/lib/tautulli\ngit clone https://git.casjay.in/mirrors/plex.git /tmp/plex\ncp -Rf /tmp/plex/{etc,root,var}* /</code></pre>\n      </div>\n    </div>\n<h3 id=\"emby\" class=\"mobile-header\">Emby</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install ffmpeg\nyum install -y https://github.com/MediaBrowser/Emby.Releases/releases/download/3.5.3.0/emby-server-rpm_3.5.3.0_x86_64.rpm\ngo to http://yourserverip:8096/ and configure it\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"airsonic\" class=\"mobile-header\">Airsonic</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">mkdir -p /var/airsonic\nyum install java-1.8.0-openjdk-headless -y\nwget https://github.com/airsonic/airsonic/raw/main/contrib/airsonic.service -O /etc/systemd/system/airsonic.service\nwget https://github.com/airsonic/airsonic/releases/download/v10.1.2/airsonic.war -O /var/airsonic/airsonic.war\nmkdir -p /mnt/media\necho &quot; 10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0&quot; &gt;&gt; /etc/fstab\nmount -a\n</code></pre>\n      </div>\n    </div>","readTime":"3 min","wordCount":448,"lastBuilt":"2025-09-14T06:13:18.956Z"},{"name":"minecraft-server","displayName":"Minecraft Server","slug":"minecraft-server","description":"Repo for minecraft-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minecraft-server","updatedAt":"2025-09-08T03:11:10Z","createdAt":"2025-09-08T03:10:59Z","readmeRaw":"## 👋 Welcome to minecraft-server 🚀  \n\nminecraft-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minecraft-server\" class=\"mobile-header\">👋 Welcome to minecraft-server 🚀  </h2>\n<p class=\"mobile-paragraph\">minecraft-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:18.660Z"},{"name":"minio","displayName":"Minio","slug":"minio","description":"Repo for minio","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minio","updatedAt":"2025-09-14T01:30:32Z","createdAt":"2025-09-08T03:11:29Z","readmeRaw":"# MinIO Installation Guide\n\nHigh-performance S3-compatible object storage server designed for cloud-native applications. Essential for modern data infrastructure with enterprise-grade security and multi-cloud compatibility.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for production\n- Multiple drives/volumes for distributed deployment\n- Network connectivity for cluster configuration\n\n## Installation\n\n### Single Node Deployment\n```bash\n# Create MinIO user\nsudo useradd --system --shell /bin/false minio\n\n# Create data directories\nsudo mkdir -p /opt/minio/{bin,data,certs}\nsudo chown -R minio:minio /opt/minio\n\n# Download MinIO server\ncd /tmp\nwget https://dl.min.io/server/minio/release/linux-amd64/minio\nchmod +x minio\nsudo mv minio /opt/minio/bin/\n\n# Create MinIO configuration\nsudo tee /etc/default/minio > /dev/null <<EOF\n# MinIO Configuration\nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=MinIOSecurePassword2024!\nMINIO_VOLUMES=\"/opt/minio/data\"\nMINIO_OPTS=\"--certs-dir /opt/minio/certs --console-address :9001\"\nMINIO_SERVER_URL=\"https://minio.example.com:9000\"\nMINIO_BROWSER_REDIRECT_URL=\"https://minio.example.com:9001\"\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/minio.service > /dev/null <<EOF\n[Unit]\nDescription=MinIO Object Storage Server\nDocumentation=https://docs.min.io\nWants=network-online.target\nAfter=network-online.target\nAssertFileIsExecutable=/opt/minio/bin/minio\n\n[Service]\nType=notify\nUser=minio\nGroup=minio\nEnvironmentFile=/etc/default/minio\nExecStart=/opt/minio/bin/minio server \\$MINIO_OPTS \\$MINIO_VOLUMES\nRestart=always\nLimitNOFILE=65536\nTasksMax=infinity\nTimeoutStopSec=infinity\nSendSIGKILL=no\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nReadWritePaths=/opt/minio\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now minio\n```\n\n### Distributed Deployment (4 Nodes)\n```bash\n# Configure for distributed deployment\n# Run on each node (adjust IP addresses):\n\nsudo tee /etc/default/minio > /dev/null <<EOF\nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=MinIOSecurePassword2024!\nMINIO_VOLUMES=\"https://minio-{1...4}.example.com:9000/opt/minio/data{1...4}\"\nMINIO_OPTS=\"--certs-dir /opt/minio/certs --console-address :9001\"\nMINIO_SERVER_URL=\"https://minio.example.com:9000\"\nEOF\n\n# Create multiple data directories on each node\nsudo mkdir -p /opt/minio/data{1..4}\nsudo chown -R minio:minio /opt/minio/data*\n\nsudo systemctl restart minio\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n```bash\n# Generate SSL certificates\nsudo mkdir -p /opt/minio/certs\n\n# Self-signed certificate for testing\nsudo openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=minio.example.com\" \\\n  -keyout /opt/minio/certs/private.key \\\n  -out /opt/minio/certs/public.crt\n\n# Production: Use Let's Encrypt or proper CA certificates\nsudo cp /etc/letsencrypt/live/minio.example.com/fullchain.pem /opt/minio/certs/public.crt\nsudo cp /etc/letsencrypt/live/minio.example.com/privkey.pem /opt/minio/certs/private.key\n\nsudo chown -R minio:minio /opt/minio/certs\nsudo chmod 600 /opt/minio/certs/private.key\n```\n\n### Access Control and Policies\n```bash\n# Install MinIO Client (mc)\nwget https://dl.min.io/client/mc/release/linux-amd64/mc\nchmod +x mc\nsudo mv mc /usr/local/bin/\n\n# Configure MinIO client\nmc alias set local https://localhost:9000 admin MinIOSecurePassword2024!\n\n# Create users and policies\ncat > /tmp/readonly-policy.json <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::*/*\",\n        \"arn:aws:s3:::*\"\n      ]\n    }\n  ]\n}\nEOF\n\ncat > /tmp/readwrite-policy.json <<EOF\n{\n  \"Version\": \"2012-10-17\", \n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::app-data/*\",\n        \"arn:aws:s3:::app-data\"\n      ]\n    }\n  ]\n}\nEOF\n\n# Create policies\nmc admin policy create local readonly /tmp/readonly-policy.json\nmc admin policy create local readwrite /tmp/readwrite-policy.json\n\n# Create users\nmc admin user add local appuser AppUserSecurePassword2024!\nmc admin policy attach local readwrite --user appuser\n\nmc admin user add local readonly ReadOnlyUserPassword2024!\nmc admin policy attach local readonly --user readonly\n```\n\n## Backup and Monitoring\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/minio-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/minio-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active minio >/dev/null; then\n    log_message \"✓ MinIO service running\"\nelse\n    log_message \"✗ MinIO service not running\"\nfi\n\n# Check API health\nif curl -f https://localhost:9000/minio/health/live >/dev/null 2>&1; then\n    log_message \"✓ MinIO API responding\"\nelse\n    log_message \"✗ MinIO API not responding\"\nfi\n\n# Check cluster status (if distributed)\nmc admin info local >/dev/null 2>&1\nif [ $? -eq 0 ]; then\n    log_message \"✓ MinIO cluster healthy\"\nelse\n    log_message \"⚠ MinIO cluster issues\"\nfi\n\nlog_message \"MinIO health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/minio-health.sh\necho \"*/10 * * * * root /usr/local/bin/minio-health.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [MinIO Documentation](https://docs.min.io/)\n- [MinIO Administration Guide](https://docs.min.io/minio/baremetal/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"minio-installation-guide\" class=\"mobile-header\">MinIO Installation Guide</h1>\n<p class=\"mobile-paragraph\">High-performance S3-compatible object storage server designed for cloud-native applications. Essential for modern data infrastructure with enterprise-grade security and multi-cloud compatibility.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">Multiple drives/volumes for distributed deployment</li>\n<li class=\"mobile-list-item\">Network connectivity for cluster configuration</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"single-node-deployment\" class=\"mobile-header\">Single Node Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create MinIO user\nsudo useradd --system --shell /bin/false minio\n\n# Create data directories\nsudo mkdir -p /opt/minio/{bin,data,certs}\nsudo chown -R minio:minio /opt/minio\n\n# Download MinIO server\ncd /tmp\nwget https://dl.min.io/server/minio/release/linux-amd64/minio\nchmod +x minio\nsudo mv minio /opt/minio/bin/\n\n# Create MinIO configuration\nsudo tee /etc/default/minio &gt; /dev/null &lt;&lt;EOF\n# MinIO Configuration\nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=MinIOSecurePassword2024!\nMINIO_VOLUMES=&quot;/opt/minio/data&quot;\nMINIO_OPTS=&quot;--certs-dir /opt/minio/certs --console-address :9001&quot;\nMINIO_SERVER_URL=&quot;https://minio.example.com:9000&quot;\nMINIO_BROWSER_REDIRECT_URL=&quot;https://minio.example.com:9001&quot;\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/minio.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=MinIO Object Storage Server\nDocumentation=https://docs.min.io\nWants=network-online.target\nAfter=network-online.target\nAssertFileIsExecutable=/opt/minio/bin/minio\n\n[Service]\nType=notify\nUser=minio\nGroup=minio\nEnvironmentFile=/etc/default/minio\nExecStart=/opt/minio/bin/minio server \\$MINIO_OPTS \\$MINIO_VOLUMES\nRestart=always\nLimitNOFILE=65536\nTasksMax=infinity\nTimeoutStopSec=infinity\nSendSIGKILL=no\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nReadWritePaths=/opt/minio\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now minio</code></pre>\n      </div>\n    </div>\n<h3 id=\"distributed-deployment-4-nodes\" class=\"mobile-header\">Distributed Deployment (4 Nodes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure for distributed deployment\n# Run on each node (adjust IP addresses):\n\nsudo tee /etc/default/minio &gt; /dev/null &lt;&lt;EOF\nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=MinIOSecurePassword2024!\nMINIO_VOLUMES=&quot;https://minio-{1...4}.example.com:9000/opt/minio/data{1...4}&quot;\nMINIO_OPTS=&quot;--certs-dir /opt/minio/certs --console-address :9001&quot;\nMINIO_SERVER_URL=&quot;https://minio.example.com:9000&quot;\nEOF\n\n# Create multiple data directories on each node\nsudo mkdir -p /opt/minio/data{1..4}\nsudo chown -R minio:minio /opt/minio/data*\n\nsudo systemctl restart minio</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo mkdir -p /opt/minio/certs\n\n# Self-signed certificate for testing\nsudo openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=minio.example.com&quot; \\\n  -keyout /opt/minio/certs/private.key \\\n  -out /opt/minio/certs/public.crt\n\n# Production: Use Let&#039;s Encrypt or proper CA certificates\nsudo cp /etc/letsencrypt/live/minio.example.com/fullchain.pem /opt/minio/certs/public.crt\nsudo cp /etc/letsencrypt/live/minio.example.com/privkey.pem /opt/minio/certs/private.key\n\nsudo chown -R minio:minio /opt/minio/certs\nsudo chmod 600 /opt/minio/certs/private.key</code></pre>\n      </div>\n    </div>\n<h3 id=\"access-control-and-policies\" class=\"mobile-header\">Access Control and Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MinIO Client (mc)\nwget https://dl.min.io/client/mc/release/linux-amd64/mc\nchmod +x mc\nsudo mv mc /usr/local/bin/\n\n# Configure MinIO client\nmc alias set local https://localhost:9000 admin MinIOSecurePassword2024!\n\n# Create users and policies\ncat &gt; /tmp/readonly-policy.json &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Action&quot;: [\n        &quot;s3:GetObject&quot;,\n        &quot;s3:ListBucket&quot;\n      ],\n      &quot;Resource&quot;: [\n        &quot;arn:aws:s3:::*/*&quot;,\n        &quot;arn:aws:s3:::*&quot;\n      ]\n    }\n  ]\n}\nEOF\n\ncat &gt; /tmp/readwrite-policy.json &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;, \n  &quot;Statement&quot;: [\n    {\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Action&quot;: [\n        &quot;s3:*&quot;\n      ],\n      &quot;Resource&quot;: [\n        &quot;arn:aws:s3:::app-data/*&quot;,\n        &quot;arn:aws:s3:::app-data&quot;\n      ]\n    }\n  ]\n}\nEOF\n\n# Create policies\nmc admin policy create local readonly /tmp/readonly-policy.json\nmc admin policy create local readwrite /tmp/readwrite-policy.json\n\n# Create users\nmc admin user add local appuser AppUserSecurePassword2024!\nmc admin policy attach local readwrite --user appuser\n\nmc admin user add local readonly ReadOnlyUserPassword2024!\nmc admin policy attach local readonly --user readonly</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-monitoring\" class=\"mobile-header\">Backup and Monitoring</h2>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/minio-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/minio-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active minio &gt;/dev/null; then\n    log_message &quot;✓ MinIO service running&quot;\nelse\n    log_message &quot;✗ MinIO service not running&quot;\nfi\n\n# Check API health\nif curl -f https://localhost:9000/minio/health/live &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ MinIO API responding&quot;\nelse\n    log_message &quot;✗ MinIO API not responding&quot;\nfi\n\n# Check cluster status (if distributed)\nmc admin info local &gt;/dev/null 2&gt;&amp;1\nif [ $? -eq 0 ]; then\n    log_message &quot;✓ MinIO cluster healthy&quot;\nelse\n    log_message &quot;⚠ MinIO cluster issues&quot;\nfi\n\nlog_message &quot;MinIO health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/minio-health.sh\necho &quot;*/10 * * * * root /usr/local/bin/minio-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.min.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MinIO Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.min.io/minio/baremetal/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MinIO Administration Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":587,"lastBuilt":"2025-09-14T06:13:05.681Z"},{"name":"nexus","displayName":"Nexus","slug":"nexus","description":"Repo for nexus","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nexus","updatedAt":"2025-09-08T03:12:24Z","createdAt":"2025-09-08T03:12:14Z","readmeRaw":"## 👋 Welcome to nexus 🚀  \n\nnexus README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-nexus\" class=\"mobile-header\">👋 Welcome to nexus 🚀  </h2>\n<p class=\"mobile-paragraph\">nexus README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:17.457Z"},{"name":"nodejs","displayName":"Node.js","slug":"nodejs","description":"Repo for nodejs","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nodejs","updatedAt":"2025-09-14T01:30:41Z","createdAt":"2023-08-28T03:49:17Z","readmeRaw":"# Node.js Installation Guide\n\nJavaScript runtime built on Chrome's V8 JavaScript engine. Essential platform for modern web applications, APIs, and microservices with enterprise-grade performance and security features.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 2GB RAM minimum, 4GB+ recommended for production\n- curl or wget for package downloads\n- Git for source code management\n\n## Installation\n\n### Using NVM (Recommended for Development)\n```bash\n# Download and install NVM (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n\n# Reload shell profile\nsource ~/.bashrc\n\n# Install latest LTS version (recommended for production)\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install 20.10.0  # Latest LTS as of 2024\nnvm use 20.10.0\n\n# Set default version\nnvm alias default 20.10.0\n\n# Verify installation\nnode --version\nnpm --version\n\n# List available versions\nnvm list-remote --lts\nnvm list\n```\n\n### Ubuntu/Debian (Package Manager)\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Method 1: Install from Ubuntu repositories (older version)\nsudo apt install -y nodejs npm\n\n# Method 2: Install from NodeSource repository (latest LTS)\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Install build tools for native modules\nsudo apt install -y build-essential python3-dev\n\n# Verify installation\nnode --version\nnpm --version\n\n# Update npm to latest version\nsudo npm install -g npm@latest\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Enable EPEL repository\nsudo yum install -y epel-release\n\n# Method 1: Install from EPEL (may be older)\nsudo yum install -y nodejs npm\n\n# Method 2: Install from NodeSource (recommended)\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo yum install -y nodejs\n\n# Install development tools\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Fedora\n```bash\n# Install Node.js from official repositories\nsudo dnf install -y nodejs npm\n\n# Or install from NodeSource for latest LTS\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo dnf install -y nodejs\n\n# Install development tools\nsudo dnf groupinstall -y \"Development Tools\"\nsudo dnf install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Arch Linux\n```bash\n# Install Node.js and npm\nsudo pacman -Syu nodejs npm\n\n# Install base-devel for building native modules\nsudo pacman -S base-devel python\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Docker Installation\n```bash\n# Create Node.js application structure\nmkdir -p ~/nodejs-app/{src,config,logs,node_modules}\ncd ~/nodejs-app\n\n# Create production Dockerfile\ncat > Dockerfile <<EOF\n# Multi-stage build for production\nFROM node:20-alpine AS builder\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies (including dev dependencies)\nRUN npm ci --only=production\n\n# Production stage\nFROM node:20-alpine AS production\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nodejs -u 1001\n\n# Set working directory\nWORKDIR /usr/src/app\n\n# Copy node_modules from builder stage\nCOPY --from=builder /usr/src/app/node_modules ./node_modules\n\n# Copy application code\nCOPY --chown=nodejs:nodejs . .\n\n# Remove unnecessary files\nRUN rm -f .dockerignore Dockerfile* README.md\n\n# Security: Run as non-root user\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\n# Start application\nCMD [\"node\", \"server.js\"]\nEOF\n\n# Create .dockerignore\ncat > .dockerignore <<EOF\nnode_modules\nnpm-debug.log\nDockerfile*\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.npm\n.coverage\n.jest\n.cache\nEOF\n\n# Create production docker-compose.yml\ncat > docker-compose.prod.yml <<EOF\nversion: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      target: production\n    restart: unless-stopped\n    ports:\n      - \"127.0.0.1:3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - PORT=3000\n    volumes:\n      - ./logs:/usr/src/app/logs\n    networks:\n      - app-network\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n    healthcheck:\n      test: [\"CMD\", \"node\", \"healthcheck.js\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n\n  nginx:\n    image: nginx:alpine\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - app\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\nEOF\n\ndocker-compose -f docker-compose.prod.yml up -d\n```\n\n## Production Configuration\n\n### PM2 Process Manager (Production Standard)\n```bash\n# Install PM2 globally\nsudo npm install -g pm2\n\n# Create PM2 ecosystem configuration\ncat > ecosystem.config.js <<EOF\nmodule.exports = {\n  apps: [{\n    name: 'node-app',\n    script: './server.js',\n    instances: 'max',  // Use all CPU cores\n    exec_mode: 'cluster',\n    \n    // Performance settings\n    max_memory_restart: '1G',\n    node_args: '--max-old-space-size=1024',\n    \n    // Environment variables\n    env: {\n      NODE_ENV: 'development',\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    \n    // Logging\n    log_file: './logs/app.log',\n    out_file: './logs/out.log',\n    error_file: './logs/error.log',\n    log_date_format: 'YYYY-MM-DD HH:mm:ss Z',\n    merge_logs: true,\n    \n    // Monitoring\n    monitoring: true,\n    pmx: true,\n    \n    // Auto-restart settings\n    autorestart: true,\n    watch: false,  // Disable in production\n    max_restarts: 10,\n    min_uptime: '10s',\n    \n    // Instance settings\n    instance_var: 'INSTANCE_ID',\n    \n    // Source map support\n    source_map_support: true,\n    \n    // Graceful shutdown\n    kill_timeout: 5000,\n    listen_timeout: 8000,\n    \n    // Health checking\n    health_check_grace_period: 3000\n  }],\n  \n  // Deployment configuration\n  deploy: {\n    production: {\n      user: 'nodejs',\n      host: ['app1.example.com', 'app2.example.com'],\n      ref: 'origin/main',\n      repo: 'git@github.com:username/repository.git',\n      path: '/var/www/production',\n      'post-deploy': 'npm install && pm2 reload ecosystem.config.js --env production',\n      'pre-setup': 'apt update -y; apt install git -y'\n    },\n    staging: {\n      user: 'nodejs',\n      host: 'staging.example.com',\n      ref: 'origin/develop',\n      repo: 'git@github.com:username/repository.git',\n      path: '/var/www/staging',\n      'post-deploy': 'npm install && pm2 reload ecosystem.config.js --env staging'\n    }\n  }\n};\nEOF\n\n# Start application with PM2\npm2 start ecosystem.config.js --env production\n\n# Save PM2 configuration\npm2 save\n\n# Generate startup script\npm2 startup\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $USER --hp $HOME\n\n# Monitor application\npm2 status\npm2 logs\npm2 monit\n```\n\n### NGINX Reverse Proxy Configuration\n```bash\n# Create NGINX configuration for Node.js applications\nsudo tee /etc/nginx/sites-available/nodejs-app > /dev/null <<EOF\n# Node.js Application NGINX Configuration\n\nupstream nodejs_backend {\n    least_conn;\n    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;\n    # Add more servers for load balancing:\n    # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;\n    # server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;\n    keepalive 64;\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name app.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=api_limit:10m rate=10r/s;\n    limit_req zone=api_limit burst=20 nodelay;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    location / {\n        proxy_pass http://nodejs_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n        \n        # Buffer settings\n        proxy_buffer_size 4k;\n        proxy_buffers 4 4k;\n    }\n\n    # Static assets caching\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\\$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        access_log off;\n    }\n\n    # API rate limiting (stricter)\n    location /api/ {\n        limit_req zone=api_limit burst=10 nodelay;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n### SystemD Service (Alternative to PM2)\n```bash\n# Create systemd service for Node.js application\nsudo tee /etc/systemd/system/nodejs-app.service > /dev/null <<EOF\n[Unit]\nDescription=Node.js Application\nDocumentation=https://nodejs.org/\nAfter=network.target\n\n[Service]\nType=simple\nUser=nodejs\nGroup=nodejs\nWorkingDirectory=/var/www/nodejs-app\nExecStart=/usr/bin/node server.js\nExecReload=/bin/kill -SIGUSR2 \\$MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=nodejs-app\n\n# Environment variables\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/www/nodejs-app/logs /var/www/nodejs-app/uploads\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=2G\nCPUQuota=200%\nTasksMax=4096\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create nodejs user\nsudo useradd --system --shell /bin/false --home /var/www/nodejs-app nodejs\n\n# Set up application directory\nsudo mkdir -p /var/www/nodejs-app/{logs,uploads}\nsudo chown -R nodejs:nodejs /var/www/nodejs-app\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nodejs-app\n```\n\n## Security Hardening\n\n### Application Security Best Practices\n```bash\n# Create secure application template\nmkdir -p ~/secure-nodejs-app\ncd ~/secure-nodejs-app\n\n# Create package.json with security-focused dependencies\ncat > package.json <<EOF\n{\n  \"name\": \"secure-nodejs-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Secure Node.js application template\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\",\n    \"test\": \"jest\",\n    \"security:audit\": \"npm audit\",\n    \"security:check\": \"nsp check\",\n    \"lint\": \"eslint .\",\n    \"format\": \"prettier --write .\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"helmet\": \"^7.1.0\",\n    \"cors\": \"^2.8.5\",\n    \"express-rate-limit\": \"^7.1.5\",\n    \"express-validator\": \"^7.0.1\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"mongoose\": \"^8.0.3\",\n    \"dotenv\": \"^16.3.1\",\n    \"compression\": \"^1.7.4\",\n    \"morgan\": \"^1.10.0\",\n    \"winston\": \"^3.11.0\",\n    \"hpp\": \"^0.2.3\",\n    \"express-mongo-sanitize\": \"^2.2.0\",\n    \"xss\": \"^1.0.14\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\",\n    \"jest\": \"^29.7.0\",\n    \"eslint\": \"^8.55.0\",\n    \"prettier\": \"^3.1.0\",\n    \"nsp\": \"^3.2.1\"\n  },\n  \"engines\": {\n    \"node\": \">=20.0.0\",\n    \"npm\": \">=9.0.0\"\n  }\n}\nEOF\n\n# Create secure server template\ncat > server.js <<'EOF'\n'use strict';\n\nconst express = require('express');\nconst helmet = require('helmet');\nconst cors = require('cors');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss');\nconst compression = require('compression');\nconst morgan = require('morgan');\nconst winston = require('winston');\nconst hpp = require('hpp');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['https://example.com'],\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.',\n  standardHeaders: true,\n  legacyHeaders: false\n});\napp.use(limiter);\n\n// API rate limiting (stricter)\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 50,\n  message: 'Too many API requests from this IP'\n});\napp.use('/api/', apiLimiter);\n\n// Body parsing with size limits\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Security sanitization\napp.use(mongoSanitize());\napp.use(hpp()); // Prevent HTTP Parameter Pollution\n\n// Compression\napp.use(compression());\n\n// Logging\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/combined.log' })\n  ]\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\n// Request logging\napp.use(morgan('combined', {\n  stream: { write: message => logger.info(message.trim()) }\n}));\n\n// Input validation middleware\nconst validateInput = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    version: process.version\n  });\n});\n\n// API routes with validation\napp.post('/api/users', [\n  body('email').isEmail().normalizeEmail(),\n  body('name').trim().escape().isLength({ min: 2, max: 50 }),\n  body('password').isLength({ min: 12 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])/),\n  validateInput\n], (req, res) => {\n  try {\n    // Sanitize input\n    const sanitizedBody = {\n      email: xss(req.body.email),\n      name: xss(req.body.name),\n      password: req.body.password // Don't sanitize password, just validate\n    };\n    \n    // Process request\n    res.json({ success: true, message: 'User created successfully' });\n  } catch (error) {\n    logger.error('Error creating user:', error);\n    res.status(500).json({ success: false, message: 'Internal server error' });\n  }\n});\n\n// Error handling middleware\napp.use((error, req, res, next) => {\n  logger.error('Unhandled error:', error);\n  \n  res.status(error.status || 500).json({\n    success: false,\n    message: process.env.NODE_ENV === 'production' \n      ? 'Something went wrong!' \n      : error.message\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    success: false,\n    message: 'Route not found'\n  });\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  logger.info('SIGTERM signal received: closing HTTP server');\n  server.close(() => {\n    logger.info('HTTP server closed');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGINT', () => {\n  logger.info('SIGINT signal received: closing HTTP server');\n  server.close(() => {\n    logger.info('HTTP server closed');\n    process.exit(0);\n  });\n});\n\n// Unhandled promise rejection handling\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  process.exit(1);\n});\n\n// Uncaught exception handling\nprocess.on('uncaughtException', (error) => {\n  logger.error('Uncaught Exception thrown:', error);\n  process.exit(1);\n});\n\nconst server = app.listen(PORT, '127.0.0.1', () => {\n  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\n});\n\nmodule.exports = app;\nEOF\n\n# Create healthcheck script for Docker\ncat > healthcheck.js <<EOF\nconst http = require('http');\n\nconst options = {\n  hostname: 'localhost',\n  port: process.env.PORT || 3000,\n  path: '/health',\n  method: 'GET',\n  timeout: 2000\n};\n\nconst req = http.request(options, (res) => {\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\n\nreq.on('error', () => {\n  process.exit(1);\n});\n\nreq.end();\nEOF\n\n# Install dependencies\nnpm install\n```\n\n### Environment Configuration\n```bash\n# Create secure environment configuration\ncat > .env.example <<EOF\n# Node.js Application Environment Configuration\n\n# Application settings\nNODE_ENV=production\nPORT=3000\nHOST=127.0.0.1\n\n# Database connection\nDATABASE_URL=mongodb://username:password@localhost:27017/myapp?authSource=admin\n# Or PostgreSQL: postgresql://username:password@localhost:5432/myapp\n\n# Security keys (generate with: openssl rand -base64 32)\nJWT_SECRET=your_jwt_secret_here_32_characters_minimum\nSESSION_SECRET=your_session_secret_here_32_characters_minimum\nENCRYPTION_KEY=your_encryption_key_here_32_characters\n\n# CORS settings\nALLOWED_ORIGINS=https://example.com,https://app.example.com\n\n# Email configuration (for notifications)\nSMTP_HOST=smtp.example.com\nSMTP_PORT=587\nSMTP_USER=app@example.com\nSMTP_PASS=smtp_password\n\n# Rate limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX=100\n\n# File upload settings\nMAX_FILE_SIZE=10485760\nUPLOAD_PATH=/var/www/nodejs-app/uploads\n\n# Monitoring\nENABLE_MONITORING=true\nLOG_LEVEL=info\n\n# Security settings\nBCRYPT_ROUNDS=12\nJWT_EXPIRY=24h\nSESSION_TIMEOUT=3600000\n\n# External APIs\nEXTERNAL_API_KEY=your_api_key_here\nEXTERNAL_API_URL=https://api.external-service.com\n\n# Redis configuration (for sessions/caching)\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=redis_password\n\n# Health check settings\nHEALTH_CHECK_INTERVAL=30000\nEOF\n\n# Create production environment file\ncp .env.example .env\necho \".env\" >> .gitignore\n\n# Set secure permissions\nchmod 600 .env\n```\n\n## Performance Optimization\n\n### Node.js Performance Tuning\n```bash\n# Create performance optimization script\nsudo tee /usr/local/bin/nodejs-optimize.sh > /dev/null <<'EOF'\n#!/bin/bash\n\necho \"Optimizing Node.js application performance...\"\n\n# System-level optimizations\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<LIMITS\nnodejs soft nofile 65535\nnodejs hard nofile 65535\nnodejs soft nproc 65535\nnodejs hard nproc 65535\nLIMITS\n\n# Kernel optimizations for Node.js\nsudo tee -a /etc/sysctl.conf > /dev/null <<SYSCTL\n# Node.js optimizations\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\nvm.swappiness = 1\nSYSCTL\n\nsudo sysctl -p\n\n# PM2 optimization for clustering\nif command -v pm2 >/dev/null 2>&1; then\n    # Update PM2 configuration for performance\n    pm2 delete all 2>/dev/null || true\n    \n    cat > /tmp/ecosystem-optimized.config.js <<PM2CONFIG\nmodule.exports = {\n  apps: [{\n    name: 'nodejs-app-optimized',\n    script: './server.js',\n    instances: 'max',\n    exec_mode: 'cluster',\n    \n    // V8 optimizations\n    node_args: [\n      '--max-old-space-size=2048',\n      '--optimize-for-size',\n      '--gc-interval=100',\n      '--expose-gc'\n    ],\n    \n    // Performance settings\n    max_memory_restart: '2G',\n    min_uptime: '10s',\n    max_restarts: 5,\n    \n    // Environment\n    env_production: {\n      NODE_ENV: 'production',\n      UV_THREADPOOL_SIZE: 16\n    }\n  }]\n};\nPM2CONFIG\n    \n    pm2 start /tmp/ecosystem-optimized.config.js --env production\n    pm2 save\nfi\n\necho \"Node.js optimization completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-optimize.sh\n```\n\n### Monitoring and Logging\n```bash\n# Create Node.js monitoring script\nsudo tee /usr/local/bin/nodejs-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/nodejs-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# Check if PM2 is managing processes\nif command -v pm2 >/dev/null 2>&1; then\n    PM2_STATUS=$(pm2 jlist | jq -r '.[].pm2_env.status' 2>/dev/null)\n    if echo \"$PM2_STATUS\" | grep -q \"online\"; then\n        log_message \"✓ PM2 processes are running\"\n        \n        # Check memory usage\n        PM2_MEMORY=$(pm2 jlist | jq -r '.[].monit.memory' 2>/dev/null | awk '{sum += $1} END {print sum/1024/1024}')\n        log_message \"ℹ PM2 total memory usage: ${PM2_MEMORY}MB\"\n        \n        # Check CPU usage\n        PM2_CPU=$(pm2 jlist | jq -r '.[].monit.cpu' 2>/dev/null | awk '{sum += $1} END {print sum}')\n        log_message \"ℹ PM2 total CPU usage: ${PM2_CPU}%\"\n    else\n        log_message \"⚠ PM2 processes not online\"\n    fi\nfi\n\n# Check systemd service (if not using PM2)\nif systemctl is-active nodejs-app >/dev/null 2>&1; then\n    log_message \"✓ Node.js systemd service is running\"\nelse\n    log_message \"ℹ Node.js systemd service not active (may be using PM2)\"\nfi\n\n# Check application health endpoint\nif curl -f http://localhost:3000/health >/dev/null 2>&1; then\n    log_message \"✓ Application health endpoint responding\"\n    \n    # Get detailed health info\n    HEALTH_DATA=$(curl -s http://localhost:3000/health)\n    UPTIME=$(echo \"$HEALTH_DATA\" | jq -r '.uptime' 2>/dev/null)\n    MEMORY_USED=$(echo \"$HEALTH_DATA\" | jq -r '.memory.rss' 2>/dev/null)\n    \n    if [ -n \"$UPTIME\" ]; then\n        log_message \"ℹ Application uptime: ${UPTIME}s\"\n    fi\n    if [ -n \"$MEMORY_USED\" ]; then\n        MEMORY_MB=$((MEMORY_USED / 1024 / 1024))\n        log_message \"ℹ Application memory: ${MEMORY_MB}MB\"\n    fi\nelse\n    log_message \"✗ Application health endpoint not responding\"\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node --version 2>/dev/null)\nif [ -n \"$NODE_VERSION\" ]; then\n    log_message \"ℹ Node.js version: ${NODE_VERSION}\"\nfi\n\n# Check npm security audit\nif [ -f \"package.json\" ]; then\n    AUDIT_RESULT=$(npm audit --audit-level high --json 2>/dev/null)\n    VULNERABILITIES=$(echo \"$AUDIT_RESULT\" | jq -r '.metadata.vulnerabilities.total' 2>/dev/null)\n    if [ -n \"$VULNERABILITIES\" ] && [ \"$VULNERABILITIES\" -gt 0 ]; then\n        log_message \"⚠ ${VULNERABILITIES} security vulnerabilities found\"\n    else\n        log_message \"✓ No high/critical security vulnerabilities\"\n    fi\nfi\n\nlog_message \"Node.js monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/nodejs-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## Backup and Deployment\n\n### Application Backup Strategy\n```bash\nsudo tee /usr/local/bin/nodejs-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/nodejs\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{app,config,logs}\n\necho \"Starting Node.js application backup...\"\n\n# Backup application code and dependencies\ntar --exclude='node_modules' --exclude='logs/*' --exclude='.git' \\\n    -czf ${BACKUP_DIR}/app/nodejs-app-${DATE}.tar.gz \\\n    -C /var/www/nodejs-app .\n\n# Backup PM2 configuration and process list\nif command -v pm2 >/dev/null 2>&1; then\n    pm2 save\n    cp ~/.pm2/dump.pm2 ${BACKUP_DIR}/config/pm2-processes-${DATE}.json\n    cp ecosystem.config.js ${BACKUP_DIR}/config/ecosystem-${DATE}.js 2>/dev/null || true\nfi\n\n# Backup environment configuration\ncp /var/www/nodejs-app/.env ${BACKUP_DIR}/config/env-${DATE}.backup 2>/dev/null || true\n\n# Backup systemd service files\ncp /etc/systemd/system/nodejs-app.service ${BACKUP_DIR}/config/nodejs-app-${DATE}.service 2>/dev/null || true\n\n# Backup logs\ntar -czf ${BACKUP_DIR}/logs/nodejs-logs-${DATE}.tar.gz \\\n    /var/www/nodejs-app/logs/ 2>/dev/null || true\n\n# Backup NGINX configuration\ncp /etc/nginx/sites-available/nodejs-app ${BACKUP_DIR}/config/nginx-${DATE}.conf 2>/dev/null || true\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://nodejs-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://nodejs-backups/\n\n# Keep only last 14 backups\nfind ${BACKUP_DIR} -name \"nodejs-*\" -type f -mtime +14 -delete\n\necho \"Node.js backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * root /usr/local/bin/nodejs-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Zero-Downtime Deployment\n```bash\n# Create deployment script\nsudo tee /usr/local/bin/nodejs-deploy.sh > /dev/null <<'EOF'\n#!/bin/bash\nVERSION=\"${1}\"\nREPO_URL=\"${2:-https://github.com/example/nodejs-app.git}\"\n\nif [ -z \"$VERSION\" ]; then\n    echo \"Usage: $0 <version> [repo_url]\"\n    echo \"Example: $0 v1.2.3\"\n    exit 1\nfi\n\nDEPLOY_DIR=\"/var/www/nodejs-app\"\nRELEASES_DIR=\"${DEPLOY_DIR}/releases\"\nSHARED_DIR=\"${DEPLOY_DIR}/shared\"\nCURRENT_LINK=\"${DEPLOY_DIR}/current\"\nRELEASE_DIR=\"${RELEASES_DIR}/${VERSION}\"\n\necho \"Deploying Node.js application version: ${VERSION}\"\n\n# Create directory structure\nmkdir -p ${RELEASES_DIR} ${SHARED_DIR}/{logs,uploads,config}\n\n# Clone and checkout specific version\ngit clone ${REPO_URL} ${RELEASE_DIR}\ncd ${RELEASE_DIR}\ngit checkout ${VERSION}\n\n# Copy shared configuration\ncp ${SHARED_DIR}/config/.env . 2>/dev/null || true\n\n# Install dependencies (production only)\nnpm ci --only=production\n\n# Run security audit\nnpm audit --audit-level high\n\n# Run tests\nnpm test\n\n# Create symbolic links for shared directories\nln -sfn ${SHARED_DIR}/logs logs\nln -sfn ${SHARED_DIR}/uploads uploads\n\n# Update current symlink (atomic operation)\nln -sfn ${RELEASE_DIR} ${CURRENT_LINK}\n\n# Reload PM2 or systemd service\nif command -v pm2 >/dev/null 2>&1 && pm2 list | grep -q \"nodejs-app\"; then\n    echo \"Reloading PM2 processes...\"\n    cd ${CURRENT_LINK}\n    pm2 reload ecosystem.config.js --env production\nelif systemctl is-active nodejs-app >/dev/null 2>&1; then\n    echo \"Restarting systemd service...\"\n    systemctl restart nodejs-app\nfi\n\n# Wait for application to be ready\necho \"Waiting for application to start...\"\nfor i in {1..30}; do\n    if curl -f http://localhost:3000/health >/dev/null 2>&1; then\n        echo \"✓ Application is healthy\"\n        break\n    fi\n    sleep 2\ndone\n\n# Keep only last 5 releases\ncd ${RELEASES_DIR}\nls -t | tail -n +6 | xargs rm -rf\n\n# Set proper ownership\nchown -R nodejs:nodejs ${DEPLOY_DIR}\n\necho \"Deployment completed successfully: ${VERSION}\"\necho \"Application is available at: http://localhost:3000\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-deploy.sh\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Node.js application status\n# PM2 processes\npm2 status\npm2 logs\npm2 monit\n\n# SystemD service\nsudo systemctl status nodejs-app\nsudo journalctl -u nodejs-app -f\n\n# Check application logs\ntail -f /var/www/nodejs-app/logs/combined.log\ntail -f /var/www/nodejs-app/logs/error.log\n\n# Test application health\ncurl -i http://localhost:3000/health\n\n# Check memory leaks\nnode --inspect server.js\n# Connect Chrome DevTools to memory tab\n\n# Performance profiling\nnode --prof server.js\n# Generate profile: node --prof-process isolate-*.log > profile.txt\n\n# Check for security vulnerabilities\nnpm audit\nnpm audit fix\n\n# Update dependencies\nnpm outdated\nnpm update\n\n# Check package vulnerabilities\nnpx retire\n\n# Memory usage analysis\nps aux --sort=-%mem | grep node\npmap -x $(pgrep node)\n\n# Network connectivity\nss -tulpn | grep 3000\nnetstat -tulpn | grep node\n\n# Process monitoring\nhtop -p $(pgrep node)\ntop -p $(pgrep node)\n\n# Debug mode (development only)\nnode --inspect-brk server.js\n\n# Cluster mode debugging\npm2 logs --lines 1000\npm2 flush  # Clear all logs\n\n# Database connection issues\n# Check MongoDB connection\nmongosh --eval \"db.adminCommand('ping')\"\n\n# Check PostgreSQL connection\npsql -h localhost -U username -d dbname -c \"SELECT version();\"\n\n# SSL/HTTPS issues\nopenssl s_client -connect app.example.com:443\ncurl -I https://app.example.com\n\n# Environment issues\nprintenv | grep NODE\necho $NODE_ENV\n\n# Restart applications\npm2 restart all\n# Or\nsudo systemctl restart nodejs-app\n\n# Clean npm cache\nnpm cache clean --force\n\n# Rebuild native modules\nnpm rebuild\n```\n\n## Additional Resources\n\n- [Node.js Official Documentation](https://nodejs.org/docs/)\n- [Node.js Security Best Practices](https://nodejs.org/en/security/)\n- [PM2 Documentation](https://pm2.keymetrics.io/docs/)\n- [Express.js Security Guide](https://expressjs.com/en/advanced/best-practice-security.html)\n- [Node.js Best Practices](https://github.com/goldbergyoni/nodebestpractices)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"nodejs-installation-guide\" class=\"mobile-header\">Node.js Installation Guide</h1>\n<p class=\"mobile-paragraph\">JavaScript runtime built on Chrome's V8 JavaScript engine. Essential platform for modern web applications, APIs, and microservices with enterprise-grade performance and security features.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for production</li>\n<li class=\"mobile-list-item\">curl or wget for package downloads</li>\n<li class=\"mobile-list-item\">Git for source code management</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-nvm-recommended-for-development\" class=\"mobile-header\">Using NVM (Recommended for Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and install NVM (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n\n# Reload shell profile\nsource ~/.bashrc\n\n# Install latest LTS version (recommended for production)\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install 20.10.0  # Latest LTS as of 2024\nnvm use 20.10.0\n\n# Set default version\nnvm alias default 20.10.0\n\n# Verify installation\nnode --version\nnpm --version\n\n# List available versions\nnvm list-remote --lts\nnvm list</code></pre>\n      </div>\n    </div>\n<h3 id=\"ubuntudebian-package-manager\" class=\"mobile-header\">Ubuntu/Debian (Package Manager)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Method 1: Install from Ubuntu repositories (older version)\nsudo apt install -y nodejs npm\n\n# Method 2: Install from NodeSource repository (latest LTS)\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Install build tools for native modules\nsudo apt install -y build-essential python3-dev\n\n# Verify installation\nnode --version\nnpm --version\n\n# Update npm to latest version\nsudo npm install -g npm@latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable EPEL repository\nsudo yum install -y epel-release\n\n# Method 1: Install from EPEL (may be older)\nsudo yum install -y nodejs npm\n\n# Method 2: Install from NodeSource (recommended)\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo yum install -y nodejs\n\n# Install development tools\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js from official repositories\nsudo dnf install -y nodejs npm\n\n# Or install from NodeSource for latest LTS\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo dnf install -y nodejs\n\n# Install development tools\nsudo dnf groupinstall -y &quot;Development Tools&quot;\nsudo dnf install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js and npm\nsudo pacman -Syu nodejs npm\n\n# Install base-devel for building native modules\nsudo pacman -S base-devel python\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Node.js application structure\nmkdir -p ~/nodejs-app/{src,config,logs,node_modules}\ncd ~/nodejs-app\n\n# Create production Dockerfile\ncat &gt; Dockerfile &lt;&lt;EOF\n# Multi-stage build for production\nFROM node:20-alpine AS builder\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies (including dev dependencies)\nRUN npm ci --only=production\n\n# Production stage\nFROM node:20-alpine AS production\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs &amp;&amp; \\\n    adduser -S nodejs -u 1001\n\n# Set working directory\nWORKDIR /usr/src/app\n\n# Copy node_modules from builder stage\nCOPY --from=builder /usr/src/app/node_modules ./node_modules\n\n# Copy application code\nCOPY --chown=nodejs:nodejs . .\n\n# Remove unnecessary files\nRUN rm -f .dockerignore Dockerfile* README.md\n\n# Security: Run as non-root user\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\n# Start application\nCMD [&quot;node&quot;, &quot;server.js&quot;]\nEOF\n\n# Create .dockerignore\ncat &gt; .dockerignore &lt;&lt;EOF\nnode_modules\nnpm-debug.log\nDockerfile*\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.npm\n.coverage\n.jest\n.cache\nEOF\n\n# Create production docker-compose.yml\ncat &gt; docker-compose.prod.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  app:\n    build:\n      context: .\n      target: production\n    restart: unless-stopped\n    ports:\n      - &quot;127.0.0.1:3000:3000&quot;\n    environment:\n      - NODE_ENV=production\n      - PORT=3000\n    volumes:\n      - ./logs:/usr/src/app/logs\n    networks:\n      - app-network\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;node&quot;, &quot;healthcheck.js&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n\n  nginx:\n    image: nginx:alpine\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n      - &quot;443:443&quot;\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - app\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\nEOF\n\ndocker-compose -f docker-compose.prod.yml up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"production-configuration\" class=\"mobile-header\">Production Configuration</h2>\n<h3 id=\"pm2-process-manager-production-standard\" class=\"mobile-header\">PM2 Process Manager (Production Standard)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PM2 globally\nsudo npm install -g pm2\n\n# Create PM2 ecosystem configuration\ncat &gt; ecosystem.config.js &lt;&lt;EOF\nmodule.exports = {\n  apps: [{\n    name: &#039;node-app&#039;,\n    script: &#039;./server.js&#039;,\n    instances: &#039;max&#039;,  // Use all CPU cores\n    exec_mode: &#039;cluster&#039;,\n    \n    // Performance settings\n    max_memory_restart: &#039;1G&#039;,\n    node_args: &#039;--max-old-space-size=1024&#039;,\n    \n    // Environment variables\n    env: {\n      NODE_ENV: &#039;development&#039;,\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: &#039;production&#039;,\n      PORT: 3000\n    },\n    \n    // Logging\n    log_file: &#039;./logs/app.log&#039;,\n    out_file: &#039;./logs/out.log&#039;,\n    error_file: &#039;./logs/error.log&#039;,\n    log_date_format: &#039;YYYY-MM-DD HH:mm:ss Z&#039;,\n    merge_logs: true,\n    \n    // Monitoring\n    monitoring: true,\n    pmx: true,\n    \n    // Auto-restart settings\n    autorestart: true,\n    watch: false,  // Disable in production\n    max_restarts: 10,\n    min_uptime: &#039;10s&#039;,\n    \n    // Instance settings\n    instance_var: &#039;INSTANCE_ID&#039;,\n    \n    // Source map support\n    source_map_support: true,\n    \n    // Graceful shutdown\n    kill_timeout: 5000,\n    listen_timeout: 8000,\n    \n    // Health checking\n    health_check_grace_period: 3000\n  }],\n  \n  // Deployment configuration\n  deploy: {\n    production: {\n      user: &#039;nodejs&#039;,\n      host: [&#039;app1.example.com&#039;, &#039;app2.example.com&#039;],\n      ref: &#039;origin/main&#039;,\n      repo: &#039;git@github.com:username/repository.git&#039;,\n      path: &#039;/var/www/production&#039;,\n      &#039;post-deploy&#039;: &#039;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&#039;,\n      &#039;pre-setup&#039;: &#039;apt update -y; apt install git -y&#039;\n    },\n    staging: {\n      user: &#039;nodejs&#039;,\n      host: &#039;staging.example.com&#039;,\n      ref: &#039;origin/develop&#039;,\n      repo: &#039;git@github.com:username/repository.git&#039;,\n      path: &#039;/var/www/staging&#039;,\n      &#039;post-deploy&#039;: &#039;npm install &amp;&amp; pm2 reload ecosystem.config.js --env staging&#039;\n    }\n  }\n};\nEOF\n\n# Start application with PM2\npm2 start ecosystem.config.js --env production\n\n# Save PM2 configuration\npm2 save\n\n# Generate startup script\npm2 startup\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $USER --hp $HOME\n\n# Monitor application\npm2 status\npm2 logs\npm2 monit</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy-configuration\" class=\"mobile-header\">NGINX Reverse Proxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration for Node.js applications\nsudo tee /etc/nginx/sites-available/nodejs-app &gt; /dev/null &lt;&lt;EOF\n# Node.js Application NGINX Configuration\n\nupstream nodejs_backend {\n    least_conn;\n    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;\n    # Add more servers for load balancing:\n    # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;\n    # server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;\n    keepalive 64;\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name app.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=api_limit:10m rate=10r/s;\n    limit_req zone=api_limit burst=20 nodelay;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    location / {\n        proxy_pass http://nodejs_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &#039;upgrade&#039;;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n        \n        # Buffer settings\n        proxy_buffer_size 4k;\n        proxy_buffers 4 4k;\n    }\n\n    # Static assets caching\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\\$ {\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n        access_log off;\n    }\n\n    # API rate limiting (stricter)\n    location /api/ {\n        limit_req zone=api_limit burst=10 nodelay;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service-alternative-to-pm2\" class=\"mobile-header\">SystemD Service (Alternative to PM2)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service for Node.js application\nsudo tee /etc/systemd/system/nodejs-app.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Node.js Application\nDocumentation=https://nodejs.org/\nAfter=network.target\n\n[Service]\nType=simple\nUser=nodejs\nGroup=nodejs\nWorkingDirectory=/var/www/nodejs-app\nExecStart=/usr/bin/node server.js\nExecReload=/bin/kill -SIGUSR2 \\$MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=nodejs-app\n\n# Environment variables\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/www/nodejs-app/logs /var/www/nodejs-app/uploads\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=2G\nCPUQuota=200%\nTasksMax=4096\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create nodejs user\nsudo useradd --system --shell /bin/false --home /var/www/nodejs-app nodejs\n\n# Set up application directory\nsudo mkdir -p /var/www/nodejs-app/{logs,uploads}\nsudo chown -R nodejs:nodejs /var/www/nodejs-app\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nodejs-app</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"application-security-best-practices\" class=\"mobile-header\">Application Security Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure application template\nmkdir -p ~/secure-nodejs-app\ncd ~/secure-nodejs-app\n\n# Create package.json with security-focused dependencies\ncat &gt; package.json &lt;&lt;EOF\n{\n  &quot;name&quot;: &quot;secure-nodejs-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Secure Node.js application template&quot;,\n  &quot;main&quot;: &quot;server.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node server.js&quot;,\n    &quot;dev&quot;: &quot;nodemon server.js&quot;,\n    &quot;test&quot;: &quot;jest&quot;,\n    &quot;security:audit&quot;: &quot;npm audit&quot;,\n    &quot;security:check&quot;: &quot;nsp check&quot;,\n    &quot;lint&quot;: &quot;eslint .&quot;,\n    &quot;format&quot;: &quot;prettier --write .&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;^4.18.2&quot;,\n    &quot;helmet&quot;: &quot;^7.1.0&quot;,\n    &quot;cors&quot;: &quot;^2.8.5&quot;,\n    &quot;express-rate-limit&quot;: &quot;^7.1.5&quot;,\n    &quot;express-validator&quot;: &quot;^7.0.1&quot;,\n    &quot;bcryptjs&quot;: &quot;^2.4.3&quot;,\n    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,\n    &quot;mongoose&quot;: &quot;^8.0.3&quot;,\n    &quot;dotenv&quot;: &quot;^16.3.1&quot;,\n    &quot;compression&quot;: &quot;^1.7.4&quot;,\n    &quot;morgan&quot;: &quot;^1.10.0&quot;,\n    &quot;winston&quot;: &quot;^3.11.0&quot;,\n    &quot;hpp&quot;: &quot;^0.2.3&quot;,\n    &quot;express-mongo-sanitize&quot;: &quot;^2.2.0&quot;,\n    &quot;xss&quot;: &quot;^1.0.14&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;nodemon&quot;: &quot;^3.0.2&quot;,\n    &quot;jest&quot;: &quot;^29.7.0&quot;,\n    &quot;eslint&quot;: &quot;^8.55.0&quot;,\n    &quot;prettier&quot;: &quot;^3.1.0&quot;,\n    &quot;nsp&quot;: &quot;^3.2.1&quot;\n  },\n  &quot;engines&quot;: {\n    &quot;node&quot;: &quot;&gt;=20.0.0&quot;,\n    &quot;npm&quot;: &quot;&gt;=9.0.0&quot;\n  }\n}\nEOF\n\n# Create secure server template\ncat &gt; server.js &lt;&lt;&#039;EOF&#039;\n&#039;use strict&#039;;\n\nconst express = require(&#039;express&#039;);\nconst helmet = require(&#039;helmet&#039;);\nconst cors = require(&#039;cors&#039;);\nconst rateLimit = require(&#039;express-rate-limit&#039;);\nconst { body, validationResult } = require(&#039;express-validator&#039;);\nconst mongoSanitize = require(&#039;express-mongo-sanitize&#039;);\nconst xss = require(&#039;xss&#039;);\nconst compression = require(&#039;compression&#039;);\nconst morgan = require(&#039;morgan&#039;);\nconst winston = require(&#039;winston&#039;);\nconst hpp = require(&#039;hpp&#039;);\nrequire(&#039;dotenv&#039;).config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [&quot;&#039;self&#039;&quot;],\n      styleSrc: [&quot;&#039;self&#039;&quot;, &quot;&#039;unsafe-inline&#039;&quot;],\n      scriptSrc: [&quot;&#039;self&#039;&quot;],\n      imgSrc: [&quot;&#039;self&#039;&quot;, &quot;data:&quot;, &quot;https:&quot;]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(&#039;,&#039;) || [&#039;https://example.com&#039;],\n  methods: [&#039;GET&#039;, &#039;POST&#039;, &#039;PUT&#039;, &#039;DELETE&#039;],\n  allowedHeaders: [&#039;Content-Type&#039;, &#039;Authorization&#039;],\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: &#039;Too many requests from this IP, please try again later.&#039;,\n  standardHeaders: true,\n  legacyHeaders: false\n});\napp.use(limiter);\n\n// API rate limiting (stricter)\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 50,\n  message: &#039;Too many API requests from this IP&#039;\n});\napp.use(&#039;/api/&#039;, apiLimiter);\n\n// Body parsing with size limits\napp.use(express.json({ limit: &#039;10mb&#039; }));\napp.use(express.urlencoded({ extended: true, limit: &#039;10mb&#039; }));\n\n// Security sanitization\napp.use(mongoSanitize());\napp.use(hpp()); // Prevent HTTP Parameter Pollution\n\n// Compression\napp.use(compression());\n\n// Logging\nconst logger = winston.createLogger({\n  level: &#039;info&#039;,\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: &#039;logs/error.log&#039;, level: &#039;error&#039; }),\n    new winston.transports.File({ filename: &#039;logs/combined.log&#039; })\n  ]\n});\n\nif (process.env.NODE_ENV !== &#039;production&#039;) {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\n// Request logging\napp.use(morgan(&#039;combined&#039;, {\n  stream: { write: message =&gt; logger.info(message.trim()) }\n}));\n\n// Input validation middleware\nconst validateInput = (req, res, next) =&gt; {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\n// Health check endpoint\napp.get(&#039;/health&#039;, (req, res) =&gt; {\n  res.status(200).json({\n    status: &#039;healthy&#039;,\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    version: process.version\n  });\n});\n\n// API routes with validation\napp.post(&#039;/api/users&#039;, [\n  body(&#039;email&#039;).isEmail().normalizeEmail(),\n  body(&#039;name&#039;).trim().escape().isLength({ min: 2, max: 50 }),\n  body(&#039;password&#039;).isLength({ min: 12 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])/),\n  validateInput\n], (req, res) =&gt; {\n  try {\n    // Sanitize input\n    const sanitizedBody = {\n      email: xss(req.body.email),\n      name: xss(req.body.name),\n      password: req.body.password // Don&#039;t sanitize password, just validate\n    };\n    \n    // Process request\n    res.json({ success: true, message: &#039;User created successfully&#039; });\n  } catch (error) {\n    logger.error(&#039;Error creating user:&#039;, error);\n    res.status(500).json({ success: false, message: &#039;Internal server error&#039; });\n  }\n});\n\n// Error handling middleware\napp.use((error, req, res, next) =&gt; {\n  logger.error(&#039;Unhandled error:&#039;, error);\n  \n  res.status(error.status || 500).json({\n    success: false,\n    message: process.env.NODE_ENV === &#039;production&#039; \n      ? &#039;Something went wrong!&#039; \n      : error.message\n  });\n});\n\n// 404 handler\napp.use(&#039;*&#039;, (req, res) =&gt; {\n  res.status(404).json({\n    success: false,\n    message: &#039;Route not found&#039;\n  });\n});\n\n// Graceful shutdown\nprocess.on(&#039;SIGTERM&#039;, () =&gt; {\n  logger.info(&#039;SIGTERM signal received: closing HTTP server&#039;);\n  server.close(() =&gt; {\n    logger.info(&#039;HTTP server closed&#039;);\n    process.exit(0);\n  });\n});\n\nprocess.on(&#039;SIGINT&#039;, () =&gt; {\n  logger.info(&#039;SIGINT signal received: closing HTTP server&#039;);\n  server.close(() =&gt; {\n    logger.info(&#039;HTTP server closed&#039;);\n    process.exit(0);\n  });\n});\n\n// Unhandled promise rejection handling\nprocess.on(&#039;unhandledRejection&#039;, (reason, promise) =&gt; {\n  logger.error(&#039;Unhandled Rejection at:&#039;, promise, &#039;reason:&#039;, reason);\n  process.exit(1);\n});\n\n// Uncaught exception handling\nprocess.on(&#039;uncaughtException&#039;, (error) =&gt; {\n  logger.error(&#039;Uncaught Exception thrown:&#039;, error);\n  process.exit(1);\n});\n\nconst server = app.listen(PORT, &#039;127.0.0.1&#039;, () =&gt; {\n  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\n});\n\nmodule.exports = app;\nEOF\n\n# Create healthcheck script for Docker\ncat &gt; healthcheck.js &lt;&lt;EOF\nconst http = require(&#039;http&#039;);\n\nconst options = {\n  hostname: &#039;localhost&#039;,\n  port: process.env.PORT || 3000,\n  path: &#039;/health&#039;,\n  method: &#039;GET&#039;,\n  timeout: 2000\n};\n\nconst req = http.request(options, (res) =&gt; {\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\n\nreq.on(&#039;error&#039;, () =&gt; {\n  process.exit(1);\n});\n\nreq.end();\nEOF\n\n# Install dependencies\nnpm install</code></pre>\n      </div>\n    </div>\n<h3 id=\"environment-configuration\" class=\"mobile-header\">Environment Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure environment configuration\ncat &gt; .env.example &lt;&lt;EOF\n# Node.js Application Environment Configuration\n\n# Application settings\nNODE_ENV=production\nPORT=3000\nHOST=127.0.0.1\n\n# Database connection\nDATABASE_URL=mongodb://username:password@localhost:27017/myapp?authSource=admin\n# Or PostgreSQL: postgresql://username:password@localhost:5432/myapp\n\n# Security keys (generate with: openssl rand -base64 32)\nJWT_SECRET=your_jwt_secret_here_32_characters_minimum\nSESSION_SECRET=your_session_secret_here_32_characters_minimum\nENCRYPTION_KEY=your_encryption_key_here_32_characters\n\n# CORS settings\nALLOWED_ORIGINS=https://example.com,https://app.example.com\n\n# Email configuration (for notifications)\nSMTP_HOST=smtp.example.com\nSMTP_PORT=587\nSMTP_USER=app@example.com\nSMTP_PASS=smtp_password\n\n# Rate limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX=100\n\n# File upload settings\nMAX_FILE_SIZE=10485760\nUPLOAD_PATH=/var/www/nodejs-app/uploads\n\n# Monitoring\nENABLE_MONITORING=true\nLOG_LEVEL=info\n\n# Security settings\nBCRYPT_ROUNDS=12\nJWT_EXPIRY=24h\nSESSION_TIMEOUT=3600000\n\n# External APIs\nEXTERNAL_API_KEY=your_api_key_here\nEXTERNAL_API_URL=https://api.external-service.com\n\n# Redis configuration (for sessions/caching)\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=redis_password\n\n# Health check settings\nHEALTH_CHECK_INTERVAL=30000\nEOF\n\n# Create production environment file\ncp .env.example .env\necho &quot;.env&quot; &gt;&gt; .gitignore\n\n# Set secure permissions\nchmod 600 .env</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"nodejs-performance-tuning\" class=\"mobile-header\">Node.js Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create performance optimization script\nsudo tee /usr/local/bin/nodejs-optimize.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\necho &quot;Optimizing Node.js application performance...&quot;\n\n# System-level optimizations\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;LIMITS\nnodejs soft nofile 65535\nnodejs hard nofile 65535\nnodejs soft nproc 65535\nnodejs hard nproc 65535\nLIMITS\n\n# Kernel optimizations for Node.js\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;SYSCTL\n# Node.js optimizations\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\nvm.swappiness = 1\nSYSCTL\n\nsudo sysctl -p\n\n# PM2 optimization for clustering\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    # Update PM2 configuration for performance\n    pm2 delete all 2&gt;/dev/null || true\n    \n    cat &gt; /tmp/ecosystem-optimized.config.js &lt;&lt;PM2CONFIG\nmodule.exports = {\n  apps: [{\n    name: &#039;nodejs-app-optimized&#039;,\n    script: &#039;./server.js&#039;,\n    instances: &#039;max&#039;,\n    exec_mode: &#039;cluster&#039;,\n    \n    // V8 optimizations\n    node_args: [\n      &#039;--max-old-space-size=2048&#039;,\n      &#039;--optimize-for-size&#039;,\n      &#039;--gc-interval=100&#039;,\n      &#039;--expose-gc&#039;\n    ],\n    \n    // Performance settings\n    max_memory_restart: &#039;2G&#039;,\n    min_uptime: &#039;10s&#039;,\n    max_restarts: 5,\n    \n    // Environment\n    env_production: {\n      NODE_ENV: &#039;production&#039;,\n      UV_THREADPOOL_SIZE: 16\n    }\n  }]\n};\nPM2CONFIG\n    \n    pm2 start /tmp/ecosystem-optimized.config.js --env production\n    pm2 save\nfi\n\necho &quot;Node.js optimization completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-optimize.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-and-logging\" class=\"mobile-header\">Monitoring and Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Node.js monitoring script\nsudo tee /usr/local/bin/nodejs-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/nodejs-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# Check if PM2 is managing processes\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    PM2_STATUS=$(pm2 jlist | jq -r &#039;.[].pm2_env.status&#039; 2&gt;/dev/null)\n    if echo &quot;$PM2_STATUS&quot; | grep -q &quot;online&quot;; then\n        log_message &quot;✓ PM2 processes are running&quot;\n        \n        # Check memory usage\n        PM2_MEMORY=$(pm2 jlist | jq -r &#039;.[].monit.memory&#039; 2&gt;/dev/null | awk &#039;{sum += $1} END {print sum/1024/1024}&#039;)\n        log_message &quot;ℹ PM2 total memory usage: ${PM2_MEMORY}MB&quot;\n        \n        # Check CPU usage\n        PM2_CPU=$(pm2 jlist | jq -r &#039;.[].monit.cpu&#039; 2&gt;/dev/null | awk &#039;{sum += $1} END {print sum}&#039;)\n        log_message &quot;ℹ PM2 total CPU usage: ${PM2_CPU}%&quot;\n    else\n        log_message &quot;⚠ PM2 processes not online&quot;\n    fi\nfi\n\n# Check systemd service (if not using PM2)\nif systemctl is-active nodejs-app &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Node.js systemd service is running&quot;\nelse\n    log_message &quot;ℹ Node.js systemd service not active (may be using PM2)&quot;\nfi\n\n# Check application health endpoint\nif curl -f http://localhost:3000/health &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Application health endpoint responding&quot;\n    \n    # Get detailed health info\n    HEALTH_DATA=$(curl -s http://localhost:3000/health)\n    UPTIME=$(echo &quot;$HEALTH_DATA&quot; | jq -r &#039;.uptime&#039; 2&gt;/dev/null)\n    MEMORY_USED=$(echo &quot;$HEALTH_DATA&quot; | jq -r &#039;.memory.rss&#039; 2&gt;/dev/null)\n    \n    if [ -n &quot;$UPTIME&quot; ]; then\n        log_message &quot;ℹ Application uptime: ${UPTIME}s&quot;\n    fi\n    if [ -n &quot;$MEMORY_USED&quot; ]; then\n        MEMORY_MB=$((MEMORY_USED / 1024 / 1024))\n        log_message &quot;ℹ Application memory: ${MEMORY_MB}MB&quot;\n    fi\nelse\n    log_message &quot;✗ Application health endpoint not responding&quot;\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node --version 2&gt;/dev/null)\nif [ -n &quot;$NODE_VERSION&quot; ]; then\n    log_message &quot;ℹ Node.js version: ${NODE_VERSION}&quot;\nfi\n\n# Check npm security audit\nif [ -f &quot;package.json&quot; ]; then\n    AUDIT_RESULT=$(npm audit --audit-level high --json 2&gt;/dev/null)\n    VULNERABILITIES=$(echo &quot;$AUDIT_RESULT&quot; | jq -r &#039;.metadata.vulnerabilities.total&#039; 2&gt;/dev/null)\n    if [ -n &quot;$VULNERABILITIES&quot; ] &amp;&amp; [ &quot;$VULNERABILITIES&quot; -gt 0 ]; then\n        log_message &quot;⚠ ${VULNERABILITIES} security vulnerabilities found&quot;\n    else\n        log_message &quot;✓ No high/critical security vulnerabilities&quot;\n    fi\nfi\n\nlog_message &quot;Node.js monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/nodejs-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-deployment\" class=\"mobile-header\">Backup and Deployment</h2>\n<h3 id=\"application-backup-strategy\" class=\"mobile-header\">Application Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/nodejs-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/nodejs&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{app,config,logs}\n\necho &quot;Starting Node.js application backup...&quot;\n\n# Backup application code and dependencies\ntar --exclude=&#039;node_modules&#039; --exclude=&#039;logs/*&#039; --exclude=&#039;.git&#039; \\\n    -czf ${BACKUP_DIR}/app/nodejs-app-${DATE}.tar.gz \\\n    -C /var/www/nodejs-app .\n\n# Backup PM2 configuration and process list\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    pm2 save\n    cp ~/.pm2/dump.pm2 ${BACKUP_DIR}/config/pm2-processes-${DATE}.json\n    cp ecosystem.config.js ${BACKUP_DIR}/config/ecosystem-${DATE}.js 2&gt;/dev/null || true\nfi\n\n# Backup environment configuration\ncp /var/www/nodejs-app/.env ${BACKUP_DIR}/config/env-${DATE}.backup 2&gt;/dev/null || true\n\n# Backup systemd service files\ncp /etc/systemd/system/nodejs-app.service ${BACKUP_DIR}/config/nodejs-app-${DATE}.service 2&gt;/dev/null || true\n\n# Backup logs\ntar -czf ${BACKUP_DIR}/logs/nodejs-logs-${DATE}.tar.gz \\\n    /var/www/nodejs-app/logs/ 2&gt;/dev/null || true\n\n# Backup NGINX configuration\ncp /etc/nginx/sites-available/nodejs-app ${BACKUP_DIR}/config/nginx-${DATE}.conf 2&gt;/dev/null || true\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://nodejs-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://nodejs-backups/\n\n# Keep only last 14 backups\nfind ${BACKUP_DIR} -name &quot;nodejs-*&quot; -type f -mtime +14 -delete\n\necho &quot;Node.js backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-backup.sh\n\n# Schedule daily backups\necho &quot;0 2 * * * root /usr/local/bin/nodejs-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"zero-downtime-deployment\" class=\"mobile-header\">Zero-Downtime Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create deployment script\nsudo tee /usr/local/bin/nodejs-deploy.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nVERSION=&quot;${1}&quot;\nREPO_URL=&quot;${2:-https://github.com/example/nodejs-app.git}&quot;\n\nif [ -z &quot;$VERSION&quot; ]; then\n    echo &quot;Usage: $0 &lt;version&gt; [repo_url]&quot;\n    echo &quot;Example: $0 v1.2.3&quot;\n    exit 1\nfi\n\nDEPLOY_DIR=&quot;/var/www/nodejs-app&quot;\nRELEASES_DIR=&quot;${DEPLOY_DIR}/releases&quot;\nSHARED_DIR=&quot;${DEPLOY_DIR}/shared&quot;\nCURRENT_LINK=&quot;${DEPLOY_DIR}/current&quot;\nRELEASE_DIR=&quot;${RELEASES_DIR}/${VERSION}&quot;\n\necho &quot;Deploying Node.js application version: ${VERSION}&quot;\n\n# Create directory structure\nmkdir -p ${RELEASES_DIR} ${SHARED_DIR}/{logs,uploads,config}\n\n# Clone and checkout specific version\ngit clone ${REPO_URL} ${RELEASE_DIR}\ncd ${RELEASE_DIR}\ngit checkout ${VERSION}\n\n# Copy shared configuration\ncp ${SHARED_DIR}/config/.env . 2&gt;/dev/null || true\n\n# Install dependencies (production only)\nnpm ci --only=production\n\n# Run security audit\nnpm audit --audit-level high\n\n# Run tests\nnpm test\n\n# Create symbolic links for shared directories\nln -sfn ${SHARED_DIR}/logs logs\nln -sfn ${SHARED_DIR}/uploads uploads\n\n# Update current symlink (atomic operation)\nln -sfn ${RELEASE_DIR} ${CURRENT_LINK}\n\n# Reload PM2 or systemd service\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pm2 list | grep -q &quot;nodejs-app&quot;; then\n    echo &quot;Reloading PM2 processes...&quot;\n    cd ${CURRENT_LINK}\n    pm2 reload ecosystem.config.js --env production\nelif systemctl is-active nodejs-app &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Restarting systemd service...&quot;\n    systemctl restart nodejs-app\nfi\n\n# Wait for application to be ready\necho &quot;Waiting for application to start...&quot;\nfor i in {1..30}; do\n    if curl -f http://localhost:3000/health &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✓ Application is healthy&quot;\n        break\n    fi\n    sleep 2\ndone\n\n# Keep only last 5 releases\ncd ${RELEASES_DIR}\nls -t | tail -n +6 | xargs rm -rf\n\n# Set proper ownership\nchown -R nodejs:nodejs ${DEPLOY_DIR}\n\necho &quot;Deployment completed successfully: ${VERSION}&quot;\necho &quot;Application is available at: http://localhost:3000&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-deploy.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Node.js application status\n# PM2 processes\npm2 status\npm2 logs\npm2 monit\n\n# SystemD service\nsudo systemctl status nodejs-app\nsudo journalctl -u nodejs-app -f\n\n# Check application logs\ntail -f /var/www/nodejs-app/logs/combined.log\ntail -f /var/www/nodejs-app/logs/error.log\n\n# Test application health\ncurl -i http://localhost:3000/health\n\n# Check memory leaks\nnode --inspect server.js\n# Connect Chrome DevTools to memory tab\n\n# Performance profiling\nnode --prof server.js\n# Generate profile: node --prof-process isolate-*.log &gt; profile.txt\n\n# Check for security vulnerabilities\nnpm audit\nnpm audit fix\n\n# Update dependencies\nnpm outdated\nnpm update\n\n# Check package vulnerabilities\nnpx retire\n\n# Memory usage analysis\nps aux --sort=-%mem | grep node\npmap -x $(pgrep node)\n\n# Network connectivity\nss -tulpn | grep 3000\nnetstat -tulpn | grep node\n\n# Process monitoring\nhtop -p $(pgrep node)\ntop -p $(pgrep node)\n\n# Debug mode (development only)\nnode --inspect-brk server.js\n\n# Cluster mode debugging\npm2 logs --lines 1000\npm2 flush  # Clear all logs\n\n# Database connection issues\n# Check MongoDB connection\nmongosh --eval &quot;db.adminCommand(&#039;ping&#039;)&quot;\n\n# Check PostgreSQL connection\npsql -h localhost -U username -d dbname -c &quot;SELECT version();&quot;\n\n# SSL/HTTPS issues\nopenssl s_client -connect app.example.com:443\ncurl -I https://app.example.com\n\n# Environment issues\nprintenv | grep NODE\necho $NODE_ENV\n\n# Restart applications\npm2 restart all\n# Or\nsudo systemctl restart nodejs-app\n\n# Clean npm cache\nnpm cache clean --force\n\n# Rebuild native modules\nnpm rebuild</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://nodejs.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://nodejs.org/en/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://pm2.keymetrics.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PM2 Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://expressjs.com/en/advanced/best-practice-security.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Express.js Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/goldbergyoni/nodebestpractices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Best Practices</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"17 min","wordCount":3313,"lastBuilt":"2025-09-14T06:13:04.710Z"},{"name":"odoo","displayName":"Odoo","slug":"odoo","description":"Repo for odoo","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/odoo","updatedAt":"2025-09-08T03:12:54Z","createdAt":"2025-09-08T03:12:44Z","readmeRaw":"## 👋 Welcome to odoo 🚀  \n\nodoo README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-odoo\" class=\"mobile-header\">👋 Welcome to odoo 🚀  </h2>\n<p class=\"mobile-paragraph\">odoo README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:17.177Z"},{"name":"opnsense","displayName":"Opnsense","slug":"opnsense","description":"Repo for opnsense","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/opnsense","updatedAt":"2025-09-08T03:13:18Z","createdAt":"2025-09-08T03:13:08Z","readmeRaw":"## 👋 Welcome to opnsense 🚀  \n\nopnsense README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-opnsense\" class=\"mobile-header\">👋 Welcome to opnsense 🚀  </h2>\n<p class=\"mobile-paragraph\">opnsense README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:16.512Z"},{"name":"owncloud","displayName":"Owncloud","slug":"owncloud","description":"Repo for owncloud","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/owncloud","updatedAt":"2025-09-08T03:13:30Z","createdAt":"2025-09-08T03:13:20Z","readmeRaw":"## 👋 Welcome to owncloud 🚀  \n\nowncloud README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-owncloud\" class=\"mobile-header\">👋 Welcome to owncloud 🚀  </h2>\n<p class=\"mobile-paragraph\">owncloud README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:16.212Z"},{"name":"pfsense","displayName":"Pfsense","slug":"pfsense","description":"Repo for pfsense","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pfsense","updatedAt":"2025-09-08T03:13:43Z","createdAt":"2025-09-08T03:13:32Z","readmeRaw":"## 👋 Welcome to pfsense 🚀  \n\npfsense README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pfsense\" class=\"mobile-header\">👋 Welcome to pfsense 🚀  </h2>\n<p class=\"mobile-paragraph\">pfsense README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:15.891Z"},{"name":"pgadmin","displayName":"Pgadmin","slug":"pgadmin","description":"Repo for pgadmin","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pgadmin","updatedAt":"2025-09-08T03:13:54Z","createdAt":"2025-09-08T03:13:44Z","readmeRaw":"## 👋 Welcome to pgadmin 🚀  \n\npgadmin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pgadmin\" class=\"mobile-header\">👋 Welcome to pgadmin 🚀  </h2>\n<p class=\"mobile-paragraph\">pgadmin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:15.550Z"},{"name":"phpmyadmin","displayName":"Phpmyadmin","slug":"phpmyadmin","description":"Repo for phpmyadmin","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/phpmyadmin","updatedAt":"2025-09-08T03:14:06Z","createdAt":"2025-09-08T03:13:56Z","readmeRaw":"## 👋 Welcome to phpmyadmin 🚀  \n\nphpmyadmin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-phpmyadmin\" class=\"mobile-header\">👋 Welcome to phpmyadmin 🚀  </h2>\n<p class=\"mobile-paragraph\">phpmyadmin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:15.221Z"},{"name":"prosody","displayName":"Prosody","slug":"prosody","description":"Repo for prosody","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prosody","updatedAt":"2025-09-08T03:14:59Z","createdAt":"2023-08-28T03:49:26Z","readmeRaw":"#### Prosody IM Server\n\n```shell\nmkdir -p /var/lib/docker/storage/prosody && chmod -Rf 777 /var/lib/docker/storage/prosody\ndocker run -d \\\n   -p 82:80\n   -p 5222:5222 \\\n   -p 5269:5269 \\\n   -p 5281:5281\n   -p 5347:5347 \\\n   -e LOCAL=admin \\\n   -e DOMAIN=MYDOMAIN \\\n   -e PASSWORD=juliet4ever \\\n   -v /var/lib/docker/storage/prosody/log:/var/log/prosody \\\n   -v /var/lib/docker/storage/prosody/configuration:/etc/prosody \\\n   -v /var/lib/docker/storage/prosody/modules:/usr/lib/prosody-modules \\\n   prosody/prosody\n```\n","readmeHtml":"<p class=\"mobile-paragraph\">#### Prosody IM Server</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /var/lib/docker/storage/prosody &amp;&amp; chmod -Rf 777 /var/lib/docker/storage/prosody\ndocker run -d \\\n   -p 82:80\n   -p 5222:5222 \\\n   -p 5269:5269 \\\n   -p 5281:5281\n   -p 5347:5347 \\\n   -e LOCAL=admin \\\n   -e DOMAIN=MYDOMAIN \\\n   -e PASSWORD=juliet4ever \\\n   -v /var/lib/docker/storage/prosody/log:/var/log/prosody \\\n   -v /var/lib/docker/storage/prosody/configuration:/etc/prosody \\\n   -v /var/lib/docker/storage/prosody/modules:/usr/lib/prosody-modules \\\n   prosody/prosody</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T06:13:14.914Z"},{"name":"proxmox","displayName":"Proxmox","slug":"proxmox","description":"Repo for proxmox","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/proxmox","updatedAt":"2025-09-08T03:15:04Z","createdAt":"2023-08-28T03:49:36Z","readmeRaw":"# Install docker\n\n### ZFS\n\n```shell\nzfs create -o mountpoint=/var/lib/docker rpool/docker\nmkdir /etc/systemd/system/docker.service.d\ncurl -q -LSs https://github.com/casjay-base/howtos/raw/main/proxmox/storage-driver.conf >/etc/systemd/system/docker.service.d/storage-driver.conf\n```\n\n### Docker\n\n```shell\napt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\"\napt-get update && apt-get install docker-ce -y\n```\n\n### Yacht\n\n```shell\nmkdir -p \"/root/.local/share/srv/docker/yacht/\"\nsudo docker run -d \\\n    --name=\"yacht\" \\\n    --hostname \"yacht\" \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=\"${TZ:-${TIMEZONE:-America/New_York}}\" \\\n    -v \"/root/.local/share/srv/docker/yacht/data\":/data \\\n    -v \"/root/.local/share/srv/docker/yacht/config\":/config \\\n    -p 8000:8000 \\\n    selfhostedpro/yacht 1>/dev/null\n```\n\n### Portainer\n\n```shell\nmkdir -p /root/.local/share/srv/docker/portainer/data\ndocker run -d -p 9000:9000 \\\n    --name portainer \\\n    -v /root/.local/share/srv/docker/portainer/data:/data \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    portainer/portainer-ce\n```\n\n### nginx\n\n```shell\nmkdir -p /root/.local/share/srv/docker/nginx-manager/files/{data,config,letsencrypt}\nsudo docker run -d \\\n    --name=\"nginx-manager\" \\\n    --hostname \"$HOSTNAME\" \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=\"America/New_York\" \\\n    -e DISABLE_IPV6=true \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/data\":/data \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/config\":/app/config \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/letsencrypt\":/etc/letsencrypt \\\n    -p 80:80 \\\n    -p 8888:81 \\\n    -p 443:443 \\\n    jc21/nginx-proxy-manager:2\n```\n","readmeHtml":"<h1 id=\"install-docker\" class=\"mobile-header\">Install docker</h1>\n<h3 id=\"zfs\" class=\"mobile-header\">ZFS</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">zfs create -o mountpoint=/var/lib/docker rpool/docker\nmkdir /etc/systemd/system/docker.service.d\ncurl -q -LSs https://github.com/casjay-base/howtos/raw/main/proxmox/storage-driver.conf &gt;/etc/systemd/system/docker.service.d/storage-driver.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker\" class=\"mobile-header\">Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;\napt-get update &amp;&amp; apt-get install docker-ce -y</code></pre>\n      </div>\n    </div>\n<h3 id=\"yacht\" class=\"mobile-header\">Yacht</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p &quot;/root/.local/share/srv/docker/yacht/&quot;\nsudo docker run -d \\\n    --name=&quot;yacht&quot; \\\n    --hostname &quot;yacht&quot; \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=&quot;${TZ:-${TIMEZONE:-America/New_York}}&quot; \\\n    -v &quot;/root/.local/share/srv/docker/yacht/data&quot;:/data \\\n    -v &quot;/root/.local/share/srv/docker/yacht/config&quot;:/config \\\n    -p 8000:8000 \\\n    selfhostedpro/yacht 1&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h3 id=\"portainer\" class=\"mobile-header\">Portainer</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /root/.local/share/srv/docker/portainer/data\ndocker run -d -p 9000:9000 \\\n    --name portainer \\\n    -v /root/.local/share/srv/docker/portainer/data:/data \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    portainer/portainer-ce</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx\" class=\"mobile-header\">nginx</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /root/.local/share/srv/docker/nginx-manager/files/{data,config,letsencrypt}\nsudo docker run -d \\\n    --name=&quot;nginx-manager&quot; \\\n    --hostname &quot;$HOSTNAME&quot; \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=&quot;America/New_York&quot; \\\n    -e DISABLE_IPV6=true \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/data&quot;:/data \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/config&quot;:/app/config \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/letsencrypt&quot;:/etc/letsencrypt \\\n    -p 80:80 \\\n    -p 8888:81 \\\n    -p 443:443 \\\n    jc21/nginx-proxy-manager:2</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":160,"lastBuilt":"2025-09-14T06:13:14.589Z"},{"name":"rabbitmq","displayName":"Rabbitmq","slug":"rabbitmq","description":"Repo for rabbitmq","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rabbitmq","updatedAt":"2025-09-14T03:45:47Z","createdAt":"2025-09-08T03:15:11Z","readmeRaw":"# RabbitMQ Installation Guide\n\nRabbitMQ is a free and open-source message-queueing software and broker written in Erlang. Originally developed by Rabbit Technologies and now owned by VMware, RabbitMQ implements the Advanced Message Queuing Protocol (AMQP) and provides message routing, queuing, and delivery guarantees. It serves as a FOSS alternative to commercial message brokers like IBM MQ, Oracle WebLogic Server, or Microsoft Azure Service Bus, offering enterprise-grade reliability, clustering, and high availability without licensing costs, with features like message persistence, flexible routing, and cross-language support.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 1GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum (SSD recommended for message persistence)\n  - Network: Stable connectivity for clustering setups\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5672 (AMQP 0-9-1 and 1.0)\n  - Port 15672 (HTTP Management API)\n  - Port 25672 (Erlang distribution for clustering)\n  - Port 4369 (EPMD - Erlang Port Mapper Daemon)\n  - Port 35672-35682 (CLI tools)\n- **Dependencies**:\n  - Erlang/OTP (version 23.2+ for RabbitMQ 3.9+)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Add RabbitMQ repository\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash\n\n# Add Erlang repository\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash\n\n# Install Erlang\nsudo yum install -y erlang\n\n# Install RabbitMQ server\nsudo yum install -y rabbitmq-server\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5672/tcp\nsudo firewall-cmd --permanent --add-port=15672/tcp\nsudo firewall-cmd --permanent --add-port=25672/tcp\nsudo firewall-cmd --reload\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg apt-transport-https\n\n# Add RabbitMQ signing key\ncurl -fsSL https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA | sudo gpg --dearmor -o /usr/share/keyrings/com.rabbitmq.team.gpg\n\n# Add RabbitMQ repository\necho \"deb [signed-by=/usr/share/keyrings/com.rabbitmq.team.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/rabbitmq.list\n\n# Add Erlang repository\necho \"deb [signed-by=/usr/share/keyrings/com.rabbitmq.team.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/rabbitmq-erlang.list\n\n# Update package index\nsudo apt update\n\n# Install Erlang and RabbitMQ\nsudo apt install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\nsudo apt install -y rabbitmq-server\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo ufw allow 5672\nsudo ufw allow 15672\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n```\n\n### Arch Linux\n\n```bash\n# Install RabbitMQ from official repositories\nsudo pacman -S rabbitmq\n\n# Install Erlang (dependency)\nsudo pacman -S erlang-nox\n\n# Create rabbitmq user if not exists\nsudo useradd -r -s /sbin/nologin -d /var/lib/rabbitmq -c \"RabbitMQ messaging server\" rabbitmq\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n\n# Configuration location: /etc/rabbitmq/\n```\n\n### Alpine Linux\n\n```bash\n# Install RabbitMQ\napk add --no-cache rabbitmq-server rabbitmq-server-management\n\n# Install Erlang\napk add --no-cache erlang\n\n# Create rabbitmq user if not exists\nadduser -D -H -s /sbin/nologin -G rabbitmq rabbitmq\n\n# Set permissions\nchown -R rabbitmq:rabbitmq /var/lib/rabbitmq /var/log/rabbitmq\n\n# Enable and start service\nrc-update add rabbitmq default\nrc-service rabbitmq start\n\n# Enable management plugin\nrabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl add_user admin SecureAdminPassword123!\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nrabbitmqctl delete_user guest\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y rabbitmq-server erlang\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y rabbitmq-server erlang\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5672/tcp\nsudo firewall-cmd --permanent --add-port=15672/tcp\nsudo firewall-cmd --reload\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install rabbitmq\n\n# Start RabbitMQ service\nbrew services start rabbitmq\n\n# Or run manually\nsudo rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n\n# Configuration location: /usr/local/etc/rabbitmq/\n# Alternative: /opt/homebrew/etc/rabbitmq/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install rabbitmq erlang\n\n# Using ports\ncd /usr/ports/net/rabbitmq\nmake install clean\n\n# Enable RabbitMQ\necho 'rabbitmq_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice rabbitmq start\n\n# Enable management plugin\nrabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl add_user admin SecureAdminPassword123!\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nrabbitmqctl delete_user guest\n\n# Configuration location: /usr/local/etc/rabbitmq/\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install rabbitmq\n\n# Method 2: Using Scoop\nscoop install rabbitmq\n\n# Method 3: Manual installation\n# Download from https://www.rabbitmq.com/download.html\n# Install Erlang first, then RabbitMQ\n\n# Install as Windows service (automatic with installer)\n# The service is named \"RabbitMQ\"\n\n# Enable management plugin\nrabbitmq-plugins.bat enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl.bat add_user admin SecureAdminPassword123!\nrabbitmqctl.bat set_user_tags admin administrator\nrabbitmqctl.bat set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nrabbitmqctl.bat delete_user guest\n\n# Configuration location: %APPDATA%\\RabbitMQ\\\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create rabbitmq user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/rabbitmq -s /sbin/nologin -c \"RabbitMQ messaging server\" rabbitmq\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/rabbitmq/rabbitmq.conf`\n- Debian/Ubuntu: `/etc/rabbitmq/rabbitmq.conf`\n- Arch Linux: `/etc/rabbitmq/rabbitmq.conf`\n- Alpine Linux: `/etc/rabbitmq/rabbitmq.conf`\n- openSUSE/SLES: `/etc/rabbitmq/rabbitmq.conf`\n- macOS: `/usr/local/etc/rabbitmq/rabbitmq.conf`\n- FreeBSD: `/usr/local/etc/rabbitmq/rabbitmq.conf`\n- Windows: `%APPDATA%\\RabbitMQ\\rabbitmq.conf`\n\n3. **Essential settings to change**:\n\n```ini\n# /etc/rabbitmq/rabbitmq.conf\n# Network and clustering\nlisteners.tcp.default = 5672\nmanagement.tcp.port = 15672\n\n# Security\nloopback_users.guest = false\ndefault_user = admin\ndefault_pass = SecureAdminPassword123!\n\n# Logging\nlog.file.level = info\nlog.file = /var/log/rabbitmq/rabbitmq.log\nlog.file.rotation.size = 10485760\n\n# Memory and disk limits\nvm_memory_high_watermark.relative = 0.6\ndisk_free_limit.absolute = 1GB\n\n# Message TTL and limits\ndefault_user_tags.administrator = true\nheartbeat = 60\n\n# Clustering (if multiple nodes)\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@node1\ncluster_formation.classic_config.nodes.2 = rabbit@node2\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if RabbitMQ is running\nsudo systemctl status rabbitmq-server\n\n# Test connection\nrabbitmqctl status\n\n# Check cluster status\nrabbitmqctl cluster_status\n\n# List users\nrabbitmqctl list_users\n\n# List virtual hosts\nrabbitmqctl list_vhosts\n\n# Test management interface\ncurl -u admin:SecureAdminPassword123! http://localhost:15672/api/overview\n\n# Test AMQP connection\nrabbitmqctl eval 'rabbit_networking:tcp_listener_started(5672).'\n```\n\n**WARNING:** Remove or disable the default guest user and enable proper authentication!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable RabbitMQ to start on boot\nsudo systemctl enable rabbitmq-server\n\n# Start RabbitMQ\nsudo systemctl start rabbitmq-server\n\n# Stop RabbitMQ\nsudo systemctl stop rabbitmq-server\n\n# Restart RabbitMQ\nsudo systemctl restart rabbitmq-server\n\n# Reload configuration (graceful)\nsudo rabbitmqctl eval 'application:stop(rabbitmq_management_agent), application:start(rabbitmq_management_agent).'\n\n# Check status\nsudo systemctl status rabbitmq-server\n\n# View logs\nsudo journalctl -u rabbitmq-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable RabbitMQ to start on boot\nrc-update add rabbitmq default\n\n# Start RabbitMQ\nrc-service rabbitmq start\n\n# Stop RabbitMQ\nrc-service rabbitmq stop\n\n# Restart RabbitMQ\nrc-service rabbitmq restart\n\n# Check status\nrc-service rabbitmq status\n\n# View logs\ntail -f /var/log/rabbitmq/rabbit@$(hostname).log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'rabbitmq_enable=\"YES\"' >> /etc/rc.conf\n\n# Start RabbitMQ\nservice rabbitmq start\n\n# Stop RabbitMQ\nservice rabbitmq stop\n\n# Restart RabbitMQ\nservice rabbitmq restart\n\n# Check status\nservice rabbitmq status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start rabbitmq\nbrew services stop rabbitmq\nbrew services restart rabbitmq\n\n# Check status\nbrew services list | grep rabbitmq\n\n# Manual control\nsudo rabbitmq-server -detached\nsudo rabbitmqctl shutdown\n```\n\n### Windows Service Manager\n\n```powershell\n# Start RabbitMQ service\nnet start RabbitMQ\n\n# Stop RabbitMQ service\nnet stop RabbitMQ\n\n# Using PowerShell\nStart-Service RabbitMQ\nStop-Service RabbitMQ\nRestart-Service RabbitMQ\n\n# Check status\nGet-Service RabbitMQ\n\n# View logs\nGet-EventLog -LogName Application -Source RabbitMQ\n```\n\n## Advanced Configuration\n\n### High Availability Configuration\n\n```ini\n# Cluster configuration\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-1\ncluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-2\ncluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-3\n\n# Enable quorum queues by default\ndefault_queue_type = quorum\n\n# HA policy for classic queues\nqueue_master_locator = min-masters\n```\n\n### Advanced Security Settings\n\n```ini\n# SSL/TLS configuration\nlisteners.ssl.default = 5671\nssl_options.cacertfile = /etc/rabbitmq/ssl/ca_certificate.pem\nssl_options.certfile = /etc/rabbitmq/ssl/server_certificate.pem\nssl_options.keyfile = /etc/rabbitmq/ssl/server_key.pem\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\n# Management over HTTPS\nmanagement.ssl.port = 15671\nmanagement.ssl.cacertfile = /etc/rabbitmq/ssl/ca_certificate.pem\nmanagement.ssl.certfile = /etc/rabbitmq/ssl/server_certificate.pem\nmanagement.ssl.keyfile = /etc/rabbitmq/ssl/server_key.pem\n\n# Authentication backends\nauth_backends.1 = rabbit_auth_backend_ldap\nauth_backends.2 = rabbit_auth_backend_internal\n\n# LDAP configuration\nauth_ldap.servers.1 = ldap.example.com\nauth_ldap.user_dn_pattern = cn=${username},ou=users,dc=example,dc=com\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/rabbitmq\nupstream rabbitmq_management {\n    server 127.0.0.1:15672 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:15673 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 80;\n    server_name rabbitmq.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name rabbitmq.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/rabbitmq.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/rabbitmq.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://rabbitmq_management;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for management UI\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend rabbitmq_management_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/rabbitmq.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rabbitmq_management_servers\n\nbackend rabbitmq_management_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /api/aliveness-test/%2F\n    server rabbitmq1 127.0.0.1:15672 check\n    server rabbitmq2 127.0.0.1:15673 check backup\n\nfrontend rabbitmq_amqp_frontend\n    bind *:5672\n    mode tcp\n    default_backend rabbitmq_amqp_servers\n\nbackend rabbitmq_amqp_servers\n    mode tcp\n    balance roundrobin\n    server rabbitmq1 127.0.0.1:5672 check\n    server rabbitmq2 127.0.0.1:5673 check backup\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate SSL certificates for RabbitMQ\nsudo mkdir -p /etc/rabbitmq/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/ca_key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /etc/rabbitmq/ssl/ca_key.pem -out /etc/rabbitmq/ssl/ca_certificate.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=RabbitMQ-CA\"\n\n# Create server certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/server_key.pem 4096\nsudo openssl req -new -key /etc/rabbitmq/ssl/server_key.pem -out /etc/rabbitmq/ssl/server_certificate_request.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=rabbitmq.example.com\"\nsudo openssl x509 -req -in /etc/rabbitmq/ssl/server_certificate_request.pem -CA /etc/rabbitmq/ssl/ca_certificate.pem -CAkey /etc/rabbitmq/ssl/ca_key.pem -CAcreateserial -out /etc/rabbitmq/ssl/server_certificate.pem -days 365\n\n# Create client certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/client_key.pem 4096\nsudo openssl req -new -key /etc/rabbitmq/ssl/client_key.pem -out /etc/rabbitmq/ssl/client_certificate_request.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=rabbitmq-client\"\nsudo openssl x509 -req -in /etc/rabbitmq/ssl/client_certificate_request.pem -CA /etc/rabbitmq/ssl/ca_certificate.pem -CAkey /etc/rabbitmq/ssl/ca_key.pem -CAcreateserial -out /etc/rabbitmq/ssl/client_certificate.pem -days 365\n\n# Set permissions\nsudo chown -R rabbitmq:rabbitmq /etc/rabbitmq/ssl\nsudo chmod 600 /etc/rabbitmq/ssl/*_key.pem\nsudo chmod 644 /etc/rabbitmq/ssl/*_certificate.pem /etc/rabbitmq/ssl/ca_certificate.pem\n```\n\n### User Management and Access Control\n\n```bash\n# Create application user\nsudo rabbitmqctl add_user myapp SecureAppPassword123!\nsudo rabbitmqctl set_permissions -p / myapp \"myapp\\..*\" \"myapp\\..*\" \"myapp\\..*\"\n\n# Create monitoring user\nsudo rabbitmqctl add_user monitoring MonitorPassword123!\nsudo rabbitmqctl set_user_tags monitoring monitoring\nsudo rabbitmqctl set_permissions -p / monitoring \"\" \"\" \".*\"\n\n# Create backup user\nsudo rabbitmqctl add_user backup BackupPassword123!\nsudo rabbitmqctl set_user_tags backup management\nsudo rabbitmqctl set_permissions -p / backup \"\" \"\" \".*\"\n\n# Create virtual hosts\nsudo rabbitmqctl add_vhost production\nsudo rabbitmqctl add_vhost staging\n\n# Set permissions for virtual hosts\nsudo rabbitmqctl set_permissions -p production myapp \".*\" \".*\" \".*\"\nsudo rabbitmqctl set_permissions -p staging myapp \".*\" \".*\" \".*\"\n\n# Set resource limits\nsudo rabbitmqctl set_user_limits myapp '{\"max-connections\": 100, \"max-channels\": 1000}'\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 5672\nsudo ufw allow from 192.168.1.0/24 to any port 15672\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=rabbitmq\nsudo firewall-cmd --permanent --zone=rabbitmq --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=5672/tcp\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=15672/tcp\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=25672/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 5672 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 15672 -j ACCEPT\nsudo iptables -save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {5672, 15672, 25672}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"RabbitMQ AMQP\" -Direction Inbound -Protocol TCP -LocalPort 5672 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName \"RabbitMQ Management\" -Direction Inbound -Protocol TCP -LocalPort 15672 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Queue and Exchange Configuration\n\n```bash\n# Create exchanges\nrabbitmqctl eval 'rabbit_exchange:declare({resource, <<\"/\">>, exchange, <<\"logs\">>}, topic, true, false, false, []).'\nrabbitmqctl eval 'rabbit_exchange:declare({resource, <<\"/\">>, exchange, <<\"tasks\">>}, direct, true, false, false, []).'\n\n# Create queues\nrabbitmqctl eval 'rabbit_amqqueue:declare({resource, <<\"/\">>, queue, <<\"error_logs\">>}, true, false, [], none, <<\"/\">>).'\nrabbitmqctl eval 'rabbit_amqqueue:declare({resource, <<\"/\">>, queue, <<\"task_queue\">>}, true, false, [], none, <<\"/\">>).'\n\n# Create bindings\nrabbitmqctl eval 'rabbit_binding:add({binding, {resource, <<\"/\">>, exchange, <<\"logs\">>}, <<\"error\">>, {resource, <<\"/\">>, queue, <<\"error_logs\">>}, []}).'\n\n# Set queue policies for HA\nsudo rabbitmqctl set_policy ha-all \".*\" '{\"ha-mode\":\"all\",\"ha-sync-mode\":\"automatic\"}'\n\n# Set TTL policy\nsudo rabbitmqctl set_policy TTL \".*\" '{\"message-ttl\":3600000}' --apply-to queues\n\n# Set queue length limit\nsudo rabbitmqctl set_policy max-length \".*\" '{\"max-length\":10000}' --apply-to queues\n```\n\n### Shovel Configuration (Message Transfer)\n\n```bash\n# Install shovel plugin\nsudo rabbitmq-plugins enable rabbitmq_shovel\nsudo rabbitmq-plugins enable rabbitmq_shovel_management\n\n# Create shovel (via management API)\ncurl -u admin:SecureAdminPassword123! -X PUT \\\n  http://localhost:15672/api/parameters/shovel/%2F/my-shovel \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"value\": {\n      \"src-protocol\": \"amqp091\",\n      \"src-uri\": \"amqp://guest:guest@source-server:5672/%2F\",\n      \"src-queue\": \"source-queue\",\n      \"dest-protocol\": \"amqp091\",\n      \"dest-uri\": \"amqp://guest:guest@dest-server:5672/%2F\",\n      \"dest-queue\": \"dest-queue\"\n    }\n  }'\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# RabbitMQ-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# RabbitMQ optimizations\nvm.swappiness = 1\nnet.core.somaxconn = 4096\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_tw_reuse = 1\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\nrabbitmq soft nofile 65536\nrabbitmq hard nofile 65536\nEOF\n\n# Set Erlang VM parameters\nsudo tee /etc/rabbitmq/rabbitmq-env.conf <<EOF\nRABBITMQ_SERVER_ERL_ARGS=\"+K true +A 128 +P 1048576\"\nRABBITMQ_CTL_ERL_ARGS=\"+K true\"\nEOF\n```\n\n### RabbitMQ Performance Configuration\n\n```ini\n# High-performance RabbitMQ configuration\n# /etc/rabbitmq/rabbitmq.conf\n\n# Memory and disk\nvm_memory_high_watermark.relative = 0.4\nvm_memory_high_watermark_paging_ratio = 0.3\ndisk_free_limit.absolute = 2GB\n\n# Clustering and replication\ncluster_partition_handling = pause_minority\ncluster_keepalive_interval = 10000\n\n# Connection and channel limits\nconnection_max = 65536\nchannel_max = 2047\n\n# Message store\nmsg_store_file_size_limit = 16777216\nqueue_index_embed_msgs_below = 4096\n\n# Lazy queues (for large queues)\nlazy_queue_explicit_gc_run_operation_threshold = 1000\n\n# Mnesia table loading\nmnesia_table_loading_retry_timeout = 30000\nmnesia_table_loading_retry_limit = 10\n```\n\n### Queue Optimization\n\n```bash\n# Enable lazy queues for large message backlogs\nrabbitmqctl set_policy lazy-queue \".*\" '{\"queue-mode\":\"lazy\"}' --apply-to queues\n\n# Configure quorum queues for better consistency\nrabbitmqctl set_policy quorum-queue \".*\" '{\"queue-type\":\"quorum\"}' --apply-to queues\n\n# Set delivery limits to prevent poison messages\nrabbitmqctl set_policy delivery-limit \".*\" '{\"delivery-limit\":10}' --apply-to queues\n\n# Configure stream queues for high throughput\nrabbitmqctl set_policy stream-queue \"stream.*\" '{\"queue-type\":\"stream\"}' --apply-to queues\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Node status and statistics\nrabbitmqctl status\nrabbitmqctl node_health_check\nrabbitmqctl environment\n\n# Queue monitoring\nrabbitmqctl list_queues name messages consumers memory\nrabbitmqctl list_exchanges name type\nrabbitmqctl list_bindings\n\n# Connection monitoring\nrabbitmqctl list_connections peer_host peer_port state channels\nrabbitmqctl list_channels connection name consumer_count messages_unacknowledged\n\n# Cluster monitoring\nrabbitmqctl cluster_status\nrabbitmqctl list_cluster_nodes\n\n# Memory and disk usage\nrabbitmqctl eval 'rabbit_vm:memory().'\nrabbitmqctl eval 'rabbit_disk_monitor:get_disk_free().'\n```\n\n### External Monitoring Setup\n\n```bash\n# Install RabbitMQ Exporter for Prometheus\nwget https://github.com/kbudde/rabbitmq_exporter/releases/download/v1.0.0/rabbitmq_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf rabbitmq_exporter-*.tar.gz\nsudo cp rabbitmq_exporter /usr/local/bin/\n\n# Create monitoring user in RabbitMQ\nsudo rabbitmqctl add_user prometheus PrometheusPassword123!\nsudo rabbitmqctl set_user_tags prometheus monitoring\n\n# Create systemd service\nsudo tee /etc/systemd/system/rabbitmq_exporter.service <<EOF\n[Unit]\nDescription=RabbitMQ Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=rabbitmq\nEnvironment=RABBIT_URL=\"http://prometheus:PrometheusPassword123!@localhost:15672\"\nExecStart=/usr/local/bin/rabbitmq_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now rabbitmq_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# rabbitmq-health-check.sh\n\n# Check RabbitMQ service\nif ! systemctl is-active rabbitmq-server >/dev/null 2>&1; then\n    echo \"CRITICAL: RabbitMQ service is not running\"\n    exit 2\nfi\n\n# Check node health\nif ! rabbitmqctl node_health_check >/dev/null 2>&1; then\n    echo \"CRITICAL: RabbitMQ node health check failed\"\n    exit 2\nfi\n\n# Check cluster status\nCLUSTER_STATUS=$(rabbitmqctl cluster_status --formatter json 2>/dev/null | jq -r '.running_nodes | length')\nif [ \"$CLUSTER_STATUS\" -lt 2 ]; then\n    echo \"WARNING: Less than 2 nodes running in cluster\"\n    exit 1\nfi\n\n# Check memory usage\nMEMORY_ALARM=$(rabbitmqctl status --formatter json 2>/dev/null | jq -r '.alarms | length')\nif [ \"$MEMORY_ALARM\" -gt 0 ]; then\n    echo \"WARNING: Memory alarms detected\"\n    exit 1\nfi\n\n# Check disk space\nDISK_ALARM=$(rabbitmqctl status --formatter json 2>/dev/null | jq -r '.disk_free_alarm')\nif [ \"$DISK_ALARM\" = \"true\" ]; then\n    echo \"WARNING: Disk space alarm active\"\n    exit 1\nfi\n\n# Check queue lengths\nMAX_QUEUE_LENGTH=$(rabbitmqctl list_queues messages --formatter json 2>/dev/null | jq -r 'max_by(.messages).messages')\nif [ \"$MAX_QUEUE_LENGTH\" -gt 100000 ]; then\n    echo \"WARNING: Queue length exceeds 100,000 messages\"\n    exit 1\nfi\n\necho \"OK: RabbitMQ is healthy\"\nexit 0\n```\n\n## Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# rabbitmq-backup.sh\n\nBACKUP_DIR=\"/backup/rabbitmq/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Export definitions (exchanges, queues, users, policies)\ncurl -u admin:SecureAdminPassword123! \\\n    http://localhost:15672/api/definitions \\\n    -o \"$BACKUP_DIR/definitions.json\"\n\n# Export queue messages (if needed for small queues)\nrabbitmqctl eval \"\n    application:load(rabbitmq_management_agent),\n    rabbitmq_management_db:get_all_queues(all_vhosts).\n\" > \"$BACKUP_DIR/queue_stats.txt\"\n\n# Backup configuration files\ntar czf \"$BACKUP_DIR/rabbitmq-config.tar.gz\" \\\n    /etc/rabbitmq/ \\\n    --exclude='*.log' \\\n    --exclude='*.pid'\n\n# Backup SSL certificates\nif [ -d /etc/rabbitmq/ssl ]; then\n    tar czf \"$BACKUP_DIR/rabbitmq-ssl.tar.gz\" /etc/rabbitmq/ssl/\nfi\n\n# Save cluster information\nrabbitmqctl cluster_status > \"$BACKUP_DIR/cluster_status.txt\"\nrabbitmqctl status > \"$BACKUP_DIR/node_status.txt\"\n\n# Create manifest\necho \"RabbitMQ Backup - $(date)\" > \"$BACKUP_DIR/backup_manifest.txt\"\necho \"Node: $(hostname)\" >> \"$BACKUP_DIR/backup_manifest.txt\"\necho \"Version: $(rabbitmqctl version)\" >> \"$BACKUP_DIR/backup_manifest.txt\"\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# rabbitmq-restore.sh\n\nBACKUP_DIR=\"$1\"\nif [ -z \"$BACKUP_DIR\" ]; then\n    echo \"Usage: $0 <backup-directory>\"\n    exit 1\nfi\n\n# Stop RabbitMQ (ensure clean state)\nsudo systemctl stop rabbitmq-server\n\n# Restore configuration\nsudo tar xzf \"$BACKUP_DIR/rabbitmq-config.tar.gz\" -C /\n\n# Restore SSL certificates\nif [ -f \"$BACKUP_DIR/rabbitmq-ssl.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/rabbitmq-ssl.tar.gz\" -C /\nfi\n\n# Start RabbitMQ\nsudo systemctl start rabbitmq-server\n\n# Wait for RabbitMQ to start\nsleep 10\n\n# Import definitions\ncurl -u admin:SecureAdminPassword123! \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d @\"$BACKUP_DIR/definitions.json\" \\\n    http://localhost:15672/api/definitions\n\n# Verify restore\nrabbitmqctl list_queues\nrabbitmqctl list_users\n\necho \"Restore completed from $BACKUP_DIR\"\n```\n\n### Message-Level Backup (Advanced)\n\n```bash\n#!/bin/bash\n# rabbitmq-message-backup.sh\n\nBACKUP_DIR=\"/backup/rabbitmq-messages/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Install shovel plugin for message transfer\nrabbitmq-plugins enable rabbitmq_shovel\nrabbitmq-plugins enable rabbitmq_shovel_management\n\n# Backup messages from all queues\nrabbitmqctl list_queues name --formatter json | jq -r '.[].name' | while read -r queue; do\n    if [ \"$queue\" != \"null\" ]; then\n        # Create shovel to backup queue\n        curl -u admin:SecureAdminPassword123! -X PUT \\\n            \"http://localhost:15672/api/parameters/shovel/%2F/backup-$queue\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\n                \\\"value\\\": {\n                    \\\"src-protocol\\\": \\\"amqp091\\\",\n                    \\\"src-uri\\\": \\\"amqp://admin:SecureAdminPassword123!@localhost:5672/%2F\\\",\n                    \\\"src-queue\\\": \\\"$queue\\\",\n                    \\\"dest-protocol\\\": \\\"amqp091\\\",\n                    \\\"dest-uri\\\": \\\"amqp://backup:BackupPassword123!@backup-server:5672/%2F\\\",\n                    \\\"dest-queue\\\": \\\"backup-$queue\\\"\n                }\n            }\"\n    fi\ndone\n\necho \"Message backup shovels created for all queues\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **RabbitMQ won't start**:\n```bash\n# Check logs\nsudo journalctl -u rabbitmq-server -f\nsudo tail -f /var/log/rabbitmq/rabbit@$(hostname).log\n\n# Check Erlang installation\nerl -version\n\n# Check disk space\ndf -h /var/lib/rabbitmq\n\n# Check permissions\nls -la /var/lib/rabbitmq\nls -la /var/log/rabbitmq\n\n# Reset node (last resort)\nsudo rabbitmqctl stop_app\nsudo rabbitmqctl reset\nsudo rabbitmqctl start_app\n```\n\n2. **Cluster issues**:\n```bash\n# Check cluster status\nrabbitmqctl cluster_status\n\n# Check network connectivity between nodes\ntelnet rabbitmq-node-2 25672\n\n# Check Erlang cookie consistency\nsudo cat /var/lib/rabbitmq/.erlang.cookie\n\n# Force cluster join\nsudo rabbitmqctl stop_app\nsudo rabbitmqctl join_cluster rabbit@rabbitmq-node-1\nsudo rabbitmqctl start_app\n```\n\n3. **Memory/disk alarms**:\n```bash\n# Check alarms\nrabbitmqctl status | grep alarms\n\n# Check memory usage\nrabbitmqctl eval 'rabbit_vm:memory().'\n\n# Check disk usage\ndf -h /var/lib/rabbitmq\n\n# Clear memory alarm (after fixing issue)\nrabbitmqctl eval 'vm_memory_monitor:set_vm_memory_high_watermark(0.4).'\n```\n\n4. **Connection issues**:\n```bash\n# Check if RabbitMQ is listening\nsudo ss -tlnp | grep :5672\n\n# Test AMQP connection\nrabbitmqctl eval 'rabbit_networking:tcp_listener_started(5672).'\n\n# Check user permissions\nrabbitmqctl list_user_permissions admin\n\n# Test with management API\ncurl -u admin:SecureAdminPassword123! http://localhost:15672/api/overview\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho 'log.file.level = debug' >> /etc/rabbitmq/rabbitmq.conf\n\n# Enable connection logging\necho 'log.connection.level = debug' >> /etc/rabbitmq/rabbitmq.conf\n\n# Enable channel logging  \necho 'log.channel.level = debug' >> /etc/rabbitmq/rabbitmq.conf\n\n# Restart to apply\nsudo systemctl restart rabbitmq-server\n\n# View debug logs\nsudo tail -f /var/log/rabbitmq/rabbit@$(hostname).log\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update rabbitmq-server\nsudo yum update rabbitmq-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade rabbitmq-server\n\n# Arch Linux\nsudo pacman -Syu rabbitmq\n\n# Alpine Linux\napk update\napk upgrade rabbitmq-server\n\n# openSUSE\nsudo zypper update rabbitmq-server\n\n# FreeBSD\npkg update\npkg upgrade rabbitmq\n\n# Always backup before updates\n./rabbitmq-backup.sh\n\n# Test after updates\nrabbitmqctl status\nsudo systemctl restart rabbitmq-server\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# rabbitmq-maintenance.sh\n\n# Rotate logs\nrabbitmqctl rotate_logs\n\n# Check node health\nrabbitmqctl node_health_check\n\n# Clean up old definitions backup\nfind /backup/rabbitmq -name \"*.json\" -mtime +30 -delete\n\n# Optimize memory usage\nrabbitmqctl eval 'erlang:garbage_collect().'\n\n# Check and clean old message store files\nrabbitmqctl eval 'rabbit_msg_store_gc:gc().'\n\n# Check queue statistics\nrabbitmqctl list_queues name messages consumers memory | \\\n    awk '$2 > 1000 {print \"Queue \" $1 \" has \" $2 \" messages\"}'\n\necho \"RabbitMQ maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/rabbitmq-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/rabbitmq <<EOF\n/var/log/rabbitmq/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    sharedscripts\n    postrotate\n        rabbitmqctl rotate_logs\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Python (pika) Integration\n\n```python\nimport pika\nimport ssl\n\n# Basic connection\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost', port=5672,\n                            credentials=pika.PlainCredentials('myapp', 'SecureAppPassword123!'))\n)\nchannel = connection.channel()\n\n# SSL connection\nssl_context = ssl.create_default_context(cafile='/etc/rabbitmq/ssl/ca_certificate.pem')\nssl_context.check_hostname = False\n\nssl_connection = pika.BlockingConnection(\n    pika.ConnectionParameters(\n        host='localhost',\n        port=5671,\n        credentials=pika.PlainCredentials('myapp', 'SecureAppPassword123!'),\n        ssl_options=pika.SSLOptions(ssl_context)\n    )\n)\n\n# Declare queue and exchange\nchannel.exchange_declare(exchange='task_exchange', exchange_type='direct')\nchannel.queue_declare(queue='task_queue', durable=True)\nchannel.queue_bind(exchange='task_exchange', queue='task_queue', routing_key='task')\n\n# Publish message\nchannel.basic_publish(\n    exchange='task_exchange',\n    routing_key='task',\n    body='Hello, RabbitMQ!',\n    properties=pika.BasicProperties(delivery_mode=2)  # Make message persistent\n)\n\n# Consume messages\ndef callback(ch, method, properties, body):\n    print(f\"Received: {body}\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(queue='task_queue', on_message_callback=callback)\nchannel.start_consuming()\n```\n\n### Node.js (amqplib) Integration\n\n```javascript\nconst amqp = require('amqplib');\nconst fs = require('fs');\n\n// Basic connection\nasync function connectBasic() {\n    const connection = await amqp.connect('amqp://myapp:SecureAppPassword123!@localhost:5672');\n    return connection;\n}\n\n// SSL connection\nasync function connectSSL() {\n    const connection = await amqp.connect({\n        protocol: 'amqps',\n        hostname: 'localhost',\n        port: 5671,\n        username: 'myapp',\n        password: 'SecureAppPassword123!',\n        ca: [fs.readFileSync('/etc/rabbitmq/ssl/ca_certificate.pem')],\n        cert: fs.readFileSync('/etc/rabbitmq/ssl/client_certificate.pem'),\n        key: fs.readFileSync('/etc/rabbitmq/ssl/client_key.pem')\n    });\n    return connection;\n}\n\n// Publisher\nasync function publishMessage() {\n    const connection = await connectBasic();\n    const channel = await connection.createChannel();\n    \n    const exchange = 'task_exchange';\n    const routingKey = 'task';\n    const message = 'Hello from Node.js!';\n    \n    await channel.assertExchange(exchange, 'direct', { durable: true });\n    await channel.publish(exchange, routingKey, Buffer.from(message), { persistent: true });\n    \n    console.log('Message sent');\n    await channel.close();\n    await connection.close();\n}\n\n// Consumer\nasync function consumeMessages() {\n    const connection = await connectBasic();\n    const channel = await connection.createChannel();\n    \n    const queue = 'task_queue';\n    \n    await channel.assertQueue(queue, { durable: true });\n    await channel.prefetch(1);\n    \n    console.log('Waiting for messages...');\n    \n    channel.consume(queue, async (message) => {\n        if (message) {\n            console.log('Received:', message.content.toString());\n            // Process message\n            channel.ack(message);\n        }\n    });\n}\n```\n\n### Java (Spring AMQP) Integration\n\n```java\n// Configuration\n@Configuration\n@EnableRabbit\npublic class RabbitConfig {\n    \n    @Bean\n    public ConnectionFactory connectionFactory() {\n        CachingConnectionFactory factory = new CachingConnectionFactory(\"localhost\");\n        factory.setPort(5672);\n        factory.setUsername(\"myapp\");\n        factory.setPassword(\"SecureAppPassword123!\");\n        factory.setVirtualHost(\"/\");\n        return factory;\n    }\n    \n    @Bean\n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\n        template.setMandatory(true);\n        return template;\n    }\n    \n    @Bean\n    public DirectExchange taskExchange() {\n        return new DirectExchange(\"task_exchange\", true, false);\n    }\n    \n    @Bean\n    public Queue taskQueue() {\n        return QueueBuilder.durable(\"task_queue\").build();\n    }\n    \n    @Bean\n    public Binding taskBinding() {\n        return BindingBuilder.bind(taskQueue()).to(taskExchange()).with(\"task\");\n    }\n}\n\n// Producer\n@Service\npublic class MessageProducer {\n    \n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n    \n    public void sendMessage(String message) {\n        rabbitTemplate.convertAndSend(\"task_exchange\", \"task\", message);\n    }\n}\n\n// Consumer\n@Service\npublic class MessageConsumer {\n    \n    @RabbitListener(queues = \"task_queue\")\n    public void receiveMessage(String message) {\n        System.out.println(\"Received: \" + message);\n        // Process message\n    }\n}\n```\n\n### Go (amqp091-go) Integration\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc connectRabbitMQ() (*amqp091.Connection, error) {\n    return amqp091.Dial(\"amqp://myapp:SecureAppPassword123!@localhost:5672/\")\n}\n\nfunc publishMessage(message string) error {\n    conn, err := connectRabbitMQ()\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    ch, err := conn.Channel()\n    if err != nil {\n        return err\n    }\n    defer ch.Close()\n\n    // Declare exchange\n    err = ch.ExchangeDeclare(\n        \"task_exchange\",\n        \"direct\",\n        true,  // durable\n        false, // auto-deleted\n        false, // internal\n        false, // no-wait\n        nil,   // arguments\n    )\n    if err != nil {\n        return err\n    }\n\n    // Declare queue\n    _, err = ch.QueueDeclare(\n        \"task_queue\",\n        true,  // durable\n        false, // delete when unused\n        false, // exclusive\n        false, // no-wait\n        nil,   // arguments\n    )\n    if err != nil {\n        return err\n    }\n\n    // Publish message\n    return ch.Publish(\n        \"task_exchange\",\n        \"task\",\n        false, // mandatory\n        false, // immediate\n        amqp091.Publishing{\n            ContentType:  \"text/plain\",\n            Body:         []byte(message),\n            DeliveryMode: amqp091.Persistent,\n        },\n    )\n}\n\nfunc consumeMessages() error {\n    conn, err := connectRabbitMQ()\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    ch, err := conn.Channel()\n    if err != nil {\n        return err\n    }\n    defer ch.Close()\n\n    msgs, err := ch.Consume(\n        \"task_queue\",\n        \"\",    // consumer\n        false, // auto-ack\n        false, // exclusive\n        false, // no-local\n        false, // no-wait\n        nil,   // args\n    )\n    if err != nil {\n        return err\n    }\n\n    forever := make(chan bool)\n\n    go func() {\n        for d := range msgs {\n            log.Printf(\"Received: %s\", d.Body)\n            // Process message\n            d.Ack(false)\n        }\n    }()\n\n    log.Printf(\"Waiting for messages...\")\n    <-forever\n    return nil\n}\n```\n\n## Additional Resources\n\n- [Official RabbitMQ Documentation](https://www.rabbitmq.com/documentation.html)\n- [RabbitMQ Tutorials](https://www.rabbitmq.com/getstarted.html)\n- [RabbitMQ Management Plugin](https://www.rabbitmq.com/management.html)\n- [RabbitMQ Clustering Guide](https://www.rabbitmq.com/clustering.html)\n- [RabbitMQ High Availability](https://www.rabbitmq.com/ha.html)\n- [AMQP 0-9-1 Protocol Reference](https://www.rabbitmq.com/amqp-0-9-1-reference.html)\n- [RabbitMQ Community](https://www.rabbitmq.com/community.html)\n- [RabbitMQ GitHub Repository](https://github.com/rabbitmq/rabbitmq-server)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"rabbitmq-installation-guide\" class=\"mobile-header\">RabbitMQ Installation Guide</h1>\n<p class=\"mobile-paragraph\">RabbitMQ is a free and open-source message-queueing software and broker written in Erlang. Originally developed by Rabbit Technologies and now owned by VMware, RabbitMQ implements the Advanced Message Queuing Protocol (AMQP) and provides message routing, queuing, and delivery guarantees. It serves as a FOSS alternative to commercial message brokers like IBM MQ, Oracle WebLogic Server, or Microsoft Azure Service Bus, offering enterprise-grade reliability, clustering, and high availability without licensing costs, with features like message persistence, flexible routing, and cross-language support.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum (SSD recommended for message persistence)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for clustering setups</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5672 (AMQP 0-9-1 and 1.0)</li>\n<li class=\"mobile-list-item\">Port 15672 (HTTP Management API)</li>\n<li class=\"mobile-list-item\">Port 25672 (Erlang distribution for clustering)</li>\n<li class=\"mobile-list-item\">Port 4369 (EPMD - Erlang Port Mapper Daemon)</li>\n<li class=\"mobile-list-item\">Port 35672-35682 (CLI tools)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Erlang/OTP (version 23.2+ for RabbitMQ 3.9+)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add RabbitMQ repository\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash\n\n# Add Erlang repository\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash\n\n# Install Erlang\nsudo yum install -y erlang\n\n# Install RabbitMQ server\nsudo yum install -y rabbitmq-server\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5672/tcp\nsudo firewall-cmd --permanent --add-port=15672/tcp\nsudo firewall-cmd --permanent --add-port=25672/tcp\nsudo firewall-cmd --reload\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg apt-transport-https\n\n# Add RabbitMQ signing key\ncurl -fsSL https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA | sudo gpg --dearmor -o /usr/share/keyrings/com.rabbitmq.team.gpg\n\n# Add RabbitMQ repository\necho &quot;deb [signed-by=/usr/share/keyrings/com.rabbitmq.team.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/rabbitmq.list\n\n# Add Erlang repository\necho &quot;deb [signed-by=/usr/share/keyrings/com.rabbitmq.team.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/rabbitmq-erlang.list\n\n# Update package index\nsudo apt update\n\n# Install Erlang and RabbitMQ\nsudo apt install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\nsudo apt install -y rabbitmq-server\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo ufw allow 5672\nsudo ufw allow 15672\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install RabbitMQ from official repositories\nsudo pacman -S rabbitmq\n\n# Install Erlang (dependency)\nsudo pacman -S erlang-nox\n\n# Create rabbitmq user if not exists\nsudo useradd -r -s /sbin/nologin -d /var/lib/rabbitmq -c &quot;RabbitMQ messaging server&quot; rabbitmq\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n\n# Configuration location: /etc/rabbitmq/</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install RabbitMQ\napk add --no-cache rabbitmq-server rabbitmq-server-management\n\n# Install Erlang\napk add --no-cache erlang\n\n# Create rabbitmq user if not exists\nadduser -D -H -s /sbin/nologin -G rabbitmq rabbitmq\n\n# Set permissions\nchown -R rabbitmq:rabbitmq /var/lib/rabbitmq /var/log/rabbitmq\n\n# Enable and start service\nrc-update add rabbitmq default\nrc-service rabbitmq start\n\n# Enable management plugin\nrabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl add_user admin SecureAdminPassword123!\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nrabbitmqctl delete_user guest</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y rabbitmq-server erlang\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y rabbitmq-server erlang\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5672/tcp\nsudo firewall-cmd --permanent --add-port=15672/tcp\nsudo firewall-cmd --reload\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install rabbitmq\n\n# Start RabbitMQ service\nbrew services start rabbitmq\n\n# Or run manually\nsudo rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n\n# Configuration location: /usr/local/etc/rabbitmq/\n# Alternative: /opt/homebrew/etc/rabbitmq/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install rabbitmq erlang\n\n# Using ports\ncd /usr/ports/net/rabbitmq\nmake install clean\n\n# Enable RabbitMQ\necho &#039;rabbitmq_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice rabbitmq start\n\n# Enable management plugin\nrabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl add_user admin SecureAdminPassword123!\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nrabbitmqctl delete_user guest\n\n# Configuration location: /usr/local/etc/rabbitmq/</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install rabbitmq\n\n# Method 2: Using Scoop\nscoop install rabbitmq\n\n# Method 3: Manual installation\n# Download from https://www.rabbitmq.com/download.html\n# Install Erlang first, then RabbitMQ\n\n# Install as Windows service (automatic with installer)\n# The service is named &quot;RabbitMQ&quot;\n\n# Enable management plugin\nrabbitmq-plugins.bat enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl.bat add_user admin SecureAdminPassword123!\nrabbitmqctl.bat set_user_tags admin administrator\nrabbitmqctl.bat set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nrabbitmqctl.bat delete_user guest\n\n# Configuration location: %APPDATA%\\RabbitMQ\\</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create rabbitmq user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/rabbitmq -s /sbin/nologin -c &quot;RabbitMQ messaging server&quot; rabbitmq</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">%APPDATA%\\RabbitMQ\\rabbitmq.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/rabbitmq/rabbitmq.conf\n# Network and clustering\nlisteners.tcp.default = 5672\nmanagement.tcp.port = 15672\n\n# Security\nloopback_users.guest = false\ndefault_user = admin\ndefault_pass = SecureAdminPassword123!\n\n# Logging\nlog.file.level = info\nlog.file = /var/log/rabbitmq/rabbitmq.log\nlog.file.rotation.size = 10485760\n\n# Memory and disk limits\nvm_memory_high_watermark.relative = 0.6\ndisk_free_limit.absolute = 1GB\n\n# Message TTL and limits\ndefault_user_tags.administrator = true\nheartbeat = 60\n\n# Clustering (if multiple nodes)\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@node1\ncluster_formation.classic_config.nodes.2 = rabbit@node2</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if RabbitMQ is running\nsudo systemctl status rabbitmq-server\n\n# Test connection\nrabbitmqctl status\n\n# Check cluster status\nrabbitmqctl cluster_status\n\n# List users\nrabbitmqctl list_users\n\n# List virtual hosts\nrabbitmqctl list_vhosts\n\n# Test management interface\ncurl -u admin:SecureAdminPassword123! http://localhost:15672/api/overview\n\n# Test AMQP connection\nrabbitmqctl eval &#039;rabbit_networking:tcp_listener_started(5672).&#039;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Remove or disable the default guest user and enable proper authentication!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable RabbitMQ to start on boot\nsudo systemctl enable rabbitmq-server\n\n# Start RabbitMQ\nsudo systemctl start rabbitmq-server\n\n# Stop RabbitMQ\nsudo systemctl stop rabbitmq-server\n\n# Restart RabbitMQ\nsudo systemctl restart rabbitmq-server\n\n# Reload configuration (graceful)\nsudo rabbitmqctl eval &#039;application:stop(rabbitmq_management_agent), application:start(rabbitmq_management_agent).&#039;\n\n# Check status\nsudo systemctl status rabbitmq-server\n\n# View logs\nsudo journalctl -u rabbitmq-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable RabbitMQ to start on boot\nrc-update add rabbitmq default\n\n# Start RabbitMQ\nrc-service rabbitmq start\n\n# Stop RabbitMQ\nrc-service rabbitmq stop\n\n# Restart RabbitMQ\nrc-service rabbitmq restart\n\n# Check status\nrc-service rabbitmq status\n\n# View logs\ntail -f /var/log/rabbitmq/rabbit@$(hostname).log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;rabbitmq_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start RabbitMQ\nservice rabbitmq start\n\n# Stop RabbitMQ\nservice rabbitmq stop\n\n# Restart RabbitMQ\nservice rabbitmq restart\n\n# Check status\nservice rabbitmq status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start rabbitmq\nbrew services stop rabbitmq\nbrew services restart rabbitmq\n\n# Check status\nbrew services list | grep rabbitmq\n\n# Manual control\nsudo rabbitmq-server -detached\nsudo rabbitmqctl shutdown</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start RabbitMQ service\nnet start RabbitMQ\n\n# Stop RabbitMQ service\nnet stop RabbitMQ\n\n# Using PowerShell\nStart-Service RabbitMQ\nStop-Service RabbitMQ\nRestart-Service RabbitMQ\n\n# Check status\nGet-Service RabbitMQ\n\n# View logs\nGet-EventLog -LogName Application -Source RabbitMQ</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-configuration\" class=\"mobile-header\">High Availability Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Cluster configuration\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-1\ncluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-2\ncluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-3\n\n# Enable quorum queues by default\ndefault_queue_type = quorum\n\n# HA policy for classic queues\nqueue_master_locator = min-masters</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># SSL/TLS configuration\nlisteners.ssl.default = 5671\nssl_options.cacertfile = /etc/rabbitmq/ssl/ca_certificate.pem\nssl_options.certfile = /etc/rabbitmq/ssl/server_certificate.pem\nssl_options.keyfile = /etc/rabbitmq/ssl/server_key.pem\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\n# Management over HTTPS\nmanagement.ssl.port = 15671\nmanagement.ssl.cacertfile = /etc/rabbitmq/ssl/ca_certificate.pem\nmanagement.ssl.certfile = /etc/rabbitmq/ssl/server_certificate.pem\nmanagement.ssl.keyfile = /etc/rabbitmq/ssl/server_key.pem\n\n# Authentication backends\nauth_backends.1 = rabbit_auth_backend_ldap\nauth_backends.2 = rabbit_auth_backend_internal\n\n# LDAP configuration\nauth_ldap.servers.1 = ldap.example.com\nauth_ldap.user_dn_pattern = cn=${username},ou=users,dc=example,dc=com</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/rabbitmq\nupstream rabbitmq_management {\n    server 127.0.0.1:15672 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:15673 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 80;\n    server_name rabbitmq.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name rabbitmq.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/rabbitmq.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/rabbitmq.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://rabbitmq_management;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for management UI\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend rabbitmq_management_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/rabbitmq.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rabbitmq_management_servers\n\nbackend rabbitmq_management_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /api/aliveness-test/%2F\n    server rabbitmq1 127.0.0.1:15672 check\n    server rabbitmq2 127.0.0.1:15673 check backup\n\nfrontend rabbitmq_amqp_frontend\n    bind *:5672\n    mode tcp\n    default_backend rabbitmq_amqp_servers\n\nbackend rabbitmq_amqp_servers\n    mode tcp\n    balance roundrobin\n    server rabbitmq1 127.0.0.1:5672 check\n    server rabbitmq2 127.0.0.1:5673 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates for RabbitMQ\nsudo mkdir -p /etc/rabbitmq/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/ca_key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /etc/rabbitmq/ssl/ca_key.pem -out /etc/rabbitmq/ssl/ca_certificate.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=RabbitMQ-CA&quot;\n\n# Create server certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/server_key.pem 4096\nsudo openssl req -new -key /etc/rabbitmq/ssl/server_key.pem -out /etc/rabbitmq/ssl/server_certificate_request.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=rabbitmq.example.com&quot;\nsudo openssl x509 -req -in /etc/rabbitmq/ssl/server_certificate_request.pem -CA /etc/rabbitmq/ssl/ca_certificate.pem -CAkey /etc/rabbitmq/ssl/ca_key.pem -CAcreateserial -out /etc/rabbitmq/ssl/server_certificate.pem -days 365\n\n# Create client certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/client_key.pem 4096\nsudo openssl req -new -key /etc/rabbitmq/ssl/client_key.pem -out /etc/rabbitmq/ssl/client_certificate_request.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=rabbitmq-client&quot;\nsudo openssl x509 -req -in /etc/rabbitmq/ssl/client_certificate_request.pem -CA /etc/rabbitmq/ssl/ca_certificate.pem -CAkey /etc/rabbitmq/ssl/ca_key.pem -CAcreateserial -out /etc/rabbitmq/ssl/client_certificate.pem -days 365\n\n# Set permissions\nsudo chown -R rabbitmq:rabbitmq /etc/rabbitmq/ssl\nsudo chmod 600 /etc/rabbitmq/ssl/*_key.pem\nsudo chmod 644 /etc/rabbitmq/ssl/*_certificate.pem /etc/rabbitmq/ssl/ca_certificate.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-management-and-access-control\" class=\"mobile-header\">User Management and Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create application user\nsudo rabbitmqctl add_user myapp SecureAppPassword123!\nsudo rabbitmqctl set_permissions -p / myapp &quot;myapp\\..*&quot; &quot;myapp\\..*&quot; &quot;myapp\\..*&quot;\n\n# Create monitoring user\nsudo rabbitmqctl add_user monitoring MonitorPassword123!\nsudo rabbitmqctl set_user_tags monitoring monitoring\nsudo rabbitmqctl set_permissions -p / monitoring &quot;&quot; &quot;&quot; &quot;.*&quot;\n\n# Create backup user\nsudo rabbitmqctl add_user backup BackupPassword123!\nsudo rabbitmqctl set_user_tags backup management\nsudo rabbitmqctl set_permissions -p / backup &quot;&quot; &quot;&quot; &quot;.*&quot;\n\n# Create virtual hosts\nsudo rabbitmqctl add_vhost production\nsudo rabbitmqctl add_vhost staging\n\n# Set permissions for virtual hosts\nsudo rabbitmqctl set_permissions -p production myapp &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\nsudo rabbitmqctl set_permissions -p staging myapp &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Set resource limits\nsudo rabbitmqctl set_user_limits myapp &#039;{&quot;max-connections&quot;: 100, &quot;max-channels&quot;: 1000}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 5672\nsudo ufw allow from 192.168.1.0/24 to any port 15672\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=rabbitmq\nsudo firewall-cmd --permanent --zone=rabbitmq --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=5672/tcp\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=15672/tcp\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=25672/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 5672 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 15672 -j ACCEPT\nsudo iptables -save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {5672, 15672, 25672}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;RabbitMQ AMQP&quot; -Direction Inbound -Protocol TCP -LocalPort 5672 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;RabbitMQ Management&quot; -Direction Inbound -Protocol TCP -LocalPort 15672 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"queue-and-exchange-configuration\" class=\"mobile-header\">Queue and Exchange Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create exchanges\nrabbitmqctl eval &#039;rabbit_exchange:declare({resource, &lt;&lt;&quot;/&quot;&gt;&gt;, exchange, &lt;&lt;&quot;logs&quot;&gt;&gt;}, topic, true, false, false, []).&#039;\nrabbitmqctl eval &#039;rabbit_exchange:declare({resource, &lt;&lt;&quot;/&quot;&gt;&gt;, exchange, &lt;&lt;&quot;tasks&quot;&gt;&gt;}, direct, true, false, false, []).&#039;\n\n# Create queues\nrabbitmqctl eval &#039;rabbit_amqqueue:declare({resource, &lt;&lt;&quot;/&quot;&gt;&gt;, queue, &lt;&lt;&quot;error_logs&quot;&gt;&gt;}, true, false, [], none, &lt;&lt;&quot;/&quot;&gt;&gt;).&#039;\nrabbitmqctl eval &#039;rabbit_amqqueue:declare({resource, &lt;&lt;&quot;/&quot;&gt;&gt;, queue, &lt;&lt;&quot;task_queue&quot;&gt;&gt;}, true, false, [], none, &lt;&lt;&quot;/&quot;&gt;&gt;).&#039;\n\n# Create bindings\nrabbitmqctl eval &#039;rabbit_binding:add({binding, {resource, &lt;&lt;&quot;/&quot;&gt;&gt;, exchange, &lt;&lt;&quot;logs&quot;&gt;&gt;}, &lt;&lt;&quot;error&quot;&gt;&gt;, {resource, &lt;&lt;&quot;/&quot;&gt;&gt;, queue, &lt;&lt;&quot;error_logs&quot;&gt;&gt;}, []}).&#039;\n\n# Set queue policies for HA\nsudo rabbitmqctl set_policy ha-all &quot;.*&quot; &#039;{&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#039;\n\n# Set TTL policy\nsudo rabbitmqctl set_policy TTL &quot;.*&quot; &#039;{&quot;message-ttl&quot;:3600000}&#039; --apply-to queues\n\n# Set queue length limit\nsudo rabbitmqctl set_policy max-length &quot;.*&quot; &#039;{&quot;max-length&quot;:10000}&#039; --apply-to queues</code></pre>\n      </div>\n    </div>\n<h3 id=\"shovel-configuration-message-transfer\" class=\"mobile-header\">Shovel Configuration (Message Transfer)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install shovel plugin\nsudo rabbitmq-plugins enable rabbitmq_shovel\nsudo rabbitmq-plugins enable rabbitmq_shovel_management\n\n# Create shovel (via management API)\ncurl -u admin:SecureAdminPassword123! -X PUT \\\n  http://localhost:15672/api/parameters/shovel/%2F/my-shovel \\\n  -H &quot;Content-Type: application/json&quot; \\\n  -d &#039;{\n    &quot;value&quot;: {\n      &quot;src-protocol&quot;: &quot;amqp091&quot;,\n      &quot;src-uri&quot;: &quot;amqp://guest:guest@source-server:5672/%2F&quot;,\n      &quot;src-queue&quot;: &quot;source-queue&quot;,\n      &quot;dest-protocol&quot;: &quot;amqp091&quot;,\n      &quot;dest-uri&quot;: &quot;amqp://guest:guest@dest-server:5672/%2F&quot;,\n      &quot;dest-queue&quot;: &quot;dest-queue&quot;\n    }\n  }&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RabbitMQ-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# RabbitMQ optimizations\nvm.swappiness = 1\nnet.core.somaxconn = 4096\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_tw_reuse = 1\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\nrabbitmq soft nofile 65536\nrabbitmq hard nofile 65536\nEOF\n\n# Set Erlang VM parameters\nsudo tee /etc/rabbitmq/rabbitmq-env.conf &lt;&lt;EOF\nRABBITMQ_SERVER_ERL_ARGS=&quot;+K true +A 128 +P 1048576&quot;\nRABBITMQ_CTL_ERL_ARGS=&quot;+K true&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rabbitmq-performance-configuration\" class=\"mobile-header\">RabbitMQ Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># High-performance RabbitMQ configuration\n# /etc/rabbitmq/rabbitmq.conf\n\n# Memory and disk\nvm_memory_high_watermark.relative = 0.4\nvm_memory_high_watermark_paging_ratio = 0.3\ndisk_free_limit.absolute = 2GB\n\n# Clustering and replication\ncluster_partition_handling = pause_minority\ncluster_keepalive_interval = 10000\n\n# Connection and channel limits\nconnection_max = 65536\nchannel_max = 2047\n\n# Message store\nmsg_store_file_size_limit = 16777216\nqueue_index_embed_msgs_below = 4096\n\n# Lazy queues (for large queues)\nlazy_queue_explicit_gc_run_operation_threshold = 1000\n\n# Mnesia table loading\nmnesia_table_loading_retry_timeout = 30000\nmnesia_table_loading_retry_limit = 10</code></pre>\n      </div>\n    </div>\n<h3 id=\"queue-optimization\" class=\"mobile-header\">Queue Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable lazy queues for large message backlogs\nrabbitmqctl set_policy lazy-queue &quot;.*&quot; &#039;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#039; --apply-to queues\n\n# Configure quorum queues for better consistency\nrabbitmqctl set_policy quorum-queue &quot;.*&quot; &#039;{&quot;queue-type&quot;:&quot;quorum&quot;}&#039; --apply-to queues\n\n# Set delivery limits to prevent poison messages\nrabbitmqctl set_policy delivery-limit &quot;.*&quot; &#039;{&quot;delivery-limit&quot;:10}&#039; --apply-to queues\n\n# Configure stream queues for high throughput\nrabbitmqctl set_policy stream-queue &quot;stream.*&quot; &#039;{&quot;queue-type&quot;:&quot;stream&quot;}&#039; --apply-to queues</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Node status and statistics\nrabbitmqctl status\nrabbitmqctl node_health_check\nrabbitmqctl environment\n\n# Queue monitoring\nrabbitmqctl list_queues name messages consumers memory\nrabbitmqctl list_exchanges name type\nrabbitmqctl list_bindings\n\n# Connection monitoring\nrabbitmqctl list_connections peer_host peer_port state channels\nrabbitmqctl list_channels connection name consumer_count messages_unacknowledged\n\n# Cluster monitoring\nrabbitmqctl cluster_status\nrabbitmqctl list_cluster_nodes\n\n# Memory and disk usage\nrabbitmqctl eval &#039;rabbit_vm:memory().&#039;\nrabbitmqctl eval &#039;rabbit_disk_monitor:get_disk_free().&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install RabbitMQ Exporter for Prometheus\nwget https://github.com/kbudde/rabbitmq_exporter/releases/download/v1.0.0/rabbitmq_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf rabbitmq_exporter-*.tar.gz\nsudo cp rabbitmq_exporter /usr/local/bin/\n\n# Create monitoring user in RabbitMQ\nsudo rabbitmqctl add_user prometheus PrometheusPassword123!\nsudo rabbitmqctl set_user_tags prometheus monitoring\n\n# Create systemd service\nsudo tee /etc/systemd/system/rabbitmq_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=RabbitMQ Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=rabbitmq\nEnvironment=RABBIT_URL=&quot;http://prometheus:PrometheusPassword123!@localhost:15672&quot;\nExecStart=/usr/local/bin/rabbitmq_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now rabbitmq_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# rabbitmq-health-check.sh\n\n# Check RabbitMQ service\nif ! systemctl is-active rabbitmq-server &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: RabbitMQ service is not running&quot;\n    exit 2\nfi\n\n# Check node health\nif ! rabbitmqctl node_health_check &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: RabbitMQ node health check failed&quot;\n    exit 2\nfi\n\n# Check cluster status\nCLUSTER_STATUS=$(rabbitmqctl cluster_status --formatter json 2&gt;/dev/null | jq -r &#039;.running_nodes | length&#039;)\nif [ &quot;$CLUSTER_STATUS&quot; -lt 2 ]; then\n    echo &quot;WARNING: Less than 2 nodes running in cluster&quot;\n    exit 1\nfi\n\n# Check memory usage\nMEMORY_ALARM=$(rabbitmqctl status --formatter json 2&gt;/dev/null | jq -r &#039;.alarms | length&#039;)\nif [ &quot;$MEMORY_ALARM&quot; -gt 0 ]; then\n    echo &quot;WARNING: Memory alarms detected&quot;\n    exit 1\nfi\n\n# Check disk space\nDISK_ALARM=$(rabbitmqctl status --formatter json 2&gt;/dev/null | jq -r &#039;.disk_free_alarm&#039;)\nif [ &quot;$DISK_ALARM&quot; = &quot;true&quot; ]; then\n    echo &quot;WARNING: Disk space alarm active&quot;\n    exit 1\nfi\n\n# Check queue lengths\nMAX_QUEUE_LENGTH=$(rabbitmqctl list_queues messages --formatter json 2&gt;/dev/null | jq -r &#039;max_by(.messages).messages&#039;)\nif [ &quot;$MAX_QUEUE_LENGTH&quot; -gt 100000 ]; then\n    echo &quot;WARNING: Queue length exceeds 100,000 messages&quot;\n    exit 1\nfi\n\necho &quot;OK: RabbitMQ is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# rabbitmq-backup.sh\n\nBACKUP_DIR=&quot;/backup/rabbitmq/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Export definitions (exchanges, queues, users, policies)\ncurl -u admin:SecureAdminPassword123! \\\n    http://localhost:15672/api/definitions \\\n    -o &quot;$BACKUP_DIR/definitions.json&quot;\n\n# Export queue messages (if needed for small queues)\nrabbitmqctl eval &quot;\n    application:load(rabbitmq_management_agent),\n    rabbitmq_management_db:get_all_queues(all_vhosts).\n&quot; &gt; &quot;$BACKUP_DIR/queue_stats.txt&quot;\n\n# Backup configuration files\ntar czf &quot;$BACKUP_DIR/rabbitmq-config.tar.gz&quot; \\\n    /etc/rabbitmq/ \\\n    --exclude=&#039;*.log&#039; \\\n    --exclude=&#039;*.pid&#039;\n\n# Backup SSL certificates\nif [ -d /etc/rabbitmq/ssl ]; then\n    tar czf &quot;$BACKUP_DIR/rabbitmq-ssl.tar.gz&quot; /etc/rabbitmq/ssl/\nfi\n\n# Save cluster information\nrabbitmqctl cluster_status &gt; &quot;$BACKUP_DIR/cluster_status.txt&quot;\nrabbitmqctl status &gt; &quot;$BACKUP_DIR/node_status.txt&quot;\n\n# Create manifest\necho &quot;RabbitMQ Backup - $(date)&quot; &gt; &quot;$BACKUP_DIR/backup_manifest.txt&quot;\necho &quot;Node: $(hostname)&quot; &gt;&gt; &quot;$BACKUP_DIR/backup_manifest.txt&quot;\necho &quot;Version: $(rabbitmqctl version)&quot; &gt;&gt; &quot;$BACKUP_DIR/backup_manifest.txt&quot;\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# rabbitmq-restore.sh\n\nBACKUP_DIR=&quot;$1&quot;\nif [ -z &quot;$BACKUP_DIR&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-directory&gt;&quot;\n    exit 1\nfi\n\n# Stop RabbitMQ (ensure clean state)\nsudo systemctl stop rabbitmq-server\n\n# Restore configuration\nsudo tar xzf &quot;$BACKUP_DIR/rabbitmq-config.tar.gz&quot; -C /\n\n# Restore SSL certificates\nif [ -f &quot;$BACKUP_DIR/rabbitmq-ssl.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/rabbitmq-ssl.tar.gz&quot; -C /\nfi\n\n# Start RabbitMQ\nsudo systemctl start rabbitmq-server\n\n# Wait for RabbitMQ to start\nsleep 10\n\n# Import definitions\ncurl -u admin:SecureAdminPassword123! \\\n    -X POST \\\n    -H &quot;Content-Type: application/json&quot; \\\n    -d @&quot;$BACKUP_DIR/definitions.json&quot; \\\n    http://localhost:15672/api/definitions\n\n# Verify restore\nrabbitmqctl list_queues\nrabbitmqctl list_users\n\necho &quot;Restore completed from $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"message-level-backup-advanced\" class=\"mobile-header\">Message-Level Backup (Advanced)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# rabbitmq-message-backup.sh\n\nBACKUP_DIR=&quot;/backup/rabbitmq-messages/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Install shovel plugin for message transfer\nrabbitmq-plugins enable rabbitmq_shovel\nrabbitmq-plugins enable rabbitmq_shovel_management\n\n# Backup messages from all queues\nrabbitmqctl list_queues name --formatter json | jq -r &#039;.[].name&#039; | while read -r queue; do\n    if [ &quot;$queue&quot; != &quot;null&quot; ]; then\n        # Create shovel to backup queue\n        curl -u admin:SecureAdminPassword123! -X PUT \\\n            &quot;http://localhost:15672/api/parameters/shovel/%2F/backup-$queue&quot; \\\n            -H &quot;Content-Type: application/json&quot; \\\n            -d &quot;{\n                \\&quot;value\\&quot;: {\n                    \\&quot;src-protocol\\&quot;: \\&quot;amqp091\\&quot;,\n                    \\&quot;src-uri\\&quot;: \\&quot;amqp://admin:SecureAdminPassword123!@localhost:5672/%2F\\&quot;,\n                    \\&quot;src-queue\\&quot;: \\&quot;$queue\\&quot;,\n                    \\&quot;dest-protocol\\&quot;: \\&quot;amqp091\\&quot;,\n                    \\&quot;dest-uri\\&quot;: \\&quot;amqp://backup:BackupPassword123!@backup-server:5672/%2F\\&quot;,\n                    \\&quot;dest-queue\\&quot;: \\&quot;backup-$queue\\&quot;\n                }\n            }&quot;\n    fi\ndone\n\necho &quot;Message backup shovels created for all queues&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>RabbitMQ won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u rabbitmq-server -f\nsudo tail -f /var/log/rabbitmq/rabbit@$(hostname).log\n\n# Check Erlang installation\nerl -version\n\n# Check disk space\ndf -h /var/lib/rabbitmq\n\n# Check permissions\nls -la /var/lib/rabbitmq\nls -la /var/log/rabbitmq\n\n# Reset node (last resort)\nsudo rabbitmqctl stop_app\nsudo rabbitmqctl reset\nsudo rabbitmqctl start_app</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cluster issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster status\nrabbitmqctl cluster_status\n\n# Check network connectivity between nodes\ntelnet rabbitmq-node-2 25672\n\n# Check Erlang cookie consistency\nsudo cat /var/lib/rabbitmq/.erlang.cookie\n\n# Force cluster join\nsudo rabbitmqctl stop_app\nsudo rabbitmqctl join_cluster rabbit@rabbitmq-node-1\nsudo rabbitmqctl start_app</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Memory/disk alarms</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check alarms\nrabbitmqctl status | grep alarms\n\n# Check memory usage\nrabbitmqctl eval &#039;rabbit_vm:memory().&#039;\n\n# Check disk usage\ndf -h /var/lib/rabbitmq\n\n# Clear memory alarm (after fixing issue)\nrabbitmqctl eval &#039;vm_memory_monitor:set_vm_memory_high_watermark(0.4).&#039;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if RabbitMQ is listening\nsudo ss -tlnp | grep :5672\n\n# Test AMQP connection\nrabbitmqctl eval &#039;rabbit_networking:tcp_listener_started(5672).&#039;\n\n# Check user permissions\nrabbitmqctl list_user_permissions admin\n\n# Test with management API\ncurl -u admin:SecureAdminPassword123! http://localhost:15672/api/overview</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &#039;log.file.level = debug&#039; &gt;&gt; /etc/rabbitmq/rabbitmq.conf\n\n# Enable connection logging\necho &#039;log.connection.level = debug&#039; &gt;&gt; /etc/rabbitmq/rabbitmq.conf\n\n# Enable channel logging  \necho &#039;log.channel.level = debug&#039; &gt;&gt; /etc/rabbitmq/rabbitmq.conf\n\n# Restart to apply\nsudo systemctl restart rabbitmq-server\n\n# View debug logs\nsudo tail -f /var/log/rabbitmq/rabbit@$(hostname).log</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update rabbitmq-server\nsudo yum update rabbitmq-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade rabbitmq-server\n\n# Arch Linux\nsudo pacman -Syu rabbitmq\n\n# Alpine Linux\napk update\napk upgrade rabbitmq-server\n\n# openSUSE\nsudo zypper update rabbitmq-server\n\n# FreeBSD\npkg update\npkg upgrade rabbitmq\n\n# Always backup before updates\n./rabbitmq-backup.sh\n\n# Test after updates\nrabbitmqctl status\nsudo systemctl restart rabbitmq-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# rabbitmq-maintenance.sh\n\n# Rotate logs\nrabbitmqctl rotate_logs\n\n# Check node health\nrabbitmqctl node_health_check\n\n# Clean up old definitions backup\nfind /backup/rabbitmq -name &quot;*.json&quot; -mtime +30 -delete\n\n# Optimize memory usage\nrabbitmqctl eval &#039;erlang:garbage_collect().&#039;\n\n# Check and clean old message store files\nrabbitmqctl eval &#039;rabbit_msg_store_gc:gc().&#039;\n\n# Check queue statistics\nrabbitmqctl list_queues name messages consumers memory | \\\n    awk &#039;$2 &gt; 1000 {print &quot;Queue &quot; $1 &quot; has &quot; $2 &quot; messages&quot;}&#039;\n\necho &quot;RabbitMQ maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/rabbitmq-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/rabbitmq &lt;&lt;EOF\n/var/log/rabbitmq/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    sharedscripts\n    postrotate\n        rabbitmqctl rotate_logs\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-pika-integration\" class=\"mobile-header\">Python (pika) Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">import pika\nimport ssl\n\n# Basic connection\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host=&#039;localhost&#039;, port=5672,\n                            credentials=pika.PlainCredentials(&#039;myapp&#039;, &#039;SecureAppPassword123!&#039;))\n)\nchannel = connection.channel()\n\n# SSL connection\nssl_context = ssl.create_default_context(cafile=&#039;/etc/rabbitmq/ssl/ca_certificate.pem&#039;)\nssl_context.check_hostname = False\n\nssl_connection = pika.BlockingConnection(\n    pika.ConnectionParameters(\n        host=&#039;localhost&#039;,\n        port=5671,\n        credentials=pika.PlainCredentials(&#039;myapp&#039;, &#039;SecureAppPassword123!&#039;),\n        ssl_options=pika.SSLOptions(ssl_context)\n    )\n)\n\n# Declare queue and exchange\nchannel.exchange_declare(exchange=&#039;task_exchange&#039;, exchange_type=&#039;direct&#039;)\nchannel.queue_declare(queue=&#039;task_queue&#039;, durable=True)\nchannel.queue_bind(exchange=&#039;task_exchange&#039;, queue=&#039;task_queue&#039;, routing_key=&#039;task&#039;)\n\n# Publish message\nchannel.basic_publish(\n    exchange=&#039;task_exchange&#039;,\n    routing_key=&#039;task&#039;,\n    body=&#039;Hello, RabbitMQ!&#039;,\n    properties=pika.BasicProperties(delivery_mode=2)  # Make message persistent\n)\n\n# Consume messages\ndef callback(ch, method, properties, body):\n    print(f&quot;Received: {body}&quot;)\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(queue=&#039;task_queue&#039;, on_message_callback=callback)\nchannel.start_consuming()</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-amqplib-integration\" class=\"mobile-header\">Node.js (amqplib) Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">const amqp = require(&#039;amqplib&#039;);\nconst fs = require(&#039;fs&#039;);\n\n// Basic connection\nasync function connectBasic() {\n    const connection = await amqp.connect(&#039;amqp://myapp:SecureAppPassword123!@localhost:5672&#039;);\n    return connection;\n}\n\n// SSL connection\nasync function connectSSL() {\n    const connection = await amqp.connect({\n        protocol: &#039;amqps&#039;,\n        hostname: &#039;localhost&#039;,\n        port: 5671,\n        username: &#039;myapp&#039;,\n        password: &#039;SecureAppPassword123!&#039;,\n        ca: [fs.readFileSync(&#039;/etc/rabbitmq/ssl/ca_certificate.pem&#039;)],\n        cert: fs.readFileSync(&#039;/etc/rabbitmq/ssl/client_certificate.pem&#039;),\n        key: fs.readFileSync(&#039;/etc/rabbitmq/ssl/client_key.pem&#039;)\n    });\n    return connection;\n}\n\n// Publisher\nasync function publishMessage() {\n    const connection = await connectBasic();\n    const channel = await connection.createChannel();\n    \n    const exchange = &#039;task_exchange&#039;;\n    const routingKey = &#039;task&#039;;\n    const message = &#039;Hello from Node.js!&#039;;\n    \n    await channel.assertExchange(exchange, &#039;direct&#039;, { durable: true });\n    await channel.publish(exchange, routingKey, Buffer.from(message), { persistent: true });\n    \n    console.log(&#039;Message sent&#039;);\n    await channel.close();\n    await connection.close();\n}\n\n// Consumer\nasync function consumeMessages() {\n    const connection = await connectBasic();\n    const channel = await connection.createChannel();\n    \n    const queue = &#039;task_queue&#039;;\n    \n    await channel.assertQueue(queue, { durable: true });\n    await channel.prefetch(1);\n    \n    console.log(&#039;Waiting for messages...&#039;);\n    \n    channel.consume(queue, async (message) =&gt; {\n        if (message) {\n            console.log(&#039;Received:&#039;, message.content.toString());\n            // Process message\n            channel.ack(message);\n        }\n    });\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-spring-amqp-integration\" class=\"mobile-header\">Java (Spring AMQP) Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// Configuration\n@Configuration\n@EnableRabbit\npublic class RabbitConfig {\n    \n    @Bean\n    public ConnectionFactory connectionFactory() {\n        CachingConnectionFactory factory = new CachingConnectionFactory(&quot;localhost&quot;);\n        factory.setPort(5672);\n        factory.setUsername(&quot;myapp&quot;);\n        factory.setPassword(&quot;SecureAppPassword123!&quot;);\n        factory.setVirtualHost(&quot;/&quot;);\n        return factory;\n    }\n    \n    @Bean\n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\n        template.setMandatory(true);\n        return template;\n    }\n    \n    @Bean\n    public DirectExchange taskExchange() {\n        return new DirectExchange(&quot;task_exchange&quot;, true, false);\n    }\n    \n    @Bean\n    public Queue taskQueue() {\n        return QueueBuilder.durable(&quot;task_queue&quot;).build();\n    }\n    \n    @Bean\n    public Binding taskBinding() {\n        return BindingBuilder.bind(taskQueue()).to(taskExchange()).with(&quot;task&quot;);\n    }\n}\n\n// Producer\n@Service\npublic class MessageProducer {\n    \n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n    \n    public void sendMessage(String message) {\n        rabbitTemplate.convertAndSend(&quot;task_exchange&quot;, &quot;task&quot;, message);\n    }\n}\n\n// Consumer\n@Service\npublic class MessageConsumer {\n    \n    @RabbitListener(queues = &quot;task_queue&quot;)\n    public void receiveMessage(String message) {\n        System.out.println(&quot;Received: &quot; + message);\n        // Process message\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"go-amqp091-go-integration\" class=\"mobile-header\">Go (amqp091-go) Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"go\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">go</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-go\">package main\n\nimport (\n    &quot;log&quot;\n    &quot;github.com/rabbitmq/amqp091-go&quot;\n)\n\nfunc connectRabbitMQ() (*amqp091.Connection, error) {\n    return amqp091.Dial(&quot;amqp://myapp:SecureAppPassword123!@localhost:5672/&quot;)\n}\n\nfunc publishMessage(message string) error {\n    conn, err := connectRabbitMQ()\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    ch, err := conn.Channel()\n    if err != nil {\n        return err\n    }\n    defer ch.Close()\n\n    // Declare exchange\n    err = ch.ExchangeDeclare(\n        &quot;task_exchange&quot;,\n        &quot;direct&quot;,\n        true,  // durable\n        false, // auto-deleted\n        false, // internal\n        false, // no-wait\n        nil,   // arguments\n    )\n    if err != nil {\n        return err\n    }\n\n    // Declare queue\n    _, err = ch.QueueDeclare(\n        &quot;task_queue&quot;,\n        true,  // durable\n        false, // delete when unused\n        false, // exclusive\n        false, // no-wait\n        nil,   // arguments\n    )\n    if err != nil {\n        return err\n    }\n\n    // Publish message\n    return ch.Publish(\n        &quot;task_exchange&quot;,\n        &quot;task&quot;,\n        false, // mandatory\n        false, // immediate\n        amqp091.Publishing{\n            ContentType:  &quot;text/plain&quot;,\n            Body:         []byte(message),\n            DeliveryMode: amqp091.Persistent,\n        },\n    )\n}\n\nfunc consumeMessages() error {\n    conn, err := connectRabbitMQ()\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    ch, err := conn.Channel()\n    if err != nil {\n        return err\n    }\n    defer ch.Close()\n\n    msgs, err := ch.Consume(\n        &quot;task_queue&quot;,\n        &quot;&quot;,    // consumer\n        false, // auto-ack\n        false, // exclusive\n        false, // no-local\n        false, // no-wait\n        nil,   // args\n    )\n    if err != nil {\n        return err\n    }\n\n    forever := make(chan bool)\n\n    go func() {\n        for d := range msgs {\n            log.Printf(&quot;Received: %s&quot;, d.Body)\n            // Process message\n            d.Ack(false)\n        }\n    }()\n\n    log.Printf(&quot;Waiting for messages...&quot;)\n    &lt;-forever\n    return nil\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/documentation.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official RabbitMQ Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/getstarted.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ Tutorials</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/management.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ Management Plugin</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/clustering.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ Clustering Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/ha.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ High Availability</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/amqp-0-9-1-reference.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">AMQP 0-9-1 Protocol Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/community.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/rabbitmq/rabbitmq-server\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ GitHub Repository</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"21 min","wordCount":4178,"lastBuilt":"2025-09-14T06:13:00.425Z"},{"name":"raspbian","displayName":"Raspbian","slug":"raspbian","description":"Repo for raspbian","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/raspbian","updatedAt":"2025-09-08T03:15:35Z","createdAt":"2023-08-28T03:49:55Z","readmeRaw":"## My raspbian setup  \n  \nServers:  \n\n```shell\nsudo apt update && sudo apt dist-upgrade -yy -q && sudo reboot || echo \"Update has failed\"\nsudo apt install -yy git curl gnupg python3 vim-nox pass lynx net-tools ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c \"$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)\"\nbash -c \"$(curl -LsS -H \"Authorization: token ${GITHUB_ACCESS_TOKEN}\" ${MYPRIVATEDOTFILES_SERVER}/raw/main/install.sh)\"\n```\n\nDesktops:  \n\n```shell\nsudo apt update && sudo apt dist-upgrade -yy -q && sudo reboot || echo \"Update has failed\"\nsudo apt install -yy git curl gnupg python3 python3-pil libjpeg-dev vim-nox neomutt isync msmtp pass lynx notmuch abook urlview newsboat mplayer mpc mpd pianobar net-tools mpv ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c \"$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)\"\nbash -c \"$(curl -LsS -H \"Authorization: token ${GITHUB_ACCESS_TOKEN}\" ${MYPRIVATEDOTFILES_DESKTOP}/raw/main/install.sh)\"\n```\n  \n  \nResources:  \n<https://willemm.nl/track-aircraft-using-ads-b-groundstation-virtual-radar-server-vrs/>  \n","readmeHtml":"<h2 id=\"my-raspbian-setup\" class=\"mobile-header\">My raspbian setup  </h2>\n<p class=\"mobile-paragraph\">Servers:  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo apt update &amp;&amp; sudo apt dist-upgrade -yy -q &amp;&amp; sudo reboot || echo &quot;Update has failed&quot;\nsudo apt install -yy git curl gnupg python3 vim-nox pass lynx net-tools ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c &quot;$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)&quot;\nbash -c &quot;$(curl -LsS -H &quot;Authorization: token ${GITHUB_ACCESS_TOKEN}&quot; ${MYPRIVATEDOTFILES_SERVER}/raw/main/install.sh)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Desktops:  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo apt update &amp;&amp; sudo apt dist-upgrade -yy -q &amp;&amp; sudo reboot || echo &quot;Update has failed&quot;\nsudo apt install -yy git curl gnupg python3 python3-pil libjpeg-dev vim-nox neomutt isync msmtp pass lynx notmuch abook urlview newsboat mplayer mpc mpd pianobar net-tools mpv ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c &quot;$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)&quot;\nbash -c &quot;$(curl -LsS -H &quot;Authorization: token ${GITHUB_ACCESS_TOKEN}&quot; ${MYPRIVATEDOTFILES_DESKTOP}/raw/main/install.sh)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Resources:  </p>\n<p class=\"mobile-paragraph\"><https://willemm.nl/track-aircraft-using-ads-b-groundstation-virtual-radar-server-vrs/>  </p>","readTime":"1 min","wordCount":129,"lastBuilt":"2025-09-14T06:13:14.031Z"},{"name":"shinobi","displayName":"Shinobi","slug":"shinobi","description":"Repo for shinobi","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/shinobi","updatedAt":"2025-09-08T03:16:18Z","createdAt":"2023-08-28T03:50:05Z","readmeRaw":"# CentOS\n\n```bash\nsudo yum install -y ffmpeg gstreamer1-libav x264 x265 git curl gnupg2\nsudo yum install -y nodejs\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/centos.sh && INSTALL/centos.sh\n\n```\n\n# Debian\n\n```bash\nsudo apt update\nsudo apt install ffmpeg libav-tools x264 x265 git curl gnupg2\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt install nodejs -y\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/ubuntu.sh && INSTALL/ubuntu.sh\n```\n","readmeHtml":"<h1 id=\"centos\" class=\"mobile-header\">CentOS</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo yum install -y ffmpeg gstreamer1-libav x264 x265 git curl gnupg2\nsudo yum install -y nodejs\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/centos.sh &amp;&amp; INSTALL/centos.sh\n</code></pre>\n      </div>\n    </div>\n<h1 id=\"debian\" class=\"mobile-header\">Debian</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo apt update\nsudo apt install ffmpeg libav-tools x264 x265 git curl gnupg2\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt install nodejs -y\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/ubuntu.sh &amp;&amp; INSTALL/ubuntu.sh</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":81,"lastBuilt":"2025-09-14T06:13:13.330Z"},{"name":"sonarqube","displayName":"Sonarqube","slug":"sonarqube","description":"Repo for sonarqube","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/sonarqube","updatedAt":"2025-09-08T03:16:32Z","createdAt":"2025-09-08T03:16:21Z","readmeRaw":"## 👋 Welcome to sonarqube 🚀  \n\nsonarqube README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-sonarqube\" class=\"mobile-header\">👋 Welcome to sonarqube 🚀  </h2>\n<p class=\"mobile-paragraph\">sonarqube README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:13.021Z"},{"name":"strapi","displayName":"Strapi","slug":"strapi","description":"Repo for strapi","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/strapi","updatedAt":"2025-09-08T03:16:44Z","createdAt":"2025-09-08T03:16:33Z","readmeRaw":"## 👋 Welcome to strapi 🚀  \n\nstrapi README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-strapi\" class=\"mobile-header\">👋 Welcome to strapi 🚀  </h2>\n<p class=\"mobile-paragraph\">strapi README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:12.715Z"},{"name":"terraform","displayName":"Terraform","slug":"terraform","description":"Repo for terraform","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/terraform","updatedAt":"2025-09-14T03:45:58Z","createdAt":"2025-09-08T03:16:51Z","readmeRaw":"# Terraform Installation Guide\n\nTerraform is a free and open-source Infrastructure as Code (IaC) tool developed by HashiCorp for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers. Originally created by Mitchell Hashimoto in 2014, Terraform uses declarative configuration files to manage infrastructure resources. It serves as a FOSS alternative to commercial IaC solutions like AWS CloudFormation, Azure Resource Manager, or proprietary enterprise tools, offering enterprise-grade features including multi-cloud management, state management, provider ecosystem, and team collaboration without licensing costs.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for large infrastructures)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 5GB minimum (more for state files and provider binaries)\n  - Network: Stable connectivity for cloud provider APIs\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 12.0+\n- **Network Requirements**:\n  - HTTPS access to cloud provider APIs (port 443)\n  - Access to Terraform Registry (registry.terraform.io)\n  - Access to HashiCorp releases (releases.hashicorp.com)\n- **Dependencies**:\n  - Cloud provider CLI tools (aws-cli, azure-cli, gcloud)\n  - Git for configuration management\n  - Text editor or IDE\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required for installation\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n\n# Verify installation\nterraform version\n\n# Alternative: DNF for newer systems\nsudo dnf install -y yum-utils\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\nsudo dnf install -y terraform\n```\n\n### Debian/Ubuntu\n\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install Terraform\nsudo apt update\nsudo apt install -y terraform\n\n# Verify installation\nterraform version\n```\n\n### Arch Linux\n\n```bash\n# Install from community repository\nsudo pacman -S terraform\n\n# Alternative: Install from AUR\nyay -S terraform\n\n# Install additional tools\nsudo pacman -S terraform-docs tflint\n\n# Verify installation\nterraform version\n```\n\n### Alpine Linux\n\n```bash\n# Install from Alpine repositories\nsudo apk update\nsudo apk add terraform\n\n# Install additional tools\nsudo apk add bash git curl\n\n# Verify installation\nterraform version\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y terraform\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y terraform\n\n# Alternative: Add HashiCorp repository\nsudo zypper addrepo https://rpm.releases.hashicorp.com/SLES/hashicorp.repo\nsudo zypper refresh\nsudo zypper install terraform\n\n# Verify installation\nterraform version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/terraform\n\n# Alternative: Install specific version\nbrew install terraform@1.6\n\n# Verify installation\nterraform version\n\n# Using tfenv for version management\nbrew install tfenv\ntfenv install latest\ntfenv use latest\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install terraform\n\n# Using ports\ncd /usr/ports/sysutils/terraform\nmake install clean\n\n# Verify installation\nterraform version\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install terraform\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install terraform\n\n# Method 3: Manual installation\n# Download from https://releases.hashicorp.com/terraform/\n# Extract terraform.exe to C:\\terraform\n# Add C:\\terraform to PATH\n\n# Method 4: Using Winget\nwinget install HashiCorp.Terraform\n\n# Verify installation\nterraform version\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create terraform user** (optional for dedicated service):\n```bash\n# Linux systems\nsudo useradd -r -d /opt/terraform -s /sbin/nologin -c \"Terraform Service\" terraform\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/terraform/` (custom) or `/usr/local/bin/`\n- Debian/Ubuntu: `/etc/terraform/` (custom) or `/usr/local/bin/`\n- Arch Linux: `/etc/terraform/` (custom) or `/usr/bin/`\n- Alpine Linux: `/etc/terraform/` (custom) or `/usr/bin/`\n- openSUSE/SLES: `/etc/terraform/` (custom) or `/usr/local/bin/`\n- macOS: `/usr/local/etc/terraform/` or `/opt/homebrew/etc/terraform/`\n- FreeBSD: `/usr/local/etc/terraform/`\n- Windows: `C:\\terraform\\` or `%APPDATA%\\terraform\\`\n\n3. **Essential initial configuration**:\n\n```bash\n# Create workspace directory\nmkdir -p ~/terraform/projects\ncd ~/terraform/projects\n\n# Create first Terraform configuration\ncat > main.tf <<EOF\nterraform {\n  required_version = \">= 1.6\"\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~> 2.0\"\n    }\n  }\n}\n\nresource \"local_file\" \"hello_world\" {\n  content  = \"Hello, World from Terraform!\"\n  filename = \"hello.txt\"\n}\nEOF\n\n# Initialize Terraform\nterraform init\n\n# Validate configuration\nterraform validate\n\n# Plan deployment\nterraform plan\n\n# Apply configuration\nterraform apply\n```\n\n### Testing Initial Setup\n\n```bash\n# Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Format configuration files\nterraform fmt\n\n# Initialize and test basic functionality\nterraform init\nterraform plan\nterraform apply\n\n# List state\nterraform state list\n\n# Show state details\nterraform show\n\n# Clean up test resources\nterraform destroy\n```\n\n**WARNING:** Configure proper authentication for cloud providers before deploying real infrastructure!\n\n## Service Management\n\n### systemd (Linux Systems)\n\n```bash\n# Create systemd service for Terraform agent (if using)\nsudo tee /etc/systemd/system/terraform-agent.service <<EOF\n[Unit]\nDescription=Terraform Agent\nAfter=network.target\n\n[Service]\nType=simple\nUser=terraform\nWorkingDirectory=/opt/terraform\nExecStart=/usr/local/bin/terraform-agent\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable terraform-agent\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Create OpenRC service script\nsudo tee /etc/init.d/terraform-agent <<EOF\n#!/sbin/openrc-run\n\nname=\"terraform-agent\"\ndescription=\"Terraform Agent\"\ncommand=\"/usr/bin/terraform-agent\"\ncommand_user=\"terraform\"\ncommand_background=true\npidfile=\"/var/run/terraform-agent.pid\"\n\ndepend() {\n    need net\n}\nEOF\n\nsudo chmod +x /etc/init.d/terraform-agent\nrc-update add terraform-agent default\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Create rc.d script\nsudo tee /usr/local/etc/rc.d/terraform_agent <<EOF\n#!/bin/sh\n. /etc/rc.subr\n\nname=terraform_agent\nrcvar=terraform_agent_enable\ncommand=\"/usr/local/bin/terraform-agent\"\npidfile=\"/var/run/terraform_agent.pid\"\nstart_cmd=\"terraform_agent_start\"\n\nterraform_agent_start() {\n    daemon -p \\${pidfile} \\${command}\n}\n\nload_rc_config \\$name\nrun_rc_command \"\\$1\"\nEOF\n\nsudo chmod +x /usr/local/etc/rc.d/terraform_agent\necho 'terraform_agent_enable=\"YES\"' >> /etc/rc.conf\n```\n\n### launchd (macOS)\n\n```bash\n# Create LaunchDaemon plist\nsudo tee /Library/LaunchDaemons/com.hashicorp.terraform.agent.plist <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>com.hashicorp.terraform.agent</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>/usr/local/bin/terraform-agent</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n</dict>\n</plist>\nEOF\n\nsudo launchctl load /Library/LaunchDaemons/com.hashicorp.terraform.agent.plist\n```\n\n### Windows Service Manager\n\n```powershell\n# Install Terraform as Windows service using NSSM\nnssm install TerraformAgent \"C:\\terraform\\terraform-agent.exe\"\nnssm set TerraformAgent AppDirectory \"C:\\terraform\"\nnssm set TerraformAgent DisplayName \"Terraform Agent\"\nnssm set TerraformAgent Description \"HashiCorp Terraform Agent\"\nnssm start TerraformAgent\n\n# Alternative: Using sc command\nsc create TerraformAgent binPath=\"C:\\terraform\\terraform-agent.exe\" start=auto\nsc start TerraformAgent\n```\n\n## Advanced Configuration\n\n### Multi-Cloud Provider Setup\n\n```bash\n# Create comprehensive multi-cloud configuration\ncat > providers.tf <<EOF\nterraform {\n  required_version = \">= 1.6\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0\"\n    }\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 5.0\"\n    }\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \"~> 2.0\"\n    }\n    helm = {\n      source  = \"hashicorp/helm\"\n      version = \"~> 2.0\"\n    }\n  }\n  \n  # Remote state configuration\n  backend \"s3\" {\n    bucket = \"terraform-state-bucket\"\n    key    = \"infrastructure/terraform.tfstate\"\n    region = \"us-west-2\"\n    \n    # State locking with DynamoDB\n    dynamodb_table = \"terraform-state-lock\"\n    encrypt        = true\n  }\n}\n\n# AWS Provider\nprovider \"aws\" {\n  region = var.aws_region\n  \n  default_tags {\n    tags = {\n      Environment   = var.environment\n      ManagedBy     = \"terraform\"\n      Project       = var.project_name\n      Owner         = var.owner\n    }\n  }\n}\n\n# Azure Provider\nprovider \"azurerm\" {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n    key_vault {\n      purge_soft_delete_on_destroy = true\n    }\n  }\n}\n\n# Google Cloud Provider\nprovider \"google\" {\n  project = var.gcp_project_id\n  region  = var.gcp_region\n  zone    = var.gcp_zone\n}\n\n# Kubernetes Provider\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\n\n# Helm Provider\nprovider \"helm\" {\n  kubernetes {\n    config_path = \"~/.kube/config\"\n  }\n}\nEOF\n```\n\n### Enterprise Features Configuration\n\n```bash\n# Terraform Cloud/Enterprise configuration\ncat > cloud.tf <<EOF\nterraform {\n  cloud {\n    organization = \"your-organization\"\n    \n    workspaces {\n      name = \"production-infrastructure\"\n    }\n  }\n}\n\n# Remote execution configuration\nterraform {\n  cloud {\n    organization = \"your-organization\"\n    \n    workspaces {\n      tags = [\"production\", \"web-app\"]\n    }\n  }\n  \n  required_providers {\n    tfe = {\n      source  = \"hashicorp/tfe\"\n      version = \"~> 0.48\"\n    }\n  }\n}\n\n# Terraform Enterprise configuration\nprovider \"tfe\" {\n  hostname = \"terraform.company.com\"\n  token    = var.tfe_token\n}\n\n# Workspace configuration\nresource \"tfe_workspace\" \"production\" {\n  name         = \"production-infrastructure\"\n  organization = var.tfe_organization\n  \n  auto_apply = false\n  queue_all_runs = false\n  \n  terraform_version = \"1.6.4\"\n  \n  vcs_repo {\n    identifier     = \"company/infrastructure\"\n    branch         = \"main\"\n    oauth_token_id = var.vcs_oauth_token_id\n  }\n  \n  working_directory = \"environments/production\"\n}\nEOF\n```\n\n### Advanced State Management\n\n```bash\n# Encrypted remote state with multiple backends\ncat > backend-s3.tf <<EOF\n# S3 backend with encryption and locking\nterraform {\n  backend \"s3\" {\n    bucket         = \"terraform-state-bucket\"\n    key            = \"infrastructure/terraform.tfstate\"\n    region         = \"us-west-2\"\n    encrypt        = true\n    kms_key_id     = \"arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID\"\n    dynamodb_table = \"terraform-state-lock\"\n    \n    # Additional security\n    skip_region_validation      = false\n    skip_credentials_validation = false\n    skip_metadata_api_check     = false\n  }\n}\n\n# State bucket with versioning and lifecycle\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket = \"terraform-state-bucket\"\n  \n  tags = {\n    Name        = \"Terraform State Bucket\"\n    Environment = var.environment\n  }\n}\n\nresource \"aws_s3_bucket_versioning\" \"terraform_state_versioning\" {\n  bucket = aws_s3_bucket.terraform_state.id\n  versioning_configuration {\n    status = \"Enabled\"\n  }\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"terraform_state_encryption\" {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.terraform_bucket_key.arn\n      sse_algorithm     = \"aws:kms\"\n    }\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"terraform_state\" {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\n# KMS key for encryption\nresource \"aws_kms_key\" \"terraform_bucket_key\" {\n  description             = \"KMS key for Terraform state bucket encryption\"\n  deletion_window_in_days = 7\n\n  tags = {\n    Name        = \"Terraform State Bucket Key\"\n    Environment = var.environment\n  }\n}\n\n# DynamoDB table for state locking\nresource \"aws_dynamodb_table\" \"terraform_state_lock\" {\n  name           = \"terraform-state-lock\"\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n\n  server_side_encryption {\n    enabled = true\n  }\n\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  tags = {\n    Name        = \"Terraform State Lock Table\"\n    Environment = var.environment\n  }\n}\nEOF\n```\n\n## Reverse Proxy Setup\n\nTerraform itself doesn't typically require reverse proxy setup, but when using Terraform Enterprise or Cloud, you might need to configure proxies for API access:\n\n### Corporate Proxy Configuration\n\n```bash\n# Configure Terraform to work through corporate proxy\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,.company.com\n\n# Add to ~/.bashrc or ~/.zshrc\ncat >> ~/.bashrc <<EOF\n# Terraform proxy settings\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,.company.com\nEOF\n\n# Configure Git for proxy (if needed for modules)\ngit config --global http.proxy http://proxy.company.com:8080\ngit config --global https.proxy http://proxy.company.com:8080\n```\n\n### nginx Configuration for Terraform Enterprise\n\n```nginx\n# /etc/nginx/sites-available/terraform-enterprise\nupstream terraform_enterprise {\n    server 127.0.0.1:8800;\n    server 127.0.0.1:8801 backup;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name terraform.company.com;\n\n    ssl_certificate /etc/ssl/certs/terraform.company.com.crt;\n    ssl_certificate_key /etc/ssl/private/terraform.company.com.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000\" always;\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n\n    location / {\n        proxy_pass http://terraform_enterprise;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for real-time updates\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts for long-running operations\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 300s;\n    }\n}\n```\n\n## Security Configuration\n\n### Secure Credential Management\n\n```bash\n# Use environment variables for credentials\ncat > .env.example <<EOF\n# AWS credentials\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_DEFAULT_REGION=us-west-2\n\n# Azure credentials\nARM_CLIENT_ID=your_client_id\nARM_CLIENT_SECRET=your_client_secret\nARM_SUBSCRIPTION_ID=your_subscription_id\nARM_TENANT_ID=your_tenant_id\n\n# GCP credentials\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json\nGOOGLE_PROJECT=your_project_id\n\n# Terraform Cloud\nTF_CLOUD_TOKEN=your_terraform_cloud_token\nEOF\n\n# Use IAM roles for AWS (recommended)\ncat > aws-iam-role.tf <<EOF\n# IAM role for Terraform execution\nresource \"aws_iam_role\" \"terraform_execution\" {\n  name = \"TerraformExecutionRole\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"ec2.amazonaws.com\"\n        }\n      },\n    ]\n  })\n}\n\n# Attach managed policies with least privilege\nresource \"aws_iam_role_policy_attachment\" \"terraform_execution\" {\n  for_each = toset([\n    \"arn:aws:iam::aws:policy/PowerUserAccess\"\n  ])\n  \n  role       = aws_iam_role.terraform_execution.name\n  policy_arn = each.value\n}\n\n# Create instance profile\nresource \"aws_iam_instance_profile\" \"terraform_execution\" {\n  name = \"TerraformExecutionProfile\"\n  role = aws_iam_role.terraform_execution.name\n}\nEOF\n```\n\n### Security Scanning and Compliance\n\n```bash\n# Pre-commit hooks for security\ncat > .pre-commit-config.yaml <<EOF\nrepos:\n- repo: https://github.com/antonbabenko/pre-commit-terraform\n  rev: v1.83.5\n  hooks:\n    - id: terraform_fmt\n    - id: terraform_validate\n    - id: terraform_docs\n    - id: terraform_tflint\n    - id: terraform_checkov\n    - id: terraform_trivy\n\n- repo: https://github.com/Yelp/detect-secrets\n  rev: v1.4.0\n  hooks:\n    - id: detect-secrets\n      args: ['--baseline', '.secrets.baseline']\nEOF\n\n# Checkov configuration for security scanning\ncat > .checkov.yaml <<EOF\nframework:\n  - terraform\n  - secrets\n\ncheck:\n  - CKV_AWS_79  # Ensure Instance Metadata Service Version 1 is not enabled\n  - CKV_AWS_8   # Ensure Launch Configuration EBS encryption\n  - CKV_AZURE_1 # Ensure storage account encryption\n\nskip-check:\n  - CKV_AWS_23  # Skip S3 bucket public read check for specific use cases\n\noutput: cli\nquiet: false\ncompact: false\nEOF\n\n# TFLint configuration\ncat > .tflint.hcl <<EOF\nplugin \"aws\" {\n    enabled = true\n    version = \"0.21.2\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-aws\"\n}\n\nplugin \"azurerm\" {\n    enabled = true\n    version = \"0.21.0\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-azurerm\"\n}\n\nrule \"terraform_unused_declarations\" {\n  enabled = true\n}\n\nrule \"terraform_naming_convention\" {\n  enabled = true\n  format  = \"snake_case\"\n}\nEOF\n```\n\n### Policy as Code with OPA\n\n```bash\n# OPA (Open Policy Agent) security policies\ncat > policy/security.rego <<EOF\npackage terraform.security\n\n# Deny instances without encryption\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_instance\"\n    resource.change.after.root_block_device[_].encrypted == false\n    reason := \"AWS instances must have encrypted root volumes\"\n}\n\n# Deny public S3 buckets\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_s3_bucket_public_access_block\"\n    resource.change.after.block_public_acls == false\n    reason := \"S3 buckets must block public access\"\n}\n\n# Require specific instance types in production\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_instance\"\n    instance_type := resource.change.after.instance_type\n    not allowed_instance_type(instance_type)\n    workspace := input.terraform_version.workspace\n    workspace == \"production\"\n    reason := sprintf(\"Production instances must use approved instance types, got: %v\", [instance_type])\n}\n\nallowed_instance_type(instance_type) {\n    allowed_types := [\"t3.micro\", \"t3.small\", \"t3.medium\", \"m5.large\", \"m5.xlarge\"]\n    instance_type in allowed_types\n}\nEOF\n\n# Policy validation script\ncat > scripts/validate-policy.sh <<'EOF'\n#!/bin/bash\n\n# Generate Terraform plan\nterraform plan -out=tfplan\nterraform show -json tfplan > tfplan.json\n\n# Validate against policies\nconftest test tfplan.json --policy policy/\n\n# Cleanup\nrm tfplan tfplan.json\nEOF\n\nchmod +x scripts/validate-policy.sh\n```\n\n## Database Setup\n\nTerraform doesn't require a traditional database, but it does use state files and can integrate with various storage backends:\n\n### State Storage Backends\n\n```bash\n# PostgreSQL backend (for Terraform Enterprise)\ncat > backend-postgres.tf <<EOF\nterraform {\n  backend \"pg\" {\n    conn_str = \"postgres://user:pass@localhost/terraform_backend?sslmode=require\"\n  }\n}\nEOF\n\n# Consul backend for distributed state\ncat > backend-consul.tf <<EOF\nterraform {\n  backend \"consul\" {\n    address = \"consul.company.com:8500\"\n    scheme  = \"https\"\n    path    = \"terraform/infrastructure\"\n  }\n}\nEOF\n\n# etcd backend\ncat > backend-etcd.tf <<EOF\nterraform {\n  backend \"etcdv3\" {\n    endpoints = [\"http://etcd1:2379\", \"http://etcd2:2379\", \"http://etcd3:2379\"]\n    lock      = true\n    prefix    = \"terraform-state/\"\n  }\n}\nEOF\n```\n\n### Database Infrastructure Management\n\n```bash\n# Database deployment with Terraform\ncat > database.tf <<EOF\n# RDS instance with Multi-AZ\nresource \"aws_db_instance\" \"main\" {\n  identifier = \"${var.project_name}-db\"\n  \n  engine         = \"postgresql\"\n  engine_version = \"15.4\"\n  instance_class = \"db.t3.micro\"\n  \n  allocated_storage     = 20\n  max_allocated_storage = 100\n  storage_type         = \"gp3\"\n  storage_encrypted    = true\n  kms_key_id          = aws_kms_key.rds.arn\n  \n  db_name  = var.database_name\n  username = var.database_username\n  password = var.database_password\n  port     = 5432\n  \n  multi_az               = true\n  publicly_accessible    = false\n  backup_retention_period = 7\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n  \n  skip_final_snapshot = false\n  final_snapshot_identifier = \"${var.project_name}-db-final-snapshot\"\n  \n  vpc_security_group_ids = [aws_security_group.rds.id]\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n  \n  tags = var.common_tags\n}\n\n# Database subnet group\nresource \"aws_db_subnet_group\" \"main\" {\n  name       = \"${var.project_name}-db-subnet-group\"\n  subnet_ids = var.private_subnet_ids\n\n  tags = merge(var.common_tags, {\n    Name = \"${var.project_name}-db-subnet-group\"\n  })\n}\n\n# KMS key for RDS encryption\nresource \"aws_kms_key\" \"rds\" {\n  description             = \"KMS key for RDS encryption\"\n  deletion_window_in_days = 7\n\n  tags = merge(var.common_tags, {\n    Name = \"${var.project_name}-rds-kms-key\"\n  })\n}\nEOF\n```\n\n## Performance Optimization\n\n### Terraform Performance Tuning\n\n```bash\n# Optimize Terraform execution\ncat > terraform.tfvars <<EOF\n# Performance settings\nterraform_parallelism = 10\nterraform_refresh = true\nterraform_upgrade = false\nEOF\n\n# Performance optimization script\ncat > scripts/optimize-terraform.sh <<'EOF'\n#!/bin/bash\n\n# Increase parallelism for faster execution\nexport TF_CLI_ARGS_plan=\"-parallelism=10\"\nexport TF_CLI_ARGS_apply=\"-parallelism=10\"\n\n# Use faster JSON output for large states\nexport TF_CLI_ARGS_show=\"-json\"\n\n# Optimize provider caching\nexport TF_PLUGIN_CACHE_DIR=\"$HOME/.terraform.d/plugin-cache\"\nmkdir -p \"$TF_PLUGIN_CACHE_DIR\"\n\n# Performance monitoring\necho \"Starting Terraform operation at $(date)\"\ntime terraform \"$@\"\necho \"Completed Terraform operation at $(date)\"\nEOF\n\nchmod +x scripts/optimize-terraform.sh\n```\n\n### Large Infrastructure Management\n\n```bash\n# Workspace and module organization\ncat > modules/infrastructure/main.tf <<EOF\n# Optimized module structure for large deployments\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n}\n\n# Use data sources efficiently\ndata \"aws_availability_zones\" \"available\" {\n  state = \"available\"\n  \n  # Cache this data to avoid repeated API calls\n  lifecycle {\n    postcondition {\n      condition     = length(self.names) >= 2\n      error_message = \"At least 2 availability zones required.\"\n    }\n  }\n}\n\n# Optimize resource creation with for_each\nresource \"aws_subnet\" \"private\" {\n  for_each = toset(slice(data.aws_availability_zones.available.names, 0, var.subnet_count))\n  \n  vpc_id            = aws_vpc.main.id\n  cidr_block        = cidrsubnet(var.vpc_cidr, 8, index(data.aws_availability_zones.available.names, each.value) + 10)\n  availability_zone = each.value\n  \n  tags = merge(var.common_tags, {\n    Name = \"${var.name_prefix}-private-${each.value}\"\n    Type = \"private\"\n  })\n}\n\n# Use locals for complex computations\nlocals {\n  # Pre-compute values to avoid recalculation\n  availability_zones = slice(data.aws_availability_zones.available.names, 0, var.subnet_count)\n  \n  # Create maps for efficient lookups\n  subnet_map = {\n    for subnet in aws_subnet.private : \n    subnet.availability_zone => subnet.id\n  }\n}\nEOF\n```\n\n### State Optimization\n\n```bash\n# State file optimization script\ncat > scripts/optimize-state.sh <<'EOF'\n#!/bin/bash\n\n# Pull current state for backup\nterraform state pull > state-backup-$(date +%Y%m%d_%H%M%S).json\n\n# Remove unused resources from state\nterraform state list | while read resource; do\n    if terraform plan -target=\"$resource\" | grep -q \"No changes\"; then\n        echo \"Checking if $resource can be safely removed...\"\n        # Add logic to safely remove unused resources\n    fi\ndone\n\n# Refresh state to sync with real infrastructure\nterraform refresh\n\necho \"State optimization completed\"\nEOF\n\nchmod +x scripts/optimize-state.sh\n```\n\n## Monitoring\n\n### Terraform Operations Monitoring\n\n```bash\n# Terraform execution monitoring\ncat > scripts/monitor-terraform.sh <<'EOF'\n#!/bin/bash\n\nLOG_FILE=\"/var/log/terraform/operations.log\"\nMETRICS_FILE=\"/var/log/terraform/metrics.log\"\n\n# Ensure log directory exists\nmkdir -p \"$(dirname \"$LOG_FILE\")\"\nmkdir -p \"$(dirname \"$METRICS_FILE\")\"\n\n# Function to log operations\nlog_operation() {\n    local operation=\"$1\"\n    local status=\"$2\"\n    local duration=\"$3\"\n    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n    \n    echo \"[$timestamp] Operation: $operation, Status: $status, Duration: ${duration}s\" >> \"$LOG_FILE\"\n    echo \"terraform_operation_duration{operation=\\\"$operation\\\",status=\\\"$status\\\"} $duration\" >> \"$METRICS_FILE\"\n}\n\n# Wrapper function for terraform commands\nterraform_monitored() {\n    local operation=\"$1\"\n    shift\n    local start_time=$(date +%s)\n    local exit_code=0\n    \n    echo \"Starting Terraform $operation at $(date)\"\n    \n    if terraform \"$operation\" \"$@\"; then\n        local end_time=$(date +%s)\n        local duration=$((end_time - start_time))\n        log_operation \"$operation\" \"success\" \"$duration\"\n        echo \"Terraform $operation completed successfully in ${duration}s\"\n    else\n        exit_code=$?\n        local end_time=$(date +%s)\n        local duration=$((end_time - start_time))\n        log_operation \"$operation\" \"failure\" \"$duration\"\n        echo \"Terraform $operation failed after ${duration}s\"\n        return $exit_code\n    fi\n}\n\n# Usage: terraform_monitored plan, terraform_monitored apply, etc.\nterraform_monitored \"$@\"\nEOF\n\nchmod +x scripts/monitor-terraform.sh\n```\n\n### Infrastructure Monitoring with Terraform\n\n```bash\n# Deploy monitoring stack with Terraform\ncat > monitoring.tf <<EOF\n# CloudWatch alarms for infrastructure\nresource \"aws_cloudwatch_metric_alarm\" \"high_cpu\" {\n  for_each = toset(module.compute.instance_ids)\n  \n  alarm_name          = \"high-cpu-${each.key}\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name        = \"CPUUtilization\"\n  namespace          = \"AWS/EC2\"\n  period             = \"300\"\n  statistic          = \"Average\"\n  threshold          = \"80\"\n  alarm_description  = \"This metric monitors EC2 CPU utilization\"\n\n  dimensions = {\n    InstanceId = each.value\n  }\n\n  alarm_actions = [aws_sns_topic.alerts.arn]\n  \n  tags = var.common_tags\n}\n\n# SNS topic for alerts\nresource \"aws_sns_topic\" \"alerts\" {\n  name = \"${var.project_name}-infrastructure-alerts\"\n  \n  tags = var.common_tags\n}\n\nresource \"aws_sns_topic_subscription\" \"email_alerts\" {\n  topic_arn = aws_sns_topic.alerts.arn\n  protocol  = \"email\"\n  endpoint  = var.alert_email\n}\n\n# Log group for Terraform operations\nresource \"aws_cloudwatch_log_group\" \"terraform_ops\" {\n  name              = \"/terraform/operations\"\n  retention_in_days = 30\n  \n  tags = var.common_tags\n}\n\n# Dashboard for infrastructure monitoring\nresource \"aws_cloudwatch_dashboard\" \"main\" {\n  dashboard_name = \"${var.project_name}-infrastructure\"\n\n  dashboard_body = jsonencode({\n    widgets = [\n      {\n        type   = \"metric\"\n        x      = 0\n        y      = 0\n        width  = 12\n        height = 6\n\n        properties = {\n          metrics = [\n            [\"AWS/EC2\", \"CPUUtilization\", \"InstanceId\", module.compute.instance_ids[0]],\n          ]\n          view    = \"timeSeries\"\n          stacked = false\n          region  = var.aws_region\n          title   = \"EC2 Instance CPU\"\n          period  = 300\n        }\n      }\n    ]\n  })\n}\nEOF\n```\n\n### Terraform Cloud Monitoring\n\n```bash\n# Monitor Terraform Cloud workspaces\ncat > scripts/monitor-tf-cloud.sh <<'EOF'\n#!/bin/bash\n\nTF_CLOUD_TOKEN=\"${TF_CLOUD_TOKEN}\"\nORGANIZATION=\"${TF_ORGANIZATION}\"\n\n# Function to get workspace status\nget_workspace_status() {\n    local workspace_name=\"$1\"\n    \n    curl -s \\\n        --header \"Authorization: Bearer $TF_CLOUD_TOKEN\" \\\n        --header \"Content-Type: application/vnd.api+json\" \\\n        \"https://app.terraform.io/api/v2/organizations/$ORGANIZATION/workspaces/$workspace_name/current-run\" \\\n        | jq -r '.data.attributes.status'\n}\n\n# Function to get workspace runs\nget_recent_runs() {\n    local workspace_id=\"$1\"\n    \n    curl -s \\\n        --header \"Authorization: Bearer $TF_CLOUD_TOKEN\" \\\n        --header \"Content-Type: application/vnd.api+json\" \\\n        \"https://app.terraform.io/api/v2/workspaces/$workspace_id/runs\" \\\n        | jq -r '.data[].attributes | \"\\(.status) - \\(.created_at)\"'\n}\n\n# Monitor critical workspaces\nWORKSPACES=(\"production-web\" \"production-database\" \"staging-environment\")\n\nfor workspace in \"${WORKSPACES[@]}\"; do\n    status=$(get_workspace_status \"$workspace\")\n    echo \"Workspace: $workspace, Status: $status\"\n    \n    if [[ \"$status\" == \"errored\" ]]; then\n        echo \"❌ ALERT: Workspace $workspace has errors!\"\n        # Send alert to monitoring system\n        curl -X POST \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\\\"text\\\": \\\"Terraform workspace $workspace has errors\\\"}\" \\\n            \"$SLACK_WEBHOOK_URL\"\n    elif [[ \"$status\" == \"planned_and_finished\" ]]; then\n        echo \"✅ Workspace $workspace is healthy\"\n    fi\ndone\nEOF\n\nchmod +x scripts/monitor-tf-cloud.sh\n```\n\n## Backup and Restore\n\n### State File Backup\n\n```bash\n# Comprehensive state backup script\ncat > scripts/backup-terraform-state.sh <<'EOF'\n#!/bin/bash\n\nBACKUP_DIR=\"/backup/terraform\"\nDATE=$(date +%Y%m%d_%H%M%S)\nENVIRONMENTS=(\"development\" \"staging\" \"production\")\n\nmkdir -p \"$BACKUP_DIR\"\n\nbackup_state() {\n    local environment=\"$1\"\n    local backup_path=\"$BACKUP_DIR/$environment\"\n    \n    echo \"Backing up $environment state...\"\n    mkdir -p \"$backup_path\"\n    \n    # Change to environment directory\n    cd \"environments/$environment\" || return 1\n    \n    # Pull current state\n    terraform state pull > \"$backup_path/terraform-state-$DATE.json\"\n    \n    # Backup configuration files\n    tar -czf \"$backup_path/terraform-config-$DATE.tar.gz\" \\\n        --exclude=\".terraform\" \\\n        --exclude=\"*.tfplan\" \\\n        .\n    \n    # Backup workspace info\n    terraform workspace show > \"$backup_path/current-workspace-$DATE.txt\"\n    terraform workspace list > \"$backup_path/all-workspaces-$DATE.txt\"\n    \n    # Backup provider versions\n    terraform version > \"$backup_path/terraform-version-$DATE.txt\"\n    \n    cd - > /dev/null\n    \n    echo \"✅ Backup completed for $environment\"\n}\n\n# Backup all environments\nfor env in \"${ENVIRONMENTS[@]}\"; do\n    if [[ -d \"environments/$env\" ]]; then\n        backup_state \"$env\"\n    else\n        echo \"⚠️  Environment directory not found: environments/$env\"\n    fi\ndone\n\n# Create consolidated backup\ncd \"$BACKUP_DIR\"\ntar -czf \"terraform-complete-backup-$DATE.tar.gz\" \\\n    --exclude=\"*.tar.gz\" \\\n    .\n\n# Upload to cloud storage\nif command -v aws &> /dev/null; then\n    aws s3 cp \"terraform-complete-backup-$DATE.tar.gz\" \\\n        s3://terraform-backups/\nfi\n\nif command -v az &> /dev/null; then\n    az storage blob upload \\\n        --file \"terraform-complete-backup-$DATE.tar.gz\" \\\n        --container-name terraform-backups \\\n        --name \"terraform-complete-backup-$DATE.tar.gz\"\nfi\n\nif command -v gsutil &> /dev/null; then\n    gsutil cp \"terraform-complete-backup-$DATE.tar.gz\" \\\n        gs://terraform-backups/\nfi\n\n# Cleanup old backups (keep last 30 days)\nfind \"$BACKUP_DIR\" -name \"terraform-complete-backup-*.tar.gz\" \\\n    -mtime +30 -delete\n\necho \"🎉 All backups completed successfully\"\nEOF\n\nchmod +x scripts/backup-terraform-state.sh\n```\n\n### Disaster Recovery Procedures\n\n```bash\n# Disaster recovery script\ncat > scripts/disaster-recovery.sh <<'EOF'\n#!/bin/bash\n\nBACKUP_FILE=\"$1\"\nTARGET_ENVIRONMENT=\"$2\"\n\nif [[ -z \"$BACKUP_FILE\" || -z \"$TARGET_ENVIRONMENT\" ]]; then\n    echo \"Usage: $0 <backup-file.tar.gz> <target-environment>\"\n    echo \"Example: $0 terraform-complete-backup-20240115_143000.tar.gz production\"\n    exit 1\nfi\n\n# Verify backup file exists\nif [[ ! -f \"$BACKUP_FILE\" ]]; then\n    echo \"❌ Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Create recovery directory\nRECOVERY_DIR=\"/tmp/terraform-recovery-$(date +%s)\"\nmkdir -p \"$RECOVERY_DIR\"\n\n# Extract backup\necho \"📦 Extracting backup...\"\ntar -xzf \"$BACKUP_FILE\" -C \"$RECOVERY_DIR\"\n\n# Navigate to target environment\ncd \"environments/$TARGET_ENVIRONMENT\" || {\n    echo \"❌ Target environment directory not found: environments/$TARGET_ENVIRONMENT\"\n    exit 1\n}\n\n# Backup current state before recovery\necho \"💾 Backing up current state...\"\nterraform state pull > \"current-state-backup-$(date +%Y%m%d_%H%M%S).json\"\n\n# Import recovered state\nRECOVERED_STATE=\"$RECOVERY_DIR/$TARGET_ENVIRONMENT/terraform-state-*.json\"\nif [[ -f $RECOVERED_STATE ]]; then\n    echo \"🔄 Restoring state from backup...\"\n    terraform state push \"$RECOVERED_STATE\"\nelse\n    echo \"❌ No state file found in backup for environment: $TARGET_ENVIRONMENT\"\n    exit 1\nfi\n\n# Verify state consistency\necho \"🔍 Verifying state consistency...\"\nif terraform plan -detailed-exitcode; then\n    echo \"✅ State restored successfully - no drift detected\"\nelif [[ $? -eq 2 ]]; then\n    echo \"⚠️  State restored but drift detected - manual review required\"\n    terraform plan\nelse\n    echo \"❌ State restoration failed - check error messages above\"\n    exit 1\nfi\n\n# Cleanup\nrm -rf \"$RECOVERY_DIR\"\n\necho \"🎉 Disaster recovery completed for environment: $TARGET_ENVIRONMENT\"\necho \"💡 Please review the plan output and apply changes if necessary\"\nEOF\n\nchmod +x scripts/disaster-recovery.sh\n```\n\n### State Migration and Refactoring\n\n```bash\n# State migration script for refactoring\ncat > scripts/migrate-state.sh <<'EOF'\n#!/bin/bash\n\n# Function to safely move resources in state\nmove_resource() {\n    local old_address=\"$1\"\n    local new_address=\"$2\"\n    \n    echo \"Moving $old_address to $new_address\"\n    \n    # Check if source resource exists\n    if terraform state show \"$old_address\" &>/dev/null; then\n        terraform state mv \"$old_address\" \"$new_address\"\n        echo \"✅ Successfully moved $old_address to $new_address\"\n    else\n        echo \"⚠️  Resource not found: $old_address\"\n    fi\n}\n\n# Function to import existing resources\nimport_resource() {\n    local resource_address=\"$1\"\n    local resource_id=\"$2\"\n    \n    echo \"Importing $resource_id as $resource_address\"\n    \n    if terraform import \"$resource_address\" \"$resource_id\"; then\n        echo \"✅ Successfully imported $resource_id as $resource_address\"\n    else\n        echo \"❌ Failed to import $resource_id\"\n    fi\n}\n\n# Example migrations\necho \"🔄 Starting state migrations...\"\n\n# Move resources to modules\nmove_resource \"aws_instance.web\" \"module.web_servers.aws_instance.main[0]\"\nmove_resource \"aws_security_group.web\" \"module.web_servers.aws_security_group.main\"\n\n# Import existing resources\nimport_resource \"aws_s3_bucket.existing_bucket\" \"existing-bucket-name\"\n\n# Remove resources that are no longer managed\nterraform state rm aws_instance.deprecated\n\necho \"🎉 State migrations completed\"\necho \"💡 Run 'terraform plan' to verify changes\"\nEOF\n\nchmod +x scripts/migrate-state.sh\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n\n```bash\n# Terraform troubleshooting script\ncat > scripts/troubleshoot-terraform.sh <<'EOF'\n#!/bin/bash\n\necho \"🔧 Terraform Troubleshooting Tool\"\necho \"================================\"\n\n# Check Terraform installation\ncheck_installation() {\n    echo \"📋 Checking Terraform installation...\"\n    \n    if command -v terraform &> /dev/null; then\n        terraform version\n        echo \"✅ Terraform is installed\"\n    else\n        echo \"❌ Terraform is not installed or not in PATH\"\n        return 1\n    fi\n}\n\n# Check configuration syntax\ncheck_configuration() {\n    echo \"📋 Checking configuration syntax...\"\n    \n    if terraform fmt -check -diff; then\n        echo \"✅ Configuration is properly formatted\"\n    else\n        echo \"⚠️  Configuration formatting issues found\"\n        terraform fmt -diff\n    fi\n    \n    if terraform validate; then\n        echo \"✅ Configuration is valid\"\n    else\n        echo \"❌ Configuration validation failed\"\n        return 1\n    fi\n}\n\n# Check provider authentication\ncheck_providers() {\n    echo \"📋 Checking provider authentication...\"\n    \n    # AWS\n    if aws sts get-caller-identity &>/dev/null; then\n        echo \"✅ AWS credentials are valid\"\n    else\n        echo \"⚠️  AWS credentials may be invalid or not configured\"\n    fi\n    \n    # Azure\n    if az account show &>/dev/null; then\n        echo \"✅ Azure credentials are valid\"\n    else\n        echo \"⚠️  Azure credentials may be invalid or not configured\"\n    fi\n    \n    # GCP\n    if gcloud auth list --filter=status:ACTIVE --format=\"value(account)\" &>/dev/null; then\n        echo \"✅ GCP credentials are valid\"\n    else\n        echo \"⚠️  GCP credentials may be invalid or not configured\"\n    fi\n}\n\n# Check state file\ncheck_state() {\n    echo \"📋 Checking state file...\"\n    \n    if terraform state list &>/dev/null; then\n        resource_count=$(terraform state list | wc -l)\n        echo \"✅ State file is accessible with $resource_count resources\"\n    else\n        echo \"❌ Cannot access state file\"\n        return 1\n    fi\n}\n\n# Check for common issues\ncheck_common_issues() {\n    echo \"📋 Checking for common issues...\"\n    \n    # Check for lock file\n    if [[ -f \".terraform.lock.hcl\" ]]; then\n        echo \"✅ Lock file exists\"\n    else\n        echo \"⚠️  Lock file missing - run 'terraform init'\"\n    fi\n    \n    # Check for local state file in production\n    if [[ -f \"terraform.tfstate\" ]] && [[ $(terraform workspace show) == \"production\" ]]; then\n        echo \"⚠️  Local state file detected in production workspace\"\n        echo \"    Consider using remote state for production\"\n    fi\n    \n    # Check for hardcoded secrets\n    if grep -r \"password\\s*=\\s*\\\"\" . --include=\"*.tf\" --include=\"*.tfvars\" 2>/dev/null; then\n        echo \"⚠️  Potential hardcoded passwords found\"\n    fi\n    \n    # Check for large state file\n    if [[ -f \"terraform.tfstate\" ]]; then\n        state_size=$(stat -f%z \"terraform.tfstate\" 2>/dev/null || stat -c%s \"terraform.tfstate\" 2>/dev/null)\n        if [[ $state_size -gt 10485760 ]]; then  # 10MB\n            echo \"⚠️  Large state file detected ($(($state_size / 1024 / 1024))MB)\"\n            echo \"    Consider splitting into smaller configurations\"\n        fi\n    fi\n}\n\n# Debug mode information\ndebug_info() {\n    echo \"📋 Debug information...\"\n    \n    echo \"Working directory: $(pwd)\"\n    echo \"Terraform workspace: $(terraform workspace show)\"\n    echo \"Environment variables:\"\n    env | grep -E \"^(TF_|AWS_|ARM_|GOOGLE_)\" | sed 's/=.*/=***/' | sort\n}\n\n# Run all checks\nrun_all_checks() {\n    check_installation || return 1\n    check_configuration || return 1\n    check_providers\n    check_state || return 1\n    check_common_issues\n    debug_info\n}\n\n# Main execution\ncase \"${1:-all}\" in\n    \"installation\")\n        check_installation\n        ;;\n    \"config\")\n        check_configuration\n        ;;\n    \"providers\")\n        check_providers\n        ;;\n    \"state\")\n        check_state\n        ;;\n    \"common\")\n        check_common_issues\n        ;;\n    \"debug\")\n        debug_info\n        ;;\n    \"all\")\n        run_all_checks\n        ;;\n    *)\n        echo \"Usage: $0 [installation|config|providers|state|common|debug|all]\"\n        exit 1\n        ;;\nesac\nEOF\n\nchmod +x scripts/troubleshoot-terraform.sh\n```\n\n### Advanced Debugging\n\n```bash\n# Advanced debugging techniques\ncat > scripts/debug-terraform.sh <<'EOF'\n#!/bin/bash\n\n# Enable debug logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=\"terraform-debug-$(date +%Y%m%d_%H%M%S).log\"\n\n# Create debug session\ndebug_session() {\n    local operation=\"$1\"\n    shift\n    \n    echo \"🐛 Starting debug session for: $operation\"\n    echo \"Debug log: $TF_LOG_PATH\"\n    \n    # Capture detailed timing information\n    time terraform \"$operation\" \"$@\" 2>&1 | tee -a \"$TF_LOG_PATH\"\n    \n    local exit_code=${PIPESTATUS[0]}\n    \n    if [[ $exit_code -ne 0 ]]; then\n        echo \"❌ Operation failed with exit code: $exit_code\"\n        echo \"📄 Last 50 lines of debug log:\"\n        tail -50 \"$TF_LOG_PATH\"\n    else\n        echo \"✅ Operation completed successfully\"\n    fi\n    \n    return $exit_code\n}\n\n# Analyze state file for issues\nanalyze_state() {\n    echo \"🔍 Analyzing state file...\"\n    \n    # Check for orphaned resources\n    echo \"Checking for potential orphaned resources...\"\n    terraform state list | while read resource; do\n        if ! terraform plan -target=\"$resource\" -detailed-exitcode >/dev/null 2>&1; then\n            echo \"⚠️  Potential issue with resource: $resource\"\n        fi\n    done\n    \n    # Check for large resources in state\n    echo \"Checking for large resources...\"\n    terraform state pull | jq -r '.resources[] | select(.instances[0].attributes | length > 50) | .address' 2>/dev/null | head -10\n}\n\n# Provider debug information\ndebug_providers() {\n    echo \"🔍 Debugging provider issues...\"\n    \n    # Show provider configuration\n    terraform providers\n    \n    # Check provider cache\n    if [[ -d \"$HOME/.terraform.d/plugin-cache\" ]]; then\n        echo \"Provider cache contents:\"\n        ls -la \"$HOME/.terraform.d/plugin-cache\"\n    fi\n    \n    # Check for provider version conflicts\n    terraform version -json | jq '.provider_selections' 2>/dev/null\n}\n\n# Network and API debugging\ndebug_network() {\n    echo \"🌐 Debugging network connectivity...\"\n    \n    # Test connectivity to common endpoints\n    local endpoints=(\n        \"https://releases.hashicorp.com\"\n        \"https://registry.terraform.io\"\n        \"https://api.github.com\"\n        \"https://aws.amazon.com\"\n        \"https://management.azure.com\"\n        \"https://www.googleapis.com\"\n    )\n    \n    for endpoint in \"${endpoints[@]}\"; do\n        if curl -s --connect-timeout 5 \"$endpoint\" >/dev/null; then\n            echo \"✅ $endpoint - OK\"\n        else\n            echo \"❌ $endpoint - FAILED\"\n        fi\n    done\n}\n\n# Performance analysis\nanalyze_performance() {\n    echo \"📊 Analyzing Terraform performance...\"\n    \n    # Generate and analyze dependency graph\n    terraform graph > dependency-graph.dot\n    \n    # Count resources by type\n    echo \"Resource distribution:\"\n    terraform state list | cut -d. -f1 | sort | uniq -c | sort -nr | head -10\n    \n    # Estimate plan time based on resources\n    resource_count=$(terraform state list | wc -l)\n    estimated_time=$((resource_count * 2))  # Rough estimate: 2 seconds per resource\n    echo \"Estimated plan time: ${estimated_time} seconds for $resource_count resources\"\n}\n\n# Usage\ncase \"${1:-help}\" in\n    \"session\")\n        shift\n        debug_session \"$@\"\n        ;;\n    \"state\")\n        analyze_state\n        ;;\n    \"providers\")\n        debug_providers\n        ;;\n    \"network\")\n        debug_network\n        ;;\n    \"performance\")\n        analyze_performance\n        ;;\n    \"all\")\n        debug_providers\n        debug_network\n        analyze_state\n        analyze_performance\n        ;;\n    \"help\"|*)\n        echo \"Usage: $0 [session|state|providers|network|performance|all]\"\n        echo \"\"\n        echo \"  session <operation> [args]  - Debug specific Terraform operation\"\n        echo \"  state                       - Analyze state file for issues\"\n        echo \"  providers                   - Debug provider configuration\"\n        echo \"  network                     - Test network connectivity\"\n        echo \"  performance                 - Analyze performance characteristics\"\n        echo \"  all                         - Run all debug checks\"\n        ;;\nesac\nEOF\n\nchmod +x scripts/debug-terraform.sh\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# Terraform update script\ncat > scripts/update-terraform.sh <<'EOF'\n#!/bin/bash\n\nCURRENT_VERSION=$(terraform version -json | jq -r '.terraform_version')\necho \"Current Terraform version: $CURRENT_VERSION\"\n\n# Check for latest version\ncheck_latest_version() {\n    local latest_version\n    latest_version=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r '.tag_name' | sed 's/v//')\n    echo \"Latest Terraform version: $latest_version\"\n    \n    if [[ \"$CURRENT_VERSION\" != \"$latest_version\" ]]; then\n        echo \"⚠️  Update available: $CURRENT_VERSION → $latest_version\"\n        return 1\n    else\n        echo \"✅ Terraform is up to date\"\n        return 0\n    fi\n}\n\n# Update using package manager\nupdate_terraform() {\n    echo \"🔄 Updating Terraform...\"\n    \n    if command -v apt &>/dev/null; then\n        sudo apt update && sudo apt upgrade terraform\n    elif command -v yum &>/dev/null; then\n        sudo yum update terraform\n    elif command -v dnf &>/dev/null; then\n        sudo dnf update terraform\n    elif command -v pacman &>/dev/null; then\n        sudo pacman -Syu terraform\n    elif command -v zypper &>/dev/null; then\n        sudo zypper update terraform\n    elif command -v brew &>/dev/null; then\n        brew upgrade terraform\n    else\n        echo \"❌ No supported package manager found\"\n        echo \"💡 Please update manually from: https://releases.hashicorp.com/terraform/\"\n        return 1\n    fi\n}\n\n# Update providers\nupdate_providers() {\n    echo \"🔄 Updating providers...\"\n    terraform init -upgrade\n}\n\n# Verify update\nverify_update() {\n    echo \"🔍 Verifying update...\"\n    \n    terraform version\n    \n    # Test basic functionality\n    if terraform validate; then\n        echo \"✅ Update verification successful\"\n    else\n        echo \"❌ Update verification failed\"\n        return 1\n    fi\n}\n\n# Main update process\nmain() {\n    if check_latest_version; then\n        exit 0\n    fi\n    \n    echo \"Proceed with update? (y/N)\"\n    read -r response\n    \n    if [[ \"$response\" =~ ^[Yy]$ ]]; then\n        update_terraform || exit 1\n        update_providers || exit 1\n        verify_update || exit 1\n        echo \"🎉 Terraform update completed successfully\"\n    else\n        echo \"Update cancelled\"\n    fi\n}\n\nmain \"$@\"\nEOF\n\nchmod +x scripts/update-terraform.sh\n```\n\n### Maintenance Tasks\n\n```bash\n# Comprehensive maintenance script\ncat > scripts/terraform-maintenance.sh <<'EOF'\n#!/bin/bash\n\nMAINTENANCE_LOG=\"/var/log/terraform-maintenance-$(date +%Y%m%d_%H%M%S).log\"\n\nlog() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a \"$MAINTENANCE_LOG\"\n}\n\n# Cleanup old plan files\ncleanup_plans() {\n    log \"🧹 Cleaning up old plan files...\"\n    find . -name \"*.tfplan\" -mtime +7 -delete\n    find . -name \"*.tfplan.json\" -mtime +7 -delete\n    log \"✅ Plan file cleanup completed\"\n}\n\n# Cleanup provider cache\ncleanup_provider_cache() {\n    log \"🧹 Cleaning up provider cache...\"\n    if [[ -d \"$HOME/.terraform.d/plugin-cache\" ]]; then\n        # Remove providers older than 30 days\n        find \"$HOME/.terraform.d/plugin-cache\" -type f -mtime +30 -delete\n        \n        # Remove empty directories\n        find \"$HOME/.terraform.d/plugin-cache\" -type d -empty -delete\n        \n        cache_size=$(du -sh \"$HOME/.terraform.d/plugin-cache\" 2>/dev/null | cut -f1)\n        log \"✅ Provider cache cleanup completed - current size: $cache_size\"\n    fi\n}\n\n# Validate all configurations\nvalidate_configurations() {\n    log \"🔍 Validating all configurations...\"\n    \n    local validation_failed=false\n    \n    # Find all directories with Terraform files\n    find . -name \"*.tf\" -exec dirname {} \\; | sort -u | while read -r dir; do\n        log \"Validating: $dir\"\n        cd \"$dir\" || continue\n        \n        if terraform validate; then\n            log \"✅ $dir validation passed\"\n        else\n            log \"❌ $dir validation failed\"\n            validation_failed=true\n        fi\n        \n        cd - > /dev/null\n    done\n    \n    if [[ \"$validation_failed\" == \"true\" ]]; then\n        log \"⚠️  Some validations failed - please review\"\n    else\n        log \"✅ All validations passed\"\n    fi\n}\n\n# Check for deprecated features\ncheck_deprecated() {\n    log \"🔍 Checking for deprecated features...\"\n    \n    # Check for deprecated syntax\n    local deprecated_patterns=(\n        \"provider\\s+\\\"[^\\\"]+\\\"\\s+{\" # Old provider syntax\n        \"terraform\\s+{[^}]*version\\s*=\" # Old terraform version constraints\n        \"ignore_changes\\s*=\" # Old ignore_changes syntax\n    )\n    \n    for pattern in \"${deprecated_patterns[@]}\"; do\n        if grep -r \"$pattern\" . --include=\"*.tf\" 2>/dev/null; then\n            log \"⚠️  Deprecated pattern found: $pattern\"\n        fi\n    done\n    \n    log \"✅ Deprecation check completed\"\n}\n\n# Security audit\nsecurity_audit() {\n    log \"🔒 Performing security audit...\"\n    \n    # Check for potential security issues\n    local security_issues=()\n    \n    # Check for hardcoded secrets\n    if grep -r -i \"password\\s*=\\s*\\\"[^$]\" . --include=\"*.tf\" --include=\"*.tfvars\" 2>/dev/null; then\n        security_issues+=(\"Potential hardcoded passwords\")\n    fi\n    \n    # Check for public access\n    if grep -r \"0.0.0.0/0\" . --include=\"*.tf\" 2>/dev/null; then\n        security_issues+=(\"Public access (0.0.0.0/0) found\")\n    fi\n    \n    # Check for unencrypted resources\n    if grep -r \"encrypt.*=.*false\" . --include=\"*.tf\" 2>/dev/null; then\n        security_issues+=(\"Unencrypted resources found\")\n    fi\n    \n    if [[ ${#security_issues[@]} -gt 0 ]]; then\n        log \"⚠️  Security issues found:\"\n        for issue in \"${security_issues[@]}\"; do\n            log \"  - $issue\"\n        done\n    else\n        log \"✅ No obvious security issues found\"\n    fi\n}\n\n# State health check\nstate_health_check() {\n    log \"🏥 Performing state health check...\"\n    \n    # Check state file size\n    if [[ -f \"terraform.tfstate\" ]]; then\n        state_size=$(stat -f%z \"terraform.tfstate\" 2>/dev/null || stat -c%s \"terraform.tfstate\" 2>/dev/null)\n        state_size_mb=$((state_size / 1024 / 1024))\n        \n        if [[ $state_size_mb -gt 50 ]]; then\n            log \"⚠️  Large state file detected: ${state_size_mb}MB\"\n        else\n            log \"✅ State file size OK: ${state_size_mb}MB\"\n        fi\n    fi\n    \n    # Check for drift\n    if terraform plan -detailed-exitcode > /dev/null 2>&1; then\n        log \"✅ No infrastructure drift detected\"\n    else\n        exit_code=$?\n        if [[ $exit_code -eq 2 ]]; then\n            log \"⚠️  Infrastructure drift detected\"\n        else\n            log \"❌ Error checking for drift\"\n        fi\n    fi\n}\n\n# Generate maintenance report\ngenerate_report() {\n    log \"📊 Generating maintenance report...\"\n    \n    local report_file=\"/tmp/terraform-maintenance-report-$(date +%Y%m%d_%H%M%S).md\"\n    \n    cat > \"$report_file\" <<EOF\n# Terraform Maintenance Report\n\n**Date:** $(date)\n**Duration:** $((SECONDS / 60)) minutes\n\n## Summary\n\n- Configuration validation: $(grep \"validation\" \"$MAINTENANCE_LOG\" | grep -c \"passed\")\n- Security audit: Completed\n- State health check: Completed\n- Cleanup operations: Completed\n\n## Recommendations\n\n$(grep \"⚠️\" \"$MAINTENANCE_LOG\" | sed 's/.*⚠️  /- /')\n\n## Full Log\n\n\\`\\`\\`\n$(cat \"$MAINTENANCE_LOG\")\n\\`\\`\\`\nEOF\n    \n    log \"📄 Maintenance report generated: $report_file\"\n    \n    # Email report if configured\n    if [[ -n \"$MAINTENANCE_EMAIL\" ]]; then\n        mail -s \"Terraform Maintenance Report - $(date)\" \"$MAINTENANCE_EMAIL\" < \"$report_file\"\n        log \"📧 Report emailed to: $MAINTENANCE_EMAIL\"\n    fi\n}\n\n# Main maintenance routine\nmain() {\n    log \"🚀 Starting Terraform maintenance...\"\n    \n    cleanup_plans\n    cleanup_provider_cache\n    validate_configurations\n    check_deprecated\n    security_audit\n    state_health_check\n    generate_report\n    \n    log \"🎉 Terraform maintenance completed\"\n    log \"📊 Total runtime: $((SECONDS / 60)) minutes\"\n}\n\n# Run maintenance\nmain \"$@\"\nEOF\n\nchmod +x scripts/terraform-maintenance.sh\n\n# Schedule maintenance with cron\ncat > scripts/schedule-maintenance.sh <<'EOF'\n#!/bin/bash\n\n# Add to crontab for weekly maintenance\n(crontab -l 2>/dev/null; echo \"0 2 * * 0 /path/to/terraform-maintenance.sh\") | crontab -\n\necho \"✅ Weekly maintenance scheduled for Sundays at 2 AM\"\nEOF\n\nchmod +x scripts/schedule-maintenance.sh\n```\n\n## Integration Examples\n\n### CI/CD Pipeline Integration\n\n```bash\n# GitHub Actions workflow\nmkdir -p .github/workflows\ncat > .github/workflows/terraform.yml <<EOF\nname: Terraform Multi-Cloud Deployment\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  TF_VERSION: 1.6.4\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [development, staging, production]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v3\n      with:\n        terraform_version: \\${{ env.TF_VERSION }}\n        cli_config_credentials_token: \\${{ secrets.TF_CLOUD_TOKEN }}\n    \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v4\n      with:\n        aws-access-key-id: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-west-2\n    \n    - name: Terraform Format Check\n      run: terraform fmt -check -recursive\n    \n    - name: Terraform Initialize\n      run: terraform init\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Plan\n      run: terraform plan -var-file=\"\\${{ matrix.environment }}.tfvars\"\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Security Scan with Checkov\n      uses: bridgecrewio/checkov-action@master\n      with:\n        directory: .\n        framework: terraform\n        output_format: sarif\n        output_file_path: checkov.sarif\n    \n    - name: Upload Checkov results\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: checkov.sarif\n    \n    - name: Terraform Apply (Production)\n      if: github.ref == 'refs/heads/main' && matrix.environment == 'production'\n      run: terraform apply -auto-approve -var-file=\"production.tfvars\"\n      working-directory: environments/production\nEOF\n```\n\n### GitLab CI Integration\n\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - validate\n  - plan\n  - apply\n  - destroy\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_VERSION: \"1.6.4\"\n  TF_IN_AUTOMATION: \"true\"\n\ncache:\n  key: \"\\${TF_ROOT}\"\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform fmt -check -recursive\n    - terraform validate\n    - |\n      for dir in environments/*/; do\n        cd \"\\$dir\"\n        terraform validate\n        cd -\n      done\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\nplan:production:\n  stage: plan\n  script:\n    - cd environments/production\n    - terraform plan -var-file=\"production.tfvars\" -out=\"production.tfplan\"\n  artifacts:\n    paths:\n      - environments/production/production.tfplan\n    expire_in: 1 week\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\napply:production:\n  stage: apply\n  script:\n    - cd environments/production\n    - terraform apply -input=false \"production.tfplan\"\n  dependencies:\n    - plan:production\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n      when: manual\nEOF\n```\n\n### Jenkins Pipeline\n\n```groovy\n// Jenkinsfile\npipeline {\n    agent any\n    \n    environment {\n        TF_VERSION = '1.6.4'\n        AWS_DEFAULT_REGION = 'us-west-2'\n    }\n    \n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n            }\n        }\n        \n        stage('Setup') {\n            steps {\n                sh '''\n                    # Install Terraform if not present\n                    if ! command -v terraform &> /dev/null; then\n                        wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip\n                        unzip terraform_${TF_VERSION}_linux_amd64.zip\n                        chmod +x terraform\n                        sudo mv terraform /usr/local/bin/\n                    fi\n                    \n                    terraform version\n                '''\n            }\n        }\n        \n        stage('Validate') {\n            parallel {\n                stage('Format Check') {\n                    steps {\n                        sh 'terraform fmt -check -recursive'\n                    }\n                }\n                stage('Configuration Validation') {\n                    steps {\n                        sh '''\n                            for dir in environments/*/; do\n                                cd \"$dir\"\n                                terraform init\n                                terraform validate\n                                cd -\n                            done\n                        '''\n                    }\n                }\n                stage('Security Scan') {\n                    steps {\n                        sh '''\n                            # Install and run Checkov\n                            pip3 install checkov\n                            checkov --framework terraform --directory .\n                        '''\n                    }\n                }\n            }\n        }\n        \n        stage('Plan') {\n            steps {\n                script {\n                    def environments = ['development', 'staging', 'production']\n                    def planResults = [:]\n                    \n                    environments.each { env ->\n                        planResults[env] = {\n                            dir(\"environments/${env}\") {\n                                sh \"\"\"\n                                    terraform init\n                                    terraform plan -var-file=\"${env}.tfvars\" -out=\"${env}.tfplan\"\n                                \"\"\"\n                            }\n                        }\n                    }\n                    \n                    parallel planResults\n                }\n            }\n        }\n        \n        stage('Apply') {\n            when {\n                branch 'main'\n            }\n            steps {\n                script {\n                    input message: 'Apply Terraform changes?', ok: 'Apply'\n                    \n                    dir('environments/production') {\n                        sh 'terraform apply -input=false production.tfplan'\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: 'environments/**/*.tfplan', fingerprint: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'checkov-report',\n                reportFiles: 'index.html',\n                reportName: 'Checkov Security Report'\n            ])\n        }\n        failure {\n            emailext (\n                subject: \"Terraform Pipeline Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"The Terraform pipeline has failed. Please check the build logs for details.\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL}\"\n            )\n        }\n    }\n}\n```\n\n## Additional Resources\n\n- [Official Terraform Documentation](https://developer.hashicorp.com/terraform/docs)\n- [Terraform Registry](https://registry.terraform.io/)\n- [Terraform Best Practices](https://developer.hashicorp.com/terraform/cloud-docs/recommended-practices)\n- [Multi-Cloud Architecture Guide](https://developer.hashicorp.com/terraform/tutorials/aws-get-started)\n- [Security Best Practices](https://developer.hashicorp.com/terraform/language/values/sensitive)\n- [AWS Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Provider Documentation](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [GCP Provider Documentation](https://registry.terraform.io/providers/hashicorp/google/latest/docs)\n- [Terraform Community Forum](https://discuss.hashicorp.com/c/terraform-core)\n- [HashiCorp Learn Terraform](https://learn.hashicorp.com/terraform)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"terraform-installation-guide\" class=\"mobile-header\">Terraform Installation Guide</h1>\n<p class=\"mobile-paragraph\">Terraform is a free and open-source Infrastructure as Code (IaC) tool developed by HashiCorp for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers. Originally created by Mitchell Hashimoto in 2014, Terraform uses declarative configuration files to manage infrastructure resources. It serves as a FOSS alternative to commercial IaC solutions like AWS CloudFormation, Azure Resource Manager, or proprietary enterprise tools, offering enterprise-grade features including multi-cloud management, state management, provider ecosystem, and team collaboration without licensing costs.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for large infrastructures)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 5GB minimum (more for state files and provider binaries)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for cloud provider APIs</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 12.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">HTTPS access to cloud provider APIs (port 443)</li>\n<li class=\"mobile-list-item\">Access to Terraform Registry (registry.terraform.io)</li>\n<li class=\"mobile-list-item\">Access to HashiCorp releases (releases.hashicorp.com)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Cloud provider CLI tools (aws-cli, azure-cli, gcloud)</li>\n<li class=\"mobile-list-item\">Git for configuration management</li>\n<li class=\"mobile-list-item\">Text editor or IDE</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required for installation</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n\n# Verify installation\nterraform version\n\n# Alternative: DNF for newer systems\nsudo dnf install -y yum-utils\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\nsudo dnf install -y terraform</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install Terraform\nsudo apt update\nsudo apt install -y terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from community repository\nsudo pacman -S terraform\n\n# Alternative: Install from AUR\nyay -S terraform\n\n# Install additional tools\nsudo pacman -S terraform-docs tflint\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from Alpine repositories\nsudo apk update\nsudo apk add terraform\n\n# Install additional tools\nsudo apk add bash git curl\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y terraform\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y terraform\n\n# Alternative: Add HashiCorp repository\nsudo zypper addrepo https://rpm.releases.hashicorp.com/SLES/hashicorp.repo\nsudo zypper refresh\nsudo zypper install terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/terraform\n\n# Alternative: Install specific version\nbrew install terraform@1.6\n\n# Verify installation\nterraform version\n\n# Using tfenv for version management\nbrew install tfenv\ntfenv install latest\ntfenv use latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install terraform\n\n# Using ports\ncd /usr/ports/sysutils/terraform\nmake install clean\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install terraform\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install terraform\n\n# Method 3: Manual installation\n# Download from https://releases.hashicorp.com/terraform/\n# Extract terraform.exe to C:\\terraform\n# Add C:\\terraform to PATH\n\n# Method 4: Using Winget\nwinget install HashiCorp.Terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create terraform user</strong> (optional for dedicated service):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /opt/terraform -s /sbin/nologin -c &quot;Terraform Service&quot; terraform</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/local/bin/</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/local/bin/</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/bin/</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/bin/</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/local/bin/</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/terraform/</code> or <code class=\"mobile-inline-code\">/opt/homebrew/etc/terraform/</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/terraform/</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\terraform\\</code> or <code class=\"mobile-inline-code\">%APPDATA%\\terraform\\</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential initial configuration</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create workspace directory\nmkdir -p ~/terraform/projects\ncd ~/terraform/projects\n\n# Create first Terraform configuration\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_version = &quot;&gt;= 1.6&quot;\n  required_providers {\n    local = {\n      source  = &quot;hashicorp/local&quot;\n      version = &quot;~&gt; 2.0&quot;\n    }\n  }\n}\n\nresource &quot;local_file&quot; &quot;hello_world&quot; {\n  content  = &quot;Hello, World from Terraform!&quot;\n  filename = &quot;hello.txt&quot;\n}\nEOF\n\n# Initialize Terraform\nterraform init\n\n# Validate configuration\nterraform validate\n\n# Plan deployment\nterraform plan\n\n# Apply configuration\nterraform apply</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Format configuration files\nterraform fmt\n\n# Initialize and test basic functionality\nterraform init\nterraform plan\nterraform apply\n\n# List state\nterraform state list\n\n# Show state details\nterraform show\n\n# Clean up test resources\nterraform destroy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Configure proper authentication for cloud providers before deploying real infrastructure!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-linux-systems\" class=\"mobile-header\">systemd (Linux Systems)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service for Terraform agent (if using)\nsudo tee /etc/systemd/system/terraform-agent.service &lt;&lt;EOF\n[Unit]\nDescription=Terraform Agent\nAfter=network.target\n\n[Service]\nType=simple\nUser=terraform\nWorkingDirectory=/opt/terraform\nExecStart=/usr/local/bin/terraform-agent\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable terraform-agent</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create OpenRC service script\nsudo tee /etc/init.d/terraform-agent &lt;&lt;EOF\n#!/sbin/openrc-run\n\nname=&quot;terraform-agent&quot;\ndescription=&quot;Terraform Agent&quot;\ncommand=&quot;/usr/bin/terraform-agent&quot;\ncommand_user=&quot;terraform&quot;\ncommand_background=true\npidfile=&quot;/var/run/terraform-agent.pid&quot;\n\ndepend() {\n    need net\n}\nEOF\n\nsudo chmod +x /etc/init.d/terraform-agent\nrc-update add terraform-agent default</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create rc.d script\nsudo tee /usr/local/etc/rc.d/terraform_agent &lt;&lt;EOF\n#!/bin/sh\n. /etc/rc.subr\n\nname=terraform_agent\nrcvar=terraform_agent_enable\ncommand=&quot;/usr/local/bin/terraform-agent&quot;\npidfile=&quot;/var/run/terraform_agent.pid&quot;\nstart_cmd=&quot;terraform_agent_start&quot;\n\nterraform_agent_start() {\n    daemon -p \\${pidfile} \\${command}\n}\n\nload_rc_config \\$name\nrun_rc_command &quot;\\$1&quot;\nEOF\n\nsudo chmod +x /usr/local/etc/rc.d/terraform_agent\necho &#039;terraform_agent_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create LaunchDaemon plist\nsudo tee /Library/LaunchDaemons/com.hashicorp.terraform.agent.plist &lt;&lt;EOF\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;\n&lt;plist version=&quot;1.0&quot;&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n    &lt;string&gt;com.hashicorp.terraform.agent&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;/usr/local/bin/terraform-agent&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;KeepAlive&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\nEOF\n\nsudo launchctl load /Library/LaunchDaemons/com.hashicorp.terraform.agent.plist</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Install Terraform as Windows service using NSSM\nnssm install TerraformAgent &quot;C:\\terraform\\terraform-agent.exe&quot;\nnssm set TerraformAgent AppDirectory &quot;C:\\terraform&quot;\nnssm set TerraformAgent DisplayName &quot;Terraform Agent&quot;\nnssm set TerraformAgent Description &quot;HashiCorp Terraform Agent&quot;\nnssm start TerraformAgent\n\n# Alternative: Using sc command\nsc create TerraformAgent binPath=&quot;C:\\terraform\\terraform-agent.exe&quot; start=auto\nsc start TerraformAgent</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"multi-cloud-provider-setup\" class=\"mobile-header\">Multi-Cloud Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive multi-cloud configuration\ncat &gt; providers.tf &lt;&lt;EOF\nterraform {\n  required_version = &quot;&gt;= 1.6&quot;\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n    azurerm = {\n      source  = &quot;hashicorp/azurerm&quot;\n      version = &quot;~&gt; 3.0&quot;\n    }\n    google = {\n      source  = &quot;hashicorp/google&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n    kubernetes = {\n      source  = &quot;hashicorp/kubernetes&quot;\n      version = &quot;~&gt; 2.0&quot;\n    }\n    helm = {\n      source  = &quot;hashicorp/helm&quot;\n      version = &quot;~&gt; 2.0&quot;\n    }\n  }\n  \n  # Remote state configuration\n  backend &quot;s3&quot; {\n    bucket = &quot;terraform-state-bucket&quot;\n    key    = &quot;infrastructure/terraform.tfstate&quot;\n    region = &quot;us-west-2&quot;\n    \n    # State locking with DynamoDB\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    encrypt        = true\n  }\n}\n\n# AWS Provider\nprovider &quot;aws&quot; {\n  region = var.aws_region\n  \n  default_tags {\n    tags = {\n      Environment   = var.environment\n      ManagedBy     = &quot;terraform&quot;\n      Project       = var.project_name\n      Owner         = var.owner\n    }\n  }\n}\n\n# Azure Provider\nprovider &quot;azurerm&quot; {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n    key_vault {\n      purge_soft_delete_on_destroy = true\n    }\n  }\n}\n\n# Google Cloud Provider\nprovider &quot;google&quot; {\n  project = var.gcp_project_id\n  region  = var.gcp_region\n  zone    = var.gcp_zone\n}\n\n# Kubernetes Provider\nprovider &quot;kubernetes&quot; {\n  config_path = &quot;~/.kube/config&quot;\n}\n\n# Helm Provider\nprovider &quot;helm&quot; {\n  kubernetes {\n    config_path = &quot;~/.kube/config&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"enterprise-features-configuration\" class=\"mobile-header\">Enterprise Features Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Terraform Cloud/Enterprise configuration\ncat &gt; cloud.tf &lt;&lt;EOF\nterraform {\n  cloud {\n    organization = &quot;your-organization&quot;\n    \n    workspaces {\n      name = &quot;production-infrastructure&quot;\n    }\n  }\n}\n\n# Remote execution configuration\nterraform {\n  cloud {\n    organization = &quot;your-organization&quot;\n    \n    workspaces {\n      tags = [&quot;production&quot;, &quot;web-app&quot;]\n    }\n  }\n  \n  required_providers {\n    tfe = {\n      source  = &quot;hashicorp/tfe&quot;\n      version = &quot;~&gt; 0.48&quot;\n    }\n  }\n}\n\n# Terraform Enterprise configuration\nprovider &quot;tfe&quot; {\n  hostname = &quot;terraform.company.com&quot;\n  token    = var.tfe_token\n}\n\n# Workspace configuration\nresource &quot;tfe_workspace&quot; &quot;production&quot; {\n  name         = &quot;production-infrastructure&quot;\n  organization = var.tfe_organization\n  \n  auto_apply = false\n  queue_all_runs = false\n  \n  terraform_version = &quot;1.6.4&quot;\n  \n  vcs_repo {\n    identifier     = &quot;company/infrastructure&quot;\n    branch         = &quot;main&quot;\n    oauth_token_id = var.vcs_oauth_token_id\n  }\n  \n  working_directory = &quot;environments/production&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-state-management\" class=\"mobile-header\">Advanced State Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Encrypted remote state with multiple backends\ncat &gt; backend-s3.tf &lt;&lt;EOF\n# S3 backend with encryption and locking\nterraform {\n  backend &quot;s3&quot; {\n    bucket         = &quot;terraform-state-bucket&quot;\n    key            = &quot;infrastructure/terraform.tfstate&quot;\n    region         = &quot;us-west-2&quot;\n    encrypt        = true\n    kms_key_id     = &quot;arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID&quot;\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    \n    # Additional security\n    skip_region_validation      = false\n    skip_credentials_validation = false\n    skip_metadata_api_check     = false\n  }\n}\n\n# State bucket with versioning and lifecycle\nresource &quot;aws_s3_bucket&quot; &quot;terraform_state&quot; {\n  bucket = &quot;terraform-state-bucket&quot;\n  \n  tags = {\n    Name        = &quot;Terraform State Bucket&quot;\n    Environment = var.environment\n  }\n}\n\nresource &quot;aws_s3_bucket_versioning&quot; &quot;terraform_state_versioning&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n  versioning_configuration {\n    status = &quot;Enabled&quot;\n  }\n}\n\nresource &quot;aws_s3_bucket_server_side_encryption_configuration&quot; &quot;terraform_state_encryption&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.terraform_bucket_key.arn\n      sse_algorithm     = &quot;aws:kms&quot;\n    }\n  }\n}\n\nresource &quot;aws_s3_bucket_public_access_block&quot; &quot;terraform_state&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\n# KMS key for encryption\nresource &quot;aws_kms_key&quot; &quot;terraform_bucket_key&quot; {\n  description             = &quot;KMS key for Terraform state bucket encryption&quot;\n  deletion_window_in_days = 7\n\n  tags = {\n    Name        = &quot;Terraform State Bucket Key&quot;\n    Environment = var.environment\n  }\n}\n\n# DynamoDB table for state locking\nresource &quot;aws_dynamodb_table&quot; &quot;terraform_state_lock&quot; {\n  name           = &quot;terraform-state-lock&quot;\n  billing_mode   = &quot;PAY_PER_REQUEST&quot;\n  hash_key       = &quot;LockID&quot;\n\n  attribute {\n    name = &quot;LockID&quot;\n    type = &quot;S&quot;\n  }\n\n  server_side_encryption {\n    enabled = true\n  }\n\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  tags = {\n    Name        = &quot;Terraform State Lock Table&quot;\n    Environment = var.environment\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<p class=\"mobile-paragraph\">Terraform itself doesn't typically require reverse proxy setup, but when using Terraform Enterprise or Cloud, you might need to configure proxies for API access:</p>\n<h3 id=\"corporate-proxy-configuration\" class=\"mobile-header\">Corporate Proxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Terraform to work through corporate proxy\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,.company.com\n\n# Add to ~/.bashrc or ~/.zshrc\ncat &gt;&gt; ~/.bashrc &lt;&lt;EOF\n# Terraform proxy settings\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,.company.com\nEOF\n\n# Configure Git for proxy (if needed for modules)\ngit config --global http.proxy http://proxy.company.com:8080\ngit config --global https.proxy http://proxy.company.com:8080</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration-for-terraform-enterprise\" class=\"mobile-header\">nginx Configuration for Terraform Enterprise</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/terraform-enterprise\nupstream terraform_enterprise {\n    server 127.0.0.1:8800;\n    server 127.0.0.1:8801 backup;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name terraform.company.com;\n\n    ssl_certificate /etc/ssl/certs/terraform.company.com.crt;\n    ssl_certificate_key /etc/ssl/private/terraform.company.com.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;\n    add_header X-Frame-Options &quot;DENY&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n\n    location / {\n        proxy_pass http://terraform_enterprise;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for real-time updates\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts for long-running operations\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 300s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"secure-credential-management\" class=\"mobile-header\">Secure Credential Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use environment variables for credentials\ncat &gt; .env.example &lt;&lt;EOF\n# AWS credentials\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_DEFAULT_REGION=us-west-2\n\n# Azure credentials\nARM_CLIENT_ID=your_client_id\nARM_CLIENT_SECRET=your_client_secret\nARM_SUBSCRIPTION_ID=your_subscription_id\nARM_TENANT_ID=your_tenant_id\n\n# GCP credentials\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json\nGOOGLE_PROJECT=your_project_id\n\n# Terraform Cloud\nTF_CLOUD_TOKEN=your_terraform_cloud_token\nEOF\n\n# Use IAM roles for AWS (recommended)\ncat &gt; aws-iam-role.tf &lt;&lt;EOF\n# IAM role for Terraform execution\nresource &quot;aws_iam_role&quot; &quot;terraform_execution&quot; {\n  name = &quot;TerraformExecutionRole&quot;\n\n  assume_role_policy = jsonencode({\n    Version = &quot;2012-10-17&quot;\n    Statement = [\n      {\n        Action = &quot;sts:AssumeRole&quot;\n        Effect = &quot;Allow&quot;\n        Principal = {\n          Service = &quot;ec2.amazonaws.com&quot;\n        }\n      },\n    ]\n  })\n}\n\n# Attach managed policies with least privilege\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;terraform_execution&quot; {\n  for_each = toset([\n    &quot;arn:aws:iam::aws:policy/PowerUserAccess&quot;\n  ])\n  \n  role       = aws_iam_role.terraform_execution.name\n  policy_arn = each.value\n}\n\n# Create instance profile\nresource &quot;aws_iam_instance_profile&quot; &quot;terraform_execution&quot; {\n  name = &quot;TerraformExecutionProfile&quot;\n  role = aws_iam_role.terraform_execution.name\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-scanning-and-compliance\" class=\"mobile-header\">Security Scanning and Compliance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Pre-commit hooks for security\ncat &gt; .pre-commit-config.yaml &lt;&lt;EOF\nrepos:\n- repo: https://github.com/antonbabenko/pre-commit-terraform\n  rev: v1.83.5\n  hooks:\n    - id: terraform_fmt\n    - id: terraform_validate\n    - id: terraform_docs\n    - id: terraform_tflint\n    - id: terraform_checkov\n    - id: terraform_trivy\n\n- repo: https://github.com/Yelp/detect-secrets\n  rev: v1.4.0\n  hooks:\n    - id: detect-secrets\n      args: [&#039;--baseline&#039;, &#039;.secrets.baseline&#039;]\nEOF\n\n# Checkov configuration for security scanning\ncat &gt; .checkov.yaml &lt;&lt;EOF\nframework:\n  - terraform\n  - secrets\n\ncheck:\n  - CKV_AWS_79  # Ensure Instance Metadata Service Version 1 is not enabled\n  - CKV_AWS_8   # Ensure Launch Configuration EBS encryption\n  - CKV_AZURE_1 # Ensure storage account encryption\n\nskip-check:\n  - CKV_AWS_23  # Skip S3 bucket public read check for specific use cases\n\noutput: cli\nquiet: false\ncompact: false\nEOF\n\n# TFLint configuration\ncat &gt; .tflint.hcl &lt;&lt;EOF\nplugin &quot;aws&quot; {\n    enabled = true\n    version = &quot;0.21.2&quot;\n    source  = &quot;github.com/terraform-linters/tflint-ruleset-aws&quot;\n}\n\nplugin &quot;azurerm&quot; {\n    enabled = true\n    version = &quot;0.21.0&quot;\n    source  = &quot;github.com/terraform-linters/tflint-ruleset-azurerm&quot;\n}\n\nrule &quot;terraform_unused_declarations&quot; {\n  enabled = true\n}\n\nrule &quot;terraform_naming_convention&quot; {\n  enabled = true\n  format  = &quot;snake_case&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"policy-as-code-with-opa\" class=\"mobile-header\">Policy as Code with OPA</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># OPA (Open Policy Agent) security policies\ncat &gt; policy/security.rego &lt;&lt;EOF\npackage terraform.security\n\n# Deny instances without encryption\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_instance&quot;\n    resource.change.after.root_block_device[_].encrypted == false\n    reason := &quot;AWS instances must have encrypted root volumes&quot;\n}\n\n# Deny public S3 buckets\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_s3_bucket_public_access_block&quot;\n    resource.change.after.block_public_acls == false\n    reason := &quot;S3 buckets must block public access&quot;\n}\n\n# Require specific instance types in production\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_instance&quot;\n    instance_type := resource.change.after.instance_type\n    not allowed_instance_type(instance_type)\n    workspace := input.terraform_version.workspace\n    workspace == &quot;production&quot;\n    reason := sprintf(&quot;Production instances must use approved instance types, got: %v&quot;, [instance_type])\n}\n\nallowed_instance_type(instance_type) {\n    allowed_types := [&quot;t3.micro&quot;, &quot;t3.small&quot;, &quot;t3.medium&quot;, &quot;m5.large&quot;, &quot;m5.xlarge&quot;]\n    instance_type in allowed_types\n}\nEOF\n\n# Policy validation script\ncat &gt; scripts/validate-policy.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Generate Terraform plan\nterraform plan -out=tfplan\nterraform show -json tfplan &gt; tfplan.json\n\n# Validate against policies\nconftest test tfplan.json --policy policy/\n\n# Cleanup\nrm tfplan tfplan.json\nEOF\n\nchmod +x scripts/validate-policy.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Terraform doesn't require a traditional database, but it does use state files and can integrate with various storage backends:</p>\n<h3 id=\"state-storage-backends\" class=\"mobile-header\">State Storage Backends</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># PostgreSQL backend (for Terraform Enterprise)\ncat &gt; backend-postgres.tf &lt;&lt;EOF\nterraform {\n  backend &quot;pg&quot; {\n    conn_str = &quot;postgres://user:pass@localhost/terraform_backend?sslmode=require&quot;\n  }\n}\nEOF\n\n# Consul backend for distributed state\ncat &gt; backend-consul.tf &lt;&lt;EOF\nterraform {\n  backend &quot;consul&quot; {\n    address = &quot;consul.company.com:8500&quot;\n    scheme  = &quot;https&quot;\n    path    = &quot;terraform/infrastructure&quot;\n  }\n}\nEOF\n\n# etcd backend\ncat &gt; backend-etcd.tf &lt;&lt;EOF\nterraform {\n  backend &quot;etcdv3&quot; {\n    endpoints = [&quot;http://etcd1:2379&quot;, &quot;http://etcd2:2379&quot;, &quot;http://etcd3:2379&quot;]\n    lock      = true\n    prefix    = &quot;terraform-state/&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-infrastructure-management\" class=\"mobile-header\">Database Infrastructure Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Database deployment with Terraform\ncat &gt; database.tf &lt;&lt;EOF\n# RDS instance with Multi-AZ\nresource &quot;aws_db_instance&quot; &quot;main&quot; {\n  identifier = &quot;${var.project_name}-db&quot;\n  \n  engine         = &quot;postgresql&quot;\n  engine_version = &quot;15.4&quot;\n  instance_class = &quot;db.t3.micro&quot;\n  \n  allocated_storage     = 20\n  max_allocated_storage = 100\n  storage_type         = &quot;gp3&quot;\n  storage_encrypted    = true\n  kms_key_id          = aws_kms_key.rds.arn\n  \n  db_name  = var.database_name\n  username = var.database_username\n  password = var.database_password\n  port     = 5432\n  \n  multi_az               = true\n  publicly_accessible    = false\n  backup_retention_period = 7\n  backup_window          = &quot;03:00-04:00&quot;\n  maintenance_window     = &quot;sun:04:00-sun:05:00&quot;\n  \n  skip_final_snapshot = false\n  final_snapshot_identifier = &quot;${var.project_name}-db-final-snapshot&quot;\n  \n  vpc_security_group_ids = [aws_security_group.rds.id]\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n  \n  tags = var.common_tags\n}\n\n# Database subnet group\nresource &quot;aws_db_subnet_group&quot; &quot;main&quot; {\n  name       = &quot;${var.project_name}-db-subnet-group&quot;\n  subnet_ids = var.private_subnet_ids\n\n  tags = merge(var.common_tags, {\n    Name = &quot;${var.project_name}-db-subnet-group&quot;\n  })\n}\n\n# KMS key for RDS encryption\nresource &quot;aws_kms_key&quot; &quot;rds&quot; {\n  description             = &quot;KMS key for RDS encryption&quot;\n  deletion_window_in_days = 7\n\n  tags = merge(var.common_tags, {\n    Name = &quot;${var.project_name}-rds-kms-key&quot;\n  })\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"terraform-performance-tuning\" class=\"mobile-header\">Terraform Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize Terraform execution\ncat &gt; terraform.tfvars &lt;&lt;EOF\n# Performance settings\nterraform_parallelism = 10\nterraform_refresh = true\nterraform_upgrade = false\nEOF\n\n# Performance optimization script\ncat &gt; scripts/optimize-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Increase parallelism for faster execution\nexport TF_CLI_ARGS_plan=&quot;-parallelism=10&quot;\nexport TF_CLI_ARGS_apply=&quot;-parallelism=10&quot;\n\n# Use faster JSON output for large states\nexport TF_CLI_ARGS_show=&quot;-json&quot;\n\n# Optimize provider caching\nexport TF_PLUGIN_CACHE_DIR=&quot;$HOME/.terraform.d/plugin-cache&quot;\nmkdir -p &quot;$TF_PLUGIN_CACHE_DIR&quot;\n\n# Performance monitoring\necho &quot;Starting Terraform operation at $(date)&quot;\ntime terraform &quot;$@&quot;\necho &quot;Completed Terraform operation at $(date)&quot;\nEOF\n\nchmod +x scripts/optimize-terraform.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"large-infrastructure-management\" class=\"mobile-header\">Large Infrastructure Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Workspace and module organization\ncat &gt; modules/infrastructure/main.tf &lt;&lt;EOF\n# Optimized module structure for large deployments\nterraform {\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n  }\n}\n\n# Use data sources efficiently\ndata &quot;aws_availability_zones&quot; &quot;available&quot; {\n  state = &quot;available&quot;\n  \n  # Cache this data to avoid repeated API calls\n  lifecycle {\n    postcondition {\n      condition     = length(self.names) &gt;= 2\n      error_message = &quot;At least 2 availability zones required.&quot;\n    }\n  }\n}\n\n# Optimize resource creation with for_each\nresource &quot;aws_subnet&quot; &quot;private&quot; {\n  for_each = toset(slice(data.aws_availability_zones.available.names, 0, var.subnet_count))\n  \n  vpc_id            = aws_vpc.main.id\n  cidr_block        = cidrsubnet(var.vpc_cidr, 8, index(data.aws_availability_zones.available.names, each.value) + 10)\n  availability_zone = each.value\n  \n  tags = merge(var.common_tags, {\n    Name = &quot;${var.name_prefix}-private-${each.value}&quot;\n    Type = &quot;private&quot;\n  })\n}\n\n# Use locals for complex computations\nlocals {\n  # Pre-compute values to avoid recalculation\n  availability_zones = slice(data.aws_availability_zones.available.names, 0, var.subnet_count)\n  \n  # Create maps for efficient lookups\n  subnet_map = {\n    for subnet in aws_subnet.private : \n    subnet.availability_zone =&gt; subnet.id\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"state-optimization\" class=\"mobile-header\">State Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># State file optimization script\ncat &gt; scripts/optimize-state.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Pull current state for backup\nterraform state pull &gt; state-backup-$(date +%Y%m%d_%H%M%S).json\n\n# Remove unused resources from state\nterraform state list | while read resource; do\n    if terraform plan -target=&quot;$resource&quot; | grep -q &quot;No changes&quot;; then\n        echo &quot;Checking if $resource can be safely removed...&quot;\n        # Add logic to safely remove unused resources\n    fi\ndone\n\n# Refresh state to sync with real infrastructure\nterraform refresh\n\necho &quot;State optimization completed&quot;\nEOF\n\nchmod +x scripts/optimize-state.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"terraform-operations-monitoring\" class=\"mobile-header\">Terraform Operations Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Terraform execution monitoring\ncat &gt; scripts/monitor-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nLOG_FILE=&quot;/var/log/terraform/operations.log&quot;\nMETRICS_FILE=&quot;/var/log/terraform/metrics.log&quot;\n\n# Ensure log directory exists\nmkdir -p &quot;$(dirname &quot;$LOG_FILE&quot;)&quot;\nmkdir -p &quot;$(dirname &quot;$METRICS_FILE&quot;)&quot;\n\n# Function to log operations\nlog_operation() {\n    local operation=&quot;$1&quot;\n    local status=&quot;$2&quot;\n    local duration=&quot;$3&quot;\n    local timestamp=$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)\n    \n    echo &quot;[$timestamp] Operation: $operation, Status: $status, Duration: ${duration}s&quot; &gt;&gt; &quot;$LOG_FILE&quot;\n    echo &quot;terraform_operation_duration{operation=\\&quot;$operation\\&quot;,status=\\&quot;$status\\&quot;} $duration&quot; &gt;&gt; &quot;$METRICS_FILE&quot;\n}\n\n# Wrapper function for terraform commands\nterraform_monitored() {\n    local operation=&quot;$1&quot;\n    shift\n    local start_time=$(date +%s)\n    local exit_code=0\n    \n    echo &quot;Starting Terraform $operation at $(date)&quot;\n    \n    if terraform &quot;$operation&quot; &quot;$@&quot;; then\n        local end_time=$(date +%s)\n        local duration=$((end_time - start_time))\n        log_operation &quot;$operation&quot; &quot;success&quot; &quot;$duration&quot;\n        echo &quot;Terraform $operation completed successfully in ${duration}s&quot;\n    else\n        exit_code=$?\n        local end_time=$(date +%s)\n        local duration=$((end_time - start_time))\n        log_operation &quot;$operation&quot; &quot;failure&quot; &quot;$duration&quot;\n        echo &quot;Terraform $operation failed after ${duration}s&quot;\n        return $exit_code\n    fi\n}\n\n# Usage: terraform_monitored plan, terraform_monitored apply, etc.\nterraform_monitored &quot;$@&quot;\nEOF\n\nchmod +x scripts/monitor-terraform.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-monitoring-with-terraform\" class=\"mobile-header\">Infrastructure Monitoring with Terraform</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy monitoring stack with Terraform\ncat &gt; monitoring.tf &lt;&lt;EOF\n# CloudWatch alarms for infrastructure\nresource &quot;aws_cloudwatch_metric_alarm&quot; &quot;high_cpu&quot; {\n  for_each = toset(module.compute.instance_ids)\n  \n  alarm_name          = &quot;high-cpu-${each.key}&quot;\n  comparison_operator = &quot;GreaterThanThreshold&quot;\n  evaluation_periods  = &quot;2&quot;\n  metric_name        = &quot;CPUUtilization&quot;\n  namespace          = &quot;AWS/EC2&quot;\n  period             = &quot;300&quot;\n  statistic          = &quot;Average&quot;\n  threshold          = &quot;80&quot;\n  alarm_description  = &quot;This metric monitors EC2 CPU utilization&quot;\n\n  dimensions = {\n    InstanceId = each.value\n  }\n\n  alarm_actions = [aws_sns_topic.alerts.arn]\n  \n  tags = var.common_tags\n}\n\n# SNS topic for alerts\nresource &quot;aws_sns_topic&quot; &quot;alerts&quot; {\n  name = &quot;${var.project_name}-infrastructure-alerts&quot;\n  \n  tags = var.common_tags\n}\n\nresource &quot;aws_sns_topic_subscription&quot; &quot;email_alerts&quot; {\n  topic_arn = aws_sns_topic.alerts.arn\n  protocol  = &quot;email&quot;\n  endpoint  = var.alert_email\n}\n\n# Log group for Terraform operations\nresource &quot;aws_cloudwatch_log_group&quot; &quot;terraform_ops&quot; {\n  name              = &quot;/terraform/operations&quot;\n  retention_in_days = 30\n  \n  tags = var.common_tags\n}\n\n# Dashboard for infrastructure monitoring\nresource &quot;aws_cloudwatch_dashboard&quot; &quot;main&quot; {\n  dashboard_name = &quot;${var.project_name}-infrastructure&quot;\n\n  dashboard_body = jsonencode({\n    widgets = [\n      {\n        type   = &quot;metric&quot;\n        x      = 0\n        y      = 0\n        width  = 12\n        height = 6\n\n        properties = {\n          metrics = [\n            [&quot;AWS/EC2&quot;, &quot;CPUUtilization&quot;, &quot;InstanceId&quot;, module.compute.instance_ids[0]],\n          ]\n          view    = &quot;timeSeries&quot;\n          stacked = false\n          region  = var.aws_region\n          title   = &quot;EC2 Instance CPU&quot;\n          period  = 300\n        }\n      }\n    ]\n  })\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-cloud-monitoring\" class=\"mobile-header\">Terraform Cloud Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Terraform Cloud workspaces\ncat &gt; scripts/monitor-tf-cloud.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nTF_CLOUD_TOKEN=&quot;${TF_CLOUD_TOKEN}&quot;\nORGANIZATION=&quot;${TF_ORGANIZATION}&quot;\n\n# Function to get workspace status\nget_workspace_status() {\n    local workspace_name=&quot;$1&quot;\n    \n    curl -s \\\n        --header &quot;Authorization: Bearer $TF_CLOUD_TOKEN&quot; \\\n        --header &quot;Content-Type: application/vnd.api+json&quot; \\\n        &quot;https://app.terraform.io/api/v2/organizations/$ORGANIZATION/workspaces/$workspace_name/current-run&quot; \\\n        | jq -r &#039;.data.attributes.status&#039;\n}\n\n# Function to get workspace runs\nget_recent_runs() {\n    local workspace_id=&quot;$1&quot;\n    \n    curl -s \\\n        --header &quot;Authorization: Bearer $TF_CLOUD_TOKEN&quot; \\\n        --header &quot;Content-Type: application/vnd.api+json&quot; \\\n        &quot;https://app.terraform.io/api/v2/workspaces/$workspace_id/runs&quot; \\\n        | jq -r &#039;.data[].attributes | &quot;\\(.status) - \\(.created_at)&quot;&#039;\n}\n\n# Monitor critical workspaces\nWORKSPACES=(&quot;production-web&quot; &quot;production-database&quot; &quot;staging-environment&quot;)\n\nfor workspace in &quot;${WORKSPACES[@]}&quot;; do\n    status=$(get_workspace_status &quot;$workspace&quot;)\n    echo &quot;Workspace: $workspace, Status: $status&quot;\n    \n    if [[ &quot;$status&quot; == &quot;errored&quot; ]]; then\n        echo &quot;❌ ALERT: Workspace $workspace has errors!&quot;\n        # Send alert to monitoring system\n        curl -X POST \\\n            -H &quot;Content-Type: application/json&quot; \\\n            -d &quot;{\\&quot;text\\&quot;: \\&quot;Terraform workspace $workspace has errors\\&quot;}&quot; \\\n            &quot;$SLACK_WEBHOOK_URL&quot;\n    elif [[ &quot;$status&quot; == &quot;planned_and_finished&quot; ]]; then\n        echo &quot;✅ Workspace $workspace is healthy&quot;\n    fi\ndone\nEOF\n\nchmod +x scripts/monitor-tf-cloud.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"state-file-backup\" class=\"mobile-header\">State File Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Comprehensive state backup script\ncat &gt; scripts/backup-terraform-state.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nBACKUP_DIR=&quot;/backup/terraform&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nENVIRONMENTS=(&quot;development&quot; &quot;staging&quot; &quot;production&quot;)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\nbackup_state() {\n    local environment=&quot;$1&quot;\n    local backup_path=&quot;$BACKUP_DIR/$environment&quot;\n    \n    echo &quot;Backing up $environment state...&quot;\n    mkdir -p &quot;$backup_path&quot;\n    \n    # Change to environment directory\n    cd &quot;environments/$environment&quot; || return 1\n    \n    # Pull current state\n    terraform state pull &gt; &quot;$backup_path/terraform-state-$DATE.json&quot;\n    \n    # Backup configuration files\n    tar -czf &quot;$backup_path/terraform-config-$DATE.tar.gz&quot; \\\n        --exclude=&quot;.terraform&quot; \\\n        --exclude=&quot;*.tfplan&quot; \\\n        .\n    \n    # Backup workspace info\n    terraform workspace show &gt; &quot;$backup_path/current-workspace-$DATE.txt&quot;\n    terraform workspace list &gt; &quot;$backup_path/all-workspaces-$DATE.txt&quot;\n    \n    # Backup provider versions\n    terraform version &gt; &quot;$backup_path/terraform-version-$DATE.txt&quot;\n    \n    cd - &gt; /dev/null\n    \n    echo &quot;✅ Backup completed for $environment&quot;\n}\n\n# Backup all environments\nfor env in &quot;${ENVIRONMENTS[@]}&quot;; do\n    if [[ -d &quot;environments/$env&quot; ]]; then\n        backup_state &quot;$env&quot;\n    else\n        echo &quot;⚠️  Environment directory not found: environments/$env&quot;\n    fi\ndone\n\n# Create consolidated backup\ncd &quot;$BACKUP_DIR&quot;\ntar -czf &quot;terraform-complete-backup-$DATE.tar.gz&quot; \\\n    --exclude=&quot;*.tar.gz&quot; \\\n    .\n\n# Upload to cloud storage\nif command -v aws &amp;&gt; /dev/null; then\n    aws s3 cp &quot;terraform-complete-backup-$DATE.tar.gz&quot; \\\n        s3://terraform-backups/\nfi\n\nif command -v az &amp;&gt; /dev/null; then\n    az storage blob upload \\\n        --file &quot;terraform-complete-backup-$DATE.tar.gz&quot; \\\n        --container-name terraform-backups \\\n        --name &quot;terraform-complete-backup-$DATE.tar.gz&quot;\nfi\n\nif command -v gsutil &amp;&gt; /dev/null; then\n    gsutil cp &quot;terraform-complete-backup-$DATE.tar.gz&quot; \\\n        gs://terraform-backups/\nfi\n\n# Cleanup old backups (keep last 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;terraform-complete-backup-*.tar.gz&quot; \\\n    -mtime +30 -delete\n\necho &quot;🎉 All backups completed successfully&quot;\nEOF\n\nchmod +x scripts/backup-terraform-state.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery-procedures\" class=\"mobile-header\">Disaster Recovery Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disaster recovery script\ncat &gt; scripts/disaster-recovery.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nBACKUP_FILE=&quot;$1&quot;\nTARGET_ENVIRONMENT=&quot;$2&quot;\n\nif [[ -z &quot;$BACKUP_FILE&quot; || -z &quot;$TARGET_ENVIRONMENT&quot; ]]; then\n    echo &quot;Usage: $0 &lt;backup-file.tar.gz&gt; &lt;target-environment&gt;&quot;\n    echo &quot;Example: $0 terraform-complete-backup-20240115_143000.tar.gz production&quot;\n    exit 1\nfi\n\n# Verify backup file exists\nif [[ ! -f &quot;$BACKUP_FILE&quot; ]]; then\n    echo &quot;❌ Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Create recovery directory\nRECOVERY_DIR=&quot;/tmp/terraform-recovery-$(date +%s)&quot;\nmkdir -p &quot;$RECOVERY_DIR&quot;\n\n# Extract backup\necho &quot;📦 Extracting backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C &quot;$RECOVERY_DIR&quot;\n\n# Navigate to target environment\ncd &quot;environments/$TARGET_ENVIRONMENT&quot; || {\n    echo &quot;❌ Target environment directory not found: environments/$TARGET_ENVIRONMENT&quot;\n    exit 1\n}\n\n# Backup current state before recovery\necho &quot;💾 Backing up current state...&quot;\nterraform state pull &gt; &quot;current-state-backup-$(date +%Y%m%d_%H%M%S).json&quot;\n\n# Import recovered state\nRECOVERED_STATE=&quot;$RECOVERY_DIR/$TARGET_ENVIRONMENT/terraform-state-*.json&quot;\nif [[ -f $RECOVERED_STATE ]]; then\n    echo &quot;🔄 Restoring state from backup...&quot;\n    terraform state push &quot;$RECOVERED_STATE&quot;\nelse\n    echo &quot;❌ No state file found in backup for environment: $TARGET_ENVIRONMENT&quot;\n    exit 1\nfi\n\n# Verify state consistency\necho &quot;🔍 Verifying state consistency...&quot;\nif terraform plan -detailed-exitcode; then\n    echo &quot;✅ State restored successfully - no drift detected&quot;\nelif [[ $? -eq 2 ]]; then\n    echo &quot;⚠️  State restored but drift detected - manual review required&quot;\n    terraform plan\nelse\n    echo &quot;❌ State restoration failed - check error messages above&quot;\n    exit 1\nfi\n\n# Cleanup\nrm -rf &quot;$RECOVERY_DIR&quot;\n\necho &quot;🎉 Disaster recovery completed for environment: $TARGET_ENVIRONMENT&quot;\necho &quot;💡 Please review the plan output and apply changes if necessary&quot;\nEOF\n\nchmod +x scripts/disaster-recovery.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"state-migration-and-refactoring\" class=\"mobile-header\">State Migration and Refactoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># State migration script for refactoring\ncat &gt; scripts/migrate-state.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Function to safely move resources in state\nmove_resource() {\n    local old_address=&quot;$1&quot;\n    local new_address=&quot;$2&quot;\n    \n    echo &quot;Moving $old_address to $new_address&quot;\n    \n    # Check if source resource exists\n    if terraform state show &quot;$old_address&quot; &amp;&gt;/dev/null; then\n        terraform state mv &quot;$old_address&quot; &quot;$new_address&quot;\n        echo &quot;✅ Successfully moved $old_address to $new_address&quot;\n    else\n        echo &quot;⚠️  Resource not found: $old_address&quot;\n    fi\n}\n\n# Function to import existing resources\nimport_resource() {\n    local resource_address=&quot;$1&quot;\n    local resource_id=&quot;$2&quot;\n    \n    echo &quot;Importing $resource_id as $resource_address&quot;\n    \n    if terraform import &quot;$resource_address&quot; &quot;$resource_id&quot;; then\n        echo &quot;✅ Successfully imported $resource_id as $resource_address&quot;\n    else\n        echo &quot;❌ Failed to import $resource_id&quot;\n    fi\n}\n\n# Example migrations\necho &quot;🔄 Starting state migrations...&quot;\n\n# Move resources to modules\nmove_resource &quot;aws_instance.web&quot; &quot;module.web_servers.aws_instance.main[0]&quot;\nmove_resource &quot;aws_security_group.web&quot; &quot;module.web_servers.aws_security_group.main&quot;\n\n# Import existing resources\nimport_resource &quot;aws_s3_bucket.existing_bucket&quot; &quot;existing-bucket-name&quot;\n\n# Remove resources that are no longer managed\nterraform state rm aws_instance.deprecated\n\necho &quot;🎉 State migrations completed&quot;\necho &quot;💡 Run &#039;terraform plan&#039; to verify changes&quot;\nEOF\n\nchmod +x scripts/migrate-state.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Terraform troubleshooting script\ncat &gt; scripts/troubleshoot-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\necho &quot;🔧 Terraform Troubleshooting Tool&quot;\necho &quot;================================&quot;\n\n# Check Terraform installation\ncheck_installation() {\n    echo &quot;📋 Checking Terraform installation...&quot;\n    \n    if command -v terraform &amp;&gt; /dev/null; then\n        terraform version\n        echo &quot;✅ Terraform is installed&quot;\n    else\n        echo &quot;❌ Terraform is not installed or not in PATH&quot;\n        return 1\n    fi\n}\n\n# Check configuration syntax\ncheck_configuration() {\n    echo &quot;📋 Checking configuration syntax...&quot;\n    \n    if terraform fmt -check -diff; then\n        echo &quot;✅ Configuration is properly formatted&quot;\n    else\n        echo &quot;⚠️  Configuration formatting issues found&quot;\n        terraform fmt -diff\n    fi\n    \n    if terraform validate; then\n        echo &quot;✅ Configuration is valid&quot;\n    else\n        echo &quot;❌ Configuration validation failed&quot;\n        return 1\n    fi\n}\n\n# Check provider authentication\ncheck_providers() {\n    echo &quot;📋 Checking provider authentication...&quot;\n    \n    # AWS\n    if aws sts get-caller-identity &amp;&gt;/dev/null; then\n        echo &quot;✅ AWS credentials are valid&quot;\n    else\n        echo &quot;⚠️  AWS credentials may be invalid or not configured&quot;\n    fi\n    \n    # Azure\n    if az account show &amp;&gt;/dev/null; then\n        echo &quot;✅ Azure credentials are valid&quot;\n    else\n        echo &quot;⚠️  Azure credentials may be invalid or not configured&quot;\n    fi\n    \n    # GCP\n    if gcloud auth list --filter=status:ACTIVE --format=&quot;value(account)&quot; &amp;&gt;/dev/null; then\n        echo &quot;✅ GCP credentials are valid&quot;\n    else\n        echo &quot;⚠️  GCP credentials may be invalid or not configured&quot;\n    fi\n}\n\n# Check state file\ncheck_state() {\n    echo &quot;📋 Checking state file...&quot;\n    \n    if terraform state list &amp;&gt;/dev/null; then\n        resource_count=$(terraform state list | wc -l)\n        echo &quot;✅ State file is accessible with $resource_count resources&quot;\n    else\n        echo &quot;❌ Cannot access state file&quot;\n        return 1\n    fi\n}\n\n# Check for common issues\ncheck_common_issues() {\n    echo &quot;📋 Checking for common issues...&quot;\n    \n    # Check for lock file\n    if [[ -f &quot;.terraform.lock.hcl&quot; ]]; then\n        echo &quot;✅ Lock file exists&quot;\n    else\n        echo &quot;⚠️  Lock file missing - run &#039;terraform init&#039;&quot;\n    fi\n    \n    # Check for local state file in production\n    if [[ -f &quot;terraform.tfstate&quot; ]] &amp;&amp; [[ $(terraform workspace show) == &quot;production&quot; ]]; then\n        echo &quot;⚠️  Local state file detected in production workspace&quot;\n        echo &quot;    Consider using remote state for production&quot;\n    fi\n    \n    # Check for hardcoded secrets\n    if grep -r &quot;password\\s*=\\s*\\&quot;&quot; . --include=&quot;*.tf&quot; --include=&quot;*.tfvars&quot; 2&gt;/dev/null; then\n        echo &quot;⚠️  Potential hardcoded passwords found&quot;\n    fi\n    \n    # Check for large state file\n    if [[ -f &quot;terraform.tfstate&quot; ]]; then\n        state_size=$(stat -f%z &quot;terraform.tfstate&quot; 2&gt;/dev/null || stat -c%s &quot;terraform.tfstate&quot; 2&gt;/dev/null)\n        if [[ $state_size -gt 10485760 ]]; then  # 10MB\n            echo &quot;⚠️  Large state file detected ($(($state_size / 1024 / 1024))MB)&quot;\n            echo &quot;    Consider splitting into smaller configurations&quot;\n        fi\n    fi\n}\n\n# Debug mode information\ndebug_info() {\n    echo &quot;📋 Debug information...&quot;\n    \n    echo &quot;Working directory: $(pwd)&quot;\n    echo &quot;Terraform workspace: $(terraform workspace show)&quot;\n    echo &quot;Environment variables:&quot;\n    env | grep -E &quot;^(TF_|AWS_|ARM_|GOOGLE_)&quot; | sed &#039;s/=.*/=***/&#039; | sort\n}\n\n# Run all checks\nrun_all_checks() {\n    check_installation || return 1\n    check_configuration || return 1\n    check_providers\n    check_state || return 1\n    check_common_issues\n    debug_info\n}\n\n# Main execution\ncase &quot;${1:-all}&quot; in\n    &quot;installation&quot;)\n        check_installation\n        ;;\n    &quot;config&quot;)\n        check_configuration\n        ;;\n    &quot;providers&quot;)\n        check_providers\n        ;;\n    &quot;state&quot;)\n        check_state\n        ;;\n    &quot;common&quot;)\n        check_common_issues\n        ;;\n    &quot;debug&quot;)\n        debug_info\n        ;;\n    &quot;all&quot;)\n        run_all_checks\n        ;;\n    *)\n        echo &quot;Usage: $0 [installation|config|providers|state|common|debug|all]&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nchmod +x scripts/troubleshoot-terraform.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Advanced debugging techniques\ncat &gt; scripts/debug-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Enable debug logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=&quot;terraform-debug-$(date +%Y%m%d_%H%M%S).log&quot;\n\n# Create debug session\ndebug_session() {\n    local operation=&quot;$1&quot;\n    shift\n    \n    echo &quot;🐛 Starting debug session for: $operation&quot;\n    echo &quot;Debug log: $TF_LOG_PATH&quot;\n    \n    # Capture detailed timing information\n    time terraform &quot;$operation&quot; &quot;$@&quot; 2&gt;&amp;1 | tee -a &quot;$TF_LOG_PATH&quot;\n    \n    local exit_code=${PIPESTATUS[0]}\n    \n    if [[ $exit_code -ne 0 ]]; then\n        echo &quot;❌ Operation failed with exit code: $exit_code&quot;\n        echo &quot;📄 Last 50 lines of debug log:&quot;\n        tail -50 &quot;$TF_LOG_PATH&quot;\n    else\n        echo &quot;✅ Operation completed successfully&quot;\n    fi\n    \n    return $exit_code\n}\n\n# Analyze state file for issues\nanalyze_state() {\n    echo &quot;🔍 Analyzing state file...&quot;\n    \n    # Check for orphaned resources\n    echo &quot;Checking for potential orphaned resources...&quot;\n    terraform state list | while read resource; do\n        if ! terraform plan -target=&quot;$resource&quot; -detailed-exitcode &gt;/dev/null 2&gt;&amp;1; then\n            echo &quot;⚠️  Potential issue with resource: $resource&quot;\n        fi\n    done\n    \n    # Check for large resources in state\n    echo &quot;Checking for large resources...&quot;\n    terraform state pull | jq -r &#039;.resources[] | select(.instances[0].attributes | length &gt; 50) | .address&#039; 2&gt;/dev/null | head -10\n}\n\n# Provider debug information\ndebug_providers() {\n    echo &quot;🔍 Debugging provider issues...&quot;\n    \n    # Show provider configuration\n    terraform providers\n    \n    # Check provider cache\n    if [[ -d &quot;$HOME/.terraform.d/plugin-cache&quot; ]]; then\n        echo &quot;Provider cache contents:&quot;\n        ls -la &quot;$HOME/.terraform.d/plugin-cache&quot;\n    fi\n    \n    # Check for provider version conflicts\n    terraform version -json | jq &#039;.provider_selections&#039; 2&gt;/dev/null\n}\n\n# Network and API debugging\ndebug_network() {\n    echo &quot;🌐 Debugging network connectivity...&quot;\n    \n    # Test connectivity to common endpoints\n    local endpoints=(\n        &quot;https://releases.hashicorp.com&quot;\n        &quot;https://registry.terraform.io&quot;\n        &quot;https://api.github.com&quot;\n        &quot;https://aws.amazon.com&quot;\n        &quot;https://management.azure.com&quot;\n        &quot;https://www.googleapis.com&quot;\n    )\n    \n    for endpoint in &quot;${endpoints[@]}&quot;; do\n        if curl -s --connect-timeout 5 &quot;$endpoint&quot; &gt;/dev/null; then\n            echo &quot;✅ $endpoint - OK&quot;\n        else\n            echo &quot;❌ $endpoint - FAILED&quot;\n        fi\n    done\n}\n\n# Performance analysis\nanalyze_performance() {\n    echo &quot;📊 Analyzing Terraform performance...&quot;\n    \n    # Generate and analyze dependency graph\n    terraform graph &gt; dependency-graph.dot\n    \n    # Count resources by type\n    echo &quot;Resource distribution:&quot;\n    terraform state list | cut -d. -f1 | sort | uniq -c | sort -nr | head -10\n    \n    # Estimate plan time based on resources\n    resource_count=$(terraform state list | wc -l)\n    estimated_time=$((resource_count * 2))  # Rough estimate: 2 seconds per resource\n    echo &quot;Estimated plan time: ${estimated_time} seconds for $resource_count resources&quot;\n}\n\n# Usage\ncase &quot;${1:-help}&quot; in\n    &quot;session&quot;)\n        shift\n        debug_session &quot;$@&quot;\n        ;;\n    &quot;state&quot;)\n        analyze_state\n        ;;\n    &quot;providers&quot;)\n        debug_providers\n        ;;\n    &quot;network&quot;)\n        debug_network\n        ;;\n    &quot;performance&quot;)\n        analyze_performance\n        ;;\n    &quot;all&quot;)\n        debug_providers\n        debug_network\n        analyze_state\n        analyze_performance\n        ;;\n    &quot;help&quot;|*)\n        echo &quot;Usage: $0 [session|state|providers|network|performance|all]&quot;\n        echo &quot;&quot;\n        echo &quot;  session &lt;operation&gt; [args]  - Debug specific Terraform operation&quot;\n        echo &quot;  state                       - Analyze state file for issues&quot;\n        echo &quot;  providers                   - Debug provider configuration&quot;\n        echo &quot;  network                     - Test network connectivity&quot;\n        echo &quot;  performance                 - Analyze performance characteristics&quot;\n        echo &quot;  all                         - Run all debug checks&quot;\n        ;;\nesac\nEOF\n\nchmod +x scripts/debug-terraform.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Terraform update script\ncat &gt; scripts/update-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nCURRENT_VERSION=$(terraform version -json | jq -r &#039;.terraform_version&#039;)\necho &quot;Current Terraform version: $CURRENT_VERSION&quot;\n\n# Check for latest version\ncheck_latest_version() {\n    local latest_version\n    latest_version=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r &#039;.tag_name&#039; | sed &#039;s/v//&#039;)\n    echo &quot;Latest Terraform version: $latest_version&quot;\n    \n    if [[ &quot;$CURRENT_VERSION&quot; != &quot;$latest_version&quot; ]]; then\n        echo &quot;⚠️  Update available: $CURRENT_VERSION → $latest_version&quot;\n        return 1\n    else\n        echo &quot;✅ Terraform is up to date&quot;\n        return 0\n    fi\n}\n\n# Update using package manager\nupdate_terraform() {\n    echo &quot;🔄 Updating Terraform...&quot;\n    \n    if command -v apt &amp;&gt;/dev/null; then\n        sudo apt update &amp;&amp; sudo apt upgrade terraform\n    elif command -v yum &amp;&gt;/dev/null; then\n        sudo yum update terraform\n    elif command -v dnf &amp;&gt;/dev/null; then\n        sudo dnf update terraform\n    elif command -v pacman &amp;&gt;/dev/null; then\n        sudo pacman -Syu terraform\n    elif command -v zypper &amp;&gt;/dev/null; then\n        sudo zypper update terraform\n    elif command -v brew &amp;&gt;/dev/null; then\n        brew upgrade terraform\n    else\n        echo &quot;❌ No supported package manager found&quot;\n        echo &quot;💡 Please update manually from: https://releases.hashicorp.com/terraform/&quot;\n        return 1\n    fi\n}\n\n# Update providers\nupdate_providers() {\n    echo &quot;🔄 Updating providers...&quot;\n    terraform init -upgrade\n}\n\n# Verify update\nverify_update() {\n    echo &quot;🔍 Verifying update...&quot;\n    \n    terraform version\n    \n    # Test basic functionality\n    if terraform validate; then\n        echo &quot;✅ Update verification successful&quot;\n    else\n        echo &quot;❌ Update verification failed&quot;\n        return 1\n    fi\n}\n\n# Main update process\nmain() {\n    if check_latest_version; then\n        exit 0\n    fi\n    \n    echo &quot;Proceed with update? (y/N)&quot;\n    read -r response\n    \n    if [[ &quot;$response&quot; =~ ^[Yy]$ ]]; then\n        update_terraform || exit 1\n        update_providers || exit 1\n        verify_update || exit 1\n        echo &quot;🎉 Terraform update completed successfully&quot;\n    else\n        echo &quot;Update cancelled&quot;\n    fi\n}\n\nmain &quot;$@&quot;\nEOF\n\nchmod +x scripts/update-terraform.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Comprehensive maintenance script\ncat &gt; scripts/terraform-maintenance.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nMAINTENANCE_LOG=&quot;/var/log/terraform-maintenance-$(date +%Y%m%d_%H%M%S).log&quot;\n\nlog() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a &quot;$MAINTENANCE_LOG&quot;\n}\n\n# Cleanup old plan files\ncleanup_plans() {\n    log &quot;🧹 Cleaning up old plan files...&quot;\n    find . -name &quot;*.tfplan&quot; -mtime +7 -delete\n    find . -name &quot;*.tfplan.json&quot; -mtime +7 -delete\n    log &quot;✅ Plan file cleanup completed&quot;\n}\n\n# Cleanup provider cache\ncleanup_provider_cache() {\n    log &quot;🧹 Cleaning up provider cache...&quot;\n    if [[ -d &quot;$HOME/.terraform.d/plugin-cache&quot; ]]; then\n        # Remove providers older than 30 days\n        find &quot;$HOME/.terraform.d/plugin-cache&quot; -type f -mtime +30 -delete\n        \n        # Remove empty directories\n        find &quot;$HOME/.terraform.d/plugin-cache&quot; -type d -empty -delete\n        \n        cache_size=$(du -sh &quot;$HOME/.terraform.d/plugin-cache&quot; 2&gt;/dev/null | cut -f1)\n        log &quot;✅ Provider cache cleanup completed - current size: $cache_size&quot;\n    fi\n}\n\n# Validate all configurations\nvalidate_configurations() {\n    log &quot;🔍 Validating all configurations...&quot;\n    \n    local validation_failed=false\n    \n    # Find all directories with Terraform files\n    find . -name &quot;*.tf&quot; -exec dirname {} \\; | sort -u | while read -r dir; do\n        log &quot;Validating: $dir&quot;\n        cd &quot;$dir&quot; || continue\n        \n        if terraform validate; then\n            log &quot;✅ $dir validation passed&quot;\n        else\n            log &quot;❌ $dir validation failed&quot;\n            validation_failed=true\n        fi\n        \n        cd - &gt; /dev/null\n    done\n    \n    if [[ &quot;$validation_failed&quot; == &quot;true&quot; ]]; then\n        log &quot;⚠️  Some validations failed - please review&quot;\n    else\n        log &quot;✅ All validations passed&quot;\n    fi\n}\n\n# Check for deprecated features\ncheck_deprecated() {\n    log &quot;🔍 Checking for deprecated features...&quot;\n    \n    # Check for deprecated syntax\n    local deprecated_patterns=(\n        &quot;provider\\s+\\&quot;[^\\&quot;]+\\&quot;\\s+{&quot; # Old provider syntax\n        &quot;terraform\\s+{[^}]*version\\s*=&quot; # Old terraform version constraints\n        &quot;ignore_changes\\s*=&quot; # Old ignore_changes syntax\n    )\n    \n    for pattern in &quot;${deprecated_patterns[@]}&quot;; do\n        if grep -r &quot;$pattern&quot; . --include=&quot;*.tf&quot; 2&gt;/dev/null; then\n            log &quot;⚠️  Deprecated pattern found: $pattern&quot;\n        fi\n    done\n    \n    log &quot;✅ Deprecation check completed&quot;\n}\n\n# Security audit\nsecurity_audit() {\n    log &quot;🔒 Performing security audit...&quot;\n    \n    # Check for potential security issues\n    local security_issues=()\n    \n    # Check for hardcoded secrets\n    if grep -r -i &quot;password\\s*=\\s*\\&quot;[^$]&quot; . --include=&quot;*.tf&quot; --include=&quot;*.tfvars&quot; 2&gt;/dev/null; then\n        security_issues+=(&quot;Potential hardcoded passwords&quot;)\n    fi\n    \n    # Check for public access\n    if grep -r &quot;0.0.0.0/0&quot; . --include=&quot;*.tf&quot; 2&gt;/dev/null; then\n        security_issues+=(&quot;Public access (0.0.0.0/0) found&quot;)\n    fi\n    \n    # Check for unencrypted resources\n    if grep -r &quot;encrypt.*=.*false&quot; . --include=&quot;*.tf&quot; 2&gt;/dev/null; then\n        security_issues+=(&quot;Unencrypted resources found&quot;)\n    fi\n    \n    if [[ ${#security_issues[@]} -gt 0 ]]; then\n        log &quot;⚠️  Security issues found:&quot;\n        for issue in &quot;${security_issues[@]}&quot;; do\n            log &quot;  - $issue&quot;\n        done\n    else\n        log &quot;✅ No obvious security issues found&quot;\n    fi\n}\n\n# State health check\nstate_health_check() {\n    log &quot;🏥 Performing state health check...&quot;\n    \n    # Check state file size\n    if [[ -f &quot;terraform.tfstate&quot; ]]; then\n        state_size=$(stat -f%z &quot;terraform.tfstate&quot; 2&gt;/dev/null || stat -c%s &quot;terraform.tfstate&quot; 2&gt;/dev/null)\n        state_size_mb=$((state_size / 1024 / 1024))\n        \n        if [[ $state_size_mb -gt 50 ]]; then\n            log &quot;⚠️  Large state file detected: ${state_size_mb}MB&quot;\n        else\n            log &quot;✅ State file size OK: ${state_size_mb}MB&quot;\n        fi\n    fi\n    \n    # Check for drift\n    if terraform plan -detailed-exitcode &gt; /dev/null 2&gt;&amp;1; then\n        log &quot;✅ No infrastructure drift detected&quot;\n    else\n        exit_code=$?\n        if [[ $exit_code -eq 2 ]]; then\n            log &quot;⚠️  Infrastructure drift detected&quot;\n        else\n            log &quot;❌ Error checking for drift&quot;\n        fi\n    fi\n}\n\n# Generate maintenance report\ngenerate_report() {\n    log &quot;📊 Generating maintenance report...&quot;\n    \n    local report_file=&quot;/tmp/terraform-maintenance-report-$(date +%Y%m%d_%H%M%S).md&quot;\n    \n    cat &gt; &quot;$report_file&quot; &lt;&lt;EOF\n# Terraform Maintenance Report\n\n**Date:** $(date)\n**Duration:** $((SECONDS / 60)) minutes\n\n## Summary\n\n- Configuration validation: $(grep &quot;validation&quot; &quot;$MAINTENANCE_LOG&quot; | grep -c &quot;passed&quot;)\n- Security audit: Completed\n- State health check: Completed\n- Cleanup operations: Completed\n\n## Recommendations\n\n$(grep &quot;⚠️&quot; &quot;$MAINTENANCE_LOG&quot; | sed &#039;s/.*⚠️  /- /&#039;)\n\n## Full Log\n\n\\`\\`\\`\n$(cat &quot;$MAINTENANCE_LOG&quot;)\n\\`\\`\\`\nEOF\n    \n    log &quot;📄 Maintenance report generated: $report_file&quot;\n    \n    # Email report if configured\n    if [[ -n &quot;$MAINTENANCE_EMAIL&quot; ]]; then\n        mail -s &quot;Terraform Maintenance Report - $(date)&quot; &quot;$MAINTENANCE_EMAIL&quot; &lt; &quot;$report_file&quot;\n        log &quot;📧 Report emailed to: $MAINTENANCE_EMAIL&quot;\n    fi\n}\n\n# Main maintenance routine\nmain() {\n    log &quot;🚀 Starting Terraform maintenance...&quot;\n    \n    cleanup_plans\n    cleanup_provider_cache\n    validate_configurations\n    check_deprecated\n    security_audit\n    state_health_check\n    generate_report\n    \n    log &quot;🎉 Terraform maintenance completed&quot;\n    log &quot;📊 Total runtime: $((SECONDS / 60)) minutes&quot;\n}\n\n# Run maintenance\nmain &quot;$@&quot;\nEOF\n\nchmod +x scripts/terraform-maintenance.sh\n\n# Schedule maintenance with cron\ncat &gt; scripts/schedule-maintenance.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Add to crontab for weekly maintenance\n(crontab -l 2&gt;/dev/null; echo &quot;0 2 * * 0 /path/to/terraform-maintenance.sh&quot;) | crontab -\n\necho &quot;✅ Weekly maintenance scheduled for Sundays at 2 AM&quot;\nEOF\n\nchmod +x scripts/schedule-maintenance.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"cicd-pipeline-integration\" class=\"mobile-header\">CI/CD Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># GitHub Actions workflow\nmkdir -p .github/workflows\ncat &gt; .github/workflows/terraform.yml &lt;&lt;EOF\nname: Terraform Multi-Cloud Deployment\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  TF_VERSION: 1.6.4\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [development, staging, production]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v3\n      with:\n        terraform_version: \\${{ env.TF_VERSION }}\n        cli_config_credentials_token: \\${{ secrets.TF_CLOUD_TOKEN }}\n    \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v4\n      with:\n        aws-access-key-id: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-west-2\n    \n    - name: Terraform Format Check\n      run: terraform fmt -check -recursive\n    \n    - name: Terraform Initialize\n      run: terraform init\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Plan\n      run: terraform plan -var-file=&quot;\\${{ matrix.environment }}.tfvars&quot;\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Security Scan with Checkov\n      uses: bridgecrewio/checkov-action@master\n      with:\n        directory: .\n        framework: terraform\n        output_format: sarif\n        output_file_path: checkov.sarif\n    \n    - name: Upload Checkov results\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: checkov.sarif\n    \n    - name: Terraform Apply (Production)\n      if: github.ref == &#039;refs/heads/main&#039; &amp;&amp; matrix.environment == &#039;production&#039;\n      run: terraform apply -auto-approve -var-file=&quot;production.tfvars&quot;\n      working-directory: environments/production\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - validate\n  - plan\n  - apply\n  - destroy\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_VERSION: &quot;1.6.4&quot;\n  TF_IN_AUTOMATION: &quot;true&quot;\n\ncache:\n  key: &quot;\\${TF_ROOT}&quot;\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform fmt -check -recursive\n    - terraform validate\n    - |\n      for dir in environments/*/; do\n        cd &quot;\\$dir&quot;\n        terraform validate\n        cd -\n      done\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\nplan:production:\n  stage: plan\n  script:\n    - cd environments/production\n    - terraform plan -var-file=&quot;production.tfvars&quot; -out=&quot;production.tfplan&quot;\n  artifacts:\n    paths:\n      - environments/production/production.tfplan\n    expire_in: 1 week\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\napply:production:\n  stage: apply\n  script:\n    - cd environments/production\n    - terraform apply -input=false &quot;production.tfplan&quot;\n  dependencies:\n    - plan:production\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n      when: manual\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"jenkins-pipeline\" class=\"mobile-header\">Jenkins Pipeline</h3>\n<div class=\"mobile-code-block\" data-language=\"groovy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">groovy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-groovy\">// Jenkinsfile\npipeline {\n    agent any\n    \n    environment {\n        TF_VERSION = &#039;1.6.4&#039;\n        AWS_DEFAULT_REGION = &#039;us-west-2&#039;\n    }\n    \n    stages {\n        stage(&#039;Checkout&#039;) {\n            steps {\n                checkout scm\n            }\n        }\n        \n        stage(&#039;Setup&#039;) {\n            steps {\n                sh &#039;&#039;&#039;\n                    # Install Terraform if not present\n                    if ! command -v terraform &amp;&gt; /dev/null; then\n                        wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip\n                        unzip terraform_${TF_VERSION}_linux_amd64.zip\n                        chmod +x terraform\n                        sudo mv terraform /usr/local/bin/\n                    fi\n                    \n                    terraform version\n                &#039;&#039;&#039;\n            }\n        }\n        \n        stage(&#039;Validate&#039;) {\n            parallel {\n                stage(&#039;Format Check&#039;) {\n                    steps {\n                        sh &#039;terraform fmt -check -recursive&#039;\n                    }\n                }\n                stage(&#039;Configuration Validation&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            for dir in environments/*/; do\n                                cd &quot;$dir&quot;\n                                terraform init\n                                terraform validate\n                                cd -\n                            done\n                        &#039;&#039;&#039;\n                    }\n                }\n                stage(&#039;Security Scan&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            # Install and run Checkov\n                            pip3 install checkov\n                            checkov --framework terraform --directory .\n                        &#039;&#039;&#039;\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Plan&#039;) {\n            steps {\n                script {\n                    def environments = [&#039;development&#039;, &#039;staging&#039;, &#039;production&#039;]\n                    def planResults = [:]\n                    \n                    environments.each { env -&gt;\n                        planResults[env] = {\n                            dir(&quot;environments/${env}&quot;) {\n                                sh &quot;&quot;&quot;\n                                    terraform init\n                                    terraform plan -var-file=&quot;${env}.tfvars&quot; -out=&quot;${env}.tfplan&quot;\n                                &quot;&quot;&quot;\n                            }\n                        }\n                    }\n                    \n                    parallel planResults\n                }\n            }\n        }\n        \n        stage(&#039;Apply&#039;) {\n            when {\n                branch &#039;main&#039;\n            }\n            steps {\n                script {\n                    input message: &#039;Apply Terraform changes?&#039;, ok: &#039;Apply&#039;\n                    \n                    dir(&#039;environments/production&#039;) {\n                        sh &#039;terraform apply -input=false production.tfplan&#039;\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: &#039;environments/**/*.tfplan&#039;, fingerprint: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: &#039;checkov-report&#039;,\n                reportFiles: &#039;index.html&#039;,\n                reportName: &#039;Checkov Security Report&#039;\n            ])\n        }\n        failure {\n            emailext (\n                subject: &quot;Terraform Pipeline Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;The Terraform pipeline has failed. Please check the build logs for details.&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL}&quot;\n            )\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Terraform Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Registry</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/recommended-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Multi-Cloud Architecture Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/language/values/sensitive\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">AWS Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Azure Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GCP Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discuss.hashicorp.com/c/terraform-core\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/terraform\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HashiCorp Learn Terraform</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"33 min","wordCount":6439,"lastBuilt":"2025-09-14T06:12:59.659Z"},{"name":"transmission","displayName":"Transmission","slug":"transmission","description":"Repo for transmission","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/transmission","updatedAt":"2025-09-08T03:17:27Z","createdAt":"2025-09-08T03:17:17Z","readmeRaw":"## 👋 Welcome to transmission 🚀  \n\ntransmission README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-transmission\" class=\"mobile-header\">👋 Welcome to transmission 🚀  </h2>\n<p class=\"mobile-paragraph\">transmission README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:12.105Z"},{"name":"truenas-scale","displayName":"Truenas Scale","slug":"truenas-scale","description":"Repo for truenas-scale","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/truenas-scale","updatedAt":"2025-09-08T03:17:40Z","createdAt":"2025-09-08T03:17:30Z","readmeRaw":"## 👋 Welcome to truenas-scale 🚀  \n\ntruenas-scale README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-truenas-scale\" class=\"mobile-header\">👋 Welcome to truenas-scale 🚀  </h2>\n<p class=\"mobile-paragraph\">truenas-scale README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:11.831Z"},{"name":"unifi-controller","displayName":"Unifi Controller","slug":"unifi-controller","description":"Repo for unifi-controller","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/unifi-controller","updatedAt":"2025-09-08T03:17:53Z","createdAt":"2025-09-08T03:17:43Z","readmeRaw":"## 👋 Welcome to unifi-controller 🚀  \n\nunifi-controller README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-unifi-controller\" class=\"mobile-header\">👋 Welcome to unifi-controller 🚀  </h2>\n<p class=\"mobile-paragraph\">unifi-controller README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:11.569Z"},{"name":"vscode-server","displayName":"Vscode Server","slug":"vscode-server","description":"Repo for vscode-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vscode-server","updatedAt":"2025-09-08T03:18:10Z","createdAt":"2023-08-28T03:50:15Z","readmeRaw":"### VS-Code docker\n\n```shell\nsudo mkdir -p /var/lib/docker/storage/vscode/config\n\nsudo docker run -d \\\n  --name=code-server \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=America/New_York \\\n  -e PASSWORD=password \\\n  -e SUDO_PASSWORD=password \\\n  -e PROXY_DOMAIN=code-server.casjay.in \\\n  -p 8443:8443 \\\n  -v /var/lib/docker/storage/vscode/config:/config \\\n  --restart always \\\n  linuxserver/code-server\n```\n","readmeHtml":"<h3 id=\"vs-code-docker\" class=\"mobile-header\">VS-Code docker</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo mkdir -p /var/lib/docker/storage/vscode/config\n\nsudo docker run -d \\\n  --name=code-server \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=America/New_York \\\n  -e PASSWORD=password \\\n  -e SUDO_PASSWORD=password \\\n  -e PROXY_DOMAIN=code-server.casjay.in \\\n  -p 8443:8443 \\\n  -v /var/lib/docker/storage/vscode/config:/config \\\n  --restart always \\\n  linuxserver/code-server</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":45,"lastBuilt":"2025-09-14T06:13:11.286Z"},{"name":"webvirt","displayName":"Webvirt","slug":"webvirt","description":"Repo for webvirt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/webvirt","updatedAt":"2025-09-08T03:18:15Z","createdAt":"2023-08-28T03:50:25Z","readmeRaw":"# CentOS 7 WebVirt\n\n```bash\nyum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx\nyum -y install gcc python-devel\n\npip install --upgrade pip\npip install numpy\n\ngit clone git://github.com/retspen/webvirtmgr.git /usr/share/webvirtmgr\ncd /usr/share/webvirtmgr\npip install -r requirements.txt\n\n./manage.py syncdb\n./manage.py collectstatic\n\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt.supervisord.ini -O  /etc/supervisord.d/webvirtmgr.ini\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt-nginx.conf -O /etc/nginx/conf.d/webvirt.conf\n```\n","readmeHtml":"<h1 id=\"centos-7-webvirt\" class=\"mobile-header\">CentOS 7 WebVirt</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx\nyum -y install gcc python-devel\n\npip install --upgrade pip\npip install numpy\n\ngit clone git://github.com/retspen/webvirtmgr.git /usr/share/webvirtmgr\ncd /usr/share/webvirtmgr\npip install -r requirements.txt\n\n./manage.py syncdb\n./manage.py collectstatic\n\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt.supervisord.ini -O  /etc/supervisord.d/webvirtmgr.ini\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt-nginx.conf -O /etc/nginx/conf.d/webvirt.conf</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T06:13:10.995Z"},{"name":"xen-orchestra","displayName":"Xen Orchestra","slug":"xen-orchestra","description":"Repo for xen-orchestra","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/xen-orchestra","updatedAt":"2025-09-08T03:18:43Z","createdAt":"2023-08-28T03:50:35Z","readmeRaw":"# xen-orchestra - CentOS\n\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall 'Development Tools'\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Debian\n\n```bash\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Updating\n\n```bash\ncd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build\n```\n","readmeHtml":"<h1 id=\"xen-orchestra-centos\" class=\"mobile-header\">xen-orchestra - CentOS</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall &#039;Development Tools&#039;\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-debian\" class=\"mobile-header\">xen-orchestra - Debian</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-updating\" class=\"mobile-header\">xen-orchestra - Updating</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":152,"lastBuilt":"2025-09-14T06:13:10.727Z"},{"name":"yacht","displayName":"Yacht","slug":"yacht","description":"Repo for yacht","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/yacht","updatedAt":"2025-09-08T03:18:56Z","createdAt":"2025-09-08T03:18:45Z","readmeRaw":"## 👋 Welcome to yacht 🚀  \n\nyacht README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-yacht\" class=\"mobile-header\">👋 Welcome to yacht 🚀  </h2>\n<p class=\"mobile-paragraph\">yacht README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:10.411Z"},{"name":"zigbee2mqtt","displayName":"Zigbee2mqtt","slug":"zigbee2mqtt","description":"Repo for zigbee2mqtt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/zigbee2mqtt","updatedAt":"2025-09-08T03:19:22Z","createdAt":"2025-09-08T03:19:12Z","readmeRaw":"## 👋 Welcome to zigbee2mqtt 🚀  \n\nzigbee2mqtt README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-zigbee2mqtt\" class=\"mobile-header\">👋 Welcome to zigbee2mqtt 🚀  </h2>\n<p class=\"mobile-paragraph\">zigbee2mqtt README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T06:13:09.780Z"}]},"__N_SSG":true}