{"pageProps":{"guide":{"name":"rabbitmq","displayName":"Rabbitmq","slug":"rabbitmq","description":"Repo for rabbitmq","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rabbitmq","updatedAt":"2025-09-14T03:45:47Z","createdAt":"2025-09-08T03:15:11Z","readmeRaw":"# RabbitMQ Installation Guide\n\nRabbitMQ is a free and open-source message-queueing software and broker written in Erlang. Originally developed by Rabbit Technologies and now owned by VMware, RabbitMQ implements the Advanced Message Queuing Protocol (AMQP) and provides message routing, queuing, and delivery guarantees. It serves as a FOSS alternative to commercial message brokers like IBM MQ, Oracle WebLogic Server, or Microsoft Azure Service Bus, offering enterprise-grade reliability, clustering, and high availability without licensing costs, with features like message persistence, flexible routing, and cross-language support.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 1GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum (SSD recommended for message persistence)\n  - Network: Stable connectivity for clustering setups\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5672 (AMQP 0-9-1 and 1.0)\n  - Port 15672 (HTTP Management API)\n  - Port 25672 (Erlang distribution for clustering)\n  - Port 4369 (EPMD - Erlang Port Mapper Daemon)\n  - Port 35672-35682 (CLI tools)\n- **Dependencies**:\n  - Erlang/OTP (version 23.2+ for RabbitMQ 3.9+)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Add RabbitMQ repository\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash\n\n# Add Erlang repository\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash\n\n# Install Erlang\nsudo yum install -y erlang\n\n# Install RabbitMQ server\nsudo yum install -y rabbitmq-server\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5672/tcp\nsudo firewall-cmd --permanent --add-port=15672/tcp\nsudo firewall-cmd --permanent --add-port=25672/tcp\nsudo firewall-cmd --reload\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg apt-transport-https\n\n# Add RabbitMQ signing key\ncurl -fsSL https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA | sudo gpg --dearmor -o /usr/share/keyrings/com.rabbitmq.team.gpg\n\n# Add RabbitMQ repository\necho \"deb [signed-by=/usr/share/keyrings/com.rabbitmq.team.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/rabbitmq.list\n\n# Add Erlang repository\necho \"deb [signed-by=/usr/share/keyrings/com.rabbitmq.team.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/rabbitmq-erlang.list\n\n# Update package index\nsudo apt update\n\n# Install Erlang and RabbitMQ\nsudo apt install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\nsudo apt install -y rabbitmq-server\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo ufw allow 5672\nsudo ufw allow 15672\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n```\n\n### Arch Linux\n\n```bash\n# Install RabbitMQ from official repositories\nsudo pacman -S rabbitmq\n\n# Install Erlang (dependency)\nsudo pacman -S erlang-nox\n\n# Create rabbitmq user if not exists\nsudo useradd -r -s /sbin/nologin -d /var/lib/rabbitmq -c \"RabbitMQ messaging server\" rabbitmq\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n\n# Configuration location: /etc/rabbitmq/\n```\n\n### Alpine Linux\n\n```bash\n# Install RabbitMQ\napk add --no-cache rabbitmq-server rabbitmq-server-management\n\n# Install Erlang\napk add --no-cache erlang\n\n# Create rabbitmq user if not exists\nadduser -D -H -s /sbin/nologin -G rabbitmq rabbitmq\n\n# Set permissions\nchown -R rabbitmq:rabbitmq /var/lib/rabbitmq /var/log/rabbitmq\n\n# Enable and start service\nrc-update add rabbitmq default\nrc-service rabbitmq start\n\n# Enable management plugin\nrabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl add_user admin SecureAdminPassword123!\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nrabbitmqctl delete_user guest\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y rabbitmq-server erlang\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y rabbitmq-server erlang\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5672/tcp\nsudo firewall-cmd --permanent --add-port=15672/tcp\nsudo firewall-cmd --reload\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install rabbitmq\n\n# Start RabbitMQ service\nbrew services start rabbitmq\n\n# Or run manually\nsudo rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n\n# Configuration location: /usr/local/etc/rabbitmq/\n# Alternative: /opt/homebrew/etc/rabbitmq/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install rabbitmq erlang\n\n# Using ports\ncd /usr/ports/net/rabbitmq\nmake install clean\n\n# Enable RabbitMQ\necho 'rabbitmq_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice rabbitmq start\n\n# Enable management plugin\nrabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl add_user admin SecureAdminPassword123!\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nrabbitmqctl delete_user guest\n\n# Configuration location: /usr/local/etc/rabbitmq/\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install rabbitmq\n\n# Method 2: Using Scoop\nscoop install rabbitmq\n\n# Method 3: Manual installation\n# Download from https://www.rabbitmq.com/download.html\n# Install Erlang first, then RabbitMQ\n\n# Install as Windows service (automatic with installer)\n# The service is named \"RabbitMQ\"\n\n# Enable management plugin\nrabbitmq-plugins.bat enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl.bat add_user admin SecureAdminPassword123!\nrabbitmqctl.bat set_user_tags admin administrator\nrabbitmqctl.bat set_permissions -p / admin \".*\" \".*\" \".*\"\n\n# Remove guest user (security)\nrabbitmqctl.bat delete_user guest\n\n# Configuration location: %APPDATA%\\RabbitMQ\\\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create rabbitmq user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/rabbitmq -s /sbin/nologin -c \"RabbitMQ messaging server\" rabbitmq\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/rabbitmq/rabbitmq.conf`\n- Debian/Ubuntu: `/etc/rabbitmq/rabbitmq.conf`\n- Arch Linux: `/etc/rabbitmq/rabbitmq.conf`\n- Alpine Linux: `/etc/rabbitmq/rabbitmq.conf`\n- openSUSE/SLES: `/etc/rabbitmq/rabbitmq.conf`\n- macOS: `/usr/local/etc/rabbitmq/rabbitmq.conf`\n- FreeBSD: `/usr/local/etc/rabbitmq/rabbitmq.conf`\n- Windows: `%APPDATA%\\RabbitMQ\\rabbitmq.conf`\n\n3. **Essential settings to change**:\n\n```ini\n# /etc/rabbitmq/rabbitmq.conf\n# Network and clustering\nlisteners.tcp.default = 5672\nmanagement.tcp.port = 15672\n\n# Security\nloopback_users.guest = false\ndefault_user = admin\ndefault_pass = SecureAdminPassword123!\n\n# Logging\nlog.file.level = info\nlog.file = /var/log/rabbitmq/rabbitmq.log\nlog.file.rotation.size = 10485760\n\n# Memory and disk limits\nvm_memory_high_watermark.relative = 0.6\ndisk_free_limit.absolute = 1GB\n\n# Message TTL and limits\ndefault_user_tags.administrator = true\nheartbeat = 60\n\n# Clustering (if multiple nodes)\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@node1\ncluster_formation.classic_config.nodes.2 = rabbit@node2\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if RabbitMQ is running\nsudo systemctl status rabbitmq-server\n\n# Test connection\nrabbitmqctl status\n\n# Check cluster status\nrabbitmqctl cluster_status\n\n# List users\nrabbitmqctl list_users\n\n# List virtual hosts\nrabbitmqctl list_vhosts\n\n# Test management interface\ncurl -u admin:SecureAdminPassword123! http://localhost:15672/api/overview\n\n# Test AMQP connection\nrabbitmqctl eval 'rabbit_networking:tcp_listener_started(5672).'\n```\n\n**WARNING:** Remove or disable the default guest user and enable proper authentication!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable RabbitMQ to start on boot\nsudo systemctl enable rabbitmq-server\n\n# Start RabbitMQ\nsudo systemctl start rabbitmq-server\n\n# Stop RabbitMQ\nsudo systemctl stop rabbitmq-server\n\n# Restart RabbitMQ\nsudo systemctl restart rabbitmq-server\n\n# Reload configuration (graceful)\nsudo rabbitmqctl eval 'application:stop(rabbitmq_management_agent), application:start(rabbitmq_management_agent).'\n\n# Check status\nsudo systemctl status rabbitmq-server\n\n# View logs\nsudo journalctl -u rabbitmq-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable RabbitMQ to start on boot\nrc-update add rabbitmq default\n\n# Start RabbitMQ\nrc-service rabbitmq start\n\n# Stop RabbitMQ\nrc-service rabbitmq stop\n\n# Restart RabbitMQ\nrc-service rabbitmq restart\n\n# Check status\nrc-service rabbitmq status\n\n# View logs\ntail -f /var/log/rabbitmq/rabbit@$(hostname).log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'rabbitmq_enable=\"YES\"' >> /etc/rc.conf\n\n# Start RabbitMQ\nservice rabbitmq start\n\n# Stop RabbitMQ\nservice rabbitmq stop\n\n# Restart RabbitMQ\nservice rabbitmq restart\n\n# Check status\nservice rabbitmq status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start rabbitmq\nbrew services stop rabbitmq\nbrew services restart rabbitmq\n\n# Check status\nbrew services list | grep rabbitmq\n\n# Manual control\nsudo rabbitmq-server -detached\nsudo rabbitmqctl shutdown\n```\n\n### Windows Service Manager\n\n```powershell\n# Start RabbitMQ service\nnet start RabbitMQ\n\n# Stop RabbitMQ service\nnet stop RabbitMQ\n\n# Using PowerShell\nStart-Service RabbitMQ\nStop-Service RabbitMQ\nRestart-Service RabbitMQ\n\n# Check status\nGet-Service RabbitMQ\n\n# View logs\nGet-EventLog -LogName Application -Source RabbitMQ\n```\n\n## Advanced Configuration\n\n### High Availability Configuration\n\n```ini\n# Cluster configuration\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-1\ncluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-2\ncluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-3\n\n# Enable quorum queues by default\ndefault_queue_type = quorum\n\n# HA policy for classic queues\nqueue_master_locator = min-masters\n```\n\n### Advanced Security Settings\n\n```ini\n# SSL/TLS configuration\nlisteners.ssl.default = 5671\nssl_options.cacertfile = /etc/rabbitmq/ssl/ca_certificate.pem\nssl_options.certfile = /etc/rabbitmq/ssl/server_certificate.pem\nssl_options.keyfile = /etc/rabbitmq/ssl/server_key.pem\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\n# Management over HTTPS\nmanagement.ssl.port = 15671\nmanagement.ssl.cacertfile = /etc/rabbitmq/ssl/ca_certificate.pem\nmanagement.ssl.certfile = /etc/rabbitmq/ssl/server_certificate.pem\nmanagement.ssl.keyfile = /etc/rabbitmq/ssl/server_key.pem\n\n# Authentication backends\nauth_backends.1 = rabbit_auth_backend_ldap\nauth_backends.2 = rabbit_auth_backend_internal\n\n# LDAP configuration\nauth_ldap.servers.1 = ldap.example.com\nauth_ldap.user_dn_pattern = cn=${username},ou=users,dc=example,dc=com\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/rabbitmq\nupstream rabbitmq_management {\n    server 127.0.0.1:15672 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:15673 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 80;\n    server_name rabbitmq.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name rabbitmq.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/rabbitmq.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/rabbitmq.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://rabbitmq_management;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for management UI\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend rabbitmq_management_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/rabbitmq.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rabbitmq_management_servers\n\nbackend rabbitmq_management_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /api/aliveness-test/%2F\n    server rabbitmq1 127.0.0.1:15672 check\n    server rabbitmq2 127.0.0.1:15673 check backup\n\nfrontend rabbitmq_amqp_frontend\n    bind *:5672\n    mode tcp\n    default_backend rabbitmq_amqp_servers\n\nbackend rabbitmq_amqp_servers\n    mode tcp\n    balance roundrobin\n    server rabbitmq1 127.0.0.1:5672 check\n    server rabbitmq2 127.0.0.1:5673 check backup\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate SSL certificates for RabbitMQ\nsudo mkdir -p /etc/rabbitmq/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/ca_key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /etc/rabbitmq/ssl/ca_key.pem -out /etc/rabbitmq/ssl/ca_certificate.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=RabbitMQ-CA\"\n\n# Create server certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/server_key.pem 4096\nsudo openssl req -new -key /etc/rabbitmq/ssl/server_key.pem -out /etc/rabbitmq/ssl/server_certificate_request.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=rabbitmq.example.com\"\nsudo openssl x509 -req -in /etc/rabbitmq/ssl/server_certificate_request.pem -CA /etc/rabbitmq/ssl/ca_certificate.pem -CAkey /etc/rabbitmq/ssl/ca_key.pem -CAcreateserial -out /etc/rabbitmq/ssl/server_certificate.pem -days 365\n\n# Create client certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/client_key.pem 4096\nsudo openssl req -new -key /etc/rabbitmq/ssl/client_key.pem -out /etc/rabbitmq/ssl/client_certificate_request.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=rabbitmq-client\"\nsudo openssl x509 -req -in /etc/rabbitmq/ssl/client_certificate_request.pem -CA /etc/rabbitmq/ssl/ca_certificate.pem -CAkey /etc/rabbitmq/ssl/ca_key.pem -CAcreateserial -out /etc/rabbitmq/ssl/client_certificate.pem -days 365\n\n# Set permissions\nsudo chown -R rabbitmq:rabbitmq /etc/rabbitmq/ssl\nsudo chmod 600 /etc/rabbitmq/ssl/*_key.pem\nsudo chmod 644 /etc/rabbitmq/ssl/*_certificate.pem /etc/rabbitmq/ssl/ca_certificate.pem\n```\n\n### User Management and Access Control\n\n```bash\n# Create application user\nsudo rabbitmqctl add_user myapp SecureAppPassword123!\nsudo rabbitmqctl set_permissions -p / myapp \"myapp\\..*\" \"myapp\\..*\" \"myapp\\..*\"\n\n# Create monitoring user\nsudo rabbitmqctl add_user monitoring MonitorPassword123!\nsudo rabbitmqctl set_user_tags monitoring monitoring\nsudo rabbitmqctl set_permissions -p / monitoring \"\" \"\" \".*\"\n\n# Create backup user\nsudo rabbitmqctl add_user backup BackupPassword123!\nsudo rabbitmqctl set_user_tags backup management\nsudo rabbitmqctl set_permissions -p / backup \"\" \"\" \".*\"\n\n# Create virtual hosts\nsudo rabbitmqctl add_vhost production\nsudo rabbitmqctl add_vhost staging\n\n# Set permissions for virtual hosts\nsudo rabbitmqctl set_permissions -p production myapp \".*\" \".*\" \".*\"\nsudo rabbitmqctl set_permissions -p staging myapp \".*\" \".*\" \".*\"\n\n# Set resource limits\nsudo rabbitmqctl set_user_limits myapp '{\"max-connections\": 100, \"max-channels\": 1000}'\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 5672\nsudo ufw allow from 192.168.1.0/24 to any port 15672\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=rabbitmq\nsudo firewall-cmd --permanent --zone=rabbitmq --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=5672/tcp\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=15672/tcp\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=25672/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 5672 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 15672 -j ACCEPT\nsudo iptables -save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {5672, 15672, 25672}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"RabbitMQ AMQP\" -Direction Inbound -Protocol TCP -LocalPort 5672 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName \"RabbitMQ Management\" -Direction Inbound -Protocol TCP -LocalPort 15672 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Queue and Exchange Configuration\n\n```bash\n# Create exchanges\nrabbitmqctl eval 'rabbit_exchange:declare({resource, <<\"/\">>, exchange, <<\"logs\">>}, topic, true, false, false, []).'\nrabbitmqctl eval 'rabbit_exchange:declare({resource, <<\"/\">>, exchange, <<\"tasks\">>}, direct, true, false, false, []).'\n\n# Create queues\nrabbitmqctl eval 'rabbit_amqqueue:declare({resource, <<\"/\">>, queue, <<\"error_logs\">>}, true, false, [], none, <<\"/\">>).'\nrabbitmqctl eval 'rabbit_amqqueue:declare({resource, <<\"/\">>, queue, <<\"task_queue\">>}, true, false, [], none, <<\"/\">>).'\n\n# Create bindings\nrabbitmqctl eval 'rabbit_binding:add({binding, {resource, <<\"/\">>, exchange, <<\"logs\">>}, <<\"error\">>, {resource, <<\"/\">>, queue, <<\"error_logs\">>}, []}).'\n\n# Set queue policies for HA\nsudo rabbitmqctl set_policy ha-all \".*\" '{\"ha-mode\":\"all\",\"ha-sync-mode\":\"automatic\"}'\n\n# Set TTL policy\nsudo rabbitmqctl set_policy TTL \".*\" '{\"message-ttl\":3600000}' --apply-to queues\n\n# Set queue length limit\nsudo rabbitmqctl set_policy max-length \".*\" '{\"max-length\":10000}' --apply-to queues\n```\n\n### Shovel Configuration (Message Transfer)\n\n```bash\n# Install shovel plugin\nsudo rabbitmq-plugins enable rabbitmq_shovel\nsudo rabbitmq-plugins enable rabbitmq_shovel_management\n\n# Create shovel (via management API)\ncurl -u admin:SecureAdminPassword123! -X PUT \\\n  http://localhost:15672/api/parameters/shovel/%2F/my-shovel \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"value\": {\n      \"src-protocol\": \"amqp091\",\n      \"src-uri\": \"amqp://guest:guest@source-server:5672/%2F\",\n      \"src-queue\": \"source-queue\",\n      \"dest-protocol\": \"amqp091\",\n      \"dest-uri\": \"amqp://guest:guest@dest-server:5672/%2F\",\n      \"dest-queue\": \"dest-queue\"\n    }\n  }'\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# RabbitMQ-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# RabbitMQ optimizations\nvm.swappiness = 1\nnet.core.somaxconn = 4096\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_tw_reuse = 1\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\nrabbitmq soft nofile 65536\nrabbitmq hard nofile 65536\nEOF\n\n# Set Erlang VM parameters\nsudo tee /etc/rabbitmq/rabbitmq-env.conf <<EOF\nRABBITMQ_SERVER_ERL_ARGS=\"+K true +A 128 +P 1048576\"\nRABBITMQ_CTL_ERL_ARGS=\"+K true\"\nEOF\n```\n\n### RabbitMQ Performance Configuration\n\n```ini\n# High-performance RabbitMQ configuration\n# /etc/rabbitmq/rabbitmq.conf\n\n# Memory and disk\nvm_memory_high_watermark.relative = 0.4\nvm_memory_high_watermark_paging_ratio = 0.3\ndisk_free_limit.absolute = 2GB\n\n# Clustering and replication\ncluster_partition_handling = pause_minority\ncluster_keepalive_interval = 10000\n\n# Connection and channel limits\nconnection_max = 65536\nchannel_max = 2047\n\n# Message store\nmsg_store_file_size_limit = 16777216\nqueue_index_embed_msgs_below = 4096\n\n# Lazy queues (for large queues)\nlazy_queue_explicit_gc_run_operation_threshold = 1000\n\n# Mnesia table loading\nmnesia_table_loading_retry_timeout = 30000\nmnesia_table_loading_retry_limit = 10\n```\n\n### Queue Optimization\n\n```bash\n# Enable lazy queues for large message backlogs\nrabbitmqctl set_policy lazy-queue \".*\" '{\"queue-mode\":\"lazy\"}' --apply-to queues\n\n# Configure quorum queues for better consistency\nrabbitmqctl set_policy quorum-queue \".*\" '{\"queue-type\":\"quorum\"}' --apply-to queues\n\n# Set delivery limits to prevent poison messages\nrabbitmqctl set_policy delivery-limit \".*\" '{\"delivery-limit\":10}' --apply-to queues\n\n# Configure stream queues for high throughput\nrabbitmqctl set_policy stream-queue \"stream.*\" '{\"queue-type\":\"stream\"}' --apply-to queues\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Node status and statistics\nrabbitmqctl status\nrabbitmqctl node_health_check\nrabbitmqctl environment\n\n# Queue monitoring\nrabbitmqctl list_queues name messages consumers memory\nrabbitmqctl list_exchanges name type\nrabbitmqctl list_bindings\n\n# Connection monitoring\nrabbitmqctl list_connections peer_host peer_port state channels\nrabbitmqctl list_channels connection name consumer_count messages_unacknowledged\n\n# Cluster monitoring\nrabbitmqctl cluster_status\nrabbitmqctl list_cluster_nodes\n\n# Memory and disk usage\nrabbitmqctl eval 'rabbit_vm:memory().'\nrabbitmqctl eval 'rabbit_disk_monitor:get_disk_free().'\n```\n\n### External Monitoring Setup\n\n```bash\n# Install RabbitMQ Exporter for Prometheus\nwget https://github.com/kbudde/rabbitmq_exporter/releases/download/v1.0.0/rabbitmq_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf rabbitmq_exporter-*.tar.gz\nsudo cp rabbitmq_exporter /usr/local/bin/\n\n# Create monitoring user in RabbitMQ\nsudo rabbitmqctl add_user prometheus PrometheusPassword123!\nsudo rabbitmqctl set_user_tags prometheus monitoring\n\n# Create systemd service\nsudo tee /etc/systemd/system/rabbitmq_exporter.service <<EOF\n[Unit]\nDescription=RabbitMQ Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=rabbitmq\nEnvironment=RABBIT_URL=\"http://prometheus:PrometheusPassword123!@localhost:15672\"\nExecStart=/usr/local/bin/rabbitmq_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now rabbitmq_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# rabbitmq-health-check.sh\n\n# Check RabbitMQ service\nif ! systemctl is-active rabbitmq-server >/dev/null 2>&1; then\n    echo \"CRITICAL: RabbitMQ service is not running\"\n    exit 2\nfi\n\n# Check node health\nif ! rabbitmqctl node_health_check >/dev/null 2>&1; then\n    echo \"CRITICAL: RabbitMQ node health check failed\"\n    exit 2\nfi\n\n# Check cluster status\nCLUSTER_STATUS=$(rabbitmqctl cluster_status --formatter json 2>/dev/null | jq -r '.running_nodes | length')\nif [ \"$CLUSTER_STATUS\" -lt 2 ]; then\n    echo \"WARNING: Less than 2 nodes running in cluster\"\n    exit 1\nfi\n\n# Check memory usage\nMEMORY_ALARM=$(rabbitmqctl status --formatter json 2>/dev/null | jq -r '.alarms | length')\nif [ \"$MEMORY_ALARM\" -gt 0 ]; then\n    echo \"WARNING: Memory alarms detected\"\n    exit 1\nfi\n\n# Check disk space\nDISK_ALARM=$(rabbitmqctl status --formatter json 2>/dev/null | jq -r '.disk_free_alarm')\nif [ \"$DISK_ALARM\" = \"true\" ]; then\n    echo \"WARNING: Disk space alarm active\"\n    exit 1\nfi\n\n# Check queue lengths\nMAX_QUEUE_LENGTH=$(rabbitmqctl list_queues messages --formatter json 2>/dev/null | jq -r 'max_by(.messages).messages')\nif [ \"$MAX_QUEUE_LENGTH\" -gt 100000 ]; then\n    echo \"WARNING: Queue length exceeds 100,000 messages\"\n    exit 1\nfi\n\necho \"OK: RabbitMQ is healthy\"\nexit 0\n```\n\n## Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# rabbitmq-backup.sh\n\nBACKUP_DIR=\"/backup/rabbitmq/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Export definitions (exchanges, queues, users, policies)\ncurl -u admin:SecureAdminPassword123! \\\n    http://localhost:15672/api/definitions \\\n    -o \"$BACKUP_DIR/definitions.json\"\n\n# Export queue messages (if needed for small queues)\nrabbitmqctl eval \"\n    application:load(rabbitmq_management_agent),\n    rabbitmq_management_db:get_all_queues(all_vhosts).\n\" > \"$BACKUP_DIR/queue_stats.txt\"\n\n# Backup configuration files\ntar czf \"$BACKUP_DIR/rabbitmq-config.tar.gz\" \\\n    /etc/rabbitmq/ \\\n    --exclude='*.log' \\\n    --exclude='*.pid'\n\n# Backup SSL certificates\nif [ -d /etc/rabbitmq/ssl ]; then\n    tar czf \"$BACKUP_DIR/rabbitmq-ssl.tar.gz\" /etc/rabbitmq/ssl/\nfi\n\n# Save cluster information\nrabbitmqctl cluster_status > \"$BACKUP_DIR/cluster_status.txt\"\nrabbitmqctl status > \"$BACKUP_DIR/node_status.txt\"\n\n# Create manifest\necho \"RabbitMQ Backup - $(date)\" > \"$BACKUP_DIR/backup_manifest.txt\"\necho \"Node: $(hostname)\" >> \"$BACKUP_DIR/backup_manifest.txt\"\necho \"Version: $(rabbitmqctl version)\" >> \"$BACKUP_DIR/backup_manifest.txt\"\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# rabbitmq-restore.sh\n\nBACKUP_DIR=\"$1\"\nif [ -z \"$BACKUP_DIR\" ]; then\n    echo \"Usage: $0 <backup-directory>\"\n    exit 1\nfi\n\n# Stop RabbitMQ (ensure clean state)\nsudo systemctl stop rabbitmq-server\n\n# Restore configuration\nsudo tar xzf \"$BACKUP_DIR/rabbitmq-config.tar.gz\" -C /\n\n# Restore SSL certificates\nif [ -f \"$BACKUP_DIR/rabbitmq-ssl.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/rabbitmq-ssl.tar.gz\" -C /\nfi\n\n# Start RabbitMQ\nsudo systemctl start rabbitmq-server\n\n# Wait for RabbitMQ to start\nsleep 10\n\n# Import definitions\ncurl -u admin:SecureAdminPassword123! \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d @\"$BACKUP_DIR/definitions.json\" \\\n    http://localhost:15672/api/definitions\n\n# Verify restore\nrabbitmqctl list_queues\nrabbitmqctl list_users\n\necho \"Restore completed from $BACKUP_DIR\"\n```\n\n### Message-Level Backup (Advanced)\n\n```bash\n#!/bin/bash\n# rabbitmq-message-backup.sh\n\nBACKUP_DIR=\"/backup/rabbitmq-messages/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Install shovel plugin for message transfer\nrabbitmq-plugins enable rabbitmq_shovel\nrabbitmq-plugins enable rabbitmq_shovel_management\n\n# Backup messages from all queues\nrabbitmqctl list_queues name --formatter json | jq -r '.[].name' | while read -r queue; do\n    if [ \"$queue\" != \"null\" ]; then\n        # Create shovel to backup queue\n        curl -u admin:SecureAdminPassword123! -X PUT \\\n            \"http://localhost:15672/api/parameters/shovel/%2F/backup-$queue\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\n                \\\"value\\\": {\n                    \\\"src-protocol\\\": \\\"amqp091\\\",\n                    \\\"src-uri\\\": \\\"amqp://admin:SecureAdminPassword123!@localhost:5672/%2F\\\",\n                    \\\"src-queue\\\": \\\"$queue\\\",\n                    \\\"dest-protocol\\\": \\\"amqp091\\\",\n                    \\\"dest-uri\\\": \\\"amqp://backup:BackupPassword123!@backup-server:5672/%2F\\\",\n                    \\\"dest-queue\\\": \\\"backup-$queue\\\"\n                }\n            }\"\n    fi\ndone\n\necho \"Message backup shovels created for all queues\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **RabbitMQ won't start**:\n```bash\n# Check logs\nsudo journalctl -u rabbitmq-server -f\nsudo tail -f /var/log/rabbitmq/rabbit@$(hostname).log\n\n# Check Erlang installation\nerl -version\n\n# Check disk space\ndf -h /var/lib/rabbitmq\n\n# Check permissions\nls -la /var/lib/rabbitmq\nls -la /var/log/rabbitmq\n\n# Reset node (last resort)\nsudo rabbitmqctl stop_app\nsudo rabbitmqctl reset\nsudo rabbitmqctl start_app\n```\n\n2. **Cluster issues**:\n```bash\n# Check cluster status\nrabbitmqctl cluster_status\n\n# Check network connectivity between nodes\ntelnet rabbitmq-node-2 25672\n\n# Check Erlang cookie consistency\nsudo cat /var/lib/rabbitmq/.erlang.cookie\n\n# Force cluster join\nsudo rabbitmqctl stop_app\nsudo rabbitmqctl join_cluster rabbit@rabbitmq-node-1\nsudo rabbitmqctl start_app\n```\n\n3. **Memory/disk alarms**:\n```bash\n# Check alarms\nrabbitmqctl status | grep alarms\n\n# Check memory usage\nrabbitmqctl eval 'rabbit_vm:memory().'\n\n# Check disk usage\ndf -h /var/lib/rabbitmq\n\n# Clear memory alarm (after fixing issue)\nrabbitmqctl eval 'vm_memory_monitor:set_vm_memory_high_watermark(0.4).'\n```\n\n4. **Connection issues**:\n```bash\n# Check if RabbitMQ is listening\nsudo ss -tlnp | grep :5672\n\n# Test AMQP connection\nrabbitmqctl eval 'rabbit_networking:tcp_listener_started(5672).'\n\n# Check user permissions\nrabbitmqctl list_user_permissions admin\n\n# Test with management API\ncurl -u admin:SecureAdminPassword123! http://localhost:15672/api/overview\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho 'log.file.level = debug' >> /etc/rabbitmq/rabbitmq.conf\n\n# Enable connection logging\necho 'log.connection.level = debug' >> /etc/rabbitmq/rabbitmq.conf\n\n# Enable channel logging  \necho 'log.channel.level = debug' >> /etc/rabbitmq/rabbitmq.conf\n\n# Restart to apply\nsudo systemctl restart rabbitmq-server\n\n# View debug logs\nsudo tail -f /var/log/rabbitmq/rabbit@$(hostname).log\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update rabbitmq-server\nsudo yum update rabbitmq-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade rabbitmq-server\n\n# Arch Linux\nsudo pacman -Syu rabbitmq\n\n# Alpine Linux\napk update\napk upgrade rabbitmq-server\n\n# openSUSE\nsudo zypper update rabbitmq-server\n\n# FreeBSD\npkg update\npkg upgrade rabbitmq\n\n# Always backup before updates\n./rabbitmq-backup.sh\n\n# Test after updates\nrabbitmqctl status\nsudo systemctl restart rabbitmq-server\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# rabbitmq-maintenance.sh\n\n# Rotate logs\nrabbitmqctl rotate_logs\n\n# Check node health\nrabbitmqctl node_health_check\n\n# Clean up old definitions backup\nfind /backup/rabbitmq -name \"*.json\" -mtime +30 -delete\n\n# Optimize memory usage\nrabbitmqctl eval 'erlang:garbage_collect().'\n\n# Check and clean old message store files\nrabbitmqctl eval 'rabbit_msg_store_gc:gc().'\n\n# Check queue statistics\nrabbitmqctl list_queues name messages consumers memory | \\\n    awk '$2 > 1000 {print \"Queue \" $1 \" has \" $2 \" messages\"}'\n\necho \"RabbitMQ maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/rabbitmq-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/rabbitmq <<EOF\n/var/log/rabbitmq/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    sharedscripts\n    postrotate\n        rabbitmqctl rotate_logs\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Python (pika) Integration\n\n```python\nimport pika\nimport ssl\n\n# Basic connection\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='localhost', port=5672,\n                            credentials=pika.PlainCredentials('myapp', 'SecureAppPassword123!'))\n)\nchannel = connection.channel()\n\n# SSL connection\nssl_context = ssl.create_default_context(cafile='/etc/rabbitmq/ssl/ca_certificate.pem')\nssl_context.check_hostname = False\n\nssl_connection = pika.BlockingConnection(\n    pika.ConnectionParameters(\n        host='localhost',\n        port=5671,\n        credentials=pika.PlainCredentials('myapp', 'SecureAppPassword123!'),\n        ssl_options=pika.SSLOptions(ssl_context)\n    )\n)\n\n# Declare queue and exchange\nchannel.exchange_declare(exchange='task_exchange', exchange_type='direct')\nchannel.queue_declare(queue='task_queue', durable=True)\nchannel.queue_bind(exchange='task_exchange', queue='task_queue', routing_key='task')\n\n# Publish message\nchannel.basic_publish(\n    exchange='task_exchange',\n    routing_key='task',\n    body='Hello, RabbitMQ!',\n    properties=pika.BasicProperties(delivery_mode=2)  # Make message persistent\n)\n\n# Consume messages\ndef callback(ch, method, properties, body):\n    print(f\"Received: {body}\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(queue='task_queue', on_message_callback=callback)\nchannel.start_consuming()\n```\n\n### Node.js (amqplib) Integration\n\n```javascript\nconst amqp = require('amqplib');\nconst fs = require('fs');\n\n// Basic connection\nasync function connectBasic() {\n    const connection = await amqp.connect('amqp://myapp:SecureAppPassword123!@localhost:5672');\n    return connection;\n}\n\n// SSL connection\nasync function connectSSL() {\n    const connection = await amqp.connect({\n        protocol: 'amqps',\n        hostname: 'localhost',\n        port: 5671,\n        username: 'myapp',\n        password: 'SecureAppPassword123!',\n        ca: [fs.readFileSync('/etc/rabbitmq/ssl/ca_certificate.pem')],\n        cert: fs.readFileSync('/etc/rabbitmq/ssl/client_certificate.pem'),\n        key: fs.readFileSync('/etc/rabbitmq/ssl/client_key.pem')\n    });\n    return connection;\n}\n\n// Publisher\nasync function publishMessage() {\n    const connection = await connectBasic();\n    const channel = await connection.createChannel();\n    \n    const exchange = 'task_exchange';\n    const routingKey = 'task';\n    const message = 'Hello from Node.js!';\n    \n    await channel.assertExchange(exchange, 'direct', { durable: true });\n    await channel.publish(exchange, routingKey, Buffer.from(message), { persistent: true });\n    \n    console.log('Message sent');\n    await channel.close();\n    await connection.close();\n}\n\n// Consumer\nasync function consumeMessages() {\n    const connection = await connectBasic();\n    const channel = await connection.createChannel();\n    \n    const queue = 'task_queue';\n    \n    await channel.assertQueue(queue, { durable: true });\n    await channel.prefetch(1);\n    \n    console.log('Waiting for messages...');\n    \n    channel.consume(queue, async (message) => {\n        if (message) {\n            console.log('Received:', message.content.toString());\n            // Process message\n            channel.ack(message);\n        }\n    });\n}\n```\n\n### Java (Spring AMQP) Integration\n\n```java\n// Configuration\n@Configuration\n@EnableRabbit\npublic class RabbitConfig {\n    \n    @Bean\n    public ConnectionFactory connectionFactory() {\n        CachingConnectionFactory factory = new CachingConnectionFactory(\"localhost\");\n        factory.setPort(5672);\n        factory.setUsername(\"myapp\");\n        factory.setPassword(\"SecureAppPassword123!\");\n        factory.setVirtualHost(\"/\");\n        return factory;\n    }\n    \n    @Bean\n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\n        template.setMandatory(true);\n        return template;\n    }\n    \n    @Bean\n    public DirectExchange taskExchange() {\n        return new DirectExchange(\"task_exchange\", true, false);\n    }\n    \n    @Bean\n    public Queue taskQueue() {\n        return QueueBuilder.durable(\"task_queue\").build();\n    }\n    \n    @Bean\n    public Binding taskBinding() {\n        return BindingBuilder.bind(taskQueue()).to(taskExchange()).with(\"task\");\n    }\n}\n\n// Producer\n@Service\npublic class MessageProducer {\n    \n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n    \n    public void sendMessage(String message) {\n        rabbitTemplate.convertAndSend(\"task_exchange\", \"task\", message);\n    }\n}\n\n// Consumer\n@Service\npublic class MessageConsumer {\n    \n    @RabbitListener(queues = \"task_queue\")\n    public void receiveMessage(String message) {\n        System.out.println(\"Received: \" + message);\n        // Process message\n    }\n}\n```\n\n### Go (amqp091-go) Integration\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc connectRabbitMQ() (*amqp091.Connection, error) {\n    return amqp091.Dial(\"amqp://myapp:SecureAppPassword123!@localhost:5672/\")\n}\n\nfunc publishMessage(message string) error {\n    conn, err := connectRabbitMQ()\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    ch, err := conn.Channel()\n    if err != nil {\n        return err\n    }\n    defer ch.Close()\n\n    // Declare exchange\n    err = ch.ExchangeDeclare(\n        \"task_exchange\",\n        \"direct\",\n        true,  // durable\n        false, // auto-deleted\n        false, // internal\n        false, // no-wait\n        nil,   // arguments\n    )\n    if err != nil {\n        return err\n    }\n\n    // Declare queue\n    _, err = ch.QueueDeclare(\n        \"task_queue\",\n        true,  // durable\n        false, // delete when unused\n        false, // exclusive\n        false, // no-wait\n        nil,   // arguments\n    )\n    if err != nil {\n        return err\n    }\n\n    // Publish message\n    return ch.Publish(\n        \"task_exchange\",\n        \"task\",\n        false, // mandatory\n        false, // immediate\n        amqp091.Publishing{\n            ContentType:  \"text/plain\",\n            Body:         []byte(message),\n            DeliveryMode: amqp091.Persistent,\n        },\n    )\n}\n\nfunc consumeMessages() error {\n    conn, err := connectRabbitMQ()\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    ch, err := conn.Channel()\n    if err != nil {\n        return err\n    }\n    defer ch.Close()\n\n    msgs, err := ch.Consume(\n        \"task_queue\",\n        \"\",    // consumer\n        false, // auto-ack\n        false, // exclusive\n        false, // no-local\n        false, // no-wait\n        nil,   // args\n    )\n    if err != nil {\n        return err\n    }\n\n    forever := make(chan bool)\n\n    go func() {\n        for d := range msgs {\n            log.Printf(\"Received: %s\", d.Body)\n            // Process message\n            d.Ack(false)\n        }\n    }()\n\n    log.Printf(\"Waiting for messages...\")\n    <-forever\n    return nil\n}\n```\n\n## Additional Resources\n\n- [Official RabbitMQ Documentation](https://www.rabbitmq.com/documentation.html)\n- [RabbitMQ Tutorials](https://www.rabbitmq.com/getstarted.html)\n- [RabbitMQ Management Plugin](https://www.rabbitmq.com/management.html)\n- [RabbitMQ Clustering Guide](https://www.rabbitmq.com/clustering.html)\n- [RabbitMQ High Availability](https://www.rabbitmq.com/ha.html)\n- [AMQP 0-9-1 Protocol Reference](https://www.rabbitmq.com/amqp-0-9-1-reference.html)\n- [RabbitMQ Community](https://www.rabbitmq.com/community.html)\n- [RabbitMQ GitHub Repository](https://github.com/rabbitmq/rabbitmq-server)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"rabbitmq-installation-guide\" class=\"mobile-header\">RabbitMQ Installation Guide</h1>\n<p class=\"mobile-paragraph\">RabbitMQ is a free and open-source message-queueing software and broker written in Erlang. Originally developed by Rabbit Technologies and now owned by VMware, RabbitMQ implements the Advanced Message Queuing Protocol (AMQP) and provides message routing, queuing, and delivery guarantees. It serves as a FOSS alternative to commercial message brokers like IBM MQ, Oracle WebLogic Server, or Microsoft Azure Service Bus, offering enterprise-grade reliability, clustering, and high availability without licensing costs, with features like message persistence, flexible routing, and cross-language support.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum (SSD recommended for message persistence)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for clustering setups</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5672 (AMQP 0-9-1 and 1.0)</li>\n<li class=\"mobile-list-item\">Port 15672 (HTTP Management API)</li>\n<li class=\"mobile-list-item\">Port 25672 (Erlang distribution for clustering)</li>\n<li class=\"mobile-list-item\">Port 4369 (EPMD - Erlang Port Mapper Daemon)</li>\n<li class=\"mobile-list-item\">Port 35672-35682 (CLI tools)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Erlang/OTP (version 23.2+ for RabbitMQ 3.9+)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add RabbitMQ repository\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash\n\n# Add Erlang repository\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash\n\n# Install Erlang\nsudo yum install -y erlang\n\n# Install RabbitMQ server\nsudo yum install -y rabbitmq-server\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5672/tcp\nsudo firewall-cmd --permanent --add-port=15672/tcp\nsudo firewall-cmd --permanent --add-port=25672/tcp\nsudo firewall-cmd --reload\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg apt-transport-https\n\n# Add RabbitMQ signing key\ncurl -fsSL https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA | sudo gpg --dearmor -o /usr/share/keyrings/com.rabbitmq.team.gpg\n\n# Add RabbitMQ repository\necho &quot;deb [signed-by=/usr/share/keyrings/com.rabbitmq.team.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/rabbitmq.list\n\n# Add Erlang repository\necho &quot;deb [signed-by=/usr/share/keyrings/com.rabbitmq.team.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/rabbitmq-erlang.list\n\n# Update package index\nsudo apt update\n\n# Install Erlang and RabbitMQ\nsudo apt install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\nsudo apt install -y rabbitmq-server\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo ufw allow 5672\nsudo ufw allow 15672\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install RabbitMQ from official repositories\nsudo pacman -S rabbitmq\n\n# Install Erlang (dependency)\nsudo pacman -S erlang-nox\n\n# Create rabbitmq user if not exists\nsudo useradd -r -s /sbin/nologin -d /var/lib/rabbitmq -c &quot;RabbitMQ messaging server&quot; rabbitmq\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n\n# Configuration location: /etc/rabbitmq/</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install RabbitMQ\napk add --no-cache rabbitmq-server rabbitmq-server-management\n\n# Install Erlang\napk add --no-cache erlang\n\n# Create rabbitmq user if not exists\nadduser -D -H -s /sbin/nologin -G rabbitmq rabbitmq\n\n# Set permissions\nchown -R rabbitmq:rabbitmq /var/lib/rabbitmq /var/log/rabbitmq\n\n# Enable and start service\nrc-update add rabbitmq default\nrc-service rabbitmq start\n\n# Enable management plugin\nrabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl add_user admin SecureAdminPassword123!\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nrabbitmqctl delete_user guest</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y rabbitmq-server erlang\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y rabbitmq-server erlang\n\n# Enable and start service\nsudo systemctl enable --now rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5672/tcp\nsudo firewall-cmd --permanent --add-port=15672/tcp\nsudo firewall-cmd --reload\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install rabbitmq\n\n# Start RabbitMQ service\nbrew services start rabbitmq\n\n# Or run manually\nsudo rabbitmq-server\n\n# Enable management plugin\nsudo rabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nsudo rabbitmqctl add_user admin SecureAdminPassword123!\nsudo rabbitmqctl set_user_tags admin administrator\nsudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nsudo rabbitmqctl delete_user guest\n\n# Configuration location: /usr/local/etc/rabbitmq/\n# Alternative: /opt/homebrew/etc/rabbitmq/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install rabbitmq erlang\n\n# Using ports\ncd /usr/ports/net/rabbitmq\nmake install clean\n\n# Enable RabbitMQ\necho &#039;rabbitmq_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice rabbitmq start\n\n# Enable management plugin\nrabbitmq-plugins enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl add_user admin SecureAdminPassword123!\nrabbitmqctl set_user_tags admin administrator\nrabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nrabbitmqctl delete_user guest\n\n# Configuration location: /usr/local/etc/rabbitmq/</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install rabbitmq\n\n# Method 2: Using Scoop\nscoop install rabbitmq\n\n# Method 3: Manual installation\n# Download from https://www.rabbitmq.com/download.html\n# Install Erlang first, then RabbitMQ\n\n# Install as Windows service (automatic with installer)\n# The service is named &quot;RabbitMQ&quot;\n\n# Enable management plugin\nrabbitmq-plugins.bat enable rabbitmq_management\n\n# Create admin user\nrabbitmqctl.bat add_user admin SecureAdminPassword123!\nrabbitmqctl.bat set_user_tags admin administrator\nrabbitmqctl.bat set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Remove guest user (security)\nrabbitmqctl.bat delete_user guest\n\n# Configuration location: %APPDATA%\\RabbitMQ\\</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create rabbitmq user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/rabbitmq -s /sbin/nologin -c &quot;RabbitMQ messaging server&quot; rabbitmq</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/rabbitmq/rabbitmq.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">%APPDATA%\\RabbitMQ\\rabbitmq.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/rabbitmq/rabbitmq.conf\n# Network and clustering\nlisteners.tcp.default = 5672\nmanagement.tcp.port = 15672\n\n# Security\nloopback_users.guest = false\ndefault_user = admin\ndefault_pass = SecureAdminPassword123!\n\n# Logging\nlog.file.level = info\nlog.file = /var/log/rabbitmq/rabbitmq.log\nlog.file.rotation.size = 10485760\n\n# Memory and disk limits\nvm_memory_high_watermark.relative = 0.6\ndisk_free_limit.absolute = 1GB\n\n# Message TTL and limits\ndefault_user_tags.administrator = true\nheartbeat = 60\n\n# Clustering (if multiple nodes)\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@node1\ncluster_formation.classic_config.nodes.2 = rabbit@node2</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if RabbitMQ is running\nsudo systemctl status rabbitmq-server\n\n# Test connection\nrabbitmqctl status\n\n# Check cluster status\nrabbitmqctl cluster_status\n\n# List users\nrabbitmqctl list_users\n\n# List virtual hosts\nrabbitmqctl list_vhosts\n\n# Test management interface\ncurl -u admin:SecureAdminPassword123! http://localhost:15672/api/overview\n\n# Test AMQP connection\nrabbitmqctl eval &#039;rabbit_networking:tcp_listener_started(5672).&#039;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Remove or disable the default guest user and enable proper authentication!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable RabbitMQ to start on boot\nsudo systemctl enable rabbitmq-server\n\n# Start RabbitMQ\nsudo systemctl start rabbitmq-server\n\n# Stop RabbitMQ\nsudo systemctl stop rabbitmq-server\n\n# Restart RabbitMQ\nsudo systemctl restart rabbitmq-server\n\n# Reload configuration (graceful)\nsudo rabbitmqctl eval &#039;application:stop(rabbitmq_management_agent), application:start(rabbitmq_management_agent).&#039;\n\n# Check status\nsudo systemctl status rabbitmq-server\n\n# View logs\nsudo journalctl -u rabbitmq-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable RabbitMQ to start on boot\nrc-update add rabbitmq default\n\n# Start RabbitMQ\nrc-service rabbitmq start\n\n# Stop RabbitMQ\nrc-service rabbitmq stop\n\n# Restart RabbitMQ\nrc-service rabbitmq restart\n\n# Check status\nrc-service rabbitmq status\n\n# View logs\ntail -f /var/log/rabbitmq/rabbit@$(hostname).log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;rabbitmq_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start RabbitMQ\nservice rabbitmq start\n\n# Stop RabbitMQ\nservice rabbitmq stop\n\n# Restart RabbitMQ\nservice rabbitmq restart\n\n# Check status\nservice rabbitmq status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start rabbitmq\nbrew services stop rabbitmq\nbrew services restart rabbitmq\n\n# Check status\nbrew services list | grep rabbitmq\n\n# Manual control\nsudo rabbitmq-server -detached\nsudo rabbitmqctl shutdown</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start RabbitMQ service\nnet start RabbitMQ\n\n# Stop RabbitMQ service\nnet stop RabbitMQ\n\n# Using PowerShell\nStart-Service RabbitMQ\nStop-Service RabbitMQ\nRestart-Service RabbitMQ\n\n# Check status\nGet-Service RabbitMQ\n\n# View logs\nGet-EventLog -LogName Application -Source RabbitMQ</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-configuration\" class=\"mobile-header\">High Availability Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Cluster configuration\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-1\ncluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-2\ncluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-3\n\n# Enable quorum queues by default\ndefault_queue_type = quorum\n\n# HA policy for classic queues\nqueue_master_locator = min-masters</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># SSL/TLS configuration\nlisteners.ssl.default = 5671\nssl_options.cacertfile = /etc/rabbitmq/ssl/ca_certificate.pem\nssl_options.certfile = /etc/rabbitmq/ssl/server_certificate.pem\nssl_options.keyfile = /etc/rabbitmq/ssl/server_key.pem\nssl_options.verify = verify_peer\nssl_options.fail_if_no_peer_cert = true\n\n# Management over HTTPS\nmanagement.ssl.port = 15671\nmanagement.ssl.cacertfile = /etc/rabbitmq/ssl/ca_certificate.pem\nmanagement.ssl.certfile = /etc/rabbitmq/ssl/server_certificate.pem\nmanagement.ssl.keyfile = /etc/rabbitmq/ssl/server_key.pem\n\n# Authentication backends\nauth_backends.1 = rabbit_auth_backend_ldap\nauth_backends.2 = rabbit_auth_backend_internal\n\n# LDAP configuration\nauth_ldap.servers.1 = ldap.example.com\nauth_ldap.user_dn_pattern = cn=${username},ou=users,dc=example,dc=com</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/rabbitmq\nupstream rabbitmq_management {\n    server 127.0.0.1:15672 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:15673 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 80;\n    server_name rabbitmq.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name rabbitmq.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/rabbitmq.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/rabbitmq.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://rabbitmq_management;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for management UI\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend rabbitmq_management_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/rabbitmq.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rabbitmq_management_servers\n\nbackend rabbitmq_management_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /api/aliveness-test/%2F\n    server rabbitmq1 127.0.0.1:15672 check\n    server rabbitmq2 127.0.0.1:15673 check backup\n\nfrontend rabbitmq_amqp_frontend\n    bind *:5672\n    mode tcp\n    default_backend rabbitmq_amqp_servers\n\nbackend rabbitmq_amqp_servers\n    mode tcp\n    balance roundrobin\n    server rabbitmq1 127.0.0.1:5672 check\n    server rabbitmq2 127.0.0.1:5673 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates for RabbitMQ\nsudo mkdir -p /etc/rabbitmq/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/ca_key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /etc/rabbitmq/ssl/ca_key.pem -out /etc/rabbitmq/ssl/ca_certificate.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=RabbitMQ-CA&quot;\n\n# Create server certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/server_key.pem 4096\nsudo openssl req -new -key /etc/rabbitmq/ssl/server_key.pem -out /etc/rabbitmq/ssl/server_certificate_request.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=rabbitmq.example.com&quot;\nsudo openssl x509 -req -in /etc/rabbitmq/ssl/server_certificate_request.pem -CA /etc/rabbitmq/ssl/ca_certificate.pem -CAkey /etc/rabbitmq/ssl/ca_key.pem -CAcreateserial -out /etc/rabbitmq/ssl/server_certificate.pem -days 365\n\n# Create client certificate\nsudo openssl genrsa -out /etc/rabbitmq/ssl/client_key.pem 4096\nsudo openssl req -new -key /etc/rabbitmq/ssl/client_key.pem -out /etc/rabbitmq/ssl/client_certificate_request.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=rabbitmq-client&quot;\nsudo openssl x509 -req -in /etc/rabbitmq/ssl/client_certificate_request.pem -CA /etc/rabbitmq/ssl/ca_certificate.pem -CAkey /etc/rabbitmq/ssl/ca_key.pem -CAcreateserial -out /etc/rabbitmq/ssl/client_certificate.pem -days 365\n\n# Set permissions\nsudo chown -R rabbitmq:rabbitmq /etc/rabbitmq/ssl\nsudo chmod 600 /etc/rabbitmq/ssl/*_key.pem\nsudo chmod 644 /etc/rabbitmq/ssl/*_certificate.pem /etc/rabbitmq/ssl/ca_certificate.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-management-and-access-control\" class=\"mobile-header\">User Management and Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create application user\nsudo rabbitmqctl add_user myapp SecureAppPassword123!\nsudo rabbitmqctl set_permissions -p / myapp &quot;myapp\\..*&quot; &quot;myapp\\..*&quot; &quot;myapp\\..*&quot;\n\n# Create monitoring user\nsudo rabbitmqctl add_user monitoring MonitorPassword123!\nsudo rabbitmqctl set_user_tags monitoring monitoring\nsudo rabbitmqctl set_permissions -p / monitoring &quot;&quot; &quot;&quot; &quot;.*&quot;\n\n# Create backup user\nsudo rabbitmqctl add_user backup BackupPassword123!\nsudo rabbitmqctl set_user_tags backup management\nsudo rabbitmqctl set_permissions -p / backup &quot;&quot; &quot;&quot; &quot;.*&quot;\n\n# Create virtual hosts\nsudo rabbitmqctl add_vhost production\nsudo rabbitmqctl add_vhost staging\n\n# Set permissions for virtual hosts\nsudo rabbitmqctl set_permissions -p production myapp &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\nsudo rabbitmqctl set_permissions -p staging myapp &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n\n# Set resource limits\nsudo rabbitmqctl set_user_limits myapp &#039;{&quot;max-connections&quot;: 100, &quot;max-channels&quot;: 1000}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 5672\nsudo ufw allow from 192.168.1.0/24 to any port 15672\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=rabbitmq\nsudo firewall-cmd --permanent --zone=rabbitmq --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=5672/tcp\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=15672/tcp\nsudo firewall-cmd --permanent --zone=rabbitmq --add-port=25672/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 5672 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 15672 -j ACCEPT\nsudo iptables -save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {5672, 15672, 25672}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;RabbitMQ AMQP&quot; -Direction Inbound -Protocol TCP -LocalPort 5672 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;RabbitMQ Management&quot; -Direction Inbound -Protocol TCP -LocalPort 15672 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"queue-and-exchange-configuration\" class=\"mobile-header\">Queue and Exchange Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create exchanges\nrabbitmqctl eval &#039;rabbit_exchange:declare({resource, &lt;&lt;&quot;/&quot;&gt;&gt;, exchange, &lt;&lt;&quot;logs&quot;&gt;&gt;}, topic, true, false, false, []).&#039;\nrabbitmqctl eval &#039;rabbit_exchange:declare({resource, &lt;&lt;&quot;/&quot;&gt;&gt;, exchange, &lt;&lt;&quot;tasks&quot;&gt;&gt;}, direct, true, false, false, []).&#039;\n\n# Create queues\nrabbitmqctl eval &#039;rabbit_amqqueue:declare({resource, &lt;&lt;&quot;/&quot;&gt;&gt;, queue, &lt;&lt;&quot;error_logs&quot;&gt;&gt;}, true, false, [], none, &lt;&lt;&quot;/&quot;&gt;&gt;).&#039;\nrabbitmqctl eval &#039;rabbit_amqqueue:declare({resource, &lt;&lt;&quot;/&quot;&gt;&gt;, queue, &lt;&lt;&quot;task_queue&quot;&gt;&gt;}, true, false, [], none, &lt;&lt;&quot;/&quot;&gt;&gt;).&#039;\n\n# Create bindings\nrabbitmqctl eval &#039;rabbit_binding:add({binding, {resource, &lt;&lt;&quot;/&quot;&gt;&gt;, exchange, &lt;&lt;&quot;logs&quot;&gt;&gt;}, &lt;&lt;&quot;error&quot;&gt;&gt;, {resource, &lt;&lt;&quot;/&quot;&gt;&gt;, queue, &lt;&lt;&quot;error_logs&quot;&gt;&gt;}, []}).&#039;\n\n# Set queue policies for HA\nsudo rabbitmqctl set_policy ha-all &quot;.*&quot; &#039;{&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#039;\n\n# Set TTL policy\nsudo rabbitmqctl set_policy TTL &quot;.*&quot; &#039;{&quot;message-ttl&quot;:3600000}&#039; --apply-to queues\n\n# Set queue length limit\nsudo rabbitmqctl set_policy max-length &quot;.*&quot; &#039;{&quot;max-length&quot;:10000}&#039; --apply-to queues</code></pre>\n      </div>\n    </div>\n<h3 id=\"shovel-configuration-message-transfer\" class=\"mobile-header\">Shovel Configuration (Message Transfer)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install shovel plugin\nsudo rabbitmq-plugins enable rabbitmq_shovel\nsudo rabbitmq-plugins enable rabbitmq_shovel_management\n\n# Create shovel (via management API)\ncurl -u admin:SecureAdminPassword123! -X PUT \\\n  http://localhost:15672/api/parameters/shovel/%2F/my-shovel \\\n  -H &quot;Content-Type: application/json&quot; \\\n  -d &#039;{\n    &quot;value&quot;: {\n      &quot;src-protocol&quot;: &quot;amqp091&quot;,\n      &quot;src-uri&quot;: &quot;amqp://guest:guest@source-server:5672/%2F&quot;,\n      &quot;src-queue&quot;: &quot;source-queue&quot;,\n      &quot;dest-protocol&quot;: &quot;amqp091&quot;,\n      &quot;dest-uri&quot;: &quot;amqp://guest:guest@dest-server:5672/%2F&quot;,\n      &quot;dest-queue&quot;: &quot;dest-queue&quot;\n    }\n  }&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RabbitMQ-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# RabbitMQ optimizations\nvm.swappiness = 1\nnet.core.somaxconn = 4096\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_tw_reuse = 1\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\nrabbitmq soft nofile 65536\nrabbitmq hard nofile 65536\nEOF\n\n# Set Erlang VM parameters\nsudo tee /etc/rabbitmq/rabbitmq-env.conf &lt;&lt;EOF\nRABBITMQ_SERVER_ERL_ARGS=&quot;+K true +A 128 +P 1048576&quot;\nRABBITMQ_CTL_ERL_ARGS=&quot;+K true&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rabbitmq-performance-configuration\" class=\"mobile-header\">RabbitMQ Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># High-performance RabbitMQ configuration\n# /etc/rabbitmq/rabbitmq.conf\n\n# Memory and disk\nvm_memory_high_watermark.relative = 0.4\nvm_memory_high_watermark_paging_ratio = 0.3\ndisk_free_limit.absolute = 2GB\n\n# Clustering and replication\ncluster_partition_handling = pause_minority\ncluster_keepalive_interval = 10000\n\n# Connection and channel limits\nconnection_max = 65536\nchannel_max = 2047\n\n# Message store\nmsg_store_file_size_limit = 16777216\nqueue_index_embed_msgs_below = 4096\n\n# Lazy queues (for large queues)\nlazy_queue_explicit_gc_run_operation_threshold = 1000\n\n# Mnesia table loading\nmnesia_table_loading_retry_timeout = 30000\nmnesia_table_loading_retry_limit = 10</code></pre>\n      </div>\n    </div>\n<h3 id=\"queue-optimization\" class=\"mobile-header\">Queue Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable lazy queues for large message backlogs\nrabbitmqctl set_policy lazy-queue &quot;.*&quot; &#039;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#039; --apply-to queues\n\n# Configure quorum queues for better consistency\nrabbitmqctl set_policy quorum-queue &quot;.*&quot; &#039;{&quot;queue-type&quot;:&quot;quorum&quot;}&#039; --apply-to queues\n\n# Set delivery limits to prevent poison messages\nrabbitmqctl set_policy delivery-limit &quot;.*&quot; &#039;{&quot;delivery-limit&quot;:10}&#039; --apply-to queues\n\n# Configure stream queues for high throughput\nrabbitmqctl set_policy stream-queue &quot;stream.*&quot; &#039;{&quot;queue-type&quot;:&quot;stream&quot;}&#039; --apply-to queues</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Node status and statistics\nrabbitmqctl status\nrabbitmqctl node_health_check\nrabbitmqctl environment\n\n# Queue monitoring\nrabbitmqctl list_queues name messages consumers memory\nrabbitmqctl list_exchanges name type\nrabbitmqctl list_bindings\n\n# Connection monitoring\nrabbitmqctl list_connections peer_host peer_port state channels\nrabbitmqctl list_channels connection name consumer_count messages_unacknowledged\n\n# Cluster monitoring\nrabbitmqctl cluster_status\nrabbitmqctl list_cluster_nodes\n\n# Memory and disk usage\nrabbitmqctl eval &#039;rabbit_vm:memory().&#039;\nrabbitmqctl eval &#039;rabbit_disk_monitor:get_disk_free().&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install RabbitMQ Exporter for Prometheus\nwget https://github.com/kbudde/rabbitmq_exporter/releases/download/v1.0.0/rabbitmq_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf rabbitmq_exporter-*.tar.gz\nsudo cp rabbitmq_exporter /usr/local/bin/\n\n# Create monitoring user in RabbitMQ\nsudo rabbitmqctl add_user prometheus PrometheusPassword123!\nsudo rabbitmqctl set_user_tags prometheus monitoring\n\n# Create systemd service\nsudo tee /etc/systemd/system/rabbitmq_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=RabbitMQ Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=rabbitmq\nEnvironment=RABBIT_URL=&quot;http://prometheus:PrometheusPassword123!@localhost:15672&quot;\nExecStart=/usr/local/bin/rabbitmq_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now rabbitmq_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# rabbitmq-health-check.sh\n\n# Check RabbitMQ service\nif ! systemctl is-active rabbitmq-server &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: RabbitMQ service is not running&quot;\n    exit 2\nfi\n\n# Check node health\nif ! rabbitmqctl node_health_check &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: RabbitMQ node health check failed&quot;\n    exit 2\nfi\n\n# Check cluster status\nCLUSTER_STATUS=$(rabbitmqctl cluster_status --formatter json 2&gt;/dev/null | jq -r &#039;.running_nodes | length&#039;)\nif [ &quot;$CLUSTER_STATUS&quot; -lt 2 ]; then\n    echo &quot;WARNING: Less than 2 nodes running in cluster&quot;\n    exit 1\nfi\n\n# Check memory usage\nMEMORY_ALARM=$(rabbitmqctl status --formatter json 2&gt;/dev/null | jq -r &#039;.alarms | length&#039;)\nif [ &quot;$MEMORY_ALARM&quot; -gt 0 ]; then\n    echo &quot;WARNING: Memory alarms detected&quot;\n    exit 1\nfi\n\n# Check disk space\nDISK_ALARM=$(rabbitmqctl status --formatter json 2&gt;/dev/null | jq -r &#039;.disk_free_alarm&#039;)\nif [ &quot;$DISK_ALARM&quot; = &quot;true&quot; ]; then\n    echo &quot;WARNING: Disk space alarm active&quot;\n    exit 1\nfi\n\n# Check queue lengths\nMAX_QUEUE_LENGTH=$(rabbitmqctl list_queues messages --formatter json 2&gt;/dev/null | jq -r &#039;max_by(.messages).messages&#039;)\nif [ &quot;$MAX_QUEUE_LENGTH&quot; -gt 100000 ]; then\n    echo &quot;WARNING: Queue length exceeds 100,000 messages&quot;\n    exit 1\nfi\n\necho &quot;OK: RabbitMQ is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# rabbitmq-backup.sh\n\nBACKUP_DIR=&quot;/backup/rabbitmq/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Export definitions (exchanges, queues, users, policies)\ncurl -u admin:SecureAdminPassword123! \\\n    http://localhost:15672/api/definitions \\\n    -o &quot;$BACKUP_DIR/definitions.json&quot;\n\n# Export queue messages (if needed for small queues)\nrabbitmqctl eval &quot;\n    application:load(rabbitmq_management_agent),\n    rabbitmq_management_db:get_all_queues(all_vhosts).\n&quot; &gt; &quot;$BACKUP_DIR/queue_stats.txt&quot;\n\n# Backup configuration files\ntar czf &quot;$BACKUP_DIR/rabbitmq-config.tar.gz&quot; \\\n    /etc/rabbitmq/ \\\n    --exclude=&#039;*.log&#039; \\\n    --exclude=&#039;*.pid&#039;\n\n# Backup SSL certificates\nif [ -d /etc/rabbitmq/ssl ]; then\n    tar czf &quot;$BACKUP_DIR/rabbitmq-ssl.tar.gz&quot; /etc/rabbitmq/ssl/\nfi\n\n# Save cluster information\nrabbitmqctl cluster_status &gt; &quot;$BACKUP_DIR/cluster_status.txt&quot;\nrabbitmqctl status &gt; &quot;$BACKUP_DIR/node_status.txt&quot;\n\n# Create manifest\necho &quot;RabbitMQ Backup - $(date)&quot; &gt; &quot;$BACKUP_DIR/backup_manifest.txt&quot;\necho &quot;Node: $(hostname)&quot; &gt;&gt; &quot;$BACKUP_DIR/backup_manifest.txt&quot;\necho &quot;Version: $(rabbitmqctl version)&quot; &gt;&gt; &quot;$BACKUP_DIR/backup_manifest.txt&quot;\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# rabbitmq-restore.sh\n\nBACKUP_DIR=&quot;$1&quot;\nif [ -z &quot;$BACKUP_DIR&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-directory&gt;&quot;\n    exit 1\nfi\n\n# Stop RabbitMQ (ensure clean state)\nsudo systemctl stop rabbitmq-server\n\n# Restore configuration\nsudo tar xzf &quot;$BACKUP_DIR/rabbitmq-config.tar.gz&quot; -C /\n\n# Restore SSL certificates\nif [ -f &quot;$BACKUP_DIR/rabbitmq-ssl.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/rabbitmq-ssl.tar.gz&quot; -C /\nfi\n\n# Start RabbitMQ\nsudo systemctl start rabbitmq-server\n\n# Wait for RabbitMQ to start\nsleep 10\n\n# Import definitions\ncurl -u admin:SecureAdminPassword123! \\\n    -X POST \\\n    -H &quot;Content-Type: application/json&quot; \\\n    -d @&quot;$BACKUP_DIR/definitions.json&quot; \\\n    http://localhost:15672/api/definitions\n\n# Verify restore\nrabbitmqctl list_queues\nrabbitmqctl list_users\n\necho &quot;Restore completed from $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"message-level-backup-advanced\" class=\"mobile-header\">Message-Level Backup (Advanced)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# rabbitmq-message-backup.sh\n\nBACKUP_DIR=&quot;/backup/rabbitmq-messages/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Install shovel plugin for message transfer\nrabbitmq-plugins enable rabbitmq_shovel\nrabbitmq-plugins enable rabbitmq_shovel_management\n\n# Backup messages from all queues\nrabbitmqctl list_queues name --formatter json | jq -r &#039;.[].name&#039; | while read -r queue; do\n    if [ &quot;$queue&quot; != &quot;null&quot; ]; then\n        # Create shovel to backup queue\n        curl -u admin:SecureAdminPassword123! -X PUT \\\n            &quot;http://localhost:15672/api/parameters/shovel/%2F/backup-$queue&quot; \\\n            -H &quot;Content-Type: application/json&quot; \\\n            -d &quot;{\n                \\&quot;value\\&quot;: {\n                    \\&quot;src-protocol\\&quot;: \\&quot;amqp091\\&quot;,\n                    \\&quot;src-uri\\&quot;: \\&quot;amqp://admin:SecureAdminPassword123!@localhost:5672/%2F\\&quot;,\n                    \\&quot;src-queue\\&quot;: \\&quot;$queue\\&quot;,\n                    \\&quot;dest-protocol\\&quot;: \\&quot;amqp091\\&quot;,\n                    \\&quot;dest-uri\\&quot;: \\&quot;amqp://backup:BackupPassword123!@backup-server:5672/%2F\\&quot;,\n                    \\&quot;dest-queue\\&quot;: \\&quot;backup-$queue\\&quot;\n                }\n            }&quot;\n    fi\ndone\n\necho &quot;Message backup shovels created for all queues&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>RabbitMQ won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u rabbitmq-server -f\nsudo tail -f /var/log/rabbitmq/rabbit@$(hostname).log\n\n# Check Erlang installation\nerl -version\n\n# Check disk space\ndf -h /var/lib/rabbitmq\n\n# Check permissions\nls -la /var/lib/rabbitmq\nls -la /var/log/rabbitmq\n\n# Reset node (last resort)\nsudo rabbitmqctl stop_app\nsudo rabbitmqctl reset\nsudo rabbitmqctl start_app</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cluster issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster status\nrabbitmqctl cluster_status\n\n# Check network connectivity between nodes\ntelnet rabbitmq-node-2 25672\n\n# Check Erlang cookie consistency\nsudo cat /var/lib/rabbitmq/.erlang.cookie\n\n# Force cluster join\nsudo rabbitmqctl stop_app\nsudo rabbitmqctl join_cluster rabbit@rabbitmq-node-1\nsudo rabbitmqctl start_app</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Memory/disk alarms</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check alarms\nrabbitmqctl status | grep alarms\n\n# Check memory usage\nrabbitmqctl eval &#039;rabbit_vm:memory().&#039;\n\n# Check disk usage\ndf -h /var/lib/rabbitmq\n\n# Clear memory alarm (after fixing issue)\nrabbitmqctl eval &#039;vm_memory_monitor:set_vm_memory_high_watermark(0.4).&#039;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if RabbitMQ is listening\nsudo ss -tlnp | grep :5672\n\n# Test AMQP connection\nrabbitmqctl eval &#039;rabbit_networking:tcp_listener_started(5672).&#039;\n\n# Check user permissions\nrabbitmqctl list_user_permissions admin\n\n# Test with management API\ncurl -u admin:SecureAdminPassword123! http://localhost:15672/api/overview</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &#039;log.file.level = debug&#039; &gt;&gt; /etc/rabbitmq/rabbitmq.conf\n\n# Enable connection logging\necho &#039;log.connection.level = debug&#039; &gt;&gt; /etc/rabbitmq/rabbitmq.conf\n\n# Enable channel logging  \necho &#039;log.channel.level = debug&#039; &gt;&gt; /etc/rabbitmq/rabbitmq.conf\n\n# Restart to apply\nsudo systemctl restart rabbitmq-server\n\n# View debug logs\nsudo tail -f /var/log/rabbitmq/rabbit@$(hostname).log</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update rabbitmq-server\nsudo yum update rabbitmq-server\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade rabbitmq-server\n\n# Arch Linux\nsudo pacman -Syu rabbitmq\n\n# Alpine Linux\napk update\napk upgrade rabbitmq-server\n\n# openSUSE\nsudo zypper update rabbitmq-server\n\n# FreeBSD\npkg update\npkg upgrade rabbitmq\n\n# Always backup before updates\n./rabbitmq-backup.sh\n\n# Test after updates\nrabbitmqctl status\nsudo systemctl restart rabbitmq-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# rabbitmq-maintenance.sh\n\n# Rotate logs\nrabbitmqctl rotate_logs\n\n# Check node health\nrabbitmqctl node_health_check\n\n# Clean up old definitions backup\nfind /backup/rabbitmq -name &quot;*.json&quot; -mtime +30 -delete\n\n# Optimize memory usage\nrabbitmqctl eval &#039;erlang:garbage_collect().&#039;\n\n# Check and clean old message store files\nrabbitmqctl eval &#039;rabbit_msg_store_gc:gc().&#039;\n\n# Check queue statistics\nrabbitmqctl list_queues name messages consumers memory | \\\n    awk &#039;$2 &gt; 1000 {print &quot;Queue &quot; $1 &quot; has &quot; $2 &quot; messages&quot;}&#039;\n\necho &quot;RabbitMQ maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/rabbitmq-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/rabbitmq &lt;&lt;EOF\n/var/log/rabbitmq/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    sharedscripts\n    postrotate\n        rabbitmqctl rotate_logs\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-pika-integration\" class=\"mobile-header\">Python (pika) Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">import pika\nimport ssl\n\n# Basic connection\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host=&#039;localhost&#039;, port=5672,\n                            credentials=pika.PlainCredentials(&#039;myapp&#039;, &#039;SecureAppPassword123!&#039;))\n)\nchannel = connection.channel()\n\n# SSL connection\nssl_context = ssl.create_default_context(cafile=&#039;/etc/rabbitmq/ssl/ca_certificate.pem&#039;)\nssl_context.check_hostname = False\n\nssl_connection = pika.BlockingConnection(\n    pika.ConnectionParameters(\n        host=&#039;localhost&#039;,\n        port=5671,\n        credentials=pika.PlainCredentials(&#039;myapp&#039;, &#039;SecureAppPassword123!&#039;),\n        ssl_options=pika.SSLOptions(ssl_context)\n    )\n)\n\n# Declare queue and exchange\nchannel.exchange_declare(exchange=&#039;task_exchange&#039;, exchange_type=&#039;direct&#039;)\nchannel.queue_declare(queue=&#039;task_queue&#039;, durable=True)\nchannel.queue_bind(exchange=&#039;task_exchange&#039;, queue=&#039;task_queue&#039;, routing_key=&#039;task&#039;)\n\n# Publish message\nchannel.basic_publish(\n    exchange=&#039;task_exchange&#039;,\n    routing_key=&#039;task&#039;,\n    body=&#039;Hello, RabbitMQ!&#039;,\n    properties=pika.BasicProperties(delivery_mode=2)  # Make message persistent\n)\n\n# Consume messages\ndef callback(ch, method, properties, body):\n    print(f&quot;Received: {body}&quot;)\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(queue=&#039;task_queue&#039;, on_message_callback=callback)\nchannel.start_consuming()</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-amqplib-integration\" class=\"mobile-header\">Node.js (amqplib) Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">const amqp = require(&#039;amqplib&#039;);\nconst fs = require(&#039;fs&#039;);\n\n// Basic connection\nasync function connectBasic() {\n    const connection = await amqp.connect(&#039;amqp://myapp:SecureAppPassword123!@localhost:5672&#039;);\n    return connection;\n}\n\n// SSL connection\nasync function connectSSL() {\n    const connection = await amqp.connect({\n        protocol: &#039;amqps&#039;,\n        hostname: &#039;localhost&#039;,\n        port: 5671,\n        username: &#039;myapp&#039;,\n        password: &#039;SecureAppPassword123!&#039;,\n        ca: [fs.readFileSync(&#039;/etc/rabbitmq/ssl/ca_certificate.pem&#039;)],\n        cert: fs.readFileSync(&#039;/etc/rabbitmq/ssl/client_certificate.pem&#039;),\n        key: fs.readFileSync(&#039;/etc/rabbitmq/ssl/client_key.pem&#039;)\n    });\n    return connection;\n}\n\n// Publisher\nasync function publishMessage() {\n    const connection = await connectBasic();\n    const channel = await connection.createChannel();\n    \n    const exchange = &#039;task_exchange&#039;;\n    const routingKey = &#039;task&#039;;\n    const message = &#039;Hello from Node.js!&#039;;\n    \n    await channel.assertExchange(exchange, &#039;direct&#039;, { durable: true });\n    await channel.publish(exchange, routingKey, Buffer.from(message), { persistent: true });\n    \n    console.log(&#039;Message sent&#039;);\n    await channel.close();\n    await connection.close();\n}\n\n// Consumer\nasync function consumeMessages() {\n    const connection = await connectBasic();\n    const channel = await connection.createChannel();\n    \n    const queue = &#039;task_queue&#039;;\n    \n    await channel.assertQueue(queue, { durable: true });\n    await channel.prefetch(1);\n    \n    console.log(&#039;Waiting for messages...&#039;);\n    \n    channel.consume(queue, async (message) =&gt; {\n        if (message) {\n            console.log(&#039;Received:&#039;, message.content.toString());\n            // Process message\n            channel.ack(message);\n        }\n    });\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-spring-amqp-integration\" class=\"mobile-header\">Java (Spring AMQP) Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// Configuration\n@Configuration\n@EnableRabbit\npublic class RabbitConfig {\n    \n    @Bean\n    public ConnectionFactory connectionFactory() {\n        CachingConnectionFactory factory = new CachingConnectionFactory(&quot;localhost&quot;);\n        factory.setPort(5672);\n        factory.setUsername(&quot;myapp&quot;);\n        factory.setPassword(&quot;SecureAppPassword123!&quot;);\n        factory.setVirtualHost(&quot;/&quot;);\n        return factory;\n    }\n    \n    @Bean\n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\n        template.setMandatory(true);\n        return template;\n    }\n    \n    @Bean\n    public DirectExchange taskExchange() {\n        return new DirectExchange(&quot;task_exchange&quot;, true, false);\n    }\n    \n    @Bean\n    public Queue taskQueue() {\n        return QueueBuilder.durable(&quot;task_queue&quot;).build();\n    }\n    \n    @Bean\n    public Binding taskBinding() {\n        return BindingBuilder.bind(taskQueue()).to(taskExchange()).with(&quot;task&quot;);\n    }\n}\n\n// Producer\n@Service\npublic class MessageProducer {\n    \n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n    \n    public void sendMessage(String message) {\n        rabbitTemplate.convertAndSend(&quot;task_exchange&quot;, &quot;task&quot;, message);\n    }\n}\n\n// Consumer\n@Service\npublic class MessageConsumer {\n    \n    @RabbitListener(queues = &quot;task_queue&quot;)\n    public void receiveMessage(String message) {\n        System.out.println(&quot;Received: &quot; + message);\n        // Process message\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"go-amqp091-go-integration\" class=\"mobile-header\">Go (amqp091-go) Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"go\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">go</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-go\">package main\n\nimport (\n    &quot;log&quot;\n    &quot;github.com/rabbitmq/amqp091-go&quot;\n)\n\nfunc connectRabbitMQ() (*amqp091.Connection, error) {\n    return amqp091.Dial(&quot;amqp://myapp:SecureAppPassword123!@localhost:5672/&quot;)\n}\n\nfunc publishMessage(message string) error {\n    conn, err := connectRabbitMQ()\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    ch, err := conn.Channel()\n    if err != nil {\n        return err\n    }\n    defer ch.Close()\n\n    // Declare exchange\n    err = ch.ExchangeDeclare(\n        &quot;task_exchange&quot;,\n        &quot;direct&quot;,\n        true,  // durable\n        false, // auto-deleted\n        false, // internal\n        false, // no-wait\n        nil,   // arguments\n    )\n    if err != nil {\n        return err\n    }\n\n    // Declare queue\n    _, err = ch.QueueDeclare(\n        &quot;task_queue&quot;,\n        true,  // durable\n        false, // delete when unused\n        false, // exclusive\n        false, // no-wait\n        nil,   // arguments\n    )\n    if err != nil {\n        return err\n    }\n\n    // Publish message\n    return ch.Publish(\n        &quot;task_exchange&quot;,\n        &quot;task&quot;,\n        false, // mandatory\n        false, // immediate\n        amqp091.Publishing{\n            ContentType:  &quot;text/plain&quot;,\n            Body:         []byte(message),\n            DeliveryMode: amqp091.Persistent,\n        },\n    )\n}\n\nfunc consumeMessages() error {\n    conn, err := connectRabbitMQ()\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    ch, err := conn.Channel()\n    if err != nil {\n        return err\n    }\n    defer ch.Close()\n\n    msgs, err := ch.Consume(\n        &quot;task_queue&quot;,\n        &quot;&quot;,    // consumer\n        false, // auto-ack\n        false, // exclusive\n        false, // no-local\n        false, // no-wait\n        nil,   // args\n    )\n    if err != nil {\n        return err\n    }\n\n    forever := make(chan bool)\n\n    go func() {\n        for d := range msgs {\n            log.Printf(&quot;Received: %s&quot;, d.Body)\n            // Process message\n            d.Ack(false)\n        }\n    }()\n\n    log.Printf(&quot;Waiting for messages...&quot;)\n    &lt;-forever\n    return nil\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/documentation.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official RabbitMQ Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/getstarted.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ Tutorials</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/management.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ Management Plugin</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/clustering.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ Clustering Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/ha.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ High Availability</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/amqp-0-9-1-reference.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">AMQP 0-9-1 Protocol Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.rabbitmq.com/community.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/rabbitmq/rabbitmq-server\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">RabbitMQ GitHub Repository</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"21 min","wordCount":4178,"lastBuilt":"2025-09-14T04:15:45.872Z"},"category":{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]},"relatedGuides":[{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T04:15:55.540Z"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T04:15:55.439Z"},{"name":"ansible","displayName":"Ansible","slug":"ansible","description":"Repo for ansible","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-14T01:29:39Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAgentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.\n\n## Prerequisites\n\n- Linux control machine (any modern distribution)\n- Python 3.8+ on control machine\n- SSH access to target hosts\n- Python 2.7+ or 3.5+ on target hosts\n- 2GB RAM minimum, 4GB+ recommended for large infrastructures\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Fedora\n```bash\n# Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Arch Linux\n```bash\n# Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version\n```\n\n#### Alpine Linux\n```bash\n# Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version\n```\n\n### Using pip (Latest Version)\n```bash\n# Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho 'source ~/ansible-venv/bin/activate' >> ~/.bashrc\n\n# Verify installation\nansible --version\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho 'alias ansible=\"ansible-docker ansible\"' >> ~/.bashrc\necho 'alias ansible-playbook=\"ansible-docker ansible-playbook\"' >> ~/.bashrc\n```\n\n## Project Structure and Configuration\n\n### Professional Project Structure\n```bash\n# Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF\n```\n\n### Advanced Inventory Management\n```bash\n# Create production inventory with groups and variables\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: \"{{ vault_mysql_root_password }}\"\n        mysql_replication_user: \"{{ vault_mysql_replication_user }}\"\n        mysql_replication_password: \"{{ vault_mysql_replication_password }}\"\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: \"{{ vault_haproxy_stats_password }}\"\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: \"0 2 * * *\"\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: \"0 1 * * *\"\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat > inventories/production/aws_ec2.yml <<EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: \"'web' in tags.Role\"\n  databases: \"'db' in tags.Role\"\n  loadbalancers: \"'lb' in tags.Role\"\n  \n  # Group by environment\n  production: \"tags.Environment == 'production'\"\n  staging: \"tags.Environment == 'staging'\"\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == \"us-west-2a\"\n  us_west_2b: ec2_placement_availability_zone == \"us-west-2b\"\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF\n```\n\n### Ansible Vault Security\n```bash\n# Create strong vault password\nopenssl rand -base64 32 > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat > group_vars/all/vars.yml <<EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: \"{{ vault_mysql_root_password }}\"\ngrafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: \"{{ vault_ssl_private_key }}\"\n\n# Security settings\nansible_ssh_common_args: '-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts'\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml\n```\n\n## Comprehensive Playbooks\n\n### System Hardening Playbook\n```bash\ncat > playbooks/system-hardening.yml <<EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [\"Debian\", \"RedHat\"]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: \"*\"\n        state: latest\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == \"Debian\"\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: \"{{ security_packages }}\"\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: 'ansible ALL=(ALL) NOPASSWD:ALL'\n        create: yes\n        mode: '0440'\n        validate: 'visudo -cf %s'\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }\n        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }\n        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 0' }\n        - { regexp: '^#?Protocol', line: 'Protocol 2' }\n        - { regexp: '^#?LogLevel', line: 'LogLevel VERBOSE' }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == \"Debian\"\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: 'SSH access'\n      when: ansible_os_family == \"Debian\"\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: \"{{ item }}\"\n        enabled: no\n        state: stopped\n      loop: \"{{ disabled_services }}\"\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: \"{{ item.path }}\"\n        mode: \"{{ item.mode }}\"\n        owner: root\n        group: root\n      loop:\n        - { path: '/etc/passwd', mode: '0644' }\n        - { path: '/etc/shadow', mode: '0640' }\n        - { path: '/etc/group', mode: '0644' }\n        - { path: '/etc/gshadow', mode: '0640' }\n        - { path: '/etc/ssh/sshd_config', mode: '0600' }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'net.ipv4.ip_forward', value: '0' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'kernel.randomize_va_space', value: '2' }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF\n```\n\n### Application Deployment Playbook\n```bash\ncat > playbooks/web-application-deployment.yml <<EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: \"25%\"  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: \"{{ app_version | default('latest') }}\"\n    app_port: 3000\n    nginx_workers: \"{{ ansible_processor_cores }}\"\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: \"Server is in maintenance mode\"\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: \"{{ item }}\"\n        state: directory\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0755'\n      loop:\n        - \"/opt/{{ app_name }}\"\n        - \"/opt/{{ app_name }}/releases\"\n        - \"/opt/{{ app_name }}/shared\"\n        - \"/var/log/{{ app_name }}\"\n\n    - name: Download application release\n      get_url:\n        url: \"https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        mode: '0644'\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}/releases/\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n        creates: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n\n    - name: Create symlink to current release\n      file:\n        src: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n        dest: \"/opt/{{ app_name }}/current\"\n        state: link\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: \"templates/{{ app_name }}.conf.j2\"\n        dest: \"/opt/{{ app_name }}/shared/{{ app_name }}.conf\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0640'\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: \"templates/{{ app_name }}.service.j2\"\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: \"{{ app_name }}\"\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: \"http://localhost:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: \"http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: \"/var/log/{{ app_name }}/deployments.log\"\n        line: \"{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}\"\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Infrastructure as Code Playbook\n```bash\ncat > playbooks/infrastructure-provisioning.yml <<EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: \"{{ inventory_hostname }}\"\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: \"{{ ansible_default_ipv4.address }} {{ inventory_hostname }}\"\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: \"{{ base_packages[ansible_os_family] | default(base_packages['Debian']) }}\"\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chrony' }}\"\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chronyd' }}\"\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: '0644'\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: \"https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\"\n        dest: /tmp/node_exporter.tar.gz\n        mode: '0644'\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: '0755'\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'kernel.dmesg_restrict', value: '1' }\n        - { key: 'kernel.kptr_restrict', value: '2' }\n        - { key: 'kernel.yama.ptrace_scope', value: '1' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check\"\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF\n```\n\n## Advanced Role Development\n\n### Comprehensive NGINX Role\n```bash\n# Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n\n- name: Install NGINX\n  include_tasks: \"install-{{ ansible_os_family }}.yml\"\n\n- name: Create NGINX directories\n  file:\n    path: \"{{ item }}\"\n    state: directory\n    owner: root\n    group: root\n    mode: '0755'\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: 'nginx -t -c %s'\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    backup: yes\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: '0644'\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat > roles/nginx/tasks/install-Debian.yml <<EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: \"deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx\"\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat > roles/nginx/tasks/install-RedHat.yml <<EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: \"https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/\"\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat > roles/nginx/vars/main.yml <<EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - \"add_header X-Frame-Options SAMEORIGIN always;\"\n  - \"add_header X-Content-Type-Options nosniff always;\"\n  - \"add_header X-XSS-Protection '1; mode=block' always;\"\n  - \"add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains' always;\"\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: \"_\"\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat > roles/nginx/templates/nginx.conf.j2 <<EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat > roles/nginx/handlers/main.yml <<EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF\n```\n\n## Security and Compliance\n\n### Ansible Security Scanner Integration\n```bash\n# Create security scanning playbook\ncat > playbooks/security-scan.yml <<EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: \"/tmp/security-scans\"\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: \"{{ scan_results_dir }}\"\n        state: directory\n        mode: '0755'\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: \"https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip\"\n        dest: \"/tmp/cis-benchmark.zip\"\n        mode: '0644'\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh > {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: \"{{ lynis_result.stdout }}\"\n        dest: \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        mode: '0644'\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == \"Debian\"\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [\"RedHat\", \"Debian\"]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: \"{{ item }}\"\n        dest: \"./security-reports/{{ inventory_hostname }}/\"\n        flat: yes\n      loop:\n        - \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html\"\n        - \"{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json\"\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: \"{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt\"\n        mode: '0644'\nEOF\n```\n\n### Ansible AWX/Tower Integration\n```bash\n# Install Ansible AWX (open source)\ncat > playbooks/install-awx.yml <<EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: \"{{ vault_awx_admin_password }}\"\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: '0644'\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: \"http://localhost:80/api/v2/ping/\"\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: \"http://localhost:80/api/v2/organizations/\"\n        method: POST\n        user: \"{{ awx_admin_user }}\"\n        password: \"{{ awx_admin_password }}\"\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: \"Production\"\n          description: \"Production environment organization\"\n        status_code: [200, 201, 409]\nEOF\n```\n\n## Multi-Cloud Automation\n\n### AWS Infrastructure Automation\n```bash\ncat > playbooks/aws-infrastructure.yml <<EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: \"{{ aws_region | default('us-west-2') }}\"\n    vpc_cidr: \"{{ vpc_cidr | default('10.0.0.0/16') }}\"\n    environment: \"{{ environment | default('production') }}\"\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          \"tag:Name\": \"{{ environment }}-vpc\"\n        region: \"{{ aws_region }}\"\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: \"{{ environment }}-vpc\"\n        cidr_block: \"{{ vpc_cidr }}\"\n        region: \"{{ aws_region }}\"\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: \"{{ environment }}\"\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: \"{{ environment }}-web-sg\"\n        description: \"Security group for web servers\"\n        vpc_id: \"{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}\"\n        region: \"{{ aws_region }}\"\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: \"HTTP and HTTPS access\"\n          - proto: tcp\n            ports:\n              - 22\n            group_id: \"{{ environment }}-bastion-sg\"\n            rule_desc: \"SSH from bastion\"\n        tags:\n          Environment: \"{{ environment }}\"\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: \"{{ environment }}-web-{{ item }}\"\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: \"{{ ec2_key_name }}\"\n        vpc_subnet_id: \"{{ web_subnet_id }}\"\n        security_groups:\n          - \"{{ environment }}-web-sg\"\n        region: \"{{ aws_region }}\"\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: \"{{ environment }}\"\n          Role: webserver\n          Ansible: managed\n      loop: \"{{ range(1, web_server_count + 1) | list }}\"\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: \"{{ item.instances[0].tags.Name }}\"\n        hostname: \"{{ item.instances[0].public_ip_address }}\"\n        groups: webservers\n        ansible_ssh_private_key_file: \"~/.ssh/{{ ec2_key_name }}.pem\"\n        ansible_user: ec2-user\n      loop: \"{{ web_instances.results }}\"\n      changed_when: false\nEOF\n```\n\n### Kubernetes Cluster Management\n```bash\ncat > playbooks/k8s-cluster-management.yml <<EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: \"1.28.2\"\n    containerd_version: \"1.6.24\"\n    cni_version: \"1.3.0\"\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb >= 1700\n          - ansible_processor_cores >= 2\n        fail_msg: \"System doesn't meet minimum requirements\"\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: \"{{ item }}\"\n      loop: \"{{ groups['k8s_all'] }}\"\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: \"{{ containerd_version }}\"\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: \"{{ k8s_version }}\"\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: \"{{ ansible_env.HOME }}/.kube\"\n        state: directory\n        mode: '0755'\n\n    - name: Copy admin.conf to user's kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: \"{{ ansible_env.HOME }}/.kube/config\"\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n        mode: '0644'\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Join worker nodes to cluster\n      shell: \"{{ hostvars[groups['k8s_masters'][0]]['join_command'].stdout }}\"\n      when: inventory_hostname in groups['k8s_workers']\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n      register: cluster_status\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups['k8s_masters'][0]\nEOF\n```\n\n## Performance Optimization and Scaling\n\n### Parallel Execution Strategies\n```bash\n# Create high-performance playbook configuration\ncat > playbooks/high-performance-deployment.yml <<EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: \"30%\"   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk '{print $(NF-2)}' | sed 's/,//'\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float > 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: \"*\"\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dest }}\"\n        mode: \"{{ item.mode | default('0644') }}\"\n        backup: yes\n      loop:\n        - { src: \"nginx.conf.j2\", dest: \"/etc/nginx/nginx.conf\" }\n        - { src: \"mysql.cnf.j2\", dest: \"/etc/mysql/my.cnf\" }\n        - { src: \"redis.conf.j2\", dest: \"/etc/redis/redis.conf\" }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: \"{{ item.ansible_job_id }}\"\n      loop: \"{{ config_deployment.results }}\"\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: \"{{ item }}\"\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: \"restart all services\"\nEOF\n\n# Performance monitoring playbook\ncat > playbooks/performance-monitoring.yml <<EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: \"{{ monitoring_tools }}\"\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Enable system statistics collection\n      service:\n        name: \"{{ 'sysstat' if ansible_os_family == 'Debian' else 'sysstat' }}\"\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: '0755'\n\n    - name: Schedule performance monitoring\n      cron:\n        name: \"Performance monitoring\"\n        minute: \"*/5\"\n        job: \"/usr/local/bin/performance-monitor.sh\"\n        user: root\nEOF\n```\n\n## Testing and Validation\n\n### Molecule Testing Framework\n```bash\n# Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat > molecule/default/molecule.yml <<EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat > molecule/default/converge.yml <<EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: \"Include nginx role\"\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat > molecule/default/verify.yml <<EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: \"NGINX is not responding correctly\"\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test\n```\n\n### Ansible Lint and Security Scanning\n```bash\n# Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat > .ansible-lint <<EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: ['true', 'false', 'yes', 'no']\nEOF\n\n# Create security-focused playbook linting\ncat > .yamllint <<EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .\n```\n\n## Backup and Disaster Recovery\n\n### Comprehensive Backup Automation\n```bash\ncat > playbooks/backup-automation.yml <<EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: \"0 2 * * *\"\n      files: \"0 3 * * *\"\n      configs: \"0 4 * * *\"\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: \"{{ backup_root }}/{{ item }}\"\n        state: directory\n        mode: '0755'\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: '0755'\n      when: \"'dbservers' in group_names\"\n\n    - name: Schedule database backups\n      cron:\n        name: \"MySQL backup\"\n        minute: \"0\"\n        hour: \"2\"\n        job: \"/usr/local/bin/mysql-backup.sh\"\n        user: root\n      when: \"'dbservers' in group_names\"\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: '0755'\n\n    - name: Schedule file backups\n      cron:\n        name: \"File system backup\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/local/bin/file-backup.sh\"\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: \"{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz\"\n        mode: '0600'\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: \"{{ backup_root }}/\"\n        dest: \"backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/\"\n        delete: yes\n        rsync_opts:\n          - \"--exclude=*.tmp\"\n          - \"--compress\"\n          - \"--archive\"\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: \"{{ backup_root }}\"\n        age: \"{{ backup_retention_days }}d\"\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: \"{{ item.path }}\"\n        state: absent\n      loop: \"{{ old_backups.files }}\"\nEOF\n```\n\n## Verification and Monitoring\n\n### Cross-Platform System Verification\n```bash\n# Create comprehensive verification playbook\ncat > playbooks/system-verification.yml <<EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - \"ansible_facts.services[item.service + '.service'].state == 'running'\"\n        fail_msg: \"Service {{ item.service }} is not running\"\n        success_msg: \"Service {{ item.service }} is healthy\"\n      loop: \"{{ health_checks }}\"\n      when: \"item.service + '.service' in ansible_facts.services\"\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: \"{{ item.host }}\"\n        port: \"{{ item.port }}\"\n        timeout: 5\n      loop:\n        - { host: \"8.8.8.8\", port: 53 }\n        - { host: \"1.1.1.1\", port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk '$5 > \"85%\" {print $0}'\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != \"\"\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: \"WARNING: Memory usage is {{ memory_usage.stdout }}%\"\n      when: memory_usage.stdout | int > 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep \"Failed password\" /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw >/dev/null 2>&1; then\n          ufw status\n        elif command -v firewall-cmd >/dev/null 2>&1; then\n          firewall-cmd --state\n        else\n          echo \"No supported firewall found\"\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        mode: '0644'\n\n    - name: Fetch health reports\n      fetch:\n        src: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        dest: \"./reports/\"\n        flat: yes\nEOF\n```\n\n### Continuous Compliance Monitoring\n```bash\ncat > playbooks/compliance-monitoring.yml <<EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: \"{{ 'auditd' if ansible_os_family == 'RedHat' else 'auditd' }}\"\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo \"CIS-CAT not installed, skipping\"\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check | mail -s 'AIDE Report' security@example.com\"\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF\n```\n\n## CI/CD Integration\n\n### Jenkins Pipeline Integration\n```bash\n# Create Jenkinsfile for Ansible automation\ncat > Jenkinsfile <<EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = 'ansible.cfg'\n        ANSIBLE_HOST_KEY_CHECKING = 'False'\n    }\n    \n    stages {\n        stage('Lint') {\n            steps {\n                sh 'ansible-lint playbooks/'\n                sh 'yamllint .'\n            }\n        }\n        \n        stage('Syntax Check') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --syntax-check'\n            }\n        }\n        \n        stage('Dry Run') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --check --diff'\n            }\n        }\n        \n        stage('Deploy to Staging') {\n            when {\n                branch 'develop'\n            }\n            steps {\n                sh 'ansible-playbook -i inventories/staging playbooks/site.yml'\n            }\n        }\n        \n        stage('Deploy to Production') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input 'Deploy to Production?'\n                sh 'ansible-playbook -i inventories/production playbooks/site.yml'\n            }\n        }\n        \n        stage('Verify Deployment') {\n            steps {\n                sh 'ansible-playbook playbooks/system-verification.yml'\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'reports',\n                reportFiles: '*.html',\n                reportName: 'Ansible Report'\n            ])\n        }\n        failure {\n            emailext (\n                subject: \"Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Something is wrong with ${env.BUILD_URL}\",\n                to: \"${env.DEFAULT_RECIPIENTS}\"\n            )\n        }\n    }\n}\nEOF\n```\n\n### GitLab CI Integration\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: \"False\"\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"develop\"'\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a \"uptime\"\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=\"debug=true\" --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a \"path=/tmp/test state=touch\" --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=\"specific task name\"\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a \"var=hostvars\"\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name \"*.yml\" -exec ansible-playbook {} --syntax-check \\;\n```\n\n### Advanced Debugging\n```bash\n# Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=\"profile_tasks_sort_order=none\"\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=\"ansible_python_interpreter=/usr/bin/python3\"\n\n# Network debugging\nansible all -m command -a \"ss -tulpn\"\nansible all -m command -a \"netstat -rn\"\n\n# Process debugging\nansible all -m command -a \"ps aux --sort=-%mem | head -10\"\n\n# Disk usage analysis\nansible all -m command -a \"df -h\"\nansible all -m command -a \"du -sh /var/log/*\"\n\n# Service debugging\nansible all -m systemd -a \"name=nginx\" --become\nansible all -m command -a \"systemctl status nginx\" --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=\"debug_vars=true\" --tags debug_vars\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices Guide](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Security Best Practices](https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices)\n- [Ansible Molecule Testing](https://molecule.readthedocs.io/)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"ansible-installation-guide\" class=\"mobile-header\">Ansible Installation Guide</h1>\n<p class=\"mobile-paragraph\">Agentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux control machine (any modern distribution)</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine</li>\n<li class=\"mobile-list-item\">SSH access to target hosts</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target hosts</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for large infrastructures</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho &#039;source ~/ansible-venv/bin/activate&#039; &gt;&gt; ~/.bashrc\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho &#039;alias ansible=&quot;ansible-docker ansible&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;alias ansible-playbook=&quot;ansible-docker ansible-playbook&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"project-structure-and-configuration\" class=\"mobile-header\">Project Structure and Configuration</h2>\n<h3 id=\"professional-project-structure\" class=\"mobile-header\">Professional Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-inventory-management\" class=\"mobile-header\">Advanced Inventory Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production inventory with groups and variables\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\n        mysql_replication_user: &quot;{{ vault_mysql_replication_user }}&quot;\n        mysql_replication_password: &quot;{{ vault_mysql_replication_password }}&quot;\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: &quot;{{ vault_haproxy_stats_password }}&quot;\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: &quot;0 2 * * *&quot;\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: &quot;0 1 * * *&quot;\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat &gt; inventories/production/aws_ec2.yml &lt;&lt;EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: &quot;&#039;web&#039; in tags.Role&quot;\n  databases: &quot;&#039;db&#039; in tags.Role&quot;\n  loadbalancers: &quot;&#039;lb&#039; in tags.Role&quot;\n  \n  # Group by environment\n  production: &quot;tags.Environment == &#039;production&#039;&quot;\n  staging: &quot;tags.Environment == &#039;staging&#039;&quot;\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == &quot;us-west-2a&quot;\n  us_west_2b: ec2_placement_availability_zone == &quot;us-west-2b&quot;\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-security\" class=\"mobile-header\">Ansible Vault Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create strong vault password\nopenssl rand -base64 32 &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat &gt; group_vars/all/vars.yml &lt;&lt;EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\ngrafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: &quot;{{ vault_ssl_private_key }}&quot;\n\n# Security settings\nansible_ssh_common_args: &#039;-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts&#039;\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"comprehensive-playbooks\" class=\"mobile-header\">Comprehensive Playbooks</h2>\n<h3 id=\"system-hardening-playbook\" class=\"mobile-header\">System Hardening Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-hardening.yml &lt;&lt;EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [&quot;Debian&quot;, &quot;RedHat&quot;]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: &quot;*&quot;\n        state: latest\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: &quot;{{ security_packages }}&quot;\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: &#039;ansible ALL=(ALL) NOPASSWD:ALL&#039;\n        create: yes\n        mode: &#039;0440&#039;\n        validate: &#039;visudo -cf %s&#039;\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n        - { regexp: &#039;^#?MaxAuthTries&#039;, line: &#039;MaxAuthTries 3&#039; }\n        - { regexp: &#039;^#?ClientAliveInterval&#039;, line: &#039;ClientAliveInterval 300&#039; }\n        - { regexp: &#039;^#?ClientAliveCountMax&#039;, line: &#039;ClientAliveCountMax 0&#039; }\n        - { regexp: &#039;^#?Protocol&#039;, line: &#039;Protocol 2&#039; }\n        - { regexp: &#039;^#?LogLevel&#039;, line: &#039;LogLevel VERBOSE&#039; }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: &#039;SSH access&#039;\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: &quot;{{ item }}&quot;\n        enabled: no\n        state: stopped\n      loop: &quot;{{ disabled_services }}&quot;\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        mode: &quot;{{ item.mode }}&quot;\n        owner: root\n        group: root\n      loop:\n        - { path: &#039;/etc/passwd&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/shadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/group&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/gshadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/ssh/sshd_config&#039;, mode: &#039;0600&#039; }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;net.ipv4.ip_forward&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.randomize_va_space&#039;, value: &#039;2&#039; }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-deployment-playbook\" class=\"mobile-header\">Application Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/web-application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: &quot;25%&quot;  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: &quot;{{ app_version | default(&#039;latest&#039;) }}&quot;\n    app_port: 3000\n    nginx_workers: &quot;{{ ansible_processor_cores }}&quot;\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: &quot;Server is in maintenance mode&quot;\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: &quot;{{ item }}&quot;\n        state: directory\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0755&#039;\n      loop:\n        - &quot;/opt/{{ app_name }}&quot;\n        - &quot;/opt/{{ app_name }}/releases&quot;\n        - &quot;/opt/{{ app_name }}/shared&quot;\n        - &quot;/var/log/{{ app_name }}&quot;\n\n    - name: Download application release\n      get_url:\n        url: &quot;https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        mode: &#039;0644&#039;\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}/releases/&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n        creates: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n\n    - name: Create symlink to current release\n      file:\n        src: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n        dest: &quot;/opt/{{ app_name }}/current&quot;\n        state: link\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: &quot;templates/{{ app_name }}.conf.j2&quot;\n        dest: &quot;/opt/{{ app_name }}/shared/{{ app_name }}.conf&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0640&#039;\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: &quot;templates/{{ app_name }}.service.j2&quot;\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: &quot;http://localhost:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: &quot;http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: &quot;/var/log/{{ app_name }}/deployments.log&quot;\n        line: &quot;{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}&quot;\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-as-code-playbook\" class=\"mobile-header\">Infrastructure as Code Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/infrastructure-provisioning.yml &lt;&lt;EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: &quot;{{ inventory_hostname }}&quot;\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: &quot;{{ ansible_default_ipv4.address }} {{ inventory_hostname }}&quot;\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: &quot;{{ base_packages[ansible_os_family] | default(base_packages[&#039;Debian&#039;]) }}&quot;\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chrony&#039; }}&quot;\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chronyd&#039; }}&quot;\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: &#039;0644&#039;\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: &quot;https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz&quot;\n        dest: /tmp/node_exporter.tar.gz\n        mode: &#039;0644&#039;\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;kernel.dmesg_restrict&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.kptr_restrict&#039;, value: &#039;2&#039; }\n        - { key: &#039;kernel.yama.ptrace_scope&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check&quot;\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-role-development\" class=\"mobile-header\">Advanced Role Development</h2>\n<h3 id=\"comprehensive-nginx-role\" class=\"mobile-header\">Comprehensive NGINX Role</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: &quot;{{ ansible_os_family }}.yml&quot;\n\n- name: Install NGINX\n  include_tasks: &quot;install-{{ ansible_os_family }}.yml&quot;\n\n- name: Create NGINX directories\n  file:\n    path: &quot;{{ item }}&quot;\n    state: directory\n    owner: root\n    group: root\n    mode: &#039;0755&#039;\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: &#039;nginx -t -c %s&#039;\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    backup: yes\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: &#039;0644&#039;\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat &gt; roles/nginx/tasks/install-Debian.yml &lt;&lt;EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: &quot;deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx&quot;\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat &gt; roles/nginx/tasks/install-RedHat.yml &lt;&lt;EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: &quot;https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/&quot;\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat &gt; roles/nginx/vars/main.yml &lt;&lt;EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - &quot;add_header X-Frame-Options SAMEORIGIN always;&quot;\n  - &quot;add_header X-Content-Type-Options nosniff always;&quot;\n  - &quot;add_header X-XSS-Protection &#039;1; mode=block&#039; always;&quot;\n  - &quot;add_header Strict-Transport-Security &#039;max-age=31536000; includeSubDomains&#039; always;&quot;\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: &quot;_&quot;\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat &gt; roles/nginx/templates/nginx.conf.j2 &lt;&lt;EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main &#039;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#039;\n                    &#039;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#039;\n                    &#039;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#039;;\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat &gt; roles/nginx/handlers/main.yml &lt;&lt;EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-and-compliance\" class=\"mobile-header\">Security and Compliance</h2>\n<h3 id=\"ansible-security-scanner-integration\" class=\"mobile-header\">Ansible Security Scanner Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security scanning playbook\ncat &gt; playbooks/security-scan.yml &lt;&lt;EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: &quot;/tmp/security-scans&quot;\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: &quot;{{ scan_results_dir }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: &quot;https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip&quot;\n        dest: &quot;/tmp/cis-benchmark.zip&quot;\n        mode: &#039;0644&#039;\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh &gt; {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: &quot;{{ lynis_result.stdout }}&quot;\n        dest: &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [&quot;RedHat&quot;, &quot;Debian&quot;]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: &quot;{{ item }}&quot;\n        dest: &quot;./security-reports/{{ inventory_hostname }}/&quot;\n        flat: yes\n      loop:\n        - &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html&quot;\n        - &quot;{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json&quot;\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: &quot;{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-awxtower-integration\" class=\"mobile-header\">Ansible AWX/Tower Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible AWX (open source)\ncat &gt; playbooks/install-awx.yml &lt;&lt;EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: &quot;{{ vault_awx_admin_password }}&quot;\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: &#039;0644&#039;\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: &quot;http://localhost:80/api/v2/ping/&quot;\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: &quot;http://localhost:80/api/v2/organizations/&quot;\n        method: POST\n        user: &quot;{{ awx_admin_user }}&quot;\n        password: &quot;{{ awx_admin_password }}&quot;\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: &quot;Production&quot;\n          description: &quot;Production environment organization&quot;\n        status_code: [200, 201, 409]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"multi-cloud-automation\" class=\"mobile-header\">Multi-Cloud Automation</h2>\n<h3 id=\"aws-infrastructure-automation\" class=\"mobile-header\">AWS Infrastructure Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/aws-infrastructure.yml &lt;&lt;EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: &quot;{{ aws_region | default(&#039;us-west-2&#039;) }}&quot;\n    vpc_cidr: &quot;{{ vpc_cidr | default(&#039;10.0.0.0/16&#039;) }}&quot;\n    environment: &quot;{{ environment | default(&#039;production&#039;) }}&quot;\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          &quot;tag:Name&quot;: &quot;{{ environment }}-vpc&quot;\n        region: &quot;{{ aws_region }}&quot;\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: &quot;{{ environment }}-vpc&quot;\n        cidr_block: &quot;{{ vpc_cidr }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: &quot;{{ environment }}-web-sg&quot;\n        description: &quot;Security group for web servers&quot;\n        vpc_id: &quot;{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: &quot;HTTP and HTTPS access&quot;\n          - proto: tcp\n            ports:\n              - 22\n            group_id: &quot;{{ environment }}-bastion-sg&quot;\n            rule_desc: &quot;SSH from bastion&quot;\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: &quot;{{ environment }}-web-{{ item }}&quot;\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: &quot;{{ ec2_key_name }}&quot;\n        vpc_subnet_id: &quot;{{ web_subnet_id }}&quot;\n        security_groups:\n          - &quot;{{ environment }}-web-sg&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          Role: webserver\n          Ansible: managed\n      loop: &quot;{{ range(1, web_server_count + 1) | list }}&quot;\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: &quot;{{ item.instances[0].tags.Name }}&quot;\n        hostname: &quot;{{ item.instances[0].public_ip_address }}&quot;\n        groups: webservers\n        ansible_ssh_private_key_file: &quot;~/.ssh/{{ ec2_key_name }}.pem&quot;\n        ansible_user: ec2-user\n      loop: &quot;{{ web_instances.results }}&quot;\n      changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-cluster-management\" class=\"mobile-header\">Kubernetes Cluster Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/k8s-cluster-management.yml &lt;&lt;EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: &quot;1.28.2&quot;\n    containerd_version: &quot;1.6.24&quot;\n    cni_version: &quot;1.3.0&quot;\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb &gt;= 1700\n          - ansible_processor_cores &gt;= 2\n        fail_msg: &quot;System doesn&#039;t meet minimum requirements&quot;\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: &quot;{{ item }}&quot;\n      loop: &quot;{{ groups[&#039;k8s_all&#039;] }}&quot;\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: &quot;{{ containerd_version }}&quot;\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: &quot;{{ k8s_version }}&quot;\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: &quot;{{ ansible_env.HOME }}/.kube&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    - name: Copy admin.conf to user&#039;s kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n        owner: &quot;{{ ansible_user }}&quot;\n        group: &quot;{{ ansible_user }}&quot;\n        mode: &#039;0644&#039;\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Join worker nodes to cluster\n      shell: &quot;{{ hostvars[groups[&#039;k8s_masters&#039;][0]][&#039;join_command&#039;].stdout }}&quot;\n      when: inventory_hostname in groups[&#039;k8s_workers&#039;]\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n      register: cluster_status\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization-and-scaling\" class=\"mobile-header\">Performance Optimization and Scaling</h2>\n<h3 id=\"parallel-execution-strategies\" class=\"mobile-header\">Parallel Execution Strategies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create high-performance playbook configuration\ncat &gt; playbooks/high-performance-deployment.yml &lt;&lt;EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: &quot;30%&quot;   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk &#039;{print $(NF-2)}&#039; | sed &#039;s/,//&#039;\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float &gt; 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: &quot;*&quot;\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: &quot;{{ item.src }}&quot;\n        dest: &quot;{{ item.dest }}&quot;\n        mode: &quot;{{ item.mode | default(&#039;0644&#039;) }}&quot;\n        backup: yes\n      loop:\n        - { src: &quot;nginx.conf.j2&quot;, dest: &quot;/etc/nginx/nginx.conf&quot; }\n        - { src: &quot;mysql.cnf.j2&quot;, dest: &quot;/etc/mysql/my.cnf&quot; }\n        - { src: &quot;redis.conf.j2&quot;, dest: &quot;/etc/redis/redis.conf&quot; }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: &quot;{{ item.ansible_job_id }}&quot;\n      loop: &quot;{{ config_deployment.results }}&quot;\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: &quot;{{ item }}&quot;\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: &quot;restart all services&quot;\nEOF\n\n# Performance monitoring playbook\ncat &gt; playbooks/performance-monitoring.yml &lt;&lt;EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: &quot;{{ monitoring_tools }}&quot;\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Enable system statistics collection\n      service:\n        name: &quot;{{ &#039;sysstat&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sysstat&#039; }}&quot;\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule performance monitoring\n      cron:\n        name: &quot;Performance monitoring&quot;\n        minute: &quot;*/5&quot;\n        job: &quot;/usr/local/bin/performance-monitor.sh&quot;\n        user: root\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"testing-and-validation\" class=\"mobile-header\">Testing and Validation</h2>\n<h3 id=\"molecule-testing-framework\" class=\"mobile-header\">Molecule Testing Framework</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat &gt; molecule/default/molecule.yml &lt;&lt;EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat &gt; molecule/default/converge.yml &lt;&lt;EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: &quot;Include nginx role&quot;\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat &gt; molecule/default/verify.yml &lt;&lt;EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: &quot;NGINX is not responding correctly&quot;\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-lint-and-security-scanning\" class=\"mobile-header\">Ansible Lint and Security Scanning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat &gt; .ansible-lint &lt;&lt;EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: [&#039;true&#039;, &#039;false&#039;, &#039;yes&#039;, &#039;no&#039;]\nEOF\n\n# Create security-focused playbook linting\ncat &gt; .yamllint &lt;&lt;EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"comprehensive-backup-automation\" class=\"mobile-header\">Comprehensive Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/backup-automation.yml &lt;&lt;EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: &quot;0 2 * * *&quot;\n      files: &quot;0 3 * * *&quot;\n      configs: &quot;0 4 * * *&quot;\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: &quot;{{ backup_root }}/{{ item }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: &#039;0755&#039;\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    - name: Schedule database backups\n      cron:\n        name: &quot;MySQL backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;2&quot;\n        job: &quot;/usr/local/bin/mysql-backup.sh&quot;\n        user: root\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule file backups\n      cron:\n        name: &quot;File system backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/local/bin/file-backup.sh&quot;\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: &quot;{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz&quot;\n        mode: &#039;0600&#039;\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: &quot;{{ backup_root }}/&quot;\n        dest: &quot;backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/&quot;\n        delete: yes\n        rsync_opts:\n          - &quot;--exclude=*.tmp&quot;\n          - &quot;--compress&quot;\n          - &quot;--archive&quot;\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: &quot;{{ backup_root }}&quot;\n        age: &quot;{{ backup_retention_days }}d&quot;\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        state: absent\n      loop: &quot;{{ old_backups.files }}&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-monitoring\" class=\"mobile-header\">Verification and Monitoring</h2>\n<h3 id=\"cross-platform-system-verification\" class=\"mobile-header\">Cross-Platform System Verification</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive verification playbook\ncat &gt; playbooks/system-verification.yml &lt;&lt;EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - &quot;ansible_facts.services[item.service + &#039;.service&#039;].state == &#039;running&#039;&quot;\n        fail_msg: &quot;Service {{ item.service }} is not running&quot;\n        success_msg: &quot;Service {{ item.service }} is healthy&quot;\n      loop: &quot;{{ health_checks }}&quot;\n      when: &quot;item.service + &#039;.service&#039; in ansible_facts.services&quot;\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: &quot;{{ item.host }}&quot;\n        port: &quot;{{ item.port }}&quot;\n        timeout: 5\n      loop:\n        - { host: &quot;8.8.8.8&quot;, port: 53 }\n        - { host: &quot;1.1.1.1&quot;, port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk &#039;$5 &gt; &quot;85%&quot; {print $0}&#039;\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != &quot;&quot;\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk &#039;{printf &quot;%.0f&quot;, $3/$2 * 100.0}&#039;\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: &quot;WARNING: Memory usage is {{ memory_usage.stdout }}%&quot;\n      when: memory_usage.stdout | int &gt; 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep &quot;Failed password&quot; /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n          ufw status\n        elif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n          firewall-cmd --state\n        else\n          echo &quot;No supported firewall found&quot;\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    - name: Fetch health reports\n      fetch:\n        src: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        dest: &quot;./reports/&quot;\n        flat: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"continuous-compliance-monitoring\" class=\"mobile-header\">Continuous Compliance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/compliance-monitoring.yml &lt;&lt;EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: &quot;{{ &#039;auditd&#039; if ansible_os_family == &#039;RedHat&#039; else &#039;auditd&#039; }}&quot;\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo &quot;CIS-CAT not installed, skipping&quot;\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check | mail -s &#039;AIDE Report&#039; security@example.com&quot;\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-integration\" class=\"mobile-header\">CI/CD Integration</h2>\n<h3 id=\"jenkins-pipeline-integration\" class=\"mobile-header\">Jenkins Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkinsfile for Ansible automation\ncat &gt; Jenkinsfile &lt;&lt;EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = &#039;ansible.cfg&#039;\n        ANSIBLE_HOST_KEY_CHECKING = &#039;False&#039;\n    }\n    \n    stages {\n        stage(&#039;Lint&#039;) {\n            steps {\n                sh &#039;ansible-lint playbooks/&#039;\n                sh &#039;yamllint .&#039;\n            }\n        }\n        \n        stage(&#039;Syntax Check&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --syntax-check&#039;\n            }\n        }\n        \n        stage(&#039;Dry Run&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --check --diff&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Staging&#039;) {\n            when {\n                branch &#039;develop&#039;\n            }\n            steps {\n                sh &#039;ansible-playbook -i inventories/staging playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Production&#039;) {\n            when {\n                branch &#039;main&#039;\n            }\n            steps {\n                input &#039;Deploy to Production?&#039;\n                sh &#039;ansible-playbook -i inventories/production playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Verify Deployment&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/system-verification.yml&#039;\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: &#039;logs/*.log&#039;, allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: &#039;reports&#039;,\n                reportFiles: &#039;*.html&#039;,\n                reportName: &#039;Ansible Report&#039;\n            ])\n        }\n        failure {\n            emailext (\n                subject: &quot;Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Something is wrong with ${env.BUILD_URL}&quot;,\n                to: &quot;${env.DEFAULT_RECIPIENTS}&quot;\n            )\n        }\n    }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: &quot;False&quot;\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;develop&quot;&#039;\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a &quot;uptime&quot;\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug=true&quot; --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a &quot;path=/tmp/test state=touch&quot; --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=&quot;specific task name&quot;\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a &quot;var=hostvars&quot;\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name &quot;*.yml&quot; -exec ansible-playbook {} --syntax-check \\;</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=&quot;profile_tasks_sort_order=none&quot;\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=&quot;ansible_python_interpreter=/usr/bin/python3&quot;\n\n# Network debugging\nansible all -m command -a &quot;ss -tulpn&quot;\nansible all -m command -a &quot;netstat -rn&quot;\n\n# Process debugging\nansible all -m command -a &quot;ps aux --sort=-%mem | head -10&quot;\n\n# Disk usage analysis\nansible all -m command -a &quot;df -h&quot;\nansible all -m command -a &quot;du -sh /var/log/*&quot;\n\n# Service debugging\nansible all -m systemd -a &quot;name=nginx&quot; --become\nansible all -m command -a &quot;systemctl status nginx&quot; --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug_vars=true&quot; --tags debug_vars</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://molecule.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Molecule Testing</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"31 min","wordCount":6191,"lastBuilt":"2025-09-14T04:15:49.208Z"}]},"__N_SSG":true}