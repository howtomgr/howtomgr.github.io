{"pageProps":{"guide":{"name":"wireguard","displayName":"Wireguard","slug":"wireguard","description":"Repo for wireguard","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wireguard","updatedAt":"2025-09-14T01:31:22Z","createdAt":"2025-09-08T03:18:17Z","readmeRaw":"# WireGuard Installation Guide\n\nModern, fast, and secure VPN solution using state-of-the-art cryptography. Essential tool for secure remote access, site-to-site connectivity, and privacy protection with minimal configuration complexity.\n\n## Prerequisites\n\n- Linux system with kernel 3.10+ (any modern distribution)\n- Root or sudo access\n- Static IP address or dynamic DNS\n- UDP port 51820 available (default, configurable)\n- Basic understanding of networking concepts\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install WireGuard\nsudo apt install -y wireguard wireguard-tools\n\n# For older Ubuntu versions (18.04)\nsudo add-apt-repository ppa:wireguard/wireguard\nsudo apt update\nsudo apt install -y wireguard\n\n# Install additional tools\nsudo apt install -y qrencode resolvconf\n\n# Verify installation\nwg --version\nmodprobe wireguard && echo \"WireGuard module loaded successfully\"\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install WireGuard\nsudo yum install -y wireguard-tools\n\n# For CentOS 7 (requires additional steps)\nsudo yum install -y yum-plugin-elrepo\nsudo yum install -y kmod-wireguard wireguard-tools\n\n# Install additional tools\nsudo yum install -y qrencode\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n### Fedora\n```bash\n# Install WireGuard (included in kernel 5.6+)\nsudo dnf install -y wireguard-tools qrencode\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n### Arch Linux\n```bash\n# Install WireGuard\nsudo pacman -Syu wireguard-tools qrencode\n\n# Load WireGuard module\nsudo modprobe wireguard\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Server Configuration\n\n### Generate Keys and Create Server Config\n```bash\n# Create WireGuard directory\nsudo mkdir -p /etc/wireguard\nsudo chmod 700 /etc/wireguard\n\n# Generate server keys\ncd /etc/wireguard\nwg genkey | sudo tee server_private.key | wg pubkey | sudo tee server_public.key\nsudo chmod 600 server_private.key\n\n# Create server configuration\nsudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF\n[Interface]\n# Server configuration\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24, fd00::1/64\nListenPort = 51820\nSaveConfig = true\n\n# Network configuration\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# DNS servers (optional)\nDNS = 1.1.1.1, 8.8.8.8\n\n# Client configurations will be added here automatically\n# [Peer] sections for each client\nEOF\n\nsudo chmod 600 /etc/wireguard/wg0.conf\n```\n\n### Advanced Server Configuration\n```bash\n# Create production server configuration with security\nsudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF\n[Interface]\n# Server identity\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24\nListenPort = 51820\nSaveConfig = false  # Disable for security in production\n\n# Network forwarding and NAT\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostUp = ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nPostDown = ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Security: Block private networks (adjust as needed)\nPostUp = iptables -I FORWARD -s 10.0.0.0/8 -d 192.168.1.0/24 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/8 -d 172.16.0.0/12 -j DROP\n\n# DNS configuration\nDNS = 10.0.0.1  # Use Pi-hole or local DNS\n\n# Example client configurations\n[Peer]\n# Client 1 - Admin laptop\nPublicKey = client1_public_key_here\nAllowedIPs = 10.0.0.2/32\nPersistentKeepalive = 25\n\n[Peer]  \n# Client 2 - Mobile device\nPublicKey = client2_public_key_here\nAllowedIPs = 10.0.0.3/32\nPersistentKeepalive = 25\n\n[Peer]\n# Client 3 - Site-to-site (branch office)\nPublicKey = site_public_key_here\nAllowedIPs = 10.0.0.0/24, 192.168.100.0/24\nEndpoint = branch.example.com:51820\nPersistentKeepalive = 25\nEOF\n```\n\n## Client Configuration\n\n### Generate Client Configurations\n```bash\n# Create client configuration generator script\nsudo tee /usr/local/bin/wg-add-client.sh > /dev/null <<'EOF'\n#!/bin/bash\nCLIENT_NAME=\"${1}\"\nSERVER_PUBLIC_IP=\"${2:-your-server-public-ip}\"\nSERVER_PUBLIC_KEY=\"$(sudo cat /etc/wireguard/server_public.key)\"\n\nif [ -z \"$CLIENT_NAME\" ]; then\n    echo \"Usage: $0 <client_name> [server_public_ip]\"\n    echo \"Example: $0 laptop1 203.0.113.1\"\n    exit 1\nfi\n\n# Get next available IP\nLAST_IP=$(grep \"AllowedIPs\" /etc/wireguard/wg0.conf | grep -o \"10\\.0\\.0\\.[0-9]*\" | sort -t. -k4 -n | tail -1 | cut -d. -f4)\nNEXT_IP=$((LAST_IP + 1))\nCLIENT_IP=\"10.0.0.${NEXT_IP}/32\"\n\n# Generate client keys\nCLIENT_PRIVATE_KEY=$(wg genkey)\nCLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n\n# Add peer to server configuration\nsudo tee -a /etc/wireguard/wg0.conf > /dev/null <<PEER\n\n[Peer]\n# ${CLIENT_NAME}\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_IP}\nPersistentKeepalive = 25\nPEER\n\n# Generate client configuration\ncat > /tmp/${CLIENT_NAME}.conf <<CLIENT_CONFIG\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_IP}\nDNS = 10.0.0.1, 1.1.1.1\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nEndpoint = ${SERVER_PUBLIC_IP}:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nCLIENT_CONFIG\n\n# Generate QR code for mobile devices\nqrencode -t ansiutf8 < /tmp/${CLIENT_NAME}.conf\n\necho \"Client configuration created: /tmp/${CLIENT_NAME}.conf\"\necho \"Add to server with: sudo wg addconf wg0 <(echo '[Peer]'; echo 'PublicKey = ${CLIENT_PUBLIC_KEY}'; echo 'AllowedIPs = ${CLIENT_IP}')\"\nEOF\n\nsudo chmod +x /usr/local/bin/wg-add-client.sh\n\n# Example: Add a client\n# sudo /usr/local/bin/wg-add-client.sh laptop1 your-server-ip\n```\n\n### Client Examples\n```bash\n# Mobile device configuration\ncat > mobile-client.conf <<EOF\n[Interface]\nPrivateKey = mobile_device_private_key\nAddress = 10.0.0.10/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = server_public_key_here\nEndpoint = vpn.example.com:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nEOF\n\n# Site-to-site configuration (branch office)\ncat > branch-office.conf <<EOF\n[Interface]\nPrivateKey = branch_office_private_key\nAddress = 10.0.0.100/32\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n[Peer]\nPublicKey = server_public_key_here\nEndpoint = vpn.example.com:51820\nAllowedIPs = 10.0.0.0/24, 192.168.1.0/24\nPersistentKeepalive = 25\nEOF\n```\n\n## Service Management and Security\n\n### SystemD Service\n```bash\n# Enable WireGuard interface as systemd service\nsudo systemctl enable wg-quick@wg0\nsudo systemctl start wg-quick@wg0\n\n# Check status\nsudo systemctl status wg-quick@wg0\nsudo wg show\n\n# Alternative: Manual management\nsudo wg-quick up wg0\nsudo wg-quick down wg0\n```\n\n### Firewall Configuration\n```bash\n# Configure UFW for WireGuard\nsudo ufw allow 51820/udp comment 'WireGuard VPN'\nsudo ufw allow from 10.0.0.0/24 comment 'WireGuard clients'\n\n# For internal network access\nsudo ufw allow from 10.0.0.0/24 to 192.168.1.0/24\n\n# Firewalld configuration (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=51820/udp\nsudo firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address=10.0.0.0/24 accept'\nsudo firewall-cmd --reload\n\n# Direct iptables rules\nsudo iptables -A INPUT -p udp --dport 51820 -j ACCEPT\nsudo iptables -A FORWARD -i wg0 -j ACCEPT\nsudo iptables -A FORWARD -o wg0 -j ACCEPT\nsudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n```\n\n### Security Hardening\n```bash\n# Configure advanced security features\nsudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF\n[Interface]\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24\nListenPort = 51820\n\n# Security: Change default port\n# ListenPort = 41194\n\n# DNS security\nDNS = 10.0.0.1  # Use Pi-hole for ad blocking\n\n# Advanced security rules\nPostUp = iptables -A FORWARD -i %i -j ACCEPT\nPostUp = iptables -A FORWARD -o %i -j ACCEPT\nPostUp = iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\n# Block access to local network (security measure)\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.0/24 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 172.16.0.0/12 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 10.0.0.0/8 -j DROP\n\n# Allow specific services only\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.100 -p tcp --dport 22 -j ACCEPT    # SSH to server\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.101 -p tcp --dport 443 -j ACCEPT  # HTTPS to web services\n\nPostDown = iptables -D FORWARD -i %i -j ACCEPT\nPostDown = iptables -D FORWARD -o %i -j ACCEPT\nPostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nEOF\n```\n\n## Management and Automation\n\n### WireGuard Management Script\n```bash\nsudo tee /usr/local/bin/wg-manager.sh > /dev/null <<'EOF'\n#!/bin/bash\n\nINTERFACE=\"wg0\"\nCONFIG_FILE=\"/etc/wireguard/${INTERFACE}.conf\"\nCLIENTS_DIR=\"/etc/wireguard/clients\"\nSERVER_PUBLIC_IP=\"${SERVER_PUBLIC_IP:-$(curl -s ipinfo.io/ip)}\"\nSERVER_PUBLIC_KEY=\"$(sudo cat /etc/wireguard/server_public.key)\"\n\nsudo mkdir -p ${CLIENTS_DIR}\n\ncase \"${1}\" in\n    \"add-client\")\n        CLIENT_NAME=\"${2}\"\n        if [ -z \"$CLIENT_NAME\" ]; then\n            echo \"Usage: $0 add-client <client_name>\"\n            exit 1\n        fi\n        \n        # Generate client keys\n        CLIENT_PRIVATE_KEY=$(wg genkey)\n        CLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n        \n        # Get next available IP\n        LAST_IP=$(grep \"AllowedIPs\" ${CONFIG_FILE} | grep -o \"10\\.0\\.0\\.[0-9]*\" | sort -t. -k4 -n | tail -1 | cut -d. -f4)\n        NEXT_IP=$((LAST_IP + 1))\n        CLIENT_IP=\"10.0.0.${NEXT_IP}\"\n        \n        # Add peer to server\n        sudo wg set ${INTERFACE} peer ${CLIENT_PUBLIC_KEY} allowed-ips ${CLIENT_IP}/32\n        \n        # Save to config\n        sudo tee -a ${CONFIG_FILE} > /dev/null <<PEER\n\n[Peer]\n# ${CLIENT_NAME} - $(date)\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_IP}/32\nPersistentKeepalive = 25\nPEER\n        \n        # Generate client config\n        cat > ${CLIENTS_DIR}/${CLIENT_NAME}.conf <<CLIENT_CONFIG\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_IP}/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nEndpoint = ${SERVER_PUBLIC_IP}:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nCLIENT_CONFIG\n        \n        # Generate QR code\n        echo \"Client ${CLIENT_NAME} configuration:\"\n        qrencode -t ansiutf8 < ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n        echo \"Configuration file: ${CLIENTS_DIR}/${CLIENT_NAME}.conf\"\n        ;;\n        \n    \"remove-client\")\n        CLIENT_NAME=\"${2}\"\n        if [ -z \"$CLIENT_NAME\" ]; then\n            echo \"Usage: $0 remove-client <client_name>\"\n            exit 1\n        fi\n        \n        CLIENT_PUBLIC_KEY=$(grep -A 3 \"# ${CLIENT_NAME}\" ${CONFIG_FILE} | grep \"PublicKey\" | cut -d' ' -f3)\n        if [ -n \"$CLIENT_PUBLIC_KEY\" ]; then\n            sudo wg set ${INTERFACE} peer ${CLIENT_PUBLIC_KEY} remove\n            sudo sed -i \"/# ${CLIENT_NAME}/,+3d\" ${CONFIG_FILE}\n            rm -f ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n            echo \"Client ${CLIENT_NAME} removed\"\n        else\n            echo \"Client ${CLIENT_NAME} not found\"\n        fi\n        ;;\n        \n    \"list-clients\")\n        echo \"Connected clients:\"\n        sudo wg show ${INTERFACE}\n        echo \"\"\n        echo \"Configured clients:\"\n        grep \"^# \" ${CONFIG_FILE} | sed 's/# /- /'\n        ;;\n        \n    \"show-client\")\n        CLIENT_NAME=\"${2}\"\n        if [ -z \"$CLIENT_NAME\" ]; then\n            echo \"Usage: $0 show-client <client_name>\"\n            exit 1\n        fi\n        \n        if [ -f \"${CLIENTS_DIR}/${CLIENT_NAME}.conf\" ]; then\n            echo \"Configuration for ${CLIENT_NAME}:\"\n            cat ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n            echo \"\"\n            echo \"QR Code:\"\n            qrencode -t ansiutf8 < ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n        else\n            echo \"Client ${CLIENT_NAME} not found\"\n        fi\n        ;;\n        \n    \"status\")\n        echo \"WireGuard Status:\"\n        sudo systemctl status wg-quick@${INTERFACE}\n        echo \"\"\n        echo \"Interface Details:\"\n        sudo wg show ${INTERFACE}\n        echo \"\"\n        echo \"Interface Statistics:\"\n        sudo wg show ${INTERFACE} transfer\n        ;;\n        \n    \"restart\")\n        echo \"Restarting WireGuard...\"\n        sudo systemctl restart wg-quick@${INTERFACE}\n        echo \"WireGuard restarted\"\n        ;;\n        \n    *)\n        echo \"WireGuard Management Script\"\n        echo \"Usage: $0 {add-client|remove-client|list-clients|show-client|status|restart}\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 add-client laptop1\"\n        echo \"  $0 remove-client laptop1\"  \n        echo \"  $0 show-client laptop1\"\n        echo \"  $0 list-clients\"\n        echo \"  $0 status\"\n        echo \"  $0 restart\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/wg-manager.sh\n```\n\n### Web UI (WireGuard Easy)\n```bash\n# Install WireGuard Easy (web management interface)\nmkdir -p ~/wg-easy\ncd ~/wg-easy\n\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  wg-easy:\n    image: weejewel/wg-easy:latest\n    container_name: wg-easy\n    restart: unless-stopped\n    ports:\n      - \"51821:51821/udp\"  # WireGuard port\n      - \"127.0.0.1:51822:51822/tcp\"  # Web UI port\n    environment:\n      - WG_HOST=vpn.example.com\n      - PASSWORD=WebUISecurePassword2024!\n      - WG_PORT=51821\n      - WG_DEFAULT_ADDRESS=10.8.0.x\n      - WG_DEFAULT_DNS=1.1.1.1,8.8.8.8\n      - WG_MTU=1420\n      - WG_ALLOWED_IPS=0.0.0.0/0,::/0\n      - WG_PERSISTENT_KEEPALIVE=25\n    volumes:\n      - ./data:/etc/wireguard\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n    networks:\n      - wg-easy\n\nnetworks:\n  wg-easy:\n    driver: bridge\nEOF\n\n# Start WG-Easy\ndocker-compose up -d\n\n# Access web interface at http://localhost:51822\n```\n\n## Monitoring and Maintenance\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/wireguard-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/wireguard-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check WireGuard service\nif systemctl is-active wg-quick@wg0 >/dev/null 2>&1; then\n    log_message \"✓ WireGuard service is running\"\nelse\n    log_message \"✗ WireGuard service is not running\"\n    exit 1\nfi\n\n# Check interface status\nif ip link show wg0 >/dev/null 2>&1; then\n    log_message \"✓ WireGuard interface is up\"\nelse\n    log_message \"✗ WireGuard interface is down\"\nfi\n\n# Check connected peers\nCONNECTED_PEERS=$(sudo wg show wg0 peers | wc -l)\nACTIVE_PEERS=$(sudo wg show wg0 latest-handshakes | awk '$2 > 0' | wc -l)\nlog_message \"ℹ Connected peers: ${ACTIVE_PEERS}/${CONNECTED_PEERS}\"\n\n# Check traffic statistics\nTRAFFIC_STATS=$(sudo wg show wg0 transfer)\nlog_message \"ℹ Traffic statistics available: $(echo \"$TRAFFIC_STATS\" | wc -l) peers\"\n\n# Check listening port\nif ss -ulpn | grep -q \":51820\"; then\n    log_message \"✓ WireGuard is listening on port 51820\"\nelse\n    log_message \"⚠ WireGuard not listening on expected port\"\nfi\n\n# Check IP forwarding\nIP_FORWARD=$(cat /proc/sys/net/ipv4/ip_forward)\nif [ \"$IP_FORWARD\" = \"1\" ]; then\n    log_message \"✓ IP forwarding is enabled\"\nelse\n    log_message \"✗ IP forwarding is disabled\"\nfi\n\nlog_message \"WireGuard health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wireguard-health.sh\n\n# Schedule health checks every 10 minutes\necho \"*/10 * * * * root /usr/local/bin/wireguard-health.sh\" | sudo tee -a /etc/crontab\n```\n\n### Backup and Configuration Management\n```bash\nsudo tee /usr/local/bin/wireguard-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/wireguard\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{configs,clients}\n\necho \"Starting WireGuard backup...\"\n\n# Backup server configuration\ncp /etc/wireguard/wg0.conf ${BACKUP_DIR}/configs/wg0-${DATE}.conf\n\n# Backup client configurations\nif [ -d \"/etc/wireguard/clients\" ]; then\n    tar -czf ${BACKUP_DIR}/clients/clients-${DATE}.tar.gz -C /etc/wireguard clients/\nfi\n\n# Backup keys\ntar -czf ${BACKUP_DIR}/configs/keys-${DATE}.tar.gz -C /etc/wireguard *.key\n\n# Upload to cloud storage (encrypted)\ngpg --symmetric --cipher-algo AES256 --compress-algo 1 --s2k-mode 3 \\\n    --s2k-digest-algo SHA512 --s2k-count 65536 \\\n    --output ${BACKUP_DIR}/wireguard-backup-${DATE}.tar.gz.gpg \\\n    --compress-level 9 \\\n    <(tar -czf - -C ${BACKUP_DIR} .)\n\n# Upload encrypted backup\naws s3 cp ${BACKUP_DIR}/wireguard-backup-${DATE}.tar.gz.gpg s3://wireguard-backups/\n\n# Keep only last 30 backups\nfind ${BACKUP_DIR} -name \"wireguard-*\" -type f -mtime +30 -delete\n\necho \"WireGuard backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/wireguard-backup.sh\n\n# Schedule daily backups\necho \"0 3 * * * root /usr/local/bin/wireguard-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Advanced Features\n\n### Site-to-Site VPN\n```bash\n# Configure site-to-site VPN between offices\n# Office A (Main) - 192.168.1.0/24\n# Office B (Branch) - 192.168.2.0/24\n\n# Main office WireGuard config\nsudo tee /etc/wireguard/site-to-site.conf > /dev/null <<EOF\n[Interface]\nPrivateKey = main_office_private_key\nAddress = 172.16.0.1/30\nListenPort = 51820\n\n# Route traffic between sites\nPostUp = ip route add 192.168.2.0/24 dev %i\nPostUp = iptables -A FORWARD -i %i -o eth0 -s 192.168.2.0/24 -d 192.168.1.0/24 -j ACCEPT\nPostUp = iptables -A FORWARD -i eth0 -o %i -s 192.168.1.0/24 -d 192.168.2.0/24 -j ACCEPT\n\nPostDown = ip route del 192.168.2.0/24 dev %i\nPostDown = iptables -D FORWARD -i %i -o eth0 -s 192.168.2.0/24 -d 192.168.1.0/24 -j ACCEPT\nPostDown = iptables -D FORWARD -i eth0 -o %i -s 192.168.1.0/24 -d 192.168.2.0/24 -j ACCEPT\n\n[Peer]\n# Branch Office\nPublicKey = branch_office_public_key\nEndpoint = branch.example.com:51820\nAllowedIPs = 172.16.0.2/32, 192.168.2.0/24\nPersistentKeepalive = 25\nEOF\n```\n\n### Load Balancing and Failover\n```bash\n# Configure multiple WireGuard servers for redundancy\n# Client configuration with multiple peers\ncat > multi-server-client.conf <<EOF\n[Interface]\nPrivateKey = client_private_key\nAddress = 10.0.0.10/32\nDNS = 1.1.1.1, 8.8.8.8\n\n# Primary server\n[Peer]\nPublicKey = primary_server_public_key\nEndpoint = vpn1.example.com:51820\nAllowedIPs = 0.0.0.0/1, 128.0.0.0/1\nPersistentKeepalive = 25\n\n# Backup server (different IP range to avoid conflicts)\n[Peer]\nPublicKey = backup_server_public_key\nEndpoint = vpn2.example.com:51820\nAllowedIPs = 10.1.0.0/24\nPersistentKeepalive = 25\nEOF\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check WireGuard status\nsudo systemctl status wg-quick@wg0\nsudo wg show\n\n# Check interface configuration\nip addr show wg0\nip route show table all | grep wg0\n\n# Test connectivity\nping -c 4 10.0.0.1  # Server IP from client\nping -c 4 10.0.0.2  # Client IP from server\n\n# Check firewall rules\nsudo iptables -L -n | grep -E \"(wg0|51820)\"\nsudo ufw status | grep -E \"(WireGuard|51820)\"\n\n# Check logs\nsudo journalctl -u wg-quick@wg0 -f\ndmesg | grep wireguard\n\n# Debug handshake issues\nsudo wg show wg0 latest-handshakes\nsudo wg show wg0 transfer\n\n# Check peer connectivity\nsudo wg show wg0 endpoints\nsudo wg show wg0 allowed-ips\n\n# Restart WireGuard interface\nsudo wg-quick down wg0\nsudo wg-quick up wg0\n\n# Check kernel module\nlsmod | grep wireguard\nmodinfo wireguard\n\n# Test DNS resolution through VPN\nnslookup google.com 10.0.0.1\n\n# Check MTU issues\nping -M do -s 1472 10.0.0.1  # Test MTU size\n\n# Performance testing\niperf3 -s -p 5201  # On server\niperf3 -c 10.0.0.1 -p 5201  # On client\n\n# Configuration validation\nsudo wg-quick up wg0 --dry-run\n\n# Check routing table\nip route show table all\nip rule show\n\n# Network troubleshooting\ntraceroute -I 8.8.8.8  # Test route through VPN\nss -tulpn | grep 51820\nnetstat -tulpn | grep 51820\n```\n\n### Advanced Debugging\n```bash\n# Enable debug logging\necho 'module wireguard +p' | sudo tee /sys/kernel/debug/dynamic_debug/control\n\n# Monitor kernel messages\nsudo dmesg -w | grep wireguard\n\n# Packet capture\nsudo tcpdump -i wg0 -n\nsudo tcpdump -i eth0 port 51820\n\n# Check system resources\nps aux | grep wg\ntop -p $(pgrep wg-quick)\n\n# Verify cryptographic setup\nsudo wg showconf wg0\n\n# Test with verbose output\nsudo wg-quick up wg0 2>&1 | tee /tmp/wg-debug.log\n\n# Check peer handshake details\nsudo wg show wg0 dump\n```\n\n## Additional Resources\n\n- [WireGuard Official Documentation](https://www.wireguard.com/)\n- [WireGuard Quick Start](https://www.wireguard.com/quickstart/)\n- [WireGuard Protocol Whitepaper](https://www.wireguard.com/papers/wireguard.pdf)\n- [WireGuard Community](https://lists.zx2c4.com/mailman/listinfo/wireguard)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"wireguard-installation-guide\" class=\"mobile-header\">WireGuard Installation Guide</h1>\n<p class=\"mobile-paragraph\">Modern, fast, and secure VPN solution using state-of-the-art cryptography. Essential tool for secure remote access, site-to-site connectivity, and privacy protection with minimal configuration complexity.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system with kernel 3.10+ (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">Static IP address or dynamic DNS</li>\n<li class=\"mobile-list-item\">UDP port 51820 available (default, configurable)</li>\n<li class=\"mobile-list-item\">Basic understanding of networking concepts</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install WireGuard\nsudo apt install -y wireguard wireguard-tools\n\n# For older Ubuntu versions (18.04)\nsudo add-apt-repository ppa:wireguard/wireguard\nsudo apt update\nsudo apt install -y wireguard\n\n# Install additional tools\nsudo apt install -y qrencode resolvconf\n\n# Verify installation\nwg --version\nmodprobe wireguard &amp;&amp; echo &quot;WireGuard module loaded successfully&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install WireGuard\nsudo yum install -y wireguard-tools\n\n# For CentOS 7 (requires additional steps)\nsudo yum install -y yum-plugin-elrepo\nsudo yum install -y kmod-wireguard wireguard-tools\n\n# Install additional tools\nsudo yum install -y qrencode\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv6.conf.all.forwarding = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard (included in kernel 5.6+)\nsudo dnf install -y wireguard-tools qrencode\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard\nsudo pacman -Syu wireguard-tools qrencode\n\n# Load WireGuard module\nsudo modprobe wireguard\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"server-configuration\" class=\"mobile-header\">Server Configuration</h2>\n<h3 id=\"generate-keys-and-create-server-config\" class=\"mobile-header\">Generate Keys and Create Server Config</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create WireGuard directory\nsudo mkdir -p /etc/wireguard\nsudo chmod 700 /etc/wireguard\n\n# Generate server keys\ncd /etc/wireguard\nwg genkey | sudo tee server_private.key | wg pubkey | sudo tee server_public.key\nsudo chmod 600 server_private.key\n\n# Create server configuration\nsudo tee /etc/wireguard/wg0.conf &gt; /dev/null &lt;&lt;EOF\n[Interface]\n# Server configuration\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24, fd00::1/64\nListenPort = 51820\nSaveConfig = true\n\n# Network configuration\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# DNS servers (optional)\nDNS = 1.1.1.1, 8.8.8.8\n\n# Client configurations will be added here automatically\n# [Peer] sections for each client\nEOF\n\nsudo chmod 600 /etc/wireguard/wg0.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-server-configuration\" class=\"mobile-header\">Advanced Server Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production server configuration with security\nsudo tee /etc/wireguard/wg0.conf &gt; /dev/null &lt;&lt;EOF\n[Interface]\n# Server identity\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24\nListenPort = 51820\nSaveConfig = false  # Disable for security in production\n\n# Network forwarding and NAT\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostUp = ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nPostDown = ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Security: Block private networks (adjust as needed)\nPostUp = iptables -I FORWARD -s 10.0.0.0/8 -d 192.168.1.0/24 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/8 -d 172.16.0.0/12 -j DROP\n\n# DNS configuration\nDNS = 10.0.0.1  # Use Pi-hole or local DNS\n\n# Example client configurations\n[Peer]\n# Client 1 - Admin laptop\nPublicKey = client1_public_key_here\nAllowedIPs = 10.0.0.2/32\nPersistentKeepalive = 25\n\n[Peer]  \n# Client 2 - Mobile device\nPublicKey = client2_public_key_here\nAllowedIPs = 10.0.0.3/32\nPersistentKeepalive = 25\n\n[Peer]\n# Client 3 - Site-to-site (branch office)\nPublicKey = site_public_key_here\nAllowedIPs = 10.0.0.0/24, 192.168.100.0/24\nEndpoint = branch.example.com:51820\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"client-configuration\" class=\"mobile-header\">Client Configuration</h2>\n<h3 id=\"generate-client-configurations\" class=\"mobile-header\">Generate Client Configurations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create client configuration generator script\nsudo tee /usr/local/bin/wg-add-client.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nCLIENT_NAME=&quot;${1}&quot;\nSERVER_PUBLIC_IP=&quot;${2:-your-server-public-ip}&quot;\nSERVER_PUBLIC_KEY=&quot;$(sudo cat /etc/wireguard/server_public.key)&quot;\n\nif [ -z &quot;$CLIENT_NAME&quot; ]; then\n    echo &quot;Usage: $0 &lt;client_name&gt; [server_public_ip]&quot;\n    echo &quot;Example: $0 laptop1 203.0.113.1&quot;\n    exit 1\nfi\n\n# Get next available IP\nLAST_IP=$(grep &quot;AllowedIPs&quot; /etc/wireguard/wg0.conf | grep -o &quot;10\\.0\\.0\\.[0-9]*&quot; | sort -t. -k4 -n | tail -1 | cut -d. -f4)\nNEXT_IP=$((LAST_IP + 1))\nCLIENT_IP=&quot;10.0.0.${NEXT_IP}/32&quot;\n\n# Generate client keys\nCLIENT_PRIVATE_KEY=$(wg genkey)\nCLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n\n# Add peer to server configuration\nsudo tee -a /etc/wireguard/wg0.conf &gt; /dev/null &lt;&lt;PEER\n\n[Peer]\n# ${CLIENT_NAME}\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_IP}\nPersistentKeepalive = 25\nPEER\n\n# Generate client configuration\ncat &gt; /tmp/${CLIENT_NAME}.conf &lt;&lt;CLIENT_CONFIG\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_IP}\nDNS = 10.0.0.1, 1.1.1.1\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nEndpoint = ${SERVER_PUBLIC_IP}:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nCLIENT_CONFIG\n\n# Generate QR code for mobile devices\nqrencode -t ansiutf8 &lt; /tmp/${CLIENT_NAME}.conf\n\necho &quot;Client configuration created: /tmp/${CLIENT_NAME}.conf&quot;\necho &quot;Add to server with: sudo wg addconf wg0 &lt;(echo &#039;[Peer]&#039;; echo &#039;PublicKey = ${CLIENT_PUBLIC_KEY}&#039;; echo &#039;AllowedIPs = ${CLIENT_IP}&#039;)&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wg-add-client.sh\n\n# Example: Add a client\n# sudo /usr/local/bin/wg-add-client.sh laptop1 your-server-ip</code></pre>\n      </div>\n    </div>\n<h3 id=\"client-examples\" class=\"mobile-header\">Client Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Mobile device configuration\ncat &gt; mobile-client.conf &lt;&lt;EOF\n[Interface]\nPrivateKey = mobile_device_private_key\nAddress = 10.0.0.10/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = server_public_key_here\nEndpoint = vpn.example.com:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nEOF\n\n# Site-to-site configuration (branch office)\ncat &gt; branch-office.conf &lt;&lt;EOF\n[Interface]\nPrivateKey = branch_office_private_key\nAddress = 10.0.0.100/32\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n[Peer]\nPublicKey = server_public_key_here\nEndpoint = vpn.example.com:51820\nAllowedIPs = 10.0.0.0/24, 192.168.1.0/24\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management-and-security\" class=\"mobile-header\">Service Management and Security</h2>\n<h3 id=\"systemd-service\" class=\"mobile-header\">SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable WireGuard interface as systemd service\nsudo systemctl enable wg-quick@wg0\nsudo systemctl start wg-quick@wg0\n\n# Check status\nsudo systemctl status wg-quick@wg0\nsudo wg show\n\n# Alternative: Manual management\nsudo wg-quick up wg0\nsudo wg-quick down wg0</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure UFW for WireGuard\nsudo ufw allow 51820/udp comment &#039;WireGuard VPN&#039;\nsudo ufw allow from 10.0.0.0/24 comment &#039;WireGuard clients&#039;\n\n# For internal network access\nsudo ufw allow from 10.0.0.0/24 to 192.168.1.0/24\n\n# Firewalld configuration (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=51820/udp\nsudo firewall-cmd --permanent --add-rich-rule=&#039;rule family=ipv4 source address=10.0.0.0/24 accept&#039;\nsudo firewall-cmd --reload\n\n# Direct iptables rules\nsudo iptables -A INPUT -p udp --dport 51820 -j ACCEPT\nsudo iptables -A FORWARD -i wg0 -j ACCEPT\nsudo iptables -A FORWARD -o wg0 -j ACCEPT\nsudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure advanced security features\nsudo tee /etc/wireguard/wg0.conf &gt; /dev/null &lt;&lt;EOF\n[Interface]\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24\nListenPort = 51820\n\n# Security: Change default port\n# ListenPort = 41194\n\n# DNS security\nDNS = 10.0.0.1  # Use Pi-hole for ad blocking\n\n# Advanced security rules\nPostUp = iptables -A FORWARD -i %i -j ACCEPT\nPostUp = iptables -A FORWARD -o %i -j ACCEPT\nPostUp = iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\n# Block access to local network (security measure)\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.0/24 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 172.16.0.0/12 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 10.0.0.0/8 -j DROP\n\n# Allow specific services only\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.100 -p tcp --dport 22 -j ACCEPT    # SSH to server\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.101 -p tcp --dport 443 -j ACCEPT  # HTTPS to web services\n\nPostDown = iptables -D FORWARD -i %i -j ACCEPT\nPostDown = iptables -D FORWARD -o %i -j ACCEPT\nPostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"management-and-automation\" class=\"mobile-header\">Management and Automation</h2>\n<h3 id=\"wireguard-management-script\" class=\"mobile-header\">WireGuard Management Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/wg-manager.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nINTERFACE=&quot;wg0&quot;\nCONFIG_FILE=&quot;/etc/wireguard/${INTERFACE}.conf&quot;\nCLIENTS_DIR=&quot;/etc/wireguard/clients&quot;\nSERVER_PUBLIC_IP=&quot;${SERVER_PUBLIC_IP:-$(curl -s ipinfo.io/ip)}&quot;\nSERVER_PUBLIC_KEY=&quot;$(sudo cat /etc/wireguard/server_public.key)&quot;\n\nsudo mkdir -p ${CLIENTS_DIR}\n\ncase &quot;${1}&quot; in\n    &quot;add-client&quot;)\n        CLIENT_NAME=&quot;${2}&quot;\n        if [ -z &quot;$CLIENT_NAME&quot; ]; then\n            echo &quot;Usage: $0 add-client &lt;client_name&gt;&quot;\n            exit 1\n        fi\n        \n        # Generate client keys\n        CLIENT_PRIVATE_KEY=$(wg genkey)\n        CLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n        \n        # Get next available IP\n        LAST_IP=$(grep &quot;AllowedIPs&quot; ${CONFIG_FILE} | grep -o &quot;10\\.0\\.0\\.[0-9]*&quot; | sort -t. -k4 -n | tail -1 | cut -d. -f4)\n        NEXT_IP=$((LAST_IP + 1))\n        CLIENT_IP=&quot;10.0.0.${NEXT_IP}&quot;\n        \n        # Add peer to server\n        sudo wg set ${INTERFACE} peer ${CLIENT_PUBLIC_KEY} allowed-ips ${CLIENT_IP}/32\n        \n        # Save to config\n        sudo tee -a ${CONFIG_FILE} &gt; /dev/null &lt;&lt;PEER\n\n[Peer]\n# ${CLIENT_NAME} - $(date)\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_IP}/32\nPersistentKeepalive = 25\nPEER\n        \n        # Generate client config\n        cat &gt; ${CLIENTS_DIR}/${CLIENT_NAME}.conf &lt;&lt;CLIENT_CONFIG\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_IP}/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nEndpoint = ${SERVER_PUBLIC_IP}:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nCLIENT_CONFIG\n        \n        # Generate QR code\n        echo &quot;Client ${CLIENT_NAME} configuration:&quot;\n        qrencode -t ansiutf8 &lt; ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n        echo &quot;Configuration file: ${CLIENTS_DIR}/${CLIENT_NAME}.conf&quot;\n        ;;\n        \n    &quot;remove-client&quot;)\n        CLIENT_NAME=&quot;${2}&quot;\n        if [ -z &quot;$CLIENT_NAME&quot; ]; then\n            echo &quot;Usage: $0 remove-client &lt;client_name&gt;&quot;\n            exit 1\n        fi\n        \n        CLIENT_PUBLIC_KEY=$(grep -A 3 &quot;# ${CLIENT_NAME}&quot; ${CONFIG_FILE} | grep &quot;PublicKey&quot; | cut -d&#039; &#039; -f3)\n        if [ -n &quot;$CLIENT_PUBLIC_KEY&quot; ]; then\n            sudo wg set ${INTERFACE} peer ${CLIENT_PUBLIC_KEY} remove\n            sudo sed -i &quot;/# ${CLIENT_NAME}/,+3d&quot; ${CONFIG_FILE}\n            rm -f ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n            echo &quot;Client ${CLIENT_NAME} removed&quot;\n        else\n            echo &quot;Client ${CLIENT_NAME} not found&quot;\n        fi\n        ;;\n        \n    &quot;list-clients&quot;)\n        echo &quot;Connected clients:&quot;\n        sudo wg show ${INTERFACE}\n        echo &quot;&quot;\n        echo &quot;Configured clients:&quot;\n        grep &quot;^# &quot; ${CONFIG_FILE} | sed &#039;s/# /- /&#039;\n        ;;\n        \n    &quot;show-client&quot;)\n        CLIENT_NAME=&quot;${2}&quot;\n        if [ -z &quot;$CLIENT_NAME&quot; ]; then\n            echo &quot;Usage: $0 show-client &lt;client_name&gt;&quot;\n            exit 1\n        fi\n        \n        if [ -f &quot;${CLIENTS_DIR}/${CLIENT_NAME}.conf&quot; ]; then\n            echo &quot;Configuration for ${CLIENT_NAME}:&quot;\n            cat ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n            echo &quot;&quot;\n            echo &quot;QR Code:&quot;\n            qrencode -t ansiutf8 &lt; ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n        else\n            echo &quot;Client ${CLIENT_NAME} not found&quot;\n        fi\n        ;;\n        \n    &quot;status&quot;)\n        echo &quot;WireGuard Status:&quot;\n        sudo systemctl status wg-quick@${INTERFACE}\n        echo &quot;&quot;\n        echo &quot;Interface Details:&quot;\n        sudo wg show ${INTERFACE}\n        echo &quot;&quot;\n        echo &quot;Interface Statistics:&quot;\n        sudo wg show ${INTERFACE} transfer\n        ;;\n        \n    &quot;restart&quot;)\n        echo &quot;Restarting WireGuard...&quot;\n        sudo systemctl restart wg-quick@${INTERFACE}\n        echo &quot;WireGuard restarted&quot;\n        ;;\n        \n    *)\n        echo &quot;WireGuard Management Script&quot;\n        echo &quot;Usage: $0 {add-client|remove-client|list-clients|show-client|status|restart}&quot;\n        echo &quot;&quot;\n        echo &quot;Examples:&quot;\n        echo &quot;  $0 add-client laptop1&quot;\n        echo &quot;  $0 remove-client laptop1&quot;  \n        echo &quot;  $0 show-client laptop1&quot;\n        echo &quot;  $0 list-clients&quot;\n        echo &quot;  $0 status&quot;\n        echo &quot;  $0 restart&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/wg-manager.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"web-ui-wireguard-easy\" class=\"mobile-header\">Web UI (WireGuard Easy)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard Easy (web management interface)\nmkdir -p ~/wg-easy\ncd ~/wg-easy\n\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  wg-easy:\n    image: weejewel/wg-easy:latest\n    container_name: wg-easy\n    restart: unless-stopped\n    ports:\n      - &quot;51821:51821/udp&quot;  # WireGuard port\n      - &quot;127.0.0.1:51822:51822/tcp&quot;  # Web UI port\n    environment:\n      - WG_HOST=vpn.example.com\n      - PASSWORD=WebUISecurePassword2024!\n      - WG_PORT=51821\n      - WG_DEFAULT_ADDRESS=10.8.0.x\n      - WG_DEFAULT_DNS=1.1.1.1,8.8.8.8\n      - WG_MTU=1420\n      - WG_ALLOWED_IPS=0.0.0.0/0,::/0\n      - WG_PERSISTENT_KEEPALIVE=25\n    volumes:\n      - ./data:/etc/wireguard\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n    networks:\n      - wg-easy\n\nnetworks:\n  wg-easy:\n    driver: bridge\nEOF\n\n# Start WG-Easy\ndocker-compose up -d\n\n# Access web interface at http://localhost:51822</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-maintenance\" class=\"mobile-header\">Monitoring and Maintenance</h2>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/wireguard-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/wireguard-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check WireGuard service\nif systemctl is-active wg-quick@wg0 &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ WireGuard service is running&quot;\nelse\n    log_message &quot;✗ WireGuard service is not running&quot;\n    exit 1\nfi\n\n# Check interface status\nif ip link show wg0 &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ WireGuard interface is up&quot;\nelse\n    log_message &quot;✗ WireGuard interface is down&quot;\nfi\n\n# Check connected peers\nCONNECTED_PEERS=$(sudo wg show wg0 peers | wc -l)\nACTIVE_PEERS=$(sudo wg show wg0 latest-handshakes | awk &#039;$2 &gt; 0&#039; | wc -l)\nlog_message &quot;ℹ Connected peers: ${ACTIVE_PEERS}/${CONNECTED_PEERS}&quot;\n\n# Check traffic statistics\nTRAFFIC_STATS=$(sudo wg show wg0 transfer)\nlog_message &quot;ℹ Traffic statistics available: $(echo &quot;$TRAFFIC_STATS&quot; | wc -l) peers&quot;\n\n# Check listening port\nif ss -ulpn | grep -q &quot;:51820&quot;; then\n    log_message &quot;✓ WireGuard is listening on port 51820&quot;\nelse\n    log_message &quot;⚠ WireGuard not listening on expected port&quot;\nfi\n\n# Check IP forwarding\nIP_FORWARD=$(cat /proc/sys/net/ipv4/ip_forward)\nif [ &quot;$IP_FORWARD&quot; = &quot;1&quot; ]; then\n    log_message &quot;✓ IP forwarding is enabled&quot;\nelse\n    log_message &quot;✗ IP forwarding is disabled&quot;\nfi\n\nlog_message &quot;WireGuard health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wireguard-health.sh\n\n# Schedule health checks every 10 minutes\necho &quot;*/10 * * * * root /usr/local/bin/wireguard-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-and-configuration-management\" class=\"mobile-header\">Backup and Configuration Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/wireguard-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/wireguard&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{configs,clients}\n\necho &quot;Starting WireGuard backup...&quot;\n\n# Backup server configuration\ncp /etc/wireguard/wg0.conf ${BACKUP_DIR}/configs/wg0-${DATE}.conf\n\n# Backup client configurations\nif [ -d &quot;/etc/wireguard/clients&quot; ]; then\n    tar -czf ${BACKUP_DIR}/clients/clients-${DATE}.tar.gz -C /etc/wireguard clients/\nfi\n\n# Backup keys\ntar -czf ${BACKUP_DIR}/configs/keys-${DATE}.tar.gz -C /etc/wireguard *.key\n\n# Upload to cloud storage (encrypted)\ngpg --symmetric --cipher-algo AES256 --compress-algo 1 --s2k-mode 3 \\\n    --s2k-digest-algo SHA512 --s2k-count 65536 \\\n    --output ${BACKUP_DIR}/wireguard-backup-${DATE}.tar.gz.gpg \\\n    --compress-level 9 \\\n    &lt;(tar -czf - -C ${BACKUP_DIR} .)\n\n# Upload encrypted backup\naws s3 cp ${BACKUP_DIR}/wireguard-backup-${DATE}.tar.gz.gpg s3://wireguard-backups/\n\n# Keep only last 30 backups\nfind ${BACKUP_DIR} -name &quot;wireguard-*&quot; -type f -mtime +30 -delete\n\necho &quot;WireGuard backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wireguard-backup.sh\n\n# Schedule daily backups\necho &quot;0 3 * * * root /usr/local/bin/wireguard-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-features\" class=\"mobile-header\">Advanced Features</h2>\n<h3 id=\"site-to-site-vpn\" class=\"mobile-header\">Site-to-Site VPN</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure site-to-site VPN between offices\n# Office A (Main) - 192.168.1.0/24\n# Office B (Branch) - 192.168.2.0/24\n\n# Main office WireGuard config\nsudo tee /etc/wireguard/site-to-site.conf &gt; /dev/null &lt;&lt;EOF\n[Interface]\nPrivateKey = main_office_private_key\nAddress = 172.16.0.1/30\nListenPort = 51820\n\n# Route traffic between sites\nPostUp = ip route add 192.168.2.0/24 dev %i\nPostUp = iptables -A FORWARD -i %i -o eth0 -s 192.168.2.0/24 -d 192.168.1.0/24 -j ACCEPT\nPostUp = iptables -A FORWARD -i eth0 -o %i -s 192.168.1.0/24 -d 192.168.2.0/24 -j ACCEPT\n\nPostDown = ip route del 192.168.2.0/24 dev %i\nPostDown = iptables -D FORWARD -i %i -o eth0 -s 192.168.2.0/24 -d 192.168.1.0/24 -j ACCEPT\nPostDown = iptables -D FORWARD -i eth0 -o %i -s 192.168.1.0/24 -d 192.168.2.0/24 -j ACCEPT\n\n[Peer]\n# Branch Office\nPublicKey = branch_office_public_key\nEndpoint = branch.example.com:51820\nAllowedIPs = 172.16.0.2/32, 192.168.2.0/24\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"load-balancing-and-failover\" class=\"mobile-header\">Load Balancing and Failover</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure multiple WireGuard servers for redundancy\n# Client configuration with multiple peers\ncat &gt; multi-server-client.conf &lt;&lt;EOF\n[Interface]\nPrivateKey = client_private_key\nAddress = 10.0.0.10/32\nDNS = 1.1.1.1, 8.8.8.8\n\n# Primary server\n[Peer]\nPublicKey = primary_server_public_key\nEndpoint = vpn1.example.com:51820\nAllowedIPs = 0.0.0.0/1, 128.0.0.0/1\nPersistentKeepalive = 25\n\n# Backup server (different IP range to avoid conflicts)\n[Peer]\nPublicKey = backup_server_public_key\nEndpoint = vpn2.example.com:51820\nAllowedIPs = 10.1.0.0/24\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check WireGuard status\nsudo systemctl status wg-quick@wg0\nsudo wg show\n\n# Check interface configuration\nip addr show wg0\nip route show table all | grep wg0\n\n# Test connectivity\nping -c 4 10.0.0.1  # Server IP from client\nping -c 4 10.0.0.2  # Client IP from server\n\n# Check firewall rules\nsudo iptables -L -n | grep -E &quot;(wg0|51820)&quot;\nsudo ufw status | grep -E &quot;(WireGuard|51820)&quot;\n\n# Check logs\nsudo journalctl -u wg-quick@wg0 -f\ndmesg | grep wireguard\n\n# Debug handshake issues\nsudo wg show wg0 latest-handshakes\nsudo wg show wg0 transfer\n\n# Check peer connectivity\nsudo wg show wg0 endpoints\nsudo wg show wg0 allowed-ips\n\n# Restart WireGuard interface\nsudo wg-quick down wg0\nsudo wg-quick up wg0\n\n# Check kernel module\nlsmod | grep wireguard\nmodinfo wireguard\n\n# Test DNS resolution through VPN\nnslookup google.com 10.0.0.1\n\n# Check MTU issues\nping -M do -s 1472 10.0.0.1  # Test MTU size\n\n# Performance testing\niperf3 -s -p 5201  # On server\niperf3 -c 10.0.0.1 -p 5201  # On client\n\n# Configuration validation\nsudo wg-quick up wg0 --dry-run\n\n# Check routing table\nip route show table all\nip rule show\n\n# Network troubleshooting\ntraceroute -I 8.8.8.8  # Test route through VPN\nss -tulpn | grep 51820\nnetstat -tulpn | grep 51820</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &#039;module wireguard +p&#039; | sudo tee /sys/kernel/debug/dynamic_debug/control\n\n# Monitor kernel messages\nsudo dmesg -w | grep wireguard\n\n# Packet capture\nsudo tcpdump -i wg0 -n\nsudo tcpdump -i eth0 port 51820\n\n# Check system resources\nps aux | grep wg\ntop -p $(pgrep wg-quick)\n\n# Verify cryptographic setup\nsudo wg showconf wg0\n\n# Test with verbose output\nsudo wg-quick up wg0 2&gt;&amp;1 | tee /tmp/wg-debug.log\n\n# Check peer handshake details\nsudo wg show wg0 dump</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/quickstart/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Quick Start</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/papers/wireguard.pdf\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Protocol Whitepaper</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://lists.zx2c4.com/mailman/listinfo/wireguard\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"14 min","wordCount":2789,"lastBuilt":"2025-09-14T18:12:00.951Z"},"category":{"key":"security","name":"Security","description":"Security tools and authentication systems","icon":"🔒","color":"#ff5555","keywords":["vault","authelia","keycloak","pihole","fail2ban","wireguard","openvpn"]},"relatedGuides":[{"name":"fail2ban","displayName":"Fail2ban","slug":"fail2ban","description":"Repo for fail2ban","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fail2ban","updatedAt":"2025-09-14T01:29:56Z","createdAt":"2025-09-08T03:07:24Z","readmeRaw":"# Fail2Ban Installation Guide\n\nIntrusion prevention software that protects servers from brute-force attacks by monitoring log files and automatically banning malicious IP addresses. Essential security tool for any public-facing server.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- iptables or firewalld\n- Log files to monitor (SSH, web server, etc.)\n- Python 3.6+ (usually pre-installed)\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install Fail2Ban\nsudo apt install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\nfail2ban-client version\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Fail2Ban\nsudo yum install -y fail2ban fail2ban-systemd whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\n```\n\n### Fedora\n```bash\n# Install Fail2Ban\nsudo dnf install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\n```\n\n## Configuration\n\n### Basic Configuration\n```bash\n# Create local jail configuration (never edit jail.conf directly)\nsudo tee /etc/fail2ban/jail.local > /dev/null <<EOF\n# Fail2Ban Local Configuration\n\n[DEFAULT]\n# Ban settings\nbantime = 3600\nfindtime = 600\nmaxretry = 3\nbackend = auto\n\n# Notification settings\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n\n# Actions\naction = %(action_mwl)s\n\n# Ignore IP addresses (whitelist)\nignoreip = 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8\n\n# SSH protection\n[sshd]\nenabled = true\nport = ssh,2222\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n# HTTP/HTTPS brute force protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Apache protection\n[apache-auth]\nenabled = false\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log\nmaxretry = 3\n\n[apache-badbots]\nenabled = false\nfilter = apache-badbots\nlogpath = /var/log/apache2/access.log\nmaxretry = 2\n\n# Database protection\n[mysql]\nenabled = false\nfilter = mysql-auth\nlogpath = /var/log/mysql/error.log\nmaxretry = 3\nbantime = 7200\n\n[postgresql]\nenabled = false\nfilter = postgresql\nlogpath = /var/log/postgresql/postgresql-*-main.log\nmaxretry = 3\n\n# Mail server protection\n[postfix]\nenabled = false\nfilter = postfix\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n[dovecot]\nenabled = false\nfilter = dovecot\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n# FTP protection\n[vsftpd]\nenabled = false\nfilter = vsftpd\nlogpath = /var/log/vsftpd.log\nmaxretry = 3\n\n# Custom application protection\n[custom-app]\nenabled = false\nfilter = custom-app\nlogpath = /var/log/myapp/error.log\nmaxretry = 5\nbantime = 1800\nEOF\n```\n\n### Custom Filters\n```bash\n# Create custom filter for web applications\nsudo tee /etc/fail2ban/filter.d/nginx-custom.conf > /dev/null <<EOF\n# Custom NGINX filter for advanced protection\n\n[Definition]\nfailregex = \n    # Failed login attempts\n    ^<HOST> -.*POST.*(wp-login\\.php|login|signin|admin).*HTTP/[0-9\\.]+\\\" 200\n    # Directory traversal attempts\n    ^<HOST> -.*GET.*(\\.\\./|\\.\\.\\%2F).*HTTP/[0-9\\.]+\\\" 404\n    # SQL injection attempts  \n    ^<HOST> -.*GET.*(union|select|insert|cast|set|declare|drop|create|alter|delete|update|replace|truncate).*HTTP/[0-9\\.]+\\\" 200\n    # XSS attempts\n    ^<HOST> -.*GET.*(script|javascript|vbscript|onload|onerror|onclick).*HTTP/[0-9\\.]+\\\" 200\n    # Suspicious user agents\n    ^<HOST> -.*\\\"(.*sqlmap.*|.*nikto.*|.*nessus.*|.*openvas.*|.*python-requests.*|.*curl.*|.*wget.*)\\\"$\n    # Too many 404 errors\n    ^<HOST> -.*\\\" 404 \n\nignoreregex =\n    # Ignore legitimate requests\n    ^<HOST> -.*GET.*/favicon\\.ico.*HTTP/[0-9\\.]+\\\" 404\n    ^<HOST> -.*GET.*/robots\\.txt.*HTTP/[0-9\\.]+\\\" 404\nEOF\n\n# Create WordPress-specific filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf > /dev/null <<EOF\n[Definition]\nfailregex = \n    # WordPress login failures\n    ^<HOST> -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\\" 200\n    # WordPress admin access attempts\n    ^<HOST> -.*GET.*/wp-admin.*HTTP/[0-9\\.]+\\\" 403\n    # XML-RPC attacks\n    ^<HOST> -.*POST.*/xmlrpc\\.php.*HTTP/[0-9\\.]+\\\" 200\n\nignoreregex =\n    # Ignore successful admin logins (adjust pattern as needed)\n    ^<HOST> -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\\" 302\nEOF\n\n# Add WordPress jail to jail.local\nsudo tee -a /etc/fail2ban/jail.local > /dev/null <<EOF\n\n[wordpress]\nenabled = true\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nport = http,https\nmaxretry = 3\nbantime = 1800\nfindtime = 600\nEOF\n\nsudo systemctl restart fail2ban\n```\n\n### Advanced Configuration\n```bash\n# Create advanced fail2ban configuration with multiple actions\nsudo tee /etc/fail2ban/action.d/telegram.conf > /dev/null <<EOF\n# Telegram notification action\n\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = curl -s \"https://api.telegram.org/bot<bot_token>/sendMessage\" -d \"chat_id=<chat_id>&text=🚫 Fail2Ban: <name> banned <ip> for <failures> failures\"\nactionunban = curl -s \"https://api.telegram.org/bot<bot_token>/sendMessage\" -d \"chat_id=<chat_id>&text=✅ Fail2Ban: <name> unbanned <ip>\"\n\n[Init]\nbot_token = your_telegram_bot_token\nchat_id = your_telegram_chat_id\nEOF\n\n# Create comprehensive protection configuration\nsudo tee /etc/fail2ban/jail.d/comprehensive.conf > /dev/null <<EOF\n# Comprehensive Security Configuration\n\n[DEFAULT]\n# Enhanced ban settings\nbantime.increment = true\nbantime.rndtime = 60\nbantime.maxtime = 86400\nbantime.factor = 2\nbantime.formula = ban.Time * (1<<(ban.Count if ban.Count<20 else 20)) * banFactor\n\n# Multiple actions (ban + notify)\naction = %(action_mwl)s[dest=security@example.com]\n         telegram[bot_token=your_bot_token, chat_id=your_chat_id]\n\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd[mode=aggressive]\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 7200\nfindtime = 300\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nbantime = 3600\n\n[nginx-noproxy]\nenabled = true\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n# Protect against port scans\n[port-scan]\nenabled = true\nfilter = port-scan\nlogpath = /var/log/messages\nmaxretry = 1\nbantime = 86400\n\n# DNS amplification protection\n[named-refused]\nenabled = false\nfilter = named-refused\nlogpath = /var/log/messages\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### Custom Filters for Applications\n```bash\n# Create filter for Node.js applications\nsudo tee /etc/fail2ban/filter.d/nodejs-auth.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*Authentication failed for.*from <HOST>.*$\n            ^.*Invalid login attempt.*IP: <HOST>.*$\n            ^.*Failed login.*remote_addr: <HOST>.*$\nignoreregex =\nEOF\n\n# Create filter for Grafana\nsudo tee /etc/fail2ban/filter.d/grafana.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*logger=context.*error=\"invalid username or password\".*remote_addr=<HOST>\n            ^.*logger=context.*error=\"user not found\".*remote_addr=<HOST>\nignoreregex =\nEOF\n\n# Create filter for GitLab\nsudo tee /etc/fail2ban/filter.d/gitlab.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*Failed Login:.*IP: <HOST>.*$\n            ^.*Rack_Attack.*Throttle.*IP: <HOST>.*$\nignoreregex =\nEOF\n\n# Add application-specific jails\nsudo tee /etc/fail2ban/jail.d/applications.conf > /dev/null <<EOF\n[nodejs-auth]\nenabled = false\nfilter = nodejs-auth\nlogpath = /var/log/nodejs/app.log\nmaxretry = 5\nbantime = 1800\n\n[grafana]\nenabled = false\nfilter = grafana\nlogpath = /var/log/grafana/grafana.log\nmaxretry = 5\nbantime = 3600\n\n[gitlab]\nenabled = false\nfilter = gitlab\nlogpath = /var/log/gitlab/gitlab-rails/production.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n## Monitoring and Management\n\n### Fail2Ban Management Script\n```bash\nsudo tee /usr/local/bin/fail2ban-manager.sh > /dev/null <<'EOF'\n#!/bin/bash\n\ncase \"${1}\" in\n    \"status\")\n        echo \"=== Fail2Ban Status ===\"\n        sudo fail2ban-client status\n        echo \"\"\n        echo \"=== Active Jails ===\"\n        for jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n            echo \"Jail: $jail\"\n            sudo fail2ban-client status $jail\n            echo \"\"\n        done\n        ;;\n        \n    \"unban\")\n        IP=\"${2}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 unban <ip_address>\"\n            exit 1\n        fi\n        \n        echo \"Unbanning IP: $IP from all jails\"\n        for jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n            sudo fail2ban-client set $jail unbanip $IP 2>/dev/null && echo \"  - Unbanned from $jail\"\n        done\n        ;;\n        \n    \"ban\")\n        IP=\"${2}\"\n        JAIL=\"${3:-sshd}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 ban <ip_address> [jail_name]\"\n            exit 1\n        fi\n        \n        echo \"Banning IP: $IP in jail: $JAIL\"\n        sudo fail2ban-client set $JAIL banip $IP\n        ;;\n        \n    \"whitelist\")\n        IP=\"${2}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 whitelist <ip_address>\"\n            exit 1\n        fi\n        \n        echo \"Adding $IP to whitelist\"\n        sudo sed -i \"s/ignoreip = .*/& $IP/\" /etc/fail2ban/jail.local\n        sudo systemctl restart fail2ban\n        ;;\n        \n    \"logs\")\n        JAIL=\"${2:-sshd}\"\n        echo \"Recent bans for jail: $JAIL\"\n        sudo grep \"Ban\\|Unban\" /var/log/fail2ban.log | grep \"$JAIL\" | tail -20\n        ;;\n        \n    \"stats\")\n        echo \"=== Fail2Ban Statistics ===\"\n        echo \"Total bans today: $(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Ban \")\"\n        echo \"Total unbans today: $(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Unban \")\"\n        echo \"\"\n        echo \"Top banned IPs (last 1000 entries):\"\n        sudo tail -1000 /var/log/fail2ban.log | grep \"Ban \" | awk '{print $(NF-1)}' | sort | uniq -c | sort -nr | head -10\n        ;;\n        \n    \"test\")\n        JAIL=\"${2:-sshd}\"\n        LOG_FILE=\"${3:-/var/log/auth.log}\"\n        echo \"Testing filter for jail: $JAIL\"\n        echo \"Log file: $LOG_FILE\"\n        sudo fail2ban-regex $LOG_FILE /etc/fail2ban/filter.d/${JAIL}.conf\n        ;;\n        \n    \"reload\")\n        echo \"Reloading Fail2Ban configuration...\"\n        sudo fail2ban-client reload\n        echo \"Configuration reloaded\"\n        ;;\n        \n    *)\n        echo \"Fail2Ban Management Script\"\n        echo \"Usage: $0 {status|unban|ban|whitelist|logs|stats|test|reload}\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 status                    # Show status of all jails\"\n        echo \"  $0 unban 192.168.1.100      # Unban IP from all jails\"\n        echo \"  $0 ban 10.0.0.1 sshd        # Ban IP in specific jail\"\n        echo \"  $0 whitelist 192.168.1.50   # Add IP to whitelist\"\n        echo \"  $0 logs sshd                # Show recent logs for jail\"\n        echo \"  $0 stats                    # Show ban statistics\"\n        echo \"  $0 test sshd                # Test jail filter\"\n        echo \"  $0 reload                   # Reload configuration\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-manager.sh\n```\n\n### Security Monitoring\n```bash\n# Create comprehensive monitoring script\nsudo tee /usr/local/bin/fail2ban-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/fail2ban-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# Check Fail2Ban service\nif systemctl is-active fail2ban >/dev/null 2>&1; then\n    log_message \"✓ Fail2Ban service is running\"\nelse\n    log_message \"✗ Fail2Ban service is not running\"\n    exit 1\nfi\n\n# Check jail status\nACTIVE_JAILS=$(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g' | wc -w)\nlog_message \"ℹ Active jails: ${ACTIVE_JAILS}\"\n\n# Check today's bans\nBANS_TODAY=$(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Ban \" 2>/dev/null || echo \"0\")\nUNBANS_TODAY=$(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Unban \" 2>/dev/null || echo \"0\")\nlog_message \"ℹ Today's activity: ${BANS_TODAY} bans, ${UNBANS_TODAY} unbans\"\n\n# Check currently banned IPs\nTOTAL_BANNED=0\nfor jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n    JAIL_BANNED=$(sudo fail2ban-client status $jail | grep \"Currently banned:\" | awk '{print $3}')\n    TOTAL_BANNED=$((TOTAL_BANNED + JAIL_BANNED))\ndone\n\nlog_message \"ℹ Currently banned IPs: ${TOTAL_BANNED}\"\n\n# Check for configuration errors\nif ! sudo fail2ban-client status >/dev/null 2>&1; then\n    log_message \"⚠ Fail2Ban configuration errors detected\"\n    sudo fail2ban-client status 2>&1 | head -5 >> ${MONITOR_LOG}\nfi\n\n# Check log file accessibility\nfor jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n    LOG_PATH=$(sudo fail2ban-client get $jail logpath 2>/dev/null)\n    if [ -n \"$LOG_PATH\" ] && [ ! -r \"$LOG_PATH\" ]; then\n        log_message \"⚠ Cannot read log file for $jail: $LOG_PATH\"\n    fi\ndone\n\nlog_message \"Fail2Ban monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-monitor.sh\n\n# Schedule monitoring every 15 minutes\necho \"*/15 * * * * root /usr/local/bin/fail2ban-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n### Geographic Blocking Integration\n```bash\n# Install GeoIP for country-based blocking\nsudo apt install -y geoip-database geoip-bin  # Ubuntu/Debian\nsudo yum install -y GeoIP GeoIP-data          # RHEL/CentOS\n\n# Create geographic blocking filter\nsudo tee /etc/fail2ban/filter.d/geoip-block.conf > /dev/null <<EOF\n[Definition]\n# Block connections from specific countries\nfailregex = ^<HOST> -\nignoreregex =\n\n[Init]\n# Countries to block (ISO country codes)\ncountries = CN,RU,KP,IR\nEOF\n\n# Create action for geographic blocking\nsudo tee /etc/fail2ban/action.d/geoip-block.conf > /dev/null <<EOF\n[Definition]\nactioncheck = \nactionstart = \nactionstop = \nactionban = COUNTRY=$(geoiplookup <ip> | awk -F: '{print $2}' | awk '{print $1}'); if echo \"CN RU KP IR\" | grep -q \"$COUNTRY\"; then iptables -A f2b-<name> -s <ip> -j DROP; fi\nactionunban = iptables -D f2b-<name> -s <ip> -j DROP 2>/dev/null || true\n\n[Init]\nname = geoip-block\nEOF\n\n# Add geographic blocking jail\nsudo tee /etc/fail2ban/jail.d/geoip.conf > /dev/null <<EOF\n[geoip-block]\nenabled = false  # Enable if needed\nfilter = geoip-block\naction = geoip-block\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nbantime = 86400\nfindtime = 60\nEOF\n```\n\n## Integration Examples\n\n### Web Server Integration\n```bash\n# NGINX: Enable logging for Fail2Ban\nsudo tee -a /etc/nginx/nginx.conf > /dev/null <<EOF\n\nhttp {\n    # Log format for Fail2Ban\n    log_format fail2ban '\\$remote_addr - \\$remote_user [\\$time_local] '\n                       '\"\\$request\" \\$status \\$body_bytes_sent '\n                       '\"\\$http_referer\" \"\\$http_user_agent\"';\n    \n    # Enable access and error logging\n    access_log /var/log/nginx/access.log fail2ban;\n    error_log /var/log/nginx/error.log warn;\n}\nEOF\n\nsudo nginx -t && sudo systemctl reload nginx\n\n# Apache: Enable logging\nsudo tee -a /etc/apache2/apache2.conf > /dev/null <<EOF\n\n# Enhanced logging for Fail2Ban\nLogFormat \"%h %l %u %t \\\"%r\\\" %>s %O \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" fail2ban\nCustomLog \\${APACHE_LOG_DIR}/access.log fail2ban\nErrorLog \\${APACHE_LOG_DIR}/error.log\nLogLevel warn\nEOF\n\nsudo systemctl reload apache2\n```\n\n## Backup and Disaster Recovery\n\n### Configuration Backup\n```bash\nsudo tee /usr/local/bin/fail2ban-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/fail2ban\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\necho \"Starting Fail2Ban backup...\"\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/fail2ban-config-${DATE}.tar.gz \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/\n\n# Export current ban list\nsudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g' > /tmp/jails.txt\nwhile read jail; do\n    sudo fail2ban-client status $jail | grep \"Banned IP list:\" > ${BACKUP_DIR}/banned-ips-${jail}-${DATE}.txt\ndone < /tmp/jails.txt\n\n# Keep last 30 backups\nfind ${BACKUP_DIR} -name \"fail2ban-*\" -type f -mtime +30 -delete\n\necho \"Fail2Ban backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-backup.sh\n\n# Schedule weekly backups\necho \"0 4 * * 0 root /usr/local/bin/fail2ban-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Fail2Ban service status\nsudo systemctl status fail2ban\nsudo journalctl -u fail2ban -f\n\n# Check jail status\nsudo fail2ban-client status\nsudo fail2ban-client status sshd\n\n# Test filter patterns\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check banned IPs\nsudo fail2ban-client status sshd\nsudo iptables -L -n | grep f2b\n\n# View Fail2Ban logs\nsudo tail -f /var/log/fail2ban.log\n\n# Unban IP address\nsudo fail2ban-client set sshd unbanip 192.168.1.100\n\n# Ban IP manually\nsudo fail2ban-client set sshd banip 10.0.0.1\n\n# Reload configuration\nsudo fail2ban-client reload\n\n# Test SSH jail\nsudo grep \"Failed password\" /var/log/auth.log | head -5\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check iptables rules\nsudo iptables -L f2b-sshd -n\nsudo iptables -L INPUT -n | grep f2b\n\n# Debug mode\nsudo fail2ban-server -f -v\n\n# Configuration validation\nsudo fail2ban-client -t\n\n# Check log file permissions\nls -la /var/log/auth.log\nls -la /var/log/nginx/access.log\n\n# Monitor real-time bans\nsudo tail -f /var/log/fail2ban.log | grep \"Ban\\|Unban\"\n\n# Check jail configuration\nsudo fail2ban-client get sshd maxretry\nsudo fail2ban-client get sshd bantime\nsudo fail2ban-client get sshd findtime\n```\n\n## Additional Resources\n\n- [Fail2Ban Documentation](https://fail2ban.readthedocs.io/)\n- [Fail2Ban GitHub](https://github.com/fail2ban/fail2ban)\n- [Filter Configuration Guide](https://fail2ban.readthedocs.io/en/stable/filters.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"fail2ban-installation-guide\" class=\"mobile-header\">Fail2Ban Installation Guide</h1>\n<p class=\"mobile-paragraph\">Intrusion prevention software that protects servers from brute-force attacks by monitoring log files and automatically banning malicious IP addresses. Essential security tool for any public-facing server.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">iptables or firewalld</li>\n<li class=\"mobile-list-item\">Log files to monitor (SSH, web server, etc.)</li>\n<li class=\"mobile-list-item\">Python 3.6+ (usually pre-installed)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Fail2Ban\nsudo apt install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\nfail2ban-client version</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Fail2Ban\nsudo yum install -y fail2ban fail2ban-systemd whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Fail2Ban\nsudo dnf install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create local jail configuration (never edit jail.conf directly)\nsudo tee /etc/fail2ban/jail.local &gt; /dev/null &lt;&lt;EOF\n# Fail2Ban Local Configuration\n\n[DEFAULT]\n# Ban settings\nbantime = 3600\nfindtime = 600\nmaxretry = 3\nbackend = auto\n\n# Notification settings\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n\n# Actions\naction = %(action_mwl)s\n\n# Ignore IP addresses (whitelist)\nignoreip = 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8\n\n# SSH protection\n[sshd]\nenabled = true\nport = ssh,2222\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n# HTTP/HTTPS brute force protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Apache protection\n[apache-auth]\nenabled = false\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log\nmaxretry = 3\n\n[apache-badbots]\nenabled = false\nfilter = apache-badbots\nlogpath = /var/log/apache2/access.log\nmaxretry = 2\n\n# Database protection\n[mysql]\nenabled = false\nfilter = mysql-auth\nlogpath = /var/log/mysql/error.log\nmaxretry = 3\nbantime = 7200\n\n[postgresql]\nenabled = false\nfilter = postgresql\nlogpath = /var/log/postgresql/postgresql-*-main.log\nmaxretry = 3\n\n# Mail server protection\n[postfix]\nenabled = false\nfilter = postfix\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n[dovecot]\nenabled = false\nfilter = dovecot\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n# FTP protection\n[vsftpd]\nenabled = false\nfilter = vsftpd\nlogpath = /var/log/vsftpd.log\nmaxretry = 3\n\n# Custom application protection\n[custom-app]\nenabled = false\nfilter = custom-app\nlogpath = /var/log/myapp/error.log\nmaxretry = 5\nbantime = 1800\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-filters\" class=\"mobile-header\">Custom Filters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create custom filter for web applications\nsudo tee /etc/fail2ban/filter.d/nginx-custom.conf &gt; /dev/null &lt;&lt;EOF\n# Custom NGINX filter for advanced protection\n\n[Definition]\nfailregex = \n    # Failed login attempts\n    ^&lt;HOST&gt; -.*POST.*(wp-login\\.php|login|signin|admin).*HTTP/[0-9\\.]+\\&quot; 200\n    # Directory traversal attempts\n    ^&lt;HOST&gt; -.*GET.*(\\.\\./|\\.\\.\\%2F).*HTTP/[0-9\\.]+\\&quot; 404\n    # SQL injection attempts  \n    ^&lt;HOST&gt; -.*GET.*(union|select|insert|cast|set|declare|drop|create|alter|delete|update|replace|truncate).*HTTP/[0-9\\.]+\\&quot; 200\n    # XSS attempts\n    ^&lt;HOST&gt; -.*GET.*(script|javascript|vbscript|onload|onerror|onclick).*HTTP/[0-9\\.]+\\&quot; 200\n    # Suspicious user agents\n    ^&lt;HOST&gt; -.*\\&quot;(.*sqlmap.*|.*nikto.*|.*nessus.*|.*openvas.*|.*python-requests.*|.*curl.*|.*wget.*)\\&quot;$\n    # Too many 404 errors\n    ^&lt;HOST&gt; -.*\\&quot; 404 \n\nignoreregex =\n    # Ignore legitimate requests\n    ^&lt;HOST&gt; -.*GET.*/favicon\\.ico.*HTTP/[0-9\\.]+\\&quot; 404\n    ^&lt;HOST&gt; -.*GET.*/robots\\.txt.*HTTP/[0-9\\.]+\\&quot; 404\nEOF\n\n# Create WordPress-specific filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = \n    # WordPress login failures\n    ^&lt;HOST&gt; -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\&quot; 200\n    # WordPress admin access attempts\n    ^&lt;HOST&gt; -.*GET.*/wp-admin.*HTTP/[0-9\\.]+\\&quot; 403\n    # XML-RPC attacks\n    ^&lt;HOST&gt; -.*POST.*/xmlrpc\\.php.*HTTP/[0-9\\.]+\\&quot; 200\n\nignoreregex =\n    # Ignore successful admin logins (adjust pattern as needed)\n    ^&lt;HOST&gt; -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\&quot; 302\nEOF\n\n# Add WordPress jail to jail.local\nsudo tee -a /etc/fail2ban/jail.local &gt; /dev/null &lt;&lt;EOF\n\n[wordpress]\nenabled = true\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nport = http,https\nmaxretry = 3\nbantime = 1800\nfindtime = 600\nEOF\n\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create advanced fail2ban configuration with multiple actions\nsudo tee /etc/fail2ban/action.d/telegram.conf &gt; /dev/null &lt;&lt;EOF\n# Telegram notification action\n\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = curl -s &quot;https://api.telegram.org/bot&lt;bot_token&gt;/sendMessage&quot; -d &quot;chat_id=&lt;chat_id&gt;&amp;text=🚫 Fail2Ban: &lt;name&gt; banned &lt;ip&gt; for &lt;failures&gt; failures&quot;\nactionunban = curl -s &quot;https://api.telegram.org/bot&lt;bot_token&gt;/sendMessage&quot; -d &quot;chat_id=&lt;chat_id&gt;&amp;text=✅ Fail2Ban: &lt;name&gt; unbanned &lt;ip&gt;&quot;\n\n[Init]\nbot_token = your_telegram_bot_token\nchat_id = your_telegram_chat_id\nEOF\n\n# Create comprehensive protection configuration\nsudo tee /etc/fail2ban/jail.d/comprehensive.conf &gt; /dev/null &lt;&lt;EOF\n# Comprehensive Security Configuration\n\n[DEFAULT]\n# Enhanced ban settings\nbantime.increment = true\nbantime.rndtime = 60\nbantime.maxtime = 86400\nbantime.factor = 2\nbantime.formula = ban.Time * (1&lt;&lt;(ban.Count if ban.Count&lt;20 else 20)) * banFactor\n\n# Multiple actions (ban + notify)\naction = %(action_mwl)s[dest=security@example.com]\n         telegram[bot_token=your_bot_token, chat_id=your_chat_id]\n\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd[mode=aggressive]\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 7200\nfindtime = 300\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nbantime = 3600\n\n[nginx-noproxy]\nenabled = true\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n# Protect against port scans\n[port-scan]\nenabled = true\nfilter = port-scan\nlogpath = /var/log/messages\nmaxretry = 1\nbantime = 86400\n\n# DNS amplification protection\n[named-refused]\nenabled = false\nfilter = named-refused\nlogpath = /var/log/messages\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-filters-for-applications\" class=\"mobile-header\">Custom Filters for Applications</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create filter for Node.js applications\nsudo tee /etc/fail2ban/filter.d/nodejs-auth.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*Authentication failed for.*from &lt;HOST&gt;.*$\n            ^.*Invalid login attempt.*IP: &lt;HOST&gt;.*$\n            ^.*Failed login.*remote_addr: &lt;HOST&gt;.*$\nignoreregex =\nEOF\n\n# Create filter for Grafana\nsudo tee /etc/fail2ban/filter.d/grafana.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*logger=context.*error=&quot;invalid username or password&quot;.*remote_addr=&lt;HOST&gt;\n            ^.*logger=context.*error=&quot;user not found&quot;.*remote_addr=&lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create filter for GitLab\nsudo tee /etc/fail2ban/filter.d/gitlab.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*Failed Login:.*IP: &lt;HOST&gt;.*$\n            ^.*Rack_Attack.*Throttle.*IP: &lt;HOST&gt;.*$\nignoreregex =\nEOF\n\n# Add application-specific jails\nsudo tee /etc/fail2ban/jail.d/applications.conf &gt; /dev/null &lt;&lt;EOF\n[nodejs-auth]\nenabled = false\nfilter = nodejs-auth\nlogpath = /var/log/nodejs/app.log\nmaxretry = 5\nbantime = 1800\n\n[grafana]\nenabled = false\nfilter = grafana\nlogpath = /var/log/grafana/grafana.log\nmaxretry = 5\nbantime = 3600\n\n[gitlab]\nenabled = false\nfilter = gitlab\nlogpath = /var/log/gitlab/gitlab-rails/production.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-management\" class=\"mobile-header\">Monitoring and Management</h2>\n<h3 id=\"fail2ban-management-script\" class=\"mobile-header\">Fail2Ban Management Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/fail2ban-manager.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\ncase &quot;${1}&quot; in\n    &quot;status&quot;)\n        echo &quot;=== Fail2Ban Status ===&quot;\n        sudo fail2ban-client status\n        echo &quot;&quot;\n        echo &quot;=== Active Jails ===&quot;\n        for jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n            echo &quot;Jail: $jail&quot;\n            sudo fail2ban-client status $jail\n            echo &quot;&quot;\n        done\n        ;;\n        \n    &quot;unban&quot;)\n        IP=&quot;${2}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 unban &lt;ip_address&gt;&quot;\n            exit 1\n        fi\n        \n        echo &quot;Unbanning IP: $IP from all jails&quot;\n        for jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n            sudo fail2ban-client set $jail unbanip $IP 2&gt;/dev/null &amp;&amp; echo &quot;  - Unbanned from $jail&quot;\n        done\n        ;;\n        \n    &quot;ban&quot;)\n        IP=&quot;${2}&quot;\n        JAIL=&quot;${3:-sshd}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 ban &lt;ip_address&gt; [jail_name]&quot;\n            exit 1\n        fi\n        \n        echo &quot;Banning IP: $IP in jail: $JAIL&quot;\n        sudo fail2ban-client set $JAIL banip $IP\n        ;;\n        \n    &quot;whitelist&quot;)\n        IP=&quot;${2}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 whitelist &lt;ip_address&gt;&quot;\n            exit 1\n        fi\n        \n        echo &quot;Adding $IP to whitelist&quot;\n        sudo sed -i &quot;s/ignoreip = .*/&amp; $IP/&quot; /etc/fail2ban/jail.local\n        sudo systemctl restart fail2ban\n        ;;\n        \n    &quot;logs&quot;)\n        JAIL=&quot;${2:-sshd}&quot;\n        echo &quot;Recent bans for jail: $JAIL&quot;\n        sudo grep &quot;Ban\\|Unban&quot; /var/log/fail2ban.log | grep &quot;$JAIL&quot; | tail -20\n        ;;\n        \n    &quot;stats&quot;)\n        echo &quot;=== Fail2Ban Statistics ===&quot;\n        echo &quot;Total bans today: $(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Ban &quot;)&quot;\n        echo &quot;Total unbans today: $(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Unban &quot;)&quot;\n        echo &quot;&quot;\n        echo &quot;Top banned IPs (last 1000 entries):&quot;\n        sudo tail -1000 /var/log/fail2ban.log | grep &quot;Ban &quot; | awk &#039;{print $(NF-1)}&#039; | sort | uniq -c | sort -nr | head -10\n        ;;\n        \n    &quot;test&quot;)\n        JAIL=&quot;${2:-sshd}&quot;\n        LOG_FILE=&quot;${3:-/var/log/auth.log}&quot;\n        echo &quot;Testing filter for jail: $JAIL&quot;\n        echo &quot;Log file: $LOG_FILE&quot;\n        sudo fail2ban-regex $LOG_FILE /etc/fail2ban/filter.d/${JAIL}.conf\n        ;;\n        \n    &quot;reload&quot;)\n        echo &quot;Reloading Fail2Ban configuration...&quot;\n        sudo fail2ban-client reload\n        echo &quot;Configuration reloaded&quot;\n        ;;\n        \n    *)\n        echo &quot;Fail2Ban Management Script&quot;\n        echo &quot;Usage: $0 {status|unban|ban|whitelist|logs|stats|test|reload}&quot;\n        echo &quot;&quot;\n        echo &quot;Examples:&quot;\n        echo &quot;  $0 status                    # Show status of all jails&quot;\n        echo &quot;  $0 unban 192.168.1.100      # Unban IP from all jails&quot;\n        echo &quot;  $0 ban 10.0.0.1 sshd        # Ban IP in specific jail&quot;\n        echo &quot;  $0 whitelist 192.168.1.50   # Add IP to whitelist&quot;\n        echo &quot;  $0 logs sshd                # Show recent logs for jail&quot;\n        echo &quot;  $0 stats                    # Show ban statistics&quot;\n        echo &quot;  $0 test sshd                # Test jail filter&quot;\n        echo &quot;  $0 reload                   # Reload configuration&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-manager.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-monitoring\" class=\"mobile-header\">Security Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive monitoring script\nsudo tee /usr/local/bin/fail2ban-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/fail2ban-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# Check Fail2Ban service\nif systemctl is-active fail2ban &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Fail2Ban service is running&quot;\nelse\n    log_message &quot;✗ Fail2Ban service is not running&quot;\n    exit 1\nfi\n\n# Check jail status\nACTIVE_JAILS=$(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039; | wc -w)\nlog_message &quot;ℹ Active jails: ${ACTIVE_JAILS}&quot;\n\n# Check today&#039;s bans\nBANS_TODAY=$(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Ban &quot; 2&gt;/dev/null || echo &quot;0&quot;)\nUNBANS_TODAY=$(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Unban &quot; 2&gt;/dev/null || echo &quot;0&quot;)\nlog_message &quot;ℹ Today&#039;s activity: ${BANS_TODAY} bans, ${UNBANS_TODAY} unbans&quot;\n\n# Check currently banned IPs\nTOTAL_BANNED=0\nfor jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n    JAIL_BANNED=$(sudo fail2ban-client status $jail | grep &quot;Currently banned:&quot; | awk &#039;{print $3}&#039;)\n    TOTAL_BANNED=$((TOTAL_BANNED + JAIL_BANNED))\ndone\n\nlog_message &quot;ℹ Currently banned IPs: ${TOTAL_BANNED}&quot;\n\n# Check for configuration errors\nif ! sudo fail2ban-client status &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;⚠ Fail2Ban configuration errors detected&quot;\n    sudo fail2ban-client status 2&gt;&amp;1 | head -5 &gt;&gt; ${MONITOR_LOG}\nfi\n\n# Check log file accessibility\nfor jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n    LOG_PATH=$(sudo fail2ban-client get $jail logpath 2&gt;/dev/null)\n    if [ -n &quot;$LOG_PATH&quot; ] &amp;&amp; [ ! -r &quot;$LOG_PATH&quot; ]; then\n        log_message &quot;⚠ Cannot read log file for $jail: $LOG_PATH&quot;\n    fi\ndone\n\nlog_message &quot;Fail2Ban monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-monitor.sh\n\n# Schedule monitoring every 15 minutes\necho &quot;*/15 * * * * root /usr/local/bin/fail2ban-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"geographic-blocking-integration\" class=\"mobile-header\">Geographic Blocking Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install GeoIP for country-based blocking\nsudo apt install -y geoip-database geoip-bin  # Ubuntu/Debian\nsudo yum install -y GeoIP GeoIP-data          # RHEL/CentOS\n\n# Create geographic blocking filter\nsudo tee /etc/fail2ban/filter.d/geoip-block.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\n# Block connections from specific countries\nfailregex = ^&lt;HOST&gt; -\nignoreregex =\n\n[Init]\n# Countries to block (ISO country codes)\ncountries = CN,RU,KP,IR\nEOF\n\n# Create action for geographic blocking\nsudo tee /etc/fail2ban/action.d/geoip-block.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nactioncheck = \nactionstart = \nactionstop = \nactionban = COUNTRY=$(geoiplookup &lt;ip&gt; | awk -F: &#039;{print $2}&#039; | awk &#039;{print $1}&#039;); if echo &quot;CN RU KP IR&quot; | grep -q &quot;$COUNTRY&quot;; then iptables -A f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP; fi\nactionunban = iptables -D f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP 2&gt;/dev/null || true\n\n[Init]\nname = geoip-block\nEOF\n\n# Add geographic blocking jail\nsudo tee /etc/fail2ban/jail.d/geoip.conf &gt; /dev/null &lt;&lt;EOF\n[geoip-block]\nenabled = false  # Enable if needed\nfilter = geoip-block\naction = geoip-block\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nbantime = 86400\nfindtime = 60\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"web-server-integration\" class=\"mobile-header\">Web Server Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># NGINX: Enable logging for Fail2Ban\nsudo tee -a /etc/nginx/nginx.conf &gt; /dev/null &lt;&lt;EOF\n\nhttp {\n    # Log format for Fail2Ban\n    log_format fail2ban &#039;\\$remote_addr - \\$remote_user [\\$time_local] &#039;\n                       &#039;&quot;\\$request&quot; \\$status \\$body_bytes_sent &#039;\n                       &#039;&quot;\\$http_referer&quot; &quot;\\$http_user_agent&quot;&#039;;\n    \n    # Enable access and error logging\n    access_log /var/log/nginx/access.log fail2ban;\n    error_log /var/log/nginx/error.log warn;\n}\nEOF\n\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx\n\n# Apache: Enable logging\nsudo tee -a /etc/apache2/apache2.conf &gt; /dev/null &lt;&lt;EOF\n\n# Enhanced logging for Fail2Ban\nLogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %O \\&quot;%{Referer}i\\&quot; \\&quot;%{User-Agent}i\\&quot;&quot; fail2ban\nCustomLog \\${APACHE_LOG_DIR}/access.log fail2ban\nErrorLog \\${APACHE_LOG_DIR}/error.log\nLogLevel warn\nEOF\n\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"configuration-backup\" class=\"mobile-header\">Configuration Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/fail2ban-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/fail2ban&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\necho &quot;Starting Fail2Ban backup...&quot;\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/fail2ban-config-${DATE}.tar.gz \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/\n\n# Export current ban list\nsudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039; &gt; /tmp/jails.txt\nwhile read jail; do\n    sudo fail2ban-client status $jail | grep &quot;Banned IP list:&quot; &gt; ${BACKUP_DIR}/banned-ips-${jail}-${DATE}.txt\ndone &lt; /tmp/jails.txt\n\n# Keep last 30 backups\nfind ${BACKUP_DIR} -name &quot;fail2ban-*&quot; -type f -mtime +30 -delete\n\necho &quot;Fail2Ban backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-backup.sh\n\n# Schedule weekly backups\necho &quot;0 4 * * 0 root /usr/local/bin/fail2ban-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Fail2Ban service status\nsudo systemctl status fail2ban\nsudo journalctl -u fail2ban -f\n\n# Check jail status\nsudo fail2ban-client status\nsudo fail2ban-client status sshd\n\n# Test filter patterns\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check banned IPs\nsudo fail2ban-client status sshd\nsudo iptables -L -n | grep f2b\n\n# View Fail2Ban logs\nsudo tail -f /var/log/fail2ban.log\n\n# Unban IP address\nsudo fail2ban-client set sshd unbanip 192.168.1.100\n\n# Ban IP manually\nsudo fail2ban-client set sshd banip 10.0.0.1\n\n# Reload configuration\nsudo fail2ban-client reload\n\n# Test SSH jail\nsudo grep &quot;Failed password&quot; /var/log/auth.log | head -5\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check iptables rules\nsudo iptables -L f2b-sshd -n\nsudo iptables -L INPUT -n | grep f2b\n\n# Debug mode\nsudo fail2ban-server -f -v\n\n# Configuration validation\nsudo fail2ban-client -t\n\n# Check log file permissions\nls -la /var/log/auth.log\nls -la /var/log/nginx/access.log\n\n# Monitor real-time bans\nsudo tail -f /var/log/fail2ban.log | grep &quot;Ban\\|Unban&quot;\n\n# Check jail configuration\nsudo fail2ban-client get sshd maxretry\nsudo fail2ban-client get sshd bantime\nsudo fail2ban-client get sshd findtime</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2Ban Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2Ban GitHub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/en/stable/filters.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Filter Configuration Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2249,"lastBuilt":"2025-09-14T18:12:06.210Z"},{"name":"keycloak","displayName":"Keycloak","slug":"keycloak","description":"Repo for keycloak","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/keycloak","updatedAt":"2025-09-08T03:10:05Z","createdAt":"2025-09-08T03:09:55Z","readmeRaw":"## 👋 Welcome to keycloak 🚀  \n\nkeycloak README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-keycloak\" class=\"mobile-header\">👋 Welcome to keycloak 🚀  </h2>\n<p class=\"mobile-paragraph\">keycloak README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T18:12:17.971Z"},{"name":"openvpn","displayName":"Openvpn","slug":"openvpn","description":"Repo for openvpn","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/openvpn","updatedAt":"2025-09-08T03:13:07Z","createdAt":"2025-09-08T03:12:57Z","readmeRaw":"## 👋 Welcome to openvpn 🚀  \n\nopenvpn README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-openvpn\" class=\"mobile-header\">👋 Welcome to openvpn 🚀  </h2>\n<p class=\"mobile-paragraph\">openvpn README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T18:12:14.907Z"}]},"__N_SSG":true}