{"pageProps":{"guide":{"name":"databases","displayName":"Databases","slug":"databases","description":"Repo for databases","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/databases","updatedAt":"2025-09-14T01:29:50Z","createdAt":"2023-08-28T03:47:28Z","readmeRaw":"# Database Installation Guide\n\nComprehensive installation and configuration guide for popular database management systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more. Complete with security hardening and performance optimization for production environments.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for production\n- SSD storage recommended for database files\n- Network connectivity for replication setups (if applicable)\n\n## MySQL/MariaDB Installation\n\n### Ubuntu/Debian\n```bash\n# Update system\nsudo apt update\n\n# Install MariaDB (recommended over MySQL)\nsudo apt install -y mariadb-server mariadb-client\n\n# Or install MySQL\nsudo apt install -y mysql-server mysql-client\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Enable and start service\nsudo systemctl enable --now mariadb  # or mysql\n\n# Verify installation\nmysql --version\nsudo systemctl status mariadb\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install MariaDB from official repository\nsudo tee /etc/yum.repos.d/MariaDB.repo > /dev/null <<EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.its.dal.ca/mariadb/yum/10.11/rhel\\$releasever-\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.its.dal.ca/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nEOF\n\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### MariaDB Production Configuration\n```bash\n# Create optimized configuration\nsudo tee /etc/mysql/mariadb.conf.d/50-server.cnf > /dev/null <<EOF\n[mysqld]\n# Connection and thread handling\nmax_connections = 500\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 4G  # 70-80% of RAM\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_io_capacity = 2000\ninnodb_io_capacity_max = 4000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\ninnodb_open_files = 8192\n\n# Query cache (for read-heavy workloads)\nquery_cache_type = 1\nquery_cache_size = 256M\nquery_cache_limit = 2M\n\n# Temporary tables\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nsync_binlog = 1\nexpire_logs_days = 7\nbinlog_cache_size = 1M\n\n# Slow query log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\nlog_queries_not_using_indexes = 1\n\n# Security\nbind-address = 127.0.0.1  # Change for network access\nskip_name_resolve = 1\nlocal_infile = 0\n\n# SSL configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\nEOF\n\nsudo systemctl restart mariadb\n```\n\n### MySQL/MariaDB Security Hardening\n```bash\n# Create dedicated database user with limited privileges\nmysql -u root -p <<EOF\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create application user\nCREATE USER 'appuser'@'localhost' IDENTIFIED BY 'secure_app_password_2024';\nCREATE USER 'appuser'@'192.168.1.%' IDENTIFIED BY 'secure_app_password_2024';\n\n-- Grant minimal privileges\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'localhost';\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'192.168.1.%';\n\n-- Create read-only user for backups\nCREATE USER 'backup'@'localhost' IDENTIFIED BY 'backup_password_2024';\nGRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, TRIGGER ON *.* TO 'backup'@'localhost';\n\n-- Create replication user\nCREATE USER 'replication'@'%' IDENTIFIED BY 'replication_password_2024';\nGRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';\n\n-- Remove default users and databases\nDROP DATABASE IF EXISTS test;\nDELETE FROM mysql.user WHERE User='';\nDELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\n\n-- Secure privileges\nFLUSH PRIVILEGES;\nEOF\n\n# Generate SSL certificates for MySQL\nsudo mkdir -p /etc/mysql/ssl\ncd /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out ca-key.pem 4096\nsudo openssl req -new -x509 -nodes -days 3650 -key ca-key.pem -out ca-cert.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MySQL-CA\"\n\n# Create server certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout server-key.pem -out server-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mysql.example.com\"\nsudo openssl x509 -req -days 365 -set_serial 01 -in server-req.pem -out server-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout client-key.pem -out client-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mysql-client\"\nsudo openssl x509 -req -days 365 -set_serial 02 -in client-req.pem -out client-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Set permissions\nsudo chown mysql:mysql /etc/mysql/ssl/*\nsudo chmod 600 /etc/mysql/ssl/*key.pem\nsudo chmod 644 /etc/mysql/ssl/*.pem\n\nsudo systemctl restart mariadb\n```\n\n## PostgreSQL Installation\n\n### Ubuntu/Debian PostgreSQL Setup\n```bash\n# Install PostgreSQL official repository\nsudo apt install -y wget ca-certificates\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" | sudo tee /etc/apt/sources.list.d/pgdg.list\n\n# Update and install PostgreSQL 16\nsudo apt update\nsudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16\n\n# Enable and start service\nsudo systemctl enable --now postgresql\n\n# Configure PostgreSQL\nsudo -u postgres psql <<EOF\n-- Create application database\nCREATE DATABASE myapp WITH ENCODING='UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0;\n\n-- Create application user\nCREATE USER appuser WITH ENCRYPTED PASSWORD 'secure_app_password_2024';\nGRANT ALL PRIVILEGES ON DATABASE myapp TO appuser;\n\n-- Create read-only user\nCREATE USER readonly WITH ENCRYPTED PASSWORD 'readonly_password_2024';\nGRANT CONNECT ON DATABASE myapp TO readonly;\n\\c myapp\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\n-- Security settings\nALTER SYSTEM SET password_encryption = 'scram-sha-256';\nSELECT pg_reload_conf();\nEOF\n```\n\n### RHEL/CentOS/Rocky Linux PostgreSQL\n```bash\n# Install PostgreSQL repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL 16\nsudo yum install -y postgresql16-server postgresql16 postgresql16-contrib postgresql16-devel\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable --now postgresql-16\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5432/tcp\nsudo firewall-cmd --reload\n```\n\n### PostgreSQL Production Configuration\n```bash\n# Configure PostgreSQL for production\nsudo tee /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n# PostgreSQL 16 Production Configuration\n\n# Connection settings\nlisten_addresses = 'localhost'  # Change to '*' for network access\nport = 5432\nmax_connections = 200\nshared_buffers = 2GB  # 25% of RAM\neffective_cache_size = 8GB  # 75% of RAM\n\n# Memory settings\nwork_mem = 16MB\nmaintenance_work_mem = 512MB\ndynamic_shared_memory_type = posix\n\n# WAL settings\nwal_level = replica\nwal_buffers = 64MB\ncheckpoint_completion_target = 0.9\nmax_wal_size = 4GB\nmin_wal_size = 1GB\ncheckpoint_timeout = 15min\n\n# Query planner\nrandom_page_cost = 1.1  # For SSD\neffective_io_concurrency = 200\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\nmax_parallel_maintenance_workers = 4\n\n# Logging\nlog_destination = 'stderr'\nlogging_collector = on\nlog_directory = 'log'\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\nlog_min_duration_statement = 1000  # Log slow queries\nlog_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '\nlog_statement = 'ddl'  # Log DDL statements\nlog_lock_waits = on\n\n# SSL configuration\nssl = on\nssl_cert_file = '/var/lib/pgsql/16/data/ssl/server.crt'\nssl_key_file = '/var/lib/pgsql/16/data/ssl/server.key'\nssl_ca_file = '/var/lib/pgsql/16/data/ssl/ca.crt'\nssl_min_protocol_version = 'TLSv1.2'\nssl_prefer_server_ciphers = on\n\n# Security\npassword_encryption = scram-sha-256\nkrb_server_keyfile = ''\ndb_user_namespace = off\nrow_security = on\n\n# Autovacuum\nautovacuum = on\nautovacuum_max_workers = 4\nautovacuum_naptime = 1min\nautovacuum_vacuum_threshold = 50\nautovacuum_analyze_threshold = 50\nautovacuum_vacuum_scale_factor = 0.1\nautovacuum_analyze_scale_factor = 0.05\n\n# Background writer\nbgwriter_delay = 200ms\nbgwriter_lru_maxpages = 100\nbgwriter_lru_multiplier = 2.0\nbgwriter_flush_after = 512kB\n\n# Checkpointer\ncheckpoint_flush_after = 256kB\n\n# Statistics\ntrack_activities = on\ntrack_counts = on\ntrack_io_timing = on\ntrack_functions = all\nstats_temp_directory = 'pg_stat_tmp'\nEOF\n\n# Configure client authentication\nsudo tee /var/lib/pgsql/16/data/pg_hba.conf > /dev/null <<EOF\n# PostgreSQL Client Authentication Configuration\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# Local connections\nlocal   all             postgres                                peer\nlocal   all             all                                     scram-sha-256\n\n# IPv4 local connections\nhost    all             all             127.0.0.1/32            scram-sha-256\n\n# IPv6 local connections  \nhost    all             all             ::1/128                 scram-sha-256\n\n# Network connections (if needed)\nhostssl myapp           appuser         192.168.1.0/24          scram-sha-256\nhostssl myapp           readonly        192.168.1.0/24          scram-sha-256\n\n# Replication connections\nhostssl replication     replication     192.168.1.0/24          scram-sha-256\n\n# Deny all other connections\nhost    all             all             0.0.0.0/0               reject\nEOF\n\n# Generate SSL certificates\nsudo mkdir -p /var/lib/pgsql/16/data/ssl\ncd /var/lib/pgsql/16/data/ssl\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj \"/C=US/ST=State/L=City/O=Organization/CN=PostgreSQL-CA\"\n\nsudo openssl genrsa -out server.key 4096\nsudo openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=postgres.example.com\"\nsudo openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\nsudo chown postgres:postgres /var/lib/pgsql/16/data/ssl/*\nsudo chmod 600 /var/lib/pgsql/16/data/ssl/*.key\nsudo chmod 644 /var/lib/pgsql/16/data/ssl/*.crt\n\nsudo systemctl restart postgresql-16\n```\n\n### PostgreSQL Security Hardening\n```bash\n# Advanced security configuration\nsudo -u postgres psql <<EOF\n-- Enable row-level security\nALTER SYSTEM SET row_security = on;\n\n-- Configure logging for security\nALTER SYSTEM SET log_statement = 'all';\nALTER SYSTEM SET log_connections = on;\nALTER SYSTEM SET log_disconnections = on;\nALTER SYSTEM SET log_lock_waits = on;\nALTER SYSTEM SET log_temp_files = 0;\n\n-- Password policies\nALTER SYSTEM SET password_encryption = 'scram-sha-256';\n\n-- Create roles with specific privileges\nCREATE ROLE app_read;\nGRANT CONNECT ON DATABASE myapp TO app_read;\nGRANT USAGE ON SCHEMA public TO app_read;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;\n\nCREATE ROLE app_write;\nGRANT app_read TO app_write;\nGRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_write;\n\n-- Create application-specific user\nCREATE USER myapp_user WITH PASSWORD 'secure_password_2024';\nGRANT app_write TO myapp_user;\n\n-- Security functions\nCREATE OR REPLACE FUNCTION audit_trigger_function()\nRETURNS TRIGGER AS \\$\\$\nBEGIN\n    INSERT INTO audit_log (table_name, operation, old_values, new_values, user_name, timestamp)\n    VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW), current_user, now());\n    RETURN COALESCE(NEW, OLD);\nEND;\n\\$\\$ LANGUAGE plpgsql;\n\n-- Reload configuration\nSELECT pg_reload_conf();\nEOF\n\n# Configure connection limits\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n\n# Connection limiting per user/database\n# ALTER USER myapp_user CONNECTION LIMIT 50;\n# ALTER DATABASE myapp CONNECTION LIMIT 100;\nEOF\n```\n\n## MongoDB Installation\n\n### Ubuntu/Debian MongoDB Setup\n```bash\n# Import MongoDB public GPG key\nwget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -\n\n# Add MongoDB repository\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update and install MongoDB\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Verify installation\nmongosh --eval 'db.runCommand(\"connectionStatus\")'\n```\n\n### RHEL/CentOS/Rocky Linux MongoDB\n```bash\n# Add MongoDB repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo > /dev/null <<EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload\n```\n\n### MongoDB Production Configuration\n```bash\n# Create secure MongoDB configuration\nsudo tee /etc/mongod.conf > /dev/null <<EOF\n# MongoDB Production Configuration\n\nstorage:\n  dbPath: /var/lib/mongo\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 4  # 50% of RAM\n      journalCompressor: snappy\n      directoryForIndexes: false\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n  quiet: false\n  logRotate: reopen\n  component:\n    accessControl:\n      verbosity: 1\n    command:\n      verbosity: 1\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Change for network access\n  maxIncomingConnections: 1000\n  compression:\n    compressors: snappy,zstd\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb/mongodb.pem\n    CAFile: /etc/ssl/mongodb/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nsecurity:\n  authorization: enabled\n  keyFile: /etc/mongodb/mongodb-keyfile\n  clusterAuthMode: x509\n  javascriptEnabled: false\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 0.02\n\nreplication:\n  replSetName: rs0\n  enableMajorityReadConcern: true\n\nsharding:\n  clusterRole: shardsvr  # or configsvr for config servers\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n  timeZoneInfo: /usr/share/zoneinfo\n\nsetParameter:\n  authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256\n  scramIterationCount: 15000\n  failIndexKeyTooLong: false\n  notablescan: 1  # Disable table scans in production\nEOF\n\n# Create MongoDB keyfile for replica set authentication\nsudo openssl rand -base64 756 | sudo tee /etc/mongodb/mongodb-keyfile\nsudo chmod 600 /etc/mongodb/mongodb-keyfile\nsudo chown mongod:mongod /etc/mongodb/mongodb-keyfile\n\n# Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/ssl/mongodb\ncd /etc/ssl/mongodb\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA\"\n\nsudo openssl genrsa -out mongodb.key 4096\nsudo openssl req -new -key mongodb.key -out mongodb.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com\"\nsudo openssl x509 -req -days 365 -in mongodb.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out mongodb.crt\n\n# Combine certificate and key for MongoDB\nsudo cat mongodb.crt mongodb.key | sudo tee mongodb.pem\nsudo chmod 600 /etc/ssl/mongodb/*.key /etc/ssl/mongodb/*.pem\nsudo chown mongod:mongod /etc/ssl/mongodb/*\n\nsudo systemctl restart mongod\n```\n\n### MongoDB Security Setup\n```bash\n# Initialize MongoDB security\nmongosh --ssl --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem --sslCAFile /etc/ssl/mongodb/ca.pem <<EOF\n// Create admin user\nuse admin\ndb.createUser({\n  user: \"admin\",\n  pwd: \"secure_admin_password_2024\",\n  roles: [\n    { role: \"userAdminAnyDatabase\", db: \"admin\" },\n    { role: \"readWriteAnyDatabase\", db: \"admin\" },\n    { role: \"dbAdminAnyDatabase\", db: \"admin\" },\n    { role: \"clusterAdmin\", db: \"admin\" }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: \"appuser\",\n  pwd: \"secure_app_password_2024\",\n  roles: [\n    { role: \"readWrite\", db: \"myapp\" }\n  ]\n})\n\n// Create read-only user\ndb.createUser({\n  user: \"readonly\",\n  pwd: \"readonly_password_2024\",\n  roles: [\n    { role: \"read\", db: \"myapp\" }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: \"backup\",\n  pwd: \"backup_password_2024\",\n  roles: [\n    { role: \"backup\", db: \"admin\" },\n    { role: \"restore\", db: \"admin\" }\n  ]\n})\n\n// Initialize replica set (if using replication)\nrs.initiate({\n  _id: \"rs0\",\n  members: [\n    { _id: 0, host: \"mongodb1.example.com:27017\", priority: 2 },\n    { _id: 1, host: \"mongodb2.example.com:27017\", priority: 1 },\n    { _id: 2, host: \"mongodb3.example.com:27017\", priority: 1, arbiterOnly: true }\n  ]\n})\nEOF\n```\n\n## Redis Installation and Configuration\n\n### Redis Setup (All Distributions)\n```bash\n# Ubuntu/Debian\nsudo apt install -y redis-server redis-tools\n\n# RHEL/CentOS\nsudo yum install -y redis\n\n# Fedora\nsudo dnf install -y redis\n\n# Arch Linux\nsudo pacman -S redis\n\n# Configure Redis for production\nsudo tee /etc/redis/redis.conf > /dev/null <<EOF\n# Redis Production Configuration\n\n# Network\nbind 127.0.0.1 ::1  # Change for network access\nport 6379\ntcp-backlog 511\ntimeout 300\ntcp-keepalive 300\n\n# Security\nrequirepass redis_secure_password_2024\nrename-command FLUSHDB \"FLUSHDB_9a8b7c6d5e4f3g2h1\"\nrename-command FLUSHALL \"FLUSHALL_h1g2f3e4d5c6b7a8\"\nrename-command DEBUG \"DEBUG_8a7b6c5d4e3f2g1h\"\nrename-command CONFIG \"CONFIG_1h2g3f4e5d6c7b8a\"\n\n# SSL/TLS (Redis 6.0+)\ntls-port 6380\nport 0  # Disable non-TLS port\ntls-cert-file /etc/redis/tls/redis.crt\ntls-key-file /etc/redis/tls/redis.key\ntls-ca-cert-file /etc/redis/tls/ca.crt\ntls-protocols \"TLSv1.2 TLSv1.3\"\ntls-prefer-server-ciphers yes\n\n# Memory management\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 5\n\n# Persistence\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\nrdbchecksum yes\ndbfilename redis.rdb\ndir /var/lib/redis/\n\n# AOF (Append Only File)\nappendonly yes\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\nsyslog-enabled yes\nsyslog-ident redis\n\n# Slow log\nslowlog-log-slower-than 10000\nslowlog-max-len 128\n\n# Latency monitoring\nlatency-monitor-threshold 100\n\n# Client output buffer limits\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Advanced configuration\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\n\n# Lua scripting\nlua-time-limit 5000\nEOF\n\n# Generate Redis TLS certificates\nsudo mkdir -p /etc/redis/tls\ncd /etc/redis/tls\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj \"/C=US/ST=State/L=City/O=Organization/CN=Redis-CA\"\n\nsudo openssl genrsa -out redis.key 4096\nsudo openssl req -new -key redis.key -out redis.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=redis.example.com\"\nsudo openssl x509 -req -days 365 -in redis.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out redis.crt\n\nsudo chown redis:redis /etc/redis/tls/*\nsudo chmod 600 /etc/redis/tls/*.key\nsudo chmod 644 /etc/redis/tls/*.crt\n\nsudo systemctl restart redis-server\n```\n\n## Database Monitoring and Maintenance\n\n### Comprehensive Database Monitoring\n```bash\nsudo tee /usr/local/bin/database-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/database-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# MySQL/MariaDB monitoring\nif command -v mysql >/dev/null 2>&1 && systemctl is-active mariadb >/dev/null 2>&1; then\n    log_message \"=== MySQL/MariaDB Monitoring ===\"\n    \n    # Connection count\n    MYSQL_CONNECTIONS=$(mysql -e \"SHOW STATUS LIKE 'Threads_connected';\" | tail -1 | awk '{print $2}')\n    MYSQL_MAX_CONNECTIONS=$(mysql -e \"SHOW VARIABLES LIKE 'max_connections';\" | tail -1 | awk '{print $2}')\n    log_message \"MySQL connections: ${MYSQL_CONNECTIONS}/${MYSQL_MAX_CONNECTIONS}\"\n    \n    # Query performance\n    SLOW_QUERIES=$(mysql -e \"SHOW STATUS LIKE 'Slow_queries';\" | tail -1 | awk '{print $2}')\n    log_message \"MySQL slow queries: ${SLOW_QUERIES}\"\n    \n    # Buffer pool hit ratio\n    BUFFER_HIT_RATIO=$(mysql -e \"\n      SELECT ROUND((1 - (Innodb_buffer_pool_reads / Innodb_buffer_pool_read_requests)) * 100, 2) as hit_ratio\n      FROM INFORMATION_SCHEMA.GLOBAL_STATUS \n      WHERE VARIABLE_NAME IN ('Innodb_buffer_pool_reads', 'Innodb_buffer_pool_read_requests');\" | tail -1)\n    log_message \"InnoDB buffer pool hit ratio: ${BUFFER_HIT_RATIO}%\"\nfi\n\n# PostgreSQL monitoring\nif command -v psql >/dev/null 2>&1 && systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    log_message \"=== PostgreSQL Monitoring ===\"\n    \n    # Connection count\n    PG_CONNECTIONS=$(sudo -u postgres psql -t -c \"SELECT count(*) FROM pg_stat_activity;\")\n    PG_MAX_CONNECTIONS=$(sudo -u postgres psql -t -c \"SHOW max_connections;\")\n    log_message \"PostgreSQL connections: ${PG_CONNECTIONS}/${PG_MAX_CONNECTIONS}\"\n    \n    # Database size\n    PG_DB_SIZE=$(sudo -u postgres psql -t -c \"SELECT pg_size_pretty(pg_database_size('myapp'));\")\n    log_message \"PostgreSQL database size: ${PG_DB_SIZE}\"\n    \n    # Cache hit ratio\n    PG_CACHE_HIT=$(sudo -u postgres psql -t -c \"\n      SELECT round(sum(blks_hit)*100.0/sum(blks_hit+blks_read), 2) \n      FROM pg_stat_database WHERE datname='myapp';\")\n    log_message \"PostgreSQL cache hit ratio: ${PG_CACHE_HIT}%\"\n    \n    # Long running queries\n    LONG_QUERIES=$(sudo -u postgres psql -t -c \"\n      SELECT count(*) FROM pg_stat_activity \n      WHERE state = 'active' AND now() - query_start > interval '5 minutes';\")\n    log_message \"PostgreSQL long-running queries: ${LONG_QUERIES}\"\nfi\n\n# MongoDB monitoring\nif command -v mongosh >/dev/null 2>&1 && systemctl is-active mongod >/dev/null 2>&1; then\n    log_message \"=== MongoDB Monitoring ===\"\n    \n    # Connection count\n    MONGO_CONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.current\")\n    MONGO_MAX_CONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.available\")\n    log_message \"MongoDB connections: ${MONGO_CONNECTIONS}/${MONGO_MAX_CONNECTIONS}\"\n    \n    # Database statistics\n    MONGO_DB_SIZE=$(mongosh myapp --quiet --eval \"Math.round(db.stats().dataSize / 1024 / 1024) + ' MB'\")\n    log_message \"MongoDB database size: ${MONGO_DB_SIZE}\"\n    \n    # OpLog status (for replica sets)\n    if mongosh admin --quiet --eval \"rs.status().ok\" 2>/dev/null | grep -q \"1\"; then\n        OPLOG_SIZE=$(mongosh local --quiet --eval \"Math.round(db.oplog.rs.stats().maxSize / 1024 / 1024) + ' MB'\")\n        log_message \"MongoDB OpLog size: ${OPLOG_SIZE}\"\n    fi\nfi\n\n# Redis monitoring\nif command -v redis-cli >/dev/null 2>&1 && systemctl is-active redis >/dev/null 2>&1; then\n    log_message \"=== Redis Monitoring ===\"\n    \n    # Memory usage\n    REDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\n    REDIS_MAX_MEMORY=$(redis-cli config get maxmemory | tail -1)\n    log_message \"Redis memory usage: ${REDIS_MEMORY} / ${REDIS_MAX_MEMORY}\"\n    \n    # Connected clients\n    REDIS_CLIENTS=$(redis-cli info clients | grep connected_clients: | cut -d: -f2)\n    log_message \"Redis connected clients: ${REDIS_CLIENTS}\"\n    \n    # Hit ratio\n    REDIS_HITS=$(redis-cli info stats | grep keyspace_hits: | cut -d: -f2)\n    REDIS_MISSES=$(redis-cli info stats | grep keyspace_misses: | cut -d: -f2)\n    if [ ${REDIS_MISSES} -gt 0 ]; then\n        REDIS_HIT_RATIO=$(echo \"scale=2; ${REDIS_HITS} / (${REDIS_HITS} + ${REDIS_MISSES}) * 100\" | bc)\n        log_message \"Redis hit ratio: ${REDIS_HIT_RATIO}%\"\n    fi\nfi\n\nlog_message \"Database monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/database-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n### Database Backup Automation\n```bash\nsudo tee /usr/local/bin/database-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/databases\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{mysql,postgresql,mongodb,redis}\n\n# MySQL/MariaDB backup\nif command -v mysql >/dev/null 2>&1 && systemctl is-active mariadb >/dev/null 2>&1; then\n    echo \"Backing up MySQL/MariaDB...\"\n    \n    # Full backup with all databases\n    mysqldump --all-databases --single-transaction --routines --triggers --events \\\n      --master-data=2 --flush-logs --delete-master-logs \\\n      > ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Compress backup\n    gzip ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Individual database backup\n    mysqldump --single-transaction --routines --triggers myapp \\\n      > ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\n    gzip ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\nfi\n\n# PostgreSQL backup\nif command -v pg_dump >/dev/null 2>&1 && systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    echo \"Backing up PostgreSQL...\"\n    \n    # Full cluster backup\n    sudo -u postgres pg_dumpall > ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\n    \n    # Individual database backup\n    sudo -u postgres pg_dump -Fc myapp > ${BACKUP_DIR}/postgresql/myapp-backup-${DATE}.dump\n    \n    # Compress SQL backup\n    gzip ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\nfi\n\n# MongoDB backup\nif command -v mongodump >/dev/null 2>&1 && systemctl is-active mongod >/dev/null 2>&1; then\n    echo \"Backing up MongoDB...\"\n    \n    # Full backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --out ${BACKUP_DIR}/mongodb/full-backup-${DATE}\n    \n    # Individual database backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --db myapp --out ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\n    \n    # Compress backups\n    tar -czf ${BACKUP_DIR}/mongodb/full-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb full-backup-${DATE}\n    tar -czf ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb myapp-backup-${DATE}\n    \n    # Remove uncompressed directories\n    rm -rf ${BACKUP_DIR}/mongodb/full-backup-${DATE} ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\nfi\n\n# Redis backup\nif command -v redis-cli >/dev/null 2>&1 && systemctl is-active redis >/dev/null 2>&1; then\n    echo \"Backing up Redis...\"\n    \n    # Trigger background save\n    redis-cli BGSAVE\n    \n    # Wait for save to complete\n    while [ \"$(redis-cli LASTSAVE)\" = \"$(redis-cli LASTSAVE)\" ]; do\n        sleep 1\n    done\n    \n    # Copy RDB file\n    cp /var/lib/redis/dump.rdb ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\n    gzip ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\nfi\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://database-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination database-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://database-backups/\n\n# Keep only last 14 days of backups\nfind ${BACKUP_DIR} -name \"*backup*\" -type f -mtime +14 -delete\n\n# Verify backup integrity\necho \"Verifying backup integrity...\"\nfor backup in ${BACKUP_DIR}/*/*.gz; do\n    if gzip -t \"$backup\" 2>/dev/null; then\n        echo \"✓ $(basename $backup) - OK\"\n    else\n        echo \"✗ $(basename $backup) - CORRUPTED\"\n    fi\ndone\n\necho \"Database backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-backup.sh\n\n# Schedule daily backups\necho \"0 1 * * * root /usr/local/bin/database-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## High Availability and Replication\n\n### MySQL/MariaDB Master-Slave Replication\n```bash\n# Configure master server\nsudo tee -a /etc/mysql/mariadb.conf.d/replication.cnf > /dev/null <<EOF\n[mysqld]\n# Replication settings\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = myapp\nsync_binlog = 1\nrelay-log = mysql-relay-bin\nrelay-log-recovery = 1\n\n# GTID replication (recommended)\ngtid_mode = ON\nenforce_gtid_consistency = ON\nlog_slave_updates = ON\nEOF\n\nmysql -u root -p <<EOF\n-- Create replication user\nCREATE USER 'replication'@'%' IDENTIFIED BY 'replication_password_2024';\nGRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';\nFLUSH PRIVILEGES;\n\n-- Get master status\nSHOW MASTER STATUS;\nEOF\n\n# Configure slave server (server-id = 2)\n# On slave server:\nmysql -u root -p <<EOF\nCHANGE MASTER TO\n  MASTER_HOST='mysql-master.example.com',\n  MASTER_USER='replication',\n  MASTER_PASSWORD='replication_password_2024',\n  MASTER_AUTO_POSITION=1;\n\nSTART SLAVE;\nSHOW SLAVE STATUS\\G\nEOF\n```\n\n### PostgreSQL Streaming Replication\n```bash\n# Configure master server\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n# Replication settings\nwal_level = replica\nmax_wal_senders = 10\nmax_replication_slots = 10\nwal_keep_size = 1GB\nhot_standby = on\narchive_mode = on\narchive_command = 'cp %p /var/lib/pgsql/16/archive/%f'\nEOF\n\n# Configure replication access\nsudo tee -a /var/lib/pgsql/16/data/pg_hba.conf > /dev/null <<EOF\n# Replication connections\nhostssl replication replication 192.168.1.0/24 scram-sha-256\nEOF\n\n# Create replication user\nsudo -u postgres psql <<EOF\nCREATE USER replication WITH REPLICATION ENCRYPTED PASSWORD 'replication_password_2024';\nEOF\n\n# Create archive directory\nsudo mkdir -p /var/lib/pgsql/16/archive\nsudo chown postgres:postgres /var/lib/pgsql/16/archive\n\nsudo systemctl restart postgresql-16\n\n# Setup slave server\n# On slave server, create base backup:\nsudo -u postgres pg_basebackup -h master.example.com -D /var/lib/pgsql/16/data -U replication -W -v -P -R\n```\n\n### MongoDB Replica Set Configuration\n```bash\n# Initialize replica set (run on primary node)\nmongosh admin <<EOF\nrs.initiate({\n  _id: \"rs0\",\n  version: 1,\n  protocolVersion: 1,\n  members: [\n    { \n      _id: 0, \n      host: \"mongodb1.example.com:27017\",\n      priority: 2,\n      votes: 1\n    },\n    { \n      _id: 1, \n      host: \"mongodb2.example.com:27017\",\n      priority: 1,\n      votes: 1\n    },\n    { \n      _id: 2, \n      host: \"mongodb3.example.com:27017\",\n      priority: 1,\n      votes: 1,\n      arbiterOnly: true\n    }\n  ],\n  settings: {\n    chainingAllowed: false,\n    heartbeatIntervalMillis: 2000,\n    heartbeatTimeoutSecs: 10,\n    electionTimeoutMillis: 10000,\n    catchUpTimeoutMillis: -1,\n    getLastErrorModes: {\n      majority: { \n        tags: { \n          dc: 1 \n        } \n      }\n    }\n  }\n})\n\n// Check replica set status\nrs.status()\n\n// Configure read preferences\nrs.conf()\nEOF\n\n# Configure MongoDB sharding (for large deployments)\n# Config server initialization:\nmongosh admin <<EOF\nrs.initiate({\n  _id: \"configReplSet\",\n  configsvr: true,\n  members: [\n    { _id: 0, host: \"config1.example.com:27019\" },\n    { _id: 1, host: \"config2.example.com:27019\" },\n    { _id: 2, host: \"config3.example.com:27019\" }\n  ]\n})\nEOF\n```\n\n### Redis Sentinel High Availability\n```bash\n# Configure Redis Sentinel for HA\nsudo tee /etc/redis/sentinel.conf > /dev/null <<EOF\n# Redis Sentinel Configuration\nport 26379\nsentinel deny-scripts-reconfig yes\n\n# Monitor Redis master\nsentinel monitor mymaster redis-master.example.com 6379 2\nsentinel auth-pass mymaster redis_secure_password_2024\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n\n# Notification scripts\nsentinel notification-script mymaster /etc/redis/notify.sh\nsentinel client-reconfig-script mymaster /etc/redis/reconfig.sh\n\n# Security\nrequirepass sentinel_password_2024\nEOF\n\n# Create notification script\nsudo tee /etc/redis/notify.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Redis failover event: $*\" >> /var/log/redis/sentinel.log\n# Add alerting logic here (email, Slack, etc.)\nEOF\n\n# Create reconfiguration script\nsudo tee /etc/redis/reconfig.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Redis master changed to: $6:$7\" >> /var/log/redis/sentinel.log\n# Update application configuration, restart services, etc.\nEOF\n\nsudo chmod +x /etc/redis/{notify,reconfig}.sh\nsudo systemctl enable --now redis-sentinel\n```\n\n## Performance Optimization\n\n### Database Performance Tuning\n```bash\nsudo tee /usr/local/bin/database-performance-tune.sh > /dev/null <<'EOF'\n#!/bin/bash\n\ntune_mysql() {\n    echo \"Tuning MySQL/MariaDB performance...\"\n    \n    # Calculate optimal buffer pool size (70% of RAM)\n    TOTAL_RAM=$(free -b | awk 'NR==2{print $2}')\n    BUFFER_POOL_SIZE=$((TOTAL_RAM * 70 / 100))\n    \n    mysql -u root -p <<EOF\n-- Performance tuning\nSET GLOBAL innodb_buffer_pool_size = ${BUFFER_POOL_SIZE};\nSET GLOBAL query_cache_size = $((TOTAL_RAM * 5 / 100));\nSET GLOBAL thread_cache_size = 100;\nSET GLOBAL table_open_cache = 4096;\nSET GLOBAL innodb_io_capacity = 2000;\n\n-- Show current configuration\nSHOW VARIABLES LIKE 'innodb_buffer_pool_size';\nSHOW VARIABLES LIKE 'query_cache_size';\nEOF\n}\n\ntune_postgresql() {\n    echo \"Tuning PostgreSQL performance...\"\n    \n    # Use pg_tune recommendations\n    TOTAL_RAM_MB=$(($(free -m | awk 'NR==2{print $2}')))\n    SHARED_BUFFERS=$((TOTAL_RAM_MB / 4))\n    EFFECTIVE_CACHE=$((TOTAL_RAM_MB * 3 / 4))\n    \n    sudo -u postgres psql <<EOF\n-- Performance tuning\nALTER SYSTEM SET shared_buffers = '${SHARED_BUFFERS}MB';\nALTER SYSTEM SET effective_cache_size = '${EFFECTIVE_CACHE}MB';\nALTER SYSTEM SET work_mem = '16MB';\nALTER SYSTEM SET maintenance_work_mem = '256MB';\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\n\n-- Reload configuration\nSELECT pg_reload_conf();\n\n-- Show current settings\nSHOW shared_buffers;\nSHOW effective_cache_size;\nEOF\n}\n\ntune_mongodb() {\n    echo \"Tuning MongoDB performance...\"\n    \n    # Calculate WiredTiger cache size (50% of RAM)\n    TOTAL_RAM_GB=$(($(free -g | awk 'NR==2{print $2}')))\n    CACHE_SIZE_GB=$((TOTAL_RAM_GB / 2))\n    \n    mongosh admin <<EOF\n// Performance tuning\ndb.adminCommand({\n  \"setParameter\": 1,\n  \"wiredTigerEngineRuntimeConfig\": \"cache_size=${CACHE_SIZE_GB}GB\"\n})\n\n// Show current cache usage\ndb.serverStatus().wiredTiger.cache\nEOF\n}\n\ntune_redis() {\n    echo \"Tuning Redis performance...\"\n    \n    # Calculate maxmemory (50% of RAM for dedicated Redis server)\n    TOTAL_RAM_BYTES=$(free -b | awk 'NR==2{print $2}')\n    MAX_MEMORY_BYTES=$((TOTAL_RAM_BYTES / 2))\n    \n    redis-cli CONFIG SET maxmemory ${MAX_MEMORY_BYTES}\n    redis-cli CONFIG SET maxmemory-policy allkeys-lru\n    redis-cli CONFIG REWRITE\n    \n    echo \"Redis maxmemory set to $(redis-cli CONFIG GET maxmemory | tail -1) bytes\"\n}\n\n# Check which databases are running and tune them\nif systemctl is-active mariadb >/dev/null 2>&1; then\n    tune_mysql\nfi\n\nif systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    tune_postgresql\nfi\n\nif systemctl is-active mongod >/dev/null 2>&1; then\n    tune_mongodb\nfi\n\nif systemctl is-active redis >/dev/null 2>&1; then\n    tune_redis\nfi\n\necho \"Database performance tuning completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-performance-tune.sh\n```\n\n## Verification and Testing\n\n### Database Health Checks\n```bash\nsudo tee /usr/local/bin/database-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/database-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# MySQL/MariaDB health check\nif command -v mysql >/dev/null 2>&1; then\n    if systemctl is-active mariadb >/dev/null 2>&1; then\n        log_message \"✓ MariaDB service is running\"\n        \n        # Test connectivity\n        if mysql -e \"SELECT 1;\" >/dev/null 2>&1; then\n            log_message \"✓ MariaDB connectivity test passed\"\n        else\n            log_message \"✗ MariaDB connectivity test failed\"\n        fi\n        \n        # Check for errors in log\n        ERROR_COUNT=$(tail -100 /var/log/mysql/error.log | grep -i error | wc -l)\n        log_message \"ℹ MariaDB errors in last 100 log lines: ${ERROR_COUNT}\"\n    else\n        log_message \"✗ MariaDB service is not running\"\n    fi\nfi\n\n# PostgreSQL health check\nif command -v psql >/dev/null 2>&1; then\n    if systemctl is-active postgresql-16 >/dev/null 2>&1; then\n        log_message \"✓ PostgreSQL service is running\"\n        \n        # Test connectivity\n        if sudo -u postgres psql -c \"SELECT version();\" >/dev/null 2>&1; then\n            log_message \"✓ PostgreSQL connectivity test passed\"\n        else\n            log_message \"✗ PostgreSQL connectivity test failed\"\n        fi\n        \n        # Check replication lag (if slave)\n        if sudo -u postgres psql -t -c \"SELECT pg_is_in_recovery();\" | grep -q \"t\"; then\n            LAG=$(sudo -u postgres psql -t -c \"SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::int;\")\n            log_message \"ℹ PostgreSQL replication lag: ${LAG} seconds\"\n        fi\n    else\n        log_message \"✗ PostgreSQL service is not running\"\n    fi\nfi\n\n# MongoDB health check\nif command -v mongosh >/dev/null 2>&1; then\n    if systemctl is-active mongod >/dev/null 2>&1; then\n        log_message \"✓ MongoDB service is running\"\n        \n        # Test connectivity\n        if mongosh --quiet --eval \"db.adminCommand('ping').ok\" 2>/dev/null | grep -q \"1\"; then\n            log_message \"✓ MongoDB connectivity test passed\"\n        else\n            log_message \"✗ MongoDB connectivity test failed\"\n        fi\n        \n        # Check replica set status\n        if mongosh admin --quiet --eval \"rs.status().ok\" 2>/dev/null | grep -q \"1\"; then\n            PRIMARY_COUNT=$(mongosh admin --quiet --eval \"rs.status().members.filter(m => m.stateStr === 'PRIMARY').length\")\n            log_message \"ℹ MongoDB replica set has ${PRIMARY_COUNT} primary node(s)\"\n        fi\n    else\n        log_message \"✗ MongoDB service is not running\"\n    fi\nfi\n\n# Redis health check\nif command -v redis-cli >/dev/null 2>&1; then\n    if systemctl is-active redis >/dev/null 2>&1; then\n        log_message \"✓ Redis service is running\"\n        \n        # Test connectivity\n        if redis-cli ping | grep -q \"PONG\"; then\n            log_message \"✓ Redis connectivity test passed\"\n        else\n            log_message \"✗ Redis connectivity test failed\"\n        fi\n        \n        # Check memory usage\n        REDIS_MEMORY_PERCENT=$(redis-cli info memory | grep used_memory_rss_human: | cut -d: -f2)\n        log_message \"ℹ Redis memory usage: ${REDIS_MEMORY_PERCENT}\"\n    else\n        log_message \"✗ Redis service is not running\"\n    fi\nfi\n\nlog_message \"Database health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-health-check.sh\n\n# Schedule health checks every 10 minutes\necho \"*/10 * * * * root /usr/local/bin/database-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Database Issues\n```bash\n# MySQL/MariaDB troubleshooting\n# Check service status\nsudo systemctl status mariadb\n\n# Check error logs\nsudo tail -f /var/log/mysql/error.log\n\n# Test connectivity\nmysql -u root -p -e \"SELECT version();\"\n\n# Check process list\nmysql -u root -p -e \"SHOW FULL PROCESSLIST;\"\n\n# Check locks\nmysql -u root -p -e \"SHOW ENGINE INNODB STATUS\\G\" | grep -A 20 \"LATEST DETECTED DEADLOCK\"\n\n# Repair tables\nmysqlcheck --all-databases --repair -u root -p\n\n# PostgreSQL troubleshooting\n# Check service status\nsudo systemctl status postgresql-16\n\n# Check logs\nsudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log\n\n# Test connectivity\nsudo -u postgres psql -c \"SELECT version();\"\n\n# Check active connections\nsudo -u postgres psql -c \"SELECT count(*) FROM pg_stat_activity WHERE state = 'active';\"\n\n# Check locks\nsudo -u postgres psql -c \"SELECT * FROM pg_locks WHERE NOT granted;\"\n\n# Vacuum and analyze\nsudo -u postgres vacuumdb --all --analyze --verbose\n\n# MongoDB troubleshooting\n# Check service status\nsudo systemctl status mongod\n\n# Check logs\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Test connectivity\nmongosh --eval \"db.adminCommand('ping')\"\n\n# Check replica set status\nmongosh admin --eval \"rs.status()\"\n\n# Check database profiler\nmongosh myapp --eval \"db.getProfilingStatus()\"\n\n# Repair database\nmongosh myapp --eval \"db.repairDatabase()\"\n\n# Redis troubleshooting\n# Check service status\nsudo systemctl status redis\n\n# Check logs\nsudo tail -f /var/log/redis/redis-server.log\n\n# Test connectivity\nredis-cli ping\n\n# Check memory stats\nredis-cli info memory\n\n# Check slow log\nredis-cli slowlog get 10\n\n# Monitor commands\nredis-cli monitor\n```\n\n### Advanced Database Debugging\n```bash\n# MySQL/MariaDB debugging\n# Enable general log\nmysql -u root -p -e \"SET GLOBAL general_log = 'ON';\"\nmysql -u root -p -e \"SET GLOBAL log_output = 'FILE';\"\n\n# Performance schema\nmysql -u root -p -e \"SELECT * FROM performance_schema.file_summary_by_event_name WHERE event_name LIKE 'wait/io/file%' ORDER BY sum_timer_wait DESC LIMIT 10;\"\n\n# PostgreSQL debugging\n# Enable query logging\nsudo -u postgres psql -c \"ALTER SYSTEM SET log_statement = 'all';\"\nsudo -u postgres psql -c \"SELECT pg_reload_conf();\"\n\n# Check query performance\nsudo -u postgres psql -c \"SELECT query, calls, total_time, mean_time FROM pg_stat_statements ORDER BY total_time DESC LIMIT 10;\"\n\n# MongoDB debugging\n# Enable profiler\nmongosh myapp --eval \"db.setProfilingLevel(2, { slowms: 100 })\"\n\n# Check slow operations\nmongosh myapp --eval \"db.system.profile.find().sort({ts:-1}).limit(5).pretty()\"\n\n# Redis debugging\n# Enable slow log\nredis-cli CONFIG SET slowlog-log-slower-than 10000\n\n# Check slow operations\nredis-cli SLOWLOG GET 10\n\n# Monitor memory usage\nredis-cli --latency-history -i 1\n```\n\n## Additional Resources\n\n- [MySQL Documentation](https://dev.mysql.com/doc/)\n- [MariaDB Documentation](https://mariadb.com/docs/)\n- [PostgreSQL Documentation](https://www.postgresql.org/docs/)\n- [MongoDB Documentation](https://docs.mongodb.com/)\n- [Redis Documentation](https://redis.io/documentation)\n- [Database Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"database-installation-guide\" class=\"mobile-header\">Database Installation Guide</h1>\n<p class=\"mobile-paragraph\">Comprehensive installation and configuration guide for popular database management systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more. Complete with security hardening and performance optimization for production environments.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">SSD storage recommended for database files</li>\n<li class=\"mobile-list-item\">Network connectivity for replication setups (if applicable)</li>\n<h2 id=\"mysqlmariadb-installation\" class=\"mobile-header\">MySQL/MariaDB Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system\nsudo apt update\n\n# Install MariaDB (recommended over MySQL)\nsudo apt install -y mariadb-server mariadb-client\n\n# Or install MySQL\nsudo apt install -y mysql-server mysql-client\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Enable and start service\nsudo systemctl enable --now mariadb  # or mysql\n\n# Verify installation\nmysql --version\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB from official repository\nsudo tee /etc/yum.repos.d/MariaDB.repo &gt; /dev/null &lt;&lt;EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.its.dal.ca/mariadb/yum/10.11/rhel\\$releasever-\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.its.dal.ca/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nEOF\n\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"mariadb-production-configuration\" class=\"mobile-header\">MariaDB Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create optimized configuration\nsudo tee /etc/mysql/mariadb.conf.d/50-server.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\n# Connection and thread handling\nmax_connections = 500\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 4G  # 70-80% of RAM\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_io_capacity = 2000\ninnodb_io_capacity_max = 4000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\ninnodb_open_files = 8192\n\n# Query cache (for read-heavy workloads)\nquery_cache_type = 1\nquery_cache_size = 256M\nquery_cache_limit = 2M\n\n# Temporary tables\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nsync_binlog = 1\nexpire_logs_days = 7\nbinlog_cache_size = 1M\n\n# Slow query log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\nlog_queries_not_using_indexes = 1\n\n# Security\nbind-address = 127.0.0.1  # Change for network access\nskip_name_resolve = 1\nlocal_infile = 0\n\n# SSL configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\nEOF\n\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-security-hardening\" class=\"mobile-header\">MySQL/MariaDB Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated database user with limited privileges\nmysql -u root -p &lt;&lt;EOF\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create application user\nCREATE USER &#039;appuser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_app_password_2024&#039;;\nCREATE USER &#039;appuser&#039;@&#039;192.168.1.%&#039; IDENTIFIED BY &#039;secure_app_password_2024&#039;;\n\n-- Grant minimal privileges\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;localhost&#039;;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;192.168.1.%&#039;;\n\n-- Create read-only user for backups\nCREATE USER &#039;backup&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;backup_password_2024&#039;;\nGRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, TRIGGER ON *.* TO &#039;backup&#039;@&#039;localhost&#039;;\n\n-- Create replication user\nCREATE USER &#039;replication&#039;@&#039;%&#039; IDENTIFIED BY &#039;replication_password_2024&#039;;\nGRANT REPLICATION SLAVE ON *.* TO &#039;replication&#039;@&#039;%&#039;;\n\n-- Remove default users and databases\nDROP DATABASE IF EXISTS test;\nDELETE FROM mysql.user WHERE User=&#039;&#039;;\nDELETE FROM mysql.user WHERE User=&#039;root&#039; AND Host NOT IN (&#039;localhost&#039;, &#039;127.0.0.1&#039;, &#039;::1&#039;);\n\n-- Secure privileges\nFLUSH PRIVILEGES;\nEOF\n\n# Generate SSL certificates for MySQL\nsudo mkdir -p /etc/mysql/ssl\ncd /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out ca-key.pem 4096\nsudo openssl req -new -x509 -nodes -days 3650 -key ca-key.pem -out ca-cert.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MySQL-CA&quot;\n\n# Create server certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout server-key.pem -out server-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mysql.example.com&quot;\nsudo openssl x509 -req -days 365 -set_serial 01 -in server-req.pem -out server-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout client-key.pem -out client-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mysql-client&quot;\nsudo openssl x509 -req -days 365 -set_serial 02 -in client-req.pem -out client-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Set permissions\nsudo chown mysql:mysql /etc/mysql/ssl/*\nsudo chmod 600 /etc/mysql/ssl/*key.pem\nsudo chmod 644 /etc/mysql/ssl/*.pem\n\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h2 id=\"postgresql-installation\" class=\"mobile-header\">PostgreSQL Installation</h2>\n<h3 id=\"ubuntudebian-postgresql-setup\" class=\"mobile-header\">Ubuntu/Debian PostgreSQL Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL official repository\nsudo apt install -y wget ca-certificates\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\necho &quot;deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main&quot; | sudo tee /etc/apt/sources.list.d/pgdg.list\n\n# Update and install PostgreSQL 16\nsudo apt update\nsudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16\n\n# Enable and start service\nsudo systemctl enable --now postgresql\n\n# Configure PostgreSQL\nsudo -u postgres psql &lt;&lt;EOF\n-- Create application database\nCREATE DATABASE myapp WITH ENCODING=&#039;UTF8&#039; LC_COLLATE=&#039;en_US.UTF-8&#039; LC_CTYPE=&#039;en_US.UTF-8&#039; TEMPLATE=template0;\n\n-- Create application user\nCREATE USER appuser WITH ENCRYPTED PASSWORD &#039;secure_app_password_2024&#039;;\nGRANT ALL PRIVILEGES ON DATABASE myapp TO appuser;\n\n-- Create read-only user\nCREATE USER readonly WITH ENCRYPTED PASSWORD &#039;readonly_password_2024&#039;;\nGRANT CONNECT ON DATABASE myapp TO readonly;\n\\c myapp\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\n-- Security settings\nALTER SYSTEM SET password_encryption = &#039;scram-sha-256&#039;;\nSELECT pg_reload_conf();\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linux-postgresql\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux PostgreSQL</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL 16\nsudo yum install -y postgresql16-server postgresql16 postgresql16-contrib postgresql16-devel\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable --now postgresql-16\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5432/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-production-configuration\" class=\"mobile-header\">PostgreSQL Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure PostgreSQL for production\nsudo tee /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n# PostgreSQL 16 Production Configuration\n\n# Connection settings\nlisten_addresses = &#039;localhost&#039;  # Change to &#039;*&#039; for network access\nport = 5432\nmax_connections = 200\nshared_buffers = 2GB  # 25% of RAM\neffective_cache_size = 8GB  # 75% of RAM\n\n# Memory settings\nwork_mem = 16MB\nmaintenance_work_mem = 512MB\ndynamic_shared_memory_type = posix\n\n# WAL settings\nwal_level = replica\nwal_buffers = 64MB\ncheckpoint_completion_target = 0.9\nmax_wal_size = 4GB\nmin_wal_size = 1GB\ncheckpoint_timeout = 15min\n\n# Query planner\nrandom_page_cost = 1.1  # For SSD\neffective_io_concurrency = 200\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\nmax_parallel_maintenance_workers = 4\n\n# Logging\nlog_destination = &#039;stderr&#039;\nlogging_collector = on\nlog_directory = &#039;log&#039;\nlog_filename = &#039;postgresql-%Y-%m-%d_%H%M%S.log&#039;\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\nlog_min_duration_statement = 1000  # Log slow queries\nlog_line_prefix = &#039;%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h &#039;\nlog_statement = &#039;ddl&#039;  # Log DDL statements\nlog_lock_waits = on\n\n# SSL configuration\nssl = on\nssl_cert_file = &#039;/var/lib/pgsql/16/data/ssl/server.crt&#039;\nssl_key_file = &#039;/var/lib/pgsql/16/data/ssl/server.key&#039;\nssl_ca_file = &#039;/var/lib/pgsql/16/data/ssl/ca.crt&#039;\nssl_min_protocol_version = &#039;TLSv1.2&#039;\nssl_prefer_server_ciphers = on\n\n# Security\npassword_encryption = scram-sha-256\nkrb_server_keyfile = &#039;&#039;\ndb_user_namespace = off\nrow_security = on\n\n# Autovacuum\nautovacuum = on\nautovacuum_max_workers = 4\nautovacuum_naptime = 1min\nautovacuum_vacuum_threshold = 50\nautovacuum_analyze_threshold = 50\nautovacuum_vacuum_scale_factor = 0.1\nautovacuum_analyze_scale_factor = 0.05\n\n# Background writer\nbgwriter_delay = 200ms\nbgwriter_lru_maxpages = 100\nbgwriter_lru_multiplier = 2.0\nbgwriter_flush_after = 512kB\n\n# Checkpointer\ncheckpoint_flush_after = 256kB\n\n# Statistics\ntrack_activities = on\ntrack_counts = on\ntrack_io_timing = on\ntrack_functions = all\nstats_temp_directory = &#039;pg_stat_tmp&#039;\nEOF\n\n# Configure client authentication\nsudo tee /var/lib/pgsql/16/data/pg_hba.conf &gt; /dev/null &lt;&lt;EOF\n# PostgreSQL Client Authentication Configuration\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# Local connections\nlocal   all             postgres                                peer\nlocal   all             all                                     scram-sha-256\n\n# IPv4 local connections\nhost    all             all             127.0.0.1/32            scram-sha-256\n\n# IPv6 local connections  \nhost    all             all             ::1/128                 scram-sha-256\n\n# Network connections (if needed)\nhostssl myapp           appuser         192.168.1.0/24          scram-sha-256\nhostssl myapp           readonly        192.168.1.0/24          scram-sha-256\n\n# Replication connections\nhostssl replication     replication     192.168.1.0/24          scram-sha-256\n\n# Deny all other connections\nhost    all             all             0.0.0.0/0               reject\nEOF\n\n# Generate SSL certificates\nsudo mkdir -p /var/lib/pgsql/16/data/ssl\ncd /var/lib/pgsql/16/data/ssl\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=PostgreSQL-CA&quot;\n\nsudo openssl genrsa -out server.key 4096\nsudo openssl req -new -key server.key -out server.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=postgres.example.com&quot;\nsudo openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\nsudo chown postgres:postgres /var/lib/pgsql/16/data/ssl/*\nsudo chmod 600 /var/lib/pgsql/16/data/ssl/*.key\nsudo chmod 644 /var/lib/pgsql/16/data/ssl/*.crt\n\nsudo systemctl restart postgresql-16</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-security-hardening\" class=\"mobile-header\">PostgreSQL Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Advanced security configuration\nsudo -u postgres psql &lt;&lt;EOF\n-- Enable row-level security\nALTER SYSTEM SET row_security = on;\n\n-- Configure logging for security\nALTER SYSTEM SET log_statement = &#039;all&#039;;\nALTER SYSTEM SET log_connections = on;\nALTER SYSTEM SET log_disconnections = on;\nALTER SYSTEM SET log_lock_waits = on;\nALTER SYSTEM SET log_temp_files = 0;\n\n-- Password policies\nALTER SYSTEM SET password_encryption = &#039;scram-sha-256&#039;;\n\n-- Create roles with specific privileges\nCREATE ROLE app_read;\nGRANT CONNECT ON DATABASE myapp TO app_read;\nGRANT USAGE ON SCHEMA public TO app_read;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;\n\nCREATE ROLE app_write;\nGRANT app_read TO app_write;\nGRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_write;\n\n-- Create application-specific user\nCREATE USER myapp_user WITH PASSWORD &#039;secure_password_2024&#039;;\nGRANT app_write TO myapp_user;\n\n-- Security functions\nCREATE OR REPLACE FUNCTION audit_trigger_function()\nRETURNS TRIGGER AS \\$\\$\nBEGIN\n    INSERT INTO audit_log (table_name, operation, old_values, new_values, user_name, timestamp)\n    VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW), current_user, now());\n    RETURN COALESCE(NEW, OLD);\nEND;\n\\$\\$ LANGUAGE plpgsql;\n\n-- Reload configuration\nSELECT pg_reload_conf();\nEOF\n\n# Configure connection limits\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n\n# Connection limiting per user/database\n# ALTER USER myapp_user CONNECTION LIMIT 50;\n# ALTER DATABASE myapp CONNECTION LIMIT 100;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"mongodb-installation\" class=\"mobile-header\">MongoDB Installation</h2>\n<h3 id=\"ubuntudebian-mongodb-setup\" class=\"mobile-header\">Ubuntu/Debian MongoDB Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Import MongoDB public GPG key\nwget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -\n\n# Add MongoDB repository\necho &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update and install MongoDB\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Verify installation\nmongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linux-mongodb\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux MongoDB</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add MongoDB repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo &gt; /dev/null &lt;&lt;EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-production-configuration\" class=\"mobile-header\">MongoDB Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure MongoDB configuration\nsudo tee /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n# MongoDB Production Configuration\n\nstorage:\n  dbPath: /var/lib/mongo\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 4  # 50% of RAM\n      journalCompressor: snappy\n      directoryForIndexes: false\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n  quiet: false\n  logRotate: reopen\n  component:\n    accessControl:\n      verbosity: 1\n    command:\n      verbosity: 1\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Change for network access\n  maxIncomingConnections: 1000\n  compression:\n    compressors: snappy,zstd\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb/mongodb.pem\n    CAFile: /etc/ssl/mongodb/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nsecurity:\n  authorization: enabled\n  keyFile: /etc/mongodb/mongodb-keyfile\n  clusterAuthMode: x509\n  javascriptEnabled: false\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 0.02\n\nreplication:\n  replSetName: rs0\n  enableMajorityReadConcern: true\n\nsharding:\n  clusterRole: shardsvr  # or configsvr for config servers\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n  timeZoneInfo: /usr/share/zoneinfo\n\nsetParameter:\n  authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256\n  scramIterationCount: 15000\n  failIndexKeyTooLong: false\n  notablescan: 1  # Disable table scans in production\nEOF\n\n# Create MongoDB keyfile for replica set authentication\nsudo openssl rand -base64 756 | sudo tee /etc/mongodb/mongodb-keyfile\nsudo chmod 600 /etc/mongodb/mongodb-keyfile\nsudo chown mongod:mongod /etc/mongodb/mongodb-keyfile\n\n# Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/ssl/mongodb\ncd /etc/ssl/mongodb\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA&quot;\n\nsudo openssl genrsa -out mongodb.key 4096\nsudo openssl req -new -key mongodb.key -out mongodb.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com&quot;\nsudo openssl x509 -req -days 365 -in mongodb.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out mongodb.crt\n\n# Combine certificate and key for MongoDB\nsudo cat mongodb.crt mongodb.key | sudo tee mongodb.pem\nsudo chmod 600 /etc/ssl/mongodb/*.key /etc/ssl/mongodb/*.pem\nsudo chown mongod:mongod /etc/ssl/mongodb/*\n\nsudo systemctl restart mongod</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-security-setup\" class=\"mobile-header\">MongoDB Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize MongoDB security\nmongosh --ssl --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem --sslCAFile /etc/ssl/mongodb/ca.pem &lt;&lt;EOF\n// Create admin user\nuse admin\ndb.createUser({\n  user: &quot;admin&quot;,\n  pwd: &quot;secure_admin_password_2024&quot;,\n  roles: [\n    { role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;dbAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: &quot;appuser&quot;,\n  pwd: &quot;secure_app_password_2024&quot;,\n  roles: [\n    { role: &quot;readWrite&quot;, db: &quot;myapp&quot; }\n  ]\n})\n\n// Create read-only user\ndb.createUser({\n  user: &quot;readonly&quot;,\n  pwd: &quot;readonly_password_2024&quot;,\n  roles: [\n    { role: &quot;read&quot;, db: &quot;myapp&quot; }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: &quot;backup&quot;,\n  pwd: &quot;backup_password_2024&quot;,\n  roles: [\n    { role: &quot;backup&quot;, db: &quot;admin&quot; },\n    { role: &quot;restore&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Initialize replica set (if using replication)\nrs.initiate({\n  _id: &quot;rs0&quot;,\n  members: [\n    { _id: 0, host: &quot;mongodb1.example.com:27017&quot;, priority: 2 },\n    { _id: 1, host: &quot;mongodb2.example.com:27017&quot;, priority: 1 },\n    { _id: 2, host: &quot;mongodb3.example.com:27017&quot;, priority: 1, arbiterOnly: true }\n  ]\n})\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"redis-installation-and-configuration\" class=\"mobile-header\">Redis Installation and Configuration</h2>\n<h3 id=\"redis-setup-all-distributions\" class=\"mobile-header\">Redis Setup (All Distributions)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt install -y redis-server redis-tools\n\n# RHEL/CentOS\nsudo yum install -y redis\n\n# Fedora\nsudo dnf install -y redis\n\n# Arch Linux\nsudo pacman -S redis\n\n# Configure Redis for production\nsudo tee /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\n# Redis Production Configuration\n\n# Network\nbind 127.0.0.1 ::1  # Change for network access\nport 6379\ntcp-backlog 511\ntimeout 300\ntcp-keepalive 300\n\n# Security\nrequirepass redis_secure_password_2024\nrename-command FLUSHDB &quot;FLUSHDB_9a8b7c6d5e4f3g2h1&quot;\nrename-command FLUSHALL &quot;FLUSHALL_h1g2f3e4d5c6b7a8&quot;\nrename-command DEBUG &quot;DEBUG_8a7b6c5d4e3f2g1h&quot;\nrename-command CONFIG &quot;CONFIG_1h2g3f4e5d6c7b8a&quot;\n\n# SSL/TLS (Redis 6.0+)\ntls-port 6380\nport 0  # Disable non-TLS port\ntls-cert-file /etc/redis/tls/redis.crt\ntls-key-file /etc/redis/tls/redis.key\ntls-ca-cert-file /etc/redis/tls/ca.crt\ntls-protocols &quot;TLSv1.2 TLSv1.3&quot;\ntls-prefer-server-ciphers yes\n\n# Memory management\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 5\n\n# Persistence\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\nrdbchecksum yes\ndbfilename redis.rdb\ndir /var/lib/redis/\n\n# AOF (Append Only File)\nappendonly yes\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\nsyslog-enabled yes\nsyslog-ident redis\n\n# Slow log\nslowlog-log-slower-than 10000\nslowlog-max-len 128\n\n# Latency monitoring\nlatency-monitor-threshold 100\n\n# Client output buffer limits\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Advanced configuration\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\n\n# Lua scripting\nlua-time-limit 5000\nEOF\n\n# Generate Redis TLS certificates\nsudo mkdir -p /etc/redis/tls\ncd /etc/redis/tls\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=Redis-CA&quot;\n\nsudo openssl genrsa -out redis.key 4096\nsudo openssl req -new -key redis.key -out redis.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=redis.example.com&quot;\nsudo openssl x509 -req -days 365 -in redis.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out redis.crt\n\nsudo chown redis:redis /etc/redis/tls/*\nsudo chmod 600 /etc/redis/tls/*.key\nsudo chmod 644 /etc/redis/tls/*.crt\n\nsudo systemctl restart redis-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-monitoring-and-maintenance\" class=\"mobile-header\">Database Monitoring and Maintenance</h2>\n<h3 id=\"comprehensive-database-monitoring\" class=\"mobile-header\">Comprehensive Database Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/database-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# MySQL/MariaDB monitoring\nif command -v mysql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== MySQL/MariaDB Monitoring ===&quot;\n    \n    # Connection count\n    MYSQL_CONNECTIONS=$(mysql -e &quot;SHOW STATUS LIKE &#039;Threads_connected&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    MYSQL_MAX_CONNECTIONS=$(mysql -e &quot;SHOW VARIABLES LIKE &#039;max_connections&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    log_message &quot;MySQL connections: ${MYSQL_CONNECTIONS}/${MYSQL_MAX_CONNECTIONS}&quot;\n    \n    # Query performance\n    SLOW_QUERIES=$(mysql -e &quot;SHOW STATUS LIKE &#039;Slow_queries&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    log_message &quot;MySQL slow queries: ${SLOW_QUERIES}&quot;\n    \n    # Buffer pool hit ratio\n    BUFFER_HIT_RATIO=$(mysql -e &quot;\n      SELECT ROUND((1 - (Innodb_buffer_pool_reads / Innodb_buffer_pool_read_requests)) * 100, 2) as hit_ratio\n      FROM INFORMATION_SCHEMA.GLOBAL_STATUS \n      WHERE VARIABLE_NAME IN (&#039;Innodb_buffer_pool_reads&#039;, &#039;Innodb_buffer_pool_read_requests&#039;);&quot; | tail -1)\n    log_message &quot;InnoDB buffer pool hit ratio: ${BUFFER_HIT_RATIO}%&quot;\nfi\n\n# PostgreSQL monitoring\nif command -v psql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== PostgreSQL Monitoring ===&quot;\n    \n    # Connection count\n    PG_CONNECTIONS=$(sudo -u postgres psql -t -c &quot;SELECT count(*) FROM pg_stat_activity;&quot;)\n    PG_MAX_CONNECTIONS=$(sudo -u postgres psql -t -c &quot;SHOW max_connections;&quot;)\n    log_message &quot;PostgreSQL connections: ${PG_CONNECTIONS}/${PG_MAX_CONNECTIONS}&quot;\n    \n    # Database size\n    PG_DB_SIZE=$(sudo -u postgres psql -t -c &quot;SELECT pg_size_pretty(pg_database_size(&#039;myapp&#039;));&quot;)\n    log_message &quot;PostgreSQL database size: ${PG_DB_SIZE}&quot;\n    \n    # Cache hit ratio\n    PG_CACHE_HIT=$(sudo -u postgres psql -t -c &quot;\n      SELECT round(sum(blks_hit)*100.0/sum(blks_hit+blks_read), 2) \n      FROM pg_stat_database WHERE datname=&#039;myapp&#039;;&quot;)\n    log_message &quot;PostgreSQL cache hit ratio: ${PG_CACHE_HIT}%&quot;\n    \n    # Long running queries\n    LONG_QUERIES=$(sudo -u postgres psql -t -c &quot;\n      SELECT count(*) FROM pg_stat_activity \n      WHERE state = &#039;active&#039; AND now() - query_start &gt; interval &#039;5 minutes&#039;;&quot;)\n    log_message &quot;PostgreSQL long-running queries: ${LONG_QUERIES}&quot;\nfi\n\n# MongoDB monitoring\nif command -v mongosh &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== MongoDB Monitoring ===&quot;\n    \n    # Connection count\n    MONGO_CONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.current&quot;)\n    MONGO_MAX_CONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.available&quot;)\n    log_message &quot;MongoDB connections: ${MONGO_CONNECTIONS}/${MONGO_MAX_CONNECTIONS}&quot;\n    \n    # Database statistics\n    MONGO_DB_SIZE=$(mongosh myapp --quiet --eval &quot;Math.round(db.stats().dataSize / 1024 / 1024) + &#039; MB&#039;&quot;)\n    log_message &quot;MongoDB database size: ${MONGO_DB_SIZE}&quot;\n    \n    # OpLog status (for replica sets)\n    if mongosh admin --quiet --eval &quot;rs.status().ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n        OPLOG_SIZE=$(mongosh local --quiet --eval &quot;Math.round(db.oplog.rs.stats().maxSize / 1024 / 1024) + &#039; MB&#039;&quot;)\n        log_message &quot;MongoDB OpLog size: ${OPLOG_SIZE}&quot;\n    fi\nfi\n\n# Redis monitoring\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== Redis Monitoring ===&quot;\n    \n    # Memory usage\n    REDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\n    REDIS_MAX_MEMORY=$(redis-cli config get maxmemory | tail -1)\n    log_message &quot;Redis memory usage: ${REDIS_MEMORY} / ${REDIS_MAX_MEMORY}&quot;\n    \n    # Connected clients\n    REDIS_CLIENTS=$(redis-cli info clients | grep connected_clients: | cut -d: -f2)\n    log_message &quot;Redis connected clients: ${REDIS_CLIENTS}&quot;\n    \n    # Hit ratio\n    REDIS_HITS=$(redis-cli info stats | grep keyspace_hits: | cut -d: -f2)\n    REDIS_MISSES=$(redis-cli info stats | grep keyspace_misses: | cut -d: -f2)\n    if [ ${REDIS_MISSES} -gt 0 ]; then\n        REDIS_HIT_RATIO=$(echo &quot;scale=2; ${REDIS_HITS} / (${REDIS_HITS} + ${REDIS_MISSES}) * 100&quot; | bc)\n        log_message &quot;Redis hit ratio: ${REDIS_HIT_RATIO}%&quot;\n    fi\nfi\n\nlog_message &quot;Database monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/database-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-backup-automation\" class=\"mobile-header\">Database Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/databases&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{mysql,postgresql,mongodb,redis}\n\n# MySQL/MariaDB backup\nif command -v mysql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up MySQL/MariaDB...&quot;\n    \n    # Full backup with all databases\n    mysqldump --all-databases --single-transaction --routines --triggers --events \\\n      --master-data=2 --flush-logs --delete-master-logs \\\n      &gt; ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Compress backup\n    gzip ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Individual database backup\n    mysqldump --single-transaction --routines --triggers myapp \\\n      &gt; ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\n    gzip ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\nfi\n\n# PostgreSQL backup\nif command -v pg_dump &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up PostgreSQL...&quot;\n    \n    # Full cluster backup\n    sudo -u postgres pg_dumpall &gt; ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\n    \n    # Individual database backup\n    sudo -u postgres pg_dump -Fc myapp &gt; ${BACKUP_DIR}/postgresql/myapp-backup-${DATE}.dump\n    \n    # Compress SQL backup\n    gzip ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\nfi\n\n# MongoDB backup\nif command -v mongodump &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up MongoDB...&quot;\n    \n    # Full backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --out ${BACKUP_DIR}/mongodb/full-backup-${DATE}\n    \n    # Individual database backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --db myapp --out ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\n    \n    # Compress backups\n    tar -czf ${BACKUP_DIR}/mongodb/full-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb full-backup-${DATE}\n    tar -czf ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb myapp-backup-${DATE}\n    \n    # Remove uncompressed directories\n    rm -rf ${BACKUP_DIR}/mongodb/full-backup-${DATE} ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\nfi\n\n# Redis backup\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up Redis...&quot;\n    \n    # Trigger background save\n    redis-cli BGSAVE\n    \n    # Wait for save to complete\n    while [ &quot;$(redis-cli LASTSAVE)&quot; = &quot;$(redis-cli LASTSAVE)&quot; ]; do\n        sleep 1\n    done\n    \n    # Copy RDB file\n    cp /var/lib/redis/dump.rdb ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\n    gzip ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\nfi\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://database-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination database-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://database-backups/\n\n# Keep only last 14 days of backups\nfind ${BACKUP_DIR} -name &quot;*backup*&quot; -type f -mtime +14 -delete\n\n# Verify backup integrity\necho &quot;Verifying backup integrity...&quot;\nfor backup in ${BACKUP_DIR}/*/*.gz; do\n    if gzip -t &quot;$backup&quot; 2&gt;/dev/null; then\n        echo &quot;✓ $(basename $backup) - OK&quot;\n    else\n        echo &quot;✗ $(basename $backup) - CORRUPTED&quot;\n    fi\ndone\n\necho &quot;Database backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-backup.sh\n\n# Schedule daily backups\necho &quot;0 1 * * * root /usr/local/bin/database-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-and-replication\" class=\"mobile-header\">High Availability and Replication</h2>\n<h3 id=\"mysqlmariadb-master-slave-replication\" class=\"mobile-header\">MySQL/MariaDB Master-Slave Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure master server\nsudo tee -a /etc/mysql/mariadb.conf.d/replication.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\n# Replication settings\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = myapp\nsync_binlog = 1\nrelay-log = mysql-relay-bin\nrelay-log-recovery = 1\n\n# GTID replication (recommended)\ngtid_mode = ON\nenforce_gtid_consistency = ON\nlog_slave_updates = ON\nEOF\n\nmysql -u root -p &lt;&lt;EOF\n-- Create replication user\nCREATE USER &#039;replication&#039;@&#039;%&#039; IDENTIFIED BY &#039;replication_password_2024&#039;;\nGRANT REPLICATION SLAVE ON *.* TO &#039;replication&#039;@&#039;%&#039;;\nFLUSH PRIVILEGES;\n\n-- Get master status\nSHOW MASTER STATUS;\nEOF\n\n# Configure slave server (server-id = 2)\n# On slave server:\nmysql -u root -p &lt;&lt;EOF\nCHANGE MASTER TO\n  MASTER_HOST=&#039;mysql-master.example.com&#039;,\n  MASTER_USER=&#039;replication&#039;,\n  MASTER_PASSWORD=&#039;replication_password_2024&#039;,\n  MASTER_AUTO_POSITION=1;\n\nSTART SLAVE;\nSHOW SLAVE STATUS\\G\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-streaming-replication\" class=\"mobile-header\">PostgreSQL Streaming Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure master server\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n# Replication settings\nwal_level = replica\nmax_wal_senders = 10\nmax_replication_slots = 10\nwal_keep_size = 1GB\nhot_standby = on\narchive_mode = on\narchive_command = &#039;cp %p /var/lib/pgsql/16/archive/%f&#039;\nEOF\n\n# Configure replication access\nsudo tee -a /var/lib/pgsql/16/data/pg_hba.conf &gt; /dev/null &lt;&lt;EOF\n# Replication connections\nhostssl replication replication 192.168.1.0/24 scram-sha-256\nEOF\n\n# Create replication user\nsudo -u postgres psql &lt;&lt;EOF\nCREATE USER replication WITH REPLICATION ENCRYPTED PASSWORD &#039;replication_password_2024&#039;;\nEOF\n\n# Create archive directory\nsudo mkdir -p /var/lib/pgsql/16/archive\nsudo chown postgres:postgres /var/lib/pgsql/16/archive\n\nsudo systemctl restart postgresql-16\n\n# Setup slave server\n# On slave server, create base backup:\nsudo -u postgres pg_basebackup -h master.example.com -D /var/lib/pgsql/16/data -U replication -W -v -P -R</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-replica-set-configuration\" class=\"mobile-header\">MongoDB Replica Set Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize replica set (run on primary node)\nmongosh admin &lt;&lt;EOF\nrs.initiate({\n  _id: &quot;rs0&quot;,\n  version: 1,\n  protocolVersion: 1,\n  members: [\n    { \n      _id: 0, \n      host: &quot;mongodb1.example.com:27017&quot;,\n      priority: 2,\n      votes: 1\n    },\n    { \n      _id: 1, \n      host: &quot;mongodb2.example.com:27017&quot;,\n      priority: 1,\n      votes: 1\n    },\n    { \n      _id: 2, \n      host: &quot;mongodb3.example.com:27017&quot;,\n      priority: 1,\n      votes: 1,\n      arbiterOnly: true\n    }\n  ],\n  settings: {\n    chainingAllowed: false,\n    heartbeatIntervalMillis: 2000,\n    heartbeatTimeoutSecs: 10,\n    electionTimeoutMillis: 10000,\n    catchUpTimeoutMillis: -1,\n    getLastErrorModes: {\n      majority: { \n        tags: { \n          dc: 1 \n        } \n      }\n    }\n  }\n})\n\n// Check replica set status\nrs.status()\n\n// Configure read preferences\nrs.conf()\nEOF\n\n# Configure MongoDB sharding (for large deployments)\n# Config server initialization:\nmongosh admin &lt;&lt;EOF\nrs.initiate({\n  _id: &quot;configReplSet&quot;,\n  configsvr: true,\n  members: [\n    { _id: 0, host: &quot;config1.example.com:27019&quot; },\n    { _id: 1, host: &quot;config2.example.com:27019&quot; },\n    { _id: 2, host: &quot;config3.example.com:27019&quot; }\n  ]\n})\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-sentinel-high-availability\" class=\"mobile-header\">Redis Sentinel High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Redis Sentinel for HA\nsudo tee /etc/redis/sentinel.conf &gt; /dev/null &lt;&lt;EOF\n# Redis Sentinel Configuration\nport 26379\nsentinel deny-scripts-reconfig yes\n\n# Monitor Redis master\nsentinel monitor mymaster redis-master.example.com 6379 2\nsentinel auth-pass mymaster redis_secure_password_2024\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n\n# Notification scripts\nsentinel notification-script mymaster /etc/redis/notify.sh\nsentinel client-reconfig-script mymaster /etc/redis/reconfig.sh\n\n# Security\nrequirepass sentinel_password_2024\nEOF\n\n# Create notification script\nsudo tee /etc/redis/notify.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Redis failover event: $*&quot; &gt;&gt; /var/log/redis/sentinel.log\n# Add alerting logic here (email, Slack, etc.)\nEOF\n\n# Create reconfiguration script\nsudo tee /etc/redis/reconfig.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Redis master changed to: $6:$7&quot; &gt;&gt; /var/log/redis/sentinel.log\n# Update application configuration, restart services, etc.\nEOF\n\nsudo chmod +x /etc/redis/{notify,reconfig}.sh\nsudo systemctl enable --now redis-sentinel</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"database-performance-tuning\" class=\"mobile-header\">Database Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-performance-tune.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\ntune_mysql() {\n    echo &quot;Tuning MySQL/MariaDB performance...&quot;\n    \n    # Calculate optimal buffer pool size (70% of RAM)\n    TOTAL_RAM=$(free -b | awk &#039;NR==2{print $2}&#039;)\n    BUFFER_POOL_SIZE=$((TOTAL_RAM * 70 / 100))\n    \n    mysql -u root -p &lt;&lt;EOF\n-- Performance tuning\nSET GLOBAL innodb_buffer_pool_size = ${BUFFER_POOL_SIZE};\nSET GLOBAL query_cache_size = $((TOTAL_RAM * 5 / 100));\nSET GLOBAL thread_cache_size = 100;\nSET GLOBAL table_open_cache = 4096;\nSET GLOBAL innodb_io_capacity = 2000;\n\n-- Show current configuration\nSHOW VARIABLES LIKE &#039;innodb_buffer_pool_size&#039;;\nSHOW VARIABLES LIKE &#039;query_cache_size&#039;;\nEOF\n}\n\ntune_postgresql() {\n    echo &quot;Tuning PostgreSQL performance...&quot;\n    \n    # Use pg_tune recommendations\n    TOTAL_RAM_MB=$(($(free -m | awk &#039;NR==2{print $2}&#039;)))\n    SHARED_BUFFERS=$((TOTAL_RAM_MB / 4))\n    EFFECTIVE_CACHE=$((TOTAL_RAM_MB * 3 / 4))\n    \n    sudo -u postgres psql &lt;&lt;EOF\n-- Performance tuning\nALTER SYSTEM SET shared_buffers = &#039;${SHARED_BUFFERS}MB&#039;;\nALTER SYSTEM SET effective_cache_size = &#039;${EFFECTIVE_CACHE}MB&#039;;\nALTER SYSTEM SET work_mem = &#039;16MB&#039;;\nALTER SYSTEM SET maintenance_work_mem = &#039;256MB&#039;;\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\n\n-- Reload configuration\nSELECT pg_reload_conf();\n\n-- Show current settings\nSHOW shared_buffers;\nSHOW effective_cache_size;\nEOF\n}\n\ntune_mongodb() {\n    echo &quot;Tuning MongoDB performance...&quot;\n    \n    # Calculate WiredTiger cache size (50% of RAM)\n    TOTAL_RAM_GB=$(($(free -g | awk &#039;NR==2{print $2}&#039;)))\n    CACHE_SIZE_GB=$((TOTAL_RAM_GB / 2))\n    \n    mongosh admin &lt;&lt;EOF\n// Performance tuning\ndb.adminCommand({\n  &quot;setParameter&quot;: 1,\n  &quot;wiredTigerEngineRuntimeConfig&quot;: &quot;cache_size=${CACHE_SIZE_GB}GB&quot;\n})\n\n// Show current cache usage\ndb.serverStatus().wiredTiger.cache\nEOF\n}\n\ntune_redis() {\n    echo &quot;Tuning Redis performance...&quot;\n    \n    # Calculate maxmemory (50% of RAM for dedicated Redis server)\n    TOTAL_RAM_BYTES=$(free -b | awk &#039;NR==2{print $2}&#039;)\n    MAX_MEMORY_BYTES=$((TOTAL_RAM_BYTES / 2))\n    \n    redis-cli CONFIG SET maxmemory ${MAX_MEMORY_BYTES}\n    redis-cli CONFIG SET maxmemory-policy allkeys-lru\n    redis-cli CONFIG REWRITE\n    \n    echo &quot;Redis maxmemory set to $(redis-cli CONFIG GET maxmemory | tail -1) bytes&quot;\n}\n\n# Check which databases are running and tune them\nif systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    tune_mysql\nfi\n\nif systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    tune_postgresql\nfi\n\nif systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    tune_mongodb\nfi\n\nif systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    tune_redis\nfi\n\necho &quot;Database performance tuning completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-performance-tune.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-testing\" class=\"mobile-header\">Verification and Testing</h2>\n<h3 id=\"database-health-checks\" class=\"mobile-header\">Database Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/database-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# MySQL/MariaDB health check\nif command -v mysql &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;✓ MariaDB service is running&quot;\n        \n        # Test connectivity\n        if mysql -e &quot;SELECT 1;&quot; &gt;/dev/null 2&gt;&amp;1; then\n            log_message &quot;✓ MariaDB connectivity test passed&quot;\n        else\n            log_message &quot;✗ MariaDB connectivity test failed&quot;\n        fi\n        \n        # Check for errors in log\n        ERROR_COUNT=$(tail -100 /var/log/mysql/error.log | grep -i error | wc -l)\n        log_message &quot;ℹ MariaDB errors in last 100 log lines: ${ERROR_COUNT}&quot;\n    else\n        log_message &quot;✗ MariaDB service is not running&quot;\n    fi\nfi\n\n# PostgreSQL health check\nif command -v psql &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;✓ PostgreSQL service is running&quot;\n        \n        # Test connectivity\n        if sudo -u postgres psql -c &quot;SELECT version();&quot; &gt;/dev/null 2&gt;&amp;1; then\n            log_message &quot;✓ PostgreSQL connectivity test passed&quot;\n        else\n            log_message &quot;✗ PostgreSQL connectivity test failed&quot;\n        fi\n        \n        # Check replication lag (if slave)\n        if sudo -u postgres psql -t -c &quot;SELECT pg_is_in_recovery();&quot; | grep -q &quot;t&quot;; then\n            LAG=$(sudo -u postgres psql -t -c &quot;SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::int;&quot;)\n            log_message &quot;ℹ PostgreSQL replication lag: ${LAG} seconds&quot;\n        fi\n    else\n        log_message &quot;✗ PostgreSQL service is not running&quot;\n    fi\nfi\n\n# MongoDB health check\nif command -v mongosh &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;✓ MongoDB service is running&quot;\n        \n        # Test connectivity\n        if mongosh --quiet --eval &quot;db.adminCommand(&#039;ping&#039;).ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n            log_message &quot;✓ MongoDB connectivity test passed&quot;\n        else\n            log_message &quot;✗ MongoDB connectivity test failed&quot;\n        fi\n        \n        # Check replica set status\n        if mongosh admin --quiet --eval &quot;rs.status().ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n            PRIMARY_COUNT=$(mongosh admin --quiet --eval &quot;rs.status().members.filter(m =&gt; m.stateStr === &#039;PRIMARY&#039;).length&quot;)\n            log_message &quot;ℹ MongoDB replica set has ${PRIMARY_COUNT} primary node(s)&quot;\n        fi\n    else\n        log_message &quot;✗ MongoDB service is not running&quot;\n    fi\nfi\n\n# Redis health check\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;✓ Redis service is running&quot;\n        \n        # Test connectivity\n        if redis-cli ping | grep -q &quot;PONG&quot;; then\n            log_message &quot;✓ Redis connectivity test passed&quot;\n        else\n            log_message &quot;✗ Redis connectivity test failed&quot;\n        fi\n        \n        # Check memory usage\n        REDIS_MEMORY_PERCENT=$(redis-cli info memory | grep used_memory_rss_human: | cut -d: -f2)\n        log_message &quot;ℹ Redis memory usage: ${REDIS_MEMORY_PERCENT}&quot;\n    else\n        log_message &quot;✗ Redis service is not running&quot;\n    fi\nfi\n\nlog_message &quot;Database health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-health-check.sh\n\n# Schedule health checks every 10 minutes\necho &quot;*/10 * * * * root /usr/local/bin/database-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-database-issues\" class=\"mobile-header\">Common Database Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB troubleshooting\n# Check service status\nsudo systemctl status mariadb\n\n# Check error logs\nsudo tail -f /var/log/mysql/error.log\n\n# Test connectivity\nmysql -u root -p -e &quot;SELECT version();&quot;\n\n# Check process list\nmysql -u root -p -e &quot;SHOW FULL PROCESSLIST;&quot;\n\n# Check locks\nmysql -u root -p -e &quot;SHOW ENGINE INNODB STATUS\\G&quot; | grep -A 20 &quot;LATEST DETECTED DEADLOCK&quot;\n\n# Repair tables\nmysqlcheck --all-databases --repair -u root -p\n\n# PostgreSQL troubleshooting\n# Check service status\nsudo systemctl status postgresql-16\n\n# Check logs\nsudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log\n\n# Test connectivity\nsudo -u postgres psql -c &quot;SELECT version();&quot;\n\n# Check active connections\nsudo -u postgres psql -c &quot;SELECT count(*) FROM pg_stat_activity WHERE state = &#039;active&#039;;&quot;\n\n# Check locks\nsudo -u postgres psql -c &quot;SELECT * FROM pg_locks WHERE NOT granted;&quot;\n\n# Vacuum and analyze\nsudo -u postgres vacuumdb --all --analyze --verbose\n\n# MongoDB troubleshooting\n# Check service status\nsudo systemctl status mongod\n\n# Check logs\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Test connectivity\nmongosh --eval &quot;db.adminCommand(&#039;ping&#039;)&quot;\n\n# Check replica set status\nmongosh admin --eval &quot;rs.status()&quot;\n\n# Check database profiler\nmongosh myapp --eval &quot;db.getProfilingStatus()&quot;\n\n# Repair database\nmongosh myapp --eval &quot;db.repairDatabase()&quot;\n\n# Redis troubleshooting\n# Check service status\nsudo systemctl status redis\n\n# Check logs\nsudo tail -f /var/log/redis/redis-server.log\n\n# Test connectivity\nredis-cli ping\n\n# Check memory stats\nredis-cli info memory\n\n# Check slow log\nredis-cli slowlog get 10\n\n# Monitor commands\nredis-cli monitor</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-database-debugging\" class=\"mobile-header\">Advanced Database Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB debugging\n# Enable general log\nmysql -u root -p -e &quot;SET GLOBAL general_log = &#039;ON&#039;;&quot;\nmysql -u root -p -e &quot;SET GLOBAL log_output = &#039;FILE&#039;;&quot;\n\n# Performance schema\nmysql -u root -p -e &quot;SELECT * FROM performance_schema.file_summary_by_event_name WHERE event_name LIKE &#039;wait/io/file%&#039; ORDER BY sum_timer_wait DESC LIMIT 10;&quot;\n\n# PostgreSQL debugging\n# Enable query logging\nsudo -u postgres psql -c &quot;ALTER SYSTEM SET log_statement = &#039;all&#039;;&quot;\nsudo -u postgres psql -c &quot;SELECT pg_reload_conf();&quot;\n\n# Check query performance\nsudo -u postgres psql -c &quot;SELECT query, calls, total_time, mean_time FROM pg_stat_statements ORDER BY total_time DESC LIMIT 10;&quot;\n\n# MongoDB debugging\n# Enable profiler\nmongosh myapp --eval &quot;db.setProfilingLevel(2, { slowms: 100 })&quot;\n\n# Check slow operations\nmongosh myapp --eval &quot;db.system.profile.find().sort({ts:-1}).limit(5).pretty()&quot;\n\n# Redis debugging\n# Enable slow log\nredis-cli CONFIG SET slowlog-log-slower-than 10000\n\n# Check slow operations\nredis-cli SLOWLOG GET 10\n\n# Monitor memory usage\nredis-cli --latency-history -i 1</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://dev.mysql.com/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MySQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresql.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PostgreSQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/documentation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Database Security Cheat Sheet</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"25 min","wordCount":4871,"lastBuilt":"2025-09-14T03:53:56.738Z"},"category":{"key":"database","name":"Databases","description":"SQL and NoSQL database installation guides","icon":"🗄️","color":"#8be9fd","keywords":["mysql","postgresql","mongodb","redis","mariadb","databases"]},"relatedGuides":[{"name":"mongodb","displayName":"MongoDB","slug":"mongodb","description":"Repo for mongodb","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mongodb","updatedAt":"2025-09-14T01:30:34Z","createdAt":"2023-08-28T03:49:06Z","readmeRaw":"# MongoDB Installation Guide\n\nMongoDB is a free and open-source document-oriented NoSQL database. Originally developed by 10gen (now MongoDB Inc.), MongoDB uses JSON-like documents with optional schemas instead of traditional table-based relational database structure. It serves as a FOSS alternative to commercial document databases like Amazon DocumentDB, Azure Cosmos DB, or Oracle NoSQL Database, offering enterprise-grade features including horizontal scaling, replica sets, and sharding without licensing costs, with features like ACID transactions, aggregation pipelines, and full-text search.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 2GB minimum (8GB+ recommended for production)\n  - Storage: 10GB minimum (SSD strongly recommended for performance)\n  - Network: Stable connectivity for replica sets and sharding\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: Not officially supported by MongoDB Inc.\n- **Network Requirements**:\n  - Port 27017 (default MongoDB port)\n  - Port 27018 (default shard port)\n  - Port 27019 (default config server port)\n  - Additional ports for replica set members\n- **Dependencies**:\n  - OpenSSL, PCRE, zlib (usually included in distributions)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Create MongoDB 7.0 repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo <<EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org mongodb-org-tools mongodb-mongosh\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmongosh --eval 'db.runCommand(\"connectionStatus\")'\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y wget gnupg software-properties-common\n\n# Import MongoDB GPG key\nwget -qO /tmp/mongodb-server-7.0.asc https://www.mongodb.org/static/pgp/server-7.0.asc\nsudo mv /tmp/mongodb-server-7.0.asc /etc/apt/trusted.gpg.d/mongodb-server-7.0.asc\n\n# Add MongoDB repository\necho \"deb [arch=amd64,arm64] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update package index\nsudo apt update\n\n# Install MongoDB\nsudo apt install -y mongodb-org mongodb-org-tools mongodb-mongosh\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo ufw allow 27017\n```\n\n### Arch Linux\n\n```bash\n# MongoDB is available in AUR\nyay -S mongodb-bin mongodb-tools-bin mongosh-bin\n\n# Alternative: Install from AUR with makepkg\ngit clone https://aur.archlinux.org/mongodb-bin.git\ncd mongodb-bin\nmakepkg -si\n\n# Create mongodb user and group\nsudo useradd -r -s /sbin/nologin mongodb\n\n# Create necessary directories\nsudo mkdir -p /var/lib/mongodb /var/log/mongodb\nsudo chown mongodb:mongodb /var/lib/mongodb /var/log/mongodb\n\n# Enable and start service\nsudo systemctl enable --now mongodb\n\n# Configuration location: /etc/mongodb.conf\n```\n\n### Alpine Linux\n\n```bash\n# MongoDB is not officially supported on Alpine Linux\n# Use Docker for MongoDB on Alpine:\n\n# Install Docker\napk add --no-cache docker docker-compose\n\n# Enable and start Docker\nrc-update add docker default\nrc-service docker start\n\n# Run MongoDB container\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n\n# Verify installation\ndocker exec mongodb mongosh --eval 'db.runCommand(\"connectionStatus\")'\n```\n\n### openSUSE/SLES\n\n```bash\n# MongoDB is not officially packaged for openSUSE/SLES\n# Use Docker or manual installation:\n\n# Method 1: Docker installation\nsudo zypper install -y docker docker-compose\nsudo systemctl enable --now docker\n\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n\n# Method 2: Manual installation from tarball\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-7.0.4.tgz\ntar -xzf mongodb-linux-x86_64-rhel80-7.0.4.tgz\nsudo cp mongodb-linux-x86_64-rhel80-7.0.4/bin/* /usr/local/bin/\n\n# Create mongodb user and directories\nsudo useradd -r mongodb\nsudo mkdir -p /var/lib/mongodb /var/log/mongodb\nsudo chown mongodb:mongodb /var/lib/mongodb /var/log/mongodb\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew tap mongodb/brew\nbrew install mongodb-community@7.0 mongodb-database-tools mongosh\n\n# Start MongoDB service\nbrew services start mongodb/brew/mongodb-community@7.0\n\n# Or run manually\nmongod --config /usr/local/etc/mongod.conf\n\n# Configuration location: /usr/local/etc/mongod.conf\n# Alternative: /opt/homebrew/etc/mongod.conf (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# MongoDB is not officially supported on FreeBSD\n# Use Docker or compile from source:\n\n# Install Docker\npkg install docker\necho 'docker_enable=\"YES\"' >> /etc/rc.conf\nservice docker start\n\n# Run MongoDB container\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install mongodb mongodb-shell\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mongodb mongodb-shell\n\n# Method 3: Manual installation\n# Download from https://www.mongodb.com/download-center/community\n# Run mongodb-windows-x86_64-*.msi\n\n# Install as Windows service\n\"C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.exe\" --config \"C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg\" --install\n\n# Start service\nnet start MongoDB\n\n# Configuration location: C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create mongodb user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/mongodb -s /sbin/nologin -c \"MongoDB Server\" mongodb\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/mongod.conf`\n- Debian/Ubuntu: `/etc/mongod.conf`\n- Arch Linux: `/etc/mongodb.conf`\n- Alpine Linux: Docker container configuration\n- openSUSE/SLES: `/etc/mongod.conf` (manual installation)\n- macOS: `/usr/local/etc/mongod.conf`\n- FreeBSD: Docker container configuration\n- Windows: `C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg`\n\n3. **Essential settings to change**:\n\n```yaml\n# /etc/mongod.conf\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n      journalCompressor: snappy\n\nsystemLog:\n  destination: file\n  path: /var/log/mongodb/mongod.log\n  logAppend: true\n  logRotate: rename\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n  maxIncomingConnections: 200\n\nsecurity:\n  authorization: enabled\n  javascriptEnabled: false\n\noperationProfiling:\n  slowOpThresholdMs: 100\n\nreplication:\n  replSetName: rs0\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if MongoDB is running\nsudo systemctl status mongod\n\n# Test connection\nmongosh --eval 'db.runCommand(\"connectionStatus\")'\n\n# Check database status\nmongosh --eval 'db.runCommand(\"serverStatus\")'\n\n# Check configuration\nmongosh --eval 'db.runCommand(\"getCmdLineOpts\")'\n\n# Test basic operations\nmongosh --eval 'use test; db.testCollection.insertOne({test: \"document\"}); db.testCollection.findOne()'\n```\n\n**WARNING:** Enable authentication and create admin users immediately after installation!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable MongoDB to start on boot\nsudo systemctl enable mongod\n\n# Start MongoDB\nsudo systemctl start mongod\n\n# Stop MongoDB\nsudo systemctl stop mongod\n\n# Restart MongoDB\nsudo systemctl restart mongod\n\n# Reload configuration (graceful restart)\nsudo systemctl reload mongod\n\n# Check status\nsudo systemctl status mongod\n\n# View logs\nsudo journalctl -u mongod -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# MongoDB runs in Docker container on Alpine\ndocker start mongodb\ndocker stop mongodb\ndocker restart mongodb\n\n# Check status\ndocker ps | grep mongodb\n\n# View logs\ndocker logs -f mongodb\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# MongoDB runs in Docker container on FreeBSD\nservice docker start\n\ndocker start mongodb\ndocker stop mongodb\ndocker restart mongodb\n\n# Check status\ndocker ps | grep mongodb\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mongodb/brew/mongodb-community@7.0\nbrew services stop mongodb/brew/mongodb-community@7.0\nbrew services restart mongodb/brew/mongodb-community@7.0\n\n# Check status\nbrew services list | grep mongodb\n\n# Manual control\nmongod --config /usr/local/etc/mongod.conf\n```\n\n### Windows Service Manager\n\n```powershell\n# Start MongoDB service\nnet start MongoDB\n\n# Stop MongoDB service\nnet stop MongoDB\n\n# Using PowerShell\nStart-Service MongoDB\nStop-Service MongoDB\nRestart-Service MongoDB\n\n# Check status\nGet-Service MongoDB\n\n# View logs\nGet-EventLog -LogName Application -Source MongoDB\n```\n\n## Advanced Configuration\n\n### Replica Set Configuration\n\n```yaml\n# Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Sharding configuration (config server)\nsharding:\n  clusterRole: configsvr\n\nreplication:\n  replSetName: configReplSet\n\n# Sharding configuration (shard)\nsharding:\n  clusterRole: shardsvr\n\nreplication:\n  replSetName: shardReplSet\n```\n\n### Sharding Setup\n\n```javascript\n// Initialize config server replica set\nrs.initiate({\n  _id: \"configReplSet\",\n  configsvr: true,\n  members: [\n    { _id: 0, host: \"config1.example.com:27019\" },\n    { _id: 1, host: \"config2.example.com:27019\" },\n    { _id: 2, host: \"config3.example.com:27019\" }\n  ]\n})\n\n// Initialize shard replica sets\nrs.initiate({\n  _id: \"shard1ReplSet\",\n  members: [\n    { _id: 0, host: \"shard1-a.example.com:27018\" },\n    { _id: 1, host: \"shard1-b.example.com:27018\" },\n    { _id: 2, host: \"shard1-c.example.com:27018\" }\n  ]\n})\n\n// Add shards to cluster (from mongos)\nsh.addShard(\"shard1ReplSet/shard1-a.example.com:27018,shard1-b.example.com:27018,shard1-c.example.com:27018\")\n```\n\n### Advanced Security Settings\n\n```yaml\n# Security configuration\nsecurity:\n  authorization: enabled\n  clusterAuthMode: keyFile\n  keyFile: /etc/mongodb/mongodb-keyfile\n  javascriptEnabled: false\n  \nnet:\n  tls:\n    mode: requireTLS\n    certificateKeyFile: /etc/mongodb/ssl/mongodb.pem\n    CAFile: /etc/mongodb/ssl/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nauditLog:\n  destination: file\n  format: JSON\n  path: /var/log/mongodb/audit.log\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/mongodb\nupstream mongodb_backend {\n    server 127.0.0.1:27017 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:27018 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 27017;\n    proxy_pass mongodb_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mongodb.log;\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend mongodb_frontend\n    bind *:27017\n    mode tcp\n    option tcplog\n    default_backend mongodb_servers\n\nbackend mongodb_servers\n    mode tcp\n    balance roundrobin\n    option tcp-check\n    tcp-check connect\n    server mongodb1 127.0.0.1:27017 check\n    server mongodb2 127.0.0.1:27018 check backup\n```\n\n### Connection Pooling with mongos\n\n```yaml\n# mongos configuration\nsharding:\n  configDB: configReplSet/config1.example.com:27019,config2.example.com:27019,config3.example.com:27019\n\nnet:\n  port: 27017\n  bindIp: 0.0.0.0\n  maxIncomingConnections: 1000\n\nsystemLog:\n  destination: file\n  path: /var/log/mongodb/mongos.log\n  logAppend: true\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/mongodb/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out /etc/mongodb/ssl/ca-key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /etc/mongodb/ssl/ca-key.pem -out /etc/mongodb/ssl/ca.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA\"\n\n# Create server certificate\nsudo openssl genrsa -out /etc/mongodb/ssl/mongodb-key.pem 4096\nsudo openssl req -new -key /etc/mongodb/ssl/mongodb-key.pem -out /etc/mongodb/ssl/mongodb-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com\"\nsudo openssl x509 -req -in /etc/mongodb/ssl/mongodb-req.pem -CA /etc/mongodb/ssl/ca.pem -CAkey /etc/mongodb/ssl/ca-key.pem -CAcreateserial -out /etc/mongodb/ssl/mongodb-cert.pem -days 365\n\n# Combine certificate and key\nsudo cat /etc/mongodb/ssl/mongodb-cert.pem /etc/mongodb/ssl/mongodb-key.pem > /etc/mongodb/ssl/mongodb.pem\n\n# Set permissions\nsudo chown -R mongodb:mongodb /etc/mongodb/ssl\nsudo chmod 600 /etc/mongodb/ssl/*.pem\nsudo chmod 644 /etc/mongodb/ssl/ca.pem\n```\n\n### User Security and Authentication\n\n```javascript\n// Create admin user\nuse admin\ndb.createUser({\n  user: \"admin\",\n  pwd: \"SecureAdminPassword123!\",\n  roles: [\n    { role: \"userAdminAnyDatabase\", db: \"admin\" },\n    { role: \"readWriteAnyDatabase\", db: \"admin\" },\n    { role: \"dbAdminAnyDatabase\", db: \"admin\" },\n    { role: \"clusterAdmin\", db: \"admin\" }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: \"appuser\",\n  pwd: \"SecureAppPassword123!\",\n  roles: [\n    { role: \"readWrite\", db: \"myapp\" }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: \"backup\",\n  pwd: \"BackupPassword123!\",\n  roles: [\n    { role: \"backup\", db: \"admin\" },\n    { role: \"clusterMonitor\", db: \"admin\" }\n  ]\n})\n\n// Create monitoring user\ndb.createUser({\n  user: \"monitor\",\n  pwd: \"MonitorPassword123!\",\n  roles: [\n    { role: \"clusterMonitor\", db: \"admin\" },\n    { role: \"read\", db: \"local\" }\n  ]\n})\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 27017\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mongodb\nsudo firewall-cmd --permanent --zone=mongodb --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mongodb --add-port=27017/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 27017 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 27017\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"MongoDB\" -Direction Inbound -Protocol TCP -LocalPort 27017 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Database Creation and Management\n\n```javascript\n// Create application database\nuse myapp\n\n// Create collections with validation\ndb.createCollection(\"users\", {\n  validator: {\n    $jsonSchema: {\n      bsonType: \"object\",\n      required: [\"username\", \"email\"],\n      properties: {\n        username: {\n          bsonType: \"string\",\n          description: \"must be a string and is required\"\n        },\n        email: {\n          bsonType: \"string\",\n          pattern: \"^.+@.+$\",\n          description: \"must be a valid email address\"\n        }\n      }\n    }\n  }\n})\n\n// Create indexes for performance\ndb.users.createIndex({ username: 1 }, { unique: true })\ndb.users.createIndex({ email: 1 }, { unique: true })\ndb.users.createIndex({ created_at: 1 })\n\n// Create time-series collection (MongoDB 5.0+)\ndb.createCollection(\"logs\", {\n  timeseries: {\n    timeField: \"timestamp\",\n    metaField: \"source\",\n    granularity: \"minutes\"\n  }\n})\n```\n\n### Database Optimization\n\n```javascript\n// Analyze collection statistics\ndb.stats()\ndb.users.stats()\n\n// Check index usage\ndb.users.aggregate([{ $indexStats: {} }])\n\n// Optimize queries with explain\ndb.users.find({ username: \"john\" }).explain(\"executionStats\")\n\n// Create compound indexes\ndb.orders.createIndex({ user_id: 1, created_at: -1 })\n\n// Text search index\ndb.products.createIndex({ name: \"text\", description: \"text\" })\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# MongoDB-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# MongoDB optimizations\nvm.swappiness = 1\nvm.max_map_count = 262144\nnet.core.somaxconn = 4096\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 120\nnet.ipv4.tcp_max_syn_backlog = 4096\nEOF\n\nsudo sysctl -p\n\n# Disable Transparent Huge Pages\necho 'never' | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\necho 'never' | sudo tee /sys/kernel/mm/transparent_hugepage/defrag\n\n# Make THP disable permanent\nsudo tee /etc/systemd/system/disable-thp.service <<EOF\n[Unit]\nDescription=Disable Transparent Huge Pages (THP)\nDefaultDependencies=no\nAfter=sysinit.target local-fs.target\nBefore=mongod.service\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c 'echo never | tee /sys/kernel/mm/transparent_hugepage/enabled > /dev/null'\nExecStart=/bin/sh -c 'echo never | tee /sys/kernel/mm/transparent_hugepage/defrag > /dev/null'\n\n[Install]\nWantedBy=basic.target\nEOF\n\nsudo systemctl enable --now disable-thp\n```\n\n### MongoDB Performance Tuning\n\n```yaml\n# High-performance MongoDB configuration\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 8  # 50% of available RAM\n      journalCompressor: snappy\n      directoryForIndexes: true\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 1.0\n\nnet:\n  maxIncomingConnections: 1000\n  serviceExecutor: adaptive\n\nsetParameter:\n  cursorTimeoutMillis: 600000\n  failIndexKeyTooLong: false\n  maxIndexBuildDrainBatchSize: 128\n  wiredTigerConcurrentReadTransactions: 128\n  wiredTigerConcurrentWriteTransactions: 128\n```\n\n### Query Optimization\n\n```javascript\n// Enable profiler for slow operations\ndb.setProfilingLevel(2, { slowms: 100 })\n\n// Analyze slow queries\ndb.system.profile.find().limit(5).sort({ ts: -1 }).pretty()\n\n// Index optimization\ndb.collection.getIndexes()\ndb.collection.dropIndex(\"index_name\")\n\n// Use aggregation pipeline optimization\ndb.collection.aggregate([\n  { $match: { status: \"active\" } },\n  { $sort: { created_at: -1 } },\n  { $limit: 100 }\n], { allowDiskUse: true })\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```javascript\n// Server status and statistics\ndb.runCommand(\"serverStatus\")\ndb.runCommand(\"dbStats\")\ndb.runCommand(\"collStats\", \"collection_name\")\n\n// Connection and operation monitoring\ndb.runCommand(\"currentOp\")\ndb.runCommand(\"top\")\n\n// Replica set monitoring\nrs.status()\nrs.printReplicationInfo()\nrs.printSlaveReplicationInfo()\n\n// Sharding monitoring\nsh.status()\ndb.printShardingStatus()\n```\n\n### External Monitoring Setup\n\n```bash\n# Install MongoDB Exporter for Prometheus\nwget https://github.com/percona/mongodb_exporter/releases/download/v0.39.0/mongodb_exporter-0.39.0.linux-amd64.tar.gz\ntar xzf mongodb_exporter-*.tar.gz\nsudo cp mongodb_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/mongodb_exporter.service <<EOF\n[Unit]\nDescription=MongoDB Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mongodb\nEnvironment=MONGODB_URI=\"mongodb://monitor:MonitorPassword123!@localhost:27017/admin\"\nExecStart=/usr/local/bin/mongodb_exporter --mongodb.uri=\\$MONGODB_URI\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mongodb_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# mongodb-health-check.sh\n\n# Check MongoDB service\nif ! systemctl is-active mongod >/dev/null 2>&1; then\n    echo \"CRITICAL: MongoDB service is not running\"\n    exit 2\nfi\n\n# Check connectivity\nif ! mongosh --quiet --eval \"db.runCommand('ping')\" >/dev/null 2>&1; then\n    echo \"CRITICAL: Cannot connect to MongoDB\"\n    exit 2\nfi\n\n# Check replica set status (if configured)\nREPLICA_STATUS=$(mongosh --quiet --eval \"rs.status().ok\" 2>/dev/null)\nif [ \"$REPLICA_STATUS\" = \"1\" ]; then\n    PRIMARY_COUNT=$(mongosh --quiet --eval \"rs.status().members.filter(m => m.stateStr === 'PRIMARY').length\" 2>/dev/null)\n    if [ \"$PRIMARY_COUNT\" != \"1\" ]; then\n        echo \"WARNING: No primary or multiple primaries in replica set\"\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.current\" 2>/dev/null)\nMAX_CONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.available\" 2>/dev/null)\nCONNECTION_USAGE=$((CONNECTIONS * 100 / (CONNECTIONS + MAX_CONNECTIONS)))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo \"WARNING: High connection usage: ${CONNECTION_USAGE}%\"\n    exit 1\nfi\n\necho \"OK: MongoDB is healthy\"\nexit 0\n```\n\n## Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# mongodb-backup.sh\n\nBACKUP_DIR=\"/backup/mongodb/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Full database backup\nmongodump \\\n  --host=\"localhost:27017\" \\\n  --username=backup \\\n  --password=BackupPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --out \"$BACKUP_DIR\"\n\n# Oplog backup for point-in-time recovery\nmongodump \\\n  --host=\"localhost:27017\" \\\n  --username=backup \\\n  --password=BackupPassword123! \\\n  --authenticationDatabase=admin \\\n  --db=local \\\n  --collection=oplog.rs \\\n  --gzip \\\n  --out \"$BACKUP_DIR/oplog\"\n\n# Configuration backup\ncp -r /etc/mongod.conf \"$BACKUP_DIR/\"\n\n# Compress backup\ntar czf \"$BACKUP_DIR.tar.gz\" -C \"$(dirname \"$BACKUP_DIR\")\" \"$(basename \"$BACKUP_DIR\")\"\nrm -rf \"$BACKUP_DIR\"\n\necho \"Backup completed: $BACKUP_DIR.tar.gz\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# mongodb-restore.sh\n\nBACKUP_FILE=\"$1\"\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.tar.gz>\"\n    exit 1\nfi\n\n# Extract backup\nBACKUP_DIR=\"/tmp/mongodb-restore-$(date +%s)\"\nmkdir -p \"$BACKUP_DIR\"\ntar xzf \"$BACKUP_FILE\" -C \"$BACKUP_DIR\" --strip-components=1\n\n# Stop applications using the database\necho \"Stopping applications...\"\n\n# Restore database\necho \"Restoring database from $BACKUP_FILE...\"\nmongorestore \\\n  --host=\"localhost:27017\" \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --drop \\\n  \"$BACKUP_DIR\"\n\n# Cleanup\nrm -rf \"$BACKUP_DIR\"\n\necho \"Restore completed\"\n```\n\n### Point-in-Time Recovery\n\n```bash\n#!/bin/bash\n# mongodb-pitr.sh\n\nBACKUP_FILE=\"$1\"\nRECOVERY_TIME=\"$2\"\n\nif [ -z \"$BACKUP_FILE\" ] || [ -z \"$RECOVERY_TIME\" ]; then\n    echo \"Usage: $0 <backup-file.tar.gz> <recovery-time>\"\n    echo \"Example: $0 backup.tar.gz '2024-01-15T14:30:00.000Z'\"\n    exit 1\nfi\n\n# Extract and restore base backup\nBACKUP_DIR=\"/tmp/mongodb-pitr-$(date +%s)\"\nmkdir -p \"$BACKUP_DIR\"\ntar xzf \"$BACKUP_FILE\" -C \"$BACKUP_DIR\" --strip-components=1\n\n# Restore base backup\nmongorestore \\\n  --host=\"localhost:27017\" \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --drop \\\n  \"$BACKUP_DIR\"\n\n# Apply oplog up to recovery point\nmongorestore \\\n  --host=\"localhost:27017\" \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --oplogReplay \\\n  --oplogLimit=\"$(date -d \"$RECOVERY_TIME\" +%s):1\" \\\n  --gzip \\\n  \"$BACKUP_DIR/oplog\"\n\n# Cleanup\nrm -rf \"$BACKUP_DIR\"\n\necho \"Point-in-time recovery completed to $RECOVERY_TIME\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **MongoDB won't start**:\n```bash\n# Check logs\nsudo journalctl -u mongod -f\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Check disk space\ndf -h /var/lib/mongodb\n\n# Check permissions\nls -la /var/lib/mongodb\n\n# Repair database\nmongod --repair --dbpath /var/lib/mongodb\n```\n\n2. **Connection issues**:\n```bash\n# Check if MongoDB is listening\nsudo ss -tlnp | grep :27017\n\n# Test local connection\nmongosh --eval \"db.runCommand('ping')\"\n\n# Check authentication\nmongosh admin --username admin\n\n# Check bind address\nmongosh --eval \"db.runCommand('getCmdLineOpts')\"\n```\n\n3. **Performance issues**:\n```bash\n# Check slow queries\nmongosh --eval \"db.setProfilingLevel(2, {slowms: 100})\"\nmongosh --eval \"db.system.profile.find().sort({ts:-1}).limit(5)\"\n\n# Check index usage\nmongosh --eval \"db.collection.getIndexes()\"\n\n# Check server status\nmongosh --eval \"db.serverStatus()\"\n```\n\n### Debug Mode\n\n```bash\n# Start MongoDB with verbose logging\nsudo systemctl edit mongod\n# Add:\n[Service]\nEnvironment=\"MONGOD_OPTIONS=--verbose\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart mongod\n\n# Enable profiling for all operations\nmongosh --eval \"db.setProfilingLevel(2)\"\n\n# View debug logs\nsudo tail -f /var/log/mongodb/mongod.log\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update mongodb-org\nsudo yum update mongodb-org\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mongodb-org\n\n# Arch Linux\nyay -Syu mongodb-bin\n\n# macOS\nbrew upgrade mongodb-community@7.0\n\n# Docker (Alpine/FreeBSD)\ndocker pull mongo:7.0\ndocker stop mongodb\ndocker rm mongodb\n# Re-run docker run command with new image\n\n# Always backup before updates\n./mongodb-backup.sh\n\n# Restart after updates\nsudo systemctl restart mongod\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# mongodb-maintenance.sh\n\n# Compact collections\nmongosh admin --username admin --password SecureAdminPassword123! <<EOF\nuse myapp\ndb.runCommand({compact: \"collection_name\"})\nEOF\n\n# Update collection statistics\nmongosh admin --username admin --password SecureAdminPassword123! <<EOF\ndb.runCommand({planCacheClear: \"\"})\nEOF\n\n# Clean up old oplogs (automatically managed but can be tuned)\nmongosh admin --username admin --password SecureAdminPassword123! <<EOF\nuse local\ndb.oplog.rs.find().sort({\\$natural:-1}).limit(1)\nEOF\n\necho \"MongoDB maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/mongodb-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mongodb <<EOF\n/var/log/mongodb/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 mongodb mongodb\n    postrotate\n        /bin/kill -SIGUSR1 \\$(cat /var/run/mongodb/mongod.pid 2>/dev/null) 2>/dev/null || true\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Node.js Integration\n\n```javascript\n// Using MongoDB Node.js driver\nconst { MongoClient } = require('mongodb');\n\nconst client = new MongoClient('mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp', {\n  tls: true,\n  tlsCertificateKeyFile: '/etc/mongodb/ssl/client.pem',\n  tlsCAFile: '/etc/mongodb/ssl/ca.pem',\n  authSource: 'myapp'\n});\n\nasync function connect() {\n  await client.connect();\n  const db = client.db('myapp');\n  return db;\n}\n```\n\n### Python Integration\n\n```python\n# Using PyMongo\nimport pymongo\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp', \n                    tls=True,\n                    tlsCertificateKeyFile='/etc/mongodb/ssl/client.pem',\n                    tlsCAFile='/etc/mongodb/ssl/ca.pem',\n                    authSource='myapp')\n\ndb = client.myapp\ncollection = db.users\n```\n\n### Java Integration\n\n```java\n// Using MongoDB Java driver\nimport com.mongodb.client.MongoClients;\nimport com.mongodb.client.MongoClient;\nimport com.mongodb.client.MongoDatabase;\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.ConnectionString;\n\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyConnectionString(new ConnectionString(\"mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp\"))\n    .applyToSslSettings(builder -> \n        builder.enabled(true)\n               .invalidHostNameAllowed(false))\n    .build();\n\nMongoClient mongoClient = MongoClients.create(settings);\nMongoDatabase database = mongoClient.getDatabase(\"myapp\");\n```\n\n### Express.js Integration\n\n```javascript\n// Using Mongoose ODM\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp', {\n  tls: true,\n  tlsCertificateKeyFile: '/etc/mongodb/ssl/client.pem',\n  tlsCAFile: '/etc/mongodb/ssl/ca.pem',\n  authSource: 'myapp'\n});\n\nconst userSchema = new mongoose.Schema({\n  username: { type: String, required: true, unique: true },\n  email: { type: String, required: true, unique: true },\n  created_at: { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n```\n\n## Additional Resources\n\n- [Official MongoDB Documentation](https://docs.mongodb.com/)\n- [MongoDB University](https://university.mongodb.com/)\n- [MongoDB Security Checklist](https://docs.mongodb.com/manual/administration/security-checklist/)\n- [MongoDB Performance Best Practices](https://docs.mongodb.com/manual/administration/analyzing-mongodb-performance/)\n- [Replica Set Tutorial](https://docs.mongodb.com/manual/tutorial/deploy-replica-set/)\n- [Sharding Tutorial](https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/)\n- [MongoDB Community Forum](https://developer.mongodb.com/community/forums/)\n- [MongoDB Blog](https://www.mongodb.com/blog)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"mongodb-installation-guide\" class=\"mobile-header\">MongoDB Installation Guide</h1>\n<p class=\"mobile-paragraph\">MongoDB is a free and open-source document-oriented NoSQL database. Originally developed by 10gen (now MongoDB Inc.), MongoDB uses JSON-like documents with optional schemas instead of traditional table-based relational database structure. It serves as a FOSS alternative to commercial document databases like Amazon DocumentDB, Azure Cosmos DB, or Oracle NoSQL Database, offering enterprise-grade features including horizontal scaling, replica sets, and sharding without licensing costs, with features like ACID transactions, aggregation pipelines, and full-text search.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum (SSD strongly recommended for performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for replica sets and sharding</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: Not officially supported by MongoDB Inc.</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 27017 (default MongoDB port)</li>\n<li class=\"mobile-list-item\">Port 27018 (default shard port)</li>\n<li class=\"mobile-list-item\">Port 27019 (default config server port)</li>\n<li class=\"mobile-list-item\">Additional ports for replica set members</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">OpenSSL, PCRE, zlib (usually included in distributions)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create MongoDB 7.0 repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo &lt;&lt;EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org mongodb-org-tools mongodb-mongosh\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y wget gnupg software-properties-common\n\n# Import MongoDB GPG key\nwget -qO /tmp/mongodb-server-7.0.asc https://www.mongodb.org/static/pgp/server-7.0.asc\nsudo mv /tmp/mongodb-server-7.0.asc /etc/apt/trusted.gpg.d/mongodb-server-7.0.asc\n\n# Add MongoDB repository\necho &quot;deb [arch=amd64,arm64] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update package index\nsudo apt update\n\n# Install MongoDB\nsudo apt install -y mongodb-org mongodb-org-tools mongodb-mongosh\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo ufw allow 27017</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB is available in AUR\nyay -S mongodb-bin mongodb-tools-bin mongosh-bin\n\n# Alternative: Install from AUR with makepkg\ngit clone https://aur.archlinux.org/mongodb-bin.git\ncd mongodb-bin\nmakepkg -si\n\n# Create mongodb user and group\nsudo useradd -r -s /sbin/nologin mongodb\n\n# Create necessary directories\nsudo mkdir -p /var/lib/mongodb /var/log/mongodb\nsudo chown mongodb:mongodb /var/lib/mongodb /var/log/mongodb\n\n# Enable and start service\nsudo systemctl enable --now mongodb\n\n# Configuration location: /etc/mongodb.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB is not officially supported on Alpine Linux\n# Use Docker for MongoDB on Alpine:\n\n# Install Docker\napk add --no-cache docker docker-compose\n\n# Enable and start Docker\nrc-update add docker default\nrc-service docker start\n\n# Run MongoDB container\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n\n# Verify installation\ndocker exec mongodb mongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB is not officially packaged for openSUSE/SLES\n# Use Docker or manual installation:\n\n# Method 1: Docker installation\nsudo zypper install -y docker docker-compose\nsudo systemctl enable --now docker\n\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n\n# Method 2: Manual installation from tarball\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-7.0.4.tgz\ntar -xzf mongodb-linux-x86_64-rhel80-7.0.4.tgz\nsudo cp mongodb-linux-x86_64-rhel80-7.0.4/bin/* /usr/local/bin/\n\n# Create mongodb user and directories\nsudo useradd -r mongodb\nsudo mkdir -p /var/lib/mongodb /var/log/mongodb\nsudo chown mongodb:mongodb /var/lib/mongodb /var/log/mongodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew tap mongodb/brew\nbrew install mongodb-community@7.0 mongodb-database-tools mongosh\n\n# Start MongoDB service\nbrew services start mongodb/brew/mongodb-community@7.0\n\n# Or run manually\nmongod --config /usr/local/etc/mongod.conf\n\n# Configuration location: /usr/local/etc/mongod.conf\n# Alternative: /opt/homebrew/etc/mongod.conf (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB is not officially supported on FreeBSD\n# Use Docker or compile from source:\n\n# Install Docker\npkg install docker\necho &#039;docker_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\nservice docker start\n\n# Run MongoDB container\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install mongodb mongodb-shell\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mongodb mongodb-shell\n\n# Method 3: Manual installation\n# Download from https://www.mongodb.com/download-center/community\n# Run mongodb-windows-x86_64-*.msi\n\n# Install as Windows service\n&quot;C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.exe&quot; --config &quot;C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg&quot; --install\n\n# Start service\nnet start MongoDB\n\n# Configuration location: C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create mongodb user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/mongodb -s /sbin/nologin -c &quot;MongoDB Server&quot; mongodb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/mongod.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/mongod.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/mongodb.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: Docker container configuration</li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/mongod.conf</code> (manual installation)</li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/mongod.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: Docker container configuration</li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/mongod.conf\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n      journalCompressor: snappy\n\nsystemLog:\n  destination: file\n  path: /var/log/mongodb/mongod.log\n  logAppend: true\n  logRotate: rename\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n  maxIncomingConnections: 200\n\nsecurity:\n  authorization: enabled\n  javascriptEnabled: false\n\noperationProfiling:\n  slowOpThresholdMs: 100\n\nreplication:\n  replSetName: rs0\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MongoDB is running\nsudo systemctl status mongod\n\n# Test connection\nmongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;\n\n# Check database status\nmongosh --eval &#039;db.runCommand(&quot;serverStatus&quot;)&#039;\n\n# Check configuration\nmongosh --eval &#039;db.runCommand(&quot;getCmdLineOpts&quot;)&#039;\n\n# Test basic operations\nmongosh --eval &#039;use test; db.testCollection.insertOne({test: &quot;document&quot;}); db.testCollection.findOne()&#039;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Enable authentication and create admin users immediately after installation!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable MongoDB to start on boot\nsudo systemctl enable mongod\n\n# Start MongoDB\nsudo systemctl start mongod\n\n# Stop MongoDB\nsudo systemctl stop mongod\n\n# Restart MongoDB\nsudo systemctl restart mongod\n\n# Reload configuration (graceful restart)\nsudo systemctl reload mongod\n\n# Check status\nsudo systemctl status mongod\n\n# View logs\nsudo journalctl -u mongod -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB runs in Docker container on Alpine\ndocker start mongodb\ndocker stop mongodb\ndocker restart mongodb\n\n# Check status\ndocker ps | grep mongodb\n\n# View logs\ndocker logs -f mongodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB runs in Docker container on FreeBSD\nservice docker start\n\ndocker start mongodb\ndocker stop mongodb\ndocker restart mongodb\n\n# Check status\ndocker ps | grep mongodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mongodb/brew/mongodb-community@7.0\nbrew services stop mongodb/brew/mongodb-community@7.0\nbrew services restart mongodb/brew/mongodb-community@7.0\n\n# Check status\nbrew services list | grep mongodb\n\n# Manual control\nmongod --config /usr/local/etc/mongod.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start MongoDB service\nnet start MongoDB\n\n# Stop MongoDB service\nnet stop MongoDB\n\n# Using PowerShell\nStart-Service MongoDB\nStop-Service MongoDB\nRestart-Service MongoDB\n\n# Check status\nGet-Service MongoDB\n\n# View logs\nGet-EventLog -LogName Application -Source MongoDB</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"replica-set-configuration\" class=\"mobile-header\">Replica Set Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Sharding configuration (config server)\nsharding:\n  clusterRole: configsvr\n\nreplication:\n  replSetName: configReplSet\n\n# Sharding configuration (shard)\nsharding:\n  clusterRole: shardsvr\n\nreplication:\n  replSetName: shardReplSet</code></pre>\n      </div>\n    </div>\n<h3 id=\"sharding-setup\" class=\"mobile-header\">Sharding Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Initialize config server replica set\nrs.initiate({\n  _id: &quot;configReplSet&quot;,\n  configsvr: true,\n  members: [\n    { _id: 0, host: &quot;config1.example.com:27019&quot; },\n    { _id: 1, host: &quot;config2.example.com:27019&quot; },\n    { _id: 2, host: &quot;config3.example.com:27019&quot; }\n  ]\n})\n\n// Initialize shard replica sets\nrs.initiate({\n  _id: &quot;shard1ReplSet&quot;,\n  members: [\n    { _id: 0, host: &quot;shard1-a.example.com:27018&quot; },\n    { _id: 1, host: &quot;shard1-b.example.com:27018&quot; },\n    { _id: 2, host: &quot;shard1-c.example.com:27018&quot; }\n  ]\n})\n\n// Add shards to cluster (from mongos)\nsh.addShard(&quot;shard1ReplSet/shard1-a.example.com:27018,shard1-b.example.com:27018,shard1-c.example.com:27018&quot;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Security configuration\nsecurity:\n  authorization: enabled\n  clusterAuthMode: keyFile\n  keyFile: /etc/mongodb/mongodb-keyfile\n  javascriptEnabled: false\n  \nnet:\n  tls:\n    mode: requireTLS\n    certificateKeyFile: /etc/mongodb/ssl/mongodb.pem\n    CAFile: /etc/mongodb/ssl/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nauditLog:\n  destination: file\n  format: JSON\n  path: /var/log/mongodb/audit.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/mongodb\nupstream mongodb_backend {\n    server 127.0.0.1:27017 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:27018 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 27017;\n    proxy_pass mongodb_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mongodb.log;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend mongodb_frontend\n    bind *:27017\n    mode tcp\n    option tcplog\n    default_backend mongodb_servers\n\nbackend mongodb_servers\n    mode tcp\n    balance roundrobin\n    option tcp-check\n    tcp-check connect\n    server mongodb1 127.0.0.1:27017 check\n    server mongodb2 127.0.0.1:27018 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"connection-pooling-with-mongos\" class=\"mobile-header\">Connection Pooling with mongos</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># mongos configuration\nsharding:\n  configDB: configReplSet/config1.example.com:27019,config2.example.com:27019,config3.example.com:27019\n\nnet:\n  port: 27017\n  bindIp: 0.0.0.0\n  maxIncomingConnections: 1000\n\nsystemLog:\n  destination: file\n  path: /var/log/mongodb/mongos.log\n  logAppend: true</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/mongodb/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out /etc/mongodb/ssl/ca-key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /etc/mongodb/ssl/ca-key.pem -out /etc/mongodb/ssl/ca.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA&quot;\n\n# Create server certificate\nsudo openssl genrsa -out /etc/mongodb/ssl/mongodb-key.pem 4096\nsudo openssl req -new -key /etc/mongodb/ssl/mongodb-key.pem -out /etc/mongodb/ssl/mongodb-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com&quot;\nsudo openssl x509 -req -in /etc/mongodb/ssl/mongodb-req.pem -CA /etc/mongodb/ssl/ca.pem -CAkey /etc/mongodb/ssl/ca-key.pem -CAcreateserial -out /etc/mongodb/ssl/mongodb-cert.pem -days 365\n\n# Combine certificate and key\nsudo cat /etc/mongodb/ssl/mongodb-cert.pem /etc/mongodb/ssl/mongodb-key.pem &gt; /etc/mongodb/ssl/mongodb.pem\n\n# Set permissions\nsudo chown -R mongodb:mongodb /etc/mongodb/ssl\nsudo chmod 600 /etc/mongodb/ssl/*.pem\nsudo chmod 644 /etc/mongodb/ssl/ca.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-security-and-authentication\" class=\"mobile-header\">User Security and Authentication</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Create admin user\nuse admin\ndb.createUser({\n  user: &quot;admin&quot;,\n  pwd: &quot;SecureAdminPassword123!&quot;,\n  roles: [\n    { role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;dbAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: &quot;appuser&quot;,\n  pwd: &quot;SecureAppPassword123!&quot;,\n  roles: [\n    { role: &quot;readWrite&quot;, db: &quot;myapp&quot; }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: &quot;backup&quot;,\n  pwd: &quot;BackupPassword123!&quot;,\n  roles: [\n    { role: &quot;backup&quot;, db: &quot;admin&quot; },\n    { role: &quot;clusterMonitor&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Create monitoring user\ndb.createUser({\n  user: &quot;monitor&quot;,\n  pwd: &quot;MonitorPassword123!&quot;,\n  roles: [\n    { role: &quot;clusterMonitor&quot;, db: &quot;admin&quot; },\n    { role: &quot;read&quot;, db: &quot;local&quot; }\n  ]\n})</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 27017\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mongodb\nsudo firewall-cmd --permanent --zone=mongodb --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mongodb --add-port=27017/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 27017 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 27017\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;MongoDB&quot; -Direction Inbound -Protocol TCP -LocalPort 27017 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"database-creation-and-management\" class=\"mobile-header\">Database Creation and Management</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Create application database\nuse myapp\n\n// Create collections with validation\ndb.createCollection(&quot;users&quot;, {\n  validator: {\n    $jsonSchema: {\n      bsonType: &quot;object&quot;,\n      required: [&quot;username&quot;, &quot;email&quot;],\n      properties: {\n        username: {\n          bsonType: &quot;string&quot;,\n          description: &quot;must be a string and is required&quot;\n        },\n        email: {\n          bsonType: &quot;string&quot;,\n          pattern: &quot;^.+@.+$&quot;,\n          description: &quot;must be a valid email address&quot;\n        }\n      }\n    }\n  }\n})\n\n// Create indexes for performance\ndb.users.createIndex({ username: 1 }, { unique: true })\ndb.users.createIndex({ email: 1 }, { unique: true })\ndb.users.createIndex({ created_at: 1 })\n\n// Create time-series collection (MongoDB 5.0+)\ndb.createCollection(&quot;logs&quot;, {\n  timeseries: {\n    timeField: &quot;timestamp&quot;,\n    metaField: &quot;source&quot;,\n    granularity: &quot;minutes&quot;\n  }\n})</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Analyze collection statistics\ndb.stats()\ndb.users.stats()\n\n// Check index usage\ndb.users.aggregate([{ $indexStats: {} }])\n\n// Optimize queries with explain\ndb.users.find({ username: &quot;john&quot; }).explain(&quot;executionStats&quot;)\n\n// Create compound indexes\ndb.orders.createIndex({ user_id: 1, created_at: -1 })\n\n// Text search index\ndb.products.createIndex({ name: &quot;text&quot;, description: &quot;text&quot; })</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# MongoDB optimizations\nvm.swappiness = 1\nvm.max_map_count = 262144\nnet.core.somaxconn = 4096\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 120\nnet.ipv4.tcp_max_syn_backlog = 4096\nEOF\n\nsudo sysctl -p\n\n# Disable Transparent Huge Pages\necho &#039;never&#039; | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\necho &#039;never&#039; | sudo tee /sys/kernel/mm/transparent_hugepage/defrag\n\n# Make THP disable permanent\nsudo tee /etc/systemd/system/disable-thp.service &lt;&lt;EOF\n[Unit]\nDescription=Disable Transparent Huge Pages (THP)\nDefaultDependencies=no\nAfter=sysinit.target local-fs.target\nBefore=mongod.service\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c &#039;echo never | tee /sys/kernel/mm/transparent_hugepage/enabled &gt; /dev/null&#039;\nExecStart=/bin/sh -c &#039;echo never | tee /sys/kernel/mm/transparent_hugepage/defrag &gt; /dev/null&#039;\n\n[Install]\nWantedBy=basic.target\nEOF\n\nsudo systemctl enable --now disable-thp</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-performance-tuning\" class=\"mobile-header\">MongoDB Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># High-performance MongoDB configuration\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 8  # 50% of available RAM\n      journalCompressor: snappy\n      directoryForIndexes: true\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 1.0\n\nnet:\n  maxIncomingConnections: 1000\n  serviceExecutor: adaptive\n\nsetParameter:\n  cursorTimeoutMillis: 600000\n  failIndexKeyTooLong: false\n  maxIndexBuildDrainBatchSize: 128\n  wiredTigerConcurrentReadTransactions: 128\n  wiredTigerConcurrentWriteTransactions: 128</code></pre>\n      </div>\n    </div>\n<h3 id=\"query-optimization\" class=\"mobile-header\">Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Enable profiler for slow operations\ndb.setProfilingLevel(2, { slowms: 100 })\n\n// Analyze slow queries\ndb.system.profile.find().limit(5).sort({ ts: -1 }).pretty()\n\n// Index optimization\ndb.collection.getIndexes()\ndb.collection.dropIndex(&quot;index_name&quot;)\n\n// Use aggregation pipeline optimization\ndb.collection.aggregate([\n  { $match: { status: &quot;active&quot; } },\n  { $sort: { created_at: -1 } },\n  { $limit: 100 }\n], { allowDiskUse: true })</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Server status and statistics\ndb.runCommand(&quot;serverStatus&quot;)\ndb.runCommand(&quot;dbStats&quot;)\ndb.runCommand(&quot;collStats&quot;, &quot;collection_name&quot;)\n\n// Connection and operation monitoring\ndb.runCommand(&quot;currentOp&quot;)\ndb.runCommand(&quot;top&quot;)\n\n// Replica set monitoring\nrs.status()\nrs.printReplicationInfo()\nrs.printSlaveReplicationInfo()\n\n// Sharding monitoring\nsh.status()\ndb.printShardingStatus()</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MongoDB Exporter for Prometheus\nwget https://github.com/percona/mongodb_exporter/releases/download/v0.39.0/mongodb_exporter-0.39.0.linux-amd64.tar.gz\ntar xzf mongodb_exporter-*.tar.gz\nsudo cp mongodb_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/mongodb_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=MongoDB Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mongodb\nEnvironment=MONGODB_URI=&quot;mongodb://monitor:MonitorPassword123!@localhost:27017/admin&quot;\nExecStart=/usr/local/bin/mongodb_exporter --mongodb.uri=\\$MONGODB_URI\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mongodb_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mongodb-health-check.sh\n\n# Check MongoDB service\nif ! systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: MongoDB service is not running&quot;\n    exit 2\nfi\n\n# Check connectivity\nif ! mongosh --quiet --eval &quot;db.runCommand(&#039;ping&#039;)&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Cannot connect to MongoDB&quot;\n    exit 2\nfi\n\n# Check replica set status (if configured)\nREPLICA_STATUS=$(mongosh --quiet --eval &quot;rs.status().ok&quot; 2&gt;/dev/null)\nif [ &quot;$REPLICA_STATUS&quot; = &quot;1&quot; ]; then\n    PRIMARY_COUNT=$(mongosh --quiet --eval &quot;rs.status().members.filter(m =&gt; m.stateStr === &#039;PRIMARY&#039;).length&quot; 2&gt;/dev/null)\n    if [ &quot;$PRIMARY_COUNT&quot; != &quot;1&quot; ]; then\n        echo &quot;WARNING: No primary or multiple primaries in replica set&quot;\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.current&quot; 2&gt;/dev/null)\nMAX_CONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.available&quot; 2&gt;/dev/null)\nCONNECTION_USAGE=$((CONNECTIONS * 100 / (CONNECTIONS + MAX_CONNECTIONS)))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo &quot;WARNING: High connection usage: ${CONNECTION_USAGE}%&quot;\n    exit 1\nfi\n\necho &quot;OK: MongoDB is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mongodb-backup.sh\n\nBACKUP_DIR=&quot;/backup/mongodb/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Full database backup\nmongodump \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=backup \\\n  --password=BackupPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --out &quot;$BACKUP_DIR&quot;\n\n# Oplog backup for point-in-time recovery\nmongodump \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=backup \\\n  --password=BackupPassword123! \\\n  --authenticationDatabase=admin \\\n  --db=local \\\n  --collection=oplog.rs \\\n  --gzip \\\n  --out &quot;$BACKUP_DIR/oplog&quot;\n\n# Configuration backup\ncp -r /etc/mongod.conf &quot;$BACKUP_DIR/&quot;\n\n# Compress backup\ntar czf &quot;$BACKUP_DIR.tar.gz&quot; -C &quot;$(dirname &quot;$BACKUP_DIR&quot;)&quot; &quot;$(basename &quot;$BACKUP_DIR&quot;)&quot;\nrm -rf &quot;$BACKUP_DIR&quot;\n\necho &quot;Backup completed: $BACKUP_DIR.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mongodb-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.tar.gz&gt;&quot;\n    exit 1\nfi\n\n# Extract backup\nBACKUP_DIR=&quot;/tmp/mongodb-restore-$(date +%s)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar xzf &quot;$BACKUP_FILE&quot; -C &quot;$BACKUP_DIR&quot; --strip-components=1\n\n# Stop applications using the database\necho &quot;Stopping applications...&quot;\n\n# Restore database\necho &quot;Restoring database from $BACKUP_FILE...&quot;\nmongorestore \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --drop \\\n  &quot;$BACKUP_DIR&quot;\n\n# Cleanup\nrm -rf &quot;$BACKUP_DIR&quot;\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"point-in-time-recovery\" class=\"mobile-header\">Point-in-Time Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mongodb-pitr.sh\n\nBACKUP_FILE=&quot;$1&quot;\nRECOVERY_TIME=&quot;$2&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ] || [ -z &quot;$RECOVERY_TIME&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.tar.gz&gt; &lt;recovery-time&gt;&quot;\n    echo &quot;Example: $0 backup.tar.gz &#039;2024-01-15T14:30:00.000Z&#039;&quot;\n    exit 1\nfi\n\n# Extract and restore base backup\nBACKUP_DIR=&quot;/tmp/mongodb-pitr-$(date +%s)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar xzf &quot;$BACKUP_FILE&quot; -C &quot;$BACKUP_DIR&quot; --strip-components=1\n\n# Restore base backup\nmongorestore \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --drop \\\n  &quot;$BACKUP_DIR&quot;\n\n# Apply oplog up to recovery point\nmongorestore \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --oplogReplay \\\n  --oplogLimit=&quot;$(date -d &quot;$RECOVERY_TIME&quot; +%s):1&quot; \\\n  --gzip \\\n  &quot;$BACKUP_DIR/oplog&quot;\n\n# Cleanup\nrm -rf &quot;$BACKUP_DIR&quot;\n\necho &quot;Point-in-time recovery completed to $RECOVERY_TIME&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>MongoDB won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mongod -f\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Check disk space\ndf -h /var/lib/mongodb\n\n# Check permissions\nls -la /var/lib/mongodb\n\n# Repair database\nmongod --repair --dbpath /var/lib/mongodb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MongoDB is listening\nsudo ss -tlnp | grep :27017\n\n# Test local connection\nmongosh --eval &quot;db.runCommand(&#039;ping&#039;)&quot;\n\n# Check authentication\nmongosh admin --username admin\n\n# Check bind address\nmongosh --eval &quot;db.runCommand(&#039;getCmdLineOpts&#039;)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check slow queries\nmongosh --eval &quot;db.setProfilingLevel(2, {slowms: 100})&quot;\nmongosh --eval &quot;db.system.profile.find().sort({ts:-1}).limit(5)&quot;\n\n# Check index usage\nmongosh --eval &quot;db.collection.getIndexes()&quot;\n\n# Check server status\nmongosh --eval &quot;db.serverStatus()&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start MongoDB with verbose logging\nsudo systemctl edit mongod\n# Add:\n[Service]\nEnvironment=&quot;MONGOD_OPTIONS=--verbose&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart mongod\n\n# Enable profiling for all operations\nmongosh --eval &quot;db.setProfilingLevel(2)&quot;\n\n# View debug logs\nsudo tail -f /var/log/mongodb/mongod.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update mongodb-org\nsudo yum update mongodb-org\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mongodb-org\n\n# Arch Linux\nyay -Syu mongodb-bin\n\n# macOS\nbrew upgrade mongodb-community@7.0\n\n# Docker (Alpine/FreeBSD)\ndocker pull mongo:7.0\ndocker stop mongodb\ndocker rm mongodb\n# Re-run docker run command with new image\n\n# Always backup before updates\n./mongodb-backup.sh\n\n# Restart after updates\nsudo systemctl restart mongod</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# mongodb-maintenance.sh\n\n# Compact collections\nmongosh admin --username admin --password SecureAdminPassword123! &lt;&lt;EOF\nuse myapp\ndb.runCommand({compact: &quot;collection_name&quot;})\nEOF\n\n# Update collection statistics\nmongosh admin --username admin --password SecureAdminPassword123! &lt;&lt;EOF\ndb.runCommand({planCacheClear: &quot;&quot;})\nEOF\n\n# Clean up old oplogs (automatically managed but can be tuned)\nmongosh admin --username admin --password SecureAdminPassword123! &lt;&lt;EOF\nuse local\ndb.oplog.rs.find().sort({\\$natural:-1}).limit(1)\nEOF\n\necho &quot;MongoDB maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/mongodb-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mongodb &lt;&lt;EOF\n/var/log/mongodb/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 mongodb mongodb\n    postrotate\n        /bin/kill -SIGUSR1 \\$(cat /var/run/mongodb/mongod.pid 2&gt;/dev/null) 2&gt;/dev/null || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using MongoDB Node.js driver\nconst { MongoClient } = require(&#039;mongodb&#039;);\n\nconst client = new MongoClient(&#039;mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp&#039;, {\n  tls: true,\n  tlsCertificateKeyFile: &#039;/etc/mongodb/ssl/client.pem&#039;,\n  tlsCAFile: &#039;/etc/mongodb/ssl/ca.pem&#039;,\n  authSource: &#039;myapp&#039;\n});\n\nasync function connect() {\n  await client.connect();\n  const db = client.db(&#039;myapp&#039;);\n  return db;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Using PyMongo\nimport pymongo\nfrom pymongo import MongoClient\n\nclient = MongoClient(&#039;mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp&#039;, \n                    tls=True,\n                    tlsCertificateKeyFile=&#039;/etc/mongodb/ssl/client.pem&#039;,\n                    tlsCAFile=&#039;/etc/mongodb/ssl/ca.pem&#039;,\n                    authSource=&#039;myapp&#039;)\n\ndb = client.myapp\ncollection = db.users</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-integration\" class=\"mobile-header\">Java Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// Using MongoDB Java driver\nimport com.mongodb.client.MongoClients;\nimport com.mongodb.client.MongoClient;\nimport com.mongodb.client.MongoDatabase;\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.ConnectionString;\n\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyConnectionString(new ConnectionString(&quot;mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp&quot;))\n    .applyToSslSettings(builder -&gt; \n        builder.enabled(true)\n               .invalidHostNameAllowed(false))\n    .build();\n\nMongoClient mongoClient = MongoClients.create(settings);\nMongoDatabase database = mongoClient.getDatabase(&quot;myapp&quot;);</code></pre>\n      </div>\n    </div>\n<h3 id=\"expressjs-integration\" class=\"mobile-header\">Express.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using Mongoose ODM\nconst mongoose = require(&#039;mongoose&#039;);\n\nmongoose.connect(&#039;mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp&#039;, {\n  tls: true,\n  tlsCertificateKeyFile: &#039;/etc/mongodb/ssl/client.pem&#039;,\n  tlsCAFile: &#039;/etc/mongodb/ssl/ca.pem&#039;,\n  authSource: &#039;myapp&#039;\n});\n\nconst userSchema = new mongoose.Schema({\n  username: { type: String, required: true, unique: true },\n  email: { type: String, required: true, unique: true },\n  created_at: { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model(&#039;User&#039;, userSchema);</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official MongoDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://university.mongodb.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB University</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/manual/administration/security-checklist/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Security Checklist</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/manual/administration/analyzing-mongodb-performance/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Performance Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/manual/tutorial/deploy-replica-set/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Replica Set Tutorial</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Sharding Tutorial</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.mongodb.com/community/forums/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.mongodb.com/blog\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Blog</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"16 min","wordCount":3152,"lastBuilt":"2025-09-14T03:53:54.755Z"},{"name":"redis","displayName":"Redis","slug":"redis","description":"Repo for redis","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/redis","updatedAt":"2025-09-14T01:31:02Z","createdAt":"2025-09-08T03:15:38Z","readmeRaw":"# Redis Installation Guide\n\nRedis is a free and open-source in-memory data structure store, used as a database, cache, message broker, and streaming engine. Originally developed by Salvatore Sanfilippo, Redis stands for \"Remote Dictionary Server\" and provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, and geospatial indexes. It serves as a FOSS alternative to commercial solutions like Amazon ElastiCache, Azure Cache for Redis, or proprietary in-memory databases, offering comparable performance with features like persistence, replication, Lua scripting, and transactions.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for production)\n  - RAM: 1GB minimum (8GB+ recommended for production workloads)\n  - Storage: 512MB for installation (SSD recommended for persistence)\n  - Network: Low latency network for cluster deployments\n- **Operating System**: Linux, BSD, macOS, or Windows (via WSL2)\n- **Network Requirements**:\n  - Port 6379 (default Redis port)\n  - Port 16379 (cluster bus port, if using cluster mode)\n  - Additional ports for replicas and sentinel\n- **Dependencies**:\n  - GCC compiler and libc (for building from source)\n  - TCL 8.5+ (for running tests)\n  - systemd or init system (for service management)\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# RHEL/CentOS 7\n# Enable EPEL repository\nsudo yum install -y epel-release\n\n# Install Redis\nsudo yum install -y redis\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# RHEL/CentOS/Rocky/AlmaLinux 8+\n# Enable EPEL repository\nsudo dnf install -y epel-release\n\n# Install Redis\nsudo dnf install -y redis\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# Install latest Redis from Remi repository (recommended)\nsudo dnf install -y https://rpms.remirepo.net/enterprise/remi-release-8.rpm\nsudo dnf module enable redis:remi-7.2\nsudo dnf install -y redis\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install Redis\nsudo apt install -y redis-server\n\n# The service should start automatically\nsudo systemctl status redis-server\n\n# For latest version, use official Redis repository\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\nsudo apt update\nsudo apt install -y redis\n```\n\n### Arch Linux\n\n```bash\n# Install Redis from official repositories\nsudo pacman -S redis\n\n# Optional: Install Redis tools\nsudo pacman -S redis-tools\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# For development headers\nsudo pacman -S hiredis\n\n# For Redis modules from AUR\nyay -S redis-mod-redisgraph\nyay -S redis-mod-redisearch\n```\n\n### Alpine Linux\n\n```bash\n# Install Redis\napk add --no-cache redis\n\n# Install additional tools\napk add --no-cache redis-cli redis-benchmark\n\n# Create redis user if not exists\nadduser -D -H -s /sbin/nologin -g redis redis\n\n# Create necessary directories\nmkdir -p /var/lib/redis /var/log/redis /var/run/redis\nchown redis:redis /var/lib/redis /var/log/redis /var/run/redis\n\n# Enable and start service\nrc-update add redis default\nrc-service redis start\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y redis\n\n# Start and enable service\nsudo systemctl enable --now redis@default\n\n# For cluster setup\nsudo zypper install -y redis-sentinel\n\n# SLES 15\n# May need to enable additional modules\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y redis6\n\n# Alternative: use Open Build Service\nsudo zypper addrepo https://download.opensuse.org/repositories/server:database/openSUSE_Leap_15.5/server:database.repo\nsudo zypper refresh\nsudo zypper install -y redis\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install redis\n\n# Start Redis service\nbrew services start redis\n\n# Or run manually\nredis-server /usr/local/etc/redis.conf\n\n# For development\nbrew install hiredis\n\n# Alternative: Using MacPorts\nsudo port install redis\nsudo port load redis\n```\n\n### FreeBSD\n\n```bash\n# Install Redis\npkg install redis\n\n# Or from ports\ncd /usr/ports/databases/redis\nmake install clean\n\n# Enable Redis\necho 'redis_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Redis\nservice redis start\n\n# For development\npkg install hiredis\n```\n\n### Windows\n\n```powershell\n# Method 1: Using WSL2 (Recommended)\nwsl --install\n# Then follow Linux instructions inside WSL2\n\n# Method 2: Using Chocolatey\nchoco install redis-64\n\n# Method 3: Using Memurai (Redis-compatible for Windows)\n# Download from https://www.memurai.com/\n\n# Method 4: Using official Redis on Windows archive\n# Download from https://github.com/microsoftarchive/redis/releases\n# Extract to C:\\Redis\n# Run redis-server.exe\n\n# Add to PATH\n[Environment]::SetEnvironmentVariable(\"Path\", \"$env:Path;C:\\Redis\", \"Machine\")\n\n# Create Windows service\nredis-server --service-install redis.windows.conf --loglevel verbose\nredis-server --service-start\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create Redis user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/redis -s /sbin/nologin -c \"Redis Database Server\" redis\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/redis.conf` or `/etc/redis/redis.conf`\n- Debian/Ubuntu: `/etc/redis/redis.conf`\n- Arch Linux: `/etc/redis/redis.conf`\n- Alpine Linux: `/etc/redis.conf`\n- openSUSE/SLES: `/etc/redis/default.conf`\n- macOS: `/usr/local/etc/redis.conf`\n- FreeBSD: `/usr/local/etc/redis.conf`\n- Windows: `C:\\Redis\\redis.windows.conf`\n\n3. **Essential settings to change**:\n\n```bash\n# Edit Redis configuration\nsudo vi /etc/redis/redis.conf\n\n# Critical settings to modify:\n\n# Bind to specific interfaces (default is localhost only)\nbind 127.0.0.1 ::1\n# For network access (be careful!):\n# bind 0.0.0.0\n\n# Require password for connections\nrequirepass YourStrongPasswordHere123!\n\n# Set memory limit\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\n\n# Enable persistence\nsave 900 1      # Save after 900 sec if at least 1 key changed\nsave 300 10     # Save after 300 sec if at least 10 keys changed  \nsave 60 10000   # Save after 60 sec if at least 10000 keys changed\n\n# Set working directory\ndir /var/lib/redis\n\n# Set log file\nlogfile /var/log/redis/redis.log\nloglevel notice\n\n# Disable dangerous commands\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\nrename-command CONFIG \"CONFIG_y7d9s3k4\"\n```\n\n### Testing Initial Setup\n\n```bash\n# Test Redis is running\nredis-cli ping\n# Should return: PONG\n\n# Test with authentication\nredis-cli -a YourStrongPasswordHere123! ping\n\n# Set and get a test key\nredis-cli -a YourStrongPasswordHere123! SET test \"Hello Redis\"\nredis-cli -a YourStrongPasswordHere123! GET test\n\n# Check Redis info\nredis-cli -a YourStrongPasswordHere123! INFO server\n```\n\n**WARNING:** Never expose Redis to the public internet without proper authentication and SSL/TLS encryption!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Redis to start on boot\nsudo systemctl enable redis\n# Or on some systems:\nsudo systemctl enable redis-server\n\n# Start Redis\nsudo systemctl start redis\n\n# Stop Redis\nsudo systemctl stop redis\n\n# Restart Redis\nsudo systemctl restart redis\n\n# Reload configuration without restart\nsudo systemctl reload redis\n\n# Check status\nsudo systemctl status redis\n\n# View logs\nsudo journalctl -u redis -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable Redis to start on boot\nrc-update add redis default\n\n# Start Redis\nrc-service redis start\n\n# Stop Redis\nrc-service redis stop\n\n# Restart Redis\nrc-service redis restart\n\n# Check status\nrc-service redis status\n\n# View logs\ntail -f /var/log/redis/redis.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'redis_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Redis\nservice redis start\n\n# Stop Redis\nservice redis stop\n\n# Restart Redis\nservice redis restart\n\n# Check status\nservice redis status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start redis\nbrew services stop redis\nbrew services restart redis\n\n# Check status\nbrew services list | grep redis\n\n# Manual control\nredis-server /usr/local/etc/redis.conf\n# Stop with Ctrl+C or:\nredis-cli shutdown\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Redis service\nredis-server --service-start\n\n# Stop Redis service  \nredis-server --service-stop\n\n# Using net commands\nnet start Redis\nnet stop Redis\n\n# Using PowerShell\nStart-Service -Name Redis\nStop-Service -Name Redis\nRestart-Service -Name Redis\n\n# Check status\nGet-Service -Name Redis\n```\n\n## Advanced Configuration\n\n### Memory Optimization\n\n```bash\n# /etc/redis/redis.conf\n\n# Memory management\nmaxmemory 4gb\nmaxmemory-policy allkeys-lru\n# Policies: volatile-lru, allkeys-lru, volatile-lfu, allkeys-lfu,\n#           volatile-random, allkeys-random, volatile-ttl, noeviction\n\n# Memory optimization\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n\n# Enable memory defragmentation (Redis 4.0+)\nactivedefrag yes\nactive-defrag-ignore-bytes 100mb\nactive-defrag-threshold-lower 10\nactive-defrag-threshold-upper 100\n```\n\n### Persistence Configuration\n\n```bash\n# RDB (Redis Database) snapshots\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\n\n# AOF (Append Only File) persistence\nappendonly yes\nappendfilename \"appendonly.aof\"\nappendfsync everysec  # Options: always, everysec, no\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes\n```\n\n### Replication Setup\n\n```bash\n# On replica server, add to redis.conf:\nreplicaof master_ip 6379\nmasterauth YourStrongPasswordHere123!\nreplica-read-only yes\nreplica-serve-stale-data yes\n\n# Replication settings\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-ping-replica-period 10\nrepl-timeout 60\nrepl-disable-tcp-nodelay no\nrepl-backlog-size 1mb\nrepl-backlog-ttl 3600\n```\n\n### Redis Sentinel (High Availability)\n\n```bash\n# /etc/redis/sentinel.conf\nport 26379\nbind 127.0.0.1\nprotected-mode yes\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel auth-pass mymaster YourStrongPasswordHere123!\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n\n# Start sentinel\nredis-sentinel /etc/redis/sentinel.conf\n```\n\n## Reverse Proxy Setup\n\nWhile Redis doesn't use HTTP reverse proxies, you can use TCP proxies for load balancing.\n\n### HAProxy Configuration\n\n```nginx\n# /etc/haproxy/haproxy.cfg\nglobal\n    maxconn 4096\n    daemon\n\ndefaults\n    mode tcp\n    timeout connect 5000ms\n    timeout client 50000ms\n    timeout server 50000ms\n\nlisten redis\n    bind *:6379\n    balance roundrobin\n    option tcp-check\n    tcp-check connect\n    tcp-check send AUTH\\ YourStrongPasswordHere123!\\r\\n\n    tcp-check expect string +OK\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    server redis1 192.168.1.10:6379 check inter 1s\n    server redis2 192.168.1.11:6379 check inter 1s\n```\n\n### nginx Stream Module\n\n```nginx\n# /etc/nginx/nginx.conf\nstream {\n    upstream redis_backend {\n        server 192.168.1.10:6379 max_fails=3 fail_timeout=30s;\n        server 192.168.1.11:6379 max_fails=3 fail_timeout=30s;\n    }\n    \n    server {\n        listen 6379;\n        proxy_pass redis_backend;\n        proxy_connect_timeout 1s;\n        proxy_timeout 3s;\n    }\n}\n```\n\n## Security Configuration\n\n### Authentication and ACL\n\n```bash\n# Basic authentication (redis.conf)\nrequirepass YourStrongPasswordHere123!\n\n# ACL configuration (Redis 6.0+)\naclfile /etc/redis/users.acl\n\n# Create ACL users\n# In redis-cli:\nACL SETUSER alice on >alice_password ~cached:* &* +get +set +del\nACL SETUSER bob on >bob_password ~* &* +@read\nACL SETUSER admin on >admin_password ~* &* +@all\n\n# Disable default user\nACL SETUSER default on nopass ~* &* -@all\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Build Redis with TLS support\nmake BUILD_TLS=yes\n\n# Configure TLS in redis.conf\nport 0\ntls-port 6379\ntls-cert-file /etc/redis/tls/redis.crt\ntls-key-file /etc/redis/tls/redis.key\ntls-ca-cert-file /etc/redis/tls/ca.crt\ntls-dh-params-file /etc/redis/tls/redis.dh\n\n# TLS settings\ntls-protocols \"TLSv1.2 TLSv1.3\"\ntls-ciphers TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\ntls-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\ntls-prefer-server-ciphers yes\n\n# Require TLS for replication\ntls-replication yes\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 6379\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=redis\nsudo firewall-cmd --permanent --zone=redis --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=redis --add-port=6379/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 6379 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 6379 -j DROP\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 6379\nblock in on $ext_if proto tcp to any port 6379\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Redis\" -Direction Inbound -Protocol TCP -LocalPort 6379 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n### Security Best Practices\n\n```bash\n# Disable dangerous commands\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\nrename-command KEYS \"\"\nrename-command CONFIG \"CONFIG_y7d9s3k4\"\nrename-command SHUTDOWN \"\"\n\n# Enable protected mode\nprotected-mode yes\n\n# Set client connection limits\ntcp-keepalive 300\ntimeout 300\ntcp-backlog 511\n\n# Limit client output buffer\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n```\n\n## Database Setup\n\nRedis doesn't require traditional database setup, but here's how to organize data:\n\n### Keyspace Design\n\n```bash\n# Use namespacing for keys\nSET user:1000:name \"John Doe\"\nSET user:1000:email \"john@example.com\"\nHSET user:1000 name \"John Doe\" email \"john@example.com\"\n\n# Use expiration for cache\nSET cache:user:1000 \"{...json...}\" EX 3600\n\n# Database selection (0-15 by default)\nSELECT 0  # Default database\nSELECT 1  # Switch to database 1\n\n# Configure number of databases\ndatabases 16\n```\n\n### Data Types Examples\n\n```bash\n# Strings\nSET key \"value\"\nGET key\nINCR counter\nDECR counter\n\n# Lists\nLPUSH queue item1 item2\nRPOP queue\nLRANGE queue 0 -1\n\n# Sets\nSADD tags redis nosql cache\nSMEMBERS tags\nSINTER tags:post1 tags:post2\n\n# Sorted Sets\nZADD leaderboard 100 player1 200 player2\nZRANGE leaderboard 0 -1 WITHSCORES\n\n# Hashes\nHSET user:1000 name \"John\" age 30\nHGETALL user:1000\n\n# Streams (Redis 5.0+)\nXADD mystream * sensor-id 1234 temperature 19.8\nXREAD COUNT 2 STREAMS mystream 0\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# /etc/sysctl.conf\n# Increase system memory\nvm.overcommit_memory = 1\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\n\n# Disable THP (Transparent Huge Pages)\necho never > /sys/kernel/mm/transparent_hugepage/enabled\necho never > /sys/kernel/mm/transparent_hugepage/defrag\n\n# Apply settings\nsudo sysctl -p\n```\n\n### Redis Performance Tuning\n\n```bash\n# redis.conf optimizations\n\n# I/O threads (Redis 6.0+)\nio-threads 4\nio-threads-do-reads yes\n\n# Disable saving if using Redis as cache only\nsave \"\"\n\n# Lazy freeing (Redis 4.0+)\nlazyfree-lazy-eviction yes\nlazyfree-lazy-expire yes\nlazyfree-lazy-server-del yes\nreplica-lazy-flush yes\n\n# Background tasks\nhz 100  # Increase for more responsive background tasks\n\n# Client optimizations\ntcp-keepalive 60\ntcp-backlog 511\n```\n\n### Benchmarking\n\n```bash\n# Basic benchmark\nredis-benchmark -h localhost -p 6379 -a YourStrongPasswordHere123! -n 100000 -c 50\n\n# Test specific commands\nredis-benchmark -h localhost -p 6379 -a YourStrongPasswordHere123! -t set,get -n 100000\n\n# Pipeline mode\nredis-benchmark -h localhost -p 6379 -a YourStrongPasswordHere123! -P 16 -n 100000\n\n# Custom payload size\nredis-benchmark -h localhost -p 6379 -a YourStrongPasswordHere123! -d 1024 -n 100000\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Real-time stats\nredis-cli -a YourStrongPasswordHere123! --stat\n\n# Monitor commands in real-time\nredis-cli -a YourStrongPasswordHere123! MONITOR\n\n# Get server info\nredis-cli -a YourStrongPasswordHere123! INFO\nredis-cli -a YourStrongPasswordHere123! INFO stats\nredis-cli -a YourStrongPasswordHere123! INFO memory\nredis-cli -a YourStrongPasswordHere123! INFO replication\n\n# Memory usage analysis\nredis-cli -a YourStrongPasswordHere123! --bigkeys\nredis-cli -a YourStrongPasswordHere123! --memkeys\nredis-cli -a YourStrongPasswordHere123! MEMORY STATS\nredis-cli -a YourStrongPasswordHere123! MEMORY DOCTOR\n```\n\n### Slow Log Analysis\n\n```bash\n# Configure slow log\nCONFIG SET slowlog-log-slower-than 10000  # Log queries slower than 10ms\nCONFIG SET slowlog-max-len 128\n\n# View slow log\nSLOWLOG GET 10\nSLOWLOG LEN\nSLOWLOG RESET\n```\n\n### External Monitoring Tools\n\n```bash\n# Redis Exporter for Prometheus\nwget https://github.com/oliver006/redis_exporter/releases/download/v1.45.0/redis_exporter-v1.45.0.linux-amd64.tar.gz\ntar xzf redis_exporter-*.tar.gz\nsudo cp redis_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/redis_exporter.service <<EOF\n[Unit]\nDescription=Redis Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=redis\nExecStart=/usr/local/bin/redis_exporter \\\n    --redis.addr=localhost:6379 \\\n    --redis.password=YourStrongPasswordHere123!\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now redis_exporter\n```\n\n## Backup and Restore\n\n### RDB Snapshot Backup\n\n```bash\n# Manual backup\nredis-cli -a YourStrongPasswordHere123! BGSAVE\n\n# Wait for backup to complete\nredis-cli -a YourStrongPasswordHere123! LASTSAVE\n\n# Copy backup file\nsudo cp /var/lib/redis/dump.rdb /backup/redis/dump_$(date +%Y%m%d_%H%M%S).rdb\n\n# Automated backup script\ncat > /usr/local/bin/redis-backup.sh << 'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/redis\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nREDIS_CLI=\"redis-cli -a YourStrongPasswordHere123!\"\n\n# Create backup directory\nmkdir -p ${BACKUP_DIR}\n\n# Trigger backup\n${REDIS_CLI} BGSAVE\n\n# Wait for backup to complete\nwhile [ $(${REDIS_CLI} LASTSAVE) -eq $(${REDIS_CLI} LASTSAVE) ]; do\n    sleep 1\ndone\n\n# Copy backup file\ncp /var/lib/redis/dump.rdb ${BACKUP_DIR}/dump_${TIMESTAMP}.rdb\n\n# Keep only last 7 days\nfind ${BACKUP_DIR} -name \"dump_*.rdb\" -mtime +7 -delete\n\necho \"Backup completed: dump_${TIMESTAMP}.rdb\"\nEOF\n\nchmod +x /usr/local/bin/redis-backup.sh\n```\n\n### AOF Backup\n\n```bash\n# If using AOF\nredis-cli -a YourStrongPasswordHere123! BGREWRITEAOF\n\n# Backup AOF file\ncp /var/lib/redis/appendonly.aof /backup/redis/appendonly_$(date +%Y%m%d_%H%M%S).aof\n```\n\n### Restore Procedures\n\n```bash\n# Stop Redis\nsudo systemctl stop redis\n\n# Replace dump file\nsudo cp /backup/redis/dump_20240115_120000.rdb /var/lib/redis/dump.rdb\nsudo chown redis:redis /var/lib/redis/dump.rdb\n\n# Start Redis\nsudo systemctl start redis\n\n# Verify data\nredis-cli -a YourStrongPasswordHere123! DBSIZE\n```\n\n### Backup to Cloud Storage\n\n```bash\n#!/bin/bash\n# Backup to S3\naws s3 cp /var/lib/redis/dump.rdb s3://my-bucket/redis-backups/dump_$(date +%Y%m%d_%H%M%S).rdb\n\n# Backup to Azure\naz storage blob upload --account-name myaccount --container-name redis-backups --name dump_$(date +%Y%m%d_%H%M%S).rdb --file /var/lib/redis/dump.rdb\n\n# Backup to GCS\ngsutil cp /var/lib/redis/dump.rdb gs://my-bucket/redis-backups/dump_$(date +%Y%m%d_%H%M%S).rdb\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Connection refused**:\n```bash\n# Check if Redis is running\nsudo systemctl status redis\nps aux | grep redis\n\n# Check if Redis is listening\nsudo netstat -tlnp | grep 6379\nsudo ss -tlnp | grep 6379\n\n# Check logs\nsudo tail -f /var/log/redis/redis.log\nsudo journalctl -u redis -f\n```\n\n2. **Authentication errors**:\n```bash\n# Test authentication\nredis-cli -a YourWrongPassword ping\n# (error) WRONGPASS invalid username-password pair\n\n# Connect with correct password\nredis-cli -a YourStrongPasswordHere123! ping\n# PONG\n```\n\n3. **Memory issues**:\n```bash\n# Check memory usage\nredis-cli -a YourStrongPasswordHere123! INFO memory\n\n# Check evicted keys\nredis-cli -a YourStrongPasswordHere123! INFO stats | grep evicted\n\n# Set memory limit\nredis-cli -a YourStrongPasswordHere123! CONFIG SET maxmemory 2gb\n\n# Check what's using memory\nredis-cli -a YourStrongPasswordHere123! --bigkeys\n```\n\n4. **Performance issues**:\n```bash\n# Check slow queries\nredis-cli -a YourStrongPasswordHere123! SLOWLOG GET 10\n\n# Check connected clients\nredis-cli -a YourStrongPasswordHere123! CLIENT LIST\n\n# Check persistence status\nredis-cli -a YourStrongPasswordHere123! INFO persistence\n\n# Disable persistence temporarily\nredis-cli -a YourStrongPasswordHere123! CONFIG SET save \"\"\nredis-cli -a YourStrongPasswordHere123! CONFIG SET appendonly no\n```\n\n### Recovery Procedures\n\n```bash\n# Fix corrupted AOF\nredis-check-aof --fix /var/lib/redis/appendonly.aof\n\n# Fix corrupted RDB\nredis-check-rdb /var/lib/redis/dump.rdb\n\n# Emergency flush (use with caution!)\nredis-cli -a YourStrongPasswordHere123! FLUSHDB\nredis-cli -a YourStrongPasswordHere123! FLUSHALL\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update redis\nsudo dnf update redis\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade redis-server\n\n# Arch Linux\nsudo pacman -Syu redis\n\n# Alpine Linux\napk update\napk upgrade redis\n\n# openSUSE\nsudo zypper update redis\n\n# FreeBSD\npkg update\npkg upgrade redis\n\n# Always backup before updates\nredis-cli -a YourStrongPasswordHere123! BGSAVE\n```\n\n### Log Rotation\n\n```bash\n# Create logrotate configuration\nsudo tee /etc/logrotate.d/redis <<EOF\n/var/log/redis/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 redis redis\n    postrotate\n        systemctl reload redis > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n### Health Checks\n\n```bash\n#!/bin/bash\n# /usr/local/bin/redis-health-check.sh\n\nREDIS_CLI=\"redis-cli -a YourStrongPasswordHere123!\"\n\n# Check if Redis is responding\nif ! ${REDIS_CLI} ping > /dev/null 2>&1; then\n    echo \"Redis is not responding\"\n    exit 1\nfi\n\n# Check memory usage\nUSED_MEMORY=$(${REDIS_CLI} INFO memory | grep used_memory_human | cut -d: -f2 | tr -d '\\r')\necho \"Memory usage: ${USED_MEMORY}\"\n\n# Check replication\nROLE=$(${REDIS_CLI} INFO replication | grep role | cut -d: -f2 | tr -d '\\r')\necho \"Redis role: ${ROLE}\"\n\n# Check persistence\nRDB_LAST_SAVE=$(${REDIS_CLI} LASTSAVE)\necho \"Last save: $(date -d @${RDB_LAST_SAVE})\"\n\necho \"Redis health check passed\"\n```\n\n## Integration Examples\n\n### Python (redis-py)\n\n```python\nimport redis\nfrom redis.sentinel import Sentinel\n\n# Basic connection\nr = redis.Redis(\n    host='localhost',\n    port=6379,\n    password='YourStrongPasswordHere123!',\n    decode_responses=True\n)\n\n# Connection pool\npool = redis.ConnectionPool(\n    host='localhost',\n    port=6379,\n    password='YourStrongPasswordHere123!',\n    max_connections=50\n)\nr = redis.Redis(connection_pool=pool)\n\n# Basic operations\nr.set('key', 'value')\nvalue = r.get('key')\n\n# Pipeline for performance\npipe = r.pipeline()\nfor i in range(10000):\n    pipe.set(f'key:{i}', i)\npipe.execute()\n\n# Pub/Sub\npubsub = r.pubsub()\npubsub.subscribe('channel')\nfor message in pubsub.listen():\n    print(message)\n\n# Sentinel connection\nsentinel = Sentinel([('localhost', 26379)])\nmaster = sentinel.master_for('mymaster', socket_timeout=0.1)\n```\n\n### Node.js (ioredis)\n\n```javascript\nconst Redis = require('ioredis');\n\n// Basic connection\nconst redis = new Redis({\n  host: 'localhost',\n  port: 6379,\n  password: 'YourStrongPasswordHere123!',\n  retryStrategy: (times) => {\n    const delay = Math.min(times * 50, 2000);\n    return delay;\n  }\n});\n\n// Cluster connection\nconst cluster = new Redis.Cluster([\n  { port: 6379, host: '192.168.1.10' },\n  { port: 6379, host: '192.168.1.11' }\n]);\n\n// Basic operations\nasync function example() {\n  await redis.set('key', 'value');\n  const value = await redis.get('key');\n  \n  // Pipeline\n  const pipeline = redis.pipeline();\n  pipeline.set('key1', 'value1');\n  pipeline.set('key2', 'value2');\n  pipeline.get('key1');\n  const results = await pipeline.exec();\n  \n  // Pub/Sub\n  const sub = new Redis();\n  sub.subscribe('news', 'music');\n  sub.on('message', (channel, message) => {\n    console.log(`Received ${message} from ${channel}`);\n  });\n}\n\n// Stream processing\nasync function streamExample() {\n  // Add to stream\n  await redis.xadd('mystream', '*', 'field1', 'value1');\n  \n  // Read from stream\n  const messages = await redis.xread('STREAMS', 'mystream', '0');\n}\n```\n\n### PHP (Predis/PhpRedis)\n\n```php\n<?php\n// Using Predis\nrequire 'vendor/autoload.php';\n\n$client = new Predis\\Client([\n    'scheme' => 'tcp',\n    'host'   => '127.0.0.1',\n    'port'   => 6379,\n    'password' => 'YourStrongPasswordHere123!'\n]);\n\n// Basic operations\n$client->set('key', 'value');\n$value = $client->get('key');\n\n// Pipeline\n$pipe = $client->pipeline();\nfor ($i = 0; $i < 1000; $i++) {\n    $pipe->set(\"key:$i\", $i);\n}\n$pipe->execute();\n\n// Using PhpRedis extension\n$redis = new Redis();\n$redis->connect('127.0.0.1', 6379);\n$redis->auth('YourStrongPasswordHere123!');\n\n// Transactions\n$redis->multi();\n$redis->set('key1', 'value1');\n$redis->set('key2', 'value2');\n$redis->exec();\n\n// Pub/Sub\n$redis->subscribe(['channel1', 'channel2'], function ($redis, $channel, $message) {\n    echo \"Received: $message on $channel\\n\";\n});\n?>\n```\n\n### Java (Jedis/Lettuce)\n\n```java\n// Using Jedis\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisExample {\n    private static JedisPool pool;\n    \n    static {\n        JedisPoolConfig config = new JedisPoolConfig();\n        config.setMaxTotal(128);\n        config.setMaxIdle(128);\n        config.setMinIdle(16);\n        config.setTestOnBorrow(true);\n        config.setTestOnReturn(true);\n        \n        pool = new JedisPool(config, \"localhost\", 6379, 2000, \"YourStrongPasswordHere123!\");\n    }\n    \n    public static void example() {\n        try (Jedis jedis = pool.getResource()) {\n            // Basic operations\n            jedis.set(\"key\", \"value\");\n            String value = jedis.get(\"key\");\n            \n            // Pipeline\n            Pipeline pipeline = jedis.pipelined();\n            for (int i = 0; i < 10000; i++) {\n                pipeline.set(\"key:\" + i, String.valueOf(i));\n            }\n            pipeline.sync();\n            \n            // Transactions\n            Transaction tx = jedis.multi();\n            tx.set(\"key1\", \"value1\");\n            tx.set(\"key2\", \"value2\");\n            tx.exec();\n        }\n    }\n}\n\n// Using Lettuce\nimport io.lettuce.core.*;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\n\nRedisClient client = RedisClient.create(\"redis://password@localhost:6379\");\nStatefulRedisConnection<String, String> connection = client.connect();\nRedisCommands<String, String> sync = connection.sync();\n\nsync.set(\"key\", \"value\");\nString value = sync.get(\"key\");\n```\n\n### Go (go-redis)\n\n```go\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/go-redis/redis/v8\"\n)\n\nvar ctx = context.Background()\n\nfunc main() {\n    // Create client\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"YourStrongPasswordHere123!\",\n        DB:       0,\n        PoolSize: 10,\n    })\n\n    // Basic operations\n    err := rdb.Set(ctx, \"key\", \"value\", 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, \"key\").Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"key\", val)\n\n    // Pipeline\n    pipe := rdb.Pipeline()\n    for i := 0; i < 1000; i++ {\n        pipe.Set(ctx, fmt.Sprintf(\"key:%d\", i), i, 0)\n    }\n    _, err = pipe.Exec(ctx)\n\n    // Pub/Sub\n    pubsub := rdb.Subscribe(ctx, \"channel\")\n    ch := pubsub.Channel()\n    for msg := range ch {\n        fmt.Println(msg.Channel, msg.Payload)\n    }\n}\n```\n\n## Additional Resources\n\n- [Official Documentation](https://redis.io/documentation)\n- [GitHub Repository](https://github.com/redis/redis)\n- [Redis Commands Reference](https://redis.io/commands)\n- [Redis University](https://university.redis.com/)\n- [Redis Best Practices](https://redis.io/docs/manual/patterns/)\n- [Redis Security](https://redis.io/docs/manual/security/)\n- [Redis Cluster Tutorial](https://redis.io/docs/manual/scaling/)\n- [Community Forum](https://forum.redis.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"redis-installation-guide\" class=\"mobile-header\">Redis Installation Guide</h1>\n<p class=\"mobile-paragraph\">Redis is a free and open-source in-memory data structure store, used as a database, cache, message broker, and streaming engine. Originally developed by Salvatore Sanfilippo, Redis stands for \"Remote Dictionary Server\" and provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, and geospatial indexes. It serves as a FOSS alternative to commercial solutions like Amazon ElastiCache, Azure Cache for Redis, or proprietary in-memory databases, offering comparable performance with features like persistence, replication, Lua scripting, and transactions.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum (8GB+ recommended for production workloads)</li>\n<li class=\"mobile-list-item\">Storage: 512MB for installation (SSD recommended for persistence)</li>\n<li class=\"mobile-list-item\">Network: Low latency network for cluster deployments</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux, BSD, macOS, or Windows (via WSL2)</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 6379 (default Redis port)</li>\n<li class=\"mobile-list-item\">Port 16379 (cluster bus port, if using cluster mode)</li>\n<li class=\"mobile-list-item\">Additional ports for replicas and sentinel</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">GCC compiler and libc (for building from source)</li>\n<li class=\"mobile-list-item\">TCL 8.5+ (for running tests)</li>\n<li class=\"mobile-list-item\">systemd or init system (for service management)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS 7\n# Enable EPEL repository\nsudo yum install -y epel-release\n\n# Install Redis\nsudo yum install -y redis\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# RHEL/CentOS/Rocky/AlmaLinux 8+\n# Enable EPEL repository\nsudo dnf install -y epel-release\n\n# Install Redis\nsudo dnf install -y redis\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# Install latest Redis from Remi repository (recommended)\nsudo dnf install -y https://rpms.remirepo.net/enterprise/remi-release-8.rpm\nsudo dnf module enable redis:remi-7.2\nsudo dnf install -y redis</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install Redis\nsudo apt install -y redis-server\n\n# The service should start automatically\nsudo systemctl status redis-server\n\n# For latest version, use official Redis repository\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\necho &quot;deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/redis.list\nsudo apt update\nsudo apt install -y redis</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis from official repositories\nsudo pacman -S redis\n\n# Optional: Install Redis tools\nsudo pacman -S redis-tools\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# For development headers\nsudo pacman -S hiredis\n\n# For Redis modules from AUR\nyay -S redis-mod-redisgraph\nyay -S redis-mod-redisearch</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis\napk add --no-cache redis\n\n# Install additional tools\napk add --no-cache redis-cli redis-benchmark\n\n# Create redis user if not exists\nadduser -D -H -s /sbin/nologin -g redis redis\n\n# Create necessary directories\nmkdir -p /var/lib/redis /var/log/redis /var/run/redis\nchown redis:redis /var/lib/redis /var/log/redis /var/run/redis\n\n# Enable and start service\nrc-update add redis default\nrc-service redis start</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y redis\n\n# Start and enable service\nsudo systemctl enable --now redis@default\n\n# For cluster setup\nsudo zypper install -y redis-sentinel\n\n# SLES 15\n# May need to enable additional modules\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y redis6\n\n# Alternative: use Open Build Service\nsudo zypper addrepo https://download.opensuse.org/repositories/server:database/openSUSE_Leap_15.5/server:database.repo\nsudo zypper refresh\nsudo zypper install -y redis</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install redis\n\n# Start Redis service\nbrew services start redis\n\n# Or run manually\nredis-server /usr/local/etc/redis.conf\n\n# For development\nbrew install hiredis\n\n# Alternative: Using MacPorts\nsudo port install redis\nsudo port load redis</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis\npkg install redis\n\n# Or from ports\ncd /usr/ports/databases/redis\nmake install clean\n\n# Enable Redis\necho &#039;redis_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Redis\nservice redis start\n\n# For development\npkg install hiredis</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using WSL2 (Recommended)\nwsl --install\n# Then follow Linux instructions inside WSL2\n\n# Method 2: Using Chocolatey\nchoco install redis-64\n\n# Method 3: Using Memurai (Redis-compatible for Windows)\n# Download from https://www.memurai.com/\n\n# Method 4: Using official Redis on Windows archive\n# Download from https://github.com/microsoftarchive/redis/releases\n# Extract to C:\\Redis\n# Run redis-server.exe\n\n# Add to PATH\n[Environment]::SetEnvironmentVariable(&quot;Path&quot;, &quot;$env:Path;C:\\Redis&quot;, &quot;Machine&quot;)\n\n# Create Windows service\nredis-server --service-install redis.windows.conf --loglevel verbose\nredis-server --service-start</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create Redis user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/redis -s /sbin/nologin -c &quot;Redis Database Server&quot; redis</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/redis.conf</code> or <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/redis.conf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/redis/default.conf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/redis.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/redis.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Redis\\redis.windows.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit Redis configuration\nsudo vi /etc/redis/redis.conf\n\n# Critical settings to modify:\n\n# Bind to specific interfaces (default is localhost only)\nbind 127.0.0.1 ::1\n# For network access (be careful!):\n# bind 0.0.0.0\n\n# Require password for connections\nrequirepass YourStrongPasswordHere123!\n\n# Set memory limit\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\n\n# Enable persistence\nsave 900 1      # Save after 900 sec if at least 1 key changed\nsave 300 10     # Save after 300 sec if at least 10 keys changed  \nsave 60 10000   # Save after 60 sec if at least 10000 keys changed\n\n# Set working directory\ndir /var/lib/redis\n\n# Set log file\nlogfile /var/log/redis/redis.log\nloglevel notice\n\n# Disable dangerous commands\nrename-command FLUSHDB &quot;&quot;\nrename-command FLUSHALL &quot;&quot;\nrename-command CONFIG &quot;CONFIG_y7d9s3k4&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test Redis is running\nredis-cli ping\n# Should return: PONG\n\n# Test with authentication\nredis-cli -a YourStrongPasswordHere123! ping\n\n# Set and get a test key\nredis-cli -a YourStrongPasswordHere123! SET test &quot;Hello Redis&quot;\nredis-cli -a YourStrongPasswordHere123! GET test\n\n# Check Redis info\nredis-cli -a YourStrongPasswordHere123! INFO server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never expose Redis to the public internet without proper authentication and SSL/TLS encryption!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Redis to start on boot\nsudo systemctl enable redis\n# Or on some systems:\nsudo systemctl enable redis-server\n\n# Start Redis\nsudo systemctl start redis\n\n# Stop Redis\nsudo systemctl stop redis\n\n# Restart Redis\nsudo systemctl restart redis\n\n# Reload configuration without restart\nsudo systemctl reload redis\n\n# Check status\nsudo systemctl status redis\n\n# View logs\nsudo journalctl -u redis -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Redis to start on boot\nrc-update add redis default\n\n# Start Redis\nrc-service redis start\n\n# Stop Redis\nrc-service redis stop\n\n# Restart Redis\nrc-service redis restart\n\n# Check status\nrc-service redis status\n\n# View logs\ntail -f /var/log/redis/redis.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;redis_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Redis\nservice redis start\n\n# Stop Redis\nservice redis stop\n\n# Restart Redis\nservice redis restart\n\n# Check status\nservice redis status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start redis\nbrew services stop redis\nbrew services restart redis\n\n# Check status\nbrew services list | grep redis\n\n# Manual control\nredis-server /usr/local/etc/redis.conf\n# Stop with Ctrl+C or:\nredis-cli shutdown</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Redis service\nredis-server --service-start\n\n# Stop Redis service  \nredis-server --service-stop\n\n# Using net commands\nnet start Redis\nnet stop Redis\n\n# Using PowerShell\nStart-Service -Name Redis\nStop-Service -Name Redis\nRestart-Service -Name Redis\n\n# Check status\nGet-Service -Name Redis</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"memory-optimization\" class=\"mobile-header\">Memory Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># /etc/redis/redis.conf\n\n# Memory management\nmaxmemory 4gb\nmaxmemory-policy allkeys-lru\n# Policies: volatile-lru, allkeys-lru, volatile-lfu, allkeys-lfu,\n#           volatile-random, allkeys-random, volatile-ttl, noeviction\n\n# Memory optimization\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n\n# Enable memory defragmentation (Redis 4.0+)\nactivedefrag yes\nactive-defrag-ignore-bytes 100mb\nactive-defrag-threshold-lower 10\nactive-defrag-threshold-upper 100</code></pre>\n      </div>\n    </div>\n<h3 id=\"persistence-configuration\" class=\"mobile-header\">Persistence Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RDB (Redis Database) snapshots\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\n\n# AOF (Append Only File) persistence\nappendonly yes\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec  # Options: always, everysec, no\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\naof-use-rdb-preamble yes</code></pre>\n      </div>\n    </div>\n<h3 id=\"replication-setup\" class=\"mobile-header\">Replication Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On replica server, add to redis.conf:\nreplicaof master_ip 6379\nmasterauth YourStrongPasswordHere123!\nreplica-read-only yes\nreplica-serve-stale-data yes\n\n# Replication settings\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-ping-replica-period 10\nrepl-timeout 60\nrepl-disable-tcp-nodelay no\nrepl-backlog-size 1mb\nrepl-backlog-ttl 3600</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-sentinel-high-availability\" class=\"mobile-header\">Redis Sentinel (High Availability)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># /etc/redis/sentinel.conf\nport 26379\nbind 127.0.0.1\nprotected-mode yes\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel auth-pass mymaster YourStrongPasswordHere123!\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n\n# Start sentinel\nredis-sentinel /etc/redis/sentinel.conf</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<p class=\"mobile-paragraph\">While Redis doesn't use HTTP reverse proxies, you can use TCP proxies for load balancing.</p>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/haproxy/haproxy.cfg\nglobal\n    maxconn 4096\n    daemon\n\ndefaults\n    mode tcp\n    timeout connect 5000ms\n    timeout client 50000ms\n    timeout server 50000ms\n\nlisten redis\n    bind *:6379\n    balance roundrobin\n    option tcp-check\n    tcp-check connect\n    tcp-check send AUTH\\ YourStrongPasswordHere123!\\r\\n\n    tcp-check expect string +OK\n    tcp-check send PING\\r\\n\n    tcp-check expect string +PONG\n    tcp-check send QUIT\\r\\n\n    tcp-check expect string +OK\n    server redis1 192.168.1.10:6379 check inter 1s\n    server redis2 192.168.1.11:6379 check inter 1s</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-stream-module\" class=\"mobile-header\">nginx Stream Module</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/nginx.conf\nstream {\n    upstream redis_backend {\n        server 192.168.1.10:6379 max_fails=3 fail_timeout=30s;\n        server 192.168.1.11:6379 max_fails=3 fail_timeout=30s;\n    }\n    \n    server {\n        listen 6379;\n        proxy_pass redis_backend;\n        proxy_connect_timeout 1s;\n        proxy_timeout 3s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"authentication-and-acl\" class=\"mobile-header\">Authentication and ACL</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic authentication (redis.conf)\nrequirepass YourStrongPasswordHere123!\n\n# ACL configuration (Redis 6.0+)\naclfile /etc/redis/users.acl\n\n# Create ACL users\n# In redis-cli:\nACL SETUSER alice on &gt;alice_password ~cached:* &amp;* +get +set +del\nACL SETUSER bob on &gt;bob_password ~* &amp;* +@read\nACL SETUSER admin on &gt;admin_password ~* &amp;* +@all\n\n# Disable default user\nACL SETUSER default on nopass ~* &amp;* -@all</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Build Redis with TLS support\nmake BUILD_TLS=yes\n\n# Configure TLS in redis.conf\nport 0\ntls-port 6379\ntls-cert-file /etc/redis/tls/redis.crt\ntls-key-file /etc/redis/tls/redis.key\ntls-ca-cert-file /etc/redis/tls/ca.crt\ntls-dh-params-file /etc/redis/tls/redis.dh\n\n# TLS settings\ntls-protocols &quot;TLSv1.2 TLSv1.3&quot;\ntls-ciphers TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\ntls-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\ntls-prefer-server-ciphers yes\n\n# Require TLS for replication\ntls-replication yes</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 6379\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=redis\nsudo firewall-cmd --permanent --zone=redis --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=redis --add-port=6379/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 6379 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 6379 -j DROP\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 6379\nblock in on $ext_if proto tcp to any port 6379\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Redis&quot; -Direction Inbound -Protocol TCP -LocalPort 6379 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-best-practices\" class=\"mobile-header\">Security Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disable dangerous commands\nrename-command FLUSHDB &quot;&quot;\nrename-command FLUSHALL &quot;&quot;\nrename-command KEYS &quot;&quot;\nrename-command CONFIG &quot;CONFIG_y7d9s3k4&quot;\nrename-command SHUTDOWN &quot;&quot;\n\n# Enable protected mode\nprotected-mode yes\n\n# Set client connection limits\ntcp-keepalive 300\ntimeout 300\ntcp-backlog 511\n\n# Limit client output buffer\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Redis doesn't require traditional database setup, but here's how to organize data:</p>\n<h3 id=\"keyspace-design\" class=\"mobile-header\">Keyspace Design</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use namespacing for keys\nSET user:1000:name &quot;John Doe&quot;\nSET user:1000:email &quot;john@example.com&quot;\nHSET user:1000 name &quot;John Doe&quot; email &quot;john@example.com&quot;\n\n# Use expiration for cache\nSET cache:user:1000 &quot;{...json...}&quot; EX 3600\n\n# Database selection (0-15 by default)\nSELECT 0  # Default database\nSELECT 1  # Switch to database 1\n\n# Configure number of databases\ndatabases 16</code></pre>\n      </div>\n    </div>\n<h3 id=\"data-types-examples\" class=\"mobile-header\">Data Types Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Strings\nSET key &quot;value&quot;\nGET key\nINCR counter\nDECR counter\n\n# Lists\nLPUSH queue item1 item2\nRPOP queue\nLRANGE queue 0 -1\n\n# Sets\nSADD tags redis nosql cache\nSMEMBERS tags\nSINTER tags:post1 tags:post2\n\n# Sorted Sets\nZADD leaderboard 100 player1 200 player2\nZRANGE leaderboard 0 -1 WITHSCORES\n\n# Hashes\nHSET user:1000 name &quot;John&quot; age 30\nHGETALL user:1000\n\n# Streams (Redis 5.0+)\nXADD mystream * sensor-id 1234 temperature 19.8\nXREAD COUNT 2 STREAMS mystream 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># /etc/sysctl.conf\n# Increase system memory\nvm.overcommit_memory = 1\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\n\n# Disable THP (Transparent Huge Pages)\necho never &gt; /sys/kernel/mm/transparent_hugepage/enabled\necho never &gt; /sys/kernel/mm/transparent_hugepage/defrag\n\n# Apply settings\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-performance-tuning\" class=\"mobile-header\">Redis Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># redis.conf optimizations\n\n# I/O threads (Redis 6.0+)\nio-threads 4\nio-threads-do-reads yes\n\n# Disable saving if using Redis as cache only\nsave &quot;&quot;\n\n# Lazy freeing (Redis 4.0+)\nlazyfree-lazy-eviction yes\nlazyfree-lazy-expire yes\nlazyfree-lazy-server-del yes\nreplica-lazy-flush yes\n\n# Background tasks\nhz 100  # Increase for more responsive background tasks\n\n# Client optimizations\ntcp-keepalive 60\ntcp-backlog 511</code></pre>\n      </div>\n    </div>\n<h3 id=\"benchmarking\" class=\"mobile-header\">Benchmarking</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic benchmark\nredis-benchmark -h localhost -p 6379 -a YourStrongPasswordHere123! -n 100000 -c 50\n\n# Test specific commands\nredis-benchmark -h localhost -p 6379 -a YourStrongPasswordHere123! -t set,get -n 100000\n\n# Pipeline mode\nredis-benchmark -h localhost -p 6379 -a YourStrongPasswordHere123! -P 16 -n 100000\n\n# Custom payload size\nredis-benchmark -h localhost -p 6379 -a YourStrongPasswordHere123! -d 1024 -n 100000</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Real-time stats\nredis-cli -a YourStrongPasswordHere123! --stat\n\n# Monitor commands in real-time\nredis-cli -a YourStrongPasswordHere123! MONITOR\n\n# Get server info\nredis-cli -a YourStrongPasswordHere123! INFO\nredis-cli -a YourStrongPasswordHere123! INFO stats\nredis-cli -a YourStrongPasswordHere123! INFO memory\nredis-cli -a YourStrongPasswordHere123! INFO replication\n\n# Memory usage analysis\nredis-cli -a YourStrongPasswordHere123! --bigkeys\nredis-cli -a YourStrongPasswordHere123! --memkeys\nredis-cli -a YourStrongPasswordHere123! MEMORY STATS\nredis-cli -a YourStrongPasswordHere123! MEMORY DOCTOR</code></pre>\n      </div>\n    </div>\n<h3 id=\"slow-log-analysis\" class=\"mobile-header\">Slow Log Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure slow log\nCONFIG SET slowlog-log-slower-than 10000  # Log queries slower than 10ms\nCONFIG SET slowlog-max-len 128\n\n# View slow log\nSLOWLOG GET 10\nSLOWLOG LEN\nSLOWLOG RESET</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-tools\" class=\"mobile-header\">External Monitoring Tools</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Redis Exporter for Prometheus\nwget https://github.com/oliver006/redis_exporter/releases/download/v1.45.0/redis_exporter-v1.45.0.linux-amd64.tar.gz\ntar xzf redis_exporter-*.tar.gz\nsudo cp redis_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/redis_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=Redis Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=redis\nExecStart=/usr/local/bin/redis_exporter \\\n    --redis.addr=localhost:6379 \\\n    --redis.password=YourStrongPasswordHere123!\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now redis_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"rdb-snapshot-backup\" class=\"mobile-header\">RDB Snapshot Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Manual backup\nredis-cli -a YourStrongPasswordHere123! BGSAVE\n\n# Wait for backup to complete\nredis-cli -a YourStrongPasswordHere123! LASTSAVE\n\n# Copy backup file\nsudo cp /var/lib/redis/dump.rdb /backup/redis/dump_$(date +%Y%m%d_%H%M%S).rdb\n\n# Automated backup script\ncat &gt; /usr/local/bin/redis-backup.sh &lt;&lt; &#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/redis&quot;\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nREDIS_CLI=&quot;redis-cli -a YourStrongPasswordHere123!&quot;\n\n# Create backup directory\nmkdir -p ${BACKUP_DIR}\n\n# Trigger backup\n${REDIS_CLI} BGSAVE\n\n# Wait for backup to complete\nwhile [ $(${REDIS_CLI} LASTSAVE) -eq $(${REDIS_CLI} LASTSAVE) ]; do\n    sleep 1\ndone\n\n# Copy backup file\ncp /var/lib/redis/dump.rdb ${BACKUP_DIR}/dump_${TIMESTAMP}.rdb\n\n# Keep only last 7 days\nfind ${BACKUP_DIR} -name &quot;dump_*.rdb&quot; -mtime +7 -delete\n\necho &quot;Backup completed: dump_${TIMESTAMP}.rdb&quot;\nEOF\n\nchmod +x /usr/local/bin/redis-backup.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"aof-backup\" class=\"mobile-header\">AOF Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># If using AOF\nredis-cli -a YourStrongPasswordHere123! BGREWRITEAOF\n\n# Backup AOF file\ncp /var/lib/redis/appendonly.aof /backup/redis/appendonly_$(date +%Y%m%d_%H%M%S).aof</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop Redis\nsudo systemctl stop redis\n\n# Replace dump file\nsudo cp /backup/redis/dump_20240115_120000.rdb /var/lib/redis/dump.rdb\nsudo chown redis:redis /var/lib/redis/dump.rdb\n\n# Start Redis\nsudo systemctl start redis\n\n# Verify data\nredis-cli -a YourStrongPasswordHere123! DBSIZE</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-to-cloud-storage\" class=\"mobile-header\">Backup to Cloud Storage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Backup to S3\naws s3 cp /var/lib/redis/dump.rdb s3://my-bucket/redis-backups/dump_$(date +%Y%m%d_%H%M%S).rdb\n\n# Backup to Azure\naz storage blob upload --account-name myaccount --container-name redis-backups --name dump_$(date +%Y%m%d_%H%M%S).rdb --file /var/lib/redis/dump.rdb\n\n# Backup to GCS\ngsutil cp /var/lib/redis/dump.rdb gs://my-bucket/redis-backups/dump_$(date +%Y%m%d_%H%M%S).rdb</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Redis is running\nsudo systemctl status redis\nps aux | grep redis\n\n# Check if Redis is listening\nsudo netstat -tlnp | grep 6379\nsudo ss -tlnp | grep 6379\n\n# Check logs\nsudo tail -f /var/log/redis/redis.log\nsudo journalctl -u redis -f</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Authentication errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test authentication\nredis-cli -a YourWrongPassword ping\n# (error) WRONGPASS invalid username-password pair\n\n# Connect with correct password\nredis-cli -a YourStrongPasswordHere123! ping\n# PONG</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Memory issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check memory usage\nredis-cli -a YourStrongPasswordHere123! INFO memory\n\n# Check evicted keys\nredis-cli -a YourStrongPasswordHere123! INFO stats | grep evicted\n\n# Set memory limit\nredis-cli -a YourStrongPasswordHere123! CONFIG SET maxmemory 2gb\n\n# Check what&#039;s using memory\nredis-cli -a YourStrongPasswordHere123! --bigkeys</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check slow queries\nredis-cli -a YourStrongPasswordHere123! SLOWLOG GET 10\n\n# Check connected clients\nredis-cli -a YourStrongPasswordHere123! CLIENT LIST\n\n# Check persistence status\nredis-cli -a YourStrongPasswordHere123! INFO persistence\n\n# Disable persistence temporarily\nredis-cli -a YourStrongPasswordHere123! CONFIG SET save &quot;&quot;\nredis-cli -a YourStrongPasswordHere123! CONFIG SET appendonly no</code></pre>\n      </div>\n    </div>\n<h3 id=\"recovery-procedures\" class=\"mobile-header\">Recovery Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix corrupted AOF\nredis-check-aof --fix /var/lib/redis/appendonly.aof\n\n# Fix corrupted RDB\nredis-check-rdb /var/lib/redis/dump.rdb\n\n# Emergency flush (use with caution!)\nredis-cli -a YourStrongPasswordHere123! FLUSHDB\nredis-cli -a YourStrongPasswordHere123! FLUSHALL</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update redis\nsudo dnf update redis\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade redis-server\n\n# Arch Linux\nsudo pacman -Syu redis\n\n# Alpine Linux\napk update\napk upgrade redis\n\n# openSUSE\nsudo zypper update redis\n\n# FreeBSD\npkg update\npkg upgrade redis\n\n# Always backup before updates\nredis-cli -a YourStrongPasswordHere123! BGSAVE</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-rotation\" class=\"mobile-header\">Log Rotation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create logrotate configuration\nsudo tee /etc/logrotate.d/redis &lt;&lt;EOF\n/var/log/redis/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 redis redis\n    postrotate\n        systemctl reload redis &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/redis-health-check.sh\n\nREDIS_CLI=&quot;redis-cli -a YourStrongPasswordHere123!&quot;\n\n# Check if Redis is responding\nif ! ${REDIS_CLI} ping &gt; /dev/null 2&gt;&amp;1; then\n    echo &quot;Redis is not responding&quot;\n    exit 1\nfi\n\n# Check memory usage\nUSED_MEMORY=$(${REDIS_CLI} INFO memory | grep used_memory_human | cut -d: -f2 | tr -d &#039;\\r&#039;)\necho &quot;Memory usage: ${USED_MEMORY}&quot;\n\n# Check replication\nROLE=$(${REDIS_CLI} INFO replication | grep role | cut -d: -f2 | tr -d &#039;\\r&#039;)\necho &quot;Redis role: ${ROLE}&quot;\n\n# Check persistence\nRDB_LAST_SAVE=$(${REDIS_CLI} LASTSAVE)\necho &quot;Last save: $(date -d @${RDB_LAST_SAVE})&quot;\n\necho &quot;Redis health check passed&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-redis-py\" class=\"mobile-header\">Python (redis-py)</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">import redis\nfrom redis.sentinel import Sentinel\n\n# Basic connection\nr = redis.Redis(\n    host=&#039;localhost&#039;,\n    port=6379,\n    password=&#039;YourStrongPasswordHere123!&#039;,\n    decode_responses=True\n)\n\n# Connection pool\npool = redis.ConnectionPool(\n    host=&#039;localhost&#039;,\n    port=6379,\n    password=&#039;YourStrongPasswordHere123!&#039;,\n    max_connections=50\n)\nr = redis.Redis(connection_pool=pool)\n\n# Basic operations\nr.set(&#039;key&#039;, &#039;value&#039;)\nvalue = r.get(&#039;key&#039;)\n\n# Pipeline for performance\npipe = r.pipeline()\nfor i in range(10000):\n    pipe.set(f&#039;key:{i}&#039;, i)\npipe.execute()\n\n# Pub/Sub\npubsub = r.pubsub()\npubsub.subscribe(&#039;channel&#039;)\nfor message in pubsub.listen():\n    print(message)\n\n# Sentinel connection\nsentinel = Sentinel([(&#039;localhost&#039;, 26379)])\nmaster = sentinel.master_for(&#039;mymaster&#039;, socket_timeout=0.1)</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-ioredis\" class=\"mobile-header\">Node.js (ioredis)</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">const Redis = require(&#039;ioredis&#039;);\n\n// Basic connection\nconst redis = new Redis({\n  host: &#039;localhost&#039;,\n  port: 6379,\n  password: &#039;YourStrongPasswordHere123!&#039;,\n  retryStrategy: (times) =&gt; {\n    const delay = Math.min(times * 50, 2000);\n    return delay;\n  }\n});\n\n// Cluster connection\nconst cluster = new Redis.Cluster([\n  { port: 6379, host: &#039;192.168.1.10&#039; },\n  { port: 6379, host: &#039;192.168.1.11&#039; }\n]);\n\n// Basic operations\nasync function example() {\n  await redis.set(&#039;key&#039;, &#039;value&#039;);\n  const value = await redis.get(&#039;key&#039;);\n  \n  // Pipeline\n  const pipeline = redis.pipeline();\n  pipeline.set(&#039;key1&#039;, &#039;value1&#039;);\n  pipeline.set(&#039;key2&#039;, &#039;value2&#039;);\n  pipeline.get(&#039;key1&#039;);\n  const results = await pipeline.exec();\n  \n  // Pub/Sub\n  const sub = new Redis();\n  sub.subscribe(&#039;news&#039;, &#039;music&#039;);\n  sub.on(&#039;message&#039;, (channel, message) =&gt; {\n    console.log(`Received ${message} from ${channel}`);\n  });\n}\n\n// Stream processing\nasync function streamExample() {\n  // Add to stream\n  await redis.xadd(&#039;mystream&#039;, &#039;*&#039;, &#039;field1&#039;, &#039;value1&#039;);\n  \n  // Read from stream\n  const messages = await redis.xread(&#039;STREAMS&#039;, &#039;mystream&#039;, &#039;0&#039;);\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"php-predisphpredis\" class=\"mobile-header\">PHP (Predis/PhpRedis)</h3>\n<div class=\"mobile-code-block\" data-language=\"php\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">php</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-php\">&lt;?php\n// Using Predis\nrequire &#039;vendor/autoload.php&#039;;\n\n$client = new Predis\\Client([\n    &#039;scheme&#039; =&gt; &#039;tcp&#039;,\n    &#039;host&#039;   =&gt; &#039;127.0.0.1&#039;,\n    &#039;port&#039;   =&gt; 6379,\n    &#039;password&#039; =&gt; &#039;YourStrongPasswordHere123!&#039;\n]);\n\n// Basic operations\n$client-&gt;set(&#039;key&#039;, &#039;value&#039;);\n$value = $client-&gt;get(&#039;key&#039;);\n\n// Pipeline\n$pipe = $client-&gt;pipeline();\nfor ($i = 0; $i &lt; 1000; $i++) {\n    $pipe-&gt;set(&quot;key:$i&quot;, $i);\n}\n$pipe-&gt;execute();\n\n// Using PhpRedis extension\n$redis = new Redis();\n$redis-&gt;connect(&#039;127.0.0.1&#039;, 6379);\n$redis-&gt;auth(&#039;YourStrongPasswordHere123!&#039;);\n\n// Transactions\n$redis-&gt;multi();\n$redis-&gt;set(&#039;key1&#039;, &#039;value1&#039;);\n$redis-&gt;set(&#039;key2&#039;, &#039;value2&#039;);\n$redis-&gt;exec();\n\n// Pub/Sub\n$redis-&gt;subscribe([&#039;channel1&#039;, &#039;channel2&#039;], function ($redis, $channel, $message) {\n    echo &quot;Received: $message on $channel\\n&quot;;\n});\n?&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-jedislettuce\" class=\"mobile-header\">Java (Jedis/Lettuce)</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// Using Jedis\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisExample {\n    private static JedisPool pool;\n    \n    static {\n        JedisPoolConfig config = new JedisPoolConfig();\n        config.setMaxTotal(128);\n        config.setMaxIdle(128);\n        config.setMinIdle(16);\n        config.setTestOnBorrow(true);\n        config.setTestOnReturn(true);\n        \n        pool = new JedisPool(config, &quot;localhost&quot;, 6379, 2000, &quot;YourStrongPasswordHere123!&quot;);\n    }\n    \n    public static void example() {\n        try (Jedis jedis = pool.getResource()) {\n            // Basic operations\n            jedis.set(&quot;key&quot;, &quot;value&quot;);\n            String value = jedis.get(&quot;key&quot;);\n            \n            // Pipeline\n            Pipeline pipeline = jedis.pipelined();\n            for (int i = 0; i &lt; 10000; i++) {\n                pipeline.set(&quot;key:&quot; + i, String.valueOf(i));\n            }\n            pipeline.sync();\n            \n            // Transactions\n            Transaction tx = jedis.multi();\n            tx.set(&quot;key1&quot;, &quot;value1&quot;);\n            tx.set(&quot;key2&quot;, &quot;value2&quot;);\n            tx.exec();\n        }\n    }\n}\n\n// Using Lettuce\nimport io.lettuce.core.*;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\n\nRedisClient client = RedisClient.create(&quot;redis://password@localhost:6379&quot;);\nStatefulRedisConnection&lt;String, String&gt; connection = client.connect();\nRedisCommands&lt;String, String&gt; sync = connection.sync();\n\nsync.set(&quot;key&quot;, &quot;value&quot;);\nString value = sync.get(&quot;key&quot;);</code></pre>\n      </div>\n    </div>\n<h3 id=\"go-go-redis\" class=\"mobile-header\">Go (go-redis)</h3>\n<div class=\"mobile-code-block\" data-language=\"go\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">go</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-go\">package main\n\nimport (\n    &quot;context&quot;\n    &quot;fmt&quot;\n    &quot;github.com/go-redis/redis/v8&quot;\n)\n\nvar ctx = context.Background()\n\nfunc main() {\n    // Create client\n    rdb := redis.NewClient(&amp;redis.Options{\n        Addr:     &quot;localhost:6379&quot;,\n        Password: &quot;YourStrongPasswordHere123!&quot;,\n        DB:       0,\n        PoolSize: 10,\n    })\n\n    // Basic operations\n    err := rdb.Set(ctx, &quot;key&quot;, &quot;value&quot;, 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, &quot;key&quot;).Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(&quot;key&quot;, val)\n\n    // Pipeline\n    pipe := rdb.Pipeline()\n    for i := 0; i &lt; 1000; i++ {\n        pipe.Set(ctx, fmt.Sprintf(&quot;key:%d&quot;, i), i, 0)\n    }\n    _, err = pipe.Exec(ctx)\n\n    // Pub/Sub\n    pubsub := rdb.Subscribe(ctx, &quot;channel&quot;)\n    ch := pubsub.Channel()\n    for msg := range ch {\n        fmt.Println(msg.Channel, msg.Payload)\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/documentation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/redis/redis\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/commands\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Commands Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://university.redis.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis University</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/docs/manual/patterns/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/docs/manual/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Security</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/docs/manual/scaling/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Cluster Tutorial</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forum.redis.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"18 min","wordCount":3495,"lastBuilt":"2025-09-14T03:53:53.303Z"},{"name":"redis-server","displayName":"Redis Server","slug":"redis-server","description":"Repo for redis-server","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/redis-server","updatedAt":"2025-09-14T03:45:52Z","createdAt":"2025-09-08T03:15:51Z","readmeRaw":"# Redis Installation Guide\n\nRedis is a free and open-source in-memory data structure store used as database, cache, message broker, and streaming engine. Originally developed by Salvatore Sanfilippo, Redis (REmote DIctionary Server) is known for its performance, simplicity, and versatility. It serves as a FOSS alternative to commercial in-memory solutions like Amazon ElastiCache, Azure Cache for Redis, or Oracle Coherence, offering enterprise-grade features including persistence, replication, clustering, and pub/sub messaging without licensing costs.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for production)\n  - RAM: 512MB minimum (4GB+ recommended for production)\n  - Storage: 1GB minimum (SSD recommended for persistence)\n  - Network: Stable connectivity for clustering and replication\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 6379 (default Redis port)\n  - Port 26379 (Redis Sentinel)\n  - Port 16379 (Redis Cluster bus port)\n  - Additional ports for Redis instances in cluster mode\n- **Dependencies**:\n  - libc, libssl (usually included in distributions)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install Redis\nsudo dnf install -y redis redis-tools\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6379/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nredis-cli --version\nredis-cli ping\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install Redis server and tools\nsudo apt install -y redis-server redis-tools\n\n# Enable and start service\nsudo systemctl enable --now redis-server\n\n# Configure firewall\nsudo ufw allow 6379\n\n# Verify installation\nredis-cli --version\nredis-cli ping\n```\n\n### Arch Linux\n\n```bash\n# Install Redis from official repositories\nsudo pacman -S redis\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# Install additional tools\nsudo pacman -S redis-tools\n\n# Configuration location: /etc/redis/redis.conf\n```\n\n### Alpine Linux\n\n```bash\n# Install Redis\napk add --no-cache redis\n\n# Enable and start service\nrc-update add redis default\nrc-service redis start\n\n# Install additional tools\napk add --no-cache redis-tools\n\n# Configuration location: /etc/redis.conf\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y redis redis-tools\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y redis\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6379/tcp\nsudo firewall-cmd --reload\n\n# Configuration location: /etc/redis/redis.conf\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install redis\n\n# Start Redis service\nbrew services start redis\n\n# Or run manually\nredis-server\n\n# Configuration location: /usr/local/etc/redis.conf\n# Alternative: /opt/homebrew/etc/redis.conf (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install redis\n\n# Enable in rc.conf\necho 'redis_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice redis start\n\n# Configuration location: /usr/local/etc/redis.conf\n```\n\n### Windows\n\n```bash\n# Method 1: Using Chocolatey\nchoco install redis-64\n\n# Method 2: Using Scoop\nscoop install redis\n\n# Method 3: Manual installation\n# Download from https://github.com/microsoftarchive/redis/releases\n# Extract and run redis-server.exe\n\n# Install as Windows service using NSSM\nnssm install Redis \"C:\\redis\\redis-server.exe\" \"C:\\redis\\redis.windows.conf\"\nnssm start Redis\n\n# Configuration location: C:\\redis\\redis.windows.conf\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create redis user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/redis -s /sbin/nologin -c \"Redis Server\" redis\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/redis.conf` or `/etc/redis/redis.conf`\n- Debian/Ubuntu: `/etc/redis/redis.conf`\n- Arch Linux: `/etc/redis/redis.conf`\n- Alpine Linux: `/etc/redis.conf`\n- openSUSE/SLES: `/etc/redis/redis.conf`\n- macOS: `/usr/local/etc/redis.conf`\n- FreeBSD: `/usr/local/etc/redis.conf`\n- Windows: `C:\\redis\\redis.windows.conf`\n\n3. **Essential settings to change**:\n\n```bash\n# /etc/redis/redis.conf\n# Network\nbind 127.0.0.1\nport 6379\nprotected-mode yes\ntimeout 300\n\n# Security\nrequirepass SecureRedisPassword123!\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\nrename-command DEBUG \"\"\nrename-command CONFIG \"CONFIG_$(openssl rand -hex 4)\"\n\n# Memory management\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 5\n\n# Persistence\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\n\n# AOF persistence\nappendonly yes\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\nsyslog-enabled yes\nsyslog-ident redis\n\n# Client connections\ntcp-backlog 511\ntcp-keepalive 300\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if Redis is running\nsudo systemctl status redis\n\n# Test connection\nredis-cli ping\n\n# Test authentication (if password set)\nredis-cli -a SecureRedisPassword123! ping\n\n# Test basic operations\nredis-cli set test \"Hello Redis\"\nredis-cli get test\n\n# Check Redis configuration\nredis-cli config get \"*\"\n```\n\n**WARNING:** Enable authentication and configure firewall rules immediately after installation!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Redis to start on boot\nsudo systemctl enable redis\n\n# Start Redis\nsudo systemctl start redis\n\n# Stop Redis\nsudo systemctl stop redis\n\n# Restart Redis\nsudo systemctl restart redis\n\n# Reload configuration\nsudo systemctl reload redis\n\n# Check status\nsudo systemctl status redis\n\n# View logs\nsudo journalctl -u redis -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable Redis to start on boot\nrc-update add redis default\n\n# Start Redis\nrc-service redis start\n\n# Stop Redis\nrc-service redis stop\n\n# Restart Redis\nrc-service redis restart\n\n# Check status\nrc-service redis status\n\n# View logs\ntail -f /var/log/redis.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'redis_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Redis\nservice redis start\n\n# Stop Redis\nservice redis stop\n\n# Restart Redis\nservice redis restart\n\n# Check status\nservice redis status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start redis\nbrew services stop redis\nbrew services restart redis\n\n# Check status\nbrew services list | grep redis\n\n# Manual control\nredis-server /usr/local/etc/redis.conf\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Redis service\nnet start Redis\n\n# Stop Redis service\nnet stop Redis\n\n# Using PowerShell\nStart-Service Redis\nStop-Service Redis\nRestart-Service Redis\n\n# Check status\nGet-Service Redis\n\n# Using NSSM\nnssm start Redis\nnssm stop Redis\nnssm restart Redis\n```\n\n## Advanced Configuration\n\n### Master-Slave Replication\n\n```bash\n# Master configuration\n# /etc/redis/redis-master.conf\nport 6379\nbind 0.0.0.0\nrequirepass MasterPassword123!\nmasterauth MasterPassword123!\n\n# Slave configuration\n# /etc/redis/redis-slave.conf\nport 6380\nbind 0.0.0.0\nslaveof 192.168.1.100 6379\nmasterauth MasterPassword123!\nrequirepass SlavePassword123!\nslave-read-only yes\nslave-serve-stale-data yes\n```\n\n### Redis Cluster Configuration\n\n```bash\n# Cluster node configuration\nport 7000\ncluster-enabled yes\ncluster-config-file nodes-7000.conf\ncluster-node-timeout 15000\nappendonly yes\nrequirepass ClusterPassword123!\nmasterauth ClusterPassword123!\n\n# Create cluster (6 nodes minimum)\nredis-cli --cluster create \\\n  192.168.1.10:7000 192.168.1.11:7000 192.168.1.12:7000 \\\n  192.168.1.13:7000 192.168.1.14:7000 192.168.1.15:7000 \\\n  --cluster-replicas 1 -a ClusterPassword123!\n```\n\n### Redis Sentinel Configuration\n\n```bash\n# /etc/redis/sentinel.conf\nport 26379\nsentinel monitor mymaster 192.168.1.100 6379 2\nsentinel auth-pass mymaster MasterPassword123!\nsentinel down-after-milliseconds mymaster 30000\nsentinel failover-timeout mymaster 180000\nsentinel parallel-syncs mymaster 1\n\n# Notification scripts\nsentinel notification-script mymaster /usr/local/bin/redis-notify.sh\nsentinel client-reconfig-script mymaster /usr/local/bin/redis-reconfig.sh\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/redis-proxy\nupstream redis_backend {\n    server 127.0.0.1:6379 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:6380 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 6379;\n    proxy_pass redis_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/redis.log;\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend redis_frontend\n    bind *:6379\n    mode tcp\n    option tcplog\n    default_backend redis_servers\n\nbackend redis_servers\n    mode tcp\n    balance first\n    option redis-check\n    server redis1 127.0.0.1:6379 check\n    server redis2 127.0.0.1:6380 check backup\n```\n\n### Twemproxy (Redis Proxy)\n\n```yaml\n# /etc/nutcracker/nutcracker.yml\nredis_cluster:\n  listen: 0.0.0.0:22122\n  hash: fnv1a_64\n  hash_tag: \"{}\"\n  distribution: ketama\n  auto_eject_hosts: true\n  timeout: 400\n  redis: true\n  servers:\n   - 127.0.0.1:6379:1\n   - 127.0.0.1:6380:1\n   - 127.0.0.1:6381:1\n```\n\n## Security Configuration\n\n### Authentication and Authorization\n\n```bash\n# Set strong password\nredis-cli config set requirepass \"VerySecureRedisPassword123!\"\n\n# Create ACL users (Redis 6+)\nredis-cli acl setuser app-user on \\\n  >AppUserPassword123! \\\n  ~cached:* ~session:* \\\n  +@read +@write -@dangerous\n\nredis-cli acl setuser readonly-user on \\\n  >ReadOnlyPassword123! \\\n  ~* +@read -@write -@admin\n\n# Save ACL configuration\nredis-cli acl save\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo mkdir -p /etc/redis/ssl\nsudo openssl genrsa -out /etc/redis/ssl/redis-server-key.pem 4096\nsudo openssl req -new -key /etc/redis/ssl/redis-server-key.pem \\\n  -out /etc/redis/ssl/redis-server-cert.csr \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=redis.example.com\"\nsudo openssl x509 -req -in /etc/redis/ssl/redis-server-cert.csr \\\n  -signkey /etc/redis/ssl/redis-server-key.pem \\\n  -out /etc/redis/ssl/redis-server-cert.pem -days 365\n\n# Update Redis configuration\ntls-port 6380\nport 0\ntls-cert-file /etc/redis/ssl/redis-server-cert.pem\ntls-key-file /etc/redis/ssl/redis-server-key.pem\ntls-protocols \"TLSv1.2 TLSv1.3\"\ntls-prefer-server-ciphers yes\ntls-session-caching no\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 6379\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=redis\nsudo firewall-cmd --permanent --zone=redis --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=redis --add-port=6379/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 6379 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 6379\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Redis\" -Direction Inbound -Protocol TCP -LocalPort 6379 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Database Creation and Management\n\n```bash\n# Redis doesn't require explicit database creation\n# Databases are numbered 0-15 by default\n\n# Select database\nredis-cli select 0\n\n# Create data structures\nredis-cli hset user:1000 name \"John Doe\" email \"john@example.com\"\nredis-cli sadd users:active 1000 1001 1002\nredis-cli zadd leaderboard 100 \"player1\" 200 \"player2\"\nredis-cli lpush notifications \"New message\" \"System update\"\n\n# Set expiration\nredis-cli expire user:1000 3600\nredis-cli ttl user:1000\n\n# Pipeline operations\nredis-cli --pipe <<EOF\nSET key1 value1\nSET key2 value2\nINCR counter\nEOF\n```\n\n### Data Types and Use Cases\n\n```bash\n# Strings - caching, counters\nredis-cli set cache:user:1000 '{\"name\":\"John\",\"age\":30}'\nredis-cli incr page_views\nredis-cli setex session:abc123 3600 \"user_data\"\n\n# Hashes - objects, user profiles\nredis-cli hset product:1 name \"Laptop\" price 999.99 stock 50\nredis-cli hgetall product:1\n\n# Lists - queues, recent items\nredis-cli lpush job_queue \"process_order:123\"\nredis-cli rpop job_queue\nredis-cli lrange recent_posts 0 9\n\n# Sets - unique collections, tags\nredis-cli sadd tags:post:1 \"redis\" \"database\" \"cache\"\nredis-cli sinter tags:post:1 tags:post:2\n\n# Sorted Sets - leaderboards, rankings\nredis-cli zadd scores 100 \"alice\" 200 \"bob\" 150 \"charlie\"\nredis-cli zrevrange scores 0 2 withscores\n\n# Streams - event logging, messaging\nredis-cli xadd events * action \"user_login\" user_id 1000 timestamp 1640995200\nredis-cli xread streams events 0-0\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for Redis\nsudo tee -a /etc/sysctl.conf <<EOF\n# Redis performance optimizations\nvm.overcommit_memory = 1\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nvm.swappiness = 1\nEOF\n\nsudo sysctl -p\n\n# Disable Transparent Huge Pages\necho 'never' | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\n\n# Make permanent\nsudo tee /etc/systemd/system/disable-thp.service <<EOF\n[Unit]\nDescription=Disable Transparent Huge Pages\nDefaultDependencies=no\nAfter=sysinit.target local-fs.target\nBefore=redis.service\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c 'echo never | tee /sys/kernel/mm/transparent_hugepage/enabled > /dev/null'\n\n[Install]\nWantedBy=basic.target\nEOF\n\nsudo systemctl enable --now disable-thp\n```\n\n### Redis Performance Tuning\n\n```bash\n# High-performance Redis configuration\n# Memory optimization\nmaxmemory 8gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 10\n\n# Network optimization\ntcp-backlog 65535\ntcp-keepalive 300\ntimeout 0\n\n# Persistence optimization\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\nrdbchecksum yes\n\n# AOF optimization\nappendonly yes\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-rewrite-incremental-fsync yes\n\n# Client optimization\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Threading (Redis 6+)\nio-threads 4\nio-threads-do-reads yes\n```\n\n### Memory Management\n\n```bash\n# Monitor memory usage\nredis-cli info memory\n\n# Analyze memory usage by key pattern\nredis-cli --bigkeys\nredis-cli --memkeys\nredis-cli memory usage key_name\n\n# Memory optimization commands\nredis-cli memory doctor\nredis-cli memory stats\nredis-cli memory purge\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Server information\nredis-cli info\nredis-cli info server\nredis-cli info memory\nredis-cli info replication\nredis-cli info stats\n\n# Real-time monitoring\nredis-cli monitor\nredis-cli --latency\nredis-cli --latency-history -i 1\n\n# Slow query log\nredis-cli config set slowlog-log-slower-than 10000\nredis-cli slowlog get 10\nredis-cli slowlog reset\n\n# Client connections\nredis-cli client list\nredis-cli client info\nredis-cli info clients\n```\n\n### External Monitoring Setup\n\n```bash\n# Install Redis Exporter for Prometheus\nwget https://github.com/oliver006/redis_exporter/releases/download/v1.55.0/redis_exporter-v1.55.0.linux-amd64.tar.gz\ntar xzf redis_exporter-*.tar.gz\nsudo cp redis_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/redis_exporter.service <<EOF\n[Unit]\nDescription=Redis Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=redis\nEnvironment=REDIS_ADDR=redis://localhost:6379\nEnvironment=REDIS_PASSWORD=SecureRedisPassword123!\nExecStart=/usr/local/bin/redis_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now redis_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# redis-health-check.sh\n\n# Check Redis service\nif ! systemctl is-active redis >/dev/null 2>&1; then\n    echo \"CRITICAL: Redis service is not running\"\n    exit 2\nfi\n\n# Check connectivity\nif ! redis-cli ping >/dev/null 2>&1; then\n    echo \"CRITICAL: Cannot connect to Redis\"\n    exit 2\nfi\n\n# Check memory usage\nMEMORY_USED=$(redis-cli info memory | grep 'used_memory:' | cut -d: -f2 | tr -d '\\r')\nMEMORY_MAX=$(redis-cli config get maxmemory | tail -1)\n\nif [ \"$MEMORY_MAX\" != \"0\" ]; then\n    MEMORY_USAGE=$((MEMORY_USED * 100 / MEMORY_MAX))\n    if [ $MEMORY_USAGE -gt 90 ]; then\n        echo \"WARNING: High memory usage: ${MEMORY_USAGE}%\"\n        exit 1\n    fi\nfi\n\n# Check replication (if configured)\nREPLICATION_INFO=$(redis-cli info replication)\nif echo \"$REPLICATION_INFO\" | grep -q \"role:slave\"; then\n    LINK_STATUS=$(echo \"$REPLICATION_INFO\" | grep \"master_link_status\" | cut -d: -f2 | tr -d '\\r')\n    if [ \"$LINK_STATUS\" != \"up\" ]; then\n        echo \"WARNING: Replication link is down\"\n        exit 1\n    fi\nfi\n\necho \"OK: Redis is healthy\"\nexit 0\n```\n\n## Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# redis-backup.sh\n\nBACKUP_DIR=\"/backup/redis/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Create RDB backup\nredis-cli -a SecureRedisPassword123! bgsave\nsleep 5\n\n# Wait for background save to complete\nwhile [ \"$(redis-cli -a SecureRedisPassword123! lastsave)\" = \"$(redis-cli -a SecureRedisPassword123! lastsave)\" ]; do\n    sleep 1\ndone\n\n# Copy RDB file\ncp /var/lib/redis/dump.rdb \"$BACKUP_DIR/\"\n\n# Backup AOF file if enabled\nif [ -f /var/lib/redis/appendonly.aof ]; then\n    redis-cli -a SecureRedisPassword123! bgrewriteaof\n    sleep 5\n    cp /var/lib/redis/appendonly.aof \"$BACKUP_DIR/\"\nfi\n\n# Backup configuration\ncp /etc/redis/redis.conf \"$BACKUP_DIR/\"\n\n# Compress backup\ntar czf \"$BACKUP_DIR.tar.gz\" -C \"$(dirname \"$BACKUP_DIR\")\" \"$(basename \"$BACKUP_DIR\")\"\nrm -rf \"$BACKUP_DIR\"\n\necho \"Backup completed: $BACKUP_DIR.tar.gz\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# redis-restore.sh\n\nBACKUP_FILE=\"$1\"\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.tar.gz>\"\n    exit 1\nfi\n\n# Stop Redis\nsudo systemctl stop redis\n\n# Extract backup\nBACKUP_DIR=\"/tmp/redis-restore-$(date +%s)\"\nmkdir -p \"$BACKUP_DIR\"\ntar xzf \"$BACKUP_FILE\" -C \"$BACKUP_DIR\" --strip-components=1\n\n# Restore RDB file\nif [ -f \"$BACKUP_DIR/dump.rdb\" ]; then\n    cp \"$BACKUP_DIR/dump.rdb\" /var/lib/redis/\n    chown redis:redis /var/lib/redis/dump.rdb\nfi\n\n# Restore AOF file\nif [ -f \"$BACKUP_DIR/appendonly.aof\" ]; then\n    cp \"$BACKUP_DIR/appendonly.aof\" /var/lib/redis/\n    chown redis:redis /var/lib/redis/appendonly.aof\nfi\n\n# Restore configuration\nif [ -f \"$BACKUP_DIR/redis.conf\" ]; then\n    cp \"$BACKUP_DIR/redis.conf\" /etc/redis/\nfi\n\n# Start Redis\nsudo systemctl start redis\n\n# Cleanup\nrm -rf \"$BACKUP_DIR\"\n\necho \"Restore completed\"\n```\n\n### Point-in-Time Recovery\n\n```bash\n#!/bin/bash\n# redis-pitr.sh\n\nRECOVERY_TIME=\"$1\"\nif [ -z \"$RECOVERY_TIME\" ]; then\n    echo \"Usage: $0 <recovery-timestamp>\"\n    echo \"Example: $0 1640995200\"\n    exit 1\nfi\n\n# Find appropriate backup\nBACKUP_FILE=$(find /backup/redis -name \"*.tar.gz\" -newer \"$RECOVERY_TIME\" | head -1)\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"No backup found for recovery time: $RECOVERY_TIME\"\n    exit 1\nfi\n\n# Restore backup\n./redis-restore.sh \"$BACKUP_FILE\"\n\n# Apply AOF logs from recovery point\nif [ -f /var/lib/redis/appendonly.aof ]; then\n    # Truncate AOF to recovery point\n    redis-check-aof --fix /var/lib/redis/appendonly.aof\nfi\n\necho \"Point-in-time recovery completed to $RECOVERY_TIME\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Redis won't start**:\n```bash\n# Check logs\nsudo journalctl -u redis -f\nsudo tail -f /var/log/redis/redis-server.log\n\n# Check disk space\ndf -h /var/lib/redis\n\n# Check permissions\nls -la /var/lib/redis\n\n# Validate configuration\nredis-server --test-config\n```\n\n2. **Connection issues**:\n```bash\n# Check if Redis is listening\nsudo ss -tlnp | grep :6379\n\n# Test local connection\nredis-cli ping\nredis-cli -h 127.0.0.1 -p 6379 ping\n\n# Check authentication\nredis-cli -a SecureRedisPassword123! ping\n\n# Check bind address\nredis-cli config get bind\n```\n\n3. **Performance issues**:\n```bash\n# Check slow queries\nredis-cli slowlog get 10\n\n# Check memory usage\nredis-cli info memory\n\n# Check client connections\nredis-cli info clients\nredis-cli client list\n\n# Monitor latency\nredis-cli --latency-history -i 1\n```\n\n### Debug Mode\n\n```bash\n# Start Redis with verbose logging\nredis-server /etc/redis/redis.conf --loglevel debug\n\n# Enable command logging\nredis-cli config set loglevel debug\n\n# Monitor all commands\nredis-cli monitor\n\n# Check server info\nredis-cli info all\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update redis\nsudo dnf update redis\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade redis-server\n\n# Arch Linux\nsudo pacman -Syu redis\n\n# Alpine Linux\napk update\napk upgrade redis\n\n# openSUSE\nsudo zypper update redis\n\n# FreeBSD\npkg update\npkg upgrade redis\n\n# Always backup before updates\n./redis-backup.sh\n\n# Restart after updates\nsudo systemctl restart redis\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# redis-maintenance.sh\n\n# Check memory usage\nMEMORY_INFO=$(redis-cli info memory)\necho \"Memory usage: $MEMORY_INFO\"\n\n# Clean up expired keys\nredis-cli eval \"return #redis.call('keys', ARGV[1])\" 0 \"*\"\n\n# Optimize RDB file\nredis-cli debug restart\n\n# Check slow queries\nSLOW_QUERIES=$(redis-cli slowlog len)\nif [ \"$SLOW_QUERIES\" -gt 0 ]; then\n    echo \"Found $SLOW_QUERIES slow queries\"\n    redis-cli slowlog get 5\nfi\n\n# Analyze key distribution\nredis-cli --bigkeys\n\n# Check replication lag (if slave)\nif redis-cli info replication | grep -q \"role:slave\"; then\n    redis-cli info replication | grep \"master_last_io_seconds_ago\"\nfi\n\necho \"Redis maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/redis-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/redis <<EOF\n/var/log/redis/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 redis redis\n    postrotate\n        systemctl reload redis\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Python Integration\n\n```python\n# Using redis-py\nimport redis\nimport json\n\n# Connect to Redis\nr = redis.Redis(\n    host='localhost',\n    port=6379,\n    password='SecureRedisPassword123!',\n    decode_responses=True\n)\n\n# Basic operations\nr.set('user:1000', json.dumps({'name': 'John', 'age': 30}))\nuser_data = json.loads(r.get('user:1000'))\n\n# Pipeline operations\npipe = r.pipeline()\npipe.set('key1', 'value1')\npipe.set('key2', 'value2')\npipe.incr('counter')\nresults = pipe.execute()\n\n# Pub/Sub\npubsub = r.pubsub()\npubsub.subscribe('notifications')\nfor message in pubsub.listen():\n    print(f\"Received: {message['data']}\")\n```\n\n### Node.js Integration\n\n```javascript\n// Using ioredis\nconst Redis = require('ioredis');\n\nconst redis = new Redis({\n    port: 6379,\n    host: 'localhost',\n    password: 'SecureRedisPassword123!',\n    retryDelayOnFailover: 100,\n    maxRetriesPerRequest: 3,\n});\n\n// Basic operations\nawait redis.set('session:abc123', JSON.stringify({userId: 1000}), 'EX', 3600);\nconst sessionData = JSON.parse(await redis.get('session:abc123'));\n\n// Pipeline operations\nconst pipeline = redis.pipeline();\npipeline.hset('user:1000', 'name', 'John');\npipeline.hset('user:1000', 'email', 'john@example.com');\npipeline.expire('user:1000', 3600);\nawait pipeline.exec();\n\n// Cluster support\nconst cluster = new Redis.Cluster([\n    { host: '127.0.0.1', port: 7000 },\n    { host: '127.0.0.1', port: 7001 },\n    { host: '127.0.0.1', port: 7002 }\n]);\n```\n\n### PHP Integration\n\n```php\n<?php\n// Using Predis\nrequire_once 'vendor/autoload.php';\n\n$redis = new Predis\\Client([\n    'scheme' => 'tcp',\n    'host'   => '127.0.0.1',\n    'port'   => 6379,\n    'password' => 'SecureRedisPassword123!',\n]);\n\n// Basic operations\n$redis->set('cache:product:1', json_encode(['name' => 'Laptop', 'price' => 999.99]));\n$redis->expire('cache:product:1', 3600);\n$productData = json_decode($redis->get('cache:product:1'), true);\n\n// Transaction\n$redis->multi();\n$redis->incr('page_views');\n$redis->lpush('recent_pages', '/products/1');\n$redis->ltrim('recent_pages', 0, 99);\n$results = $redis->exec();\n?>\n```\n\n### Java Integration\n\n```java\n// Using Jedis\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\n// Connection pool\nJedisPoolConfig poolConfig = new JedisPoolConfig();\npoolConfig.setMaxTotal(50);\npoolConfig.setMaxIdle(20);\n\nJedisPool pool = new JedisPool(poolConfig, \"localhost\", 6379, 2000, \"SecureRedisPassword123!\");\n\n// Use connection\ntry (Jedis jedis = pool.getResource()) {\n    // Basic operations\n    jedis.set(\"user:1000\", \"{\\\"name\\\":\\\"John\\\",\\\"age\\\":30}\");\n    jedis.expire(\"user:1000\", 3600);\n    String userData = jedis.get(\"user:1000\");\n    \n    // Pipeline operations\n    Pipeline pipeline = jedis.pipelined();\n    pipeline.hset(\"product:1\", \"name\", \"Laptop\");\n    pipeline.hset(\"product:1\", \"price\", \"999.99\");\n    pipeline.expire(\"product:1\", 3600);\n    pipeline.sync();\n}\n```\n\n## Additional Resources\n\n- [Official Redis Documentation](https://redis.io/documentation)\n- [Redis Commands Reference](https://redis.io/commands)\n- [Redis Modules](https://redis.io/modules)\n- [Redis Security Guidelines](https://redis.io/topics/security)\n- [Redis Persistence](https://redis.io/topics/persistence)\n- [Redis Replication](https://redis.io/topics/replication)\n- [Redis Cluster Tutorial](https://redis.io/tutorial/redis-cluster-tutorial)\n- [Redis Sentinel Documentation](https://redis.io/topics/sentinel)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"redis-installation-guide\" class=\"mobile-header\">Redis Installation Guide</h1>\n<p class=\"mobile-paragraph\">Redis is a free and open-source in-memory data structure store used as database, cache, message broker, and streaming engine. Originally developed by Salvatore Sanfilippo, Redis (REmote DIctionary Server) is known for its performance, simplicity, and versatility. It serves as a FOSS alternative to commercial in-memory solutions like Amazon ElastiCache, Azure Cache for Redis, or Oracle Coherence, offering enterprise-grade features including persistence, replication, clustering, and pub/sub messaging without licensing costs.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 1GB minimum (SSD recommended for persistence)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for clustering and replication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 6379 (default Redis port)</li>\n<li class=\"mobile-list-item\">Port 26379 (Redis Sentinel)</li>\n<li class=\"mobile-list-item\">Port 16379 (Redis Cluster bus port)</li>\n<li class=\"mobile-list-item\">Additional ports for Redis instances in cluster mode</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">libc, libssl (usually included in distributions)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install Redis\nsudo dnf install -y redis redis-tools\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6379/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nredis-cli --version\nredis-cli ping</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install Redis server and tools\nsudo apt install -y redis-server redis-tools\n\n# Enable and start service\nsudo systemctl enable --now redis-server\n\n# Configure firewall\nsudo ufw allow 6379\n\n# Verify installation\nredis-cli --version\nredis-cli ping</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis from official repositories\nsudo pacman -S redis\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# Install additional tools\nsudo pacman -S redis-tools\n\n# Configuration location: /etc/redis/redis.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis\napk add --no-cache redis\n\n# Enable and start service\nrc-update add redis default\nrc-service redis start\n\n# Install additional tools\napk add --no-cache redis-tools\n\n# Configuration location: /etc/redis.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y redis redis-tools\n\n# SLES 15\nsudo SUSEConnect -p sle-module-server-applications/15.5/x86_64\nsudo zypper install -y redis\n\n# Enable and start service\nsudo systemctl enable --now redis\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6379/tcp\nsudo firewall-cmd --reload\n\n# Configuration location: /etc/redis/redis.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install redis\n\n# Start Redis service\nbrew services start redis\n\n# Or run manually\nredis-server\n\n# Configuration location: /usr/local/etc/redis.conf\n# Alternative: /opt/homebrew/etc/redis.conf (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install redis\n\n# Enable in rc.conf\necho &#039;redis_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice redis start\n\n# Configuration location: /usr/local/etc/redis.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: Using Chocolatey\nchoco install redis-64\n\n# Method 2: Using Scoop\nscoop install redis\n\n# Method 3: Manual installation\n# Download from https://github.com/microsoftarchive/redis/releases\n# Extract and run redis-server.exe\n\n# Install as Windows service using NSSM\nnssm install Redis &quot;C:\\redis\\redis-server.exe&quot; &quot;C:\\redis\\redis.windows.conf&quot;\nnssm start Redis\n\n# Configuration location: C:\\redis\\redis.windows.conf</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create redis user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/redis -s /sbin/nologin -c &quot;Redis Server&quot; redis</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/redis.conf</code> or <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/redis.conf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/redis.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/redis.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\redis\\redis.windows.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># /etc/redis/redis.conf\n# Network\nbind 127.0.0.1\nport 6379\nprotected-mode yes\ntimeout 300\n\n# Security\nrequirepass SecureRedisPassword123!\nrename-command FLUSHDB &quot;&quot;\nrename-command FLUSHALL &quot;&quot;\nrename-command DEBUG &quot;&quot;\nrename-command CONFIG &quot;CONFIG_$(openssl rand -hex 4)&quot;\n\n# Memory management\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 5\n\n# Persistence\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /var/lib/redis\n\n# AOF persistence\nappendonly yes\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\nsyslog-enabled yes\nsyslog-ident redis\n\n# Client connections\ntcp-backlog 511\ntcp-keepalive 300</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Redis is running\nsudo systemctl status redis\n\n# Test connection\nredis-cli ping\n\n# Test authentication (if password set)\nredis-cli -a SecureRedisPassword123! ping\n\n# Test basic operations\nredis-cli set test &quot;Hello Redis&quot;\nredis-cli get test\n\n# Check Redis configuration\nredis-cli config get &quot;*&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Enable authentication and configure firewall rules immediately after installation!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Redis to start on boot\nsudo systemctl enable redis\n\n# Start Redis\nsudo systemctl start redis\n\n# Stop Redis\nsudo systemctl stop redis\n\n# Restart Redis\nsudo systemctl restart redis\n\n# Reload configuration\nsudo systemctl reload redis\n\n# Check status\nsudo systemctl status redis\n\n# View logs\nsudo journalctl -u redis -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Redis to start on boot\nrc-update add redis default\n\n# Start Redis\nrc-service redis start\n\n# Stop Redis\nrc-service redis stop\n\n# Restart Redis\nrc-service redis restart\n\n# Check status\nrc-service redis status\n\n# View logs\ntail -f /var/log/redis.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;redis_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Redis\nservice redis start\n\n# Stop Redis\nservice redis stop\n\n# Restart Redis\nservice redis restart\n\n# Check status\nservice redis status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start redis\nbrew services stop redis\nbrew services restart redis\n\n# Check status\nbrew services list | grep redis\n\n# Manual control\nredis-server /usr/local/etc/redis.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Redis service\nnet start Redis\n\n# Stop Redis service\nnet stop Redis\n\n# Using PowerShell\nStart-Service Redis\nStop-Service Redis\nRestart-Service Redis\n\n# Check status\nGet-Service Redis\n\n# Using NSSM\nnssm start Redis\nnssm stop Redis\nnssm restart Redis</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"master-slave-replication\" class=\"mobile-header\">Master-Slave Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Master configuration\n# /etc/redis/redis-master.conf\nport 6379\nbind 0.0.0.0\nrequirepass MasterPassword123!\nmasterauth MasterPassword123!\n\n# Slave configuration\n# /etc/redis/redis-slave.conf\nport 6380\nbind 0.0.0.0\nslaveof 192.168.1.100 6379\nmasterauth MasterPassword123!\nrequirepass SlavePassword123!\nslave-read-only yes\nslave-serve-stale-data yes</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-cluster-configuration\" class=\"mobile-header\">Redis Cluster Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Cluster node configuration\nport 7000\ncluster-enabled yes\ncluster-config-file nodes-7000.conf\ncluster-node-timeout 15000\nappendonly yes\nrequirepass ClusterPassword123!\nmasterauth ClusterPassword123!\n\n# Create cluster (6 nodes minimum)\nredis-cli --cluster create \\\n  192.168.1.10:7000 192.168.1.11:7000 192.168.1.12:7000 \\\n  192.168.1.13:7000 192.168.1.14:7000 192.168.1.15:7000 \\\n  --cluster-replicas 1 -a ClusterPassword123!</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-sentinel-configuration\" class=\"mobile-header\">Redis Sentinel Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># /etc/redis/sentinel.conf\nport 26379\nsentinel monitor mymaster 192.168.1.100 6379 2\nsentinel auth-pass mymaster MasterPassword123!\nsentinel down-after-milliseconds mymaster 30000\nsentinel failover-timeout mymaster 180000\nsentinel parallel-syncs mymaster 1\n\n# Notification scripts\nsentinel notification-script mymaster /usr/local/bin/redis-notify.sh\nsentinel client-reconfig-script mymaster /usr/local/bin/redis-reconfig.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/redis-proxy\nupstream redis_backend {\n    server 127.0.0.1:6379 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:6380 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 6379;\n    proxy_pass redis_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/redis.log;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend redis_frontend\n    bind *:6379\n    mode tcp\n    option tcplog\n    default_backend redis_servers\n\nbackend redis_servers\n    mode tcp\n    balance first\n    option redis-check\n    server redis1 127.0.0.1:6379 check\n    server redis2 127.0.0.1:6380 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"twemproxy-redis-proxy\" class=\"mobile-header\">Twemproxy (Redis Proxy)</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/nutcracker/nutcracker.yml\nredis_cluster:\n  listen: 0.0.0.0:22122\n  hash: fnv1a_64\n  hash_tag: &quot;{}&quot;\n  distribution: ketama\n  auto_eject_hosts: true\n  timeout: 400\n  redis: true\n  servers:\n   - 127.0.0.1:6379:1\n   - 127.0.0.1:6380:1\n   - 127.0.0.1:6381:1</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"authentication-and-authorization\" class=\"mobile-header\">Authentication and Authorization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set strong password\nredis-cli config set requirepass &quot;VerySecureRedisPassword123!&quot;\n\n# Create ACL users (Redis 6+)\nredis-cli acl setuser app-user on \\\n  &gt;AppUserPassword123! \\\n  ~cached:* ~session:* \\\n  +@read +@write -@dangerous\n\nredis-cli acl setuser readonly-user on \\\n  &gt;ReadOnlyPassword123! \\\n  ~* +@read -@write -@admin\n\n# Save ACL configuration\nredis-cli acl save</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo mkdir -p /etc/redis/ssl\nsudo openssl genrsa -out /etc/redis/ssl/redis-server-key.pem 4096\nsudo openssl req -new -key /etc/redis/ssl/redis-server-key.pem \\\n  -out /etc/redis/ssl/redis-server-cert.csr \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=redis.example.com&quot;\nsudo openssl x509 -req -in /etc/redis/ssl/redis-server-cert.csr \\\n  -signkey /etc/redis/ssl/redis-server-key.pem \\\n  -out /etc/redis/ssl/redis-server-cert.pem -days 365\n\n# Update Redis configuration\ntls-port 6380\nport 0\ntls-cert-file /etc/redis/ssl/redis-server-cert.pem\ntls-key-file /etc/redis/ssl/redis-server-key.pem\ntls-protocols &quot;TLSv1.2 TLSv1.3&quot;\ntls-prefer-server-ciphers yes\ntls-session-caching no</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 6379\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=redis\nsudo firewall-cmd --permanent --zone=redis --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=redis --add-port=6379/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 6379 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 6379\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Redis&quot; -Direction Inbound -Protocol TCP -LocalPort 6379 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"database-creation-and-management\" class=\"mobile-header\">Database Creation and Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Redis doesn&#039;t require explicit database creation\n# Databases are numbered 0-15 by default\n\n# Select database\nredis-cli select 0\n\n# Create data structures\nredis-cli hset user:1000 name &quot;John Doe&quot; email &quot;john@example.com&quot;\nredis-cli sadd users:active 1000 1001 1002\nredis-cli zadd leaderboard 100 &quot;player1&quot; 200 &quot;player2&quot;\nredis-cli lpush notifications &quot;New message&quot; &quot;System update&quot;\n\n# Set expiration\nredis-cli expire user:1000 3600\nredis-cli ttl user:1000\n\n# Pipeline operations\nredis-cli --pipe &lt;&lt;EOF\nSET key1 value1\nSET key2 value2\nINCR counter\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"data-types-and-use-cases\" class=\"mobile-header\">Data Types and Use Cases</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Strings - caching, counters\nredis-cli set cache:user:1000 &#039;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30}&#039;\nredis-cli incr page_views\nredis-cli setex session:abc123 3600 &quot;user_data&quot;\n\n# Hashes - objects, user profiles\nredis-cli hset product:1 name &quot;Laptop&quot; price 999.99 stock 50\nredis-cli hgetall product:1\n\n# Lists - queues, recent items\nredis-cli lpush job_queue &quot;process_order:123&quot;\nredis-cli rpop job_queue\nredis-cli lrange recent_posts 0 9\n\n# Sets - unique collections, tags\nredis-cli sadd tags:post:1 &quot;redis&quot; &quot;database&quot; &quot;cache&quot;\nredis-cli sinter tags:post:1 tags:post:2\n\n# Sorted Sets - leaderboards, rankings\nredis-cli zadd scores 100 &quot;alice&quot; 200 &quot;bob&quot; 150 &quot;charlie&quot;\nredis-cli zrevrange scores 0 2 withscores\n\n# Streams - event logging, messaging\nredis-cli xadd events * action &quot;user_login&quot; user_id 1000 timestamp 1640995200\nredis-cli xread streams events 0-0</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for Redis\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Redis performance optimizations\nvm.overcommit_memory = 1\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nvm.swappiness = 1\nEOF\n\nsudo sysctl -p\n\n# Disable Transparent Huge Pages\necho &#039;never&#039; | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\n\n# Make permanent\nsudo tee /etc/systemd/system/disable-thp.service &lt;&lt;EOF\n[Unit]\nDescription=Disable Transparent Huge Pages\nDefaultDependencies=no\nAfter=sysinit.target local-fs.target\nBefore=redis.service\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c &#039;echo never | tee /sys/kernel/mm/transparent_hugepage/enabled &gt; /dev/null&#039;\n\n[Install]\nWantedBy=basic.target\nEOF\n\nsudo systemctl enable --now disable-thp</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-performance-tuning\" class=\"mobile-header\">Redis Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># High-performance Redis configuration\n# Memory optimization\nmaxmemory 8gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 10\n\n# Network optimization\ntcp-backlog 65535\ntcp-keepalive 300\ntimeout 0\n\n# Persistence optimization\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\nrdbchecksum yes\n\n# AOF optimization\nappendonly yes\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-rewrite-incremental-fsync yes\n\n# Client optimization\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Threading (Redis 6+)\nio-threads 4\nio-threads-do-reads yes</code></pre>\n      </div>\n    </div>\n<h3 id=\"memory-management\" class=\"mobile-header\">Memory Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor memory usage\nredis-cli info memory\n\n# Analyze memory usage by key pattern\nredis-cli --bigkeys\nredis-cli --memkeys\nredis-cli memory usage key_name\n\n# Memory optimization commands\nredis-cli memory doctor\nredis-cli memory stats\nredis-cli memory purge</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Server information\nredis-cli info\nredis-cli info server\nredis-cli info memory\nredis-cli info replication\nredis-cli info stats\n\n# Real-time monitoring\nredis-cli monitor\nredis-cli --latency\nredis-cli --latency-history -i 1\n\n# Slow query log\nredis-cli config set slowlog-log-slower-than 10000\nredis-cli slowlog get 10\nredis-cli slowlog reset\n\n# Client connections\nredis-cli client list\nredis-cli client info\nredis-cli info clients</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis Exporter for Prometheus\nwget https://github.com/oliver006/redis_exporter/releases/download/v1.55.0/redis_exporter-v1.55.0.linux-amd64.tar.gz\ntar xzf redis_exporter-*.tar.gz\nsudo cp redis_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/redis_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=Redis Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=redis\nEnvironment=REDIS_ADDR=redis://localhost:6379\nEnvironment=REDIS_PASSWORD=SecureRedisPassword123!\nExecStart=/usr/local/bin/redis_exporter\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now redis_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# redis-health-check.sh\n\n# Check Redis service\nif ! systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Redis service is not running&quot;\n    exit 2\nfi\n\n# Check connectivity\nif ! redis-cli ping &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Cannot connect to Redis&quot;\n    exit 2\nfi\n\n# Check memory usage\nMEMORY_USED=$(redis-cli info memory | grep &#039;used_memory:&#039; | cut -d: -f2 | tr -d &#039;\\r&#039;)\nMEMORY_MAX=$(redis-cli config get maxmemory | tail -1)\n\nif [ &quot;$MEMORY_MAX&quot; != &quot;0&quot; ]; then\n    MEMORY_USAGE=$((MEMORY_USED * 100 / MEMORY_MAX))\n    if [ $MEMORY_USAGE -gt 90 ]; then\n        echo &quot;WARNING: High memory usage: ${MEMORY_USAGE}%&quot;\n        exit 1\n    fi\nfi\n\n# Check replication (if configured)\nREPLICATION_INFO=$(redis-cli info replication)\nif echo &quot;$REPLICATION_INFO&quot; | grep -q &quot;role:slave&quot;; then\n    LINK_STATUS=$(echo &quot;$REPLICATION_INFO&quot; | grep &quot;master_link_status&quot; | cut -d: -f2 | tr -d &#039;\\r&#039;)\n    if [ &quot;$LINK_STATUS&quot; != &quot;up&quot; ]; then\n        echo &quot;WARNING: Replication link is down&quot;\n        exit 1\n    fi\nfi\n\necho &quot;OK: Redis is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# redis-backup.sh\n\nBACKUP_DIR=&quot;/backup/redis/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Create RDB backup\nredis-cli -a SecureRedisPassword123! bgsave\nsleep 5\n\n# Wait for background save to complete\nwhile [ &quot;$(redis-cli -a SecureRedisPassword123! lastsave)&quot; = &quot;$(redis-cli -a SecureRedisPassword123! lastsave)&quot; ]; do\n    sleep 1\ndone\n\n# Copy RDB file\ncp /var/lib/redis/dump.rdb &quot;$BACKUP_DIR/&quot;\n\n# Backup AOF file if enabled\nif [ -f /var/lib/redis/appendonly.aof ]; then\n    redis-cli -a SecureRedisPassword123! bgrewriteaof\n    sleep 5\n    cp /var/lib/redis/appendonly.aof &quot;$BACKUP_DIR/&quot;\nfi\n\n# Backup configuration\ncp /etc/redis/redis.conf &quot;$BACKUP_DIR/&quot;\n\n# Compress backup\ntar czf &quot;$BACKUP_DIR.tar.gz&quot; -C &quot;$(dirname &quot;$BACKUP_DIR&quot;)&quot; &quot;$(basename &quot;$BACKUP_DIR&quot;)&quot;\nrm -rf &quot;$BACKUP_DIR&quot;\n\necho &quot;Backup completed: $BACKUP_DIR.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# redis-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.tar.gz&gt;&quot;\n    exit 1\nfi\n\n# Stop Redis\nsudo systemctl stop redis\n\n# Extract backup\nBACKUP_DIR=&quot;/tmp/redis-restore-$(date +%s)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar xzf &quot;$BACKUP_FILE&quot; -C &quot;$BACKUP_DIR&quot; --strip-components=1\n\n# Restore RDB file\nif [ -f &quot;$BACKUP_DIR/dump.rdb&quot; ]; then\n    cp &quot;$BACKUP_DIR/dump.rdb&quot; /var/lib/redis/\n    chown redis:redis /var/lib/redis/dump.rdb\nfi\n\n# Restore AOF file\nif [ -f &quot;$BACKUP_DIR/appendonly.aof&quot; ]; then\n    cp &quot;$BACKUP_DIR/appendonly.aof&quot; /var/lib/redis/\n    chown redis:redis /var/lib/redis/appendonly.aof\nfi\n\n# Restore configuration\nif [ -f &quot;$BACKUP_DIR/redis.conf&quot; ]; then\n    cp &quot;$BACKUP_DIR/redis.conf&quot; /etc/redis/\nfi\n\n# Start Redis\nsudo systemctl start redis\n\n# Cleanup\nrm -rf &quot;$BACKUP_DIR&quot;\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"point-in-time-recovery\" class=\"mobile-header\">Point-in-Time Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# redis-pitr.sh\n\nRECOVERY_TIME=&quot;$1&quot;\nif [ -z &quot;$RECOVERY_TIME&quot; ]; then\n    echo &quot;Usage: $0 &lt;recovery-timestamp&gt;&quot;\n    echo &quot;Example: $0 1640995200&quot;\n    exit 1\nfi\n\n# Find appropriate backup\nBACKUP_FILE=$(find /backup/redis -name &quot;*.tar.gz&quot; -newer &quot;$RECOVERY_TIME&quot; | head -1)\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;No backup found for recovery time: $RECOVERY_TIME&quot;\n    exit 1\nfi\n\n# Restore backup\n./redis-restore.sh &quot;$BACKUP_FILE&quot;\n\n# Apply AOF logs from recovery point\nif [ -f /var/lib/redis/appendonly.aof ]; then\n    # Truncate AOF to recovery point\n    redis-check-aof --fix /var/lib/redis/appendonly.aof\nfi\n\necho &quot;Point-in-time recovery completed to $RECOVERY_TIME&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Redis won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u redis -f\nsudo tail -f /var/log/redis/redis-server.log\n\n# Check disk space\ndf -h /var/lib/redis\n\n# Check permissions\nls -la /var/lib/redis\n\n# Validate configuration\nredis-server --test-config</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Redis is listening\nsudo ss -tlnp | grep :6379\n\n# Test local connection\nredis-cli ping\nredis-cli -h 127.0.0.1 -p 6379 ping\n\n# Check authentication\nredis-cli -a SecureRedisPassword123! ping\n\n# Check bind address\nredis-cli config get bind</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check slow queries\nredis-cli slowlog get 10\n\n# Check memory usage\nredis-cli info memory\n\n# Check client connections\nredis-cli info clients\nredis-cli client list\n\n# Monitor latency\nredis-cli --latency-history -i 1</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start Redis with verbose logging\nredis-server /etc/redis/redis.conf --loglevel debug\n\n# Enable command logging\nredis-cli config set loglevel debug\n\n# Monitor all commands\nredis-cli monitor\n\n# Check server info\nredis-cli info all</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update redis\nsudo dnf update redis\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade redis-server\n\n# Arch Linux\nsudo pacman -Syu redis\n\n# Alpine Linux\napk update\napk upgrade redis\n\n# openSUSE\nsudo zypper update redis\n\n# FreeBSD\npkg update\npkg upgrade redis\n\n# Always backup before updates\n./redis-backup.sh\n\n# Restart after updates\nsudo systemctl restart redis</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# redis-maintenance.sh\n\n# Check memory usage\nMEMORY_INFO=$(redis-cli info memory)\necho &quot;Memory usage: $MEMORY_INFO&quot;\n\n# Clean up expired keys\nredis-cli eval &quot;return #redis.call(&#039;keys&#039;, ARGV[1])&quot; 0 &quot;*&quot;\n\n# Optimize RDB file\nredis-cli debug restart\n\n# Check slow queries\nSLOW_QUERIES=$(redis-cli slowlog len)\nif [ &quot;$SLOW_QUERIES&quot; -gt 0 ]; then\n    echo &quot;Found $SLOW_QUERIES slow queries&quot;\n    redis-cli slowlog get 5\nfi\n\n# Analyze key distribution\nredis-cli --bigkeys\n\n# Check replication lag (if slave)\nif redis-cli info replication | grep -q &quot;role:slave&quot;; then\n    redis-cli info replication | grep &quot;master_last_io_seconds_ago&quot;\nfi\n\necho &quot;Redis maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/redis-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/redis &lt;&lt;EOF\n/var/log/redis/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 redis redis\n    postrotate\n        systemctl reload redis\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Using redis-py\nimport redis\nimport json\n\n# Connect to Redis\nr = redis.Redis(\n    host=&#039;localhost&#039;,\n    port=6379,\n    password=&#039;SecureRedisPassword123!&#039;,\n    decode_responses=True\n)\n\n# Basic operations\nr.set(&#039;user:1000&#039;, json.dumps({&#039;name&#039;: &#039;John&#039;, &#039;age&#039;: 30}))\nuser_data = json.loads(r.get(&#039;user:1000&#039;))\n\n# Pipeline operations\npipe = r.pipeline()\npipe.set(&#039;key1&#039;, &#039;value1&#039;)\npipe.set(&#039;key2&#039;, &#039;value2&#039;)\npipe.incr(&#039;counter&#039;)\nresults = pipe.execute()\n\n# Pub/Sub\npubsub = r.pubsub()\npubsub.subscribe(&#039;notifications&#039;)\nfor message in pubsub.listen():\n    print(f&quot;Received: {message[&#039;data&#039;]}&quot;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using ioredis\nconst Redis = require(&#039;ioredis&#039;);\n\nconst redis = new Redis({\n    port: 6379,\n    host: &#039;localhost&#039;,\n    password: &#039;SecureRedisPassword123!&#039;,\n    retryDelayOnFailover: 100,\n    maxRetriesPerRequest: 3,\n});\n\n// Basic operations\nawait redis.set(&#039;session:abc123&#039;, JSON.stringify({userId: 1000}), &#039;EX&#039;, 3600);\nconst sessionData = JSON.parse(await redis.get(&#039;session:abc123&#039;));\n\n// Pipeline operations\nconst pipeline = redis.pipeline();\npipeline.hset(&#039;user:1000&#039;, &#039;name&#039;, &#039;John&#039;);\npipeline.hset(&#039;user:1000&#039;, &#039;email&#039;, &#039;john@example.com&#039;);\npipeline.expire(&#039;user:1000&#039;, 3600);\nawait pipeline.exec();\n\n// Cluster support\nconst cluster = new Redis.Cluster([\n    { host: &#039;127.0.0.1&#039;, port: 7000 },\n    { host: &#039;127.0.0.1&#039;, port: 7001 },\n    { host: &#039;127.0.0.1&#039;, port: 7002 }\n]);</code></pre>\n      </div>\n    </div>\n<h3 id=\"php-integration\" class=\"mobile-header\">PHP Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"php\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">php</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-php\">&lt;?php\n// Using Predis\nrequire_once &#039;vendor/autoload.php&#039;;\n\n$redis = new Predis\\Client([\n    &#039;scheme&#039; =&gt; &#039;tcp&#039;,\n    &#039;host&#039;   =&gt; &#039;127.0.0.1&#039;,\n    &#039;port&#039;   =&gt; 6379,\n    &#039;password&#039; =&gt; &#039;SecureRedisPassword123!&#039;,\n]);\n\n// Basic operations\n$redis-&gt;set(&#039;cache:product:1&#039;, json_encode([&#039;name&#039; =&gt; &#039;Laptop&#039;, &#039;price&#039; =&gt; 999.99]));\n$redis-&gt;expire(&#039;cache:product:1&#039;, 3600);\n$productData = json_decode($redis-&gt;get(&#039;cache:product:1&#039;), true);\n\n// Transaction\n$redis-&gt;multi();\n$redis-&gt;incr(&#039;page_views&#039;);\n$redis-&gt;lpush(&#039;recent_pages&#039;, &#039;/products/1&#039;);\n$redis-&gt;ltrim(&#039;recent_pages&#039;, 0, 99);\n$results = $redis-&gt;exec();\n?&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-integration\" class=\"mobile-header\">Java Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// Using Jedis\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\n// Connection pool\nJedisPoolConfig poolConfig = new JedisPoolConfig();\npoolConfig.setMaxTotal(50);\npoolConfig.setMaxIdle(20);\n\nJedisPool pool = new JedisPool(poolConfig, &quot;localhost&quot;, 6379, 2000, &quot;SecureRedisPassword123!&quot;);\n\n// Use connection\ntry (Jedis jedis = pool.getResource()) {\n    // Basic operations\n    jedis.set(&quot;user:1000&quot;, &quot;{\\&quot;name\\&quot;:\\&quot;John\\&quot;,\\&quot;age\\&quot;:30}&quot;);\n    jedis.expire(&quot;user:1000&quot;, 3600);\n    String userData = jedis.get(&quot;user:1000&quot;);\n    \n    // Pipeline operations\n    Pipeline pipeline = jedis.pipelined();\n    pipeline.hset(&quot;product:1&quot;, &quot;name&quot;, &quot;Laptop&quot;);\n    pipeline.hset(&quot;product:1&quot;, &quot;price&quot;, &quot;999.99&quot;);\n    pipeline.expire(&quot;product:1&quot;, 3600);\n    pipeline.sync();\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/documentation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Redis Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/commands\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Commands Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/modules\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Modules</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/topics/security\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Security Guidelines</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/topics/persistence\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Persistence</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/topics/replication\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Replication</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/tutorial/redis-cluster-tutorial\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Cluster Tutorial</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/topics/sentinel\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Sentinel Documentation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"16 min","wordCount":3119,"lastBuilt":"2025-09-14T03:53:51.259Z"}]},"__N_SSG":true}